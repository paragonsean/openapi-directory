/**
 * ComputeDiskAdminManagementClient
 * The Admin Compute Disk Management Client.
 *
 * The version of the OpenAPI document: 2018-07-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MigrationSubTaskProperties model module.
 * @module model/MigrationSubTaskProperties
 * @version 2018-07-30-preview
 */
class MigrationSubTaskProperties {
    /**
     * Constructs a new <code>MigrationSubTaskProperties</code>.
     * Disk migration child task properties.
     * @alias module:model/MigrationSubTaskProperties
     */
    constructor() { 
        
        MigrationSubTaskProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MigrationSubTaskProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MigrationSubTaskProperties} obj Optional instance to populate.
     * @return {module:model/MigrationSubTaskProperties} The populated <code>MigrationSubTaskProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MigrationSubTaskProperties();

            if (data.hasOwnProperty('diskId')) {
                obj['diskId'] = ApiClient.convertToType(data['diskId'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('migrationSubtaskStatus')) {
                obj['migrationSubtaskStatus'] = ApiClient.convertToType(data['migrationSubtaskStatus'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('sourceShare')) {
                obj['sourceShare'] = ApiClient.convertToType(data['sourceShare'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('targetDiskStateForMigration')) {
                obj['targetDiskStateForMigration'] = ApiClient.convertToType(data['targetDiskStateForMigration'], 'String');
            }
            if (data.hasOwnProperty('targetShare')) {
                obj['targetShare'] = ApiClient.convertToType(data['targetShare'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MigrationSubTaskProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MigrationSubTaskProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['diskId'] && !(typeof data['diskId'] === 'string' || data['diskId'] instanceof String)) {
            throw new Error("Expected the field `diskId` to be a primitive type in the JSON string but got " + data['diskId']);
        }
        // ensure the json data is a string
        if (data['migrationSubtaskStatus'] && !(typeof data['migrationSubtaskStatus'] === 'string' || data['migrationSubtaskStatus'] instanceof String)) {
            throw new Error("Expected the field `migrationSubtaskStatus` to be a primitive type in the JSON string but got " + data['migrationSubtaskStatus']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['sourceShare'] && !(typeof data['sourceShare'] === 'string' || data['sourceShare'] instanceof String)) {
            throw new Error("Expected the field `sourceShare` to be a primitive type in the JSON string but got " + data['sourceShare']);
        }
        // ensure the json data is a string
        if (data['targetDiskStateForMigration'] && !(typeof data['targetDiskStateForMigration'] === 'string' || data['targetDiskStateForMigration'] instanceof String)) {
            throw new Error("Expected the field `targetDiskStateForMigration` to be a primitive type in the JSON string but got " + data['targetDiskStateForMigration']);
        }
        // ensure the json data is a string
        if (data['targetShare'] && !(typeof data['targetShare'] === 'string' || data['targetShare'] instanceof String)) {
            throw new Error("Expected the field `targetShare` to be a primitive type in the JSON string but got " + data['targetShare']);
        }

        return true;
    }


}



/**
 * The id of disk.
 * @member {String} diskId
 */
MigrationSubTaskProperties.prototype['diskId'] = undefined;

/**
 * The task end time.
 * @member {Date} endTime
 */
MigrationSubTaskProperties.prototype['endTime'] = undefined;

/**
 * Migration child task status.
 * @member {module:model/MigrationSubTaskProperties.MigrationSubtaskStatusEnum} migrationSubtaskStatus
 */
MigrationSubTaskProperties.prototype['migrationSubtaskStatus'] = undefined;

/**
 * The reason of task failure.
 * @member {String} reason
 */
MigrationSubTaskProperties.prototype['reason'] = undefined;

/**
 * The source share of migration task.
 * @member {String} sourceShare
 */
MigrationSubTaskProperties.prototype['sourceShare'] = undefined;

/**
 * The task start time.
 * @member {Date} startTime
 */
MigrationSubTaskProperties.prototype['startTime'] = undefined;

/**
 * Disk State.
 * @member {module:model/MigrationSubTaskProperties.TargetDiskStateForMigrationEnum} targetDiskStateForMigration
 */
MigrationSubTaskProperties.prototype['targetDiskStateForMigration'] = undefined;

/**
 * The target share of migration task.
 * @member {String} targetShare
 */
MigrationSubTaskProperties.prototype['targetShare'] = undefined;





/**
 * Allowed values for the <code>migrationSubtaskStatus</code> property.
 * @enum {String}
 * @readonly
 */
MigrationSubTaskProperties['MigrationSubtaskStatusEnum'] = {

    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "Skipped"
     * @const
     */
    "Skipped": "Skipped"
};


/**
 * Allowed values for the <code>targetDiskStateForMigration</code> property.
 * @enum {String}
 * @readonly
 */
MigrationSubTaskProperties['TargetDiskStateForMigrationEnum'] = {

    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined",

    /**
     * value: "Unattached"
     * @const
     */
    "Unattached": "Unattached",

    /**
     * value: "Attached"
     * @const
     */
    "Attached": "Attached",

    /**
     * value: "Reserved"
     * @const
     */
    "Reserved": "Reserved",

    /**
     * value: "ActiveSAS"
     * @const
     */
    "ActiveSAS": "ActiveSAS",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "All"
     * @const
     */
    "All": "All",

    /**
     * value: "Recommended"
     * @const
     */
    "Recommended": "Recommended",

    /**
     * value: "OfflineMigration"
     * @const
     */
    "OfflineMigration": "OfflineMigration",

    /**
     * value: "OnlineMigration"
     * @const
     */
    "OnlineMigration": "OnlineMigration"
};



export default MigrationSubTaskProperties;

