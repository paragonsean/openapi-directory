/**
 * ComputeDiskAdminManagementClient
 * The Admin Compute Disk Management Client.
 *
 * The version of the OpenAPI document: 2018-07-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskMigrationJobProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskMigrationJobProperties::OAIDiskMigrationJobProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskMigrationJobProperties::OAIDiskMigrationJobProperties() {
    this->initializeModel();
}

OAIDiskMigrationJobProperties::~OAIDiskMigrationJobProperties() {}

void OAIDiskMigrationJobProperties::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_migration_id_isSet = false;
    m_migration_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subtasks_isSet = false;
    m_subtasks_isValid = false;

    m_target_share_isSet = false;
    m_target_share_isValid = false;
}

void OAIDiskMigrationJobProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskMigrationJobProperties::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_migration_id_isValid = ::OpenAPI::fromJsonValue(m_migration_id, json[QString("migrationId")]);
    m_migration_id_isSet = !json[QString("migrationId")].isNull() && m_migration_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subtasks_isValid = ::OpenAPI::fromJsonValue(m_subtasks, json[QString("subtasks")]);
    m_subtasks_isSet = !json[QString("subtasks")].isNull() && m_subtasks_isValid;

    m_target_share_isValid = ::OpenAPI::fromJsonValue(m_target_share, json[QString("targetShare")]);
    m_target_share_isSet = !json[QString("targetShare")].isNull() && m_target_share_isValid;
}

QString OAIDiskMigrationJobProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskMigrationJobProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_migration_id_isSet) {
        obj.insert(QString("migrationId"), ::OpenAPI::toJsonValue(m_migration_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subtasks.size() > 0) {
        obj.insert(QString("subtasks"), ::OpenAPI::toJsonValue(m_subtasks));
    }
    if (m_target_share_isSet) {
        obj.insert(QString("targetShare"), ::OpenAPI::toJsonValue(m_target_share));
    }
    return obj;
}

QDateTime OAIDiskMigrationJobProperties::getCreationTime() const {
    return m_creation_time;
}
void OAIDiskMigrationJobProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDiskMigrationJobProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDiskMigrationJobProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDiskMigrationJobProperties::getEndTime() const {
    return m_end_time;
}
void OAIDiskMigrationJobProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDiskMigrationJobProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDiskMigrationJobProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIDiskMigrationJobProperties::getMigrationId() const {
    return m_migration_id;
}
void OAIDiskMigrationJobProperties::setMigrationId(const QString &migration_id) {
    m_migration_id = migration_id;
    m_migration_id_isSet = true;
}

bool OAIDiskMigrationJobProperties::is_migration_id_Set() const{
    return m_migration_id_isSet;
}

bool OAIDiskMigrationJobProperties::is_migration_id_Valid() const{
    return m_migration_id_isValid;
}

QDateTime OAIDiskMigrationJobProperties::getStartTime() const {
    return m_start_time;
}
void OAIDiskMigrationJobProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDiskMigrationJobProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDiskMigrationJobProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIDiskMigrationJobProperties::getStatus() const {
    return m_status;
}
void OAIDiskMigrationJobProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDiskMigrationJobProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDiskMigrationJobProperties::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIDiskMigrationJobs_List_200_response_value_inner_properties_subtasks_inner> OAIDiskMigrationJobProperties::getSubtasks() const {
    return m_subtasks;
}
void OAIDiskMigrationJobProperties::setSubtasks(const QList<OAIDiskMigrationJobs_List_200_response_value_inner_properties_subtasks_inner> &subtasks) {
    m_subtasks = subtasks;
    m_subtasks_isSet = true;
}

bool OAIDiskMigrationJobProperties::is_subtasks_Set() const{
    return m_subtasks_isSet;
}

bool OAIDiskMigrationJobProperties::is_subtasks_Valid() const{
    return m_subtasks_isValid;
}

QString OAIDiskMigrationJobProperties::getTargetShare() const {
    return m_target_share;
}
void OAIDiskMigrationJobProperties::setTargetShare(const QString &target_share) {
    m_target_share = target_share;
    m_target_share_isSet = true;
}

bool OAIDiskMigrationJobProperties::is_target_share_Set() const{
    return m_target_share_isSet;
}

bool OAIDiskMigrationJobProperties::is_target_share_Valid() const{
    return m_target_share_isValid;
}

bool OAIDiskMigrationJobProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtasks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_share_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskMigrationJobProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
