/**
 * ComputeDiskAdminManagementClient
 * The Admin Compute Disk Management Client.
 *
 * The version of the OpenAPI document: 2018-07-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskMigrationJobs_Create_request_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskMigrationJobs_Create_request_inner_properties::OAIDiskMigrationJobs_Create_request_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskMigrationJobs_Create_request_inner_properties::OAIDiskMigrationJobs_Create_request_inner_properties() {
    this->initializeModel();
}

OAIDiskMigrationJobs_Create_request_inner_properties::~OAIDiskMigrationJobs_Create_request_inner_properties() {}

void OAIDiskMigrationJobs_Create_request_inner_properties::initializeModel() {

    m_actual_size_gb_isSet = false;
    m_actual_size_gb_isValid = false;

    m_disk_id_isSet = false;
    m_disk_id_isValid = false;

    m_disk_sku_isSet = false;
    m_disk_sku_isValid = false;

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;

    m_managed_by_isSet = false;
    m_managed_by_isValid = false;

    m_provision_size_gb_isSet = false;
    m_provision_size_gb_isValid = false;

    m_share_path_isSet = false;
    m_share_path_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_user_resource_id_isSet = false;
    m_user_resource_id_isValid = false;
}

void OAIDiskMigrationJobs_Create_request_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskMigrationJobs_Create_request_inner_properties::fromJsonObject(QJsonObject json) {

    m_actual_size_gb_isValid = ::OpenAPI::fromJsonValue(m_actual_size_gb, json[QString("actualSizeGB")]);
    m_actual_size_gb_isSet = !json[QString("actualSizeGB")].isNull() && m_actual_size_gb_isValid;

    m_disk_id_isValid = ::OpenAPI::fromJsonValue(m_disk_id, json[QString("diskId")]);
    m_disk_id_isSet = !json[QString("diskId")].isNull() && m_disk_id_isValid;

    m_disk_sku_isValid = ::OpenAPI::fromJsonValue(m_disk_sku, json[QString("diskSku")]);
    m_disk_sku_isSet = !json[QString("diskSku")].isNull() && m_disk_sku_isValid;

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;

    m_managed_by_isValid = ::OpenAPI::fromJsonValue(m_managed_by, json[QString("managedBy")]);
    m_managed_by_isSet = !json[QString("managedBy")].isNull() && m_managed_by_isValid;

    m_provision_size_gb_isValid = ::OpenAPI::fromJsonValue(m_provision_size_gb, json[QString("provisionSizeGB")]);
    m_provision_size_gb_isSet = !json[QString("provisionSizeGB")].isNull() && m_provision_size_gb_isValid;

    m_share_path_isValid = ::OpenAPI::fromJsonValue(m_share_path, json[QString("sharePath")]);
    m_share_path_isSet = !json[QString("sharePath")].isNull() && m_share_path_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_user_resource_id_isValid = ::OpenAPI::fromJsonValue(m_user_resource_id, json[QString("userResourceId")]);
    m_user_resource_id_isSet = !json[QString("userResourceId")].isNull() && m_user_resource_id_isValid;
}

QString OAIDiskMigrationJobs_Create_request_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskMigrationJobs_Create_request_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_size_gb_isSet) {
        obj.insert(QString("actualSizeGB"), ::OpenAPI::toJsonValue(m_actual_size_gb));
    }
    if (m_disk_id_isSet) {
        obj.insert(QString("diskId"), ::OpenAPI::toJsonValue(m_disk_id));
    }
    if (m_disk_sku_isSet) {
        obj.insert(QString("diskSku"), ::OpenAPI::toJsonValue(m_disk_sku));
    }
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    if (m_managed_by_isSet) {
        obj.insert(QString("managedBy"), ::OpenAPI::toJsonValue(m_managed_by));
    }
    if (m_provision_size_gb_isSet) {
        obj.insert(QString("provisionSizeGB"), ::OpenAPI::toJsonValue(m_provision_size_gb));
    }
    if (m_share_path_isSet) {
        obj.insert(QString("sharePath"), ::OpenAPI::toJsonValue(m_share_path));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_user_resource_id_isSet) {
        obj.insert(QString("userResourceId"), ::OpenAPI::toJsonValue(m_user_resource_id));
    }
    return obj;
}

qint64 OAIDiskMigrationJobs_Create_request_inner_properties::getActualSizeGb() const {
    return m_actual_size_gb;
}
void OAIDiskMigrationJobs_Create_request_inner_properties::setActualSizeGb(const qint64 &actual_size_gb) {
    m_actual_size_gb = actual_size_gb;
    m_actual_size_gb_isSet = true;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_actual_size_gb_Set() const{
    return m_actual_size_gb_isSet;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_actual_size_gb_Valid() const{
    return m_actual_size_gb_isValid;
}

QString OAIDiskMigrationJobs_Create_request_inner_properties::getDiskId() const {
    return m_disk_id;
}
void OAIDiskMigrationJobs_Create_request_inner_properties::setDiskId(const QString &disk_id) {
    m_disk_id = disk_id;
    m_disk_id_isSet = true;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_disk_id_Set() const{
    return m_disk_id_isSet;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_disk_id_Valid() const{
    return m_disk_id_isValid;
}

QString OAIDiskMigrationJobs_Create_request_inner_properties::getDiskSku() const {
    return m_disk_sku;
}
void OAIDiskMigrationJobs_Create_request_inner_properties::setDiskSku(const QString &disk_sku) {
    m_disk_sku = disk_sku;
    m_disk_sku_isSet = true;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_disk_sku_Set() const{
    return m_disk_sku_isSet;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_disk_sku_Valid() const{
    return m_disk_sku_isValid;
}

QString OAIDiskMigrationJobs_Create_request_inner_properties::getDiskType() const {
    return m_disk_type;
}
void OAIDiskMigrationJobs_Create_request_inner_properties::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

QString OAIDiskMigrationJobs_Create_request_inner_properties::getManagedBy() const {
    return m_managed_by;
}
void OAIDiskMigrationJobs_Create_request_inner_properties::setManagedBy(const QString &managed_by) {
    m_managed_by = managed_by;
    m_managed_by_isSet = true;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_managed_by_Set() const{
    return m_managed_by_isSet;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_managed_by_Valid() const{
    return m_managed_by_isValid;
}

qint64 OAIDiskMigrationJobs_Create_request_inner_properties::getProvisionSizeGb() const {
    return m_provision_size_gb;
}
void OAIDiskMigrationJobs_Create_request_inner_properties::setProvisionSizeGb(const qint64 &provision_size_gb) {
    m_provision_size_gb = provision_size_gb;
    m_provision_size_gb_isSet = true;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_provision_size_gb_Set() const{
    return m_provision_size_gb_isSet;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_provision_size_gb_Valid() const{
    return m_provision_size_gb_isValid;
}

QString OAIDiskMigrationJobs_Create_request_inner_properties::getSharePath() const {
    return m_share_path;
}
void OAIDiskMigrationJobs_Create_request_inner_properties::setSharePath(const QString &share_path) {
    m_share_path = share_path;
    m_share_path_isSet = true;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_share_path_Set() const{
    return m_share_path_isSet;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_share_path_Valid() const{
    return m_share_path_isValid;
}

QString OAIDiskMigrationJobs_Create_request_inner_properties::getStatus() const {
    return m_status;
}
void OAIDiskMigrationJobs_Create_request_inner_properties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDiskMigrationJobs_Create_request_inner_properties::getUserResourceId() const {
    return m_user_resource_id;
}
void OAIDiskMigrationJobs_Create_request_inner_properties::setUserResourceId(const QString &user_resource_id) {
    m_user_resource_id = user_resource_id;
    m_user_resource_id_isSet = true;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_user_resource_id_Set() const{
    return m_user_resource_id_isSet;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::is_user_resource_id_Valid() const{
    return m_user_resource_id_isValid;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskMigrationJobs_Create_request_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
