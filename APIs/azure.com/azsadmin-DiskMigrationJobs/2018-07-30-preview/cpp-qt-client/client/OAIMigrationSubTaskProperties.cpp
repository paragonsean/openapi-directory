/**
 * ComputeDiskAdminManagementClient
 * The Admin Compute Disk Management Client.
 *
 * The version of the OpenAPI document: 2018-07-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrationSubTaskProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrationSubTaskProperties::OAIMigrationSubTaskProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrationSubTaskProperties::OAIMigrationSubTaskProperties() {
    this->initializeModel();
}

OAIMigrationSubTaskProperties::~OAIMigrationSubTaskProperties() {}

void OAIMigrationSubTaskProperties::initializeModel() {

    m_disk_id_isSet = false;
    m_disk_id_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_migration_subtask_status_isSet = false;
    m_migration_subtask_status_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_source_share_isSet = false;
    m_source_share_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_target_disk_state_for_migration_isSet = false;
    m_target_disk_state_for_migration_isValid = false;

    m_target_share_isSet = false;
    m_target_share_isValid = false;
}

void OAIMigrationSubTaskProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrationSubTaskProperties::fromJsonObject(QJsonObject json) {

    m_disk_id_isValid = ::OpenAPI::fromJsonValue(m_disk_id, json[QString("diskId")]);
    m_disk_id_isSet = !json[QString("diskId")].isNull() && m_disk_id_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_migration_subtask_status_isValid = ::OpenAPI::fromJsonValue(m_migration_subtask_status, json[QString("migrationSubtaskStatus")]);
    m_migration_subtask_status_isSet = !json[QString("migrationSubtaskStatus")].isNull() && m_migration_subtask_status_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_source_share_isValid = ::OpenAPI::fromJsonValue(m_source_share, json[QString("sourceShare")]);
    m_source_share_isSet = !json[QString("sourceShare")].isNull() && m_source_share_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_target_disk_state_for_migration_isValid = ::OpenAPI::fromJsonValue(m_target_disk_state_for_migration, json[QString("targetDiskStateForMigration")]);
    m_target_disk_state_for_migration_isSet = !json[QString("targetDiskStateForMigration")].isNull() && m_target_disk_state_for_migration_isValid;

    m_target_share_isValid = ::OpenAPI::fromJsonValue(m_target_share, json[QString("targetShare")]);
    m_target_share_isSet = !json[QString("targetShare")].isNull() && m_target_share_isValid;
}

QString OAIMigrationSubTaskProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrationSubTaskProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_id_isSet) {
        obj.insert(QString("diskId"), ::OpenAPI::toJsonValue(m_disk_id));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_migration_subtask_status_isSet) {
        obj.insert(QString("migrationSubtaskStatus"), ::OpenAPI::toJsonValue(m_migration_subtask_status));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_source_share_isSet) {
        obj.insert(QString("sourceShare"), ::OpenAPI::toJsonValue(m_source_share));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_target_disk_state_for_migration_isSet) {
        obj.insert(QString("targetDiskStateForMigration"), ::OpenAPI::toJsonValue(m_target_disk_state_for_migration));
    }
    if (m_target_share_isSet) {
        obj.insert(QString("targetShare"), ::OpenAPI::toJsonValue(m_target_share));
    }
    return obj;
}

QString OAIMigrationSubTaskProperties::getDiskId() const {
    return m_disk_id;
}
void OAIMigrationSubTaskProperties::setDiskId(const QString &disk_id) {
    m_disk_id = disk_id;
    m_disk_id_isSet = true;
}

bool OAIMigrationSubTaskProperties::is_disk_id_Set() const{
    return m_disk_id_isSet;
}

bool OAIMigrationSubTaskProperties::is_disk_id_Valid() const{
    return m_disk_id_isValid;
}

QDateTime OAIMigrationSubTaskProperties::getEndTime() const {
    return m_end_time;
}
void OAIMigrationSubTaskProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIMigrationSubTaskProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIMigrationSubTaskProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIMigrationSubTaskProperties::getMigrationSubtaskStatus() const {
    return m_migration_subtask_status;
}
void OAIMigrationSubTaskProperties::setMigrationSubtaskStatus(const QString &migration_subtask_status) {
    m_migration_subtask_status = migration_subtask_status;
    m_migration_subtask_status_isSet = true;
}

bool OAIMigrationSubTaskProperties::is_migration_subtask_status_Set() const{
    return m_migration_subtask_status_isSet;
}

bool OAIMigrationSubTaskProperties::is_migration_subtask_status_Valid() const{
    return m_migration_subtask_status_isValid;
}

QString OAIMigrationSubTaskProperties::getReason() const {
    return m_reason;
}
void OAIMigrationSubTaskProperties::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIMigrationSubTaskProperties::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIMigrationSubTaskProperties::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIMigrationSubTaskProperties::getSourceShare() const {
    return m_source_share;
}
void OAIMigrationSubTaskProperties::setSourceShare(const QString &source_share) {
    m_source_share = source_share;
    m_source_share_isSet = true;
}

bool OAIMigrationSubTaskProperties::is_source_share_Set() const{
    return m_source_share_isSet;
}

bool OAIMigrationSubTaskProperties::is_source_share_Valid() const{
    return m_source_share_isValid;
}

QDateTime OAIMigrationSubTaskProperties::getStartTime() const {
    return m_start_time;
}
void OAIMigrationSubTaskProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIMigrationSubTaskProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIMigrationSubTaskProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIMigrationSubTaskProperties::getTargetDiskStateForMigration() const {
    return m_target_disk_state_for_migration;
}
void OAIMigrationSubTaskProperties::setTargetDiskStateForMigration(const QString &target_disk_state_for_migration) {
    m_target_disk_state_for_migration = target_disk_state_for_migration;
    m_target_disk_state_for_migration_isSet = true;
}

bool OAIMigrationSubTaskProperties::is_target_disk_state_for_migration_Set() const{
    return m_target_disk_state_for_migration_isSet;
}

bool OAIMigrationSubTaskProperties::is_target_disk_state_for_migration_Valid() const{
    return m_target_disk_state_for_migration_isValid;
}

QString OAIMigrationSubTaskProperties::getTargetShare() const {
    return m_target_share;
}
void OAIMigrationSubTaskProperties::setTargetShare(const QString &target_share) {
    m_target_share = target_share;
    m_target_share_isSet = true;
}

bool OAIMigrationSubTaskProperties::is_target_share_Set() const{
    return m_target_share_isSet;
}

bool OAIMigrationSubTaskProperties::is_target_share_Valid() const{
    return m_target_share_isValid;
}

bool OAIMigrationSubTaskProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_subtask_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_disk_state_for_migration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_share_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrationSubTaskProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
