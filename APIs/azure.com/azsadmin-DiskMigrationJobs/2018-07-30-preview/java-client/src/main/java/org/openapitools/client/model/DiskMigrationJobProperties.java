/*
 * ComputeDiskAdminManagementClient
 * The Admin Compute Disk Management Client.
 *
 * The version of the OpenAPI document: 2018-07-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Disk migration job properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:47.192365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiskMigrationJobProperties {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_MIGRATION_ID = "migrationId";
  @SerializedName(SERIALIZED_NAME_MIGRATION_ID)
  private String migrationId;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  /**
   * Migration job status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNDEFINED("Undefined"),
    
    RUNNING("Running"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled"),
    
    PENDING("Pending");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBTASKS = "subtasks";
  @SerializedName(SERIALIZED_NAME_SUBTASKS)
  private List<DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInner> subtasks = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_SHARE = "targetShare";
  @SerializedName(SERIALIZED_NAME_TARGET_SHARE)
  private String targetShare;

  public DiskMigrationJobProperties() {
  }

  public DiskMigrationJobProperties(
     OffsetDateTime creationTime, 
     OffsetDateTime endTime, 
     OffsetDateTime startTime, 
     String targetShare
  ) {
    this();
    this.creationTime = creationTime;
    this.endTime = endTime;
    this.startTime = startTime;
    this.targetShare = targetShare;
  }

  /**
   * The job creation time.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }



  /**
   * The job end time.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }



  public DiskMigrationJobProperties migrationId(String migrationId) {
    this.migrationId = migrationId;
    return this;
  }

  /**
   * The disk migration id.
   * @return migrationId
   */
  @javax.annotation.Nullable
  public String getMigrationId() {
    return migrationId;
  }

  public void setMigrationId(String migrationId) {
    this.migrationId = migrationId;
  }


  /**
   * The job start time.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  public DiskMigrationJobProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Migration job status.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public DiskMigrationJobProperties subtasks(List<DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInner> subtasks) {
    this.subtasks = subtasks;
    return this;
  }

  public DiskMigrationJobProperties addSubtasksItem(DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInner subtasksItem) {
    if (this.subtasks == null) {
      this.subtasks = new ArrayList<>();
    }
    this.subtasks.add(subtasksItem);
    return this;
  }

  /**
   * List of disk migration tasks.
   * @return subtasks
   */
  @javax.annotation.Nullable
  public List<DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInner> getSubtasks() {
    return subtasks;
  }

  public void setSubtasks(List<DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInner> subtasks) {
    this.subtasks = subtasks;
  }


  /**
   * The target share of migration job.
   * @return targetShare
   */
  @javax.annotation.Nullable
  public String getTargetShare() {
    return targetShare;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiskMigrationJobProperties diskMigrationJobProperties = (DiskMigrationJobProperties) o;
    return Objects.equals(this.creationTime, diskMigrationJobProperties.creationTime) &&
        Objects.equals(this.endTime, diskMigrationJobProperties.endTime) &&
        Objects.equals(this.migrationId, diskMigrationJobProperties.migrationId) &&
        Objects.equals(this.startTime, diskMigrationJobProperties.startTime) &&
        Objects.equals(this.status, diskMigrationJobProperties.status) &&
        Objects.equals(this.subtasks, diskMigrationJobProperties.subtasks) &&
        Objects.equals(this.targetShare, diskMigrationJobProperties.targetShare);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, endTime, migrationId, startTime, status, subtasks, targetShare);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiskMigrationJobProperties {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    migrationId: ").append(toIndentedString(migrationId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subtasks: ").append(toIndentedString(subtasks)).append("\n");
    sb.append("    targetShare: ").append(toIndentedString(targetShare)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("endTime");
    openapiFields.add("migrationId");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("subtasks");
    openapiFields.add("targetShare");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiskMigrationJobProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiskMigrationJobProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiskMigrationJobProperties is not found in the empty JSON string", DiskMigrationJobProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiskMigrationJobProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiskMigrationJobProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("migrationId") != null && !jsonObj.get("migrationId").isJsonNull()) && !jsonObj.get("migrationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("subtasks") != null && !jsonObj.get("subtasks").isJsonNull()) {
        JsonArray jsonArraysubtasks = jsonObj.getAsJsonArray("subtasks");
        if (jsonArraysubtasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subtasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subtasks` to be an array in the JSON string but got `%s`", jsonObj.get("subtasks").toString()));
          }

          // validate the optional field `subtasks` (array)
          for (int i = 0; i < jsonArraysubtasks.size(); i++) {
            DiskMigrationJobsList200ResponseValueInnerPropertiesSubtasksInner.validateJsonElement(jsonArraysubtasks.get(i));
          };
        }
      }
      if ((jsonObj.get("targetShare") != null && !jsonObj.get("targetShare").isJsonNull()) && !jsonObj.get("targetShare").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetShare` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetShare").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiskMigrationJobProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiskMigrationJobProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiskMigrationJobProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiskMigrationJobProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DiskMigrationJobProperties>() {
           @Override
           public void write(JsonWriter out, DiskMigrationJobProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiskMigrationJobProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiskMigrationJobProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiskMigrationJobProperties
   * @throws IOException if the JSON string is invalid with respect to DiskMigrationJobProperties
   */
  public static DiskMigrationJobProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiskMigrationJobProperties.class);
  }

  /**
   * Convert an instance of DiskMigrationJobProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

