/*
 * ComputeDiskAdminManagementClient
 * The Admin Compute Disk Management Client.
 *
 * The version of the OpenAPI document: 2018-07-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Managed disk properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:47.192365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiskMigrationJobsCreateRequestInnerProperties {
  public static final String SERIALIZED_NAME_ACTUAL_SIZE_G_B = "actualSizeGB";
  @SerializedName(SERIALIZED_NAME_ACTUAL_SIZE_G_B)
  private Long actualSizeGB;

  public static final String SERIALIZED_NAME_DISK_ID = "diskId";
  @SerializedName(SERIALIZED_NAME_DISK_ID)
  private String diskId;

  /**
   * Disk Sku.
   */
  @JsonAdapter(DiskSkuEnum.Adapter.class)
  public enum DiskSkuEnum {
    STANDARD_LRS("Standard_LRS"),
    
    STANDARD_ZRS("Standard_ZRS"),
    
    STANDARD_GRS("Standard_GRS"),
    
    STANDARD_RAGRS("Standard_RAGRS"),
    
    PREMIUM_LRS("Premium_LRS"),
    
    STANDARD_SSD_LRS("StandardSSD_LRS"),
    
    ULTRA_SSD_LRS("UltraSSD_LRS");

    private String value;

    DiskSkuEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiskSkuEnum fromValue(String value) {
      for (DiskSkuEnum b : DiskSkuEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DiskSkuEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiskSkuEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiskSkuEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiskSkuEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DiskSkuEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISK_SKU = "diskSku";
  @SerializedName(SERIALIZED_NAME_DISK_SKU)
  private DiskSkuEnum diskSku;

  /**
   * Disk resource type.
   */
  @JsonAdapter(DiskTypeEnum.Adapter.class)
  public enum DiskTypeEnum {
    UNDEFINED("Undefined"),
    
    DISK("Disk"),
    
    SNAPSHOT("Snapshot"),
    
    RESTORE_POINT("RestorePoint"),
    
    MANAGED_BLOB("ManagedBlob");

    private String value;

    DiskTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiskTypeEnum fromValue(String value) {
      for (DiskTypeEnum b : DiskTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DiskTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiskTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiskTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiskTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DiskTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISK_TYPE = "diskType";
  @SerializedName(SERIALIZED_NAME_DISK_TYPE)
  private DiskTypeEnum diskType;

  public static final String SERIALIZED_NAME_MANAGED_BY = "managedBy";
  @SerializedName(SERIALIZED_NAME_MANAGED_BY)
  private String managedBy;

  public static final String SERIALIZED_NAME_PROVISION_SIZE_G_B = "provisionSizeGB";
  @SerializedName(SERIALIZED_NAME_PROVISION_SIZE_G_B)
  private Long provisionSizeGB;

  public static final String SERIALIZED_NAME_SHARE_PATH = "sharePath";
  @SerializedName(SERIALIZED_NAME_SHARE_PATH)
  private String sharePath;

  /**
   * Disk State.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNDEFINED("Undefined"),
    
    UNATTACHED("Unattached"),
    
    ATTACHED("Attached"),
    
    RESERVED("Reserved"),
    
    ACTIVE_SAS("ActiveSAS"),
    
    UNKNOWN("Unknown"),
    
    ALL("All"),
    
    RECOMMENDED("Recommended"),
    
    OFFLINE_MIGRATION("OfflineMigration"),
    
    ONLINE_MIGRATION("OnlineMigration");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_USER_RESOURCE_ID = "userResourceId";
  @SerializedName(SERIALIZED_NAME_USER_RESOURCE_ID)
  private String userResourceId;

  public DiskMigrationJobsCreateRequestInnerProperties() {
  }

  public DiskMigrationJobsCreateRequestInnerProperties(
     Long actualSizeGB, 
     String managedBy, 
     Long provisionSizeGB, 
     String userResourceId
  ) {
    this();
    this.actualSizeGB = actualSizeGB;
    this.managedBy = managedBy;
    this.provisionSizeGB = provisionSizeGB;
    this.userResourceId = userResourceId;
  }

  /**
   * The actual size of disk in GB.
   * @return actualSizeGB
   */
  @javax.annotation.Nullable
  public Long getActualSizeGB() {
    return actualSizeGB;
  }



  public DiskMigrationJobsCreateRequestInnerProperties diskId(String diskId) {
    this.diskId = diskId;
    return this;
  }

  /**
   * The disk id.
   * @return diskId
   */
  @javax.annotation.Nullable
  public String getDiskId() {
    return diskId;
  }

  public void setDiskId(String diskId) {
    this.diskId = diskId;
  }


  public DiskMigrationJobsCreateRequestInnerProperties diskSku(DiskSkuEnum diskSku) {
    this.diskSku = diskSku;
    return this;
  }

  /**
   * Disk Sku.
   * @return diskSku
   */
  @javax.annotation.Nullable
  public DiskSkuEnum getDiskSku() {
    return diskSku;
  }

  public void setDiskSku(DiskSkuEnum diskSku) {
    this.diskSku = diskSku;
  }


  public DiskMigrationJobsCreateRequestInnerProperties diskType(DiskTypeEnum diskType) {
    this.diskType = diskType;
    return this;
  }

  /**
   * Disk resource type.
   * @return diskType
   */
  @javax.annotation.Nullable
  public DiskTypeEnum getDiskType() {
    return diskType;
  }

  public void setDiskType(DiskTypeEnum diskType) {
    this.diskType = diskType;
  }


  /**
   * Compute resource Uri which owns this disk.
   * @return managedBy
   */
  @javax.annotation.Nullable
  public String getManagedBy() {
    return managedBy;
  }



  /**
   * The provision size of disk in GB.
   * @return provisionSizeGB
   */
  @javax.annotation.Nullable
  public Long getProvisionSizeGB() {
    return provisionSizeGB;
  }



  public DiskMigrationJobsCreateRequestInnerProperties sharePath(String sharePath) {
    this.sharePath = sharePath;
    return this;
  }

  /**
   * The disk share path.
   * @return sharePath
   */
  @javax.annotation.Nullable
  public String getSharePath() {
    return sharePath;
  }

  public void setSharePath(String sharePath) {
    this.sharePath = sharePath;
  }


  public DiskMigrationJobsCreateRequestInnerProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Disk State.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  /**
   * The disk resource Uri from user view.
   * @return userResourceId
   */
  @javax.annotation.Nullable
  public String getUserResourceId() {
    return userResourceId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiskMigrationJobsCreateRequestInnerProperties diskMigrationJobsCreateRequestInnerProperties = (DiskMigrationJobsCreateRequestInnerProperties) o;
    return Objects.equals(this.actualSizeGB, diskMigrationJobsCreateRequestInnerProperties.actualSizeGB) &&
        Objects.equals(this.diskId, diskMigrationJobsCreateRequestInnerProperties.diskId) &&
        Objects.equals(this.diskSku, diskMigrationJobsCreateRequestInnerProperties.diskSku) &&
        Objects.equals(this.diskType, diskMigrationJobsCreateRequestInnerProperties.diskType) &&
        Objects.equals(this.managedBy, diskMigrationJobsCreateRequestInnerProperties.managedBy) &&
        Objects.equals(this.provisionSizeGB, diskMigrationJobsCreateRequestInnerProperties.provisionSizeGB) &&
        Objects.equals(this.sharePath, diskMigrationJobsCreateRequestInnerProperties.sharePath) &&
        Objects.equals(this.status, diskMigrationJobsCreateRequestInnerProperties.status) &&
        Objects.equals(this.userResourceId, diskMigrationJobsCreateRequestInnerProperties.userResourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualSizeGB, diskId, diskSku, diskType, managedBy, provisionSizeGB, sharePath, status, userResourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiskMigrationJobsCreateRequestInnerProperties {\n");
    sb.append("    actualSizeGB: ").append(toIndentedString(actualSizeGB)).append("\n");
    sb.append("    diskId: ").append(toIndentedString(diskId)).append("\n");
    sb.append("    diskSku: ").append(toIndentedString(diskSku)).append("\n");
    sb.append("    diskType: ").append(toIndentedString(diskType)).append("\n");
    sb.append("    managedBy: ").append(toIndentedString(managedBy)).append("\n");
    sb.append("    provisionSizeGB: ").append(toIndentedString(provisionSizeGB)).append("\n");
    sb.append("    sharePath: ").append(toIndentedString(sharePath)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    userResourceId: ").append(toIndentedString(userResourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actualSizeGB");
    openapiFields.add("diskId");
    openapiFields.add("diskSku");
    openapiFields.add("diskType");
    openapiFields.add("managedBy");
    openapiFields.add("provisionSizeGB");
    openapiFields.add("sharePath");
    openapiFields.add("status");
    openapiFields.add("userResourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiskMigrationJobsCreateRequestInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiskMigrationJobsCreateRequestInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiskMigrationJobsCreateRequestInnerProperties is not found in the empty JSON string", DiskMigrationJobsCreateRequestInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiskMigrationJobsCreateRequestInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiskMigrationJobsCreateRequestInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("diskId") != null && !jsonObj.get("diskId").isJsonNull()) && !jsonObj.get("diskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskId").toString()));
      }
      if ((jsonObj.get("diskSku") != null && !jsonObj.get("diskSku").isJsonNull()) && !jsonObj.get("diskSku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskSku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskSku").toString()));
      }
      // validate the optional field `diskSku`
      if (jsonObj.get("diskSku") != null && !jsonObj.get("diskSku").isJsonNull()) {
        DiskSkuEnum.validateJsonElement(jsonObj.get("diskSku"));
      }
      if ((jsonObj.get("diskType") != null && !jsonObj.get("diskType").isJsonNull()) && !jsonObj.get("diskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskType").toString()));
      }
      // validate the optional field `diskType`
      if (jsonObj.get("diskType") != null && !jsonObj.get("diskType").isJsonNull()) {
        DiskTypeEnum.validateJsonElement(jsonObj.get("diskType"));
      }
      if ((jsonObj.get("managedBy") != null && !jsonObj.get("managedBy").isJsonNull()) && !jsonObj.get("managedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managedBy").toString()));
      }
      if ((jsonObj.get("sharePath") != null && !jsonObj.get("sharePath").isJsonNull()) && !jsonObj.get("sharePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharePath").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("userResourceId") != null && !jsonObj.get("userResourceId").isJsonNull()) && !jsonObj.get("userResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userResourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiskMigrationJobsCreateRequestInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiskMigrationJobsCreateRequestInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiskMigrationJobsCreateRequestInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiskMigrationJobsCreateRequestInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DiskMigrationJobsCreateRequestInnerProperties>() {
           @Override
           public void write(JsonWriter out, DiskMigrationJobsCreateRequestInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiskMigrationJobsCreateRequestInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiskMigrationJobsCreateRequestInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiskMigrationJobsCreateRequestInnerProperties
   * @throws IOException if the JSON string is invalid with respect to DiskMigrationJobsCreateRequestInnerProperties
   */
  public static DiskMigrationJobsCreateRequestInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiskMigrationJobsCreateRequestInnerProperties.class);
  }

  /**
   * Convert an instance of DiskMigrationJobsCreateRequestInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

