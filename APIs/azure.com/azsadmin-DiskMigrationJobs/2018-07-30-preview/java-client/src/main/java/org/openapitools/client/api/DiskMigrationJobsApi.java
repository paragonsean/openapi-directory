/*
 * ComputeDiskAdminManagementClient
 * The Admin Compute Disk Management Client.
 *
 * The version of the OpenAPI document: 2018-07-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DiskMigrationJobsCreateRequestInner;
import org.openapitools.client.model.DiskMigrationJobsGet200Response;
import org.openapitools.client.model.DiskMigrationJobsList200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DiskMigrationJobsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DiskMigrationJobsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DiskMigrationJobsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for diskMigrationJobsCancel
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param migrationId The migration job guid name. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK --  Disk migration job cancellation is called. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diskMigrationJobsCancelCall(String subscriptionId, String location, String migrationId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/diskmigrationjobs/{migrationId}/Cancel"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "migrationId" + "}", localVarApiClient.escapeString(migrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diskMigrationJobsCancelValidateBeforeCall(String subscriptionId, String location, String migrationId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diskMigrationJobsCancel(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling diskMigrationJobsCancel(Async)");
        }

        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling diskMigrationJobsCancel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diskMigrationJobsCancel(Async)");
        }

        return diskMigrationJobsCancelCall(subscriptionId, location, migrationId, apiVersion, _callback);

    }

    /**
     * 
     * Cancel a disk migration job.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param migrationId The migration job guid name. (required)
     * @param apiVersion Client API Version. (required)
     * @return DiskMigrationJobsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK --  Disk migration job cancellation is called. </td><td>  -  </td></tr>
     </table>
     */
    public DiskMigrationJobsGet200Response diskMigrationJobsCancel(String subscriptionId, String location, String migrationId, String apiVersion) throws ApiException {
        ApiResponse<DiskMigrationJobsGet200Response> localVarResp = diskMigrationJobsCancelWithHttpInfo(subscriptionId, location, migrationId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancel a disk migration job.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param migrationId The migration job guid name. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;DiskMigrationJobsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK --  Disk migration job cancellation is called. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiskMigrationJobsGet200Response> diskMigrationJobsCancelWithHttpInfo(String subscriptionId, String location, String migrationId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diskMigrationJobsCancelValidateBeforeCall(subscriptionId, location, migrationId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DiskMigrationJobsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancel a disk migration job.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param migrationId The migration job guid name. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK --  Disk migration job cancellation is called. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diskMigrationJobsCancelAsync(String subscriptionId, String location, String migrationId, String apiVersion, final ApiCallback<DiskMigrationJobsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = diskMigrationJobsCancelValidateBeforeCall(subscriptionId, location, migrationId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DiskMigrationJobsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diskMigrationJobsCreate
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param migrationId The migration job guid name. (required)
     * @param targetShare The target share name. (required)
     * @param apiVersion Client API Version. (required)
     * @param disks The parameters of disk list. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK --  Disk migration job is created successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diskMigrationJobsCreateCall(String subscriptionId, String location, String migrationId, String targetShare, String apiVersion, List<DiskMigrationJobsCreateRequestInner> disks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disks;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/diskmigrationjobs/{migrationId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "migrationId" + "}", localVarApiClient.escapeString(migrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetShare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetShare", targetShare));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diskMigrationJobsCreateValidateBeforeCall(String subscriptionId, String location, String migrationId, String targetShare, String apiVersion, List<DiskMigrationJobsCreateRequestInner> disks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diskMigrationJobsCreate(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling diskMigrationJobsCreate(Async)");
        }

        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling diskMigrationJobsCreate(Async)");
        }

        // verify the required parameter 'targetShare' is set
        if (targetShare == null) {
            throw new ApiException("Missing the required parameter 'targetShare' when calling diskMigrationJobsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diskMigrationJobsCreate(Async)");
        }

        // verify the required parameter 'disks' is set
        if (disks == null) {
            throw new ApiException("Missing the required parameter 'disks' when calling diskMigrationJobsCreate(Async)");
        }

        return diskMigrationJobsCreateCall(subscriptionId, location, migrationId, targetShare, apiVersion, disks, _callback);

    }

    /**
     * 
     * Create a disk migration job.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param migrationId The migration job guid name. (required)
     * @param targetShare The target share name. (required)
     * @param apiVersion Client API Version. (required)
     * @param disks The parameters of disk list. (required)
     * @return DiskMigrationJobsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK --  Disk migration job is created successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DiskMigrationJobsGet200Response diskMigrationJobsCreate(String subscriptionId, String location, String migrationId, String targetShare, String apiVersion, List<DiskMigrationJobsCreateRequestInner> disks) throws ApiException {
        ApiResponse<DiskMigrationJobsGet200Response> localVarResp = diskMigrationJobsCreateWithHttpInfo(subscriptionId, location, migrationId, targetShare, apiVersion, disks);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a disk migration job.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param migrationId The migration job guid name. (required)
     * @param targetShare The target share name. (required)
     * @param apiVersion Client API Version. (required)
     * @param disks The parameters of disk list. (required)
     * @return ApiResponse&lt;DiskMigrationJobsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK --  Disk migration job is created successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiskMigrationJobsGet200Response> diskMigrationJobsCreateWithHttpInfo(String subscriptionId, String location, String migrationId, String targetShare, String apiVersion, List<DiskMigrationJobsCreateRequestInner> disks) throws ApiException {
        okhttp3.Call localVarCall = diskMigrationJobsCreateValidateBeforeCall(subscriptionId, location, migrationId, targetShare, apiVersion, disks, null);
        Type localVarReturnType = new TypeToken<DiskMigrationJobsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a disk migration job.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param migrationId The migration job guid name. (required)
     * @param targetShare The target share name. (required)
     * @param apiVersion Client API Version. (required)
     * @param disks The parameters of disk list. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK --  Disk migration job is created successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diskMigrationJobsCreateAsync(String subscriptionId, String location, String migrationId, String targetShare, String apiVersion, List<DiskMigrationJobsCreateRequestInner> disks, final ApiCallback<DiskMigrationJobsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = diskMigrationJobsCreateValidateBeforeCall(subscriptionId, location, migrationId, targetShare, apiVersion, disks, _callback);
        Type localVarReturnType = new TypeToken<DiskMigrationJobsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diskMigrationJobsGet
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param migrationId The migration job guid name. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The disk migration job has been returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diskMigrationJobsGetCall(String subscriptionId, String location, String migrationId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/diskmigrationjobs/{migrationId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "migrationId" + "}", localVarApiClient.escapeString(migrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diskMigrationJobsGetValidateBeforeCall(String subscriptionId, String location, String migrationId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diskMigrationJobsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling diskMigrationJobsGet(Async)");
        }

        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling diskMigrationJobsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diskMigrationJobsGet(Async)");
        }

        return diskMigrationJobsGetCall(subscriptionId, location, migrationId, apiVersion, _callback);

    }

    /**
     * 
     * Returns the requested disk migration job.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param migrationId The migration job guid name. (required)
     * @param apiVersion Client API Version. (required)
     * @return DiskMigrationJobsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The disk migration job has been returned. </td><td>  -  </td></tr>
     </table>
     */
    public DiskMigrationJobsGet200Response diskMigrationJobsGet(String subscriptionId, String location, String migrationId, String apiVersion) throws ApiException {
        ApiResponse<DiskMigrationJobsGet200Response> localVarResp = diskMigrationJobsGetWithHttpInfo(subscriptionId, location, migrationId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the requested disk migration job.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param migrationId The migration job guid name. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;DiskMigrationJobsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The disk migration job has been returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiskMigrationJobsGet200Response> diskMigrationJobsGetWithHttpInfo(String subscriptionId, String location, String migrationId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = diskMigrationJobsGetValidateBeforeCall(subscriptionId, location, migrationId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DiskMigrationJobsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the requested disk migration job.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param migrationId The migration job guid name. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The disk migration job has been returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diskMigrationJobsGetAsync(String subscriptionId, String location, String migrationId, String apiVersion, final ApiCallback<DiskMigrationJobsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = diskMigrationJobsGetValidateBeforeCall(subscriptionId, location, migrationId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DiskMigrationJobsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diskMigrationJobsList
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param status The parameters of disk migration job status. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of disk migration jobs has been returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diskMigrationJobsListCall(String subscriptionId, String location, String apiVersion, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/diskmigrationjobs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diskMigrationJobsListValidateBeforeCall(String subscriptionId, String location, String apiVersion, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diskMigrationJobsList(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling diskMigrationJobsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diskMigrationJobsList(Async)");
        }

        return diskMigrationJobsListCall(subscriptionId, location, apiVersion, status, _callback);

    }

    /**
     * 
     * Returns a list of disk migration jobs.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param status The parameters of disk migration job status. (optional)
     * @return DiskMigrationJobsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of disk migration jobs has been returned. </td><td>  -  </td></tr>
     </table>
     */
    public DiskMigrationJobsList200Response diskMigrationJobsList(String subscriptionId, String location, String apiVersion, String status) throws ApiException {
        ApiResponse<DiskMigrationJobsList200Response> localVarResp = diskMigrationJobsListWithHttpInfo(subscriptionId, location, apiVersion, status);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of disk migration jobs.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param status The parameters of disk migration job status. (optional)
     * @return ApiResponse&lt;DiskMigrationJobsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of disk migration jobs has been returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiskMigrationJobsList200Response> diskMigrationJobsListWithHttpInfo(String subscriptionId, String location, String apiVersion, String status) throws ApiException {
        okhttp3.Call localVarCall = diskMigrationJobsListValidateBeforeCall(subscriptionId, location, apiVersion, status, null);
        Type localVarReturnType = new TypeToken<DiskMigrationJobsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of disk migration jobs.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Location of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param status The parameters of disk migration job status. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of disk migration jobs has been returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diskMigrationJobsListAsync(String subscriptionId, String location, String apiVersion, String status, final ApiCallback<DiskMigrationJobsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = diskMigrationJobsListValidateBeforeCall(subscriptionId, location, apiVersion, status, _callback);
        Type localVarReturnType = new TypeToken<DiskMigrationJobsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
