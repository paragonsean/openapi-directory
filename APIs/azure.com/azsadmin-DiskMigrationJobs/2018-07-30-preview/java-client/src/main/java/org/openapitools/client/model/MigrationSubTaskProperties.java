/*
 * ComputeDiskAdminManagementClient
 * The Admin Compute Disk Management Client.
 *
 * The version of the OpenAPI document: 2018-07-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Disk migration child task properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:47.192365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MigrationSubTaskProperties {
  public static final String SERIALIZED_NAME_DISK_ID = "diskId";
  @SerializedName(SERIALIZED_NAME_DISK_ID)
  private String diskId;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  /**
   * Migration child task status.
   */
  @JsonAdapter(MigrationSubtaskStatusEnum.Adapter.class)
  public enum MigrationSubtaskStatusEnum {
    UNDEFINED("Undefined"),
    
    RUNNING("Running"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled"),
    
    PENDING("Pending"),
    
    SKIPPED("Skipped");

    private String value;

    MigrationSubtaskStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MigrationSubtaskStatusEnum fromValue(String value) {
      for (MigrationSubtaskStatusEnum b : MigrationSubtaskStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MigrationSubtaskStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MigrationSubtaskStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MigrationSubtaskStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MigrationSubtaskStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MigrationSubtaskStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIGRATION_SUBTASK_STATUS = "migrationSubtaskStatus";
  @SerializedName(SERIALIZED_NAME_MIGRATION_SUBTASK_STATUS)
  private MigrationSubtaskStatusEnum migrationSubtaskStatus;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_SOURCE_SHARE = "sourceShare";
  @SerializedName(SERIALIZED_NAME_SOURCE_SHARE)
  private String sourceShare;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  /**
   * Disk State.
   */
  @JsonAdapter(TargetDiskStateForMigrationEnum.Adapter.class)
  public enum TargetDiskStateForMigrationEnum {
    UNDEFINED("Undefined"),
    
    UNATTACHED("Unattached"),
    
    ATTACHED("Attached"),
    
    RESERVED("Reserved"),
    
    ACTIVE_SAS("ActiveSAS"),
    
    UNKNOWN("Unknown"),
    
    ALL("All"),
    
    RECOMMENDED("Recommended"),
    
    OFFLINE_MIGRATION("OfflineMigration"),
    
    ONLINE_MIGRATION("OnlineMigration");

    private String value;

    TargetDiskStateForMigrationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetDiskStateForMigrationEnum fromValue(String value) {
      for (TargetDiskStateForMigrationEnum b : TargetDiskStateForMigrationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetDiskStateForMigrationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetDiskStateForMigrationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetDiskStateForMigrationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetDiskStateForMigrationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetDiskStateForMigrationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_DISK_STATE_FOR_MIGRATION = "targetDiskStateForMigration";
  @SerializedName(SERIALIZED_NAME_TARGET_DISK_STATE_FOR_MIGRATION)
  private TargetDiskStateForMigrationEnum targetDiskStateForMigration;

  public static final String SERIALIZED_NAME_TARGET_SHARE = "targetShare";
  @SerializedName(SERIALIZED_NAME_TARGET_SHARE)
  private String targetShare;

  public MigrationSubTaskProperties() {
  }

  public MigrationSubTaskProperties(
     String diskId, 
     OffsetDateTime endTime, 
     String reason, 
     String sourceShare, 
     OffsetDateTime startTime, 
     String targetShare
  ) {
    this();
    this.diskId = diskId;
    this.endTime = endTime;
    this.reason = reason;
    this.sourceShare = sourceShare;
    this.startTime = startTime;
    this.targetShare = targetShare;
  }

  /**
   * The id of disk.
   * @return diskId
   */
  @javax.annotation.Nullable
  public String getDiskId() {
    return diskId;
  }



  /**
   * The task end time.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }



  public MigrationSubTaskProperties migrationSubtaskStatus(MigrationSubtaskStatusEnum migrationSubtaskStatus) {
    this.migrationSubtaskStatus = migrationSubtaskStatus;
    return this;
  }

  /**
   * Migration child task status.
   * @return migrationSubtaskStatus
   */
  @javax.annotation.Nullable
  public MigrationSubtaskStatusEnum getMigrationSubtaskStatus() {
    return migrationSubtaskStatus;
  }

  public void setMigrationSubtaskStatus(MigrationSubtaskStatusEnum migrationSubtaskStatus) {
    this.migrationSubtaskStatus = migrationSubtaskStatus;
  }


  /**
   * The reason of task failure.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }



  /**
   * The source share of migration task.
   * @return sourceShare
   */
  @javax.annotation.Nullable
  public String getSourceShare() {
    return sourceShare;
  }



  /**
   * The task start time.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  public MigrationSubTaskProperties targetDiskStateForMigration(TargetDiskStateForMigrationEnum targetDiskStateForMigration) {
    this.targetDiskStateForMigration = targetDiskStateForMigration;
    return this;
  }

  /**
   * Disk State.
   * @return targetDiskStateForMigration
   */
  @javax.annotation.Nullable
  public TargetDiskStateForMigrationEnum getTargetDiskStateForMigration() {
    return targetDiskStateForMigration;
  }

  public void setTargetDiskStateForMigration(TargetDiskStateForMigrationEnum targetDiskStateForMigration) {
    this.targetDiskStateForMigration = targetDiskStateForMigration;
  }


  /**
   * The target share of migration task.
   * @return targetShare
   */
  @javax.annotation.Nullable
  public String getTargetShare() {
    return targetShare;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrationSubTaskProperties migrationSubTaskProperties = (MigrationSubTaskProperties) o;
    return Objects.equals(this.diskId, migrationSubTaskProperties.diskId) &&
        Objects.equals(this.endTime, migrationSubTaskProperties.endTime) &&
        Objects.equals(this.migrationSubtaskStatus, migrationSubTaskProperties.migrationSubtaskStatus) &&
        Objects.equals(this.reason, migrationSubTaskProperties.reason) &&
        Objects.equals(this.sourceShare, migrationSubTaskProperties.sourceShare) &&
        Objects.equals(this.startTime, migrationSubTaskProperties.startTime) &&
        Objects.equals(this.targetDiskStateForMigration, migrationSubTaskProperties.targetDiskStateForMigration) &&
        Objects.equals(this.targetShare, migrationSubTaskProperties.targetShare);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskId, endTime, migrationSubtaskStatus, reason, sourceShare, startTime, targetDiskStateForMigration, targetShare);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrationSubTaskProperties {\n");
    sb.append("    diskId: ").append(toIndentedString(diskId)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    migrationSubtaskStatus: ").append(toIndentedString(migrationSubtaskStatus)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    sourceShare: ").append(toIndentedString(sourceShare)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    targetDiskStateForMigration: ").append(toIndentedString(targetDiskStateForMigration)).append("\n");
    sb.append("    targetShare: ").append(toIndentedString(targetShare)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diskId");
    openapiFields.add("endTime");
    openapiFields.add("migrationSubtaskStatus");
    openapiFields.add("reason");
    openapiFields.add("sourceShare");
    openapiFields.add("startTime");
    openapiFields.add("targetDiskStateForMigration");
    openapiFields.add("targetShare");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MigrationSubTaskProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MigrationSubTaskProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MigrationSubTaskProperties is not found in the empty JSON string", MigrationSubTaskProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MigrationSubTaskProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MigrationSubTaskProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("diskId") != null && !jsonObj.get("diskId").isJsonNull()) && !jsonObj.get("diskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskId").toString()));
      }
      if ((jsonObj.get("migrationSubtaskStatus") != null && !jsonObj.get("migrationSubtaskStatus").isJsonNull()) && !jsonObj.get("migrationSubtaskStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationSubtaskStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationSubtaskStatus").toString()));
      }
      // validate the optional field `migrationSubtaskStatus`
      if (jsonObj.get("migrationSubtaskStatus") != null && !jsonObj.get("migrationSubtaskStatus").isJsonNull()) {
        MigrationSubtaskStatusEnum.validateJsonElement(jsonObj.get("migrationSubtaskStatus"));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("sourceShare") != null && !jsonObj.get("sourceShare").isJsonNull()) && !jsonObj.get("sourceShare").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceShare` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceShare").toString()));
      }
      if ((jsonObj.get("targetDiskStateForMigration") != null && !jsonObj.get("targetDiskStateForMigration").isJsonNull()) && !jsonObj.get("targetDiskStateForMigration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetDiskStateForMigration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetDiskStateForMigration").toString()));
      }
      // validate the optional field `targetDiskStateForMigration`
      if (jsonObj.get("targetDiskStateForMigration") != null && !jsonObj.get("targetDiskStateForMigration").isJsonNull()) {
        TargetDiskStateForMigrationEnum.validateJsonElement(jsonObj.get("targetDiskStateForMigration"));
      }
      if ((jsonObj.get("targetShare") != null && !jsonObj.get("targetShare").isJsonNull()) && !jsonObj.get("targetShare").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetShare` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetShare").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MigrationSubTaskProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MigrationSubTaskProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MigrationSubTaskProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MigrationSubTaskProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<MigrationSubTaskProperties>() {
           @Override
           public void write(JsonWriter out, MigrationSubTaskProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MigrationSubTaskProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MigrationSubTaskProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MigrationSubTaskProperties
   * @throws IOException if the JSON string is invalid with respect to MigrationSubTaskProperties
   */
  public static MigrationSubTaskProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MigrationSubTaskProperties.class);
  }

  /**
   * Convert an instance of MigrationSubTaskProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

