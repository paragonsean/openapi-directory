# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyAssignmentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, enforcement_mode: str=None, metadata: object=None, not_scopes: List[str]=None, parameters: object=None, policy_definition_id: str=None, scope: str=None):
        """PolicyAssignmentProperties - a model defined in OpenAPI

        :param description: The description of this PolicyAssignmentProperties.
        :param display_name: The display_name of this PolicyAssignmentProperties.
        :param enforcement_mode: The enforcement_mode of this PolicyAssignmentProperties.
        :param metadata: The metadata of this PolicyAssignmentProperties.
        :param not_scopes: The not_scopes of this PolicyAssignmentProperties.
        :param parameters: The parameters of this PolicyAssignmentProperties.
        :param policy_definition_id: The policy_definition_id of this PolicyAssignmentProperties.
        :param scope: The scope of this PolicyAssignmentProperties.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'enforcement_mode': str,
            'metadata': object,
            'not_scopes': List[str],
            'parameters': object,
            'policy_definition_id': str,
            'scope': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'enforcement_mode': 'enforcementMode',
            'metadata': 'metadata',
            'not_scopes': 'notScopes',
            'parameters': 'parameters',
            'policy_definition_id': 'policyDefinitionId',
            'scope': 'scope'
        }

        self._description = description
        self._display_name = display_name
        self._enforcement_mode = enforcement_mode
        self._metadata = metadata
        self._not_scopes = not_scopes
        self._parameters = parameters
        self._policy_definition_id = policy_definition_id
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyAssignmentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyAssignmentProperties of this PolicyAssignmentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PolicyAssignmentProperties.

        This message will be part of response in case of policy violation.

        :return: The description of this PolicyAssignmentProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PolicyAssignmentProperties.

        This message will be part of response in case of policy violation.

        :param description: The description of this PolicyAssignmentProperties.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this PolicyAssignmentProperties.

        The display name of the policy assignment.

        :return: The display_name of this PolicyAssignmentProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PolicyAssignmentProperties.

        The display name of the policy assignment.

        :param display_name: The display_name of this PolicyAssignmentProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enforcement_mode(self):
        """Gets the enforcement_mode of this PolicyAssignmentProperties.

        The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.

        :return: The enforcement_mode of this PolicyAssignmentProperties.
        :rtype: str
        """
        return self._enforcement_mode

    @enforcement_mode.setter
    def enforcement_mode(self, enforcement_mode):
        """Sets the enforcement_mode of this PolicyAssignmentProperties.

        The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.

        :param enforcement_mode: The enforcement_mode of this PolicyAssignmentProperties.
        :type enforcement_mode: str
        """
        allowed_values = ["Default", "DoNotEnforce"]  # noqa: E501
        if enforcement_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `enforcement_mode` ({0}), must be one of {1}"
                .format(enforcement_mode, allowed_values)
            )

        self._enforcement_mode = enforcement_mode

    @property
    def metadata(self):
        """Gets the metadata of this PolicyAssignmentProperties.

        The policy assignment metadata.

        :return: The metadata of this PolicyAssignmentProperties.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PolicyAssignmentProperties.

        The policy assignment metadata.

        :param metadata: The metadata of this PolicyAssignmentProperties.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def not_scopes(self):
        """Gets the not_scopes of this PolicyAssignmentProperties.

        The policy's excluded scopes.

        :return: The not_scopes of this PolicyAssignmentProperties.
        :rtype: List[str]
        """
        return self._not_scopes

    @not_scopes.setter
    def not_scopes(self, not_scopes):
        """Sets the not_scopes of this PolicyAssignmentProperties.

        The policy's excluded scopes.

        :param not_scopes: The not_scopes of this PolicyAssignmentProperties.
        :type not_scopes: List[str]
        """

        self._not_scopes = not_scopes

    @property
    def parameters(self):
        """Gets the parameters of this PolicyAssignmentProperties.

        Required if a parameter is used in policy rule.

        :return: The parameters of this PolicyAssignmentProperties.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this PolicyAssignmentProperties.

        Required if a parameter is used in policy rule.

        :param parameters: The parameters of this PolicyAssignmentProperties.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def policy_definition_id(self):
        """Gets the policy_definition_id of this PolicyAssignmentProperties.

        The ID of the policy definition or policy set definition being assigned.

        :return: The policy_definition_id of this PolicyAssignmentProperties.
        :rtype: str
        """
        return self._policy_definition_id

    @policy_definition_id.setter
    def policy_definition_id(self, policy_definition_id):
        """Sets the policy_definition_id of this PolicyAssignmentProperties.

        The ID of the policy definition or policy set definition being assigned.

        :param policy_definition_id: The policy_definition_id of this PolicyAssignmentProperties.
        :type policy_definition_id: str
        """

        self._policy_definition_id = policy_definition_id

    @property
    def scope(self):
        """Gets the scope of this PolicyAssignmentProperties.

        The scope for the policy assignment.

        :return: The scope of this PolicyAssignmentProperties.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this PolicyAssignmentProperties.

        The scope for the policy assignment.

        :param scope: The scope of this PolicyAssignmentProperties.
        :type scope: str
        """

        self._scope = scope
