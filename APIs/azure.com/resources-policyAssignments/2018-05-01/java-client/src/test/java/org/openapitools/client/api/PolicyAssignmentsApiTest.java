/*
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2018-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PolicyAssignment;
import org.openapitools.client.model.PolicyAssignmentListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PolicyAssignmentsApi
 */
@Disabled
public class PolicyAssignmentsApiTest {

    private final PolicyAssignmentsApi api = new PolicyAssignmentsApi();

    /**
     * Creates or updates a policy assignment.
     *
     *  This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope. For example, when you assign a policy at resource group scope, that policy applies to all resources in the group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsCreateTest() throws ApiException {
        String scope = null;
        String policyAssignmentName = null;
        String apiVersion = null;
        PolicyAssignment parameters = null;
        PolicyAssignment response = api.policyAssignmentsCreate(scope, policyAssignmentName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Creates or updates a policy assignment.
     *
     * This operation creates or updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that scope. For example, when you assign a policy to a resource group that policy applies to all resources in the group. Policy assignment IDs have this format: &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or resource (format: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsCreateByIdTest() throws ApiException {
        String policyAssignmentId = null;
        String apiVersion = null;
        PolicyAssignment parameters = null;
        PolicyAssignment response = api.policyAssignmentsCreateById(policyAssignmentId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a policy assignment.
     *
     * This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of its ID preceding &#39;/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsDeleteTest() throws ApiException {
        String scope = null;
        String policyAssignmentName = null;
        String apiVersion = null;
        PolicyAssignment response = api.policyAssignmentsDelete(scope, policyAssignmentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a policy assignment.
     *
     * This operation deletes the policy with the given ID. Policy assignment IDs have this format: &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;. Valid formats for {scope} are: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39; (management group), &#39;/subscriptions/{subscriptionId}&#39; (subscription), &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; (resource group), or &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39; (resource).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsDeleteByIdTest() throws ApiException {
        String policyAssignmentId = null;
        String apiVersion = null;
        PolicyAssignment response = api.policyAssignmentsDeleteById(policyAssignmentId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves a policy assignment.
     *
     * This operation retrieves a single policy assignment, given its name and the scope it was created at.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsGetTest() throws ApiException {
        String scope = null;
        String policyAssignmentName = null;
        String apiVersion = null;
        PolicyAssignment response = api.policyAssignmentsGet(scope, policyAssignmentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves the policy assignment with the given ID.
     *
     * The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this format: &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group (format: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or resource (format: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsGetByIdTest() throws ApiException {
        String policyAssignmentId = null;
        String apiVersion = null;
        PolicyAssignment response = api.policyAssignmentsGetById(policyAssignmentId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves all policy assignments that apply to a subscription.
     *
     * This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid values for $filter are: &#39;atScope()&#39; or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription, including those that apply directly or from management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter&#x3D;atScope() is provided, the returned list includes all policy assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription. If $filter&#x3D;policyDefinitionId eq &#39;{value}&#39; is provided, the returned list includes all policy assignments of the policy definition whose id is {value}.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        PolicyAssignmentListResult response = api.policyAssignmentsList(apiVersion, subscriptionId, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves all policy assignments that apply to a resource.
     *
     * This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and subscription that match the optional given $filter. Valid values for $filter are: &#39;atScope()&#39; or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource, including those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter&#x3D;atScope() is provided, the returned list includes all policy assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If $filter&#x3D;policyDefinitionId eq &#39;{value}&#39; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is not part of a parent resource (the more common case), the parent resource path should not be provided (or provided as &#39;&#39;). For example a web app could be specified as ({resourceProviderNamespace} &#x3D;&#x3D; &#39;Microsoft.Web&#39;, {parentResourcePath} &#x3D;&#x3D; &#39;&#39;, {resourceType} &#x3D;&#x3D; &#39;sites&#39;, {resourceName} &#x3D;&#x3D; &#39;MyWebApp&#39;). If the resource is part of a parent resource, then all parameters should be provided. For example a virtual machine DNS name could be specified as ({resourceProviderNamespace} &#x3D;&#x3D; &#39;Microsoft.Compute&#39;, {parentResourcePath} &#x3D;&#x3D; &#39;virtualMachines/MyVirtualMachine&#39;, {resourceType} &#x3D;&#x3D; &#39;domainNames&#39;, {resourceName} &#x3D;&#x3D; &#39;MyComputerName&#39;). A convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} &#x3D;&#x3D; &#39;&#39;, {parentResourcePath} &#x3D;&#x3D; &#39;&#39;, {resourceType} &#x3D;&#x3D; &#39;Microsoft.Web/sites&#39;, {resourceName} &#x3D;&#x3D; &#39;MyWebApp&#39;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsListForResourceTest() throws ApiException {
        String resourceGroupName = null;
        String resourceProviderNamespace = null;
        String parentResourcePath = null;
        String resourceType = null;
        String resourceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        PolicyAssignmentListResult response = api.policyAssignmentsListForResource(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves all policy assignments that apply to a resource group.
     *
     * This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription that match the optional given $filter. Valid values for $filter are: &#39;atScope()&#39; or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all policy assignments associated with the resource group, including those that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter&#x3D;atScope() is provided, the returned list includes all policy assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource group. If $filter&#x3D;policyDefinitionId eq &#39;{value}&#39; is provided, the returned list includes all policy assignments of the policy definition whose id is {value} that apply to the resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsListForResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        PolicyAssignmentListResult response = api.policyAssignmentsListForResourceGroup(resourceGroupName, apiVersion, subscriptionId, $filter);
        // TODO: test validations
    }

}
