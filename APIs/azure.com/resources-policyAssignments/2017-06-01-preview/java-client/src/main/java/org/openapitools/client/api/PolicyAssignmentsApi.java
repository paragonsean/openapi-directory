/*
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2017-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PolicyAssignment;
import org.openapitools.client.model.PolicyAssignmentListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PolicyAssignmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PolicyAssignmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PolicyAssignmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for policyAssignmentsCreate
     * @param scope The scope of the policy assignment. (required)
     * @param policyAssignmentName The name of the policy assignment. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Parameters for the policy assignment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the new policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsCreateCall(String scope, String policyAssignmentName, String apiVersion, PolicyAssignment parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "policyAssignmentName" + "}", localVarApiClient.escapeString(policyAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyAssignmentsCreateValidateBeforeCall(String scope, String policyAssignmentName, String apiVersion, PolicyAssignment parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling policyAssignmentsCreate(Async)");
        }

        // verify the required parameter 'policyAssignmentName' is set
        if (policyAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'policyAssignmentName' when calling policyAssignmentsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyAssignmentsCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling policyAssignmentsCreate(Async)");
        }

        return policyAssignmentsCreateCall(scope, policyAssignmentName, apiVersion, parameters, _callback);

    }

    /**
     * Creates a policy assignment.
     * Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group that policy is assigned to all resources in the group.
     * @param scope The scope of the policy assignment. (required)
     * @param policyAssignmentName The name of the policy assignment. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Parameters for the policy assignment. (required)
     * @return PolicyAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the new policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyAssignment policyAssignmentsCreate(String scope, String policyAssignmentName, String apiVersion, PolicyAssignment parameters) throws ApiException {
        ApiResponse<PolicyAssignment> localVarResp = policyAssignmentsCreateWithHttpInfo(scope, policyAssignmentName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Creates a policy assignment.
     * Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group that policy is assigned to all resources in the group.
     * @param scope The scope of the policy assignment. (required)
     * @param policyAssignmentName The name of the policy assignment. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Parameters for the policy assignment. (required)
     * @return ApiResponse&lt;PolicyAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the new policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyAssignment> policyAssignmentsCreateWithHttpInfo(String scope, String policyAssignmentName, String apiVersion, PolicyAssignment parameters) throws ApiException {
        okhttp3.Call localVarCall = policyAssignmentsCreateValidateBeforeCall(scope, policyAssignmentName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<PolicyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a policy assignment. (asynchronously)
     * Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group that policy is assigned to all resources in the group.
     * @param scope The scope of the policy assignment. (required)
     * @param policyAssignmentName The name of the policy assignment. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Parameters for the policy assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the new policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsCreateAsync(String scope, String policyAssignmentName, String apiVersion, PolicyAssignment parameters, final ApiCallback<PolicyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyAssignmentsCreateValidateBeforeCall(scope, policyAssignmentName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<PolicyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyAssignmentsCreateById
     * @param policyAssignmentId The ID of the policy assignment to create. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Parameters for policy assignment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsCreateByIdCall(String policyAssignmentId, String apiVersion, PolicyAssignment parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/{policyAssignmentId}"
            .replace("{" + "policyAssignmentId" + "}", localVarApiClient.escapeString(policyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyAssignmentsCreateByIdValidateBeforeCall(String policyAssignmentId, String apiVersion, PolicyAssignment parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyAssignmentId' is set
        if (policyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'policyAssignmentId' when calling policyAssignmentsCreateById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyAssignmentsCreateById(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling policyAssignmentsCreateById(Async)");
        }

        return policyAssignmentsCreateByIdCall(policyAssignmentId, apiVersion, parameters, _callback);

    }

    /**
     * Creates a policy assignment by ID.
     * Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group that policy is assigned to all resources in the group. When providing a scope for the assignment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.
     * @param policyAssignmentId The ID of the policy assignment to create. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Parameters for policy assignment. (required)
     * @return PolicyAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyAssignment policyAssignmentsCreateById(String policyAssignmentId, String apiVersion, PolicyAssignment parameters) throws ApiException {
        ApiResponse<PolicyAssignment> localVarResp = policyAssignmentsCreateByIdWithHttpInfo(policyAssignmentId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Creates a policy assignment by ID.
     * Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group that policy is assigned to all resources in the group. When providing a scope for the assignment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.
     * @param policyAssignmentId The ID of the policy assignment to create. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Parameters for policy assignment. (required)
     * @return ApiResponse&lt;PolicyAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyAssignment> policyAssignmentsCreateByIdWithHttpInfo(String policyAssignmentId, String apiVersion, PolicyAssignment parameters) throws ApiException {
        okhttp3.Call localVarCall = policyAssignmentsCreateByIdValidateBeforeCall(policyAssignmentId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<PolicyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a policy assignment by ID. (asynchronously)
     * Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group that policy is assigned to all resources in the group. When providing a scope for the assignment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.
     * @param policyAssignmentId The ID of the policy assignment to create. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Parameters for policy assignment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsCreateByIdAsync(String policyAssignmentId, String apiVersion, PolicyAssignment parameters, final ApiCallback<PolicyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyAssignmentsCreateByIdValidateBeforeCall(policyAssignmentId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<PolicyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyAssignmentsDelete
     * @param scope The scope of the policy assignment. (required)
     * @param policyAssignmentName The name of the policy assignment to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the deleted assignment. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the policy assignment doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsDeleteCall(String scope, String policyAssignmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "policyAssignmentName" + "}", localVarApiClient.escapeString(policyAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyAssignmentsDeleteValidateBeforeCall(String scope, String policyAssignmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling policyAssignmentsDelete(Async)");
        }

        // verify the required parameter 'policyAssignmentName' is set
        if (policyAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'policyAssignmentName' when calling policyAssignmentsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyAssignmentsDelete(Async)");
        }

        return policyAssignmentsDeleteCall(scope, policyAssignmentName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a policy assignment.
     * @param scope The scope of the policy assignment. (required)
     * @param policyAssignmentName The name of the policy assignment to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return PolicyAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the deleted assignment. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the policy assignment doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyAssignment policyAssignmentsDelete(String scope, String policyAssignmentName, String apiVersion) throws ApiException {
        ApiResponse<PolicyAssignment> localVarResp = policyAssignmentsDeleteWithHttpInfo(scope, policyAssignmentName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a policy assignment.
     * @param scope The scope of the policy assignment. (required)
     * @param policyAssignmentName The name of the policy assignment to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return ApiResponse&lt;PolicyAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the deleted assignment. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the policy assignment doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyAssignment> policyAssignmentsDeleteWithHttpInfo(String scope, String policyAssignmentName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = policyAssignmentsDeleteValidateBeforeCall(scope, policyAssignmentName, apiVersion, null);
        Type localVarReturnType = new TypeToken<PolicyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a policy assignment.
     * @param scope The scope of the policy assignment. (required)
     * @param policyAssignmentName The name of the policy assignment to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the deleted assignment. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the policy assignment doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsDeleteAsync(String scope, String policyAssignmentName, String apiVersion, final ApiCallback<PolicyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyAssignmentsDeleteValidateBeforeCall(scope, policyAssignmentName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PolicyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyAssignmentsDeleteById
     * @param policyAssignmentId The ID of the policy assignment to delete. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsDeleteByIdCall(String policyAssignmentId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{policyAssignmentId}"
            .replace("{" + "policyAssignmentId" + "}", localVarApiClient.escapeString(policyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyAssignmentsDeleteByIdValidateBeforeCall(String policyAssignmentId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyAssignmentId' is set
        if (policyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'policyAssignmentId' when calling policyAssignmentsDeleteById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyAssignmentsDeleteById(Async)");
        }

        return policyAssignmentsDeleteByIdCall(policyAssignmentId, apiVersion, _callback);

    }

    /**
     * Deletes a policy assignment by ID.
     * When providing a scope for the assignment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.
     * @param policyAssignmentId The ID of the policy assignment to delete. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return PolicyAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyAssignment policyAssignmentsDeleteById(String policyAssignmentId, String apiVersion) throws ApiException {
        ApiResponse<PolicyAssignment> localVarResp = policyAssignmentsDeleteByIdWithHttpInfo(policyAssignmentId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Deletes a policy assignment by ID.
     * When providing a scope for the assignment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.
     * @param policyAssignmentId The ID of the policy assignment to delete. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return ApiResponse&lt;PolicyAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyAssignment> policyAssignmentsDeleteByIdWithHttpInfo(String policyAssignmentId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = policyAssignmentsDeleteByIdValidateBeforeCall(policyAssignmentId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PolicyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a policy assignment by ID. (asynchronously)
     * When providing a scope for the assignment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.
     * @param policyAssignmentId The ID of the policy assignment to delete. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsDeleteByIdAsync(String policyAssignmentId, String apiVersion, final ApiCallback<PolicyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyAssignmentsDeleteByIdValidateBeforeCall(policyAssignmentId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PolicyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyAssignmentsGet
     * @param scope The scope of the policy assignment. (required)
     * @param policyAssignmentName The name of the policy assignment to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsGetCall(String scope, String policyAssignmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "policyAssignmentName" + "}", localVarApiClient.escapeString(policyAssignmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyAssignmentsGetValidateBeforeCall(String scope, String policyAssignmentName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling policyAssignmentsGet(Async)");
        }

        // verify the required parameter 'policyAssignmentName' is set
        if (policyAssignmentName == null) {
            throw new ApiException("Missing the required parameter 'policyAssignmentName' when calling policyAssignmentsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyAssignmentsGet(Async)");
        }

        return policyAssignmentsGetCall(scope, policyAssignmentName, apiVersion, _callback);

    }

    /**
     * 
     * Gets a policy assignment.
     * @param scope The scope of the policy assignment. (required)
     * @param policyAssignmentName The name of the policy assignment to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return PolicyAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyAssignment policyAssignmentsGet(String scope, String policyAssignmentName, String apiVersion) throws ApiException {
        ApiResponse<PolicyAssignment> localVarResp = policyAssignmentsGetWithHttpInfo(scope, policyAssignmentName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a policy assignment.
     * @param scope The scope of the policy assignment. (required)
     * @param policyAssignmentName The name of the policy assignment to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return ApiResponse&lt;PolicyAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyAssignment> policyAssignmentsGetWithHttpInfo(String scope, String policyAssignmentName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = policyAssignmentsGetValidateBeforeCall(scope, policyAssignmentName, apiVersion, null);
        Type localVarReturnType = new TypeToken<PolicyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a policy assignment.
     * @param scope The scope of the policy assignment. (required)
     * @param policyAssignmentName The name of the policy assignment to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsGetAsync(String scope, String policyAssignmentName, String apiVersion, final ApiCallback<PolicyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyAssignmentsGetValidateBeforeCall(scope, policyAssignmentName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PolicyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyAssignmentsGetById
     * @param policyAssignmentId The ID of the policy assignment to get. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsGetByIdCall(String policyAssignmentId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{policyAssignmentId}"
            .replace("{" + "policyAssignmentId" + "}", localVarApiClient.escapeString(policyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyAssignmentsGetByIdValidateBeforeCall(String policyAssignmentId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyAssignmentId' is set
        if (policyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'policyAssignmentId' when calling policyAssignmentsGetById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyAssignmentsGetById(Async)");
        }

        return policyAssignmentsGetByIdCall(policyAssignmentId, apiVersion, _callback);

    }

    /**
     * Gets a policy assignment by ID.
     * When providing a scope for the assignment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.
     * @param policyAssignmentId The ID of the policy assignment to get. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return PolicyAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyAssignment policyAssignmentsGetById(String policyAssignmentId, String apiVersion) throws ApiException {
        ApiResponse<PolicyAssignment> localVarResp = policyAssignmentsGetByIdWithHttpInfo(policyAssignmentId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a policy assignment by ID.
     * When providing a scope for the assignment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.
     * @param policyAssignmentId The ID of the policy assignment to get. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return ApiResponse&lt;PolicyAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyAssignment> policyAssignmentsGetByIdWithHttpInfo(String policyAssignmentId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = policyAssignmentsGetByIdValidateBeforeCall(policyAssignmentId, apiVersion, null);
        Type localVarReturnType = new TypeToken<PolicyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a policy assignment by ID. (asynchronously)
     * When providing a scope for the assignment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.
     * @param policyAssignmentId The ID of the policy assignment to get. Use the format &#39;/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}&#39;. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy assignment. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsGetByIdAsync(String policyAssignmentId, String apiVersion, final ApiCallback<PolicyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyAssignmentsGetByIdValidateBeforeCall(policyAssignmentId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PolicyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyAssignmentsList
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsListCall(String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyAssignmentsListValidateBeforeCall(String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyAssignmentsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling policyAssignmentsList(Async)");
        }

        return policyAssignmentsListCall(apiVersion, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * Gets all the policy assignments for a subscription.
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return PolicyAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyAssignmentListResult policyAssignmentsList(String apiVersion, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<PolicyAssignmentListResult> localVarResp = policyAssignmentsListWithHttpInfo(apiVersion, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the policy assignments for a subscription.
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ApiResponse&lt;PolicyAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyAssignmentListResult> policyAssignmentsListWithHttpInfo(String apiVersion, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = policyAssignmentsListValidateBeforeCall(apiVersion, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<PolicyAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the policy assignments for a subscription.
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsListAsync(String apiVersion, String subscriptionId, String $filter, final ApiCallback<PolicyAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyAssignmentsListValidateBeforeCall(apiVersion, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<PolicyAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyAssignmentsListForResource
     * @param resourceGroupName The name of the resource group containing the resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource path. (required)
     * @param resourceType The resource type. (required)
     * @param resourceName The name of the resource with policy assignments. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call policyAssignmentsListForResourceCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderNamespace" + "}", localVarApiClient.escapeString(resourceProviderNamespace.toString()))
            .replace("{" + "parentResourcePath" + "}", localVarApiClient.escapeString(parentResourcePath.toString()))
            .replace("{" + "resourceType" + "}", localVarApiClient.escapeString(resourceType.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyAssignmentsListForResourceValidateBeforeCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling policyAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'resourceProviderNamespace' is set
        if (resourceProviderNamespace == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderNamespace' when calling policyAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'parentResourcePath' is set
        if (parentResourcePath == null) {
            throw new ApiException("Missing the required parameter 'parentResourcePath' when calling policyAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling policyAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling policyAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling policyAssignmentsListForResource(Async)");
        }

        return policyAssignmentsListForResourceCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * Gets policy assignments for a resource.
     * @param resourceGroupName The name of the resource group containing the resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource path. (required)
     * @param resourceType The resource type. (required)
     * @param resourceName The name of the resource with policy assignments. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return PolicyAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PolicyAssignmentListResult policyAssignmentsListForResource(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<PolicyAssignmentListResult> localVarResp = policyAssignmentsListForResourceWithHttpInfo(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets policy assignments for a resource.
     * @param resourceGroupName The name of the resource group containing the resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource path. (required)
     * @param resourceType The resource type. (required)
     * @param resourceName The name of the resource with policy assignments. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ApiResponse&lt;PolicyAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PolicyAssignmentListResult> policyAssignmentsListForResourceWithHttpInfo(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = policyAssignmentsListForResourceValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<PolicyAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets policy assignments for a resource.
     * @param resourceGroupName The name of the resource group containing the resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource path. (required)
     * @param resourceType The resource type. (required)
     * @param resourceName The name of the resource with policy assignments. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call policyAssignmentsListForResourceAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter, final ApiCallback<PolicyAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyAssignmentsListForResourceValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<PolicyAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyAssignmentsListForResourceGroup
     * @param resourceGroupName The name of the resource group that contains policy assignments. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsListForResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyAssignmentsListForResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling policyAssignmentsListForResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyAssignmentsListForResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling policyAssignmentsListForResourceGroup(Async)");
        }

        return policyAssignmentsListForResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * Gets policy assignments for the resource group.
     * @param resourceGroupName The name of the resource group that contains policy assignments. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return PolicyAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyAssignmentListResult policyAssignmentsListForResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<PolicyAssignmentListResult> localVarResp = policyAssignmentsListForResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets policy assignments for the resource group.
     * @param resourceGroupName The name of the resource group that contains policy assignments. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ApiResponse&lt;PolicyAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyAssignmentListResult> policyAssignmentsListForResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = policyAssignmentsListForResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<PolicyAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets policy assignments for the resource group.
     * @param resourceGroupName The name of the resource group that contains policy assignments. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy assignments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyAssignmentsListForResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, final ApiCallback<PolicyAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyAssignmentsListForResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<PolicyAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
