/*
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2017-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PolicyAssignment;
import org.openapitools.client.model.PolicyAssignmentListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PolicyAssignmentsApi
 */
@Disabled
public class PolicyAssignmentsApiTest {

    private final PolicyAssignmentsApi api = new PolicyAssignmentsApi();

    /**
     * Creates a policy assignment.
     *
     * Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group that policy is assigned to all resources in the group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsCreateTest() throws ApiException {
        String scope = null;
        String policyAssignmentName = null;
        String apiVersion = null;
        PolicyAssignment parameters = null;
        PolicyAssignment response = api.policyAssignmentsCreate(scope, policyAssignmentName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Creates a policy assignment by ID.
     *
     * Policy assignments are inherited by child resources. For example, when you apply a policy to a resource group that policy is assigned to all resources in the group. When providing a scope for the assignment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsCreateByIdTest() throws ApiException {
        String policyAssignmentId = null;
        String apiVersion = null;
        PolicyAssignment parameters = null;
        PolicyAssignment response = api.policyAssignmentsCreateById(policyAssignmentId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a policy assignment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsDeleteTest() throws ApiException {
        String scope = null;
        String policyAssignmentName = null;
        String apiVersion = null;
        PolicyAssignment response = api.policyAssignmentsDelete(scope, policyAssignmentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a policy assignment by ID.
     *
     * When providing a scope for the assignment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsDeleteByIdTest() throws ApiException {
        String policyAssignmentId = null;
        String apiVersion = null;
        PolicyAssignment response = api.policyAssignmentsDeleteById(policyAssignmentId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a policy assignment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsGetTest() throws ApiException {
        String scope = null;
        String policyAssignmentName = null;
        String apiVersion = null;
        PolicyAssignment response = api.policyAssignmentsGet(scope, policyAssignmentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a policy assignment by ID.
     *
     * When providing a scope for the assignment, use &#39;/subscriptions/{subscription-id}/&#39; for subscriptions, &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}&#39; for resource groups, and &#39;/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}&#39; for resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsGetByIdTest() throws ApiException {
        String policyAssignmentId = null;
        String apiVersion = null;
        PolicyAssignment response = api.policyAssignmentsGetById(policyAssignmentId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all the policy assignments for a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        PolicyAssignmentListResult response = api.policyAssignmentsList(apiVersion, subscriptionId, $filter);
        // TODO: test validations
    }

    /**
     * Gets policy assignments for a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsListForResourceTest() throws ApiException {
        String resourceGroupName = null;
        String resourceProviderNamespace = null;
        String parentResourcePath = null;
        String resourceType = null;
        String resourceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        PolicyAssignmentListResult response = api.policyAssignmentsListForResource(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter);
        // TODO: test validations
    }

    /**
     * Gets policy assignments for the resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyAssignmentsListForResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        PolicyAssignmentListResult response = api.policyAssignmentsListForResourceGroup(resourceGroupName, apiVersion, subscriptionId, $filter);
        // TODO: test validations
    }

}
