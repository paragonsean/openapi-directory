/**
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PolicyAssignmentProperties model module.
 * @module model/PolicyAssignmentProperties
 * @version 2018-03-01
 */
class PolicyAssignmentProperties {
    /**
     * Constructs a new <code>PolicyAssignmentProperties</code>.
     * The policy assignment properties.
     * @alias module:model/PolicyAssignmentProperties
     */
    constructor() { 
        
        PolicyAssignmentProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyAssignmentProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyAssignmentProperties} obj Optional instance to populate.
     * @return {module:model/PolicyAssignmentProperties} The populated <code>PolicyAssignmentProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyAssignmentProperties();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('notScopes')) {
                obj['notScopes'] = ApiClient.convertToType(data['notScopes'], ['String']);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
            if (data.hasOwnProperty('policyDefinitionId')) {
                obj['policyDefinitionId'] = ApiClient.convertToType(data['policyDefinitionId'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyAssignmentProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyAssignmentProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['notScopes'])) {
            throw new Error("Expected the field `notScopes` to be an array in the JSON data but got " + data['notScopes']);
        }
        // ensure the json data is a string
        if (data['policyDefinitionId'] && !(typeof data['policyDefinitionId'] === 'string' || data['policyDefinitionId'] instanceof String)) {
            throw new Error("Expected the field `policyDefinitionId` to be a primitive type in the JSON string but got " + data['policyDefinitionId']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }

        return true;
    }


}



/**
 * This message will be part of response in case of policy violation.
 * @member {String} description
 */
PolicyAssignmentProperties.prototype['description'] = undefined;

/**
 * The display name of the policy assignment.
 * @member {String} displayName
 */
PolicyAssignmentProperties.prototype['displayName'] = undefined;

/**
 * The policy assignment metadata.
 * @member {Object} metadata
 */
PolicyAssignmentProperties.prototype['metadata'] = undefined;

/**
 * The policy's excluded scopes.
 * @member {Array.<String>} notScopes
 */
PolicyAssignmentProperties.prototype['notScopes'] = undefined;

/**
 * Required if a parameter is used in policy rule.
 * @member {Object} parameters
 */
PolicyAssignmentProperties.prototype['parameters'] = undefined;

/**
 * The ID of the policy definition or policy set definition being assigned.
 * @member {String} policyDefinitionId
 */
PolicyAssignmentProperties.prototype['policyDefinitionId'] = undefined;

/**
 * The scope for the policy assignment.
 * @member {String} scope
 */
PolicyAssignmentProperties.prototype['scope'] = undefined;






export default PolicyAssignmentProperties;

