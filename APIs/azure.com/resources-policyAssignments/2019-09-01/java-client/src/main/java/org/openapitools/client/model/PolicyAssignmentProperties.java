/*
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ParameterValuesValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The policy assignment properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:21.742310-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyAssignmentProperties {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
   */
  @JsonAdapter(EnforcementModeEnum.Adapter.class)
  public enum EnforcementModeEnum {
    DEFAULT("Default"),
    
    DO_NOT_ENFORCE("DoNotEnforce");

    private String value;

    EnforcementModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnforcementModeEnum fromValue(String value) {
      for (EnforcementModeEnum b : EnforcementModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnforcementModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnforcementModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnforcementModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnforcementModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnforcementModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENFORCEMENT_MODE = "enforcementMode";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_MODE)
  private EnforcementModeEnum enforcementMode;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_NOT_SCOPES = "notScopes";
  @SerializedName(SERIALIZED_NAME_NOT_SCOPES)
  private List<String> notScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, ParameterValuesValue> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_POLICY_DEFINITION_ID = "policyDefinitionId";
  @SerializedName(SERIALIZED_NAME_POLICY_DEFINITION_ID)
  private String policyDefinitionId;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public PolicyAssignmentProperties() {
  }

  public PolicyAssignmentProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * This message will be part of response in case of policy violation.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PolicyAssignmentProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the policy assignment.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public PolicyAssignmentProperties enforcementMode(EnforcementModeEnum enforcementMode) {
    this.enforcementMode = enforcementMode;
    return this;
  }

  /**
   * The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
   * @return enforcementMode
   */
  @javax.annotation.Nullable
  public EnforcementModeEnum getEnforcementMode() {
    return enforcementMode;
  }

  public void setEnforcementMode(EnforcementModeEnum enforcementMode) {
    this.enforcementMode = enforcementMode;
  }


  public PolicyAssignmentProperties metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public PolicyAssignmentProperties notScopes(List<String> notScopes) {
    this.notScopes = notScopes;
    return this;
  }

  public PolicyAssignmentProperties addNotScopesItem(String notScopesItem) {
    if (this.notScopes == null) {
      this.notScopes = new ArrayList<>();
    }
    this.notScopes.add(notScopesItem);
    return this;
  }

  /**
   * The policy&#39;s excluded scopes.
   * @return notScopes
   */
  @javax.annotation.Nullable
  public List<String> getNotScopes() {
    return notScopes;
  }

  public void setNotScopes(List<String> notScopes) {
    this.notScopes = notScopes;
  }


  public PolicyAssignmentProperties parameters(Map<String, ParameterValuesValue> parameters) {
    this.parameters = parameters;
    return this;
  }

  public PolicyAssignmentProperties putParametersItem(String key, ParameterValuesValue parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * The parameter values for the policy rule. The keys are the parameter names.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, ParameterValuesValue> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, ParameterValuesValue> parameters) {
    this.parameters = parameters;
  }


  public PolicyAssignmentProperties policyDefinitionId(String policyDefinitionId) {
    this.policyDefinitionId = policyDefinitionId;
    return this;
  }

  /**
   * The ID of the policy definition or policy set definition being assigned.
   * @return policyDefinitionId
   */
  @javax.annotation.Nullable
  public String getPolicyDefinitionId() {
    return policyDefinitionId;
  }

  public void setPolicyDefinitionId(String policyDefinitionId) {
    this.policyDefinitionId = policyDefinitionId;
  }


  public PolicyAssignmentProperties scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * The scope for the policy assignment.
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyAssignmentProperties policyAssignmentProperties = (PolicyAssignmentProperties) o;
    return Objects.equals(this.description, policyAssignmentProperties.description) &&
        Objects.equals(this.displayName, policyAssignmentProperties.displayName) &&
        Objects.equals(this.enforcementMode, policyAssignmentProperties.enforcementMode) &&
        Objects.equals(this.metadata, policyAssignmentProperties.metadata) &&
        Objects.equals(this.notScopes, policyAssignmentProperties.notScopes) &&
        Objects.equals(this.parameters, policyAssignmentProperties.parameters) &&
        Objects.equals(this.policyDefinitionId, policyAssignmentProperties.policyDefinitionId) &&
        Objects.equals(this.scope, policyAssignmentProperties.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, enforcementMode, metadata, notScopes, parameters, policyDefinitionId, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyAssignmentProperties {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enforcementMode: ").append(toIndentedString(enforcementMode)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    notScopes: ").append(toIndentedString(notScopes)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    policyDefinitionId: ").append(toIndentedString(policyDefinitionId)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("enforcementMode");
    openapiFields.add("metadata");
    openapiFields.add("notScopes");
    openapiFields.add("parameters");
    openapiFields.add("policyDefinitionId");
    openapiFields.add("scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyAssignmentProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyAssignmentProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyAssignmentProperties is not found in the empty JSON string", PolicyAssignmentProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyAssignmentProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyAssignmentProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("enforcementMode") != null && !jsonObj.get("enforcementMode").isJsonNull()) && !jsonObj.get("enforcementMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enforcementMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enforcementMode").toString()));
      }
      // validate the optional field `enforcementMode`
      if (jsonObj.get("enforcementMode") != null && !jsonObj.get("enforcementMode").isJsonNull()) {
        EnforcementModeEnum.validateJsonElement(jsonObj.get("enforcementMode"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notScopes") != null && !jsonObj.get("notScopes").isJsonNull() && !jsonObj.get("notScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notScopes` to be an array in the JSON string but got `%s`", jsonObj.get("notScopes").toString()));
      }
      if ((jsonObj.get("policyDefinitionId") != null && !jsonObj.get("policyDefinitionId").isJsonNull()) && !jsonObj.get("policyDefinitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyDefinitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDefinitionId").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyAssignmentProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyAssignmentProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyAssignmentProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyAssignmentProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyAssignmentProperties>() {
           @Override
           public void write(JsonWriter out, PolicyAssignmentProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyAssignmentProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyAssignmentProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyAssignmentProperties
   * @throws IOException if the JSON string is invalid with respect to PolicyAssignmentProperties
   */
  public static PolicyAssignmentProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyAssignmentProperties.class);
  }

  /**
   * Convert an instance of PolicyAssignmentProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

