/**
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2019-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPolicyAssignmentsApi_H
#define OAI_OAIPolicyAssignmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIPolicyAssignment.h"
#include "OAIPolicyAssignmentListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPolicyAssignmentsApi : public QObject {
    Q_OBJECT

public:
    OAIPolicyAssignmentsApi(const int timeOut = 0);
    ~OAIPolicyAssignmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  policy_assignment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIPolicyAssignment [required]
    */
    virtual void policyAssignmentsCreate(const QString &scope, const QString &policy_assignment_name, const QString &api_version, const OAIPolicyAssignment &parameters);

    /**
    * @param[in]  policy_assignment_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIPolicyAssignment [required]
    */
    virtual void policyAssignmentsCreateById(const QString &policy_assignment_id, const QString &api_version, const OAIPolicyAssignment &parameters);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  policy_assignment_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void policyAssignmentsDelete(const QString &scope, const QString &policy_assignment_name, const QString &api_version);

    /**
    * @param[in]  policy_assignment_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void policyAssignmentsDeleteById(const QString &policy_assignment_id, const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  policy_assignment_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void policyAssignmentsGet(const QString &scope, const QString &policy_assignment_name, const QString &api_version);

    /**
    * @param[in]  policy_assignment_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void policyAssignmentsGetById(const QString &policy_assignment_id, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void policyAssignmentsList(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  management_group_id QString [required]
    * @param[in]  filter QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void policyAssignmentsListForManagementGroup(const QString &management_group_id, const QString &filter, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_namespace QString [required]
    * @param[in]  parent_resource_path QString [required]
    * @param[in]  resource_type QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void policyAssignmentsListForResource(const QString &resource_group_name, const QString &resource_provider_namespace, const QString &parent_resource_path, const QString &resource_type, const QString &resource_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void policyAssignmentsListForResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void policyAssignmentsCreateCallback(OAIHttpRequestWorker *worker);
    void policyAssignmentsCreateByIdCallback(OAIHttpRequestWorker *worker);
    void policyAssignmentsDeleteCallback(OAIHttpRequestWorker *worker);
    void policyAssignmentsDeleteByIdCallback(OAIHttpRequestWorker *worker);
    void policyAssignmentsGetCallback(OAIHttpRequestWorker *worker);
    void policyAssignmentsGetByIdCallback(OAIHttpRequestWorker *worker);
    void policyAssignmentsListCallback(OAIHttpRequestWorker *worker);
    void policyAssignmentsListForManagementGroupCallback(OAIHttpRequestWorker *worker);
    void policyAssignmentsListForResourceCallback(OAIHttpRequestWorker *worker);
    void policyAssignmentsListForResourceGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void policyAssignmentsCreateSignal(OAIPolicyAssignment summary);
    void policyAssignmentsCreateByIdSignal(OAIPolicyAssignment summary);
    void policyAssignmentsDeleteSignal(OAIPolicyAssignment summary);
    void policyAssignmentsDeleteByIdSignal(OAIPolicyAssignment summary);
    void policyAssignmentsGetSignal(OAIPolicyAssignment summary);
    void policyAssignmentsGetByIdSignal(OAIPolicyAssignment summary);
    void policyAssignmentsListSignal(OAIPolicyAssignmentListResult summary);
    void policyAssignmentsListForManagementGroupSignal(OAIPolicyAssignmentListResult summary);
    void policyAssignmentsListForResourceSignal(OAIPolicyAssignmentListResult summary);
    void policyAssignmentsListForResourceGroupSignal(OAIPolicyAssignmentListResult summary);


    void policyAssignmentsCreateSignalFull(OAIHttpRequestWorker *worker, OAIPolicyAssignment summary);
    void policyAssignmentsCreateByIdSignalFull(OAIHttpRequestWorker *worker, OAIPolicyAssignment summary);
    void policyAssignmentsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIPolicyAssignment summary);
    void policyAssignmentsDeleteByIdSignalFull(OAIHttpRequestWorker *worker, OAIPolicyAssignment summary);
    void policyAssignmentsGetSignalFull(OAIHttpRequestWorker *worker, OAIPolicyAssignment summary);
    void policyAssignmentsGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIPolicyAssignment summary);
    void policyAssignmentsListSignalFull(OAIHttpRequestWorker *worker, OAIPolicyAssignmentListResult summary);
    void policyAssignmentsListForManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIPolicyAssignmentListResult summary);
    void policyAssignmentsListForResourceSignalFull(OAIHttpRequestWorker *worker, OAIPolicyAssignmentListResult summary);
    void policyAssignmentsListForResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIPolicyAssignmentListResult summary);

    Q_DECL_DEPRECATED_X("Use policyAssignmentsCreateSignalError() instead")
    void policyAssignmentsCreateSignalE(OAIPolicyAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsCreateSignalError(OAIPolicyAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsCreateByIdSignalError() instead")
    void policyAssignmentsCreateByIdSignalE(OAIPolicyAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsCreateByIdSignalError(OAIPolicyAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsDeleteSignalError() instead")
    void policyAssignmentsDeleteSignalE(OAIPolicyAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsDeleteSignalError(OAIPolicyAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsDeleteByIdSignalError() instead")
    void policyAssignmentsDeleteByIdSignalE(OAIPolicyAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsDeleteByIdSignalError(OAIPolicyAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsGetSignalError() instead")
    void policyAssignmentsGetSignalE(OAIPolicyAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsGetSignalError(OAIPolicyAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsGetByIdSignalError() instead")
    void policyAssignmentsGetByIdSignalE(OAIPolicyAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsGetByIdSignalError(OAIPolicyAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsListSignalError() instead")
    void policyAssignmentsListSignalE(OAIPolicyAssignmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsListSignalError(OAIPolicyAssignmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsListForManagementGroupSignalError() instead")
    void policyAssignmentsListForManagementGroupSignalE(OAIPolicyAssignmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsListForManagementGroupSignalError(OAIPolicyAssignmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsListForResourceSignalError() instead")
    void policyAssignmentsListForResourceSignalE(OAIPolicyAssignmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsListForResourceSignalError(OAIPolicyAssignmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsListForResourceGroupSignalError() instead")
    void policyAssignmentsListForResourceGroupSignalE(OAIPolicyAssignmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsListForResourceGroupSignalError(OAIPolicyAssignmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use policyAssignmentsCreateSignalErrorFull() instead")
    void policyAssignmentsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsCreateByIdSignalErrorFull() instead")
    void policyAssignmentsCreateByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsCreateByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsDeleteSignalErrorFull() instead")
    void policyAssignmentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsDeleteByIdSignalErrorFull() instead")
    void policyAssignmentsDeleteByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsDeleteByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsGetSignalErrorFull() instead")
    void policyAssignmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsGetByIdSignalErrorFull() instead")
    void policyAssignmentsGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsListSignalErrorFull() instead")
    void policyAssignmentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsListForManagementGroupSignalErrorFull() instead")
    void policyAssignmentsListForManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsListForManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsListForResourceSignalErrorFull() instead")
    void policyAssignmentsListForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsListForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyAssignmentsListForResourceGroupSignalErrorFull() instead")
    void policyAssignmentsListForResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyAssignmentsListForResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
