/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessResponse from '../model/AccessResponse';
import GetaccesstokenIdRequest from '../model/GetaccesstokenIdRequest';
import Sample from '../model/Sample';

/**
* Authorization service.
* @module api/AuthorizationApi
* @version 1.0.0
*/
export default class AuthorizationApi {

    /**
    * Constructs a new AuthorizationApi. 
    * @alias module:api/AuthorizationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAuthorizationCodeId operation.
     * @callback module:api/AuthorizationApi~getAuthorizationCodeIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sample} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Authorization Code
     * Call to this API starts authorization flow using OAuth 2.0 protocol. This isn't an API call—it's a DigiLocker web page that lets the user sign in to DigiLocker and authorize your application to access user’s data. After the user decides whether or not to authorize your app, they will be redirected to the redirect link provided by your application.
     * @param {String} responseType Provide the grant type requested, either token or code.
     * @param {String} redirectUri The URI to redirect the user after authorization has completed.
     * @param {String} state This is your application specific data that will be passed back to your application through redirect_uri.
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Provide the client id that was created during the application registration process on Partners Portal.
     * @param {String} [codeChallenge] A unique random string called code verifier (code_verifier) is created by the client application for every authorization request. The code_challenge sent as this parameter is the Base64URL (with no padding) encoded SHA256 hash of the code verifier.         Code block:         ```        string base64_url_encode_without_padding(string arg)        {            string s = base64encode(arg); //Regular base64encoder with padding           s = s.replace(’=’,’’); //Remove any trailing ’=’           s = s.replace(’+’, ’-’); //Replace ’+’ with ’-’           s = s.replace(’/’, ’_’); //Replace ’/’ with ’_’ return s;         }         ``` 
     * @param {String} [codeChallengeMethod] Specifies what method was used to encode a code_verifier to generate code_challenge parameter above. This parameter must be used with the code_challenge parameter. The only supported values for this parameter is S256.
     * @param {String} [dlFlow] If this parameter is provided its value will always be signup. This parameter indicates that the user does not have a DigiLocker account and will be directed to the signup flow directly. After the account is created, the user will be directed to the authorization flow. If this parameter is not sent, the user will be redirected to the sign in flow.
     * @param {Number} [verifiedMobile] Verified mobile number of the user. If this parameter is passed, DigiLocker will skip the mobile OTP verification step during sign up. DigiLocker will treat the mobile number passed in this parameter as a verified mobile number by the trusted client application. This parameter will be used only if dl_flow parameter mentioned above is set to signup and will be ignored otherwise.
     * @param {module:api/AuthorizationApi~getAuthorizationCodeIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sample}
     */
    getAuthorizationCodeId(responseType, redirectUri, state, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'responseType' is set
      if (responseType === undefined || responseType === null) {
        throw new Error("Missing the required parameter 'responseType' when calling getAuthorizationCodeId");
      }
      // verify the required parameter 'redirectUri' is set
      if (redirectUri === undefined || redirectUri === null) {
        throw new Error("Missing the required parameter 'redirectUri' when calling getAuthorizationCodeId");
      }
      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling getAuthorizationCodeId");
      }

      let pathParams = {
      };
      let queryParams = {
        'client_id': opts['clientId'],
        'response_type': responseType,
        'redirect_uri': redirectUri,
        'state': state,
        'Code_challenge': opts['codeChallenge'],
        'Code_challenge_method': opts['codeChallengeMethod'],
        'dl_flow': opts['dlFlow'],
        'Verified_mobile': opts['verifiedMobile']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauthAuthorizeCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sample;
      return this.apiClient.callApi(
        '/oauth2/1/authorize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getaccesstokenId operation.
     * @callback module:api/AuthorizationApi~getaccesstokenIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Access Token
     * This endpoint only applies to apps using the authorization code flow. An app calls this endpoint to acquire a bearer token once the user has authorized the app. Calls to /oauth2/1/token need to be authenticated using the app's key and secret. These can either be passed as application/x-www-form-urlencoded POST parameters (see parameters below) or via HTTP basic authentication. If basic authentication is used, the app key should be provided as the username, and the app secret should be provided as the password.
     * @param {module:model/GetaccesstokenIdRequest} getaccesstokenIdRequest Details of documents being created.
     * @param {module:api/AuthorizationApi~getaccesstokenIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessResponse}
     */
    getaccesstokenId(getaccesstokenIdRequest, callback) {
      let postBody = getaccesstokenIdRequest;
      // verify the required parameter 'getaccesstokenIdRequest' is set
      if (getaccesstokenIdRequest === undefined || getaccesstokenIdRequest === null) {
        throw new Error("Missing the required parameter 'getaccesstokenIdRequest' when calling getaccesstokenId");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccessResponse;
      return this.apiClient.callApi(
        '/oauth2/1/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
