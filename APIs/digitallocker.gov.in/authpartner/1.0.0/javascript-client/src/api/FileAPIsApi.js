/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EaadharXamlSchema from '../model/EaadharXamlSchema';
import FileUpload from '../model/FileUpload';
import FileUploadResponse from '../model/FileUploadResponse';
import GetEAadhaarDataInXMLFormatId401Response from '../model/GetEAadhaarDataInXMLFormatId401Response';
import GetEAadhaarDataInXMLFormatId404Response from '../model/GetEAadhaarDataInXMLFormatId404Response';
import GetFileFromURIId400Response from '../model/GetFileFromURIId400Response';
import GetFileFromURIId404Response from '../model/GetFileFromURIId404Response';
import GetFileFromURIId500Response from '../model/GetFileFromURIId500Response';
import GetFileFromURIId503Response from '../model/GetFileFromURIId503Response';
import GetListOfIssuedDocumentsId200Response from '../model/GetListOfIssuedDocumentsId200Response';
import GetListOfIssuedDocumentsVersion1Id500Response from '../model/GetListOfIssuedDocumentsVersion1Id500Response';
import GetListOfSelfUploadedDocuments404Response from '../model/GetListOfSelfUploadedDocuments404Response';
import GetListOfSelfUploadedDocuments500Response from '../model/GetListOfSelfUploadedDocuments500Response';
import PullDocumentId400Response from '../model/PullDocumentId400Response';
import PullDocumentId404Response from '../model/PullDocumentId404Response';
import PullDocumentId500Response from '../model/PullDocumentId500Response';
import PushURIToAccountId500Response from '../model/PushURIToAccountId500Response';
import Sample1 from '../model/Sample1';
import Sample2 from '../model/Sample2';
import Sample3 from '../model/Sample3';
import Sample4 from '../model/Sample4';
import UploadFileToLockerId400Response from '../model/UploadFileToLockerId400Response';
import UploadFileToLockerId401Response from '../model/UploadFileToLockerId401Response';
import XMLFormatSchema from '../model/XMLFormatSchema';

/**
* FileAPIs service.
* @module api/FileAPIsApi
* @version 1.0.0
*/
export default class FileAPIsApi {

    /**
    * Constructs a new FileAPIsApi. 
    * @alias module:api/FileAPIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCertificateDataInXMLFormatFromURIId operation.
     * @callback module:api/FileAPIsApi~getCertificateDataInXMLFormatFromURIIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/XMLFormatSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Certificate Data in XML Format from URI
     * Returns the certificate data in machine readable XML format for a URI. This API can be used to only for issued documents. The XML data may not be available for all documents. If the XML data is available for a particular document, the mime parameter in Get List of Issued Documents API will contain application/xml. Please refer to Digital Locker XML Certificate Formats for more details of XML formats of various documents.
     * @param {String} uri 
     * @param {module:api/FileAPIsApi~getCertificateDataInXMLFormatFromURIIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/XMLFormatSchema}
     */
    getCertificateDataInXMLFormatFromURIId(uri, callback) {
      let postBody = null;
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling getCertificateDataInXMLFormatFromURIId");
      }

      let pathParams = {
        'uri': uri
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/xml', 'application/json'];
      let returnType = XMLFormatSchema;
      return this.apiClient.callApi(
        '/oauth2/1/xml/{uri}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEAadhaarDataInXMLFormatId operation.
     * @callback module:api/FileAPIsApi~getEAadhaarDataInXMLFormatIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EaadharXamlSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get e-Aadhaar Data in XML Format
     * Returns e-Aadhaar data in XML format for the account.
     * @param {module:api/FileAPIsApi~getEAadhaarDataInXMLFormatIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EaadharXamlSchema}
     */
    getEAadhaarDataInXMLFormatId(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/xml', 'application/json'];
      let returnType = EaadharXamlSchema;
      return this.apiClient.callApi(
        '/oauth2/2/xml/eaadhaar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileFromURIId operation.
     * @callback module:api/FileAPIsApi~getFileFromURIIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get File from URI
     * Returns a file from URI. This API can be used to fetch both issued document and uploaded document.
     * @param {String} uri This is the unique identifier of the document.
     * @param {module:api/FileAPIsApi~getFileFromURIIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getFileFromURIId(uri, callback) {
      let postBody = null;
      // verify the required parameter 'uri' is set
      if (uri === undefined || uri === null) {
        throw new Error("Missing the required parameter 'uri' when calling getFileFromURIId");
      }

      let pathParams = {
        'uri': uri
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/oauth2/1/file/{uri}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListOfIssuedDocumentsId operation.
     * @callback module:api/FileAPIsApi~getListOfIssuedDocumentsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetListOfIssuedDocumentsId200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issued Documents
     * Returns the list of meta-data about issued documents in user’s DigiLocker.
     * @param {module:api/FileAPIsApi~getListOfIssuedDocumentsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetListOfIssuedDocumentsId200Response}
     */
    getListOfIssuedDocumentsId(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetListOfIssuedDocumentsId200Response;
      return this.apiClient.callApi(
        '/oauth2/2/files/issued', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListOfIssuedDocumentsVersion1Id operation.
     * @callback module:api/FileAPIsApi~getListOfIssuedDocumentsVersion1IdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sample2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issued Documents
     * Returns the list of meta-data about issued documents in user’s DigiLocker.
     * @param {module:api/FileAPIsApi~getListOfIssuedDocumentsVersion1IdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sample2}
     */
    getListOfIssuedDocumentsVersion1Id(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sample2;
      return this.apiClient.callApi(
        '/oauth2/1/files/issued', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListOfSelfUploadedDocuments operation.
     * @callback module:api/FileAPIsApi~getListOfSelfUploadedDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sample1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List of Self Uploaded Documents
     * Returns the list of meta-data about documents or folders in user’s DigiLocker in a specific location.
     * @param {module:api/FileAPIsApi~getListOfSelfUploadedDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sample1}
     */
    getListOfSelfUploadedDocuments(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sample1;
      return this.apiClient.callApi(
        '/oauth2/1/files/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListOfSelfUploadedDocumentsId operation.
     * @callback module:api/FileAPIsApi~getListOfSelfUploadedDocumentsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sample3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List of Self Uploaded Documents
     * Returns the list of meta-data about documents or folders in user’s DigiLocker in a specific location.
     * @param {String} id The id of the folder to list. To list the files of root folder of a user’s locker, do not send this parameter. This is sent as a part of the URL.
     * @param {module:api/FileAPIsApi~getListOfSelfUploadedDocumentsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sample3}
     */
    getListOfSelfUploadedDocumentsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getListOfSelfUploadedDocumentsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sample3;
      return this.apiClient.callApi(
        '/oauth2/1/files/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullDocumentId operation.
     * @callback module:api/FileAPIsApi~pullDocumentIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sample4} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pull Document
     * This API allows a client application to search a document/certificate from issuer’s repository using the parameters provided by a user. The searched document is saved in user’s issued document section of DigiLocker if the search is successful.
     * @param {Object} opts Optional parameters
     * @param {String} [chasisNo] Other parameters required for fetching a document as listed in paramname field of Get Search Parameters API.
     * @param {String} [consent] The consent indicator from the user for performing demographic authentication using Aadhaar details. This Partner Application must capture the user consent for performing the Aadhaar demographic authentication. The possible values are ‘Y’ and ‘N’. The sign up request will be processed only when this indicator is ‘Y’.
     * @param {String} [doctype] A 5 character unique document type provided by DigiLocker.
     * @param {String} [orgid] The organization id for the issuer in DigiLocker. This organization id is returned in Get List of Issuers API mentioned above.
     * @param {String} [regNo] Other parameters required for fetching a document as listed in paramname field of Get Search Parameters API.
     * @param {module:api/FileAPIsApi~pullDocumentIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sample4}
     */
    pullDocumentId(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'chasis_no': opts['chasisNo'],
        'consent': opts['consent'],
        'doctype': opts['doctype'],
        'orgid': opts['orgid'],
        'reg_no': opts['regNo']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Sample4;
      return this.apiClient.callApi(
        '/oauth2/1/pull/pulldocument', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFileToLockerId operation.
     * @callback module:api/FileAPIsApi~uploadFileToLockerIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload file to locker
     * This API can be used to save/upload a file to uploaded documents in DigiLocker. The allowed file types are JPG, JPEG, PNG and PDF. The file size must not exceed 10MB.
     * @param {Object} opts Optional parameters
     * @param {String} [path] The destination path of the file in DigiLocker including filename.
     * @param {String} [hmac] This is used to verify the integrity of the file data. The client app calculates the hash message authentication code (HMAC) of the file content using SHA256 hashing algorithm and the client secret as the hashing key. The resulting HMAC is converted to Base64 format and sent in this parameter. Upon upload of file, DigiLocker calculates the HMAC of the file data and compares it with this HMAC..
     * @param {module:model/FileUpload} [fileUpload] 
     * @param {module:api/FileAPIsApi~uploadFileToLockerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileUploadResponse}
     */
    uploadFileToLockerId(opts, callback) {
      opts = opts || {};
      let postBody = opts['fileUpload'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'path': opts['path'],
        'hmac': opts['hmac']
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/octet-stream', 'image/jpeg', 'image/jpg', 'image/pdf', 'image/png'];
      let accepts = ['application/json'];
      let returnType = FileUploadResponse;
      return this.apiClient.callApi(
        '/oauth2/1/file/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
