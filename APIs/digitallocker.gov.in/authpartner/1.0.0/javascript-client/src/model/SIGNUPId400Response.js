/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Response10 from './Response10';
import Response11 from './Response11';
import Response12 from './Response12';

/**
 * The SIGNUPId400Response model module.
 * @module model/SIGNUPId400Response
 * @version 1.0.0
 */
class SIGNUPId400Response {
    /**
     * Constructs a new <code>SIGNUPId400Response</code>.
     * @alias module:model/SIGNUPId400Response
     * @param {(module:model/Response10|module:model/Response11|module:model/Response12)} instance The actual instance to initialize SIGNUPId400Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "Response10") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Response10.validateJSON(instance); // throw an exception if no match
                // create Response10 from JS object
                this.actualInstance = Response10.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Response10
            errorMessages.push("Failed to construct Response10: " + err)
        }

        try {
            if (typeof instance === "Response11") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Response11.validateJSON(instance); // throw an exception if no match
                // create Response11 from JS object
                this.actualInstance = Response11.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Response11
            errorMessages.push("Failed to construct Response11: " + err)
        }

        try {
            if (typeof instance === "Response12") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Response12.validateJSON(instance); // throw an exception if no match
                // create Response12 from JS object
                this.actualInstance = Response12.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Response12
            errorMessages.push("Failed to construct Response12: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `SIGNUPId400Response` with oneOf schemas Response10, Response11, Response12. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `SIGNUPId400Response` with oneOf schemas Response10, Response11, Response12. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>SIGNUPId400Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SIGNUPId400Response} obj Optional instance to populate.
     * @return {module:model/SIGNUPId400Response} The populated <code>SIGNUPId400Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new SIGNUPId400Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>Response10</code>, <code>Response11</code>, <code>Response12</code>.
     * @return {(module:model/Response10|module:model/Response11|module:model/Response12)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Response10</code>, <code>Response11</code>, <code>Response12</code>.
     * @param {(module:model/Response10|module:model/Response11|module:model/Response12)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = SIGNUPId400Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of SIGNUPId400Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/SIGNUPId400Response} An instance of SIGNUPId400Response.
     */
    static fromJSON = function(json_string){
        return SIGNUPId400Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * invalid_parameter
 * @member {String} error
 */
SIGNUPId400Response.prototype['error'] = undefined;

/**
 * One or more of the mandatory parameters is missing or invalid. The error description text will contain one or more of the following error texts:|-  uid parameter is missing or invalid  Name parameter is missing or invalid  Dob parameter is missing or invalid  Gender parameter is missing or invalid  Mobile parameter is missing or invalid  Verification parameter is missing or invalid  Consent parameter is missing or invalid  Timestamp parameter is missing or invalid  HMAC parameter is missing or invalid
 * @member {String} error_description
 */
SIGNUPId400Response.prototype['error_description'] = undefined;


SIGNUPId400Response.OneOf = ["Response10", "Response11", "Response12"];

export default SIGNUPId400Response;

