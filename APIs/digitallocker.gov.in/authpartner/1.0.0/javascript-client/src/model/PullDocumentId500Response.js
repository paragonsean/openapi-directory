/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Response14 from './Response14';
import Response15 from './Response15';
import Response16 from './Response16';
import Response17 from './Response17';
import Response18 from './Response18';

/**
 * The PullDocumentId500Response model module.
 * @module model/PullDocumentId500Response
 * @version 1.0.0
 */
class PullDocumentId500Response {
    /**
     * Constructs a new <code>PullDocumentId500Response</code>.
     * @alias module:model/PullDocumentId500Response
     * @param {(module:model/Response14|module:model/Response15|module:model/Response16|module:model/Response17|module:model/Response18)} instance The actual instance to initialize PullDocumentId500Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "Response14") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Response14.validateJSON(instance); // throw an exception if no match
                // create Response14 from JS object
                this.actualInstance = Response14.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Response14
            errorMessages.push("Failed to construct Response14: " + err)
        }

        try {
            if (typeof instance === "Response15") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Response15.validateJSON(instance); // throw an exception if no match
                // create Response15 from JS object
                this.actualInstance = Response15.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Response15
            errorMessages.push("Failed to construct Response15: " + err)
        }

        try {
            if (typeof instance === "Response16") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Response16.validateJSON(instance); // throw an exception if no match
                // create Response16 from JS object
                this.actualInstance = Response16.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Response16
            errorMessages.push("Failed to construct Response16: " + err)
        }

        try {
            if (typeof instance === "Response17") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Response17.validateJSON(instance); // throw an exception if no match
                // create Response17 from JS object
                this.actualInstance = Response17.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Response17
            errorMessages.push("Failed to construct Response17: " + err)
        }

        try {
            if (typeof instance === "Response18") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Response18.validateJSON(instance); // throw an exception if no match
                // create Response18 from JS object
                this.actualInstance = Response18.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Response18
            errorMessages.push("Failed to construct Response18: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `PullDocumentId500Response` with oneOf schemas Response14, Response15, Response16, Response17, Response18. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `PullDocumentId500Response` with oneOf schemas Response14, Response15, Response16, Response17, Response18. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>PullDocumentId500Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PullDocumentId500Response} obj Optional instance to populate.
     * @return {module:model/PullDocumentId500Response} The populated <code>PullDocumentId500Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new PullDocumentId500Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>Response14</code>, <code>Response15</code>, <code>Response16</code>, <code>Response17</code>, <code>Response18</code>.
     * @return {(module:model/Response14|module:model/Response15|module:model/Response16|module:model/Response17|module:model/Response18)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Response14</code>, <code>Response15</code>, <code>Response16</code>, <code>Response17</code>, <code>Response18</code>.
     * @param {(module:model/Response14|module:model/Response15|module:model/Response16|module:model/Response17|module:model/Response18)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = PullDocumentId500Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of PullDocumentId500Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/PullDocumentId500Response} An instance of PullDocumentId500Response.
     */
    static fromJSON = function(json_string){
        return PullDocumentId500Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * aadhaar_not_linked
 * @member {String} error
 */
PullDocumentId500Response.prototype['error'] = undefined;

/**
 * To access issued documents, please link your Aadhaar number to your DigiLocker account.
 * @member {String} error_description
 */
PullDocumentId500Response.prototype['error_description'] = undefined;


PullDocumentId500Response.OneOf = ["Response14", "Response15", "Response16", "Response17", "Response18"];

export default PullDocumentId500Response;

