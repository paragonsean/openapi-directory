/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccessResponse model module.
 * @module model/AccessResponse
 * @version 1.0.0
 */
class AccessResponse {
    /**
     * Constructs a new <code>AccessResponse</code>.
     * @alias module:model/AccessResponse
     * @param accessToken {String} The access token that can be used to call the DigiLocker APIs.
     * @param digilockerId {String} A unique 36 character DigiLocker Id of the user account.
     * @param dob {Number} This is date of birth of the user as registered with DigiLocker in DDMMYYYY format.
     * @param eaadhar {module:model/AccessResponse.EaadharEnum} This indicates whether eAadhaar data is available for this account. Possible values are Y and N.
     * @param expiresIn {Number} The duration in seconds for which the access token is valid
     * @param gender {module:model/AccessResponse.GenderEnum} This is gender of the user as registered with DigiLocker. The possible values are M, F, T for male, female and transgender respectively.
     * @param name {String} The name of the user as registered with DigiLocker.
     * @param referenceKey {String} A unique reference of the user account.
     * @param refreshToken {String} The refresh token used to refresh the above access token when it expires. Please refer to Refresh Access Token API for more details.
     * @param scope {String} Scope of the token.
     * @param tokenType {String} The type of token which will always be Bearer.
     */
    constructor(accessToken, digilockerId, dob, eaadhar, expiresIn, gender, name, referenceKey, refreshToken, scope, tokenType) { 
        
        AccessResponse.initialize(this, accessToken, digilockerId, dob, eaadhar, expiresIn, gender, name, referenceKey, refreshToken, scope, tokenType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessToken, digilockerId, dob, eaadhar, expiresIn, gender, name, referenceKey, refreshToken, scope, tokenType) { 
        obj['access_token'] = accessToken;
        obj['digilocker_id'] = digilockerId;
        obj['dob'] = dob;
        obj['eaadhar'] = eaadhar;
        obj['expires_in'] = expiresIn;
        obj['gender'] = gender;
        obj['name'] = name;
        obj['reference_key'] = referenceKey;
        obj['refresh_token'] = refreshToken;
        obj['scope'] = scope;
        obj['token_type'] = tokenType;
    }

    /**
     * Constructs a <code>AccessResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccessResponse} obj Optional instance to populate.
     * @return {module:model/AccessResponse} The populated <code>AccessResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccessResponse();

            if (data.hasOwnProperty('access_token')) {
                obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
            }
            if (data.hasOwnProperty('digilocker_id')) {
                obj['digilocker_id'] = ApiClient.convertToType(data['digilocker_id'], 'String');
            }
            if (data.hasOwnProperty('dob')) {
                obj['dob'] = ApiClient.convertToType(data['dob'], 'Number');
            }
            if (data.hasOwnProperty('eaadhar')) {
                obj['eaadhar'] = ApiClient.convertToType(data['eaadhar'], 'String');
            }
            if (data.hasOwnProperty('expires_in')) {
                obj['expires_in'] = ApiClient.convertToType(data['expires_in'], 'Number');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('reference_key')) {
                obj['reference_key'] = ApiClient.convertToType(data['reference_key'], 'String');
            }
            if (data.hasOwnProperty('refresh_token')) {
                obj['refresh_token'] = ApiClient.convertToType(data['refresh_token'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('token_type')) {
                obj['token_type'] = ApiClient.convertToType(data['token_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccessResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccessResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccessResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['access_token'] && !(typeof data['access_token'] === 'string' || data['access_token'] instanceof String)) {
            throw new Error("Expected the field `access_token` to be a primitive type in the JSON string but got " + data['access_token']);
        }
        // ensure the json data is a string
        if (data['digilocker_id'] && !(typeof data['digilocker_id'] === 'string' || data['digilocker_id'] instanceof String)) {
            throw new Error("Expected the field `digilocker_id` to be a primitive type in the JSON string but got " + data['digilocker_id']);
        }
        // ensure the json data is a string
        if (data['eaadhar'] && !(typeof data['eaadhar'] === 'string' || data['eaadhar'] instanceof String)) {
            throw new Error("Expected the field `eaadhar` to be a primitive type in the JSON string but got " + data['eaadhar']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['reference_key'] && !(typeof data['reference_key'] === 'string' || data['reference_key'] instanceof String)) {
            throw new Error("Expected the field `reference_key` to be a primitive type in the JSON string but got " + data['reference_key']);
        }
        // ensure the json data is a string
        if (data['refresh_token'] && !(typeof data['refresh_token'] === 'string' || data['refresh_token'] instanceof String)) {
            throw new Error("Expected the field `refresh_token` to be a primitive type in the JSON string but got " + data['refresh_token']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['token_type'] && !(typeof data['token_type'] === 'string' || data['token_type'] instanceof String)) {
            throw new Error("Expected the field `token_type` to be a primitive type in the JSON string but got " + data['token_type']);
        }

        return true;
    }


}

AccessResponse.RequiredProperties = ["access_token", "digilocker_id", "dob", "eaadhar", "expires_in", "gender", "name", "reference_key", "refresh_token", "scope", "token_type"];

/**
 * The access token that can be used to call the DigiLocker APIs.
 * @member {String} access_token
 */
AccessResponse.prototype['access_token'] = undefined;

/**
 * A unique 36 character DigiLocker Id of the user account.
 * @member {String} digilocker_id
 */
AccessResponse.prototype['digilocker_id'] = undefined;

/**
 * This is date of birth of the user as registered with DigiLocker in DDMMYYYY format.
 * @member {Number} dob
 */
AccessResponse.prototype['dob'] = undefined;

/**
 * This indicates whether eAadhaar data is available for this account. Possible values are Y and N.
 * @member {module:model/AccessResponse.EaadharEnum} eaadhar
 */
AccessResponse.prototype['eaadhar'] = undefined;

/**
 * The duration in seconds for which the access token is valid
 * @member {Number} expires_in
 */
AccessResponse.prototype['expires_in'] = undefined;

/**
 * This is gender of the user as registered with DigiLocker. The possible values are M, F, T for male, female and transgender respectively.
 * @member {module:model/AccessResponse.GenderEnum} gender
 */
AccessResponse.prototype['gender'] = undefined;

/**
 * The name of the user as registered with DigiLocker.
 * @member {String} name
 */
AccessResponse.prototype['name'] = undefined;

/**
 * A unique reference of the user account.
 * @member {String} reference_key
 */
AccessResponse.prototype['reference_key'] = undefined;

/**
 * The refresh token used to refresh the above access token when it expires. Please refer to Refresh Access Token API for more details.
 * @member {String} refresh_token
 */
AccessResponse.prototype['refresh_token'] = undefined;

/**
 * Scope of the token.
 * @member {String} scope
 */
AccessResponse.prototype['scope'] = undefined;

/**
 * The type of token which will always be Bearer.
 * @member {String} token_type
 */
AccessResponse.prototype['token_type'] = undefined;





/**
 * Allowed values for the <code>eaadhar</code> property.
 * @enum {String}
 * @readonly
 */
AccessResponse['EaadharEnum'] = {

    /**
     * value: "Y"
     * @const
     */
    "Y": "Y",

    /**
     * value: "N"
     * @const
     */
    "N": "N"
};


/**
 * Allowed values for the <code>gender</code> property.
 * @enum {String}
 * @readonly
 */
AccessResponse['GenderEnum'] = {

    /**
     * value: "M"
     * @const
     */
    "M": "M",

    /**
     * value: "F"
     * @const
     */
    "F": "F",

    /**
     * value: "T"
     * @const
     */
    "T": "T"
};



export default AccessResponse;

