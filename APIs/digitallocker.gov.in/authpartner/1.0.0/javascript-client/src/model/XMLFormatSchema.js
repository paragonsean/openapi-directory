/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import XMLFormatSchemaSignature from './XMLFormatSchemaSignature';

/**
 * The XMLFormatSchema model module.
 * @module model/XMLFormatSchema
 * @version 1.0.0
 */
class XMLFormatSchema {
    /**
     * Constructs a new <code>XMLFormatSchema</code>.
     * @alias module:model/XMLFormatSchema
     * @param certificateData {Array.<Object>} 
     * @param signature {module:model/XMLFormatSchemaSignature} 
     */
    constructor(certificateData, signature) { 
        
        XMLFormatSchema.initialize(this, certificateData, signature);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificateData, signature) { 
        obj['CertificateData'] = certificateData;
        obj['Signature'] = signature;
    }

    /**
     * Constructs a <code>XMLFormatSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/XMLFormatSchema} obj Optional instance to populate.
     * @return {module:model/XMLFormatSchema} The populated <code>XMLFormatSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new XMLFormatSchema();

            if (data.hasOwnProperty('CertificateData')) {
                obj['CertificateData'] = ApiClient.convertToType(data['CertificateData'], [Object]);
            }
            if (data.hasOwnProperty('Signature')) {
                obj['Signature'] = XMLFormatSchemaSignature.constructFromObject(data['Signature']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>XMLFormatSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>XMLFormatSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of XMLFormatSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['CertificateData'])) {
            throw new Error("Expected the field `CertificateData` to be an array in the JSON data but got " + data['CertificateData']);
        }
        // validate the optional field `Signature`
        if (data['Signature']) { // data not null
          XMLFormatSchemaSignature.validateJSON(data['Signature']);
        }

        return true;
    }


}

XMLFormatSchema.RequiredProperties = ["CertificateData", "Signature"];

/**
 * @member {Array.<Object>} CertificateData
 */
XMLFormatSchema.prototype['CertificateData'] = undefined;

/**
 * @member {module:model/XMLFormatSchemaSignature} Signature
 */
XMLFormatSchema.prototype['Signature'] = undefined;






export default XMLFormatSchema;

