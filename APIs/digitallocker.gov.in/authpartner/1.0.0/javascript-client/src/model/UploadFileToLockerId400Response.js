/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadFileToLockerId400Response model module.
 * @module model/UploadFileToLockerId400Response
 * @version 1.0.0
 */
class UploadFileToLockerId400Response {
    /**
     * Constructs a new <code>UploadFileToLockerId400Response</code>.
     * @alias module:model/UploadFileToLockerId400Response
     */
    constructor() { 
        
        UploadFileToLockerId400Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UploadFileToLockerId400Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadFileToLockerId400Response} obj Optional instance to populate.
     * @return {module:model/UploadFileToLockerId400Response} The populated <code>UploadFileToLockerId400Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadFileToLockerId400Response();

            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('error_description')) {
                obj['error_description'] = ApiClient.convertToType(data['error_description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadFileToLockerId400Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadFileToLockerId400Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['error_description'] && !(typeof data['error_description'] === 'string' || data['error_description'] instanceof String)) {
            throw new Error("Expected the field `error_description` to be a primitive type in the JSON string but got " + data['error_description']);
        }

        return true;
    }


}



/**
 * @member {module:model/UploadFileToLockerId400Response.ErrorEnum} error
 */
UploadFileToLockerId400Response.prototype['error'] = undefined;

/**
 * @member {module:model/UploadFileToLockerId400Response.ErrorDescriptionEnum} error_description
 */
UploadFileToLockerId400Response.prototype['error_description'] = undefined;





/**
 * Allowed values for the <code>error</code> property.
 * @enum {String}
 * @readonly
 */
UploadFileToLockerId400Response['ErrorEnum'] = {

    /**
     * value: "path_missing"
     * @const
     */
    "path_missing": "path_missing",

    /**
     * value: "contenttype_missing"
     * @const
     */
    "contenttype_missing": "contenttype_missing",

    /**
     * value: "hmac_missing"
     * @const
     */
    "hmac_missing": "hmac_missing",

    /**
     * value: "filename_missing"
     * @const
     */
    "filename_missing": "filename_missing",

    /**
     * value: "hmac_mismatch"
     * @const
     */
    "hmac_mismatch": "hmac_mismatch",

    /**
     * value: "invalid_filename"
     * @const
     */
    "invalid_filename": "invalid_filename",

    /**
     * value: "invalid_filesize"
     * @const
     */
    "invalid_filesize": "invalid_filesize",

    /**
     * value: "invalid_filetype"
     * @const
     */
    "invalid_filetype": "invalid_filetype",

    /**
     * value: "invalid_path"
     * @const
     */
    "invalid_path": "invalid_path",

    /**
     * value: "file_data_missing"
     * @const
     */
    "file_data_missing": "file_data_missing",

    /**
     * value: "mimetype_mismatch"
     * @const
     */
    "mimetype_mismatch": "mimetype_mismatch"
};


/**
 * Allowed values for the <code>error_description</code> property.
 * @enum {String}
 * @readonly
 */
UploadFileToLockerId400Response['ErrorDescriptionEnum'] = {

    /**
     * value: "Path parameter is missing"
     * @const
     */
    "Path parameter is missing": "Path parameter is missing",

    /**
     * value: "Content-Type parameter is missing"
     * @const
     */
    "Content-Type parameter is missing": "Content-Type parameter is missing",

    /**
     * value: "HMAC parameter is missing"
     * @const
     */
    "HMAC parameter is missing": "HMAC parameter is missing",

    /**
     * value: "Filename is missing in path parameter"
     * @const
     */
    "Filename is missing in path parameter": "Filename is missing in path parameter",

    /**
     * value: "HMAC does not match"
     * @const
     */
    "HMAC does not match": "HMAC does not match",

    /**
     * value: "Restricted characters are not allowed in file name"
     * @const
     */
    "Restricted characters are not allowed in file name": "Restricted characters are not allowed in file name",

    /**
     * value: "The file size exceeds maximum allowed file size of 10MB"
     * @const
     */
    "The file size exceeds maximum allowed file size of 10MB": "The file size exceeds maximum allowed file size of 10MB",

    /**
     * value: "The file type is not allowed"
     * @const
     */
    "The file type is not allowed": "The file type is not allowed",

    /**
     * value: "The destination folder does not exist"
     * @const
     */
    "The destination folder does not exist": "The destination folder does not exist",

    /**
     * value: "Missing file content in the request"
     * @const
     */
    "Missing file content in the request": "Missing file content in the request",

    /**
     * value: "The mimetype provided in Content-Type parameter does not match with the mimetype of the file"
     * @const
     */
    "The mimetype provided in Content-Type parameter does not match with the mimetype of the file": "The mimetype provided in Content-Type parameter does not match with the mimetype of the file"
};



export default UploadFileToLockerId400Response;

