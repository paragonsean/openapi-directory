/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DemoAuthResponseDetails model module.
 * @module model/DemoAuthResponseDetails
 * @version 1.0.0
 */
class DemoAuthResponseDetails {
    /**
     * Constructs a new <code>DemoAuthResponseDetails</code>.
     * @alias module:model/DemoAuthResponseDetails
     * @param accessToken {String} The access token that can be used to call the DigiLocker APIs.
     * @param expiresIn {String} The duration in seconds for which the access token is valid.
     * @param mobile {Number} The masked mobile number of the user on which the OTP has been sent.           
     * @param refreshToken {String} The refresh token used to refresh the above access token when it expires. Please refer to Refresh Access Token API for more details.
     * @param scope {String} Scope of the token
     * @param tokenType {String} The type of token which will always be Bearer.
     */
    constructor(accessToken, expiresIn, mobile, refreshToken, scope, tokenType) { 
        
        DemoAuthResponseDetails.initialize(this, accessToken, expiresIn, mobile, refreshToken, scope, tokenType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessToken, expiresIn, mobile, refreshToken, scope, tokenType) { 
        obj['access_token'] = accessToken;
        obj['expires_in'] = expiresIn;
        obj['mobile'] = mobile;
        obj['refresh_token'] = refreshToken;
        obj['scope'] = scope;
        obj['token_type'] = tokenType;
    }

    /**
     * Constructs a <code>DemoAuthResponseDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DemoAuthResponseDetails} obj Optional instance to populate.
     * @return {module:model/DemoAuthResponseDetails} The populated <code>DemoAuthResponseDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DemoAuthResponseDetails();

            if (data.hasOwnProperty('access_token')) {
                obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
            }
            if (data.hasOwnProperty('expires_in')) {
                obj['expires_in'] = ApiClient.convertToType(data['expires_in'], 'String');
            }
            if (data.hasOwnProperty('mobile')) {
                obj['mobile'] = ApiClient.convertToType(data['mobile'], 'Number');
            }
            if (data.hasOwnProperty('refresh_token')) {
                obj['refresh_token'] = ApiClient.convertToType(data['refresh_token'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('token_type')) {
                obj['token_type'] = ApiClient.convertToType(data['token_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DemoAuthResponseDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DemoAuthResponseDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DemoAuthResponseDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['access_token'] && !(typeof data['access_token'] === 'string' || data['access_token'] instanceof String)) {
            throw new Error("Expected the field `access_token` to be a primitive type in the JSON string but got " + data['access_token']);
        }
        // ensure the json data is a string
        if (data['expires_in'] && !(typeof data['expires_in'] === 'string' || data['expires_in'] instanceof String)) {
            throw new Error("Expected the field `expires_in` to be a primitive type in the JSON string but got " + data['expires_in']);
        }
        // ensure the json data is a string
        if (data['refresh_token'] && !(typeof data['refresh_token'] === 'string' || data['refresh_token'] instanceof String)) {
            throw new Error("Expected the field `refresh_token` to be a primitive type in the JSON string but got " + data['refresh_token']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['token_type'] && !(typeof data['token_type'] === 'string' || data['token_type'] instanceof String)) {
            throw new Error("Expected the field `token_type` to be a primitive type in the JSON string but got " + data['token_type']);
        }

        return true;
    }


}

DemoAuthResponseDetails.RequiredProperties = ["access_token", "expires_in", "mobile", "refresh_token", "scope", "token_type"];

/**
 * The access token that can be used to call the DigiLocker APIs.
 * @member {String} access_token
 */
DemoAuthResponseDetails.prototype['access_token'] = undefined;

/**
 * The duration in seconds for which the access token is valid.
 * @member {String} expires_in
 */
DemoAuthResponseDetails.prototype['expires_in'] = undefined;

/**
 * The masked mobile number of the user on which the OTP has been sent.           
 * @member {Number} mobile
 */
DemoAuthResponseDetails.prototype['mobile'] = undefined;

/**
 * The refresh token used to refresh the above access token when it expires. Please refer to Refresh Access Token API for more details.
 * @member {String} refresh_token
 */
DemoAuthResponseDetails.prototype['refresh_token'] = undefined;

/**
 * Scope of the token
 * @member {String} scope
 */
DemoAuthResponseDetails.prototype['scope'] = undefined;

/**
 * The type of token which will always be Bearer.
 * @member {String} token_type
 */
DemoAuthResponseDetails.prototype['token_type'] = undefined;






export default DemoAuthResponseDetails;

