/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Sample3Details model module.
 * @module model/Sample3Details
 * @version 1.0.0
 */
class Sample3Details {
    /**
     * Constructs a new <code>Sample3Details</code>.
     * @alias module:model/Sample3Details
     * @param date {String} This contains the date of file upload in case of self uploaded documents
     * @param description {String} This is the descriptive document type stored in DigiLocker such as ‘Income Certificate’ or ‘Driving License’.
     * @param id {Number} The id if this item is a folder.
     * @param issuer {String} The name of the issuer. This is blank in case of uploaded documents and folders.
     * @param mime {String} The mime type of the file. This field will contain “application/PDF” for PDF files; “image/png” for PNG files and “image/jpg” or “image/jpeg” for JPG/JPEG files. This will be blank in case of folder.
     * @param name {String} The name of the file or folder.
     * @param parent {String} The id of the parent folder.
     * @param size {String} Size of file or folder.
     * @param type {String} String dir for folder and string file for file.
     * @param uri {String} This is the unique identifier of the document shared by the user in DigiLocker. You will use this identifier to get the actual file from DigiLocker using the API. URI will be blank in case of folder.
     */
    constructor(date, description, id, issuer, mime, name, parent, size, type, uri) { 
        
        Sample3Details.initialize(this, date, description, id, issuer, mime, name, parent, size, type, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, date, description, id, issuer, mime, name, parent, size, type, uri) { 
        obj['date'] = date;
        obj['description'] = description;
        obj['id'] = id;
        obj['issuer'] = issuer;
        obj['mime'] = mime;
        obj['name'] = name;
        obj['parent'] = parent;
        obj['size'] = size;
        obj['type'] = type;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>Sample3Details</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sample3Details} obj Optional instance to populate.
     * @return {module:model/Sample3Details} The populated <code>Sample3Details</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sample3Details();

            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('mime')) {
                obj['mime'] = ApiClient.convertToType(data['mime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sample3Details</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sample3Details</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Sample3Details.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // ensure the json data is a string
        if (data['mime'] && !(typeof data['mime'] === 'string' || data['mime'] instanceof String)) {
            throw new Error("Expected the field `mime` to be a primitive type in the JSON string but got " + data['mime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

Sample3Details.RequiredProperties = ["date", "description", "id", "issuer", "mime", "name", "parent", "size", "type", "uri"];

/**
 * This contains the date of file upload in case of self uploaded documents
 * @member {String} date
 */
Sample3Details.prototype['date'] = undefined;

/**
 * This is the descriptive document type stored in DigiLocker such as ‘Income Certificate’ or ‘Driving License’.
 * @member {String} description
 */
Sample3Details.prototype['description'] = undefined;

/**
 * The id if this item is a folder.
 * @member {Number} id
 */
Sample3Details.prototype['id'] = undefined;

/**
 * The name of the issuer. This is blank in case of uploaded documents and folders.
 * @member {String} issuer
 */
Sample3Details.prototype['issuer'] = undefined;

/**
 * The mime type of the file. This field will contain “application/PDF” for PDF files; “image/png” for PNG files and “image/jpg” or “image/jpeg” for JPG/JPEG files. This will be blank in case of folder.
 * @member {String} mime
 */
Sample3Details.prototype['mime'] = undefined;

/**
 * The name of the file or folder.
 * @member {String} name
 */
Sample3Details.prototype['name'] = undefined;

/**
 * The id of the parent folder.
 * @member {String} parent
 */
Sample3Details.prototype['parent'] = undefined;

/**
 * Size of file or folder.
 * @member {String} size
 */
Sample3Details.prototype['size'] = undefined;

/**
 * String dir for folder and string file for file.
 * @member {String} type
 */
Sample3Details.prototype['type'] = undefined;

/**
 * This is the unique identifier of the document shared by the user in DigiLocker. You will use this identifier to get the actual file from DigiLocker using the API. URI will be blank in case of folder.
 * @member {String} uri
 */
Sample3Details.prototype['uri'] = undefined;






export default Sample3Details;

