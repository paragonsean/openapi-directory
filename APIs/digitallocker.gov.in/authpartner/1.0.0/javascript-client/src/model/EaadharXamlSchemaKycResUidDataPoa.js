/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EaadharXamlSchemaKycResUidDataPoa model module.
 * @module model/EaadharXamlSchemaKycResUidDataPoa
 * @version 1.0.0
 */
class EaadharXamlSchemaKycResUidDataPoa {
    /**
     * Constructs a new <code>EaadharXamlSchemaKycResUidDataPoa</code>.
     * @alias module:model/EaadharXamlSchemaKycResUidDataPoa
     * @param co {String} 
     * @param country {String} 
     * @param dist {String} 
     * @param lm {String} 
     * @param loc {String} 
     * @param pc {String} 
     * @param state {String} 
     * @param vtc {String} 
     */
    constructor(co, country, dist, lm, loc, pc, state, vtc) { 
        
        EaadharXamlSchemaKycResUidDataPoa.initialize(this, co, country, dist, lm, loc, pc, state, vtc);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, co, country, dist, lm, loc, pc, state, vtc) { 
        obj['co'] = co;
        obj['country'] = country;
        obj['dist'] = dist;
        obj['lm'] = lm;
        obj['loc'] = loc;
        obj['pc'] = pc;
        obj['state'] = state;
        obj['vtc'] = vtc;
    }

    /**
     * Constructs a <code>EaadharXamlSchemaKycResUidDataPoa</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EaadharXamlSchemaKycResUidDataPoa} obj Optional instance to populate.
     * @return {module:model/EaadharXamlSchemaKycResUidDataPoa} The populated <code>EaadharXamlSchemaKycResUidDataPoa</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EaadharXamlSchemaKycResUidDataPoa();

            if (data.hasOwnProperty('co')) {
                obj['co'] = ApiClient.convertToType(data['co'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('dist')) {
                obj['dist'] = ApiClient.convertToType(data['dist'], 'String');
            }
            if (data.hasOwnProperty('lm')) {
                obj['lm'] = ApiClient.convertToType(data['lm'], 'String');
            }
            if (data.hasOwnProperty('loc')) {
                obj['loc'] = ApiClient.convertToType(data['loc'], 'String');
            }
            if (data.hasOwnProperty('pc')) {
                obj['pc'] = ApiClient.convertToType(data['pc'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('vtc')) {
                obj['vtc'] = ApiClient.convertToType(data['vtc'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EaadharXamlSchemaKycResUidDataPoa</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EaadharXamlSchemaKycResUidDataPoa</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EaadharXamlSchemaKycResUidDataPoa.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['co'] && !(typeof data['co'] === 'string' || data['co'] instanceof String)) {
            throw new Error("Expected the field `co` to be a primitive type in the JSON string but got " + data['co']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['dist'] && !(typeof data['dist'] === 'string' || data['dist'] instanceof String)) {
            throw new Error("Expected the field `dist` to be a primitive type in the JSON string but got " + data['dist']);
        }
        // ensure the json data is a string
        if (data['lm'] && !(typeof data['lm'] === 'string' || data['lm'] instanceof String)) {
            throw new Error("Expected the field `lm` to be a primitive type in the JSON string but got " + data['lm']);
        }
        // ensure the json data is a string
        if (data['loc'] && !(typeof data['loc'] === 'string' || data['loc'] instanceof String)) {
            throw new Error("Expected the field `loc` to be a primitive type in the JSON string but got " + data['loc']);
        }
        // ensure the json data is a string
        if (data['pc'] && !(typeof data['pc'] === 'string' || data['pc'] instanceof String)) {
            throw new Error("Expected the field `pc` to be a primitive type in the JSON string but got " + data['pc']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['vtc'] && !(typeof data['vtc'] === 'string' || data['vtc'] instanceof String)) {
            throw new Error("Expected the field `vtc` to be a primitive type in the JSON string but got " + data['vtc']);
        }

        return true;
    }


}

EaadharXamlSchemaKycResUidDataPoa.RequiredProperties = ["co", "country", "dist", "lm", "loc", "pc", "state", "vtc"];

/**
 * @member {String} co
 */
EaadharXamlSchemaKycResUidDataPoa.prototype['co'] = undefined;

/**
 * @member {String} country
 */
EaadharXamlSchemaKycResUidDataPoa.prototype['country'] = undefined;

/**
 * @member {String} dist
 */
EaadharXamlSchemaKycResUidDataPoa.prototype['dist'] = undefined;

/**
 * @member {String} lm
 */
EaadharXamlSchemaKycResUidDataPoa.prototype['lm'] = undefined;

/**
 * @member {String} loc
 */
EaadharXamlSchemaKycResUidDataPoa.prototype['loc'] = undefined;

/**
 * @member {String} pc
 */
EaadharXamlSchemaKycResUidDataPoa.prototype['pc'] = undefined;

/**
 * @member {String} state
 */
EaadharXamlSchemaKycResUidDataPoa.prototype['state'] = undefined;

/**
 * @member {String} vtc
 */
EaadharXamlSchemaKycResUidDataPoa.prototype['vtc'] = undefined;






export default EaadharXamlSchemaKycResUidDataPoa;

