/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Sample5Details model module.
 * @module model/Sample5Details
 * @version 1.0.0
 */
class Sample5Details {
    /**
     * Constructs a new <code>Sample5Details</code>.
     * @alias module:model/Sample5Details
     * @param digilockerid {String} A unique 36 character DigiLocker Id of the user account.
     * @param dob {String} This is date of birth of the user as registered with DigiLocker in DDMMYYYY format.
     * @param gender {module:model/Sample5Details.GenderEnum} This is gender of the user as registered with DigiLocker. The possible values are M, F, T for male, female and transgender respectively.
     * @param name {String} The name of the user as registered with DigiLocker.
     */
    constructor(digilockerid, dob, gender, name) { 
        
        Sample5Details.initialize(this, digilockerid, dob, gender, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, digilockerid, dob, gender, name) { 
        obj['digilockerid'] = digilockerid;
        obj['dob'] = dob;
        obj['gender'] = gender;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Sample5Details</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sample5Details} obj Optional instance to populate.
     * @return {module:model/Sample5Details} The populated <code>Sample5Details</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sample5Details();

            if (data.hasOwnProperty('digilockerid')) {
                obj['digilockerid'] = ApiClient.convertToType(data['digilockerid'], 'String');
            }
            if (data.hasOwnProperty('dob')) {
                obj['dob'] = ApiClient.convertToType(data['dob'], 'String');
            }
            if (data.hasOwnProperty('eaadhar')) {
                obj['eaadhar'] = ApiClient.convertToType(data['eaadhar'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sample5Details</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sample5Details</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Sample5Details.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['digilockerid'] && !(typeof data['digilockerid'] === 'string' || data['digilockerid'] instanceof String)) {
            throw new Error("Expected the field `digilockerid` to be a primitive type in the JSON string but got " + data['digilockerid']);
        }
        // ensure the json data is a string
        if (data['dob'] && !(typeof data['dob'] === 'string' || data['dob'] instanceof String)) {
            throw new Error("Expected the field `dob` to be a primitive type in the JSON string but got " + data['dob']);
        }
        // ensure the json data is a string
        if (data['eaadhar'] && !(typeof data['eaadhar'] === 'string' || data['eaadhar'] instanceof String)) {
            throw new Error("Expected the field `eaadhar` to be a primitive type in the JSON string but got " + data['eaadhar']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

Sample5Details.RequiredProperties = ["digilockerid", "dob", "gender", "name"];

/**
 * A unique 36 character DigiLocker Id of the user account.
 * @member {String} digilockerid
 */
Sample5Details.prototype['digilockerid'] = undefined;

/**
 * This is date of birth of the user as registered with DigiLocker in DDMMYYYY format.
 * @member {String} dob
 */
Sample5Details.prototype['dob'] = undefined;

/**
 * This indicates whether eAadhaar data is available for this account. Possible values are Y and N.
 * @member {module:model/Sample5Details.EaadharEnum} eaadhar
 */
Sample5Details.prototype['eaadhar'] = undefined;

/**
 * This is gender of the user as registered with DigiLocker. The possible values are M, F, T for male, female and transgender respectively.
 * @member {module:model/Sample5Details.GenderEnum} gender
 */
Sample5Details.prototype['gender'] = undefined;

/**
 * The name of the user as registered with DigiLocker.
 * @member {String} name
 */
Sample5Details.prototype['name'] = undefined;





/**
 * Allowed values for the <code>eaadhar</code> property.
 * @enum {String}
 * @readonly
 */
Sample5Details['EaadharEnum'] = {

    /**
     * value: "Y"
     * @const
     */
    "Y": "Y",

    /**
     * value: "N"
     * @const
     */
    "N": "N"
};


/**
 * Allowed values for the <code>gender</code> property.
 * @enum {String}
 * @readonly
 */
Sample5Details['GenderEnum'] = {

    /**
     * value: "M"
     * @const
     */
    "M": "M",

    /**
     * value: "F"
     * @const
     */
    "F": "F",

    /**
     * value: "T"
     * @const
     */
    "T": "T"
};



export default Sample5Details;

