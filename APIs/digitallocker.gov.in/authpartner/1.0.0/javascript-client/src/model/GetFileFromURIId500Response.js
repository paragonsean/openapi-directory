/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Response3 from './Response3';
import Response4 from './Response4';
import Response5 from './Response5';
import Response6 from './Response6';

/**
 * The GetFileFromURIId500Response model module.
 * @module model/GetFileFromURIId500Response
 * @version 1.0.0
 */
class GetFileFromURIId500Response {
    /**
     * Constructs a new <code>GetFileFromURIId500Response</code>.
     * @alias module:model/GetFileFromURIId500Response
     * @param {(module:model/Response3|module:model/Response4|module:model/Response5|module:model/Response6)} instance The actual instance to initialize GetFileFromURIId500Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "Response3") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Response3.validateJSON(instance); // throw an exception if no match
                // create Response3 from JS object
                this.actualInstance = Response3.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Response3
            errorMessages.push("Failed to construct Response3: " + err)
        }

        try {
            if (typeof instance === "Response4") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Response4.validateJSON(instance); // throw an exception if no match
                // create Response4 from JS object
                this.actualInstance = Response4.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Response4
            errorMessages.push("Failed to construct Response4: " + err)
        }

        try {
            if (typeof instance === "Response5") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Response5.validateJSON(instance); // throw an exception if no match
                // create Response5 from JS object
                this.actualInstance = Response5.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Response5
            errorMessages.push("Failed to construct Response5: " + err)
        }

        try {
            if (typeof instance === "Response6") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Response6.validateJSON(instance); // throw an exception if no match
                // create Response6 from JS object
                this.actualInstance = Response6.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Response6
            errorMessages.push("Failed to construct Response6: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `GetFileFromURIId500Response` with oneOf schemas Response3, Response4, Response5, Response6. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `GetFileFromURIId500Response` with oneOf schemas Response3, Response4, Response5, Response6. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>GetFileFromURIId500Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetFileFromURIId500Response} obj Optional instance to populate.
     * @return {module:model/GetFileFromURIId500Response} The populated <code>GetFileFromURIId500Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new GetFileFromURIId500Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>Response3</code>, <code>Response4</code>, <code>Response5</code>, <code>Response6</code>.
     * @return {(module:model/Response3|module:model/Response4|module:model/Response5|module:model/Response6)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Response3</code>, <code>Response4</code>, <code>Response5</code>, <code>Response6</code>.
     * @param {(module:model/Response3|module:model/Response4|module:model/Response5|module:model/Response6)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = GetFileFromURIId500Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of GetFileFromURIId500Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/GetFileFromURIId500Response} An instance of GetFileFromURIId500Response.
     */
    static fromJSON = function(json_string){
        return GetFileFromURIId500Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * repository_service_exception
 * @member {String} error
 */
GetFileFromURIId500Response.prototype['error'] = undefined;

/**
 * Internal server error
 * @member {String} error_description
 */
GetFileFromURIId500Response.prototype['error_description'] = undefined;


GetFileFromURIId500Response.OneOf = ["Response3", "Response4", "Response5", "Response6"];

export default GetFileFromURIId500Response;

