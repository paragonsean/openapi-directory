# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UploadFileToLockerId400Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, error_description: str=None):
        """UploadFileToLockerId400Response - a model defined in OpenAPI

        :param error: The error of this UploadFileToLockerId400Response.
        :param error_description: The error_description of this UploadFileToLockerId400Response.
        """
        self.openapi_types = {
            'error': str,
            'error_description': str
        }

        self.attribute_map = {
            'error': 'error',
            'error_description': 'error_description'
        }

        self._error = error
        self._error_description = error_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadFileToLockerId400Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Upload_File_to_Locker_id_400_response of this UploadFileToLockerId400Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this UploadFileToLockerId400Response.


        :return: The error of this UploadFileToLockerId400Response.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this UploadFileToLockerId400Response.


        :param error: The error of this UploadFileToLockerId400Response.
        :type error: str
        """
        allowed_values = ["path_missing", "contenttype_missing", "hmac_missing", "filename_missing", "hmac_mismatch", "invalid_filename", "invalid_filesize", "invalid_filetype", "invalid_path", "file_data_missing", "mimetype_mismatch"]  # noqa: E501
        if error not in allowed_values:
            raise ValueError(
                "Invalid value for `error` ({0}), must be one of {1}"
                .format(error, allowed_values)
            )

        self._error = error

    @property
    def error_description(self):
        """Gets the error_description of this UploadFileToLockerId400Response.


        :return: The error_description of this UploadFileToLockerId400Response.
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this UploadFileToLockerId400Response.


        :param error_description: The error_description of this UploadFileToLockerId400Response.
        :type error_description: str
        """
        allowed_values = ["Path parameter is missing", "Content-Type parameter is missing", "HMAC parameter is missing", "Filename is missing in path parameter", "HMAC does not match", "Restricted characters are not allowed in file name", "The file size exceeds maximum allowed file size of 10MB", "The file type is not allowed", "The destination folder does not exist", "Missing file content in the request", "The mimetype provided in Content-Type parameter does not match with the mimetype of the file"]  # noqa: E501
        if error_description not in allowed_values:
            raise ValueError(
                "Invalid value for `error_description` ({0}), must be one of {1}"
                .format(error_description, allowed_values)
            )

        self._error_description = error_description
