# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.xml_format_schema_signature import XMLFormatSchemaSignature
from openapi_server import util


class XMLFormatSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_data: List[object]=None, signature: XMLFormatSchemaSignature=None):
        """XMLFormatSchema - a model defined in OpenAPI

        :param certificate_data: The certificate_data of this XMLFormatSchema.
        :param signature: The signature of this XMLFormatSchema.
        """
        self.openapi_types = {
            'certificate_data': List[object],
            'signature': XMLFormatSchemaSignature
        }

        self.attribute_map = {
            'certificate_data': 'CertificateData',
            'signature': 'Signature'
        }

        self._certificate_data = certificate_data
        self._signature = signature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'XMLFormatSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The XMLFormatSchema of this XMLFormatSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_data(self):
        """Gets the certificate_data of this XMLFormatSchema.


        :return: The certificate_data of this XMLFormatSchema.
        :rtype: List[object]
        """
        return self._certificate_data

    @certificate_data.setter
    def certificate_data(self, certificate_data):
        """Sets the certificate_data of this XMLFormatSchema.


        :param certificate_data: The certificate_data of this XMLFormatSchema.
        :type certificate_data: List[object]
        """
        if certificate_data is None:
            raise ValueError("Invalid value for `certificate_data`, must not be `None`")

        self._certificate_data = certificate_data

    @property
    def signature(self):
        """Gets the signature of this XMLFormatSchema.


        :return: The signature of this XMLFormatSchema.
        :rtype: XMLFormatSchemaSignature
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this XMLFormatSchema.


        :param signature: The signature of this XMLFormatSchema.
        :type signature: XMLFormatSchemaSignature
        """
        if signature is None:
            raise ValueError("Invalid value for `signature`, must not be `None`")

        self._signature = signature
