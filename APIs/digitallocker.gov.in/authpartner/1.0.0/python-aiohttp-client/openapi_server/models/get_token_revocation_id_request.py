# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetTokenRevocationIdRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token: str=None, token_type_hint: str=None):
        """GetTokenRevocationIdRequest - a model defined in OpenAPI

        :param token: The token of this GetTokenRevocationIdRequest.
        :param token_type_hint: The token_type_hint of this GetTokenRevocationIdRequest.
        """
        self.openapi_types = {
            'token': str,
            'token_type_hint': str
        }

        self.attribute_map = {
            'token': 'token',
            'token_type_hint': 'token_type_hint'
        }

        self._token = token
        self._token_type_hint = token_type_hint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTokenRevocationIdRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_token_revocation_id_request of this GetTokenRevocationIdRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token(self):
        """Gets the token of this GetTokenRevocationIdRequest.

        The token that needs to be revoked.

        :return: The token of this GetTokenRevocationIdRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this GetTokenRevocationIdRequest.

        The token that needs to be revoked.

        :param token: The token of this GetTokenRevocationIdRequest.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def token_type_hint(self):
        """Gets the token_type_hint of this GetTokenRevocationIdRequest.

        The type of the above token. The value will be one of access_token or refresh_token. If this parameter is not sent, DigiLocker will look for this token in both access and refresh tokens and then revoke it.

        :return: The token_type_hint of this GetTokenRevocationIdRequest.
        :rtype: str
        """
        return self._token_type_hint

    @token_type_hint.setter
    def token_type_hint(self, token_type_hint):
        """Sets the token_type_hint of this GetTokenRevocationIdRequest.

        The type of the above token. The value will be one of access_token or refresh_token. If this parameter is not sent, DigiLocker will look for this token in both access and refresh tokens and then revoke it.

        :param token_type_hint: The token_type_hint of this GetTokenRevocationIdRequest.
        :type token_type_hint: str
        """
        allowed_values = ["refresh_token", "access_token"]  # noqa: E501
        if token_type_hint not in allowed_values:
            raise ValueError(
                "Invalid value for `token_type_hint` ({0}), must be one of {1}"
                .format(token_type_hint, allowed_values)
            )

        self._token_type_hint = token_type_hint
