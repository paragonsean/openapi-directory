# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EaadharXamlSchemaKycResUidDataPoi(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, gender: str=None, name: str=None):
        """EaadharXamlSchemaKycResUidDataPoi - a model defined in OpenAPI

        :param dob: The dob of this EaadharXamlSchemaKycResUidDataPoi.
        :param gender: The gender of this EaadharXamlSchemaKycResUidDataPoi.
        :param name: The name of this EaadharXamlSchemaKycResUidDataPoi.
        """
        self.openapi_types = {
            'dob': str,
            'gender': str,
            'name': str
        }

        self.attribute_map = {
            'dob': 'dob',
            'gender': 'gender',
            'name': 'name'
        }

        self._dob = dob
        self._gender = gender
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EaadharXamlSchemaKycResUidDataPoi':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EaadharXamlSchema_KycRes_UidData_Poi of this EaadharXamlSchemaKycResUidDataPoi.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this EaadharXamlSchemaKycResUidDataPoi.


        :return: The dob of this EaadharXamlSchemaKycResUidDataPoi.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this EaadharXamlSchemaKycResUidDataPoi.


        :param dob: The dob of this EaadharXamlSchemaKycResUidDataPoi.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")
        if dob is not None and len(dob) < 1:
            raise ValueError("Invalid value for `dob`, length must be greater than or equal to `1`")

        self._dob = dob

    @property
    def gender(self):
        """Gets the gender of this EaadharXamlSchemaKycResUidDataPoi.


        :return: The gender of this EaadharXamlSchemaKycResUidDataPoi.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this EaadharXamlSchemaKycResUidDataPoi.


        :param gender: The gender of this EaadharXamlSchemaKycResUidDataPoi.
        :type gender: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")
        if gender is not None and len(gender) < 1:
            raise ValueError("Invalid value for `gender`, length must be greater than or equal to `1`")

        self._gender = gender

    @property
    def name(self):
        """Gets the name of this EaadharXamlSchemaKycResUidDataPoi.


        :return: The name of this EaadharXamlSchemaKycResUidDataPoi.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EaadharXamlSchemaKycResUidDataPoi.


        :param name: The name of this EaadharXamlSchemaKycResUidDataPoi.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
