# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sample5Details(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digilockerid: str=None, dob: str=None, eaadhar: str=None, gender: str=None, name: str=None):
        """Sample5Details - a model defined in OpenAPI

        :param digilockerid: The digilockerid of this Sample5Details.
        :param dob: The dob of this Sample5Details.
        :param eaadhar: The eaadhar of this Sample5Details.
        :param gender: The gender of this Sample5Details.
        :param name: The name of this Sample5Details.
        """
        self.openapi_types = {
            'digilockerid': str,
            'dob': str,
            'eaadhar': str,
            'gender': str,
            'name': str
        }

        self.attribute_map = {
            'digilockerid': 'digilockerid',
            'dob': 'dob',
            'eaadhar': 'eaadhar',
            'gender': 'gender',
            'name': 'name'
        }

        self._digilockerid = digilockerid
        self._dob = dob
        self._eaadhar = eaadhar
        self._gender = gender
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sample5Details':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sample_5_details of this Sample5Details.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digilockerid(self):
        """Gets the digilockerid of this Sample5Details.

        A unique 36 character DigiLocker Id of the user account.

        :return: The digilockerid of this Sample5Details.
        :rtype: str
        """
        return self._digilockerid

    @digilockerid.setter
    def digilockerid(self, digilockerid):
        """Sets the digilockerid of this Sample5Details.

        A unique 36 character DigiLocker Id of the user account.

        :param digilockerid: The digilockerid of this Sample5Details.
        :type digilockerid: str
        """
        if digilockerid is None:
            raise ValueError("Invalid value for `digilockerid`, must not be `None`")

        self._digilockerid = digilockerid

    @property
    def dob(self):
        """Gets the dob of this Sample5Details.

        This is date of birth of the user as registered with DigiLocker in DDMMYYYY format.

        :return: The dob of this Sample5Details.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this Sample5Details.

        This is date of birth of the user as registered with DigiLocker in DDMMYYYY format.

        :param dob: The dob of this Sample5Details.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def eaadhar(self):
        """Gets the eaadhar of this Sample5Details.

        This indicates whether eAadhaar data is available for this account. Possible values are Y and N.

        :return: The eaadhar of this Sample5Details.
        :rtype: str
        """
        return self._eaadhar

    @eaadhar.setter
    def eaadhar(self, eaadhar):
        """Sets the eaadhar of this Sample5Details.

        This indicates whether eAadhaar data is available for this account. Possible values are Y and N.

        :param eaadhar: The eaadhar of this Sample5Details.
        :type eaadhar: str
        """
        allowed_values = ["Y", "N"]  # noqa: E501
        if eaadhar not in allowed_values:
            raise ValueError(
                "Invalid value for `eaadhar` ({0}), must be one of {1}"
                .format(eaadhar, allowed_values)
            )

        self._eaadhar = eaadhar

    @property
    def gender(self):
        """Gets the gender of this Sample5Details.

        This is gender of the user as registered with DigiLocker. The possible values are M, F, T for male, female and transgender respectively.

        :return: The gender of this Sample5Details.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Sample5Details.

        This is gender of the user as registered with DigiLocker. The possible values are M, F, T for male, female and transgender respectively.

        :param gender: The gender of this Sample5Details.
        :type gender: str
        """
        allowed_values = ["M", "F", "T"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def name(self):
        """Gets the name of this Sample5Details.

        The name of the user as registered with DigiLocker.

        :return: The name of this Sample5Details.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sample5Details.

        The name of the user as registered with DigiLocker.

        :param name: The name of this Sample5Details.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
