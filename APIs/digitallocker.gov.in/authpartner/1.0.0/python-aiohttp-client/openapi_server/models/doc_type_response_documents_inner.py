# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocTypeResponseDocumentsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, doctype: str=None):
        """DocTypeResponseDocumentsInner - a model defined in OpenAPI

        :param description: The description of this DocTypeResponseDocumentsInner.
        :param doctype: The doctype of this DocTypeResponseDocumentsInner.
        """
        self.openapi_types = {
            'description': str,
            'doctype': str
        }

        self.attribute_map = {
            'description': 'description',
            'doctype': 'doctype'
        }

        self._description = description
        self._doctype = doctype

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocTypeResponseDocumentsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocTypeResponse_documents_inner of this DocTypeResponseDocumentsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this DocTypeResponseDocumentsInner.


        :return: The description of this DocTypeResponseDocumentsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DocTypeResponseDocumentsInner.


        :param description: The description of this DocTypeResponseDocumentsInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def doctype(self):
        """Gets the doctype of this DocTypeResponseDocumentsInner.


        :return: The doctype of this DocTypeResponseDocumentsInner.
        :rtype: str
        """
        return self._doctype

    @doctype.setter
    def doctype(self, doctype):
        """Sets the doctype of this DocTypeResponseDocumentsInner.


        :param doctype: The doctype of this DocTypeResponseDocumentsInner.
        :type doctype: str
        """
        if doctype is None:
            raise ValueError("Invalid value for `doctype`, must not be `None`")
        if doctype is not None and len(doctype) < 1:
            raise ValueError("Invalid value for `doctype`, length must be greater than or equal to `1`")

        self._doctype = doctype
