# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EaadharXamlSchemaKycResUidDataLData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, co: str=None, country: str=None, dist: str=None, lang: str=None, lm: str=None, loc: str=None, name: str=None, pc: str=None, state: str=None, vtc: str=None):
        """EaadharXamlSchemaKycResUidDataLData - a model defined in OpenAPI

        :param co: The co of this EaadharXamlSchemaKycResUidDataLData.
        :param country: The country of this EaadharXamlSchemaKycResUidDataLData.
        :param dist: The dist of this EaadharXamlSchemaKycResUidDataLData.
        :param lang: The lang of this EaadharXamlSchemaKycResUidDataLData.
        :param lm: The lm of this EaadharXamlSchemaKycResUidDataLData.
        :param loc: The loc of this EaadharXamlSchemaKycResUidDataLData.
        :param name: The name of this EaadharXamlSchemaKycResUidDataLData.
        :param pc: The pc of this EaadharXamlSchemaKycResUidDataLData.
        :param state: The state of this EaadharXamlSchemaKycResUidDataLData.
        :param vtc: The vtc of this EaadharXamlSchemaKycResUidDataLData.
        """
        self.openapi_types = {
            'co': str,
            'country': str,
            'dist': str,
            'lang': str,
            'lm': str,
            'loc': str,
            'name': str,
            'pc': str,
            'state': str,
            'vtc': str
        }

        self.attribute_map = {
            'co': 'co',
            'country': 'country',
            'dist': 'dist',
            'lang': 'lang',
            'lm': 'lm',
            'loc': 'loc',
            'name': 'name',
            'pc': 'pc',
            'state': 'state',
            'vtc': 'vtc'
        }

        self._co = co
        self._country = country
        self._dist = dist
        self._lang = lang
        self._lm = lm
        self._loc = loc
        self._name = name
        self._pc = pc
        self._state = state
        self._vtc = vtc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EaadharXamlSchemaKycResUidDataLData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EaadharXamlSchema_KycRes_UidData_LData of this EaadharXamlSchemaKycResUidDataLData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def co(self):
        """Gets the co of this EaadharXamlSchemaKycResUidDataLData.


        :return: The co of this EaadharXamlSchemaKycResUidDataLData.
        :rtype: str
        """
        return self._co

    @co.setter
    def co(self, co):
        """Sets the co of this EaadharXamlSchemaKycResUidDataLData.


        :param co: The co of this EaadharXamlSchemaKycResUidDataLData.
        :type co: str
        """
        if co is None:
            raise ValueError("Invalid value for `co`, must not be `None`")
        if co is not None and len(co) < 1:
            raise ValueError("Invalid value for `co`, length must be greater than or equal to `1`")

        self._co = co

    @property
    def country(self):
        """Gets the country of this EaadharXamlSchemaKycResUidDataLData.


        :return: The country of this EaadharXamlSchemaKycResUidDataLData.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EaadharXamlSchemaKycResUidDataLData.


        :param country: The country of this EaadharXamlSchemaKycResUidDataLData.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")
        if country is not None and len(country) < 1:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `1`")

        self._country = country

    @property
    def dist(self):
        """Gets the dist of this EaadharXamlSchemaKycResUidDataLData.


        :return: The dist of this EaadharXamlSchemaKycResUidDataLData.
        :rtype: str
        """
        return self._dist

    @dist.setter
    def dist(self, dist):
        """Sets the dist of this EaadharXamlSchemaKycResUidDataLData.


        :param dist: The dist of this EaadharXamlSchemaKycResUidDataLData.
        :type dist: str
        """
        if dist is None:
            raise ValueError("Invalid value for `dist`, must not be `None`")
        if dist is not None and len(dist) < 1:
            raise ValueError("Invalid value for `dist`, length must be greater than or equal to `1`")

        self._dist = dist

    @property
    def lang(self):
        """Gets the lang of this EaadharXamlSchemaKycResUidDataLData.


        :return: The lang of this EaadharXamlSchemaKycResUidDataLData.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this EaadharXamlSchemaKycResUidDataLData.


        :param lang: The lang of this EaadharXamlSchemaKycResUidDataLData.
        :type lang: str
        """
        if lang is None:
            raise ValueError("Invalid value for `lang`, must not be `None`")
        if lang is not None and len(lang) < 1:
            raise ValueError("Invalid value for `lang`, length must be greater than or equal to `1`")

        self._lang = lang

    @property
    def lm(self):
        """Gets the lm of this EaadharXamlSchemaKycResUidDataLData.


        :return: The lm of this EaadharXamlSchemaKycResUidDataLData.
        :rtype: str
        """
        return self._lm

    @lm.setter
    def lm(self, lm):
        """Sets the lm of this EaadharXamlSchemaKycResUidDataLData.


        :param lm: The lm of this EaadharXamlSchemaKycResUidDataLData.
        :type lm: str
        """
        if lm is None:
            raise ValueError("Invalid value for `lm`, must not be `None`")
        if lm is not None and len(lm) < 1:
            raise ValueError("Invalid value for `lm`, length must be greater than or equal to `1`")

        self._lm = lm

    @property
    def loc(self):
        """Gets the loc of this EaadharXamlSchemaKycResUidDataLData.


        :return: The loc of this EaadharXamlSchemaKycResUidDataLData.
        :rtype: str
        """
        return self._loc

    @loc.setter
    def loc(self, loc):
        """Sets the loc of this EaadharXamlSchemaKycResUidDataLData.


        :param loc: The loc of this EaadharXamlSchemaKycResUidDataLData.
        :type loc: str
        """
        if loc is None:
            raise ValueError("Invalid value for `loc`, must not be `None`")
        if loc is not None and len(loc) < 1:
            raise ValueError("Invalid value for `loc`, length must be greater than or equal to `1`")

        self._loc = loc

    @property
    def name(self):
        """Gets the name of this EaadharXamlSchemaKycResUidDataLData.


        :return: The name of this EaadharXamlSchemaKycResUidDataLData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EaadharXamlSchemaKycResUidDataLData.


        :param name: The name of this EaadharXamlSchemaKycResUidDataLData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def pc(self):
        """Gets the pc of this EaadharXamlSchemaKycResUidDataLData.


        :return: The pc of this EaadharXamlSchemaKycResUidDataLData.
        :rtype: str
        """
        return self._pc

    @pc.setter
    def pc(self, pc):
        """Sets the pc of this EaadharXamlSchemaKycResUidDataLData.


        :param pc: The pc of this EaadharXamlSchemaKycResUidDataLData.
        :type pc: str
        """
        if pc is None:
            raise ValueError("Invalid value for `pc`, must not be `None`")
        if pc is not None and len(pc) < 1:
            raise ValueError("Invalid value for `pc`, length must be greater than or equal to `1`")

        self._pc = pc

    @property
    def state(self):
        """Gets the state of this EaadharXamlSchemaKycResUidDataLData.


        :return: The state of this EaadharXamlSchemaKycResUidDataLData.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EaadharXamlSchemaKycResUidDataLData.


        :param state: The state of this EaadharXamlSchemaKycResUidDataLData.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")
        if state is not None and len(state) < 1:
            raise ValueError("Invalid value for `state`, length must be greater than or equal to `1`")

        self._state = state

    @property
    def vtc(self):
        """Gets the vtc of this EaadharXamlSchemaKycResUidDataLData.


        :return: The vtc of this EaadharXamlSchemaKycResUidDataLData.
        :rtype: str
        """
        return self._vtc

    @vtc.setter
    def vtc(self, vtc):
        """Sets the vtc of this EaadharXamlSchemaKycResUidDataLData.


        :param vtc: The vtc of this EaadharXamlSchemaKycResUidDataLData.
        :type vtc: str
        """
        if vtc is None:
            raise ValueError("Invalid value for `vtc`, must not be `None`")
        if vtc is not None and len(vtc) < 1:
            raise ValueError("Invalid value for `vtc`, length must be greater than or equal to `1`")

        self._vtc = vtc
