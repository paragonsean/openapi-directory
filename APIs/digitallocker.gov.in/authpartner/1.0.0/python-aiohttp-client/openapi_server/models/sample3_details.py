# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sample3Details(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: str=None, description: str=None, id: int=None, issuer: str=None, mime: str=None, name: str=None, parent: str=None, size: str=None, type: str=None, uri: str=None):
        """Sample3Details - a model defined in OpenAPI

        :param _date: The _date of this Sample3Details.
        :param description: The description of this Sample3Details.
        :param id: The id of this Sample3Details.
        :param issuer: The issuer of this Sample3Details.
        :param mime: The mime of this Sample3Details.
        :param name: The name of this Sample3Details.
        :param parent: The parent of this Sample3Details.
        :param size: The size of this Sample3Details.
        :param type: The type of this Sample3Details.
        :param uri: The uri of this Sample3Details.
        """
        self.openapi_types = {
            '_date': str,
            'description': str,
            'id': int,
            'issuer': str,
            'mime': str,
            'name': str,
            'parent': str,
            'size': str,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            '_date': 'date',
            'description': 'description',
            'id': 'id',
            'issuer': 'issuer',
            'mime': 'mime',
            'name': 'name',
            'parent': 'parent',
            'size': 'size',
            'type': 'type',
            'uri': 'uri'
        }

        self.__date = _date
        self._description = description
        self._id = id
        self._issuer = issuer
        self._mime = mime
        self._name = name
        self._parent = parent
        self._size = size
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sample3Details':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sample_3_details of this Sample3Details.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this Sample3Details.

        This contains the date of file upload in case of self uploaded documents

        :return: The _date of this Sample3Details.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Sample3Details.

        This contains the date of file upload in case of self uploaded documents

        :param _date: The _date of this Sample3Details.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this Sample3Details.

        This is the descriptive document type stored in DigiLocker such as ‘Income Certificate’ or ‘Driving License’.

        :return: The description of this Sample3Details.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Sample3Details.

        This is the descriptive document type stored in DigiLocker such as ‘Income Certificate’ or ‘Driving License’.

        :param description: The description of this Sample3Details.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this Sample3Details.

        The id if this item is a folder.

        :return: The id of this Sample3Details.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sample3Details.

        The id if this item is a folder.

        :param id: The id of this Sample3Details.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def issuer(self):
        """Gets the issuer of this Sample3Details.

        The name of the issuer. This is blank in case of uploaded documents and folders.

        :return: The issuer of this Sample3Details.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this Sample3Details.

        The name of the issuer. This is blank in case of uploaded documents and folders.

        :param issuer: The issuer of this Sample3Details.
        :type issuer: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer

    @property
    def mime(self):
        """Gets the mime of this Sample3Details.

        The mime type of the file. This field will contain “application/PDF” for PDF files; “image/png” for PNG files and “image/jpg” or “image/jpeg” for JPG/JPEG files. This will be blank in case of folder.

        :return: The mime of this Sample3Details.
        :rtype: str
        """
        return self._mime

    @mime.setter
    def mime(self, mime):
        """Sets the mime of this Sample3Details.

        The mime type of the file. This field will contain “application/PDF” for PDF files; “image/png” for PNG files and “image/jpg” or “image/jpeg” for JPG/JPEG files. This will be blank in case of folder.

        :param mime: The mime of this Sample3Details.
        :type mime: str
        """
        if mime is None:
            raise ValueError("Invalid value for `mime`, must not be `None`")

        self._mime = mime

    @property
    def name(self):
        """Gets the name of this Sample3Details.

        The name of the file or folder.

        :return: The name of this Sample3Details.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sample3Details.

        The name of the file or folder.

        :param name: The name of this Sample3Details.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this Sample3Details.

        The id of the parent folder.

        :return: The parent of this Sample3Details.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Sample3Details.

        The id of the parent folder.

        :param parent: The parent of this Sample3Details.
        :type parent: str
        """
        if parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")

        self._parent = parent

    @property
    def size(self):
        """Gets the size of this Sample3Details.

        Size of file or folder.

        :return: The size of this Sample3Details.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Sample3Details.

        Size of file or folder.

        :param size: The size of this Sample3Details.
        :type size: str
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def type(self):
        """Gets the type of this Sample3Details.

        String dir for folder and string file for file.

        :return: The type of this Sample3Details.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Sample3Details.

        String dir for folder and string file for file.

        :param type: The type of this Sample3Details.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this Sample3Details.

        This is the unique identifier of the document shared by the user in DigiLocker. You will use this identifier to get the actual file from DigiLocker using the API. URI will be blank in case of folder.

        :return: The uri of this Sample3Details.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Sample3Details.

        This is the unique identifier of the document shared by the user in DigiLocker. You will use this identifier to get the actual file from DigiLocker using the API. URI will be blank in case of folder.

        :param uri: The uri of this Sample3Details.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
