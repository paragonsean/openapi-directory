# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VerifyAccountResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digilockerid: str=None, registered: str=None):
        """VerifyAccountResponse - a model defined in OpenAPI

        :param digilockerid: The digilockerid of this VerifyAccountResponse.
        :param registered: The registered of this VerifyAccountResponse.
        """
        self.openapi_types = {
            'digilockerid': str,
            'registered': str
        }

        self.attribute_map = {
            'digilockerid': 'digilockerid',
            'registered': 'registered'
        }

        self._digilockerid = digilockerid
        self._registered = registered

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyAccountResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifyAccountResponse of this VerifyAccountResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digilockerid(self):
        """Gets the digilockerid of this VerifyAccountResponse.

        A unique 36 character DigiLocker Id of the user account.

        :return: The digilockerid of this VerifyAccountResponse.
        :rtype: str
        """
        return self._digilockerid

    @digilockerid.setter
    def digilockerid(self, digilockerid):
        """Sets the digilockerid of this VerifyAccountResponse.

        A unique 36 character DigiLocker Id of the user account.

        :param digilockerid: The digilockerid of this VerifyAccountResponse.
        :type digilockerid: str
        """
        if digilockerid is None:
            raise ValueError("Invalid value for `digilockerid`, must not be `None`")

        self._digilockerid = digilockerid

    @property
    def registered(self):
        """Gets the registered of this VerifyAccountResponse.

        true indicates that the provided Aadhaar/mobile number is already registered and false indicates otherwise.

        :return: The registered of this VerifyAccountResponse.
        :rtype: str
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this VerifyAccountResponse.

        true indicates that the provided Aadhaar/mobile number is already registered and false indicates otherwise.

        :param registered: The registered of this VerifyAccountResponse.
        :type registered: str
        """
        if registered is None:
            raise ValueError("Invalid value for `registered`, must not be `None`")

        self._registered = registered
