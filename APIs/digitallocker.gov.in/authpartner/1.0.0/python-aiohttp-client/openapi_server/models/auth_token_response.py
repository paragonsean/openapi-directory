# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthTokenResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, expires_in: int=None, refresh_token: str=None, scope: str=None, token_type: str=None):
        """AuthTokenResponse - a model defined in OpenAPI

        :param access_token: The access_token of this AuthTokenResponse.
        :param expires_in: The expires_in of this AuthTokenResponse.
        :param refresh_token: The refresh_token of this AuthTokenResponse.
        :param scope: The scope of this AuthTokenResponse.
        :param token_type: The token_type of this AuthTokenResponse.
        """
        self.openapi_types = {
            'access_token': str,
            'expires_in': int,
            'refresh_token': str,
            'scope': str,
            'token_type': str
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'expires_in': 'expires_in',
            'refresh_token': 'refresh_token',
            'scope': 'scope',
            'token_type': 'token_type'
        }

        self._access_token = access_token
        self._expires_in = expires_in
        self._refresh_token = refresh_token
        self._scope = scope
        self._token_type = token_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthTokenResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthTokenResponse of this AuthTokenResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this AuthTokenResponse.

        The access token that can be used to call the     DigiLocker APIs.

        :return: The access_token of this AuthTokenResponse.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AuthTokenResponse.

        The access token that can be used to call the     DigiLocker APIs.

        :param access_token: The access_token of this AuthTokenResponse.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def expires_in(self):
        """Gets the expires_in of this AuthTokenResponse.

        The duration in seconds for which the access token is             valid.

        :return: The expires_in of this AuthTokenResponse.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this AuthTokenResponse.

        The duration in seconds for which the access token is             valid.

        :param expires_in: The expires_in of this AuthTokenResponse.
        :type expires_in: int
        """
        if expires_in is None:
            raise ValueError("Invalid value for `expires_in`, must not be `None`")

        self._expires_in = expires_in

    @property
    def refresh_token(self):
        """Gets the refresh_token of this AuthTokenResponse.

        The refresh token used to refresh the above access   token when it expires. This will value will be   returned only in case of web applications and not be   returned for limited input devices.

        :return: The refresh_token of this AuthTokenResponse.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this AuthTokenResponse.

        The refresh token used to refresh the above access   token when it expires. This will value will be   returned only in case of web applications and not be   returned for limited input devices.

        :param refresh_token: The refresh_token of this AuthTokenResponse.
        :type refresh_token: str
        """
        if refresh_token is None:
            raise ValueError("Invalid value for `refresh_token`, must not be `None`")

        self._refresh_token = refresh_token

    @property
    def scope(self):
        """Gets the scope of this AuthTokenResponse.

        Scope of the token.

        :return: The scope of this AuthTokenResponse.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AuthTokenResponse.

        Scope of the token.

        :param scope: The scope of this AuthTokenResponse.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope

    @property
    def token_type(self):
        """Gets the token_type of this AuthTokenResponse.

        The type of token which will always be Bearer.

        :return: The token_type of this AuthTokenResponse.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this AuthTokenResponse.

        The type of token which will always be Bearer.

        :param token_type: The token_type of this AuthTokenResponse.
        :type token_type: str
        """
        if token_type is None:
            raise ValueError("Invalid value for `token_type`, must not be `None`")

        self._token_type = token_type
