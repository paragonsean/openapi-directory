# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sample2Details(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: str=None, description: str=None, doctype: str=None, issuer: str=None, issuerid: str=None, mime: str=None, name: str=None, parent: str=None, size: str=None, type: str=None, uri: str=None):
        """Sample2Details - a model defined in OpenAPI

        :param _date: The _date of this Sample2Details.
        :param description: The description of this Sample2Details.
        :param doctype: The doctype of this Sample2Details.
        :param issuer: The issuer of this Sample2Details.
        :param issuerid: The issuerid of this Sample2Details.
        :param mime: The mime of this Sample2Details.
        :param name: The name of this Sample2Details.
        :param parent: The parent of this Sample2Details.
        :param size: The size of this Sample2Details.
        :param type: The type of this Sample2Details.
        :param uri: The uri of this Sample2Details.
        """
        self.openapi_types = {
            '_date': str,
            'description': str,
            'doctype': str,
            'issuer': str,
            'issuerid': str,
            'mime': str,
            'name': str,
            'parent': str,
            'size': str,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            '_date': 'date',
            'description': 'description',
            'doctype': 'doctype',
            'issuer': 'issuer',
            'issuerid': 'issuerid',
            'mime': 'mime',
            'name': 'name',
            'parent': 'parent',
            'size': 'size',
            'type': 'type',
            'uri': 'uri'
        }

        self.__date = _date
        self._description = description
        self._doctype = doctype
        self._issuer = issuer
        self._issuerid = issuerid
        self._mime = mime
        self._name = name
        self._parent = parent
        self._size = size
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sample2Details':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sample_2_details of this Sample2Details.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this Sample2Details.

        This contains the date on which the certificate was last modified in DigiLocker.

        :return: The _date of this Sample2Details.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Sample2Details.

        This contains the date on which the certificate was last modified in DigiLocker.

        :param _date: The _date of this Sample2Details.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this Sample2Details.

        This is the descriptive document type stored in DigiLocker such as ‘Income Certificate’ or ‘Driving License’.

        :return: The description of this Sample2Details.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Sample2Details.

        This is the descriptive document type stored in DigiLocker such as ‘Income Certificate’ or ‘Driving License’.

        :param description: The description of this Sample2Details.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def doctype(self):
        """Gets the doctype of this Sample2Details.

        A 5 character unique document type provided by DigiLocker.

        :return: The doctype of this Sample2Details.
        :rtype: str
        """
        return self._doctype

    @doctype.setter
    def doctype(self, doctype):
        """Sets the doctype of this Sample2Details.

        A 5 character unique document type provided by DigiLocker.

        :param doctype: The doctype of this Sample2Details.
        :type doctype: str
        """
        if doctype is None:
            raise ValueError("Invalid value for `doctype`, must not be `None`")

        self._doctype = doctype

    @property
    def issuer(self):
        """Gets the issuer of this Sample2Details.

        The name of the issuer.

        :return: The issuer of this Sample2Details.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this Sample2Details.

        The name of the issuer.

        :param issuer: The issuer of this Sample2Details.
        :type issuer: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer

    @property
    def issuerid(self):
        """Gets the issuerid of this Sample2Details.

        Unique DigiLocker issuer id as mentioned in the URI.

        :return: The issuerid of this Sample2Details.
        :rtype: str
        """
        return self._issuerid

    @issuerid.setter
    def issuerid(self, issuerid):
        """Sets the issuerid of this Sample2Details.

        Unique DigiLocker issuer id as mentioned in the URI.

        :param issuerid: The issuerid of this Sample2Details.
        :type issuerid: str
        """
        if issuerid is None:
            raise ValueError("Invalid value for `issuerid`, must not be `None`")

        self._issuerid = issuerid

    @property
    def mime(self):
        """Gets the mime of this Sample2Details.

        The list of mime types for the certificate data. This field will contain “application/PDF” or “application/xml”.

        :return: The mime of this Sample2Details.
        :rtype: str
        """
        return self._mime

    @mime.setter
    def mime(self, mime):
        """Sets the mime of this Sample2Details.

        The list of mime types for the certificate data. This field will contain “application/PDF” or “application/xml”.

        :param mime: The mime of this Sample2Details.
        :type mime: str
        """
        if mime is None:
            raise ValueError("Invalid value for `mime`, must not be `None`")

        self._mime = mime

    @property
    def name(self):
        """Gets the name of this Sample2Details.

        The name of the certificate.

        :return: The name of this Sample2Details.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sample2Details.

        The name of the certificate.

        :param name: The name of this Sample2Details.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this Sample2Details.

        This will be blank.

        :return: The parent of this Sample2Details.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Sample2Details.

        This will be blank.

        :param parent: The parent of this Sample2Details.
        :type parent: str
        """
        if parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")

        self._parent = parent

    @property
    def size(self):
        """Gets the size of this Sample2Details.

        This will be blank.

        :return: The size of this Sample2Details.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Sample2Details.

        This will be blank.

        :param size: The size of this Sample2Details.
        :type size: str
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def type(self):
        """Gets the type of this Sample2Details.

        String file.

        :return: The type of this Sample2Details.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Sample2Details.

        String file.

        :param type: The type of this Sample2Details.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this Sample2Details.

        This is the unique identifier of the document shared by the user in DigiLocker. You will use this identifier to get the actual file from DigiLocker using the API.

        :return: The uri of this Sample2Details.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Sample2Details.

        This is the unique identifier of the document shared by the user in DigiLocker. You will use this identifier to get the actual file from DigiLocker using the API.

        :param uri: The uri of this Sample2Details.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
