# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SampleDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, expires_in: int=None, scope: str=None, token_type: str=None):
        """SampleDetails - a model defined in OpenAPI

        :param access_token: The access_token of this SampleDetails.
        :param expires_in: The expires_in of this SampleDetails.
        :param scope: The scope of this SampleDetails.
        :param token_type: The token_type of this SampleDetails.
        """
        self.openapi_types = {
            'access_token': str,
            'expires_in': int,
            'scope': str,
            'token_type': str
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'expires_in': 'expires_in',
            'scope': 'scope',
            'token_type': 'token_type'
        }

        self._access_token = access_token
        self._expires_in = expires_in
        self._scope = scope
        self._token_type = token_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SampleDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sample_details of this SampleDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this SampleDetails.


        :return: The access_token of this SampleDetails.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this SampleDetails.


        :param access_token: The access_token of this SampleDetails.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def expires_in(self):
        """Gets the expires_in of this SampleDetails.


        :return: The expires_in of this SampleDetails.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this SampleDetails.


        :param expires_in: The expires_in of this SampleDetails.
        :type expires_in: int
        """
        if expires_in is None:
            raise ValueError("Invalid value for `expires_in`, must not be `None`")

        self._expires_in = expires_in

    @property
    def scope(self):
        """Gets the scope of this SampleDetails.


        :return: The scope of this SampleDetails.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this SampleDetails.


        :param scope: The scope of this SampleDetails.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope

    @property
    def token_type(self):
        """Gets the token_type of this SampleDetails.


        :return: The token_type of this SampleDetails.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this SampleDetails.


        :param token_type: The token_type of this SampleDetails.
        :type token_type: str
        """
        if token_type is None:
            raise ValueError("Invalid value for `token_type`, must not be `None`")

        self._token_type = token_type
