# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sample1_items_inner import Sample1ItemsInner
from openapi_server import util


class Sample1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, directory: str=None, items: list[Sample1ItemsInner]=None):
        """Sample1 - a model defined in OpenAPI

        :param directory: The directory of this Sample1.
        :param items: The items of this Sample1.
        """
        self.openapi_types = {
            'directory': str,
            'items': list[Sample1ItemsInner]
        }

        self.attribute_map = {
            'directory': 'directory',
            'items': 'items'
        }

        self._directory = directory
        self._items = items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sample1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sample_1 of this Sample1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def directory(self):
        """Gets the directory of this Sample1.


        :return: The directory of this Sample1.
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this Sample1.


        :param directory: The directory of this Sample1.
        :type directory: str
        """
        if directory is None:
            raise ValueError("Invalid value for `directory`, must not be `None`")
        if directory is not None and len(directory) < 1:
            raise ValueError("Invalid value for `directory`, length must be greater than or equal to `1`")

        self._directory = directory

    @property
    def items(self):
        """Gets the items of this Sample1.


        :return: The items of this Sample1.
        :rtype: list[Sample1ItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Sample1.


        :param items: The items of this Sample1.
        :type items: list[Sample1ItemsInner]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")
        if items is not None and len(items) < 1:
            raise ValueError("Invalid value for `items`, number of items must be greater than or equal to `1`")

        self._items = items
