# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eaadhar_xaml_schema_kyc_res_signature import EaadharXamlSchemaKycResSignature
from openapi_server.models.eaadhar_xaml_schema_kyc_res_uid_data import EaadharXamlSchemaKycResUidData
from openapi_server import util


class EaadharXamlSchemaKycRes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rar: str=None, signature: EaadharXamlSchemaKycResSignature=None, uid_data: EaadharXamlSchemaKycResUidData=None, code: str=None, ret: str=None, ts: str=None, ttl: str=None, txn: str=None):
        """EaadharXamlSchemaKycRes - a model defined in OpenAPI

        :param rar: The rar of this EaadharXamlSchemaKycRes.
        :param signature: The signature of this EaadharXamlSchemaKycRes.
        :param uid_data: The uid_data of this EaadharXamlSchemaKycRes.
        :param code: The code of this EaadharXamlSchemaKycRes.
        :param ret: The ret of this EaadharXamlSchemaKycRes.
        :param ts: The ts of this EaadharXamlSchemaKycRes.
        :param ttl: The ttl of this EaadharXamlSchemaKycRes.
        :param txn: The txn of this EaadharXamlSchemaKycRes.
        """
        self.openapi_types = {
            'rar': str,
            'signature': EaadharXamlSchemaKycResSignature,
            'uid_data': EaadharXamlSchemaKycResUidData,
            'code': str,
            'ret': str,
            'ts': str,
            'ttl': str,
            'txn': str
        }

        self.attribute_map = {
            'rar': 'Rar',
            'signature': 'Signature',
            'uid_data': 'UidData',
            'code': 'code',
            'ret': 'ret',
            'ts': 'ts',
            'ttl': 'ttl',
            'txn': 'txn'
        }

        self._rar = rar
        self._signature = signature
        self._uid_data = uid_data
        self._code = code
        self._ret = ret
        self._ts = ts
        self._ttl = ttl
        self._txn = txn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EaadharXamlSchemaKycRes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EaadharXamlSchema_KycRes of this EaadharXamlSchemaKycRes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rar(self):
        """Gets the rar of this EaadharXamlSchemaKycRes.


        :return: The rar of this EaadharXamlSchemaKycRes.
        :rtype: str
        """
        return self._rar

    @rar.setter
    def rar(self, rar):
        """Sets the rar of this EaadharXamlSchemaKycRes.


        :param rar: The rar of this EaadharXamlSchemaKycRes.
        :type rar: str
        """
        if rar is None:
            raise ValueError("Invalid value for `rar`, must not be `None`")
        if rar is not None and len(rar) < 1:
            raise ValueError("Invalid value for `rar`, length must be greater than or equal to `1`")

        self._rar = rar

    @property
    def signature(self):
        """Gets the signature of this EaadharXamlSchemaKycRes.


        :return: The signature of this EaadharXamlSchemaKycRes.
        :rtype: EaadharXamlSchemaKycResSignature
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this EaadharXamlSchemaKycRes.


        :param signature: The signature of this EaadharXamlSchemaKycRes.
        :type signature: EaadharXamlSchemaKycResSignature
        """
        if signature is None:
            raise ValueError("Invalid value for `signature`, must not be `None`")

        self._signature = signature

    @property
    def uid_data(self):
        """Gets the uid_data of this EaadharXamlSchemaKycRes.


        :return: The uid_data of this EaadharXamlSchemaKycRes.
        :rtype: EaadharXamlSchemaKycResUidData
        """
        return self._uid_data

    @uid_data.setter
    def uid_data(self, uid_data):
        """Sets the uid_data of this EaadharXamlSchemaKycRes.


        :param uid_data: The uid_data of this EaadharXamlSchemaKycRes.
        :type uid_data: EaadharXamlSchemaKycResUidData
        """
        if uid_data is None:
            raise ValueError("Invalid value for `uid_data`, must not be `None`")

        self._uid_data = uid_data

    @property
    def code(self):
        """Gets the code of this EaadharXamlSchemaKycRes.


        :return: The code of this EaadharXamlSchemaKycRes.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EaadharXamlSchemaKycRes.


        :param code: The code of this EaadharXamlSchemaKycRes.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")
        if code is not None and len(code) < 1:
            raise ValueError("Invalid value for `code`, length must be greater than or equal to `1`")

        self._code = code

    @property
    def ret(self):
        """Gets the ret of this EaadharXamlSchemaKycRes.


        :return: The ret of this EaadharXamlSchemaKycRes.
        :rtype: str
        """
        return self._ret

    @ret.setter
    def ret(self, ret):
        """Sets the ret of this EaadharXamlSchemaKycRes.


        :param ret: The ret of this EaadharXamlSchemaKycRes.
        :type ret: str
        """
        if ret is None:
            raise ValueError("Invalid value for `ret`, must not be `None`")
        if ret is not None and len(ret) < 1:
            raise ValueError("Invalid value for `ret`, length must be greater than or equal to `1`")

        self._ret = ret

    @property
    def ts(self):
        """Gets the ts of this EaadharXamlSchemaKycRes.


        :return: The ts of this EaadharXamlSchemaKycRes.
        :rtype: str
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this EaadharXamlSchemaKycRes.


        :param ts: The ts of this EaadharXamlSchemaKycRes.
        :type ts: str
        """
        if ts is None:
            raise ValueError("Invalid value for `ts`, must not be `None`")
        if ts is not None and len(ts) < 1:
            raise ValueError("Invalid value for `ts`, length must be greater than or equal to `1`")

        self._ts = ts

    @property
    def ttl(self):
        """Gets the ttl of this EaadharXamlSchemaKycRes.


        :return: The ttl of this EaadharXamlSchemaKycRes.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this EaadharXamlSchemaKycRes.


        :param ttl: The ttl of this EaadharXamlSchemaKycRes.
        :type ttl: str
        """
        if ttl is None:
            raise ValueError("Invalid value for `ttl`, must not be `None`")
        if ttl is not None and len(ttl) < 1:
            raise ValueError("Invalid value for `ttl`, length must be greater than or equal to `1`")

        self._ttl = ttl

    @property
    def txn(self):
        """Gets the txn of this EaadharXamlSchemaKycRes.


        :return: The txn of this EaadharXamlSchemaKycRes.
        :rtype: str
        """
        return self._txn

    @txn.setter
    def txn(self, txn):
        """Sets the txn of this EaadharXamlSchemaKycRes.


        :param txn: The txn of this EaadharXamlSchemaKycRes.
        :type txn: str
        """
        if txn is None:
            raise ValueError("Invalid value for `txn`, must not be `None`")
        if txn is not None and len(txn) < 1:
            raise ValueError("Invalid value for `txn`, length must be greater than or equal to `1`")

        self._txn = txn
