# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssuerResponseIssuersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: str=None, description: str=None, issuerid: str=None, name: str=None, orgid: str=None):
        """IssuerResponseIssuersInner - a model defined in OpenAPI

        :param categories: The categories of this IssuerResponseIssuersInner.
        :param description: The description of this IssuerResponseIssuersInner.
        :param issuerid: The issuerid of this IssuerResponseIssuersInner.
        :param name: The name of this IssuerResponseIssuersInner.
        :param orgid: The orgid of this IssuerResponseIssuersInner.
        """
        self.openapi_types = {
            'categories': str,
            'description': str,
            'issuerid': str,
            'name': str,
            'orgid': str
        }

        self.attribute_map = {
            'categories': 'categories',
            'description': 'description',
            'issuerid': 'issuerid',
            'name': 'name',
            'orgid': 'orgid'
        }

        self._categories = categories
        self._description = description
        self._issuerid = issuerid
        self._name = name
        self._orgid = orgid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuerResponseIssuersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssuerResponse_issuers_inner of this IssuerResponseIssuersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this IssuerResponseIssuersInner.


        :return: The categories of this IssuerResponseIssuersInner.
        :rtype: str
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this IssuerResponseIssuersInner.


        :param categories: The categories of this IssuerResponseIssuersInner.
        :type categories: str
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")
        if categories is not None and len(categories) < 1:
            raise ValueError("Invalid value for `categories`, length must be greater than or equal to `1`")

        self._categories = categories

    @property
    def description(self):
        """Gets the description of this IssuerResponseIssuersInner.


        :return: The description of this IssuerResponseIssuersInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IssuerResponseIssuersInner.


        :param description: The description of this IssuerResponseIssuersInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def issuerid(self):
        """Gets the issuerid of this IssuerResponseIssuersInner.


        :return: The issuerid of this IssuerResponseIssuersInner.
        :rtype: str
        """
        return self._issuerid

    @issuerid.setter
    def issuerid(self, issuerid):
        """Sets the issuerid of this IssuerResponseIssuersInner.


        :param issuerid: The issuerid of this IssuerResponseIssuersInner.
        :type issuerid: str
        """
        if issuerid is None:
            raise ValueError("Invalid value for `issuerid`, must not be `None`")
        if issuerid is not None and len(issuerid) < 1:
            raise ValueError("Invalid value for `issuerid`, length must be greater than or equal to `1`")

        self._issuerid = issuerid

    @property
    def name(self):
        """Gets the name of this IssuerResponseIssuersInner.


        :return: The name of this IssuerResponseIssuersInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IssuerResponseIssuersInner.


        :param name: The name of this IssuerResponseIssuersInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def orgid(self):
        """Gets the orgid of this IssuerResponseIssuersInner.


        :return: The orgid of this IssuerResponseIssuersInner.
        :rtype: str
        """
        return self._orgid

    @orgid.setter
    def orgid(self, orgid):
        """Sets the orgid of this IssuerResponseIssuersInner.


        :param orgid: The orgid of this IssuerResponseIssuersInner.
        :type orgid: str
        """
        if orgid is None:
            raise ValueError("Invalid value for `orgid`, must not be `None`")
        if orgid is not None and len(orgid) < 1:
            raise ValueError("Invalid value for `orgid`, length must be greater than or equal to `1`")

        self._orgid = orgid
