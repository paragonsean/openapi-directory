# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetListOfIssuedDocumentsId200ResponseItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: str=None, description: str=None, doctype: str=None, issuer: str=None, issuerid: str=None, mime: List[object]=None, name: str=None, parent: str=None, size: str=None, type: str=None, uri: str=None):
        """GetListOfIssuedDocumentsId200ResponseItemsInner - a model defined in OpenAPI

        :param _date: The _date of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :param description: The description of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :param doctype: The doctype of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :param issuer: The issuer of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :param issuerid: The issuerid of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :param mime: The mime of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :param name: The name of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :param parent: The parent of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :param size: The size of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :param type: The type of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :param uri: The uri of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        """
        self.openapi_types = {
            '_date': str,
            'description': str,
            'doctype': str,
            'issuer': str,
            'issuerid': str,
            'mime': List[object],
            'name': str,
            'parent': str,
            'size': str,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            '_date': 'date',
            'description': 'description',
            'doctype': 'doctype',
            'issuer': 'issuer',
            'issuerid': 'issuerid',
            'mime': 'mime',
            'name': 'name',
            'parent': 'parent',
            'size': 'size',
            'type': 'type',
            'uri': 'uri'
        }

        self.__date = _date
        self._description = description
        self._doctype = doctype
        self._issuer = issuer
        self._issuerid = issuerid
        self._mime = mime
        self._name = name
        self._parent = parent
        self._size = size
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetListOfIssuedDocumentsId200ResponseItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Get_List_of_issued_Documents_id_200_response_items_inner of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :return: The _date of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :param _date: The _date of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")
        if _date is not None and len(_date) < 1:
            raise ValueError("Invalid value for `_date`, length must be greater than or equal to `1`")

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :return: The description of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :param description: The description of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def doctype(self):
        """Gets the doctype of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :return: The doctype of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :rtype: str
        """
        return self._doctype

    @doctype.setter
    def doctype(self, doctype):
        """Sets the doctype of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :param doctype: The doctype of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :type doctype: str
        """
        if doctype is None:
            raise ValueError("Invalid value for `doctype`, must not be `None`")
        if doctype is not None and len(doctype) < 1:
            raise ValueError("Invalid value for `doctype`, length must be greater than or equal to `1`")

        self._doctype = doctype

    @property
    def issuer(self):
        """Gets the issuer of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :return: The issuer of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :param issuer: The issuer of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :type issuer: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")
        if issuer is not None and len(issuer) < 1:
            raise ValueError("Invalid value for `issuer`, length must be greater than or equal to `1`")

        self._issuer = issuer

    @property
    def issuerid(self):
        """Gets the issuerid of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :return: The issuerid of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :rtype: str
        """
        return self._issuerid

    @issuerid.setter
    def issuerid(self, issuerid):
        """Sets the issuerid of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :param issuerid: The issuerid of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :type issuerid: str
        """
        if issuerid is None:
            raise ValueError("Invalid value for `issuerid`, must not be `None`")
        if issuerid is not None and len(issuerid) < 1:
            raise ValueError("Invalid value for `issuerid`, length must be greater than or equal to `1`")

        self._issuerid = issuerid

    @property
    def mime(self):
        """Gets the mime of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :return: The mime of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :rtype: List[object]
        """
        return self._mime

    @mime.setter
    def mime(self, mime):
        """Sets the mime of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :param mime: The mime of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :type mime: List[object]
        """

        self._mime = mime

    @property
    def name(self):
        """Gets the name of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :return: The name of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :param name: The name of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :return: The parent of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :param parent: The parent of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :type parent: str
        """
        if parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")

        self._parent = parent

    @property
    def size(self):
        """Gets the size of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :return: The size of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :param size: The size of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :type size: str
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def type(self):
        """Gets the type of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :return: The type of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :param type: The type of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :return: The uri of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this GetListOfIssuedDocumentsId200ResponseItemsInner.


        :param uri: The uri of this GetListOfIssuedDocumentsId200ResponseItemsInner.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")
        if uri is not None and len(uri) < 1:
            raise ValueError("Invalid value for `uri`, length must be greater than or equal to `1`")

        self._uri = uri
