# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.issuer_response_issuers_inner import IssuerResponseIssuersInner
from openapi_server import util


class IssuerResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issuers: list[IssuerResponseIssuersInner]=None):
        """IssuerResponse - a model defined in OpenAPI

        :param issuers: The issuers of this IssuerResponse.
        """
        self.openapi_types = {
            'issuers': list[IssuerResponseIssuersInner]
        }

        self.attribute_map = {
            'issuers': 'issuers'
        }

        self._issuers = issuers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssuerResponse of this IssuerResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuers(self):
        """Gets the issuers of this IssuerResponse.


        :return: The issuers of this IssuerResponse.
        :rtype: list[IssuerResponseIssuersInner]
        """
        return self._issuers

    @issuers.setter
    def issuers(self, issuers):
        """Sets the issuers of this IssuerResponse.


        :param issuers: The issuers of this IssuerResponse.
        :type issuers: list[IssuerResponseIssuersInner]
        """
        if issuers is None:
            raise ValueError("Invalid value for `issuers`, must not be `None`")
        if issuers is not None and len(issuers) < 1:
            raise ValueError("Invalid value for `issuers`, number of items must be greater than or equal to `1`")

        self._issuers = issuers
