# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceAuthorizationCodeResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_code: str=None, dl_masked_email: str=None, dl_masked_mobile: int=None, expires_in: int=None):
        """DeviceAuthorizationCodeResponse - a model defined in OpenAPI

        :param device_code: The device_code of this DeviceAuthorizationCodeResponse.
        :param dl_masked_email: The dl_masked_email of this DeviceAuthorizationCodeResponse.
        :param dl_masked_mobile: The dl_masked_mobile of this DeviceAuthorizationCodeResponse.
        :param expires_in: The expires_in of this DeviceAuthorizationCodeResponse.
        """
        self.openapi_types = {
            'device_code': str,
            'dl_masked_email': str,
            'dl_masked_mobile': int,
            'expires_in': int
        }

        self.attribute_map = {
            'device_code': 'device_code',
            'dl_masked_email': 'dl_masked_email',
            'dl_masked_mobile': 'dl_masked_mobile',
            'expires_in': 'expires_in'
        }

        self._device_code = device_code
        self._dl_masked_email = dl_masked_email
        self._dl_masked_mobile = dl_masked_mobile
        self._expires_in = expires_in

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceAuthorizationCodeResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceAuthorizationCodeResponse of this DeviceAuthorizationCodeResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_code(self):
        """Gets the device_code of this DeviceAuthorizationCodeResponse.

        The device verification code.

        :return: The device_code of this DeviceAuthorizationCodeResponse.
        :rtype: str
        """
        return self._device_code

    @device_code.setter
    def device_code(self, device_code):
        """Sets the device_code of this DeviceAuthorizationCodeResponse.

        The device verification code.

        :param device_code: The device_code of this DeviceAuthorizationCodeResponse.
        :type device_code: str
        """
        if device_code is None:
            raise ValueError("Invalid value for `device_code`, must not be `None`")

        self._device_code = device_code

    @property
    def dl_masked_email(self):
        """Gets the dl_masked_email of this DeviceAuthorizationCodeResponse.

        The masked email on which the OTP is sent.

        :return: The dl_masked_email of this DeviceAuthorizationCodeResponse.
        :rtype: str
        """
        return self._dl_masked_email

    @dl_masked_email.setter
    def dl_masked_email(self, dl_masked_email):
        """Sets the dl_masked_email of this DeviceAuthorizationCodeResponse.

        The masked email on which the OTP is sent.

        :param dl_masked_email: The dl_masked_email of this DeviceAuthorizationCodeResponse.
        :type dl_masked_email: str
        """
        if dl_masked_email is None:
            raise ValueError("Invalid value for `dl_masked_email`, must not be `None`")

        self._dl_masked_email = dl_masked_email

    @property
    def dl_masked_mobile(self):
        """Gets the dl_masked_mobile of this DeviceAuthorizationCodeResponse.

        The masked mobile number on which the OTP is sent.

        :return: The dl_masked_mobile of this DeviceAuthorizationCodeResponse.
        :rtype: int
        """
        return self._dl_masked_mobile

    @dl_masked_mobile.setter
    def dl_masked_mobile(self, dl_masked_mobile):
        """Sets the dl_masked_mobile of this DeviceAuthorizationCodeResponse.

        The masked mobile number on which the OTP is sent.

        :param dl_masked_mobile: The dl_masked_mobile of this DeviceAuthorizationCodeResponse.
        :type dl_masked_mobile: int
        """
        if dl_masked_mobile is None:
            raise ValueError("Invalid value for `dl_masked_mobile`, must not be `None`")

        self._dl_masked_mobile = dl_masked_mobile

    @property
    def expires_in(self):
        """Gets the expires_in of this DeviceAuthorizationCodeResponse.

        The duration in seconds for which the code is valid.

        :return: The expires_in of this DeviceAuthorizationCodeResponse.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this DeviceAuthorizationCodeResponse.

        The duration in seconds for which the code is valid.

        :param expires_in: The expires_in of this DeviceAuthorizationCodeResponse.
        :type expires_in: int
        """
        if expires_in is None:
            raise ValueError("Invalid value for `expires_in`, must not be `None`")

        self._expires_in = expires_in
