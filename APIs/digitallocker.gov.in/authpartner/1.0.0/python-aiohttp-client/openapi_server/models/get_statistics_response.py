# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_statistics_response_monthwise_registations import GetStatisticsResponseMonthwiseRegistations
from openapi_server.models.get_statistics_response_yearwise_authentic_documents import GetStatisticsResponseYearwiseAuthenticDocuments
from openapi_server import util


class GetStatisticsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentic_documents: str=None, count_as_on: str=None, issuers: str=None, monthwise_registations: GetStatisticsResponseMonthwiseRegistations=None, requestors: str=None, users: str=None, yearwise_authentic_documents: GetStatisticsResponseYearwiseAuthenticDocuments=None):
        """GetStatisticsResponse - a model defined in OpenAPI

        :param authentic_documents: The authentic_documents of this GetStatisticsResponse.
        :param count_as_on: The count_as_on of this GetStatisticsResponse.
        :param issuers: The issuers of this GetStatisticsResponse.
        :param monthwise_registations: The monthwise_registations of this GetStatisticsResponse.
        :param requestors: The requestors of this GetStatisticsResponse.
        :param users: The users of this GetStatisticsResponse.
        :param yearwise_authentic_documents: The yearwise_authentic_documents of this GetStatisticsResponse.
        """
        self.openapi_types = {
            'authentic_documents': str,
            'count_as_on': str,
            'issuers': str,
            'monthwise_registations': GetStatisticsResponseMonthwiseRegistations,
            'requestors': str,
            'users': str,
            'yearwise_authentic_documents': GetStatisticsResponseYearwiseAuthenticDocuments
        }

        self.attribute_map = {
            'authentic_documents': 'authentic_documents',
            'count_as_on': 'count_as_on',
            'issuers': 'issuers',
            'monthwise_registations': 'monthwise_registations',
            'requestors': 'requestors',
            'users': 'users',
            'yearwise_authentic_documents': 'yearwise_authentic_documents'
        }

        self._authentic_documents = authentic_documents
        self._count_as_on = count_as_on
        self._issuers = issuers
        self._monthwise_registations = monthwise_registations
        self._requestors = requestors
        self._users = users
        self._yearwise_authentic_documents = yearwise_authentic_documents

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetStatisticsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetStatisticsResponse of this GetStatisticsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentic_documents(self):
        """Gets the authentic_documents of this GetStatisticsResponse.

        Count of authentic documents available through DigiLocker.

        :return: The authentic_documents of this GetStatisticsResponse.
        :rtype: str
        """
        return self._authentic_documents

    @authentic_documents.setter
    def authentic_documents(self, authentic_documents):
        """Sets the authentic_documents of this GetStatisticsResponse.

        Count of authentic documents available through DigiLocker.

        :param authentic_documents: The authentic_documents of this GetStatisticsResponse.
        :type authentic_documents: str
        """
        if authentic_documents is None:
            raise ValueError("Invalid value for `authentic_documents`, must not be `None`")

        self._authentic_documents = authentic_documents

    @property
    def count_as_on(self):
        """Gets the count_as_on of this GetStatisticsResponse.

        The date on which this statistics is generated.

        :return: The count_as_on of this GetStatisticsResponse.
        :rtype: str
        """
        return self._count_as_on

    @count_as_on.setter
    def count_as_on(self, count_as_on):
        """Sets the count_as_on of this GetStatisticsResponse.

        The date on which this statistics is generated.

        :param count_as_on: The count_as_on of this GetStatisticsResponse.
        :type count_as_on: str
        """
        if count_as_on is None:
            raise ValueError("Invalid value for `count_as_on`, must not be `None`")

        self._count_as_on = count_as_on

    @property
    def issuers(self):
        """Gets the issuers of this GetStatisticsResponse.

        Count of issuer organizations registered on DigiLocker.

        :return: The issuers of this GetStatisticsResponse.
        :rtype: str
        """
        return self._issuers

    @issuers.setter
    def issuers(self, issuers):
        """Sets the issuers of this GetStatisticsResponse.

        Count of issuer organizations registered on DigiLocker.

        :param issuers: The issuers of this GetStatisticsResponse.
        :type issuers: str
        """
        if issuers is None:
            raise ValueError("Invalid value for `issuers`, must not be `None`")

        self._issuers = issuers

    @property
    def monthwise_registations(self):
        """Gets the monthwise_registations of this GetStatisticsResponse.


        :return: The monthwise_registations of this GetStatisticsResponse.
        :rtype: GetStatisticsResponseMonthwiseRegistations
        """
        return self._monthwise_registations

    @monthwise_registations.setter
    def monthwise_registations(self, monthwise_registations):
        """Sets the monthwise_registations of this GetStatisticsResponse.


        :param monthwise_registations: The monthwise_registations of this GetStatisticsResponse.
        :type monthwise_registations: GetStatisticsResponseMonthwiseRegistations
        """
        if monthwise_registations is None:
            raise ValueError("Invalid value for `monthwise_registations`, must not be `None`")

        self._monthwise_registations = monthwise_registations

    @property
    def requestors(self):
        """Gets the requestors of this GetStatisticsResponse.

        Count of requester organizations registered on DigiLocker.

        :return: The requestors of this GetStatisticsResponse.
        :rtype: str
        """
        return self._requestors

    @requestors.setter
    def requestors(self, requestors):
        """Sets the requestors of this GetStatisticsResponse.

        Count of requester organizations registered on DigiLocker.

        :param requestors: The requestors of this GetStatisticsResponse.
        :type requestors: str
        """
        if requestors is None:
            raise ValueError("Invalid value for `requestors`, must not be `None`")

        self._requestors = requestors

    @property
    def users(self):
        """Gets the users of this GetStatisticsResponse.

        Count of registered users on DigiLocker.

        :return: The users of this GetStatisticsResponse.
        :rtype: str
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this GetStatisticsResponse.

        Count of registered users on DigiLocker.

        :param users: The users of this GetStatisticsResponse.
        :type users: str
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users

    @property
    def yearwise_authentic_documents(self):
        """Gets the yearwise_authentic_documents of this GetStatisticsResponse.


        :return: The yearwise_authentic_documents of this GetStatisticsResponse.
        :rtype: GetStatisticsResponseYearwiseAuthenticDocuments
        """
        return self._yearwise_authentic_documents

    @yearwise_authentic_documents.setter
    def yearwise_authentic_documents(self, yearwise_authentic_documents):
        """Sets the yearwise_authentic_documents of this GetStatisticsResponse.


        :param yearwise_authentic_documents: The yearwise_authentic_documents of this GetStatisticsResponse.
        :type yearwise_authentic_documents: GetStatisticsResponseYearwiseAuthenticDocuments
        """
        if yearwise_authentic_documents is None:
            raise ValueError("Invalid value for `yearwise_authentic_documents`, must not be `None`")

        self._yearwise_authentic_documents = yearwise_authentic_documents
