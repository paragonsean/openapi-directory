# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EaadharXamlSchemaKycResSignatureKeyInfoX509Data(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, x509_certificate: str=None, x509_subject_name: str=None):
        """EaadharXamlSchemaKycResSignatureKeyInfoX509Data - a model defined in OpenAPI

        :param x509_certificate: The x509_certificate of this EaadharXamlSchemaKycResSignatureKeyInfoX509Data.
        :param x509_subject_name: The x509_subject_name of this EaadharXamlSchemaKycResSignatureKeyInfoX509Data.
        """
        self.openapi_types = {
            'x509_certificate': str,
            'x509_subject_name': str
        }

        self.attribute_map = {
            'x509_certificate': 'X509Certificate',
            'x509_subject_name': 'X509SubjectName'
        }

        self._x509_certificate = x509_certificate
        self._x509_subject_name = x509_subject_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EaadharXamlSchemaKycResSignatureKeyInfoX509Data':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EaadharXamlSchema_KycRes_Signature_KeyInfo_X509Data of this EaadharXamlSchemaKycResSignatureKeyInfoX509Data.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def x509_certificate(self):
        """Gets the x509_certificate of this EaadharXamlSchemaKycResSignatureKeyInfoX509Data.


        :return: The x509_certificate of this EaadharXamlSchemaKycResSignatureKeyInfoX509Data.
        :rtype: str
        """
        return self._x509_certificate

    @x509_certificate.setter
    def x509_certificate(self, x509_certificate):
        """Sets the x509_certificate of this EaadharXamlSchemaKycResSignatureKeyInfoX509Data.


        :param x509_certificate: The x509_certificate of this EaadharXamlSchemaKycResSignatureKeyInfoX509Data.
        :type x509_certificate: str
        """
        if x509_certificate is None:
            raise ValueError("Invalid value for `x509_certificate`, must not be `None`")
        if x509_certificate is not None and len(x509_certificate) < 1:
            raise ValueError("Invalid value for `x509_certificate`, length must be greater than or equal to `1`")

        self._x509_certificate = x509_certificate

    @property
    def x509_subject_name(self):
        """Gets the x509_subject_name of this EaadharXamlSchemaKycResSignatureKeyInfoX509Data.


        :return: The x509_subject_name of this EaadharXamlSchemaKycResSignatureKeyInfoX509Data.
        :rtype: str
        """
        return self._x509_subject_name

    @x509_subject_name.setter
    def x509_subject_name(self, x509_subject_name):
        """Sets the x509_subject_name of this EaadharXamlSchemaKycResSignatureKeyInfoX509Data.


        :param x509_subject_name: The x509_subject_name of this EaadharXamlSchemaKycResSignatureKeyInfoX509Data.
        :type x509_subject_name: str
        """
        if x509_subject_name is None:
            raise ValueError("Invalid value for `x509_subject_name`, must not be `None`")
        if x509_subject_name is not None and len(x509_subject_name) < 1:
            raise ValueError("Invalid value for `x509_subject_name`, length must be greater than or equal to `1`")

        self._x509_subject_name = x509_subject_name
