# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eaadhar_xaml_schema_kyc_res_signature_signed_info_canonicalization_method import EaadharXamlSchemaKycResSignatureSignedInfoCanonicalizationMethod
from openapi_server.models.eaadhar_xaml_schema_kyc_res_signature_signed_info_reference_transforms import EaadharXamlSchemaKycResSignatureSignedInfoReferenceTransforms
from openapi_server import util


class EaadharXamlSchemaKycResSignatureSignedInfoReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digest_method: EaadharXamlSchemaKycResSignatureSignedInfoCanonicalizationMethod=None, digest_value: str=None, transforms: EaadharXamlSchemaKycResSignatureSignedInfoReferenceTransforms=None, uri: str=None):
        """EaadharXamlSchemaKycResSignatureSignedInfoReference - a model defined in OpenAPI

        :param digest_method: The digest_method of this EaadharXamlSchemaKycResSignatureSignedInfoReference.
        :param digest_value: The digest_value of this EaadharXamlSchemaKycResSignatureSignedInfoReference.
        :param transforms: The transforms of this EaadharXamlSchemaKycResSignatureSignedInfoReference.
        :param uri: The uri of this EaadharXamlSchemaKycResSignatureSignedInfoReference.
        """
        self.openapi_types = {
            'digest_method': EaadharXamlSchemaKycResSignatureSignedInfoCanonicalizationMethod,
            'digest_value': str,
            'transforms': EaadharXamlSchemaKycResSignatureSignedInfoReferenceTransforms,
            'uri': str
        }

        self.attribute_map = {
            'digest_method': 'DigestMethod',
            'digest_value': 'DigestValue',
            'transforms': 'Transforms',
            'uri': 'URI'
        }

        self._digest_method = digest_method
        self._digest_value = digest_value
        self._transforms = transforms
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EaadharXamlSchemaKycResSignatureSignedInfoReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EaadharXamlSchema_KycRes_Signature_SignedInfo_Reference of this EaadharXamlSchemaKycResSignatureSignedInfoReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digest_method(self):
        """Gets the digest_method of this EaadharXamlSchemaKycResSignatureSignedInfoReference.


        :return: The digest_method of this EaadharXamlSchemaKycResSignatureSignedInfoReference.
        :rtype: EaadharXamlSchemaKycResSignatureSignedInfoCanonicalizationMethod
        """
        return self._digest_method

    @digest_method.setter
    def digest_method(self, digest_method):
        """Sets the digest_method of this EaadharXamlSchemaKycResSignatureSignedInfoReference.


        :param digest_method: The digest_method of this EaadharXamlSchemaKycResSignatureSignedInfoReference.
        :type digest_method: EaadharXamlSchemaKycResSignatureSignedInfoCanonicalizationMethod
        """
        if digest_method is None:
            raise ValueError("Invalid value for `digest_method`, must not be `None`")

        self._digest_method = digest_method

    @property
    def digest_value(self):
        """Gets the digest_value of this EaadharXamlSchemaKycResSignatureSignedInfoReference.


        :return: The digest_value of this EaadharXamlSchemaKycResSignatureSignedInfoReference.
        :rtype: str
        """
        return self._digest_value

    @digest_value.setter
    def digest_value(self, digest_value):
        """Sets the digest_value of this EaadharXamlSchemaKycResSignatureSignedInfoReference.


        :param digest_value: The digest_value of this EaadharXamlSchemaKycResSignatureSignedInfoReference.
        :type digest_value: str
        """
        if digest_value is None:
            raise ValueError("Invalid value for `digest_value`, must not be `None`")
        if digest_value is not None and len(digest_value) < 1:
            raise ValueError("Invalid value for `digest_value`, length must be greater than or equal to `1`")

        self._digest_value = digest_value

    @property
    def transforms(self):
        """Gets the transforms of this EaadharXamlSchemaKycResSignatureSignedInfoReference.


        :return: The transforms of this EaadharXamlSchemaKycResSignatureSignedInfoReference.
        :rtype: EaadharXamlSchemaKycResSignatureSignedInfoReferenceTransforms
        """
        return self._transforms

    @transforms.setter
    def transforms(self, transforms):
        """Sets the transforms of this EaadharXamlSchemaKycResSignatureSignedInfoReference.


        :param transforms: The transforms of this EaadharXamlSchemaKycResSignatureSignedInfoReference.
        :type transforms: EaadharXamlSchemaKycResSignatureSignedInfoReferenceTransforms
        """
        if transforms is None:
            raise ValueError("Invalid value for `transforms`, must not be `None`")

        self._transforms = transforms

    @property
    def uri(self):
        """Gets the uri of this EaadharXamlSchemaKycResSignatureSignedInfoReference.


        :return: The uri of this EaadharXamlSchemaKycResSignatureSignedInfoReference.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this EaadharXamlSchemaKycResSignatureSignedInfoReference.


        :param uri: The uri of this EaadharXamlSchemaKycResSignatureSignedInfoReference.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
