# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, digilocker_id: str=None, dob: int=None, eaadhar: str=None, expires_in: int=None, gender: str=None, name: str=None, reference_key: str=None, refresh_token: str=None, scope: str=None, token_type: str=None):
        """AccessResponse - a model defined in OpenAPI

        :param access_token: The access_token of this AccessResponse.
        :param digilocker_id: The digilocker_id of this AccessResponse.
        :param dob: The dob of this AccessResponse.
        :param eaadhar: The eaadhar of this AccessResponse.
        :param expires_in: The expires_in of this AccessResponse.
        :param gender: The gender of this AccessResponse.
        :param name: The name of this AccessResponse.
        :param reference_key: The reference_key of this AccessResponse.
        :param refresh_token: The refresh_token of this AccessResponse.
        :param scope: The scope of this AccessResponse.
        :param token_type: The token_type of this AccessResponse.
        """
        self.openapi_types = {
            'access_token': str,
            'digilocker_id': str,
            'dob': int,
            'eaadhar': str,
            'expires_in': int,
            'gender': str,
            'name': str,
            'reference_key': str,
            'refresh_token': str,
            'scope': str,
            'token_type': str
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'digilocker_id': 'digilocker_id',
            'dob': 'dob',
            'eaadhar': 'eaadhar',
            'expires_in': 'expires_in',
            'gender': 'gender',
            'name': 'name',
            'reference_key': 'reference_key',
            'refresh_token': 'refresh_token',
            'scope': 'scope',
            'token_type': 'token_type'
        }

        self._access_token = access_token
        self._digilocker_id = digilocker_id
        self._dob = dob
        self._eaadhar = eaadhar
        self._expires_in = expires_in
        self._gender = gender
        self._name = name
        self._reference_key = reference_key
        self._refresh_token = refresh_token
        self._scope = scope
        self._token_type = token_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessResponse of this AccessResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this AccessResponse.

        The access token that can be used to call the DigiLocker APIs.

        :return: The access_token of this AccessResponse.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AccessResponse.

        The access token that can be used to call the DigiLocker APIs.

        :param access_token: The access_token of this AccessResponse.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def digilocker_id(self):
        """Gets the digilocker_id of this AccessResponse.

        A unique 36 character DigiLocker Id of the user account.

        :return: The digilocker_id of this AccessResponse.
        :rtype: str
        """
        return self._digilocker_id

    @digilocker_id.setter
    def digilocker_id(self, digilocker_id):
        """Sets the digilocker_id of this AccessResponse.

        A unique 36 character DigiLocker Id of the user account.

        :param digilocker_id: The digilocker_id of this AccessResponse.
        :type digilocker_id: str
        """
        if digilocker_id is None:
            raise ValueError("Invalid value for `digilocker_id`, must not be `None`")

        self._digilocker_id = digilocker_id

    @property
    def dob(self):
        """Gets the dob of this AccessResponse.

        This is date of birth of the user as registered with DigiLocker in DDMMYYYY format.

        :return: The dob of this AccessResponse.
        :rtype: int
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this AccessResponse.

        This is date of birth of the user as registered with DigiLocker in DDMMYYYY format.

        :param dob: The dob of this AccessResponse.
        :type dob: int
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def eaadhar(self):
        """Gets the eaadhar of this AccessResponse.

        This indicates whether eAadhaar data is available for this account. Possible values are Y and N.

        :return: The eaadhar of this AccessResponse.
        :rtype: str
        """
        return self._eaadhar

    @eaadhar.setter
    def eaadhar(self, eaadhar):
        """Sets the eaadhar of this AccessResponse.

        This indicates whether eAadhaar data is available for this account. Possible values are Y and N.

        :param eaadhar: The eaadhar of this AccessResponse.
        :type eaadhar: str
        """
        allowed_values = ["Y", "N"]  # noqa: E501
        if eaadhar not in allowed_values:
            raise ValueError(
                "Invalid value for `eaadhar` ({0}), must be one of {1}"
                .format(eaadhar, allowed_values)
            )

        self._eaadhar = eaadhar

    @property
    def expires_in(self):
        """Gets the expires_in of this AccessResponse.

        The duration in seconds for which the access token is valid

        :return: The expires_in of this AccessResponse.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this AccessResponse.

        The duration in seconds for which the access token is valid

        :param expires_in: The expires_in of this AccessResponse.
        :type expires_in: int
        """
        if expires_in is None:
            raise ValueError("Invalid value for `expires_in`, must not be `None`")

        self._expires_in = expires_in

    @property
    def gender(self):
        """Gets the gender of this AccessResponse.

        This is gender of the user as registered with DigiLocker. The possible values are M, F, T for male, female and transgender respectively.

        :return: The gender of this AccessResponse.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this AccessResponse.

        This is gender of the user as registered with DigiLocker. The possible values are M, F, T for male, female and transgender respectively.

        :param gender: The gender of this AccessResponse.
        :type gender: str
        """
        allowed_values = ["M", "F", "T"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def name(self):
        """Gets the name of this AccessResponse.

        The name of the user as registered with DigiLocker.

        :return: The name of this AccessResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccessResponse.

        The name of the user as registered with DigiLocker.

        :param name: The name of this AccessResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def reference_key(self):
        """Gets the reference_key of this AccessResponse.

        A unique reference of the user account.

        :return: The reference_key of this AccessResponse.
        :rtype: str
        """
        return self._reference_key

    @reference_key.setter
    def reference_key(self, reference_key):
        """Sets the reference_key of this AccessResponse.

        A unique reference of the user account.

        :param reference_key: The reference_key of this AccessResponse.
        :type reference_key: str
        """
        if reference_key is None:
            raise ValueError("Invalid value for `reference_key`, must not be `None`")

        self._reference_key = reference_key

    @property
    def refresh_token(self):
        """Gets the refresh_token of this AccessResponse.

        The refresh token used to refresh the above access token when it expires. Please refer to Refresh Access Token API for more details.

        :return: The refresh_token of this AccessResponse.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this AccessResponse.

        The refresh token used to refresh the above access token when it expires. Please refer to Refresh Access Token API for more details.

        :param refresh_token: The refresh_token of this AccessResponse.
        :type refresh_token: str
        """
        if refresh_token is None:
            raise ValueError("Invalid value for `refresh_token`, must not be `None`")

        self._refresh_token = refresh_token

    @property
    def scope(self):
        """Gets the scope of this AccessResponse.

        Scope of the token.

        :return: The scope of this AccessResponse.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AccessResponse.

        Scope of the token.

        :param scope: The scope of this AccessResponse.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope

    @property
    def token_type(self):
        """Gets the token_type of this AccessResponse.

        The type of token which will always be Bearer.

        :return: The token_type of this AccessResponse.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this AccessResponse.

        The type of token which will always be Bearer.

        :param token_type: The token_type of this AccessResponse.
        :type token_type: str
        """
        if token_type is None:
            raise ValueError("Invalid value for `token_type`, must not be `None`")

        self._token_type = token_type
