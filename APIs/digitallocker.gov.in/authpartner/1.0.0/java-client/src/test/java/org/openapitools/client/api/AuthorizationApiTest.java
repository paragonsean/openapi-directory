/*
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessResponse;
import org.openapitools.client.model.GetaccesstokenIdRequest;
import org.openapitools.client.model.Sample;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthorizationApi
 */
@Disabled
public class AuthorizationApiTest {

    private final AuthorizationApi api = new AuthorizationApi();

    /**
     * Get Authorization Code
     *
     * Call to this API starts authorization flow using OAuth 2.0 protocol. This isn&#39;t an API call—it&#39;s a DigiLocker web page that lets the user sign in to DigiLocker and authorize your application to access user’s data. After the user decides whether or not to authorize your app, they will be redirected to the redirect link provided by your application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthorizationCodeIdTest() throws ApiException {
        String responseType = null;
        String redirectUri = null;
        String state = null;
        String clientId = null;
        String codeChallenge = null;
        String codeChallengeMethod = null;
        String dlFlow = null;
        Integer verifiedMobile = null;
        Sample response = api.getAuthorizationCodeId(responseType, redirectUri, state, clientId, codeChallenge, codeChallengeMethod, dlFlow, verifiedMobile);
        // TODO: test validations
    }

    /**
     * Get Access Token
     *
     * This endpoint only applies to apps using the authorization code flow. An app calls this endpoint to acquire a bearer token once the user has authorized the app. Calls to /oauth2/1/token need to be authenticated using the app&#39;s key and secret. These can either be passed as application/x-www-form-urlencoded POST parameters (see parameters below) or via HTTP basic authentication. If basic authentication is used, the app key should be provided as the username, and the app secret should be provided as the password.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getaccesstokenIdTest() throws ApiException {
        GetaccesstokenIdRequest getaccesstokenIdRequest = null;
        AccessResponse response = api.getaccesstokenId(getaccesstokenIdRequest);
        // TODO: test validations
    }

}
