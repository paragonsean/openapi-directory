/*
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sample2Details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:03.399628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sample2Details {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCTYPE = "doctype";
  @SerializedName(SERIALIZED_NAME_DOCTYPE)
  private String doctype;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_ISSUERID = "issuerid";
  @SerializedName(SERIALIZED_NAME_ISSUERID)
  private String issuerid;

  public static final String SERIALIZED_NAME_MIME = "mime";
  @SerializedName(SERIALIZED_NAME_MIME)
  private String mime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private String parent;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public Sample2Details() {
  }

  public Sample2Details date(String date) {
    this.date = date;
    return this;
  }

  /**
   * This contains the date on which the certificate was last modified in DigiLocker.
   * @return date
   */
  @javax.annotation.Nonnull
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public Sample2Details description(String description) {
    this.description = description;
    return this;
  }

  /**
   * This is the descriptive document type stored in DigiLocker such as ‘Income Certificate’ or ‘Driving License’.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Sample2Details doctype(String doctype) {
    this.doctype = doctype;
    return this;
  }

  /**
   * A 5 character unique document type provided by DigiLocker.
   * @return doctype
   */
  @javax.annotation.Nonnull
  public String getDoctype() {
    return doctype;
  }

  public void setDoctype(String doctype) {
    this.doctype = doctype;
  }


  public Sample2Details issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * The name of the issuer.
   * @return issuer
   */
  @javax.annotation.Nonnull
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public Sample2Details issuerid(String issuerid) {
    this.issuerid = issuerid;
    return this;
  }

  /**
   * Unique DigiLocker issuer id as mentioned in the URI.
   * @return issuerid
   */
  @javax.annotation.Nonnull
  public String getIssuerid() {
    return issuerid;
  }

  public void setIssuerid(String issuerid) {
    this.issuerid = issuerid;
  }


  public Sample2Details mime(String mime) {
    this.mime = mime;
    return this;
  }

  /**
   * The list of mime types for the certificate data. This field will contain “application/PDF” or “application/xml”.
   * @return mime
   */
  @javax.annotation.Nonnull
  public String getMime() {
    return mime;
  }

  public void setMime(String mime) {
    this.mime = mime;
  }


  public Sample2Details name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the certificate.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Sample2Details parent(String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * This will be blank.
   * @return parent
   */
  @javax.annotation.Nonnull
  public String getParent() {
    return parent;
  }

  public void setParent(String parent) {
    this.parent = parent;
  }


  public Sample2Details size(String size) {
    this.size = size;
    return this;
  }

  /**
   * This will be blank.
   * @return size
   */
  @javax.annotation.Nonnull
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  public Sample2Details type(String type) {
    this.type = type;
    return this;
  }

  /**
   * String file.
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Sample2Details uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * This is the unique identifier of the document shared by the user in DigiLocker. You will use this identifier to get the actual file from DigiLocker using the API.
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sample2Details sample2Details = (Sample2Details) o;
    return Objects.equals(this.date, sample2Details.date) &&
        Objects.equals(this.description, sample2Details.description) &&
        Objects.equals(this.doctype, sample2Details.doctype) &&
        Objects.equals(this.issuer, sample2Details.issuer) &&
        Objects.equals(this.issuerid, sample2Details.issuerid) &&
        Objects.equals(this.mime, sample2Details.mime) &&
        Objects.equals(this.name, sample2Details.name) &&
        Objects.equals(this.parent, sample2Details.parent) &&
        Objects.equals(this.size, sample2Details.size) &&
        Objects.equals(this.type, sample2Details.type) &&
        Objects.equals(this.uri, sample2Details.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, description, doctype, issuer, issuerid, mime, name, parent, size, type, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sample2Details {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    doctype: ").append(toIndentedString(doctype)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    issuerid: ").append(toIndentedString(issuerid)).append("\n");
    sb.append("    mime: ").append(toIndentedString(mime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("description");
    openapiFields.add("doctype");
    openapiFields.add("issuer");
    openapiFields.add("issuerid");
    openapiFields.add("mime");
    openapiFields.add("name");
    openapiFields.add("parent");
    openapiFields.add("size");
    openapiFields.add("type");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("doctype");
    openapiRequiredFields.add("issuer");
    openapiRequiredFields.add("issuerid");
    openapiRequiredFields.add("mime");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("parent");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("uri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sample2Details
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sample2Details.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sample2Details is not found in the empty JSON string", Sample2Details.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sample2Details.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sample2Details` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Sample2Details.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("doctype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doctype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doctype").toString()));
      }
      if (!jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if (!jsonObj.get("issuerid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerid").toString()));
      }
      if (!jsonObj.get("mime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if (!jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sample2Details.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sample2Details' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sample2Details> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sample2Details.class));

       return (TypeAdapter<T>) new TypeAdapter<Sample2Details>() {
           @Override
           public void write(JsonWriter out, Sample2Details value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sample2Details read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sample2Details given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sample2Details
   * @throws IOException if the JSON string is invalid with respect to Sample2Details
   */
  public static Sample2Details fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sample2Details.class);
  }

  /**
   * Convert an instance of Sample2Details to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

