/*
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccessToken;
import org.openapitools.client.model.DeviceAccessToken;
import org.openapitools.client.model.RefreshToken;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetaccesstokenIdRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:03.399628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetaccesstokenIdRequest {
  public static final String SERIALIZED_NAME_GET_ACCESS_TOKEN_USING_AUTHORIZATION_CODE = "Get access token using authorization code";
  @SerializedName(SERIALIZED_NAME_GET_ACCESS_TOKEN_USING_AUTHORIZATION_CODE)
  private AccessToken getAccessTokenUsingAuthorizationCode;

  public static final String SERIALIZED_NAME_GET_ACCESS_TOKEN_USING_DEVICE_CODE_AND_O_T_P = "Get access token using device code and OTP";
  @SerializedName(SERIALIZED_NAME_GET_ACCESS_TOKEN_USING_DEVICE_CODE_AND_O_T_P)
  private DeviceAccessToken getAccessTokenUsingDeviceCodeAndOTP;

  public static final String SERIALIZED_NAME_GET_ACCESS_TOKEN_USING_REFRESH_TOKEN = "Get access token using refresh token";
  @SerializedName(SERIALIZED_NAME_GET_ACCESS_TOKEN_USING_REFRESH_TOKEN)
  private RefreshToken getAccessTokenUsingRefreshToken;

  public GetaccesstokenIdRequest() {
  }

  public GetaccesstokenIdRequest getAccessTokenUsingAuthorizationCode(AccessToken getAccessTokenUsingAuthorizationCode) {
    this.getAccessTokenUsingAuthorizationCode = getAccessTokenUsingAuthorizationCode;
    return this;
  }

  /**
   * Get getAccessTokenUsingAuthorizationCode
   * @return getAccessTokenUsingAuthorizationCode
   */
  @javax.annotation.Nullable
  public AccessToken getGetAccessTokenUsingAuthorizationCode() {
    return getAccessTokenUsingAuthorizationCode;
  }

  public void setGetAccessTokenUsingAuthorizationCode(AccessToken getAccessTokenUsingAuthorizationCode) {
    this.getAccessTokenUsingAuthorizationCode = getAccessTokenUsingAuthorizationCode;
  }


  public GetaccesstokenIdRequest getAccessTokenUsingDeviceCodeAndOTP(DeviceAccessToken getAccessTokenUsingDeviceCodeAndOTP) {
    this.getAccessTokenUsingDeviceCodeAndOTP = getAccessTokenUsingDeviceCodeAndOTP;
    return this;
  }

  /**
   * Get getAccessTokenUsingDeviceCodeAndOTP
   * @return getAccessTokenUsingDeviceCodeAndOTP
   */
  @javax.annotation.Nullable
  public DeviceAccessToken getGetAccessTokenUsingDeviceCodeAndOTP() {
    return getAccessTokenUsingDeviceCodeAndOTP;
  }

  public void setGetAccessTokenUsingDeviceCodeAndOTP(DeviceAccessToken getAccessTokenUsingDeviceCodeAndOTP) {
    this.getAccessTokenUsingDeviceCodeAndOTP = getAccessTokenUsingDeviceCodeAndOTP;
  }


  public GetaccesstokenIdRequest getAccessTokenUsingRefreshToken(RefreshToken getAccessTokenUsingRefreshToken) {
    this.getAccessTokenUsingRefreshToken = getAccessTokenUsingRefreshToken;
    return this;
  }

  /**
   * Get getAccessTokenUsingRefreshToken
   * @return getAccessTokenUsingRefreshToken
   */
  @javax.annotation.Nullable
  public RefreshToken getGetAccessTokenUsingRefreshToken() {
    return getAccessTokenUsingRefreshToken;
  }

  public void setGetAccessTokenUsingRefreshToken(RefreshToken getAccessTokenUsingRefreshToken) {
    this.getAccessTokenUsingRefreshToken = getAccessTokenUsingRefreshToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetaccesstokenIdRequest getaccesstokenIdRequest = (GetaccesstokenIdRequest) o;
    return Objects.equals(this.getAccessTokenUsingAuthorizationCode, getaccesstokenIdRequest.getAccessTokenUsingAuthorizationCode) &&
        Objects.equals(this.getAccessTokenUsingDeviceCodeAndOTP, getaccesstokenIdRequest.getAccessTokenUsingDeviceCodeAndOTP) &&
        Objects.equals(this.getAccessTokenUsingRefreshToken, getaccesstokenIdRequest.getAccessTokenUsingRefreshToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(getAccessTokenUsingAuthorizationCode, getAccessTokenUsingDeviceCodeAndOTP, getAccessTokenUsingRefreshToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetaccesstokenIdRequest {\n");
    sb.append("    getAccessTokenUsingAuthorizationCode: ").append(toIndentedString(getAccessTokenUsingAuthorizationCode)).append("\n");
    sb.append("    getAccessTokenUsingDeviceCodeAndOTP: ").append(toIndentedString(getAccessTokenUsingDeviceCodeAndOTP)).append("\n");
    sb.append("    getAccessTokenUsingRefreshToken: ").append(toIndentedString(getAccessTokenUsingRefreshToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Get access token using authorization code");
    openapiFields.add("Get access token using device code and OTP");
    openapiFields.add("Get access token using refresh token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetaccesstokenIdRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetaccesstokenIdRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetaccesstokenIdRequest is not found in the empty JSON string", GetaccesstokenIdRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetaccesstokenIdRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetaccesstokenIdRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Get access token using authorization code`
      if (jsonObj.get("Get access token using authorization code") != null && !jsonObj.get("Get access token using authorization code").isJsonNull()) {
        AccessToken.validateJsonElement(jsonObj.get("Get access token using authorization code"));
      }
      // validate the optional field `Get access token using device code and OTP`
      if (jsonObj.get("Get access token using device code and OTP") != null && !jsonObj.get("Get access token using device code and OTP").isJsonNull()) {
        DeviceAccessToken.validateJsonElement(jsonObj.get("Get access token using device code and OTP"));
      }
      // validate the optional field `Get access token using refresh token`
      if (jsonObj.get("Get access token using refresh token") != null && !jsonObj.get("Get access token using refresh token").isJsonNull()) {
        RefreshToken.validateJsonElement(jsonObj.get("Get access token using refresh token"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetaccesstokenIdRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetaccesstokenIdRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetaccesstokenIdRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetaccesstokenIdRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetaccesstokenIdRequest>() {
           @Override
           public void write(JsonWriter out, GetaccesstokenIdRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetaccesstokenIdRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetaccesstokenIdRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetaccesstokenIdRequest
   * @throws IOException if the JSON string is invalid with respect to GetaccesstokenIdRequest
   */
  public static GetaccesstokenIdRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetaccesstokenIdRequest.class);
  }

  /**
   * Convert an instance of GetaccesstokenIdRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

