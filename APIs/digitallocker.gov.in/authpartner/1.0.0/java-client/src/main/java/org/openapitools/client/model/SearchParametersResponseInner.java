/*
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchParametersResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:03.399628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchParametersResponseInner {
  public static final String SERIALIZED_NAME_EXAMPLE = "example";
  @SerializedName(SERIALIZED_NAME_EXAMPLE)
  private String example;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_PARAMNAME = "paramname";
  @SerializedName(SERIALIZED_NAME_PARAMNAME)
  private String paramname;

  public static final String SERIALIZED_NAME_VALUELIST = "valuelist";
  @SerializedName(SERIALIZED_NAME_VALUELIST)
  private Object valuelist = null;

  public SearchParametersResponseInner() {
  }

  public SearchParametersResponseInner example(String example) {
    this.example = example;
    return this;
  }

  /**
   * Get example
   * @return example
   */
  @javax.annotation.Nonnull
  public String getExample() {
    return example;
  }

  public void setExample(String example) {
    this.example = example;
  }


  public SearchParametersResponseInner label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nonnull
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public SearchParametersResponseInner paramname(String paramname) {
    this.paramname = paramname;
    return this;
  }

  /**
   * Get paramname
   * @return paramname
   */
  @javax.annotation.Nonnull
  public String getParamname() {
    return paramname;
  }

  public void setParamname(String paramname) {
    this.paramname = paramname;
  }


  public SearchParametersResponseInner valuelist(Object valuelist) {
    this.valuelist = valuelist;
    return this;
  }

  /**
   * Get valuelist
   * @return valuelist
   */
  @javax.annotation.Nullable
  public Object getValuelist() {
    return valuelist;
  }

  public void setValuelist(Object valuelist) {
    this.valuelist = valuelist;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchParametersResponseInner searchParametersResponseInner = (SearchParametersResponseInner) o;
    return Objects.equals(this.example, searchParametersResponseInner.example) &&
        Objects.equals(this.label, searchParametersResponseInner.label) &&
        Objects.equals(this.paramname, searchParametersResponseInner.paramname) &&
        Objects.equals(this.valuelist, searchParametersResponseInner.valuelist);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(example, label, paramname, valuelist);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchParametersResponseInner {\n");
    sb.append("    example: ").append(toIndentedString(example)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    paramname: ").append(toIndentedString(paramname)).append("\n");
    sb.append("    valuelist: ").append(toIndentedString(valuelist)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("example");
    openapiFields.add("label");
    openapiFields.add("paramname");
    openapiFields.add("valuelist");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("example");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("paramname");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchParametersResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchParametersResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchParametersResponseInner is not found in the empty JSON string", SearchParametersResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchParametersResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchParametersResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchParametersResponseInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("example").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `example` to be a primitive type in the JSON string but got `%s`", jsonObj.get("example").toString()));
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("paramname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paramname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paramname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchParametersResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchParametersResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchParametersResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchParametersResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchParametersResponseInner>() {
           @Override
           public void write(JsonWriter out, SearchParametersResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchParametersResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchParametersResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchParametersResponseInner
   * @throws IOException if the JSON string is invalid with respect to SearchParametersResponseInner
   */
  public static SearchParametersResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchParametersResponseInner.class);
  }

  /**
   * Convert an instance of SearchParametersResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

