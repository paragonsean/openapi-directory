/*
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccessResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:03.399628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccessResponse {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "access_token";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;

  public static final String SERIALIZED_NAME_DIGILOCKER_ID = "digilocker_id";
  @SerializedName(SERIALIZED_NAME_DIGILOCKER_ID)
  private String digilockerId;

  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private Integer dob;

  /**
   * This indicates whether eAadhaar data is available for this account. Possible values are Y and N.
   */
  @JsonAdapter(EaadharEnum.Adapter.class)
  public enum EaadharEnum {
    Y("Y"),
    
    N("N");

    private String value;

    EaadharEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EaadharEnum fromValue(String value) {
      for (EaadharEnum b : EaadharEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EaadharEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EaadharEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EaadharEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EaadharEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EaadharEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EAADHAR = "eaadhar";
  @SerializedName(SERIALIZED_NAME_EAADHAR)
  private EaadharEnum eaadhar;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expires_in";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private Long expiresIn;

  /**
   * This is gender of the user as registered with DigiLocker. The possible values are M, F, T for male, female and transgender respectively.
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    M("M"),
    
    F("F"),
    
    T("T");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REFERENCE_KEY = "reference_key";
  @SerializedName(SERIALIZED_NAME_REFERENCE_KEY)
  private String referenceKey;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN = "refresh_token";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN)
  private String refreshToken;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_TOKEN_TYPE = "token_type";
  @SerializedName(SERIALIZED_NAME_TOKEN_TYPE)
  private String tokenType;

  public AccessResponse() {
  }

  public AccessResponse accessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * The access token that can be used to call the DigiLocker APIs.
   * @return accessToken
   */
  @javax.annotation.Nonnull
  public String getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }


  public AccessResponse digilockerId(String digilockerId) {
    this.digilockerId = digilockerId;
    return this;
  }

  /**
   * A unique 36 character DigiLocker Id of the user account.
   * @return digilockerId
   */
  @javax.annotation.Nonnull
  public String getDigilockerId() {
    return digilockerId;
  }

  public void setDigilockerId(String digilockerId) {
    this.digilockerId = digilockerId;
  }


  public AccessResponse dob(Integer dob) {
    this.dob = dob;
    return this;
  }

  /**
   * This is date of birth of the user as registered with DigiLocker in DDMMYYYY format.
   * @return dob
   */
  @javax.annotation.Nonnull
  public Integer getDob() {
    return dob;
  }

  public void setDob(Integer dob) {
    this.dob = dob;
  }


  public AccessResponse eaadhar(EaadharEnum eaadhar) {
    this.eaadhar = eaadhar;
    return this;
  }

  /**
   * This indicates whether eAadhaar data is available for this account. Possible values are Y and N.
   * @return eaadhar
   */
  @javax.annotation.Nonnull
  public EaadharEnum getEaadhar() {
    return eaadhar;
  }

  public void setEaadhar(EaadharEnum eaadhar) {
    this.eaadhar = eaadhar;
  }


  public AccessResponse expiresIn(Long expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * The duration in seconds for which the access token is valid
   * @return expiresIn
   */
  @javax.annotation.Nonnull
  public Long getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(Long expiresIn) {
    this.expiresIn = expiresIn;
  }


  public AccessResponse gender(GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * This is gender of the user as registered with DigiLocker. The possible values are M, F, T for male, female and transgender respectively.
   * @return gender
   */
  @javax.annotation.Nonnull
  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }


  public AccessResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the user as registered with DigiLocker.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AccessResponse referenceKey(String referenceKey) {
    this.referenceKey = referenceKey;
    return this;
  }

  /**
   * A unique reference of the user account.
   * @return referenceKey
   */
  @javax.annotation.Nonnull
  public String getReferenceKey() {
    return referenceKey;
  }

  public void setReferenceKey(String referenceKey) {
    this.referenceKey = referenceKey;
  }


  public AccessResponse refreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

  /**
   * The refresh token used to refresh the above access token when it expires. Please refer to Refresh Access Token API for more details.
   * @return refreshToken
   */
  @javax.annotation.Nonnull
  public String getRefreshToken() {
    return refreshToken;
  }

  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }


  public AccessResponse scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Scope of the token.
   * @return scope
   */
  @javax.annotation.Nonnull
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public AccessResponse tokenType(String tokenType) {
    this.tokenType = tokenType;
    return this;
  }

  /**
   * The type of token which will always be Bearer.
   * @return tokenType
   */
  @javax.annotation.Nonnull
  public String getTokenType() {
    return tokenType;
  }

  public void setTokenType(String tokenType) {
    this.tokenType = tokenType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessResponse accessResponse = (AccessResponse) o;
    return Objects.equals(this.accessToken, accessResponse.accessToken) &&
        Objects.equals(this.digilockerId, accessResponse.digilockerId) &&
        Objects.equals(this.dob, accessResponse.dob) &&
        Objects.equals(this.eaadhar, accessResponse.eaadhar) &&
        Objects.equals(this.expiresIn, accessResponse.expiresIn) &&
        Objects.equals(this.gender, accessResponse.gender) &&
        Objects.equals(this.name, accessResponse.name) &&
        Objects.equals(this.referenceKey, accessResponse.referenceKey) &&
        Objects.equals(this.refreshToken, accessResponse.refreshToken) &&
        Objects.equals(this.scope, accessResponse.scope) &&
        Objects.equals(this.tokenType, accessResponse.tokenType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, digilockerId, dob, eaadhar, expiresIn, gender, name, referenceKey, refreshToken, scope, tokenType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessResponse {\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    digilockerId: ").append(toIndentedString(digilockerId)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    eaadhar: ").append(toIndentedString(eaadhar)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    referenceKey: ").append(toIndentedString(referenceKey)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    tokenType: ").append(toIndentedString(tokenType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_token");
    openapiFields.add("digilocker_id");
    openapiFields.add("dob");
    openapiFields.add("eaadhar");
    openapiFields.add("expires_in");
    openapiFields.add("gender");
    openapiFields.add("name");
    openapiFields.add("reference_key");
    openapiFields.add("refresh_token");
    openapiFields.add("scope");
    openapiFields.add("token_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access_token");
    openapiRequiredFields.add("digilocker_id");
    openapiRequiredFields.add("dob");
    openapiRequiredFields.add("eaadhar");
    openapiRequiredFields.add("expires_in");
    openapiRequiredFields.add("gender");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("reference_key");
    openapiRequiredFields.add("refresh_token");
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("token_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccessResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessResponse is not found in the empty JSON string", AccessResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccessResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("access_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token").toString()));
      }
      if (!jsonObj.get("digilocker_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digilocker_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digilocker_id").toString()));
      }
      if (!jsonObj.get("eaadhar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eaadhar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eaadhar").toString()));
      }
      // validate the required field `eaadhar`
      EaadharEnum.validateJsonElement(jsonObj.get("eaadhar"));
      if (!jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      // validate the required field `gender`
      GenderEnum.validateJsonElement(jsonObj.get("gender"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("reference_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_key").toString()));
      }
      if (!jsonObj.get("refresh_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refresh_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refresh_token").toString()));
      }
      if (!jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (!jsonObj.get("token_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessResponse>() {
           @Override
           public void write(JsonWriter out, AccessResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccessResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccessResponse
   * @throws IOException if the JSON string is invalid with respect to AccessResponse
   */
  public static AccessResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessResponse.class);
  }

  /**
   * Convert an instance of AccessResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

