/*
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetStatisticsResponseYearwiseAuthenticDocumentsDetails;
import org.openapitools.client.model.GetStatisticsResponseYearwiseAuthenticDocumentsDetails1;
import org.openapitools.client.model.GetStatisticsResponseYearwiseAuthenticDocumentsDetails2;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List of cumulative year-wise counts of authentic documents in DigiLocker.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:03.399628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetStatisticsResponseYearwiseAuthenticDocuments {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private GetStatisticsResponseYearwiseAuthenticDocumentsDetails details;

  public static final String SERIALIZED_NAME_DETAILS1 = "details1";
  @SerializedName(SERIALIZED_NAME_DETAILS1)
  private GetStatisticsResponseYearwiseAuthenticDocumentsDetails1 details1;

  public static final String SERIALIZED_NAME_DETAILS2 = "details2";
  @SerializedName(SERIALIZED_NAME_DETAILS2)
  private GetStatisticsResponseYearwiseAuthenticDocumentsDetails2 details2;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public GetStatisticsResponseYearwiseAuthenticDocuments() {
  }

  public GetStatisticsResponseYearwiseAuthenticDocuments count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Count of cumulative user authentic documents in   the given year.
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public GetStatisticsResponseYearwiseAuthenticDocuments details(GetStatisticsResponseYearwiseAuthenticDocumentsDetails details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public GetStatisticsResponseYearwiseAuthenticDocumentsDetails getDetails() {
    return details;
  }

  public void setDetails(GetStatisticsResponseYearwiseAuthenticDocumentsDetails details) {
    this.details = details;
  }


  public GetStatisticsResponseYearwiseAuthenticDocuments details1(GetStatisticsResponseYearwiseAuthenticDocumentsDetails1 details1) {
    this.details1 = details1;
    return this;
  }

  /**
   * Get details1
   * @return details1
   */
  @javax.annotation.Nullable
  public GetStatisticsResponseYearwiseAuthenticDocumentsDetails1 getDetails1() {
    return details1;
  }

  public void setDetails1(GetStatisticsResponseYearwiseAuthenticDocumentsDetails1 details1) {
    this.details1 = details1;
  }


  public GetStatisticsResponseYearwiseAuthenticDocuments details2(GetStatisticsResponseYearwiseAuthenticDocumentsDetails2 details2) {
    this.details2 = details2;
    return this;
  }

  /**
   * Get details2
   * @return details2
   */
  @javax.annotation.Nullable
  public GetStatisticsResponseYearwiseAuthenticDocumentsDetails2 getDetails2() {
    return details2;
  }

  public void setDetails2(GetStatisticsResponseYearwiseAuthenticDocumentsDetails2 details2) {
    this.details2 = details2;
  }


  public GetStatisticsResponseYearwiseAuthenticDocuments id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Unique id of the list item.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GetStatisticsResponseYearwiseAuthenticDocuments year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Year in YYYY format.
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetStatisticsResponseYearwiseAuthenticDocuments getStatisticsResponseYearwiseAuthenticDocuments = (GetStatisticsResponseYearwiseAuthenticDocuments) o;
    return Objects.equals(this.count, getStatisticsResponseYearwiseAuthenticDocuments.count) &&
        Objects.equals(this.details, getStatisticsResponseYearwiseAuthenticDocuments.details) &&
        Objects.equals(this.details1, getStatisticsResponseYearwiseAuthenticDocuments.details1) &&
        Objects.equals(this.details2, getStatisticsResponseYearwiseAuthenticDocuments.details2) &&
        Objects.equals(this.id, getStatisticsResponseYearwiseAuthenticDocuments.id) &&
        Objects.equals(this.year, getStatisticsResponseYearwiseAuthenticDocuments.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, details, details1, details2, id, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetStatisticsResponseYearwiseAuthenticDocuments {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    details1: ").append(toIndentedString(details1)).append("\n");
    sb.append("    details2: ").append(toIndentedString(details2)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("details");
    openapiFields.add("details1");
    openapiFields.add("details2");
    openapiFields.add("id");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetStatisticsResponseYearwiseAuthenticDocuments
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetStatisticsResponseYearwiseAuthenticDocuments.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetStatisticsResponseYearwiseAuthenticDocuments is not found in the empty JSON string", GetStatisticsResponseYearwiseAuthenticDocuments.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetStatisticsResponseYearwiseAuthenticDocuments.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetStatisticsResponseYearwiseAuthenticDocuments` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        GetStatisticsResponseYearwiseAuthenticDocumentsDetails.validateJsonElement(jsonObj.get("details"));
      }
      // validate the optional field `details1`
      if (jsonObj.get("details1") != null && !jsonObj.get("details1").isJsonNull()) {
        GetStatisticsResponseYearwiseAuthenticDocumentsDetails1.validateJsonElement(jsonObj.get("details1"));
      }
      // validate the optional field `details2`
      if (jsonObj.get("details2") != null && !jsonObj.get("details2").isJsonNull()) {
        GetStatisticsResponseYearwiseAuthenticDocumentsDetails2.validateJsonElement(jsonObj.get("details2"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetStatisticsResponseYearwiseAuthenticDocuments.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetStatisticsResponseYearwiseAuthenticDocuments' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetStatisticsResponseYearwiseAuthenticDocuments> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetStatisticsResponseYearwiseAuthenticDocuments.class));

       return (TypeAdapter<T>) new TypeAdapter<GetStatisticsResponseYearwiseAuthenticDocuments>() {
           @Override
           public void write(JsonWriter out, GetStatisticsResponseYearwiseAuthenticDocuments value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetStatisticsResponseYearwiseAuthenticDocuments read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetStatisticsResponseYearwiseAuthenticDocuments given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetStatisticsResponseYearwiseAuthenticDocuments
   * @throws IOException if the JSON string is invalid with respect to GetStatisticsResponseYearwiseAuthenticDocuments
   */
  public static GetStatisticsResponseYearwiseAuthenticDocuments fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetStatisticsResponseYearwiseAuthenticDocuments.class);
  }

  /**
   * Convert an instance of GetStatisticsResponseYearwiseAuthenticDocuments to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

