/*
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EaadharXamlSchemaKycResSignature;
import org.openapitools.client.model.EaadharXamlSchemaKycResUidData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EaadharXamlSchemaKycRes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:03.399628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EaadharXamlSchemaKycRes {
  public static final String SERIALIZED_NAME_RAR = "Rar";
  @SerializedName(SERIALIZED_NAME_RAR)
  private String rar;

  public static final String SERIALIZED_NAME_SIGNATURE = "Signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private EaadharXamlSchemaKycResSignature signature;

  public static final String SERIALIZED_NAME_UID_DATA = "UidData";
  @SerializedName(SERIALIZED_NAME_UID_DATA)
  private EaadharXamlSchemaKycResUidData uidData;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_RET = "ret";
  @SerializedName(SERIALIZED_NAME_RET)
  private String ret;

  public static final String SERIALIZED_NAME_TS = "ts";
  @SerializedName(SERIALIZED_NAME_TS)
  private String ts;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private String ttl;

  public static final String SERIALIZED_NAME_TXN = "txn";
  @SerializedName(SERIALIZED_NAME_TXN)
  private String txn;

  public EaadharXamlSchemaKycRes() {
  }

  public EaadharXamlSchemaKycRes rar(String rar) {
    this.rar = rar;
    return this;
  }

  /**
   * Get rar
   * @return rar
   */
  @javax.annotation.Nonnull
  public String getRar() {
    return rar;
  }

  public void setRar(String rar) {
    this.rar = rar;
  }


  public EaadharXamlSchemaKycRes signature(EaadharXamlSchemaKycResSignature signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Get signature
   * @return signature
   */
  @javax.annotation.Nonnull
  public EaadharXamlSchemaKycResSignature getSignature() {
    return signature;
  }

  public void setSignature(EaadharXamlSchemaKycResSignature signature) {
    this.signature = signature;
  }


  public EaadharXamlSchemaKycRes uidData(EaadharXamlSchemaKycResUidData uidData) {
    this.uidData = uidData;
    return this;
  }

  /**
   * Get uidData
   * @return uidData
   */
  @javax.annotation.Nonnull
  public EaadharXamlSchemaKycResUidData getUidData() {
    return uidData;
  }

  public void setUidData(EaadharXamlSchemaKycResUidData uidData) {
    this.uidData = uidData;
  }


  public EaadharXamlSchemaKycRes code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public EaadharXamlSchemaKycRes ret(String ret) {
    this.ret = ret;
    return this;
  }

  /**
   * Get ret
   * @return ret
   */
  @javax.annotation.Nonnull
  public String getRet() {
    return ret;
  }

  public void setRet(String ret) {
    this.ret = ret;
  }


  public EaadharXamlSchemaKycRes ts(String ts) {
    this.ts = ts;
    return this;
  }

  /**
   * Get ts
   * @return ts
   */
  @javax.annotation.Nonnull
  public String getTs() {
    return ts;
  }

  public void setTs(String ts) {
    this.ts = ts;
  }


  public EaadharXamlSchemaKycRes ttl(String ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Get ttl
   * @return ttl
   */
  @javax.annotation.Nonnull
  public String getTtl() {
    return ttl;
  }

  public void setTtl(String ttl) {
    this.ttl = ttl;
  }


  public EaadharXamlSchemaKycRes txn(String txn) {
    this.txn = txn;
    return this;
  }

  /**
   * Get txn
   * @return txn
   */
  @javax.annotation.Nonnull
  public String getTxn() {
    return txn;
  }

  public void setTxn(String txn) {
    this.txn = txn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EaadharXamlSchemaKycRes eaadharXamlSchemaKycRes = (EaadharXamlSchemaKycRes) o;
    return Objects.equals(this.rar, eaadharXamlSchemaKycRes.rar) &&
        Objects.equals(this.signature, eaadharXamlSchemaKycRes.signature) &&
        Objects.equals(this.uidData, eaadharXamlSchemaKycRes.uidData) &&
        Objects.equals(this.code, eaadharXamlSchemaKycRes.code) &&
        Objects.equals(this.ret, eaadharXamlSchemaKycRes.ret) &&
        Objects.equals(this.ts, eaadharXamlSchemaKycRes.ts) &&
        Objects.equals(this.ttl, eaadharXamlSchemaKycRes.ttl) &&
        Objects.equals(this.txn, eaadharXamlSchemaKycRes.txn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rar, signature, uidData, code, ret, ts, ttl, txn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EaadharXamlSchemaKycRes {\n");
    sb.append("    rar: ").append(toIndentedString(rar)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    uidData: ").append(toIndentedString(uidData)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    ret: ").append(toIndentedString(ret)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    txn: ").append(toIndentedString(txn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Rar");
    openapiFields.add("Signature");
    openapiFields.add("UidData");
    openapiFields.add("code");
    openapiFields.add("ret");
    openapiFields.add("ts");
    openapiFields.add("ttl");
    openapiFields.add("txn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Rar");
    openapiRequiredFields.add("Signature");
    openapiRequiredFields.add("UidData");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("ret");
    openapiRequiredFields.add("ts");
    openapiRequiredFields.add("ttl");
    openapiRequiredFields.add("txn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EaadharXamlSchemaKycRes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EaadharXamlSchemaKycRes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EaadharXamlSchemaKycRes is not found in the empty JSON string", EaadharXamlSchemaKycRes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EaadharXamlSchemaKycRes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EaadharXamlSchemaKycRes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EaadharXamlSchemaKycRes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Rar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Rar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Rar").toString()));
      }
      // validate the required field `Signature`
      EaadharXamlSchemaKycResSignature.validateJsonElement(jsonObj.get("Signature"));
      // validate the required field `UidData`
      EaadharXamlSchemaKycResUidData.validateJsonElement(jsonObj.get("UidData"));
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("ret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ret").toString()));
      }
      if (!jsonObj.get("ts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ts").toString()));
      }
      if (!jsonObj.get("ttl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ttl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ttl").toString()));
      }
      if (!jsonObj.get("txn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EaadharXamlSchemaKycRes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EaadharXamlSchemaKycRes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EaadharXamlSchemaKycRes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EaadharXamlSchemaKycRes.class));

       return (TypeAdapter<T>) new TypeAdapter<EaadharXamlSchemaKycRes>() {
           @Override
           public void write(JsonWriter out, EaadharXamlSchemaKycRes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EaadharXamlSchemaKycRes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EaadharXamlSchemaKycRes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EaadharXamlSchemaKycRes
   * @throws IOException if the JSON string is invalid with respect to EaadharXamlSchemaKycRes
   */
  public static EaadharXamlSchemaKycRes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EaadharXamlSchemaKycRes.class);
  }

  /**
   * Convert an instance of EaadharXamlSchemaKycRes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

