/*
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetStatisticsResponseMonthwiseRegistations;
import org.openapitools.client.model.GetStatisticsResponseYearwiseAuthenticDocuments;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetStatisticsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:03.399628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetStatisticsResponse {
  public static final String SERIALIZED_NAME_AUTHENTIC_DOCUMENTS = "authentic_documents";
  @SerializedName(SERIALIZED_NAME_AUTHENTIC_DOCUMENTS)
  private String authenticDocuments;

  public static final String SERIALIZED_NAME_COUNT_AS_ON = "count_as_on";
  @SerializedName(SERIALIZED_NAME_COUNT_AS_ON)
  private String countAsOn;

  public static final String SERIALIZED_NAME_ISSUERS = "issuers";
  @SerializedName(SERIALIZED_NAME_ISSUERS)
  private String issuers;

  public static final String SERIALIZED_NAME_MONTHWISE_REGISTATIONS = "monthwise_registations";
  @SerializedName(SERIALIZED_NAME_MONTHWISE_REGISTATIONS)
  private GetStatisticsResponseMonthwiseRegistations monthwiseRegistations;

  public static final String SERIALIZED_NAME_REQUESTORS = "requestors";
  @SerializedName(SERIALIZED_NAME_REQUESTORS)
  private String requestors;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private String users;

  public static final String SERIALIZED_NAME_YEARWISE_AUTHENTIC_DOCUMENTS = "yearwise_authentic_documents";
  @SerializedName(SERIALIZED_NAME_YEARWISE_AUTHENTIC_DOCUMENTS)
  private GetStatisticsResponseYearwiseAuthenticDocuments yearwiseAuthenticDocuments;

  public GetStatisticsResponse() {
  }

  public GetStatisticsResponse authenticDocuments(String authenticDocuments) {
    this.authenticDocuments = authenticDocuments;
    return this;
  }

  /**
   * Count of authentic documents available through DigiLocker.
   * @return authenticDocuments
   */
  @javax.annotation.Nonnull
  public String getAuthenticDocuments() {
    return authenticDocuments;
  }

  public void setAuthenticDocuments(String authenticDocuments) {
    this.authenticDocuments = authenticDocuments;
  }


  public GetStatisticsResponse countAsOn(String countAsOn) {
    this.countAsOn = countAsOn;
    return this;
  }

  /**
   * The date on which this statistics is generated.
   * @return countAsOn
   */
  @javax.annotation.Nonnull
  public String getCountAsOn() {
    return countAsOn;
  }

  public void setCountAsOn(String countAsOn) {
    this.countAsOn = countAsOn;
  }


  public GetStatisticsResponse issuers(String issuers) {
    this.issuers = issuers;
    return this;
  }

  /**
   * Count of issuer organizations registered on DigiLocker.
   * @return issuers
   */
  @javax.annotation.Nonnull
  public String getIssuers() {
    return issuers;
  }

  public void setIssuers(String issuers) {
    this.issuers = issuers;
  }


  public GetStatisticsResponse monthwiseRegistations(GetStatisticsResponseMonthwiseRegistations monthwiseRegistations) {
    this.monthwiseRegistations = monthwiseRegistations;
    return this;
  }

  /**
   * Get monthwiseRegistations
   * @return monthwiseRegistations
   */
  @javax.annotation.Nonnull
  public GetStatisticsResponseMonthwiseRegistations getMonthwiseRegistations() {
    return monthwiseRegistations;
  }

  public void setMonthwiseRegistations(GetStatisticsResponseMonthwiseRegistations monthwiseRegistations) {
    this.monthwiseRegistations = monthwiseRegistations;
  }


  public GetStatisticsResponse requestors(String requestors) {
    this.requestors = requestors;
    return this;
  }

  /**
   * Count of requester organizations registered on DigiLocker.
   * @return requestors
   */
  @javax.annotation.Nonnull
  public String getRequestors() {
    return requestors;
  }

  public void setRequestors(String requestors) {
    this.requestors = requestors;
  }


  public GetStatisticsResponse users(String users) {
    this.users = users;
    return this;
  }

  /**
   * Count of registered users on DigiLocker.
   * @return users
   */
  @javax.annotation.Nonnull
  public String getUsers() {
    return users;
  }

  public void setUsers(String users) {
    this.users = users;
  }


  public GetStatisticsResponse yearwiseAuthenticDocuments(GetStatisticsResponseYearwiseAuthenticDocuments yearwiseAuthenticDocuments) {
    this.yearwiseAuthenticDocuments = yearwiseAuthenticDocuments;
    return this;
  }

  /**
   * Get yearwiseAuthenticDocuments
   * @return yearwiseAuthenticDocuments
   */
  @javax.annotation.Nonnull
  public GetStatisticsResponseYearwiseAuthenticDocuments getYearwiseAuthenticDocuments() {
    return yearwiseAuthenticDocuments;
  }

  public void setYearwiseAuthenticDocuments(GetStatisticsResponseYearwiseAuthenticDocuments yearwiseAuthenticDocuments) {
    this.yearwiseAuthenticDocuments = yearwiseAuthenticDocuments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetStatisticsResponse getStatisticsResponse = (GetStatisticsResponse) o;
    return Objects.equals(this.authenticDocuments, getStatisticsResponse.authenticDocuments) &&
        Objects.equals(this.countAsOn, getStatisticsResponse.countAsOn) &&
        Objects.equals(this.issuers, getStatisticsResponse.issuers) &&
        Objects.equals(this.monthwiseRegistations, getStatisticsResponse.monthwiseRegistations) &&
        Objects.equals(this.requestors, getStatisticsResponse.requestors) &&
        Objects.equals(this.users, getStatisticsResponse.users) &&
        Objects.equals(this.yearwiseAuthenticDocuments, getStatisticsResponse.yearwiseAuthenticDocuments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticDocuments, countAsOn, issuers, monthwiseRegistations, requestors, users, yearwiseAuthenticDocuments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetStatisticsResponse {\n");
    sb.append("    authenticDocuments: ").append(toIndentedString(authenticDocuments)).append("\n");
    sb.append("    countAsOn: ").append(toIndentedString(countAsOn)).append("\n");
    sb.append("    issuers: ").append(toIndentedString(issuers)).append("\n");
    sb.append("    monthwiseRegistations: ").append(toIndentedString(monthwiseRegistations)).append("\n");
    sb.append("    requestors: ").append(toIndentedString(requestors)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    yearwiseAuthenticDocuments: ").append(toIndentedString(yearwiseAuthenticDocuments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authentic_documents");
    openapiFields.add("count_as_on");
    openapiFields.add("issuers");
    openapiFields.add("monthwise_registations");
    openapiFields.add("requestors");
    openapiFields.add("users");
    openapiFields.add("yearwise_authentic_documents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authentic_documents");
    openapiRequiredFields.add("count_as_on");
    openapiRequiredFields.add("issuers");
    openapiRequiredFields.add("monthwise_registations");
    openapiRequiredFields.add("requestors");
    openapiRequiredFields.add("users");
    openapiRequiredFields.add("yearwise_authentic_documents");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetStatisticsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetStatisticsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetStatisticsResponse is not found in the empty JSON string", GetStatisticsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetStatisticsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetStatisticsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetStatisticsResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("authentic_documents").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentic_documents` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentic_documents").toString()));
      }
      if (!jsonObj.get("count_as_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `count_as_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("count_as_on").toString()));
      }
      if (!jsonObj.get("issuers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuers").toString()));
      }
      // validate the required field `monthwise_registations`
      GetStatisticsResponseMonthwiseRegistations.validateJsonElement(jsonObj.get("monthwise_registations"));
      if (!jsonObj.get("requestors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestors").toString()));
      }
      if (!jsonObj.get("users").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `users` to be a primitive type in the JSON string but got `%s`", jsonObj.get("users").toString()));
      }
      // validate the required field `yearwise_authentic_documents`
      GetStatisticsResponseYearwiseAuthenticDocuments.validateJsonElement(jsonObj.get("yearwise_authentic_documents"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetStatisticsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetStatisticsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetStatisticsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetStatisticsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetStatisticsResponse>() {
           @Override
           public void write(JsonWriter out, GetStatisticsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetStatisticsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetStatisticsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetStatisticsResponse
   * @throws IOException if the JSON string is invalid with respect to GetStatisticsResponse
   */
  public static GetStatisticsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetStatisticsResponse.class);
  }

  /**
   * Convert an instance of GetStatisticsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

