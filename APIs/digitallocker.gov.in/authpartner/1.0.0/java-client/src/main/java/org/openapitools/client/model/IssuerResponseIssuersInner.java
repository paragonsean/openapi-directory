/*
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IssuerResponseIssuersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:03.399628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IssuerResponseIssuersInner {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private String categories;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ISSUERID = "issuerid";
  @SerializedName(SERIALIZED_NAME_ISSUERID)
  private String issuerid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGID = "orgid";
  @SerializedName(SERIALIZED_NAME_ORGID)
  private String orgid;

  public IssuerResponseIssuersInner() {
  }

  public IssuerResponseIssuersInner categories(String categories) {
    this.categories = categories;
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nonnull
  public String getCategories() {
    return categories;
  }

  public void setCategories(String categories) {
    this.categories = categories;
  }


  public IssuerResponseIssuersInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public IssuerResponseIssuersInner issuerid(String issuerid) {
    this.issuerid = issuerid;
    return this;
  }

  /**
   * Get issuerid
   * @return issuerid
   */
  @javax.annotation.Nonnull
  public String getIssuerid() {
    return issuerid;
  }

  public void setIssuerid(String issuerid) {
    this.issuerid = issuerid;
  }


  public IssuerResponseIssuersInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public IssuerResponseIssuersInner orgid(String orgid) {
    this.orgid = orgid;
    return this;
  }

  /**
   * Get orgid
   * @return orgid
   */
  @javax.annotation.Nonnull
  public String getOrgid() {
    return orgid;
  }

  public void setOrgid(String orgid) {
    this.orgid = orgid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssuerResponseIssuersInner issuerResponseIssuersInner = (IssuerResponseIssuersInner) o;
    return Objects.equals(this.categories, issuerResponseIssuersInner.categories) &&
        Objects.equals(this.description, issuerResponseIssuersInner.description) &&
        Objects.equals(this.issuerid, issuerResponseIssuersInner.issuerid) &&
        Objects.equals(this.name, issuerResponseIssuersInner.name) &&
        Objects.equals(this.orgid, issuerResponseIssuersInner.orgid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, description, issuerid, name, orgid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssuerResponseIssuersInner {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    issuerid: ").append(toIndentedString(issuerid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgid: ").append(toIndentedString(orgid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("description");
    openapiFields.add("issuerid");
    openapiFields.add("name");
    openapiFields.add("orgid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("issuerid");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("orgid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssuerResponseIssuersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssuerResponseIssuersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssuerResponseIssuersInner is not found in the empty JSON string", IssuerResponseIssuersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssuerResponseIssuersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssuerResponseIssuersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IssuerResponseIssuersInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("categories").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("issuerid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerid").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("orgid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssuerResponseIssuersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssuerResponseIssuersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssuerResponseIssuersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssuerResponseIssuersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<IssuerResponseIssuersInner>() {
           @Override
           public void write(JsonWriter out, IssuerResponseIssuersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssuerResponseIssuersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssuerResponseIssuersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssuerResponseIssuersInner
   * @throws IOException if the JSON string is invalid with respect to IssuerResponseIssuersInner
   */
  public static IssuerResponseIssuersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssuerResponseIssuersInner.class);
  }

  /**
   * Convert an instance of IssuerResponseIssuersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

