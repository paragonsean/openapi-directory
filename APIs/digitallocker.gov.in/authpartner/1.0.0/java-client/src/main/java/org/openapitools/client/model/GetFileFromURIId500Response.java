/*
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Response3;
import org.openapitools.client.model.Response4;
import org.openapitools.client.model.Response5;
import org.openapitools.client.model.Response6;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:03.399628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetFileFromURIId500Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetFileFromURIId500Response.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetFileFromURIId500Response.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetFileFromURIId500Response' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Response3> adapterResponse3 = gson.getDelegateAdapter(this, TypeToken.get(Response3.class));
            final TypeAdapter<Response4> adapterResponse4 = gson.getDelegateAdapter(this, TypeToken.get(Response4.class));
            final TypeAdapter<Response5> adapterResponse5 = gson.getDelegateAdapter(this, TypeToken.get(Response5.class));
            final TypeAdapter<Response6> adapterResponse6 = gson.getDelegateAdapter(this, TypeToken.get(Response6.class));

            return (TypeAdapter<T>) new TypeAdapter<GetFileFromURIId500Response>() {
                @Override
                public void write(JsonWriter out, GetFileFromURIId500Response value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `Response3`
                    if (value.getActualInstance() instanceof Response3) {
                        JsonElement element = adapterResponse3.toJsonTree((Response3)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Response4`
                    if (value.getActualInstance() instanceof Response4) {
                        JsonElement element = adapterResponse4.toJsonTree((Response4)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Response5`
                    if (value.getActualInstance() instanceof Response5) {
                        JsonElement element = adapterResponse5.toJsonTree((Response5)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Response6`
                    if (value.getActualInstance() instanceof Response6) {
                        JsonElement element = adapterResponse6.toJsonTree((Response6)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: Response3, Response4, Response5, Response6");
                }

                @Override
                public GetFileFromURIId500Response read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize Response3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Response3.validateJsonElement(jsonElement);
                        actualAdapter = adapterResponse3;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Response3'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Response3 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Response3'", e);
                    }
                    // deserialize Response4
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Response4.validateJsonElement(jsonElement);
                        actualAdapter = adapterResponse4;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Response4'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Response4 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Response4'", e);
                    }
                    // deserialize Response5
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Response5.validateJsonElement(jsonElement);
                        actualAdapter = adapterResponse5;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Response5'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Response5 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Response5'", e);
                    }
                    // deserialize Response6
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Response6.validateJsonElement(jsonElement);
                        actualAdapter = adapterResponse6;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Response6'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Response6 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Response6'", e);
                    }

                    if (match == 1) {
                        GetFileFromURIId500Response ret = new GetFileFromURIId500Response();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for GetFileFromURIId500Response: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public GetFileFromURIId500Response() {
        super("oneOf", Boolean.FALSE);
    }

    public GetFileFromURIId500Response(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Response3", Response3.class);
        schemas.put("Response4", Response4.class);
        schemas.put("Response5", Response5.class);
        schemas.put("Response6", Response6.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return GetFileFromURIId500Response.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * Response3, Response4, Response5, Response6
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Response3) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Response4) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Response5) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Response6) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Response3, Response4, Response5, Response6");
    }

    /**
     * Get the actual instance, which can be the following:
     * Response3, Response4, Response5, Response6
     *
     * @return The actual instance (Response3, Response4, Response5, Response6)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Response3`. If the actual instance is not `Response3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Response3`
     * @throws ClassCastException if the instance is not `Response3`
     */
    public Response3 getResponse3() throws ClassCastException {
        return (Response3)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Response4`. If the actual instance is not `Response4`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Response4`
     * @throws ClassCastException if the instance is not `Response4`
     */
    public Response4 getResponse4() throws ClassCastException {
        return (Response4)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Response5`. If the actual instance is not `Response5`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Response5`
     * @throws ClassCastException if the instance is not `Response5`
     */
    public Response5 getResponse5() throws ClassCastException {
        return (Response5)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Response6`. If the actual instance is not `Response6`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Response6`
     * @throws ClassCastException if the instance is not `Response6`
     */
    public Response6 getResponse6() throws ClassCastException {
        return (Response6)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetFileFromURIId500Response
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Response3
        try {
            Response3.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Response3 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Response4
        try {
            Response4.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Response4 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Response5
        try {
            Response5.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Response5 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Response6
        try {
            Response6.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Response6 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for GetFileFromURIId500Response with oneOf schemas: Response3, Response4, Response5, Response6. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of GetFileFromURIId500Response given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetFileFromURIId500Response
     * @throws IOException if the JSON string is invalid with respect to GetFileFromURIId500Response
     */
    public static GetFileFromURIId500Response fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetFileFromURIId500Response.class);
    }

    /**
     * Convert an instance of GetFileFromURIId500Response to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

