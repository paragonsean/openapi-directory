/*
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessResponse;
import org.openapitools.client.model.GetaccesstokenIdRequest;
import org.openapitools.client.model.Sample;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAuthorizationCodeId
     * @param responseType Provide the grant type requested, either token or code. (required)
     * @param redirectUri The URI to redirect the user after authorization has completed. (required)
     * @param state This is your application specific data that will be passed back to your application through redirect_uri. (required)
     * @param clientId Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param codeChallenge A unique random string called code verifier (code_verifier) is created by the client application for every authorization request. The code_challenge sent as this parameter is the Base64URL (with no padding) encoded SHA256 hash of the code verifier.         Code block:         &#x60;&#x60;&#x60;        string base64_url_encode_without_padding(string arg)        {            string s &#x3D; base64encode(arg); //Regular base64encoder with padding           s &#x3D; s.replace(’&#x3D;’,’’); //Remove any trailing ’&#x3D;’           s &#x3D; s.replace(’+’, ’-’); //Replace ’+’ with ’-’           s &#x3D; s.replace(’/’, ’_’); //Replace ’/’ with ’_’ return s;         }         &#x60;&#x60;&#x60;  (optional)
     * @param codeChallengeMethod Specifies what method was used to encode a code_verifier to generate code_challenge parameter above. This parameter must be used with the code_challenge parameter. The only supported values for this parameter is S256. (optional)
     * @param dlFlow If this parameter is provided its value will always be signup. This parameter indicates that the user does not have a DigiLocker account and will be directed to the signup flow directly. After the account is created, the user will be directed to the authorization flow. If this parameter is not sent, the user will be redirected to the sign in flow. (optional)
     * @param verifiedMobile Verified mobile number of the user. If this parameter is passed, DigiLocker will skip the mobile OTP verification step during sign up. DigiLocker will treat the mobile number passed in this parameter as a verified mobile number by the trusted client application. This parameter will be used only if dl_flow parameter mentioned above is set to signup and will be ignored otherwise. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid status value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorizationCodeIdCall(String responseType, String redirectUri, String state, String clientId, String codeChallenge, String codeChallengeMethod, String dlFlow, Integer verifiedMobile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth2/1/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (responseType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_type", responseType));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (codeChallenge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Code_challenge", codeChallenge));
        }

        if (codeChallengeMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Code_challenge_method", codeChallengeMethod));
        }

        if (dlFlow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dl_flow", dlFlow));
        }

        if (verifiedMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Verified_mobile", verifiedMobile));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauthAuthorizeCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthorizationCodeIdValidateBeforeCall(String responseType, String redirectUri, String state, String clientId, String codeChallenge, String codeChallengeMethod, String dlFlow, Integer verifiedMobile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'responseType' is set
        if (responseType == null) {
            throw new ApiException("Missing the required parameter 'responseType' when calling getAuthorizationCodeId(Async)");
        }

        // verify the required parameter 'redirectUri' is set
        if (redirectUri == null) {
            throw new ApiException("Missing the required parameter 'redirectUri' when calling getAuthorizationCodeId(Async)");
        }

        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling getAuthorizationCodeId(Async)");
        }

        return getAuthorizationCodeIdCall(responseType, redirectUri, state, clientId, codeChallenge, codeChallengeMethod, dlFlow, verifiedMobile, _callback);

    }

    /**
     * Get Authorization Code
     * Call to this API starts authorization flow using OAuth 2.0 protocol. This isn&#39;t an API call—it&#39;s a DigiLocker web page that lets the user sign in to DigiLocker and authorize your application to access user’s data. After the user decides whether or not to authorize your app, they will be redirected to the redirect link provided by your application.
     * @param responseType Provide the grant type requested, either token or code. (required)
     * @param redirectUri The URI to redirect the user after authorization has completed. (required)
     * @param state This is your application specific data that will be passed back to your application through redirect_uri. (required)
     * @param clientId Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param codeChallenge A unique random string called code verifier (code_verifier) is created by the client application for every authorization request. The code_challenge sent as this parameter is the Base64URL (with no padding) encoded SHA256 hash of the code verifier.         Code block:         &#x60;&#x60;&#x60;        string base64_url_encode_without_padding(string arg)        {            string s &#x3D; base64encode(arg); //Regular base64encoder with padding           s &#x3D; s.replace(’&#x3D;’,’’); //Remove any trailing ’&#x3D;’           s &#x3D; s.replace(’+’, ’-’); //Replace ’+’ with ’-’           s &#x3D; s.replace(’/’, ’_’); //Replace ’/’ with ’_’ return s;         }         &#x60;&#x60;&#x60;  (optional)
     * @param codeChallengeMethod Specifies what method was used to encode a code_verifier to generate code_challenge parameter above. This parameter must be used with the code_challenge parameter. The only supported values for this parameter is S256. (optional)
     * @param dlFlow If this parameter is provided its value will always be signup. This parameter indicates that the user does not have a DigiLocker account and will be directed to the signup flow directly. After the account is created, the user will be directed to the authorization flow. If this parameter is not sent, the user will be redirected to the sign in flow. (optional)
     * @param verifiedMobile Verified mobile number of the user. If this parameter is passed, DigiLocker will skip the mobile OTP verification step during sign up. DigiLocker will treat the mobile number passed in this parameter as a verified mobile number by the trusted client application. This parameter will be used only if dl_flow parameter mentioned above is set to signup and will be ignored otherwise. (optional)
     * @return Sample
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid status value </td><td>  -  </td></tr>
     </table>
     */
    public Sample getAuthorizationCodeId(String responseType, String redirectUri, String state, String clientId, String codeChallenge, String codeChallengeMethod, String dlFlow, Integer verifiedMobile) throws ApiException {
        ApiResponse<Sample> localVarResp = getAuthorizationCodeIdWithHttpInfo(responseType, redirectUri, state, clientId, codeChallenge, codeChallengeMethod, dlFlow, verifiedMobile);
        return localVarResp.getData();
    }

    /**
     * Get Authorization Code
     * Call to this API starts authorization flow using OAuth 2.0 protocol. This isn&#39;t an API call—it&#39;s a DigiLocker web page that lets the user sign in to DigiLocker and authorize your application to access user’s data. After the user decides whether or not to authorize your app, they will be redirected to the redirect link provided by your application.
     * @param responseType Provide the grant type requested, either token or code. (required)
     * @param redirectUri The URI to redirect the user after authorization has completed. (required)
     * @param state This is your application specific data that will be passed back to your application through redirect_uri. (required)
     * @param clientId Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param codeChallenge A unique random string called code verifier (code_verifier) is created by the client application for every authorization request. The code_challenge sent as this parameter is the Base64URL (with no padding) encoded SHA256 hash of the code verifier.         Code block:         &#x60;&#x60;&#x60;        string base64_url_encode_without_padding(string arg)        {            string s &#x3D; base64encode(arg); //Regular base64encoder with padding           s &#x3D; s.replace(’&#x3D;’,’’); //Remove any trailing ’&#x3D;’           s &#x3D; s.replace(’+’, ’-’); //Replace ’+’ with ’-’           s &#x3D; s.replace(’/’, ’_’); //Replace ’/’ with ’_’ return s;         }         &#x60;&#x60;&#x60;  (optional)
     * @param codeChallengeMethod Specifies what method was used to encode a code_verifier to generate code_challenge parameter above. This parameter must be used with the code_challenge parameter. The only supported values for this parameter is S256. (optional)
     * @param dlFlow If this parameter is provided its value will always be signup. This parameter indicates that the user does not have a DigiLocker account and will be directed to the signup flow directly. After the account is created, the user will be directed to the authorization flow. If this parameter is not sent, the user will be redirected to the sign in flow. (optional)
     * @param verifiedMobile Verified mobile number of the user. If this parameter is passed, DigiLocker will skip the mobile OTP verification step during sign up. DigiLocker will treat the mobile number passed in this parameter as a verified mobile number by the trusted client application. This parameter will be used only if dl_flow parameter mentioned above is set to signup and will be ignored otherwise. (optional)
     * @return ApiResponse&lt;Sample&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid status value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Sample> getAuthorizationCodeIdWithHttpInfo(String responseType, String redirectUri, String state, String clientId, String codeChallenge, String codeChallengeMethod, String dlFlow, Integer verifiedMobile) throws ApiException {
        okhttp3.Call localVarCall = getAuthorizationCodeIdValidateBeforeCall(responseType, redirectUri, state, clientId, codeChallenge, codeChallengeMethod, dlFlow, verifiedMobile, null);
        Type localVarReturnType = new TypeToken<Sample>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Authorization Code (asynchronously)
     * Call to this API starts authorization flow using OAuth 2.0 protocol. This isn&#39;t an API call—it&#39;s a DigiLocker web page that lets the user sign in to DigiLocker and authorize your application to access user’s data. After the user decides whether or not to authorize your app, they will be redirected to the redirect link provided by your application.
     * @param responseType Provide the grant type requested, either token or code. (required)
     * @param redirectUri The URI to redirect the user after authorization has completed. (required)
     * @param state This is your application specific data that will be passed back to your application through redirect_uri. (required)
     * @param clientId Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param codeChallenge A unique random string called code verifier (code_verifier) is created by the client application for every authorization request. The code_challenge sent as this parameter is the Base64URL (with no padding) encoded SHA256 hash of the code verifier.         Code block:         &#x60;&#x60;&#x60;        string base64_url_encode_without_padding(string arg)        {            string s &#x3D; base64encode(arg); //Regular base64encoder with padding           s &#x3D; s.replace(’&#x3D;’,’’); //Remove any trailing ’&#x3D;’           s &#x3D; s.replace(’+’, ’-’); //Replace ’+’ with ’-’           s &#x3D; s.replace(’/’, ’_’); //Replace ’/’ with ’_’ return s;         }         &#x60;&#x60;&#x60;  (optional)
     * @param codeChallengeMethod Specifies what method was used to encode a code_verifier to generate code_challenge parameter above. This parameter must be used with the code_challenge parameter. The only supported values for this parameter is S256. (optional)
     * @param dlFlow If this parameter is provided its value will always be signup. This parameter indicates that the user does not have a DigiLocker account and will be directed to the signup flow directly. After the account is created, the user will be directed to the authorization flow. If this parameter is not sent, the user will be redirected to the sign in flow. (optional)
     * @param verifiedMobile Verified mobile number of the user. If this parameter is passed, DigiLocker will skip the mobile OTP verification step during sign up. DigiLocker will treat the mobile number passed in this parameter as a verified mobile number by the trusted client application. This parameter will be used only if dl_flow parameter mentioned above is set to signup and will be ignored otherwise. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid status value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorizationCodeIdAsync(String responseType, String redirectUri, String state, String clientId, String codeChallenge, String codeChallengeMethod, String dlFlow, Integer verifiedMobile, final ApiCallback<Sample> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthorizationCodeIdValidateBeforeCall(responseType, redirectUri, state, clientId, codeChallenge, codeChallengeMethod, dlFlow, verifiedMobile, _callback);
        Type localVarReturnType = new TypeToken<Sample>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getaccesstokenId
     * @param getaccesstokenIdRequest Details of documents being created. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the access token is expired or has been revoked by DigiLocker user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getaccesstokenIdCall(GetaccesstokenIdRequest getaccesstokenIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getaccesstokenIdRequest;

        // create path and map variables
        String localVarPath = "/oauth2/1/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getaccesstokenIdValidateBeforeCall(GetaccesstokenIdRequest getaccesstokenIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getaccesstokenIdRequest' is set
        if (getaccesstokenIdRequest == null) {
            throw new ApiException("Missing the required parameter 'getaccesstokenIdRequest' when calling getaccesstokenId(Async)");
        }

        return getaccesstokenIdCall(getaccesstokenIdRequest, _callback);

    }

    /**
     * Get Access Token
     * This endpoint only applies to apps using the authorization code flow. An app calls this endpoint to acquire a bearer token once the user has authorized the app. Calls to /oauth2/1/token need to be authenticated using the app&#39;s key and secret. These can either be passed as application/x-www-form-urlencoded POST parameters (see parameters below) or via HTTP basic authentication. If basic authentication is used, the app key should be provided as the username, and the app secret should be provided as the password.
     * @param getaccesstokenIdRequest Details of documents being created. (required)
     * @return AccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the access token is expired or has been revoked by DigiLocker user. </td><td>  -  </td></tr>
     </table>
     */
    public AccessResponse getaccesstokenId(GetaccesstokenIdRequest getaccesstokenIdRequest) throws ApiException {
        ApiResponse<AccessResponse> localVarResp = getaccesstokenIdWithHttpInfo(getaccesstokenIdRequest);
        return localVarResp.getData();
    }

    /**
     * Get Access Token
     * This endpoint only applies to apps using the authorization code flow. An app calls this endpoint to acquire a bearer token once the user has authorized the app. Calls to /oauth2/1/token need to be authenticated using the app&#39;s key and secret. These can either be passed as application/x-www-form-urlencoded POST parameters (see parameters below) or via HTTP basic authentication. If basic authentication is used, the app key should be provided as the username, and the app secret should be provided as the password.
     * @param getaccesstokenIdRequest Details of documents being created. (required)
     * @return ApiResponse&lt;AccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the access token is expired or has been revoked by DigiLocker user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessResponse> getaccesstokenIdWithHttpInfo(GetaccesstokenIdRequest getaccesstokenIdRequest) throws ApiException {
        okhttp3.Call localVarCall = getaccesstokenIdValidateBeforeCall(getaccesstokenIdRequest, null);
        Type localVarReturnType = new TypeToken<AccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Access Token (asynchronously)
     * This endpoint only applies to apps using the authorization code flow. An app calls this endpoint to acquire a bearer token once the user has authorized the app. Calls to /oauth2/1/token need to be authenticated using the app&#39;s key and secret. These can either be passed as application/x-www-form-urlencoded POST parameters (see parameters below) or via HTTP basic authentication. If basic authentication is used, the app key should be provided as the username, and the app secret should be provided as the password.
     * @param getaccesstokenIdRequest Details of documents being created. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the access token is expired or has been revoked by DigiLocker user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getaccesstokenIdAsync(GetaccesstokenIdRequest getaccesstokenIdRequest, final ApiCallback<AccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getaccesstokenIdValidateBeforeCall(getaccesstokenIdRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
