/*
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DocTypeResponse;
import java.io.File;
import org.openapitools.client.model.GetDeviceCodeId401Response;
import org.openapitools.client.model.GetListOfDocumentsProvidedByAnIssuerId400Response;
import org.openapitools.client.model.GetListOfIssuersId400Response;
import org.openapitools.client.model.GetSearchParametersForADocumentId400Response;
import org.openapitools.client.model.GetStatisticsId400Response;
import org.openapitools.client.model.GetStatisticsResponse;
import org.openapitools.client.model.IssuerResponse;
import org.openapitools.client.model.PushURIToAccountId400Response;
import org.openapitools.client.model.PushURIToAccountId401Response;
import org.openapitools.client.model.PushURIToAccountId404Response;
import org.openapitools.client.model.PushURIToAccountId500Response;
import org.openapitools.client.model.SearchParametersResponseInner;
import java.util.Set;
import org.openapitools.client.model.VerifyAccountId400Response;
import org.openapitools.client.model.VerifyAccountId500Response;
import org.openapitools.client.model.VerifyAccountResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DigiLockerMetaApisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DigiLockerMetaApisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DigiLockerMetaApisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getListOfDocumentsProvidedByAnIssuerId
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param orgid The organization id for the issuer in DigiLocker. This organization id is returned in Get List of Issuers API mentioned earlier. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfDocumentsProvidedByAnIssuerIdCall(String clientid, File hmac, String orgid, String ts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth2/1/pull/doctype";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientid != null) {
            localVarFormParams.put("clientid", clientid);
        }

        if (hmac != null) {
            localVarFormParams.put("hmac", hmac);
        }

        if (orgid != null) {
            localVarFormParams.put("orgid", orgid);
        }

        if (ts != null) {
            localVarFormParams.put("ts", ts);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauthsecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListOfDocumentsProvidedByAnIssuerIdValidateBeforeCall(String clientid, File hmac, String orgid, String ts, final ApiCallback _callback) throws ApiException {
        return getListOfDocumentsProvidedByAnIssuerIdCall(clientid, hmac, orgid, ts, _callback);

    }

    /**
     * Get List of Documents Provided by an Issuer
     * Returns a list of documents/certificates issued by an issuer organization registered with DigiLocker.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param orgid The organization id for the issuer in DigiLocker. This organization id is returned in Get List of Issuers API mentioned earlier. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @return DocTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public DocTypeResponse getListOfDocumentsProvidedByAnIssuerId(String clientid, File hmac, String orgid, String ts) throws ApiException {
        ApiResponse<DocTypeResponse> localVarResp = getListOfDocumentsProvidedByAnIssuerIdWithHttpInfo(clientid, hmac, orgid, ts);
        return localVarResp.getData();
    }

    /**
     * Get List of Documents Provided by an Issuer
     * Returns a list of documents/certificates issued by an issuer organization registered with DigiLocker.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param orgid The organization id for the issuer in DigiLocker. This organization id is returned in Get List of Issuers API mentioned earlier. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @return ApiResponse&lt;DocTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocTypeResponse> getListOfDocumentsProvidedByAnIssuerIdWithHttpInfo(String clientid, File hmac, String orgid, String ts) throws ApiException {
        okhttp3.Call localVarCall = getListOfDocumentsProvidedByAnIssuerIdValidateBeforeCall(clientid, hmac, orgid, ts, null);
        Type localVarReturnType = new TypeToken<DocTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get List of Documents Provided by an Issuer (asynchronously)
     * Returns a list of documents/certificates issued by an issuer organization registered with DigiLocker.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param orgid The organization id for the issuer in DigiLocker. This organization id is returned in Get List of Issuers API mentioned earlier. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfDocumentsProvidedByAnIssuerIdAsync(String clientid, File hmac, String orgid, String ts, final ApiCallback<DocTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListOfDocumentsProvidedByAnIssuerIdValidateBeforeCall(clientid, hmac, orgid, ts, _callback);
        Type localVarReturnType = new TypeToken<DocTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListOfIssuersId
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfIssuersIdCall(String clientid, File hmac, String ts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth2/1/pull/issuers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientid != null) {
            localVarFormParams.put("clientid", clientid);
        }

        if (hmac != null) {
            localVarFormParams.put("hmac", hmac);
        }

        if (ts != null) {
            localVarFormParams.put("ts", ts);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauthsecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListOfIssuersIdValidateBeforeCall(String clientid, File hmac, String ts, final ApiCallback _callback) throws ApiException {
        return getListOfIssuersIdCall(clientid, hmac, ts, _callback);

    }

    /**
     * Get List of Issuers
     * Returns the list of issuers registered with DigiLocker.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @return IssuerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public IssuerResponse getListOfIssuersId(String clientid, File hmac, String ts) throws ApiException {
        ApiResponse<IssuerResponse> localVarResp = getListOfIssuersIdWithHttpInfo(clientid, hmac, ts);
        return localVarResp.getData();
    }

    /**
     * Get List of Issuers
     * Returns the list of issuers registered with DigiLocker.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @return ApiResponse&lt;IssuerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IssuerResponse> getListOfIssuersIdWithHttpInfo(String clientid, File hmac, String ts) throws ApiException {
        okhttp3.Call localVarCall = getListOfIssuersIdValidateBeforeCall(clientid, hmac, ts, null);
        Type localVarReturnType = new TypeToken<IssuerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get List of Issuers (asynchronously)
     * Returns the list of issuers registered with DigiLocker.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListOfIssuersIdAsync(String clientid, File hmac, String ts, final ApiCallback<IssuerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListOfIssuersIdValidateBeforeCall(clientid, hmac, ts, _callback);
        Type localVarReturnType = new TypeToken<IssuerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSearchParametersForADocumentId
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param doctype A 5 character unique document type provided by DigiLocker. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param orgid The organization id for the issuer in DigiLocker. This organization id is returned in Get List of Issuers API mentioned earlier. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchParametersForADocumentIdCall(String clientid, String doctype, File hmac, String orgid, String ts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth2/1/pull/parameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientid != null) {
            localVarFormParams.put("clientid", clientid);
        }

        if (doctype != null) {
            localVarFormParams.put("doctype", doctype);
        }

        if (hmac != null) {
            localVarFormParams.put("hmac", hmac);
        }

        if (orgid != null) {
            localVarFormParams.put("orgid", orgid);
        }

        if (ts != null) {
            localVarFormParams.put("ts", ts);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauthsecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchParametersForADocumentIdValidateBeforeCall(String clientid, String doctype, File hmac, String orgid, String ts, final ApiCallback _callback) throws ApiException {
        return getSearchParametersForADocumentIdCall(clientid, doctype, hmac, orgid, ts, _callback);

    }

    /**
     * Get Search Parameters for a Document
     * Returns a list of parameters required to search a document/certificate of an issuer organization registered with DigiLocker. These parameters are used to pull a document from issuer’s repository using Pull Document API mentioned in subsequent section.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param doctype A 5 character unique document type provided by DigiLocker. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param orgid The organization id for the issuer in DigiLocker. This organization id is returned in Get List of Issuers API mentioned earlier. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @return Set&lt;SearchParametersResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public Set<SearchParametersResponseInner> getSearchParametersForADocumentId(String clientid, String doctype, File hmac, String orgid, String ts) throws ApiException {
        ApiResponse<Set<SearchParametersResponseInner>> localVarResp = getSearchParametersForADocumentIdWithHttpInfo(clientid, doctype, hmac, orgid, ts);
        return localVarResp.getData();
    }

    /**
     * Get Search Parameters for a Document
     * Returns a list of parameters required to search a document/certificate of an issuer organization registered with DigiLocker. These parameters are used to pull a document from issuer’s repository using Pull Document API mentioned in subsequent section.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param doctype A 5 character unique document type provided by DigiLocker. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param orgid The organization id for the issuer in DigiLocker. This organization id is returned in Get List of Issuers API mentioned earlier. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @return ApiResponse&lt;Set&lt;SearchParametersResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<SearchParametersResponseInner>> getSearchParametersForADocumentIdWithHttpInfo(String clientid, String doctype, File hmac, String orgid, String ts) throws ApiException {
        okhttp3.Call localVarCall = getSearchParametersForADocumentIdValidateBeforeCall(clientid, doctype, hmac, orgid, ts, null);
        Type localVarReturnType = new TypeToken<Set<SearchParametersResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Search Parameters for a Document (asynchronously)
     * Returns a list of parameters required to search a document/certificate of an issuer organization registered with DigiLocker. These parameters are used to pull a document from issuer’s repository using Pull Document API mentioned in subsequent section.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param doctype A 5 character unique document type provided by DigiLocker. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param orgid The organization id for the issuer in DigiLocker. This organization id is returned in Get List of Issuers API mentioned earlier. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchParametersForADocumentIdAsync(String clientid, String doctype, File hmac, String orgid, String ts, final ApiCallback<Set<SearchParametersResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchParametersForADocumentIdValidateBeforeCall(clientid, doctype, hmac, orgid, ts, _callback);
        Type localVarReturnType = new TypeToken<Set<SearchParametersResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatisticsId
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatisticsIdCall(String clientid, File hmac, String ts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/1/counts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientid != null) {
            localVarFormParams.put("clientid", clientid);
        }

        if (hmac != null) {
            localVarFormParams.put("hmac", hmac);
        }

        if (ts != null) {
            localVarFormParams.put("ts", ts);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauthsecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatisticsIdValidateBeforeCall(String clientid, File hmac, String ts, final ApiCallback _callback) throws ApiException {
        return getStatisticsIdCall(clientid, hmac, ts, _callback);

    }

    /**
     * Get Statistics
     * Returns DigiLocker statistics such as the count of users, authentic documents, issuers and requesters as on a specific date.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @return GetStatisticsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public GetStatisticsResponse getStatisticsId(String clientid, File hmac, String ts) throws ApiException {
        ApiResponse<GetStatisticsResponse> localVarResp = getStatisticsIdWithHttpInfo(clientid, hmac, ts);
        return localVarResp.getData();
    }

    /**
     * Get Statistics
     * Returns DigiLocker statistics such as the count of users, authentic documents, issuers and requesters as on a specific date.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @return ApiResponse&lt;GetStatisticsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStatisticsResponse> getStatisticsIdWithHttpInfo(String clientid, File hmac, String ts) throws ApiException {
        okhttp3.Call localVarCall = getStatisticsIdValidateBeforeCall(clientid, hmac, ts, null);
        Type localVarReturnType = new TypeToken<GetStatisticsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Statistics (asynchronously)
     * Returns DigiLocker statistics such as the count of users, authentic documents, issuers and requesters as on a specific date.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatisticsIdAsync(String clientid, File hmac, String ts, final ApiCallback<GetStatisticsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatisticsIdValidateBeforeCall(clientid, hmac, ts, _callback);
        Type localVarReturnType = new TypeToken<GetStatisticsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pushURIToAccountId
     * @param action Action that needs to be taken for the Aadhaar number and URI combination. Possible values are A for adding a new URI, U for updating an already added URI details or D for deleting the URI. (optional)
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param digilockerid This is the DigiLocker Id of the user that was acquired using Get User Details API. (optional)
     * @param docid A unique number of the document. This id will be unique within the document type issued by the issuer. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param issuedate The issue date of the document in DDMMYYYY format. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param uri This is the unique identifier of the document. (optional)
     * @param validfrom The date from which the document is valid in DDMMYYYY format. This may be same as the issue date. (optional)
     * @param validto The expiry date of the document in DDMMYYYY format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pushURIToAccountIdCall(String action, String clientid, Integer digilockerid, String docid, File hmac, String issuedate, String ts, String uri, Integer validfrom, String validto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/1/pushuri";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarFormParams.put("action", action);
        }

        if (clientid != null) {
            localVarFormParams.put("clientid", clientid);
        }

        if (digilockerid != null) {
            localVarFormParams.put("digilockerid", digilockerid);
        }

        if (docid != null) {
            localVarFormParams.put("docid", docid);
        }

        if (hmac != null) {
            localVarFormParams.put("hmac", hmac);
        }

        if (issuedate != null) {
            localVarFormParams.put("issuedate", issuedate);
        }

        if (ts != null) {
            localVarFormParams.put("ts", ts);
        }

        if (uri != null) {
            localVarFormParams.put("uri", uri);
        }

        if (validfrom != null) {
            localVarFormParams.put("validfrom", validfrom);
        }

        if (validto != null) {
            localVarFormParams.put("validto", validto);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauthsecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pushURIToAccountIdValidateBeforeCall(String action, String clientid, Integer digilockerid, String docid, File hmac, String issuedate, String ts, String uri, Integer validfrom, String validto, final ApiCallback _callback) throws ApiException {
        return pushURIToAccountIdCall(action, clientid, digilockerid, docid, hmac, issuedate, ts, uri, validfrom, validto, _callback);

    }

    /**
     * Push URI to Account
     * The API can use to push or delete a single URI into Digital Locker using DigiLocker Id acquired using Get User Details API. This API can be used to push the certificate details to Digital Locker as and when a certificate is generated in the issuer system. The issuing departments must register on DigiLocker as a registered Issuer and implement the requisite Issuer APIs as mentioned in Digital Locker Issuer API Specification document prior to pushing certificates using this API.
     * @param action Action that needs to be taken for the Aadhaar number and URI combination. Possible values are A for adding a new URI, U for updating an already added URI details or D for deleting the URI. (optional)
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param digilockerid This is the DigiLocker Id of the user that was acquired using Get User Details API. (optional)
     * @param docid A unique number of the document. This id will be unique within the document type issued by the issuer. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param issuedate The issue date of the document in DDMMYYYY format. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param uri This is the unique identifier of the document. (optional)
     * @param validfrom The date from which the document is valid in DDMMYYYY format. This may be same as the issue date. (optional)
     * @param validto The expiry date of the document in DDMMYYYY format. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public Object pushURIToAccountId(String action, String clientid, Integer digilockerid, String docid, File hmac, String issuedate, String ts, String uri, Integer validfrom, String validto) throws ApiException {
        ApiResponse<Object> localVarResp = pushURIToAccountIdWithHttpInfo(action, clientid, digilockerid, docid, hmac, issuedate, ts, uri, validfrom, validto);
        return localVarResp.getData();
    }

    /**
     * Push URI to Account
     * The API can use to push or delete a single URI into Digital Locker using DigiLocker Id acquired using Get User Details API. This API can be used to push the certificate details to Digital Locker as and when a certificate is generated in the issuer system. The issuing departments must register on DigiLocker as a registered Issuer and implement the requisite Issuer APIs as mentioned in Digital Locker Issuer API Specification document prior to pushing certificates using this API.
     * @param action Action that needs to be taken for the Aadhaar number and URI combination. Possible values are A for adding a new URI, U for updating an already added URI details or D for deleting the URI. (optional)
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param digilockerid This is the DigiLocker Id of the user that was acquired using Get User Details API. (optional)
     * @param docid A unique number of the document. This id will be unique within the document type issued by the issuer. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param issuedate The issue date of the document in DDMMYYYY format. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param uri This is the unique identifier of the document. (optional)
     * @param validfrom The date from which the document is valid in DDMMYYYY format. This may be same as the issue date. (optional)
     * @param validto The expiry date of the document in DDMMYYYY format. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pushURIToAccountIdWithHttpInfo(String action, String clientid, Integer digilockerid, String docid, File hmac, String issuedate, String ts, String uri, Integer validfrom, String validto) throws ApiException {
        okhttp3.Call localVarCall = pushURIToAccountIdValidateBeforeCall(action, clientid, digilockerid, docid, hmac, issuedate, ts, uri, validfrom, validto, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Push URI to Account (asynchronously)
     * The API can use to push or delete a single URI into Digital Locker using DigiLocker Id acquired using Get User Details API. This API can be used to push the certificate details to Digital Locker as and when a certificate is generated in the issuer system. The issuing departments must register on DigiLocker as a registered Issuer and implement the requisite Issuer APIs as mentioned in Digital Locker Issuer API Specification document prior to pushing certificates using this API.
     * @param action Action that needs to be taken for the Aadhaar number and URI combination. Possible values are A for adding a new URI, U for updating an already added URI details or D for deleting the URI. (optional)
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param digilockerid This is the DigiLocker Id of the user that was acquired using Get User Details API. (optional)
     * @param docid A unique number of the document. This id will be unique within the document type issued by the issuer. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param issuedate The issue date of the document in DDMMYYYY format. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param uri This is the unique identifier of the document. (optional)
     * @param validfrom The date from which the document is valid in DDMMYYYY format. This may be same as the issue date. (optional)
     * @param validto The expiry date of the document in DDMMYYYY format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pushURIToAccountIdAsync(String action, String clientid, Integer digilockerid, String docid, File hmac, String issuedate, String ts, String uri, Integer validfrom, String validto, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pushURIToAccountIdValidateBeforeCall(action, clientid, digilockerid, docid, hmac, issuedate, ts, uri, validfrom, validto, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyAccountId
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param mobile This is the mobile number of the user. DigiLocker will check whether an account exists for this mobile number. Either uid or mobile is required to verify whether an account exists. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param uid This is the Aadhaar number of the user. DigiLocker will check whether an account exists for this Aadhaar number. Either uid or mobile is required to verify whether an account exists. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAccountIdCall(String clientid, File hmac, Integer mobile, String ts, Integer uid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/2/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientid != null) {
            localVarFormParams.put("clientid", clientid);
        }

        if (hmac != null) {
            localVarFormParams.put("hmac", hmac);
        }

        if (mobile != null) {
            localVarFormParams.put("mobile", mobile);
        }

        if (ts != null) {
            localVarFormParams.put("ts", ts);
        }

        if (uid != null) {
            localVarFormParams.put("uid", uid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauthsecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyAccountIdValidateBeforeCall(String clientid, File hmac, Integer mobile, String ts, Integer uid, final ApiCallback _callback) throws ApiException {
        return verifyAccountIdCall(clientid, hmac, mobile, ts, uid, _callback);

    }

    /**
     * Verify Account
     * This API can be used to verify whether a mobile number or Aadhaar number is already registered with DigiLocker.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param mobile This is the mobile number of the user. DigiLocker will check whether an account exists for this mobile number. Either uid or mobile is required to verify whether an account exists. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param uid This is the Aadhaar number of the user. DigiLocker will check whether an account exists for this Aadhaar number. Either uid or mobile is required to verify whether an account exists. (optional)
     * @return VerifyAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public VerifyAccountResponse verifyAccountId(String clientid, File hmac, Integer mobile, String ts, Integer uid) throws ApiException {
        ApiResponse<VerifyAccountResponse> localVarResp = verifyAccountIdWithHttpInfo(clientid, hmac, mobile, ts, uid);
        return localVarResp.getData();
    }

    /**
     * Verify Account
     * This API can be used to verify whether a mobile number or Aadhaar number is already registered with DigiLocker.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param mobile This is the mobile number of the user. DigiLocker will check whether an account exists for this mobile number. Either uid or mobile is required to verify whether an account exists. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param uid This is the Aadhaar number of the user. DigiLocker will check whether an account exists for this Aadhaar number. Either uid or mobile is required to verify whether an account exists. (optional)
     * @return ApiResponse&lt;VerifyAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyAccountResponse> verifyAccountIdWithHttpInfo(String clientid, File hmac, Integer mobile, String ts, Integer uid) throws ApiException {
        okhttp3.Call localVarCall = verifyAccountIdValidateBeforeCall(clientid, hmac, mobile, ts, uid, null);
        Type localVarReturnType = new TypeToken<VerifyAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Account (asynchronously)
     * This API can be used to verify whether a mobile number or Aadhaar number is already registered with DigiLocker.
     * @param clientid Provide the client id that was created during the application registration process on Partners Portal. (optional)
     * @param hmac Provide SHA-256 encrypted value of the client secret, clientid and ts parameters above concatenated in this sequence (client secret, clientid, ts). The hmac parameter is used by DigiLocker to ensure the data integrity and authentication of the request. Use the Client Secret Key generated during the application registration process on Partners Portal as the client secret. (optional)
     * @param mobile This is the mobile number of the user. DigiLocker will check whether an account exists for this mobile number. Either uid or mobile is required to verify whether an account exists. (optional)
     * @param ts Provide a timestamp value in UNIX (or POSIX) format in IST time zone in seconds. This timestamp value must not be older than 30 minutes. (optional)
     * @param uid This is the Aadhaar number of the user. DigiLocker will check whether an account exists for this Aadhaar number. Either uid or mobile is required to verify whether an account exists. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAccountIdAsync(String clientid, File hmac, Integer mobile, String ts, Integer uid, final ApiCallback<VerifyAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyAccountIdValidateBeforeCall(clientid, hmac, mobile, ts, uid, _callback);
        Type localVarReturnType = new TypeToken<VerifyAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
