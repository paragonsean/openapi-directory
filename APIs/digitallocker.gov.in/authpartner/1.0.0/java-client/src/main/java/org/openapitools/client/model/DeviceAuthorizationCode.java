/*
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeviceAuthorizationCode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:03.399628-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceAuthorizationCode {
  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_DL_MOBILE = "dl_mobile";
  @SerializedName(SERIALIZED_NAME_DL_MOBILE)
  private Integer dlMobile;

  public static final String SERIALIZED_NAME_DL_USERNAME = "dl_username";
  @SerializedName(SERIALIZED_NAME_DL_USERNAME)
  private String dlUsername;

  public static final String SERIALIZED_NAME_RESPONSE_TYPE = "response_type";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TYPE)
  private String responseType;

  public DeviceAuthorizationCode() {
  }

  public DeviceAuthorizationCode clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public DeviceAuthorizationCode dlMobile(Integer dlMobile) {
    this.dlMobile = dlMobile;
    return this;
  }

  /**
   * Mobile number associated with DigiLocker account of the   user. The client device accepts the mobile number on the device from user and sends it in this parameter. Either the username or the mobile number must be provided.
   * @return dlMobile
   */
  @javax.annotation.Nullable
  public Integer getDlMobile() {
    return dlMobile;
  }

  public void setDlMobile(Integer dlMobile) {
    this.dlMobile = dlMobile;
  }


  public DeviceAuthorizationCode dlUsername(String dlUsername) {
    this.dlUsername = dlUsername;
    return this;
  }

  /**
   * DigiLocker username of the user. The client device accepts the username on the device from user and sends the username in this parameter. Either the username or the mobile number must be provided.   
   * @return dlUsername
   */
  @javax.annotation.Nullable
  public String getDlUsername() {
    return dlUsername;
  }

  public void setDlUsername(String dlUsername) {
    this.dlUsername = dlUsername;
  }


  public DeviceAuthorizationCode responseType(String responseType) {
    this.responseType = responseType;
    return this;
  }

  /**
   * The parameter must be set to device_code.
   * @return responseType
   */
  @javax.annotation.Nullable
  public String getResponseType() {
    return responseType;
  }

  public void setResponseType(String responseType) {
    this.responseType = responseType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceAuthorizationCode deviceAuthorizationCode = (DeviceAuthorizationCode) o;
    return Objects.equals(this.clientId, deviceAuthorizationCode.clientId) &&
        Objects.equals(this.dlMobile, deviceAuthorizationCode.dlMobile) &&
        Objects.equals(this.dlUsername, deviceAuthorizationCode.dlUsername) &&
        Objects.equals(this.responseType, deviceAuthorizationCode.responseType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, dlMobile, dlUsername, responseType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceAuthorizationCode {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    dlMobile: ").append(toIndentedString(dlMobile)).append("\n");
    sb.append("    dlUsername: ").append(toIndentedString(dlUsername)).append("\n");
    sb.append("    responseType: ").append(toIndentedString(responseType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_id");
    openapiFields.add("dl_mobile");
    openapiFields.add("dl_username");
    openapiFields.add("response_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceAuthorizationCode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceAuthorizationCode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceAuthorizationCode is not found in the empty JSON string", DeviceAuthorizationCode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceAuthorizationCode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceAuthorizationCode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("dl_username") != null && !jsonObj.get("dl_username").isJsonNull()) && !jsonObj.get("dl_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dl_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dl_username").toString()));
      }
      if ((jsonObj.get("response_type") != null && !jsonObj.get("response_type").isJsonNull()) && !jsonObj.get("response_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceAuthorizationCode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceAuthorizationCode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceAuthorizationCode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceAuthorizationCode.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceAuthorizationCode>() {
           @Override
           public void write(JsonWriter out, DeviceAuthorizationCode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceAuthorizationCode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceAuthorizationCode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceAuthorizationCode
   * @throws IOException if the JSON string is invalid with respect to DeviceAuthorizationCode
   */
  public static DeviceAuthorizationCode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceAuthorizationCode.class);
  }

  /**
   * Convert an instance of DeviceAuthorizationCode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

