/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceAuthorizationCodeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceAuthorizationCodeResponse::OAIDeviceAuthorizationCodeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceAuthorizationCodeResponse::OAIDeviceAuthorizationCodeResponse() {
    this->initializeModel();
}

OAIDeviceAuthorizationCodeResponse::~OAIDeviceAuthorizationCodeResponse() {}

void OAIDeviceAuthorizationCodeResponse::initializeModel() {

    m_device_code_isSet = false;
    m_device_code_isValid = false;

    m_dl_masked_email_isSet = false;
    m_dl_masked_email_isValid = false;

    m_dl_masked_mobile_isSet = false;
    m_dl_masked_mobile_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;
}

void OAIDeviceAuthorizationCodeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceAuthorizationCodeResponse::fromJsonObject(QJsonObject json) {

    m_device_code_isValid = ::OpenAPI::fromJsonValue(m_device_code, json[QString("device_code")]);
    m_device_code_isSet = !json[QString("device_code")].isNull() && m_device_code_isValid;

    m_dl_masked_email_isValid = ::OpenAPI::fromJsonValue(m_dl_masked_email, json[QString("dl_masked_email")]);
    m_dl_masked_email_isSet = !json[QString("dl_masked_email")].isNull() && m_dl_masked_email_isValid;

    m_dl_masked_mobile_isValid = ::OpenAPI::fromJsonValue(m_dl_masked_mobile, json[QString("dl_masked_mobile")]);
    m_dl_masked_mobile_isSet = !json[QString("dl_masked_mobile")].isNull() && m_dl_masked_mobile_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expires_in")]);
    m_expires_in_isSet = !json[QString("expires_in")].isNull() && m_expires_in_isValid;
}

QString OAIDeviceAuthorizationCodeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceAuthorizationCodeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_device_code_isSet) {
        obj.insert(QString("device_code"), ::OpenAPI::toJsonValue(m_device_code));
    }
    if (m_dl_masked_email_isSet) {
        obj.insert(QString("dl_masked_email"), ::OpenAPI::toJsonValue(m_dl_masked_email));
    }
    if (m_dl_masked_mobile_isSet) {
        obj.insert(QString("dl_masked_mobile"), ::OpenAPI::toJsonValue(m_dl_masked_mobile));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expires_in"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    return obj;
}

QString OAIDeviceAuthorizationCodeResponse::getDeviceCode() const {
    return m_device_code;
}
void OAIDeviceAuthorizationCodeResponse::setDeviceCode(const QString &device_code) {
    m_device_code = device_code;
    m_device_code_isSet = true;
}

bool OAIDeviceAuthorizationCodeResponse::is_device_code_Set() const{
    return m_device_code_isSet;
}

bool OAIDeviceAuthorizationCodeResponse::is_device_code_Valid() const{
    return m_device_code_isValid;
}

QString OAIDeviceAuthorizationCodeResponse::getDlMaskedEmail() const {
    return m_dl_masked_email;
}
void OAIDeviceAuthorizationCodeResponse::setDlMaskedEmail(const QString &dl_masked_email) {
    m_dl_masked_email = dl_masked_email;
    m_dl_masked_email_isSet = true;
}

bool OAIDeviceAuthorizationCodeResponse::is_dl_masked_email_Set() const{
    return m_dl_masked_email_isSet;
}

bool OAIDeviceAuthorizationCodeResponse::is_dl_masked_email_Valid() const{
    return m_dl_masked_email_isValid;
}

qint32 OAIDeviceAuthorizationCodeResponse::getDlMaskedMobile() const {
    return m_dl_masked_mobile;
}
void OAIDeviceAuthorizationCodeResponse::setDlMaskedMobile(const qint32 &dl_masked_mobile) {
    m_dl_masked_mobile = dl_masked_mobile;
    m_dl_masked_mobile_isSet = true;
}

bool OAIDeviceAuthorizationCodeResponse::is_dl_masked_mobile_Set() const{
    return m_dl_masked_mobile_isSet;
}

bool OAIDeviceAuthorizationCodeResponse::is_dl_masked_mobile_Valid() const{
    return m_dl_masked_mobile_isValid;
}

qint32 OAIDeviceAuthorizationCodeResponse::getExpiresIn() const {
    return m_expires_in;
}
void OAIDeviceAuthorizationCodeResponse::setExpiresIn(const qint32 &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIDeviceAuthorizationCodeResponse::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIDeviceAuthorizationCodeResponse::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

bool OAIDeviceAuthorizationCodeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dl_masked_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dl_masked_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceAuthorizationCodeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_code_isValid && m_dl_masked_email_isValid && m_dl_masked_mobile_isValid && m_expires_in_isValid && true;
}

} // namespace OpenAPI
