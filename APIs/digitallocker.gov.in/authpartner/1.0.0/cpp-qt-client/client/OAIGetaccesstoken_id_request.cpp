/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetaccesstoken_id_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetaccesstoken_id_request::OAIGetaccesstoken_id_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetaccesstoken_id_request::OAIGetaccesstoken_id_request() {
    this->initializeModel();
}

OAIGetaccesstoken_id_request::~OAIGetaccesstoken_id_request() {}

void OAIGetaccesstoken_id_request::initializeModel() {

    m_get_access_token_using_authorization_code_isSet = false;
    m_get_access_token_using_authorization_code_isValid = false;

    m_get_access_token_using_device_code_and_otp_isSet = false;
    m_get_access_token_using_device_code_and_otp_isValid = false;

    m_get_access_token_using_refresh_token_isSet = false;
    m_get_access_token_using_refresh_token_isValid = false;
}

void OAIGetaccesstoken_id_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetaccesstoken_id_request::fromJsonObject(QJsonObject json) {

    m_get_access_token_using_authorization_code_isValid = ::OpenAPI::fromJsonValue(m_get_access_token_using_authorization_code, json[QString("Get access token using authorization code")]);
    m_get_access_token_using_authorization_code_isSet = !json[QString("Get access token using authorization code")].isNull() && m_get_access_token_using_authorization_code_isValid;

    m_get_access_token_using_device_code_and_otp_isValid = ::OpenAPI::fromJsonValue(m_get_access_token_using_device_code_and_otp, json[QString("Get access token using device code and OTP")]);
    m_get_access_token_using_device_code_and_otp_isSet = !json[QString("Get access token using device code and OTP")].isNull() && m_get_access_token_using_device_code_and_otp_isValid;

    m_get_access_token_using_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_get_access_token_using_refresh_token, json[QString("Get access token using refresh token")]);
    m_get_access_token_using_refresh_token_isSet = !json[QString("Get access token using refresh token")].isNull() && m_get_access_token_using_refresh_token_isValid;
}

QString OAIGetaccesstoken_id_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetaccesstoken_id_request::asJsonObject() const {
    QJsonObject obj;
    if (m_get_access_token_using_authorization_code.isSet()) {
        obj.insert(QString("Get access token using authorization code"), ::OpenAPI::toJsonValue(m_get_access_token_using_authorization_code));
    }
    if (m_get_access_token_using_device_code_and_otp.isSet()) {
        obj.insert(QString("Get access token using device code and OTP"), ::OpenAPI::toJsonValue(m_get_access_token_using_device_code_and_otp));
    }
    if (m_get_access_token_using_refresh_token.isSet()) {
        obj.insert(QString("Get access token using refresh token"), ::OpenAPI::toJsonValue(m_get_access_token_using_refresh_token));
    }
    return obj;
}

OAIAccessToken OAIGetaccesstoken_id_request::getGetAccessTokenUsingAuthorizationCode() const {
    return m_get_access_token_using_authorization_code;
}
void OAIGetaccesstoken_id_request::setGetAccessTokenUsingAuthorizationCode(const OAIAccessToken &get_access_token_using_authorization_code) {
    m_get_access_token_using_authorization_code = get_access_token_using_authorization_code;
    m_get_access_token_using_authorization_code_isSet = true;
}

bool OAIGetaccesstoken_id_request::is_get_access_token_using_authorization_code_Set() const{
    return m_get_access_token_using_authorization_code_isSet;
}

bool OAIGetaccesstoken_id_request::is_get_access_token_using_authorization_code_Valid() const{
    return m_get_access_token_using_authorization_code_isValid;
}

OAIDeviceAccessToken OAIGetaccesstoken_id_request::getGetAccessTokenUsingDeviceCodeAndOtp() const {
    return m_get_access_token_using_device_code_and_otp;
}
void OAIGetaccesstoken_id_request::setGetAccessTokenUsingDeviceCodeAndOtp(const OAIDeviceAccessToken &get_access_token_using_device_code_and_otp) {
    m_get_access_token_using_device_code_and_otp = get_access_token_using_device_code_and_otp;
    m_get_access_token_using_device_code_and_otp_isSet = true;
}

bool OAIGetaccesstoken_id_request::is_get_access_token_using_device_code_and_otp_Set() const{
    return m_get_access_token_using_device_code_and_otp_isSet;
}

bool OAIGetaccesstoken_id_request::is_get_access_token_using_device_code_and_otp_Valid() const{
    return m_get_access_token_using_device_code_and_otp_isValid;
}

OAIRefreshToken OAIGetaccesstoken_id_request::getGetAccessTokenUsingRefreshToken() const {
    return m_get_access_token_using_refresh_token;
}
void OAIGetaccesstoken_id_request::setGetAccessTokenUsingRefreshToken(const OAIRefreshToken &get_access_token_using_refresh_token) {
    m_get_access_token_using_refresh_token = get_access_token_using_refresh_token;
    m_get_access_token_using_refresh_token_isSet = true;
}

bool OAIGetaccesstoken_id_request::is_get_access_token_using_refresh_token_Set() const{
    return m_get_access_token_using_refresh_token_isSet;
}

bool OAIGetaccesstoken_id_request::is_get_access_token_using_refresh_token_Valid() const{
    return m_get_access_token_using_refresh_token_isValid;
}

bool OAIGetaccesstoken_id_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_get_access_token_using_authorization_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_get_access_token_using_device_code_and_otp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_get_access_token_using_refresh_token.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetaccesstoken_id_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
