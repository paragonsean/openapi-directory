/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXMLFormatSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXMLFormatSchema::OAIXMLFormatSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXMLFormatSchema::OAIXMLFormatSchema() {
    this->initializeModel();
}

OAIXMLFormatSchema::~OAIXMLFormatSchema() {}

void OAIXMLFormatSchema::initializeModel() {

    m_certificate_data_isSet = false;
    m_certificate_data_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;
}

void OAIXMLFormatSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXMLFormatSchema::fromJsonObject(QJsonObject json) {

    m_certificate_data_isValid = ::OpenAPI::fromJsonValue(m_certificate_data, json[QString("CertificateData")]);
    m_certificate_data_isSet = !json[QString("CertificateData")].isNull() && m_certificate_data_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("Signature")]);
    m_signature_isSet = !json[QString("Signature")].isNull() && m_signature_isValid;
}

QString OAIXMLFormatSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXMLFormatSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_data.size() > 0) {
        obj.insert(QString("CertificateData"), ::OpenAPI::toJsonValue(m_certificate_data));
    }
    if (m_signature.isSet()) {
        obj.insert(QString("Signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    return obj;
}

QList<QJsonValue> OAIXMLFormatSchema::getCertificateData() const {
    return m_certificate_data;
}
void OAIXMLFormatSchema::setCertificateData(const QList<QJsonValue> &certificate_data) {
    m_certificate_data = certificate_data;
    m_certificate_data_isSet = true;
}

bool OAIXMLFormatSchema::is_certificate_data_Set() const{
    return m_certificate_data_isSet;
}

bool OAIXMLFormatSchema::is_certificate_data_Valid() const{
    return m_certificate_data_isValid;
}

OAIXMLFormatSchema_Signature OAIXMLFormatSchema::getSignature() const {
    return m_signature;
}
void OAIXMLFormatSchema::setSignature(const OAIXMLFormatSchema_Signature &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIXMLFormatSchema::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIXMLFormatSchema::is_signature_Valid() const{
    return m_signature_isValid;
}

bool OAIXMLFormatSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXMLFormatSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_certificate_data_isValid && m_signature_isValid && true;
}

} // namespace OpenAPI
