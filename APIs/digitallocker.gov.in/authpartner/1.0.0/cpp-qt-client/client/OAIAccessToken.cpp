/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessToken::OAIAccessToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessToken::OAIAccessToken() {
    this->initializeModel();
}

OAIAccessToken::~OAIAccessToken() {}

void OAIAccessToken::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_code_verifier_isSet = false;
    m_code_verifier_isValid = false;

    m_grant_type_isSet = false;
    m_grant_type_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;
}

void OAIAccessToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessToken::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("client_secret")]);
    m_client_secret_isSet = !json[QString("client_secret")].isNull() && m_client_secret_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_code_verifier_isValid = ::OpenAPI::fromJsonValue(m_code_verifier, json[QString("code_verifier")]);
    m_code_verifier_isSet = !json[QString("code_verifier")].isNull() && m_code_verifier_isValid;

    m_grant_type_isValid = ::OpenAPI::fromJsonValue(m_grant_type, json[QString("grant_type")]);
    m_grant_type_isSet = !json[QString("grant_type")].isNull() && m_grant_type_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirect_uri")]);
    m_redirect_uri_isSet = !json[QString("redirect_uri")].isNull() && m_redirect_uri_isValid;
}

QString OAIAccessToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessToken::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("client_secret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_code_verifier_isSet) {
        obj.insert(QString("code_verifier"), ::OpenAPI::toJsonValue(m_code_verifier));
    }
    if (m_grant_type_isSet) {
        obj.insert(QString("grant_type"), ::OpenAPI::toJsonValue(m_grant_type));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirect_uri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    return obj;
}

QString OAIAccessToken::getClientId() const {
    return m_client_id;
}
void OAIAccessToken::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIAccessToken::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIAccessToken::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIAccessToken::getClientSecret() const {
    return m_client_secret;
}
void OAIAccessToken::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIAccessToken::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIAccessToken::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIAccessToken::getCode() const {
    return m_code;
}
void OAIAccessToken::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAccessToken::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAccessToken::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIAccessToken::getCodeVerifier() const {
    return m_code_verifier;
}
void OAIAccessToken::setCodeVerifier(const QString &code_verifier) {
    m_code_verifier = code_verifier;
    m_code_verifier_isSet = true;
}

bool OAIAccessToken::is_code_verifier_Set() const{
    return m_code_verifier_isSet;
}

bool OAIAccessToken::is_code_verifier_Valid() const{
    return m_code_verifier_isValid;
}

QString OAIAccessToken::getGrantType() const {
    return m_grant_type;
}
void OAIAccessToken::setGrantType(const QString &grant_type) {
    m_grant_type = grant_type;
    m_grant_type_isSet = true;
}

bool OAIAccessToken::is_grant_type_Set() const{
    return m_grant_type_isSet;
}

bool OAIAccessToken::is_grant_type_Valid() const{
    return m_grant_type_isValid;
}

QString OAIAccessToken::getRedirectUri() const {
    return m_redirect_uri;
}
void OAIAccessToken::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAIAccessToken::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAIAccessToken::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

bool OAIAccessToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_verifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_client_secret_isValid && m_grant_type_isValid && true;
}

} // namespace OpenAPI
