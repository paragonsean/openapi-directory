/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetStatisticsResponse_monthwise_registations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetStatisticsResponse_monthwise_registations::OAIGetStatisticsResponse_monthwise_registations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetStatisticsResponse_monthwise_registations::OAIGetStatisticsResponse_monthwise_registations() {
    this->initializeModel();
}

OAIGetStatisticsResponse_monthwise_registations::~OAIGetStatisticsResponse_monthwise_registations() {}

void OAIGetStatisticsResponse_monthwise_registations::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_details2_isSet = false;
    m_details2_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIGetStatisticsResponse_monthwise_registations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetStatisticsResponse_monthwise_registations::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_details2_isValid = ::OpenAPI::fromJsonValue(m_details2, json[QString("details2")]);
    m_details2_isSet = !json[QString("details2")].isNull() && m_details2_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("month")]);
    m_month_isSet = !json[QString("month")].isNull() && m_month_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIGetStatisticsResponse_monthwise_registations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetStatisticsResponse_monthwise_registations::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_details2.isSet()) {
        obj.insert(QString("details2"), ::OpenAPI::toJsonValue(m_details2));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_month_isSet) {
        obj.insert(QString("month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint32 OAIGetStatisticsResponse_monthwise_registations::getCount() const {
    return m_count;
}
void OAIGetStatisticsResponse_monthwise_registations::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIGetStatisticsResponse_monthwise_registations::is_count_Set() const{
    return m_count_isSet;
}

bool OAIGetStatisticsResponse_monthwise_registations::is_count_Valid() const{
    return m_count_isValid;
}

OAIGetStatisticsResponse_monthwise_registations_details2 OAIGetStatisticsResponse_monthwise_registations::getDetails2() const {
    return m_details2;
}
void OAIGetStatisticsResponse_monthwise_registations::setDetails2(const OAIGetStatisticsResponse_monthwise_registations_details2 &details2) {
    m_details2 = details2;
    m_details2_isSet = true;
}

bool OAIGetStatisticsResponse_monthwise_registations::is_details2_Set() const{
    return m_details2_isSet;
}

bool OAIGetStatisticsResponse_monthwise_registations::is_details2_Valid() const{
    return m_details2_isValid;
}

qint32 OAIGetStatisticsResponse_monthwise_registations::getId() const {
    return m_id;
}
void OAIGetStatisticsResponse_monthwise_registations::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetStatisticsResponse_monthwise_registations::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetStatisticsResponse_monthwise_registations::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIGetStatisticsResponse_monthwise_registations::getMonth() const {
    return m_month;
}
void OAIGetStatisticsResponse_monthwise_registations::setMonth(const qint32 &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIGetStatisticsResponse_monthwise_registations::is_month_Set() const{
    return m_month_isSet;
}

bool OAIGetStatisticsResponse_monthwise_registations::is_month_Valid() const{
    return m_month_isValid;
}

qint32 OAIGetStatisticsResponse_monthwise_registations::getYear() const {
    return m_year;
}
void OAIGetStatisticsResponse_monthwise_registations::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIGetStatisticsResponse_monthwise_registations::is_year_Set() const{
    return m_year_isSet;
}

bool OAIGetStatisticsResponse_monthwise_registations::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIGetStatisticsResponse_monthwise_registations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetStatisticsResponse_monthwise_registations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
