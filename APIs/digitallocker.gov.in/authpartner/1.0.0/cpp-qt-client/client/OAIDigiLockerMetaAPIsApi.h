/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDigiLockerMetaAPIsApi_H
#define OAI_OAIDigiLockerMetaAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDocTypeResponse.h"
#include "OAIGetStatisticsResponse.h"
#include "OAIGet_Device_Code_id_401_response.h"
#include "OAIGet_List_of_Documents_Provided_by_an_Issuer_id_400_response.h"
#include "OAIGet_List_of_Issuers_id_400_response.h"
#include "OAIGet_Search_Parameters_for_a_Document_id_400_response.h"
#include "OAIGet_Statistics_id_400_response.h"
#include "OAIHttpFileElement.h"
#include "OAIIssuerResponse.h"
#include "OAIPush_URI_to_Account_id_400_response.h"
#include "OAIPush_URI_to_Account_id_401_response.h"
#include "OAIPush_URI_to_Account_id_404_response.h"
#include "OAIPush_URI_to_Account_id_500_response.h"
#include "OAISearchParametersResponse_inner.h"
#include "OAIVerifyAccountResponse.h"
#include "OAIVerify_Account_id_400_response.h"
#include "OAIVerify_Account_id_500_response.h"
#include <QJsonValue>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDigiLockerMetaAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIDigiLockerMetaAPIsApi(const int timeOut = 0);
    ~OAIDigiLockerMetaAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  clientid QString [optional]
    * @param[in]  hmac OAIHttpFileElement [optional]
    * @param[in]  orgid QString [optional]
    * @param[in]  ts QString [optional]
    */
    virtual void get_List_of_Documents_Provided_by_an_Issuer_id(const ::OpenAPI::OptionalParam<QString> &clientid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &hmac = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &orgid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ts = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  clientid QString [optional]
    * @param[in]  hmac OAIHttpFileElement [optional]
    * @param[in]  ts QString [optional]
    */
    virtual void get_List_of_Issuers_id(const ::OpenAPI::OptionalParam<QString> &clientid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &hmac = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &ts = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  clientid QString [optional]
    * @param[in]  doctype QString [optional]
    * @param[in]  hmac OAIHttpFileElement [optional]
    * @param[in]  orgid QString [optional]
    * @param[in]  ts QString [optional]
    */
    virtual void get_Search_Parameters_for_a_Document_id(const ::OpenAPI::OptionalParam<QString> &clientid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &doctype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &hmac = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &orgid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ts = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  clientid QString [optional]
    * @param[in]  hmac OAIHttpFileElement [optional]
    * @param[in]  ts QString [optional]
    */
    virtual void get_Statistics_id(const ::OpenAPI::OptionalParam<QString> &clientid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &hmac = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &ts = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [optional]
    * @param[in]  clientid QString [optional]
    * @param[in]  digilockerid qint32 [optional]
    * @param[in]  docid QString [optional]
    * @param[in]  hmac OAIHttpFileElement [optional]
    * @param[in]  issuedate QString [optional]
    * @param[in]  ts QString [optional]
    * @param[in]  uri QString [optional]
    * @param[in]  validfrom qint32 [optional]
    * @param[in]  validto QString [optional]
    */
    virtual void push_URI_to_Account_id(const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &clientid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &digilockerid = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &docid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &hmac = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &issuedate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &validfrom = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &validto = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  clientid QString [optional]
    * @param[in]  hmac OAIHttpFileElement [optional]
    * @param[in]  mobile qint32 [optional]
    * @param[in]  ts QString [optional]
    * @param[in]  uid qint32 [optional]
    */
    virtual void verify_Account_id(const ::OpenAPI::OptionalParam<QString> &clientid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &hmac = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<qint32> &mobile = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &uid = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void get_List_of_Documents_Provided_by_an_Issuer_idCallback(OAIHttpRequestWorker *worker);
    void get_List_of_Issuers_idCallback(OAIHttpRequestWorker *worker);
    void get_Search_Parameters_for_a_Document_idCallback(OAIHttpRequestWorker *worker);
    void get_Statistics_idCallback(OAIHttpRequestWorker *worker);
    void push_URI_to_Account_idCallback(OAIHttpRequestWorker *worker);
    void verify_Account_idCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void get_List_of_Documents_Provided_by_an_Issuer_idSignal(OAIDocTypeResponse summary);
    void get_List_of_Issuers_idSignal(OAIIssuerResponse summary);
    void get_Search_Parameters_for_a_Document_idSignal(QSet<OAISearchParametersResponse_inner> summary);
    void get_Statistics_idSignal(OAIGetStatisticsResponse summary);
    void push_URI_to_Account_idSignal(QJsonValue summary);
    void verify_Account_idSignal(OAIVerifyAccountResponse summary);


    void get_List_of_Documents_Provided_by_an_Issuer_idSignalFull(OAIHttpRequestWorker *worker, OAIDocTypeResponse summary);
    void get_List_of_Issuers_idSignalFull(OAIHttpRequestWorker *worker, OAIIssuerResponse summary);
    void get_Search_Parameters_for_a_Document_idSignalFull(OAIHttpRequestWorker *worker, QSet<OAISearchParametersResponse_inner> summary);
    void get_Statistics_idSignalFull(OAIHttpRequestWorker *worker, OAIGetStatisticsResponse summary);
    void push_URI_to_Account_idSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void verify_Account_idSignalFull(OAIHttpRequestWorker *worker, OAIVerifyAccountResponse summary);

    Q_DECL_DEPRECATED_X("Use get_List_of_Documents_Provided_by_an_Issuer_idSignalError() instead")
    void get_List_of_Documents_Provided_by_an_Issuer_idSignalE(OAIDocTypeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_List_of_Documents_Provided_by_an_Issuer_idSignalError(OAIDocTypeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_List_of_Issuers_idSignalError() instead")
    void get_List_of_Issuers_idSignalE(OAIIssuerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_List_of_Issuers_idSignalError(OAIIssuerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_Search_Parameters_for_a_Document_idSignalError() instead")
    void get_Search_Parameters_for_a_Document_idSignalE(QSet<OAISearchParametersResponse_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_Search_Parameters_for_a_Document_idSignalError(QSet<OAISearchParametersResponse_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_Statistics_idSignalError() instead")
    void get_Statistics_idSignalE(OAIGetStatisticsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_Statistics_idSignalError(OAIGetStatisticsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use push_URI_to_Account_idSignalError() instead")
    void push_URI_to_Account_idSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void push_URI_to_Account_idSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verify_Account_idSignalError() instead")
    void verify_Account_idSignalE(OAIVerifyAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verify_Account_idSignalError(OAIVerifyAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use get_List_of_Documents_Provided_by_an_Issuer_idSignalErrorFull() instead")
    void get_List_of_Documents_Provided_by_an_Issuer_idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_List_of_Documents_Provided_by_an_Issuer_idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_List_of_Issuers_idSignalErrorFull() instead")
    void get_List_of_Issuers_idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_List_of_Issuers_idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_Search_Parameters_for_a_Document_idSignalErrorFull() instead")
    void get_Search_Parameters_for_a_Document_idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_Search_Parameters_for_a_Document_idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_Statistics_idSignalErrorFull() instead")
    void get_Statistics_idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_Statistics_idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use push_URI_to_Account_idSignalErrorFull() instead")
    void push_URI_to_Account_idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void push_URI_to_Account_idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verify_Account_idSignalErrorFull() instead")
    void verify_Account_idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verify_Account_idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
