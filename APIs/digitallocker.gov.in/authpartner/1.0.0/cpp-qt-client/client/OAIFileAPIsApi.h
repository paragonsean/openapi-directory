/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFileAPIsApi_H
#define OAI_OAIFileAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEaadharXamlSchema.h"
#include "OAIFileUpload.h"
#include "OAIFileUploadResponse.h"
#include "OAIGet_File_from_URI_id_400_response.h"
#include "OAIGet_File_from_URI_id_404_response.h"
#include "OAIGet_File_from_URI_id_500_response.h"
#include "OAIGet_File_from_URI_id_503_response.h"
#include "OAIGet_List_of_Self_Uploaded_Documents_404_response.h"
#include "OAIGet_List_of_Self_Uploaded_Documents_500_response.h"
#include "OAIGet_List_of_issued_Documents_Version1_id_500_response.h"
#include "OAIGet_List_of_issued_Documents_id_200_response.h"
#include "OAIGet_e_Aadhaar_Data_in_XML_Format_id_401_response.h"
#include "OAIGet_e_Aadhaar_Data_in_XML_Format_id_404_response.h"
#include "OAIHttpFileElement.h"
#include "OAIPull_Document_id_400_response.h"
#include "OAIPull_Document_id_404_response.h"
#include "OAIPull_Document_id_500_response.h"
#include "OAIPush_URI_to_Account_id_500_response.h"
#include "OAISample_1.h"
#include "OAISample_2.h"
#include "OAISample_3.h"
#include "OAISample_4.h"
#include "OAIUpload_File_to_Locker_id_400_response.h"
#include "OAIUpload_File_to_Locker_id_401_response.h"
#include "OAIXMLFormatSchema.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFileAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIFileAPIsApi(const int timeOut = 0);
    ~OAIFileAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  uri QString [required]
    */
    virtual void get_Certificate_Data_in_XML_Format_from_URI_id(const QString &uri);

    /**
    * @param[in]  uri QString [required]
    */
    virtual void get_File_from_URI_id(const QString &uri);


    virtual void get_List_of_Self_Uploaded_Documents();

    /**
    * @param[in]  id QString [required]
    */
    virtual void get_List_of_Self_Uploaded_Documents_id(const QString &id);


    virtual void get_List_of_issued_Documents_Version1_id();


    virtual void get_List_of_issued_Documents_id();


    virtual void get_eAadhaar_Data_in_XML_Format_id();

    /**
    * @param[in]  chasis_no QString [optional]
    * @param[in]  consent QString [optional]
    * @param[in]  doctype QString [optional]
    * @param[in]  orgid QString [optional]
    * @param[in]  reg_no QString [optional]
    */
    virtual void pull_Document_id(const ::OpenAPI::OptionalParam<QString> &chasis_no = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &consent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &doctype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orgid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reg_no = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [optional]
    * @param[in]  hmac QString [optional]
    * @param[in]  oai_file_upload OAIFileUpload [optional]
    */
    virtual void upload_File_to_Locker_id(const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hmac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIFileUpload> &oai_file_upload = ::OpenAPI::OptionalParam<OAIFileUpload>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void get_Certificate_Data_in_XML_Format_from_URI_idCallback(OAIHttpRequestWorker *worker);
    void get_File_from_URI_idCallback(OAIHttpRequestWorker *worker);
    void get_List_of_Self_Uploaded_DocumentsCallback(OAIHttpRequestWorker *worker);
    void get_List_of_Self_Uploaded_Documents_idCallback(OAIHttpRequestWorker *worker);
    void get_List_of_issued_Documents_Version1_idCallback(OAIHttpRequestWorker *worker);
    void get_List_of_issued_Documents_idCallback(OAIHttpRequestWorker *worker);
    void get_eAadhaar_Data_in_XML_Format_idCallback(OAIHttpRequestWorker *worker);
    void pull_Document_idCallback(OAIHttpRequestWorker *worker);
    void upload_File_to_Locker_idCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void get_Certificate_Data_in_XML_Format_from_URI_idSignal(OAIXMLFormatSchema summary);
    void get_File_from_URI_idSignal(QString summary);
    void get_List_of_Self_Uploaded_DocumentsSignal(OAISample_1 summary);
    void get_List_of_Self_Uploaded_Documents_idSignal(OAISample_3 summary);
    void get_List_of_issued_Documents_Version1_idSignal(OAISample_2 summary);
    void get_List_of_issued_Documents_idSignal(OAIGet_List_of_issued_Documents_id_200_response summary);
    void get_eAadhaar_Data_in_XML_Format_idSignal(OAIEaadharXamlSchema summary);
    void pull_Document_idSignal(OAISample_4 summary);
    void upload_File_to_Locker_idSignal(OAIFileUploadResponse summary);


    void get_Certificate_Data_in_XML_Format_from_URI_idSignalFull(OAIHttpRequestWorker *worker, OAIXMLFormatSchema summary);
    void get_File_from_URI_idSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void get_List_of_Self_Uploaded_DocumentsSignalFull(OAIHttpRequestWorker *worker, OAISample_1 summary);
    void get_List_of_Self_Uploaded_Documents_idSignalFull(OAIHttpRequestWorker *worker, OAISample_3 summary);
    void get_List_of_issued_Documents_Version1_idSignalFull(OAIHttpRequestWorker *worker, OAISample_2 summary);
    void get_List_of_issued_Documents_idSignalFull(OAIHttpRequestWorker *worker, OAIGet_List_of_issued_Documents_id_200_response summary);
    void get_eAadhaar_Data_in_XML_Format_idSignalFull(OAIHttpRequestWorker *worker, OAIEaadharXamlSchema summary);
    void pull_Document_idSignalFull(OAIHttpRequestWorker *worker, OAISample_4 summary);
    void upload_File_to_Locker_idSignalFull(OAIHttpRequestWorker *worker, OAIFileUploadResponse summary);

    Q_DECL_DEPRECATED_X("Use get_Certificate_Data_in_XML_Format_from_URI_idSignalError() instead")
    void get_Certificate_Data_in_XML_Format_from_URI_idSignalE(OAIXMLFormatSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_Certificate_Data_in_XML_Format_from_URI_idSignalError(OAIXMLFormatSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_File_from_URI_idSignalError() instead")
    void get_File_from_URI_idSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_File_from_URI_idSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_List_of_Self_Uploaded_DocumentsSignalError() instead")
    void get_List_of_Self_Uploaded_DocumentsSignalE(OAISample_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_List_of_Self_Uploaded_DocumentsSignalError(OAISample_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_List_of_Self_Uploaded_Documents_idSignalError() instead")
    void get_List_of_Self_Uploaded_Documents_idSignalE(OAISample_3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_List_of_Self_Uploaded_Documents_idSignalError(OAISample_3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_List_of_issued_Documents_Version1_idSignalError() instead")
    void get_List_of_issued_Documents_Version1_idSignalE(OAISample_2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_List_of_issued_Documents_Version1_idSignalError(OAISample_2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_List_of_issued_Documents_idSignalError() instead")
    void get_List_of_issued_Documents_idSignalE(OAIGet_List_of_issued_Documents_id_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_List_of_issued_Documents_idSignalError(OAIGet_List_of_issued_Documents_id_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_eAadhaar_Data_in_XML_Format_idSignalError() instead")
    void get_eAadhaar_Data_in_XML_Format_idSignalE(OAIEaadharXamlSchema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_eAadhaar_Data_in_XML_Format_idSignalError(OAIEaadharXamlSchema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pull_Document_idSignalError() instead")
    void pull_Document_idSignalE(OAISample_4 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pull_Document_idSignalError(OAISample_4 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upload_File_to_Locker_idSignalError() instead")
    void upload_File_to_Locker_idSignalE(OAIFileUploadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void upload_File_to_Locker_idSignalError(OAIFileUploadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use get_Certificate_Data_in_XML_Format_from_URI_idSignalErrorFull() instead")
    void get_Certificate_Data_in_XML_Format_from_URI_idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_Certificate_Data_in_XML_Format_from_URI_idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_File_from_URI_idSignalErrorFull() instead")
    void get_File_from_URI_idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_File_from_URI_idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_List_of_Self_Uploaded_DocumentsSignalErrorFull() instead")
    void get_List_of_Self_Uploaded_DocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_List_of_Self_Uploaded_DocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_List_of_Self_Uploaded_Documents_idSignalErrorFull() instead")
    void get_List_of_Self_Uploaded_Documents_idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_List_of_Self_Uploaded_Documents_idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_List_of_issued_Documents_Version1_idSignalErrorFull() instead")
    void get_List_of_issued_Documents_Version1_idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_List_of_issued_Documents_Version1_idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_List_of_issued_Documents_idSignalErrorFull() instead")
    void get_List_of_issued_Documents_idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_List_of_issued_Documents_idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_eAadhaar_Data_in_XML_Format_idSignalErrorFull() instead")
    void get_eAadhaar_Data_in_XML_Format_idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_eAadhaar_Data_in_XML_Format_idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pull_Document_idSignalErrorFull() instead")
    void pull_Document_idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pull_Document_idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upload_File_to_Locker_idSignalErrorFull() instead")
    void upload_File_to_Locker_idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void upload_File_to_Locker_idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
