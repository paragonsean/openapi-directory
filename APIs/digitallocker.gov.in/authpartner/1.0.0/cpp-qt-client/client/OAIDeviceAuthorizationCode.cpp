/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceAuthorizationCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceAuthorizationCode::OAIDeviceAuthorizationCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceAuthorizationCode::OAIDeviceAuthorizationCode() {
    this->initializeModel();
}

OAIDeviceAuthorizationCode::~OAIDeviceAuthorizationCode() {}

void OAIDeviceAuthorizationCode::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_dl_mobile_isSet = false;
    m_dl_mobile_isValid = false;

    m_dl_username_isSet = false;
    m_dl_username_isValid = false;

    m_response_type_isSet = false;
    m_response_type_isValid = false;
}

void OAIDeviceAuthorizationCode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceAuthorizationCode::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_dl_mobile_isValid = ::OpenAPI::fromJsonValue(m_dl_mobile, json[QString("dl_mobile")]);
    m_dl_mobile_isSet = !json[QString("dl_mobile")].isNull() && m_dl_mobile_isValid;

    m_dl_username_isValid = ::OpenAPI::fromJsonValue(m_dl_username, json[QString("dl_username")]);
    m_dl_username_isSet = !json[QString("dl_username")].isNull() && m_dl_username_isValid;

    m_response_type_isValid = ::OpenAPI::fromJsonValue(m_response_type, json[QString("response_type")]);
    m_response_type_isSet = !json[QString("response_type")].isNull() && m_response_type_isValid;
}

QString OAIDeviceAuthorizationCode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceAuthorizationCode::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_dl_mobile_isSet) {
        obj.insert(QString("dl_mobile"), ::OpenAPI::toJsonValue(m_dl_mobile));
    }
    if (m_dl_username_isSet) {
        obj.insert(QString("dl_username"), ::OpenAPI::toJsonValue(m_dl_username));
    }
    if (m_response_type_isSet) {
        obj.insert(QString("response_type"), ::OpenAPI::toJsonValue(m_response_type));
    }
    return obj;
}

QString OAIDeviceAuthorizationCode::getClientId() const {
    return m_client_id;
}
void OAIDeviceAuthorizationCode::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIDeviceAuthorizationCode::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIDeviceAuthorizationCode::is_client_id_Valid() const{
    return m_client_id_isValid;
}

qint32 OAIDeviceAuthorizationCode::getDlMobile() const {
    return m_dl_mobile;
}
void OAIDeviceAuthorizationCode::setDlMobile(const qint32 &dl_mobile) {
    m_dl_mobile = dl_mobile;
    m_dl_mobile_isSet = true;
}

bool OAIDeviceAuthorizationCode::is_dl_mobile_Set() const{
    return m_dl_mobile_isSet;
}

bool OAIDeviceAuthorizationCode::is_dl_mobile_Valid() const{
    return m_dl_mobile_isValid;
}

QString OAIDeviceAuthorizationCode::getDlUsername() const {
    return m_dl_username;
}
void OAIDeviceAuthorizationCode::setDlUsername(const QString &dl_username) {
    m_dl_username = dl_username;
    m_dl_username_isSet = true;
}

bool OAIDeviceAuthorizationCode::is_dl_username_Set() const{
    return m_dl_username_isSet;
}

bool OAIDeviceAuthorizationCode::is_dl_username_Valid() const{
    return m_dl_username_isValid;
}

QString OAIDeviceAuthorizationCode::getResponseType() const {
    return m_response_type;
}
void OAIDeviceAuthorizationCode::setResponseType(const QString &response_type) {
    m_response_type = response_type;
    m_response_type_isSet = true;
}

bool OAIDeviceAuthorizationCode::is_response_type_Set() const{
    return m_response_type_isSet;
}

bool OAIDeviceAuthorizationCode::is_response_type_Valid() const{
    return m_response_type_isValid;
}

bool OAIDeviceAuthorizationCode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dl_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dl_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceAuthorizationCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
