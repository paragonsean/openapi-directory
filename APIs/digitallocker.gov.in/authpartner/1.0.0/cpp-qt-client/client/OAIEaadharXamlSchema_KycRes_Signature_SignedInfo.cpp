/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEaadharXamlSchema_KycRes_Signature_SignedInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::OAIEaadharXamlSchema_KycRes_Signature_SignedInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::OAIEaadharXamlSchema_KycRes_Signature_SignedInfo() {
    this->initializeModel();
}

OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::~OAIEaadharXamlSchema_KycRes_Signature_SignedInfo() {}

void OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::initializeModel() {

    m_canonicalization_method_isSet = false;
    m_canonicalization_method_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_signature_method_isSet = false;
    m_signature_method_isValid = false;
}

void OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::fromJsonObject(QJsonObject json) {

    m_canonicalization_method_isValid = ::OpenAPI::fromJsonValue(m_canonicalization_method, json[QString("CanonicalizationMethod")]);
    m_canonicalization_method_isSet = !json[QString("CanonicalizationMethod")].isNull() && m_canonicalization_method_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("Reference")]);
    m_reference_isSet = !json[QString("Reference")].isNull() && m_reference_isValid;

    m_signature_method_isValid = ::OpenAPI::fromJsonValue(m_signature_method, json[QString("SignatureMethod")]);
    m_signature_method_isSet = !json[QString("SignatureMethod")].isNull() && m_signature_method_isValid;
}

QString OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_canonicalization_method.isSet()) {
        obj.insert(QString("CanonicalizationMethod"), ::OpenAPI::toJsonValue(m_canonicalization_method));
    }
    if (m_reference.isSet()) {
        obj.insert(QString("Reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_signature_method.isSet()) {
        obj.insert(QString("SignatureMethod"), ::OpenAPI::toJsonValue(m_signature_method));
    }
    return obj;
}

OAIEaadharXamlSchema_KycRes_Signature_SignedInfo_CanonicalizationMethod OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::getCanonicalizationMethod() const {
    return m_canonicalization_method;
}
void OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::setCanonicalizationMethod(const OAIEaadharXamlSchema_KycRes_Signature_SignedInfo_CanonicalizationMethod &canonicalization_method) {
    m_canonicalization_method = canonicalization_method;
    m_canonicalization_method_isSet = true;
}

bool OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::is_canonicalization_method_Set() const{
    return m_canonicalization_method_isSet;
}

bool OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::is_canonicalization_method_Valid() const{
    return m_canonicalization_method_isValid;
}

OAIEaadharXamlSchema_KycRes_Signature_SignedInfo_Reference OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::getReference() const {
    return m_reference;
}
void OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::setReference(const OAIEaadharXamlSchema_KycRes_Signature_SignedInfo_Reference &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::is_reference_Valid() const{
    return m_reference_isValid;
}

OAIEaadharXamlSchema_KycRes_Signature_SignedInfo_CanonicalizationMethod OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::getSignatureMethod() const {
    return m_signature_method;
}
void OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::setSignatureMethod(const OAIEaadharXamlSchema_KycRes_Signature_SignedInfo_CanonicalizationMethod &signature_method) {
    m_signature_method = signature_method;
    m_signature_method_isSet = true;
}

bool OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::is_signature_method_Set() const{
    return m_signature_method_isSet;
}

bool OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::is_signature_method_Valid() const{
    return m_signature_method_isValid;
}

bool OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canonicalization_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_method.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEaadharXamlSchema_KycRes_Signature_SignedInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_canonicalization_method_isValid && m_reference_isValid && m_signature_method_isValid && true;
}

} // namespace OpenAPI
