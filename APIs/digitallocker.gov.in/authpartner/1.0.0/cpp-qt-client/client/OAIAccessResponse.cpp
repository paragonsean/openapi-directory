/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessResponse::OAIAccessResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessResponse::OAIAccessResponse() {
    this->initializeModel();
}

OAIAccessResponse::~OAIAccessResponse() {}

void OAIAccessResponse::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_digilocker_id_isSet = false;
    m_digilocker_id_isValid = false;

    m_dob_isSet = false;
    m_dob_isValid = false;

    m_eaadhar_isSet = false;
    m_eaadhar_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reference_key_isSet = false;
    m_reference_key_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_token_type_isSet = false;
    m_token_type_isValid = false;
}

void OAIAccessResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessResponse::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("access_token")]);
    m_access_token_isSet = !json[QString("access_token")].isNull() && m_access_token_isValid;

    m_digilocker_id_isValid = ::OpenAPI::fromJsonValue(m_digilocker_id, json[QString("digilocker_id")]);
    m_digilocker_id_isSet = !json[QString("digilocker_id")].isNull() && m_digilocker_id_isValid;

    m_dob_isValid = ::OpenAPI::fromJsonValue(m_dob, json[QString("dob")]);
    m_dob_isSet = !json[QString("dob")].isNull() && m_dob_isValid;

    m_eaadhar_isValid = ::OpenAPI::fromJsonValue(m_eaadhar, json[QString("eaadhar")]);
    m_eaadhar_isSet = !json[QString("eaadhar")].isNull() && m_eaadhar_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expires_in")]);
    m_expires_in_isSet = !json[QString("expires_in")].isNull() && m_expires_in_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reference_key_isValid = ::OpenAPI::fromJsonValue(m_reference_key, json[QString("reference_key")]);
    m_reference_key_isSet = !json[QString("reference_key")].isNull() && m_reference_key_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refresh_token")]);
    m_refresh_token_isSet = !json[QString("refresh_token")].isNull() && m_refresh_token_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_token_type_isValid = ::OpenAPI::fromJsonValue(m_token_type, json[QString("token_type")]);
    m_token_type_isSet = !json[QString("token_type")].isNull() && m_token_type_isValid;
}

QString OAIAccessResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("access_token"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_digilocker_id_isSet) {
        obj.insert(QString("digilocker_id"), ::OpenAPI::toJsonValue(m_digilocker_id));
    }
    if (m_dob_isSet) {
        obj.insert(QString("dob"), ::OpenAPI::toJsonValue(m_dob));
    }
    if (m_eaadhar_isSet) {
        obj.insert(QString("eaadhar"), ::OpenAPI::toJsonValue(m_eaadhar));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expires_in"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reference_key_isSet) {
        obj.insert(QString("reference_key"), ::OpenAPI::toJsonValue(m_reference_key));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refresh_token"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_token_type_isSet) {
        obj.insert(QString("token_type"), ::OpenAPI::toJsonValue(m_token_type));
    }
    return obj;
}

QString OAIAccessResponse::getAccessToken() const {
    return m_access_token;
}
void OAIAccessResponse::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIAccessResponse::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIAccessResponse::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAIAccessResponse::getDigilockerId() const {
    return m_digilocker_id;
}
void OAIAccessResponse::setDigilockerId(const QString &digilocker_id) {
    m_digilocker_id = digilocker_id;
    m_digilocker_id_isSet = true;
}

bool OAIAccessResponse::is_digilocker_id_Set() const{
    return m_digilocker_id_isSet;
}

bool OAIAccessResponse::is_digilocker_id_Valid() const{
    return m_digilocker_id_isValid;
}

qint32 OAIAccessResponse::getDob() const {
    return m_dob;
}
void OAIAccessResponse::setDob(const qint32 &dob) {
    m_dob = dob;
    m_dob_isSet = true;
}

bool OAIAccessResponse::is_dob_Set() const{
    return m_dob_isSet;
}

bool OAIAccessResponse::is_dob_Valid() const{
    return m_dob_isValid;
}

QString OAIAccessResponse::getEaadhar() const {
    return m_eaadhar;
}
void OAIAccessResponse::setEaadhar(const QString &eaadhar) {
    m_eaadhar = eaadhar;
    m_eaadhar_isSet = true;
}

bool OAIAccessResponse::is_eaadhar_Set() const{
    return m_eaadhar_isSet;
}

bool OAIAccessResponse::is_eaadhar_Valid() const{
    return m_eaadhar_isValid;
}

qint64 OAIAccessResponse::getExpiresIn() const {
    return m_expires_in;
}
void OAIAccessResponse::setExpiresIn(const qint64 &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIAccessResponse::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIAccessResponse::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAIAccessResponse::getGender() const {
    return m_gender;
}
void OAIAccessResponse::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIAccessResponse::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIAccessResponse::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIAccessResponse::getName() const {
    return m_name;
}
void OAIAccessResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccessResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccessResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccessResponse::getReferenceKey() const {
    return m_reference_key;
}
void OAIAccessResponse::setReferenceKey(const QString &reference_key) {
    m_reference_key = reference_key;
    m_reference_key_isSet = true;
}

bool OAIAccessResponse::is_reference_key_Set() const{
    return m_reference_key_isSet;
}

bool OAIAccessResponse::is_reference_key_Valid() const{
    return m_reference_key_isValid;
}

QString OAIAccessResponse::getRefreshToken() const {
    return m_refresh_token;
}
void OAIAccessResponse::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIAccessResponse::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIAccessResponse::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

QString OAIAccessResponse::getScope() const {
    return m_scope;
}
void OAIAccessResponse::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIAccessResponse::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIAccessResponse::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIAccessResponse::getTokenType() const {
    return m_token_type;
}
void OAIAccessResponse::setTokenType(const QString &token_type) {
    m_token_type = token_type;
    m_token_type_isSet = true;
}

bool OAIAccessResponse::is_token_type_Set() const{
    return m_token_type_isSet;
}

bool OAIAccessResponse::is_token_type_Valid() const{
    return m_token_type_isValid;
}

bool OAIAccessResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digilocker_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eaadhar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_token_isValid && m_digilocker_id_isValid && m_dob_isValid && m_eaadhar_isValid && m_expires_in_isValid && m_gender_isValid && m_name_isValid && m_reference_key_isValid && m_refresh_token_isValid && m_scope_isValid && m_token_type_isValid && true;
}

} // namespace OpenAPI
