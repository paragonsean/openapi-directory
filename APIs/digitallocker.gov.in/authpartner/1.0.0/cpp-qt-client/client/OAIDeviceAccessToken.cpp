/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceAccessToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceAccessToken::OAIDeviceAccessToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceAccessToken::OAIDeviceAccessToken() {
    this->initializeModel();
}

OAIDeviceAccessToken::~OAIDeviceAccessToken() {}

void OAIDeviceAccessToken::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_device_code_isSet = false;
    m_device_code_isValid = false;

    m_dl_otp_isSet = false;
    m_dl_otp_isValid = false;

    m_grant_type_isSet = false;
    m_grant_type_isValid = false;
}

void OAIDeviceAccessToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceAccessToken::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_device_code_isValid = ::OpenAPI::fromJsonValue(m_device_code, json[QString("device_code")]);
    m_device_code_isSet = !json[QString("device_code")].isNull() && m_device_code_isValid;

    m_dl_otp_isValid = ::OpenAPI::fromJsonValue(m_dl_otp, json[QString("dl_otp")]);
    m_dl_otp_isSet = !json[QString("dl_otp")].isNull() && m_dl_otp_isValid;

    m_grant_type_isValid = ::OpenAPI::fromJsonValue(m_grant_type, json[QString("grant_type")]);
    m_grant_type_isSet = !json[QString("grant_type")].isNull() && m_grant_type_isValid;
}

QString OAIDeviceAccessToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceAccessToken::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_device_code_isSet) {
        obj.insert(QString("device_code"), ::OpenAPI::toJsonValue(m_device_code));
    }
    if (m_dl_otp_isSet) {
        obj.insert(QString("dl_otp"), ::OpenAPI::toJsonValue(m_dl_otp));
    }
    if (m_grant_type_isSet) {
        obj.insert(QString("grant_type"), ::OpenAPI::toJsonValue(m_grant_type));
    }
    return obj;
}

QString OAIDeviceAccessToken::getClientId() const {
    return m_client_id;
}
void OAIDeviceAccessToken::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIDeviceAccessToken::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIDeviceAccessToken::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIDeviceAccessToken::getDeviceCode() const {
    return m_device_code;
}
void OAIDeviceAccessToken::setDeviceCode(const QString &device_code) {
    m_device_code = device_code;
    m_device_code_isSet = true;
}

bool OAIDeviceAccessToken::is_device_code_Set() const{
    return m_device_code_isSet;
}

bool OAIDeviceAccessToken::is_device_code_Valid() const{
    return m_device_code_isValid;
}

QString OAIDeviceAccessToken::getDlOtp() const {
    return m_dl_otp;
}
void OAIDeviceAccessToken::setDlOtp(const QString &dl_otp) {
    m_dl_otp = dl_otp;
    m_dl_otp_isSet = true;
}

bool OAIDeviceAccessToken::is_dl_otp_Set() const{
    return m_dl_otp_isSet;
}

bool OAIDeviceAccessToken::is_dl_otp_Valid() const{
    return m_dl_otp_isValid;
}

QString OAIDeviceAccessToken::getGrantType() const {
    return m_grant_type;
}
void OAIDeviceAccessToken::setGrantType(const QString &grant_type) {
    m_grant_type = grant_type;
    m_grant_type_isSet = true;
}

bool OAIDeviceAccessToken::is_grant_type_Set() const{
    return m_grant_type_isSet;
}

bool OAIDeviceAccessToken::is_grant_type_Valid() const{
    return m_grant_type_isValid;
}

bool OAIDeviceAccessToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dl_otp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceAccessToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
