/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocTypeResponse_documents_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocTypeResponse_documents_inner::OAIDocTypeResponse_documents_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocTypeResponse_documents_inner::OAIDocTypeResponse_documents_inner() {
    this->initializeModel();
}

OAIDocTypeResponse_documents_inner::~OAIDocTypeResponse_documents_inner() {}

void OAIDocTypeResponse_documents_inner::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_doctype_isSet = false;
    m_doctype_isValid = false;
}

void OAIDocTypeResponse_documents_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocTypeResponse_documents_inner::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_doctype_isValid = ::OpenAPI::fromJsonValue(m_doctype, json[QString("doctype")]);
    m_doctype_isSet = !json[QString("doctype")].isNull() && m_doctype_isValid;
}

QString OAIDocTypeResponse_documents_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocTypeResponse_documents_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_doctype_isSet) {
        obj.insert(QString("doctype"), ::OpenAPI::toJsonValue(m_doctype));
    }
    return obj;
}

QString OAIDocTypeResponse_documents_inner::getDescription() const {
    return m_description;
}
void OAIDocTypeResponse_documents_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDocTypeResponse_documents_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDocTypeResponse_documents_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDocTypeResponse_documents_inner::getDoctype() const {
    return m_doctype;
}
void OAIDocTypeResponse_documents_inner::setDoctype(const QString &doctype) {
    m_doctype = doctype;
    m_doctype_isSet = true;
}

bool OAIDocTypeResponse_documents_inner::is_doctype_Set() const{
    return m_doctype_isSet;
}

bool OAIDocTypeResponse_documents_inner::is_doctype_Valid() const{
    return m_doctype_isValid;
}

bool OAIDocTypeResponse_documents_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doctype_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocTypeResponse_documents_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_doctype_isValid && true;
}

} // namespace OpenAPI
