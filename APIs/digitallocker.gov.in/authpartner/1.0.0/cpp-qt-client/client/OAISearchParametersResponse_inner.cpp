/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchParametersResponse_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchParametersResponse_inner::OAISearchParametersResponse_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchParametersResponse_inner::OAISearchParametersResponse_inner() {
    this->initializeModel();
}

OAISearchParametersResponse_inner::~OAISearchParametersResponse_inner() {}

void OAISearchParametersResponse_inner::initializeModel() {

    m_example_isSet = false;
    m_example_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_paramname_isSet = false;
    m_paramname_isValid = false;

    m_valuelist_isSet = false;
    m_valuelist_isValid = false;
}

void OAISearchParametersResponse_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchParametersResponse_inner::fromJsonObject(QJsonObject json) {

    m_example_isValid = ::OpenAPI::fromJsonValue(m_example, json[QString("example")]);
    m_example_isSet = !json[QString("example")].isNull() && m_example_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_paramname_isValid = ::OpenAPI::fromJsonValue(m_paramname, json[QString("paramname")]);
    m_paramname_isSet = !json[QString("paramname")].isNull() && m_paramname_isValid;

    m_valuelist_isValid = ::OpenAPI::fromJsonValue(m_valuelist, json[QString("valuelist")]);
    m_valuelist_isSet = !json[QString("valuelist")].isNull() && m_valuelist_isValid;
}

QString OAISearchParametersResponse_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchParametersResponse_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_example_isSet) {
        obj.insert(QString("example"), ::OpenAPI::toJsonValue(m_example));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_paramname_isSet) {
        obj.insert(QString("paramname"), ::OpenAPI::toJsonValue(m_paramname));
    }
    if (m_valuelist_isSet) {
        obj.insert(QString("valuelist"), ::OpenAPI::toJsonValue(m_valuelist));
    }
    return obj;
}

QString OAISearchParametersResponse_inner::getExample() const {
    return m_example;
}
void OAISearchParametersResponse_inner::setExample(const QString &example) {
    m_example = example;
    m_example_isSet = true;
}

bool OAISearchParametersResponse_inner::is_example_Set() const{
    return m_example_isSet;
}

bool OAISearchParametersResponse_inner::is_example_Valid() const{
    return m_example_isValid;
}

QString OAISearchParametersResponse_inner::getLabel() const {
    return m_label;
}
void OAISearchParametersResponse_inner::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAISearchParametersResponse_inner::is_label_Set() const{
    return m_label_isSet;
}

bool OAISearchParametersResponse_inner::is_label_Valid() const{
    return m_label_isValid;
}

QString OAISearchParametersResponse_inner::getParamname() const {
    return m_paramname;
}
void OAISearchParametersResponse_inner::setParamname(const QString &paramname) {
    m_paramname = paramname;
    m_paramname_isSet = true;
}

bool OAISearchParametersResponse_inner::is_paramname_Set() const{
    return m_paramname_isSet;
}

bool OAISearchParametersResponse_inner::is_paramname_Valid() const{
    return m_paramname_isValid;
}

QJsonValue OAISearchParametersResponse_inner::getValuelist() const {
    return m_valuelist;
}
void OAISearchParametersResponse_inner::setValuelist(const QJsonValue &valuelist) {
    m_valuelist = valuelist;
    m_valuelist_isSet = true;
}

bool OAISearchParametersResponse_inner::is_valuelist_Set() const{
    return m_valuelist_isSet;
}

bool OAISearchParametersResponse_inner::is_valuelist_Valid() const{
    return m_valuelist_isValid;
}

bool OAISearchParametersResponse_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_example_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paramname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valuelist_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchParametersResponse_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_example_isValid && m_label_isValid && m_paramname_isValid && true;
}

} // namespace OpenAPI
