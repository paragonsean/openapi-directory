/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDigiLockerSignUpAPIsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDigiLockerSignUpAPIsApi::OAIDigiLockerSignUpAPIsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDigiLockerSignUpAPIsApi::~OAIDigiLockerSignUpAPIsApi() {
}

void OAIDigiLockerSignUpAPIsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://betaapi.digitallocker.gov.in/public"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("sIGN_UP_id", defaultConf);
    _serverIndices.insert("sIGN_UP_id", 0);
    _serverConfigs.insert("verify_OTP_id", defaultConf);
    _serverIndices.insert("verify_OTP_id", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDigiLockerSignUpAPIsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDigiLockerSignUpAPIsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDigiLockerSignUpAPIsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDigiLockerSignUpAPIsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDigiLockerSignUpAPIsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDigiLockerSignUpAPIsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDigiLockerSignUpAPIsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDigiLockerSignUpAPIsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDigiLockerSignUpAPIsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDigiLockerSignUpAPIsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDigiLockerSignUpAPIsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDigiLockerSignUpAPIsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDigiLockerSignUpAPIsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDigiLockerSignUpAPIsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDigiLockerSignUpAPIsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDigiLockerSignUpAPIsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDigiLockerSignUpAPIsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDigiLockerSignUpAPIsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDigiLockerSignUpAPIsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDigiLockerSignUpAPIsApi::sIGN_UP_id(const ::OpenAPI::OptionalParam<QString> &clientid, const ::OpenAPI::OptionalParam<QString> &consent, const ::OpenAPI::OptionalParam<QString> &demoauth, const ::OpenAPI::OptionalParam<qint32> &dob, const ::OpenAPI::OptionalParam<QString> &gender, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &hmac, const ::OpenAPI::OptionalParam<qint32> &mobile, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QString> &ts, const ::OpenAPI::OptionalParam<qint32> &uid, const ::OpenAPI::OptionalParam<QString> &verification) {
    QString fullPath = QString(_serverConfigs["sIGN_UP_id"][_serverIndices.value("sIGN_UP_id")].URL()+"/signup/2/demoauth");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (clientid.hasValue())
    {
        input.add_var("clientid", ::OpenAPI::toStringValue(clientid.value()));
    }
    if (consent.hasValue())
    {
        input.add_var("consent", ::OpenAPI::toStringValue(consent.value()));
    }
    if (demoauth.hasValue())
    {
        input.add_var("demoauth", ::OpenAPI::toStringValue(demoauth.value()));
    }
    if (dob.hasValue())
    {
        input.add_var("dob", ::OpenAPI::toStringValue(dob.value()));
    }
    if (gender.hasValue())
    {
        input.add_var("gender", ::OpenAPI::toStringValue(gender.value()));
    }
    if (hmac.hasValue())
    {
        input.add_file("hmac", hmac.value().local_filename, hmac.value().request_filename, hmac.value().mime_type);
    }
    if (mobile.hasValue())
    {
        input.add_var("mobile", ::OpenAPI::toStringValue(mobile.value()));
    }
    if (name.hasValue())
    {
        input.add_var("name", ::OpenAPI::toStringValue(name.value()));
    }
    if (ts.hasValue())
    {
        input.add_var("ts", ::OpenAPI::toStringValue(ts.value()));
    }
    if (uid.hasValue())
    {
        input.add_var("uid", ::OpenAPI::toStringValue(uid.value()));
    }
    if (verification.hasValue())
    {
        input.add_var("verification", ::OpenAPI::toStringValue(verification.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDigiLockerSignUpAPIsApi::sIGN_UP_idCallback);
    connect(this, &OAIDigiLockerSignUpAPIsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _OauthMethod = 3;
    _authFlow.unlink();
    _implicitFlow.unlink();
    _passwordFlow.unlink();
    _credentialFlow.link();
    QStringList scope;
    auto token = _credentialFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDigiLockerSignUpAPIsApi::sIGN_UP_idCallback);
    connect(this, &OAIDigiLockerSignUpAPIsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    worker->execute(&input);
}

void OAIDigiLockerSignUpAPIsApi::sIGN_UP_idCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDemoAuthResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sIGN_UP_idSignal(output);
        Q_EMIT sIGN_UP_idSignalFull(worker, output);

    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_credentialFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        QString scopeStr = scope.join(" ");
        QString tokenUrl("https://betaapi.digitallocker.gov.in/public/oauth2/1/token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _credentialFlow.setVariables(tokenUrl , scopeStr, "clientId", "clientSecret");
        Q_EMIT _credentialFlow.authenticationNeeded();

    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sIGN_UP_idSignalE(output, error_type, error_str);
        Q_EMIT sIGN_UP_idSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sIGN_UP_idSignalError(output, error_type, error_str);
        Q_EMIT sIGN_UP_idSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDigiLockerSignUpAPIsApi::verify_OTP_id(const ::OpenAPI::OptionalParam<QString> &clientid, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &hmac, const ::OpenAPI::OptionalParam<qint32> &mobile, const ::OpenAPI::OptionalParam<qint32> &otp, const ::OpenAPI::OptionalParam<QString> &ts) {
    QString fullPath = QString(_serverConfigs["verify_OTP_id"][_serverIndices.value("verify_OTP_id")].URL()+"/signup/1/demoauthverify");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (clientid.hasValue())
    {
        input.add_var("clientid", ::OpenAPI::toStringValue(clientid.value()));
    }
    if (hmac.hasValue())
    {
        input.add_file("hmac", hmac.value().local_filename, hmac.value().request_filename, hmac.value().mime_type);
    }
    if (mobile.hasValue())
    {
        input.add_var("mobile", ::OpenAPI::toStringValue(mobile.value()));
    }
    if (otp.hasValue())
    {
        input.add_var("otp", ::OpenAPI::toStringValue(otp.value()));
    }
    if (ts.hasValue())
    {
        input.add_var("ts", ::OpenAPI::toStringValue(ts.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDigiLockerSignUpAPIsApi::verify_OTP_idCallback);
    connect(this, &OAIDigiLockerSignUpAPIsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _OauthMethod = 3;
    _authFlow.unlink();
    _implicitFlow.unlink();
    _passwordFlow.unlink();
    _credentialFlow.link();
    QStringList scope;
    auto token = _credentialFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDigiLockerSignUpAPIsApi::verify_OTP_idCallback);
    connect(this, &OAIDigiLockerSignUpAPIsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;


    worker->execute(&input);
}

void OAIDigiLockerSignUpAPIsApi::verify_OTP_idCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDemoAuthVerifyResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT verify_OTP_idSignal(output);
        Q_EMIT verify_OTP_idSignalFull(worker, output);

    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_credentialFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        QString scopeStr = scope.join(" ");
        QString tokenUrl("https://betaapi.digitallocker.gov.in/public/oauth2/1/token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _credentialFlow.setVariables(tokenUrl , scopeStr, "clientId", "clientSecret");
        Q_EMIT _credentialFlow.authenticationNeeded();

    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT verify_OTP_idSignalE(output, error_type, error_str);
        Q_EMIT verify_OTP_idSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT verify_OTP_idSignalError(output, error_type, error_str);
        Q_EMIT verify_OTP_idSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDigiLockerSignUpAPIsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
