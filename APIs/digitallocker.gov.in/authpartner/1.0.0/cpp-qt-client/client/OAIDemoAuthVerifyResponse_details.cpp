/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDemoAuthVerifyResponse_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDemoAuthVerifyResponse_details::OAIDemoAuthVerifyResponse_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDemoAuthVerifyResponse_details::OAIDemoAuthVerifyResponse_details() {
    this->initializeModel();
}

OAIDemoAuthVerifyResponse_details::~OAIDemoAuthVerifyResponse_details() {}

void OAIDemoAuthVerifyResponse_details::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_token_type_isSet = false;
    m_token_type_isValid = false;
}

void OAIDemoAuthVerifyResponse_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDemoAuthVerifyResponse_details::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("access_token")]);
    m_access_token_isSet = !json[QString("access_token")].isNull() && m_access_token_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expires_in")]);
    m_expires_in_isSet = !json[QString("expires_in")].isNull() && m_expires_in_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refresh_token")]);
    m_refresh_token_isSet = !json[QString("refresh_token")].isNull() && m_refresh_token_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_token_type_isValid = ::OpenAPI::fromJsonValue(m_token_type, json[QString("token_type")]);
    m_token_type_isSet = !json[QString("token_type")].isNull() && m_token_type_isValid;
}

QString OAIDemoAuthVerifyResponse_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDemoAuthVerifyResponse_details::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("access_token"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expires_in"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refresh_token"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_token_type_isSet) {
        obj.insert(QString("token_type"), ::OpenAPI::toJsonValue(m_token_type));
    }
    return obj;
}

QString OAIDemoAuthVerifyResponse_details::getAccessToken() const {
    return m_access_token;
}
void OAIDemoAuthVerifyResponse_details::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIDemoAuthVerifyResponse_details::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIDemoAuthVerifyResponse_details::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAIDemoAuthVerifyResponse_details::getExpiresIn() const {
    return m_expires_in;
}
void OAIDemoAuthVerifyResponse_details::setExpiresIn(const QString &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIDemoAuthVerifyResponse_details::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIDemoAuthVerifyResponse_details::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAIDemoAuthVerifyResponse_details::getRefreshToken() const {
    return m_refresh_token;
}
void OAIDemoAuthVerifyResponse_details::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIDemoAuthVerifyResponse_details::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIDemoAuthVerifyResponse_details::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

QString OAIDemoAuthVerifyResponse_details::getScope() const {
    return m_scope;
}
void OAIDemoAuthVerifyResponse_details::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIDemoAuthVerifyResponse_details::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIDemoAuthVerifyResponse_details::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIDemoAuthVerifyResponse_details::getTokenType() const {
    return m_token_type;
}
void OAIDemoAuthVerifyResponse_details::setTokenType(const QString &token_type) {
    m_token_type = token_type;
    m_token_type_isSet = true;
}

bool OAIDemoAuthVerifyResponse_details::is_token_type_Set() const{
    return m_token_type_isSet;
}

bool OAIDemoAuthVerifyResponse_details::is_token_type_Valid() const{
    return m_token_type_isValid;
}

bool OAIDemoAuthVerifyResponse_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDemoAuthVerifyResponse_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_token_isValid && m_expires_in_isValid && m_refresh_token_isValid && m_scope_isValid && m_token_type_isValid && true;
}

} // namespace OpenAPI
