/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileAPIsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIFileAPIsApi::OAIFileAPIsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIFileAPIsApi::~OAIFileAPIsApi() {
}

void OAIFileAPIsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://betaapi.digitallocker.gov.in/public"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("get_Certificate_Data_in_XML_Format_from_URI_id", defaultConf);
    _serverIndices.insert("get_Certificate_Data_in_XML_Format_from_URI_id", 0);
    _serverConfigs.insert("get_File_from_URI_id", defaultConf);
    _serverIndices.insert("get_File_from_URI_id", 0);
    _serverConfigs.insert("get_List_of_Self_Uploaded_Documents", defaultConf);
    _serverIndices.insert("get_List_of_Self_Uploaded_Documents", 0);
    _serverConfigs.insert("get_List_of_Self_Uploaded_Documents_id", defaultConf);
    _serverIndices.insert("get_List_of_Self_Uploaded_Documents_id", 0);
    _serverConfigs.insert("get_List_of_issued_Documents_Version1_id", defaultConf);
    _serverIndices.insert("get_List_of_issued_Documents_Version1_id", 0);
    _serverConfigs.insert("get_List_of_issued_Documents_id", defaultConf);
    _serverIndices.insert("get_List_of_issued_Documents_id", 0);
    _serverConfigs.insert("get_eAadhaar_Data_in_XML_Format_id", defaultConf);
    _serverIndices.insert("get_eAadhaar_Data_in_XML_Format_id", 0);
    _serverConfigs.insert("pull_Document_id", defaultConf);
    _serverIndices.insert("pull_Document_id", 0);
    _serverConfigs.insert("upload_File_to_Locker_id", defaultConf);
    _serverIndices.insert("upload_File_to_Locker_id", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIFileAPIsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIFileAPIsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIFileAPIsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIFileAPIsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIFileAPIsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIFileAPIsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIFileAPIsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIFileAPIsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIFileAPIsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIFileAPIsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIFileAPIsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIFileAPIsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIFileAPIsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIFileAPIsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIFileAPIsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIFileAPIsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIFileAPIsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIFileAPIsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIFileAPIsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIFileAPIsApi::get_Certificate_Data_in_XML_Format_from_URI_id(const QString &uri) {
    QString fullPath = QString(_serverConfigs["get_Certificate_Data_in_XML_Format_from_URI_id"][_serverIndices.value("get_Certificate_Data_in_XML_Format_from_URI_id")].URL()+"/oauth2/1/xml/{uri}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString uriPathParam("{");
        uriPathParam.append("uri").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "uri", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"uri"+pathSuffix : pathPrefix;
        fullPath.replace(uriPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(uri)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFileAPIsApi::get_Certificate_Data_in_XML_Format_from_URI_idCallback);
    connect(this, &OAIFileAPIsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFileAPIsApi::get_Certificate_Data_in_XML_Format_from_URI_idCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIXMLFormatSchema output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT get_Certificate_Data_in_XML_Format_from_URI_idSignal(output);
        Q_EMIT get_Certificate_Data_in_XML_Format_from_URI_idSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT get_Certificate_Data_in_XML_Format_from_URI_idSignalE(output, error_type, error_str);
        Q_EMIT get_Certificate_Data_in_XML_Format_from_URI_idSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT get_Certificate_Data_in_XML_Format_from_URI_idSignalError(output, error_type, error_str);
        Q_EMIT get_Certificate_Data_in_XML_Format_from_URI_idSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFileAPIsApi::get_File_from_URI_id(const QString &uri) {
    QString fullPath = QString(_serverConfigs["get_File_from_URI_id"][_serverIndices.value("get_File_from_URI_id")].URL()+"/oauth2/1/file/{uri}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString uriPathParam("{");
        uriPathParam.append("uri").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "uri", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"uri"+pathSuffix : pathPrefix;
        fullPath.replace(uriPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(uri)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFileAPIsApi::get_File_from_URI_idCallback);
    connect(this, &OAIFileAPIsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFileAPIsApi::get_File_from_URI_idCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT get_File_from_URI_idSignal(output);
        Q_EMIT get_File_from_URI_idSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT get_File_from_URI_idSignalE(output, error_type, error_str);
        Q_EMIT get_File_from_URI_idSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT get_File_from_URI_idSignalError(output, error_type, error_str);
        Q_EMIT get_File_from_URI_idSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFileAPIsApi::get_List_of_Self_Uploaded_Documents() {
    QString fullPath = QString(_serverConfigs["get_List_of_Self_Uploaded_Documents"][_serverIndices.value("get_List_of_Self_Uploaded_Documents")].URL()+"/oauth2/1/files/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFileAPIsApi::get_List_of_Self_Uploaded_DocumentsCallback);
    connect(this, &OAIFileAPIsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFileAPIsApi::get_List_of_Self_Uploaded_DocumentsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISample_1 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT get_List_of_Self_Uploaded_DocumentsSignal(output);
        Q_EMIT get_List_of_Self_Uploaded_DocumentsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT get_List_of_Self_Uploaded_DocumentsSignalE(output, error_type, error_str);
        Q_EMIT get_List_of_Self_Uploaded_DocumentsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT get_List_of_Self_Uploaded_DocumentsSignalError(output, error_type, error_str);
        Q_EMIT get_List_of_Self_Uploaded_DocumentsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFileAPIsApi::get_List_of_Self_Uploaded_Documents_id(const QString &id) {
    QString fullPath = QString(_serverConfigs["get_List_of_Self_Uploaded_Documents_id"][_serverIndices.value("get_List_of_Self_Uploaded_Documents_id")].URL()+"/oauth2/1/files/{id}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFileAPIsApi::get_List_of_Self_Uploaded_Documents_idCallback);
    connect(this, &OAIFileAPIsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFileAPIsApi::get_List_of_Self_Uploaded_Documents_idCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISample_3 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT get_List_of_Self_Uploaded_Documents_idSignal(output);
        Q_EMIT get_List_of_Self_Uploaded_Documents_idSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT get_List_of_Self_Uploaded_Documents_idSignalE(output, error_type, error_str);
        Q_EMIT get_List_of_Self_Uploaded_Documents_idSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT get_List_of_Self_Uploaded_Documents_idSignalError(output, error_type, error_str);
        Q_EMIT get_List_of_Self_Uploaded_Documents_idSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFileAPIsApi::get_List_of_issued_Documents_Version1_id() {
    QString fullPath = QString(_serverConfigs["get_List_of_issued_Documents_Version1_id"][_serverIndices.value("get_List_of_issued_Documents_Version1_id")].URL()+"/oauth2/1/files/issued");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFileAPIsApi::get_List_of_issued_Documents_Version1_idCallback);
    connect(this, &OAIFileAPIsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFileAPIsApi::get_List_of_issued_Documents_Version1_idCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISample_2 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT get_List_of_issued_Documents_Version1_idSignal(output);
        Q_EMIT get_List_of_issued_Documents_Version1_idSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT get_List_of_issued_Documents_Version1_idSignalE(output, error_type, error_str);
        Q_EMIT get_List_of_issued_Documents_Version1_idSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT get_List_of_issued_Documents_Version1_idSignalError(output, error_type, error_str);
        Q_EMIT get_List_of_issued_Documents_Version1_idSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFileAPIsApi::get_List_of_issued_Documents_id() {
    QString fullPath = QString(_serverConfigs["get_List_of_issued_Documents_id"][_serverIndices.value("get_List_of_issued_Documents_id")].URL()+"/oauth2/2/files/issued");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFileAPIsApi::get_List_of_issued_Documents_idCallback);
    connect(this, &OAIFileAPIsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFileAPIsApi::get_List_of_issued_Documents_idCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGet_List_of_issued_Documents_id_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT get_List_of_issued_Documents_idSignal(output);
        Q_EMIT get_List_of_issued_Documents_idSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT get_List_of_issued_Documents_idSignalE(output, error_type, error_str);
        Q_EMIT get_List_of_issued_Documents_idSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT get_List_of_issued_Documents_idSignalError(output, error_type, error_str);
        Q_EMIT get_List_of_issued_Documents_idSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFileAPIsApi::get_eAadhaar_Data_in_XML_Format_id() {
    QString fullPath = QString(_serverConfigs["get_eAadhaar_Data_in_XML_Format_id"][_serverIndices.value("get_eAadhaar_Data_in_XML_Format_id")].URL()+"/oauth2/2/xml/eaadhaar");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFileAPIsApi::get_eAadhaar_Data_in_XML_Format_idCallback);
    connect(this, &OAIFileAPIsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFileAPIsApi::get_eAadhaar_Data_in_XML_Format_idCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEaadharXamlSchema output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT get_eAadhaar_Data_in_XML_Format_idSignal(output);
        Q_EMIT get_eAadhaar_Data_in_XML_Format_idSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT get_eAadhaar_Data_in_XML_Format_idSignalE(output, error_type, error_str);
        Q_EMIT get_eAadhaar_Data_in_XML_Format_idSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT get_eAadhaar_Data_in_XML_Format_idSignalError(output, error_type, error_str);
        Q_EMIT get_eAadhaar_Data_in_XML_Format_idSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFileAPIsApi::pull_Document_id(const ::OpenAPI::OptionalParam<QString> &chasis_no, const ::OpenAPI::OptionalParam<QString> &consent, const ::OpenAPI::OptionalParam<QString> &doctype, const ::OpenAPI::OptionalParam<QString> &orgid, const ::OpenAPI::OptionalParam<QString> &reg_no) {
    QString fullPath = QString(_serverConfigs["pull_Document_id"][_serverIndices.value("pull_Document_id")].URL()+"/oauth2/1/pull/pulldocument");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (chasis_no.hasValue())
    {
        input.add_var("chasis_no", ::OpenAPI::toStringValue(chasis_no.value()));
    }
    if (consent.hasValue())
    {
        input.add_var("consent", ::OpenAPI::toStringValue(consent.value()));
    }
    if (doctype.hasValue())
    {
        input.add_var("doctype", ::OpenAPI::toStringValue(doctype.value()));
    }
    if (orgid.hasValue())
    {
        input.add_var("orgid", ::OpenAPI::toStringValue(orgid.value()));
    }
    if (reg_no.hasValue())
    {
        input.add_var("reg_no", ::OpenAPI::toStringValue(reg_no.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFileAPIsApi::pull_Document_idCallback);
    connect(this, &OAIFileAPIsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFileAPIsApi::pull_Document_idCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISample_4 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT pull_Document_idSignal(output);
        Q_EMIT pull_Document_idSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT pull_Document_idSignalE(output, error_type, error_str);
        Q_EMIT pull_Document_idSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT pull_Document_idSignalError(output, error_type, error_str);
        Q_EMIT pull_Document_idSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFileAPIsApi::upload_File_to_Locker_id(const ::OpenAPI::OptionalParam<QString> &path, const ::OpenAPI::OptionalParam<QString> &hmac, const ::OpenAPI::OptionalParam<OAIFileUpload> &oai_file_upload) {
    QString fullPath = QString(_serverConfigs["upload_File_to_Locker_id"][_serverIndices.value("upload_File_to_Locker_id")].URL()+"/oauth2/1/file/upload");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_file_upload.hasValue()){

        
        QByteArray output = oai_file_upload.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (path.hasValue())
    {
        if (!::OpenAPI::toStringValue(path.value()).isEmpty()) {
            input.headers.insert("path", ::OpenAPI::toStringValue(path.value()));
        }
        }
    if (hmac.hasValue())
    {
        if (!::OpenAPI::toStringValue(hmac.value()).isEmpty()) {
            input.headers.insert("hmac", ::OpenAPI::toStringValue(hmac.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFileAPIsApi::upload_File_to_Locker_idCallback);
    connect(this, &OAIFileAPIsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFileAPIsApi::upload_File_to_Locker_idCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFileUploadResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT upload_File_to_Locker_idSignal(output);
        Q_EMIT upload_File_to_Locker_idSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT upload_File_to_Locker_idSignalE(output, error_type, error_str);
        Q_EMIT upload_File_to_Locker_idSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT upload_File_to_Locker_idSignalError(output, error_type, error_str);
        Q_EMIT upload_File_to_Locker_idSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFileAPIsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
