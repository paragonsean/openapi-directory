/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISample_2_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISample_2_details::OAISample_2_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISample_2_details::OAISample_2_details() {
    this->initializeModel();
}

OAISample_2_details::~OAISample_2_details() {}

void OAISample_2_details::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_doctype_isSet = false;
    m_doctype_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_issuerid_isSet = false;
    m_issuerid_isValid = false;

    m_mime_isSet = false;
    m_mime_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAISample_2_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISample_2_details::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_doctype_isValid = ::OpenAPI::fromJsonValue(m_doctype, json[QString("doctype")]);
    m_doctype_isSet = !json[QString("doctype")].isNull() && m_doctype_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_issuerid_isValid = ::OpenAPI::fromJsonValue(m_issuerid, json[QString("issuerid")]);
    m_issuerid_isSet = !json[QString("issuerid")].isNull() && m_issuerid_isValid;

    m_mime_isValid = ::OpenAPI::fromJsonValue(m_mime, json[QString("mime")]);
    m_mime_isSet = !json[QString("mime")].isNull() && m_mime_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAISample_2_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISample_2_details::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_doctype_isSet) {
        obj.insert(QString("doctype"), ::OpenAPI::toJsonValue(m_doctype));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_issuerid_isSet) {
        obj.insert(QString("issuerid"), ::OpenAPI::toJsonValue(m_issuerid));
    }
    if (m_mime_isSet) {
        obj.insert(QString("mime"), ::OpenAPI::toJsonValue(m_mime));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAISample_2_details::getDate() const {
    return m_date;
}
void OAISample_2_details::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISample_2_details::is_date_Set() const{
    return m_date_isSet;
}

bool OAISample_2_details::is_date_Valid() const{
    return m_date_isValid;
}

QString OAISample_2_details::getDescription() const {
    return m_description;
}
void OAISample_2_details::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISample_2_details::is_description_Set() const{
    return m_description_isSet;
}

bool OAISample_2_details::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISample_2_details::getDoctype() const {
    return m_doctype;
}
void OAISample_2_details::setDoctype(const QString &doctype) {
    m_doctype = doctype;
    m_doctype_isSet = true;
}

bool OAISample_2_details::is_doctype_Set() const{
    return m_doctype_isSet;
}

bool OAISample_2_details::is_doctype_Valid() const{
    return m_doctype_isValid;
}

QString OAISample_2_details::getIssuer() const {
    return m_issuer;
}
void OAISample_2_details::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAISample_2_details::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAISample_2_details::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAISample_2_details::getIssuerid() const {
    return m_issuerid;
}
void OAISample_2_details::setIssuerid(const QString &issuerid) {
    m_issuerid = issuerid;
    m_issuerid_isSet = true;
}

bool OAISample_2_details::is_issuerid_Set() const{
    return m_issuerid_isSet;
}

bool OAISample_2_details::is_issuerid_Valid() const{
    return m_issuerid_isValid;
}

QString OAISample_2_details::getMime() const {
    return m_mime;
}
void OAISample_2_details::setMime(const QString &mime) {
    m_mime = mime;
    m_mime_isSet = true;
}

bool OAISample_2_details::is_mime_Set() const{
    return m_mime_isSet;
}

bool OAISample_2_details::is_mime_Valid() const{
    return m_mime_isValid;
}

QString OAISample_2_details::getName() const {
    return m_name;
}
void OAISample_2_details::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISample_2_details::is_name_Set() const{
    return m_name_isSet;
}

bool OAISample_2_details::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISample_2_details::getParent() const {
    return m_parent;
}
void OAISample_2_details::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAISample_2_details::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAISample_2_details::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAISample_2_details::getSize() const {
    return m_size;
}
void OAISample_2_details::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAISample_2_details::is_size_Set() const{
    return m_size_isSet;
}

bool OAISample_2_details::is_size_Valid() const{
    return m_size_isValid;
}

QString OAISample_2_details::getType() const {
    return m_type;
}
void OAISample_2_details::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISample_2_details::is_type_Set() const{
    return m_type_isSet;
}

bool OAISample_2_details::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISample_2_details::getUri() const {
    return m_uri;
}
void OAISample_2_details::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAISample_2_details::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAISample_2_details::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAISample_2_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doctype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuerid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISample_2_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_isValid && m_description_isValid && m_doctype_isValid && m_issuer_isValid && m_issuerid_isValid && m_mime_isValid && m_name_isValid && m_parent_isValid && m_size_isValid && m_type_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
