/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefreshToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefreshToken::OAIRefreshToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefreshToken::OAIRefreshToken() {
    this->initializeModel();
}

OAIRefreshToken::~OAIRefreshToken() {}

void OAIRefreshToken::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_grant_type_isSet = false;
    m_grant_type_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;
}

void OAIRefreshToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefreshToken::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("client_secret")]);
    m_client_secret_isSet = !json[QString("client_secret")].isNull() && m_client_secret_isValid;

    m_grant_type_isValid = ::OpenAPI::fromJsonValue(m_grant_type, json[QString("grant_type")]);
    m_grant_type_isSet = !json[QString("grant_type")].isNull() && m_grant_type_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refresh_token")]);
    m_refresh_token_isSet = !json[QString("refresh_token")].isNull() && m_refresh_token_isValid;
}

QString OAIRefreshToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefreshToken::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("client_secret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_grant_type_isSet) {
        obj.insert(QString("grant_type"), ::OpenAPI::toJsonValue(m_grant_type));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refresh_token"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    return obj;
}

QString OAIRefreshToken::getClientId() const {
    return m_client_id;
}
void OAIRefreshToken::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIRefreshToken::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIRefreshToken::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIRefreshToken::getClientSecret() const {
    return m_client_secret;
}
void OAIRefreshToken::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIRefreshToken::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIRefreshToken::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIRefreshToken::getGrantType() const {
    return m_grant_type;
}
void OAIRefreshToken::setGrantType(const QString &grant_type) {
    m_grant_type = grant_type;
    m_grant_type_isSet = true;
}

bool OAIRefreshToken::is_grant_type_Set() const{
    return m_grant_type_isSet;
}

bool OAIRefreshToken::is_grant_type_Valid() const{
    return m_grant_type_isValid;
}

QString OAIRefreshToken::getRefreshToken() const {
    return m_refresh_token;
}
void OAIRefreshToken::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIRefreshToken::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIRefreshToken::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

bool OAIRefreshToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefreshToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_client_secret_isValid && m_grant_type_isValid && m_refresh_token_isValid && true;
}

} // namespace OpenAPI
