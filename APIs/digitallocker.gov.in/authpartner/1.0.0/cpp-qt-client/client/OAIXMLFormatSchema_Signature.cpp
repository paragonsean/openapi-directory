/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXMLFormatSchema_Signature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXMLFormatSchema_Signature::OAIXMLFormatSchema_Signature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXMLFormatSchema_Signature::OAIXMLFormatSchema_Signature() {
    this->initializeModel();
}

OAIXMLFormatSchema_Signature::~OAIXMLFormatSchema_Signature() {}

void OAIXMLFormatSchema_Signature::initializeModel() {

    m_key_info_isSet = false;
    m_key_info_isValid = false;

    m_signature_value_isSet = false;
    m_signature_value_isValid = false;

    m_signed_info_isSet = false;
    m_signed_info_isValid = false;
}

void OAIXMLFormatSchema_Signature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXMLFormatSchema_Signature::fromJsonObject(QJsonObject json) {

    m_key_info_isValid = ::OpenAPI::fromJsonValue(m_key_info, json[QString("KeyInfo")]);
    m_key_info_isSet = !json[QString("KeyInfo")].isNull() && m_key_info_isValid;

    m_signature_value_isValid = ::OpenAPI::fromJsonValue(m_signature_value, json[QString("SignatureValue")]);
    m_signature_value_isSet = !json[QString("SignatureValue")].isNull() && m_signature_value_isValid;

    m_signed_info_isValid = ::OpenAPI::fromJsonValue(m_signed_info, json[QString("SignedInfo")]);
    m_signed_info_isSet = !json[QString("SignedInfo")].isNull() && m_signed_info_isValid;
}

QString OAIXMLFormatSchema_Signature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXMLFormatSchema_Signature::asJsonObject() const {
    QJsonObject obj;
    if (m_key_info.isSet()) {
        obj.insert(QString("KeyInfo"), ::OpenAPI::toJsonValue(m_key_info));
    }
    if (m_signature_value_isSet) {
        obj.insert(QString("SignatureValue"), ::OpenAPI::toJsonValue(m_signature_value));
    }
    if (m_signed_info_isSet) {
        obj.insert(QString("SignedInfo"), ::OpenAPI::toJsonValue(m_signed_info));
    }
    return obj;
}

OAIXMLFormatSchema_Signature_KeyInfo OAIXMLFormatSchema_Signature::getKeyInfo() const {
    return m_key_info;
}
void OAIXMLFormatSchema_Signature::setKeyInfo(const OAIXMLFormatSchema_Signature_KeyInfo &key_info) {
    m_key_info = key_info;
    m_key_info_isSet = true;
}

bool OAIXMLFormatSchema_Signature::is_key_info_Set() const{
    return m_key_info_isSet;
}

bool OAIXMLFormatSchema_Signature::is_key_info_Valid() const{
    return m_key_info_isValid;
}

QJsonValue OAIXMLFormatSchema_Signature::getSignatureValue() const {
    return m_signature_value;
}
void OAIXMLFormatSchema_Signature::setSignatureValue(const QJsonValue &signature_value) {
    m_signature_value = signature_value;
    m_signature_value_isSet = true;
}

bool OAIXMLFormatSchema_Signature::is_signature_value_Set() const{
    return m_signature_value_isSet;
}

bool OAIXMLFormatSchema_Signature::is_signature_value_Valid() const{
    return m_signature_value_isValid;
}

QJsonValue OAIXMLFormatSchema_Signature::getSignedInfo() const {
    return m_signed_info;
}
void OAIXMLFormatSchema_Signature::setSignedInfo(const QJsonValue &signed_info) {
    m_signed_info = signed_info;
    m_signed_info_isSet = true;
}

bool OAIXMLFormatSchema_Signature::is_signed_info_Set() const{
    return m_signed_info_isSet;
}

bool OAIXMLFormatSchema_Signature::is_signed_info_Valid() const{
    return m_signed_info_isValid;
}

bool OAIXMLFormatSchema_Signature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_info_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXMLFormatSchema_Signature::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_info_isValid && true;
}

} // namespace OpenAPI
