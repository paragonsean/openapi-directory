/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISample_5_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISample_5_details::OAISample_5_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISample_5_details::OAISample_5_details() {
    this->initializeModel();
}

OAISample_5_details::~OAISample_5_details() {}

void OAISample_5_details::initializeModel() {

    m_digilockerid_isSet = false;
    m_digilockerid_isValid = false;

    m_dob_isSet = false;
    m_dob_isValid = false;

    m_eaadhar_isSet = false;
    m_eaadhar_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAISample_5_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISample_5_details::fromJsonObject(QJsonObject json) {

    m_digilockerid_isValid = ::OpenAPI::fromJsonValue(m_digilockerid, json[QString("digilockerid")]);
    m_digilockerid_isSet = !json[QString("digilockerid")].isNull() && m_digilockerid_isValid;

    m_dob_isValid = ::OpenAPI::fromJsonValue(m_dob, json[QString("dob")]);
    m_dob_isSet = !json[QString("dob")].isNull() && m_dob_isValid;

    m_eaadhar_isValid = ::OpenAPI::fromJsonValue(m_eaadhar, json[QString("eaadhar")]);
    m_eaadhar_isSet = !json[QString("eaadhar")].isNull() && m_eaadhar_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAISample_5_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISample_5_details::asJsonObject() const {
    QJsonObject obj;
    if (m_digilockerid_isSet) {
        obj.insert(QString("digilockerid"), ::OpenAPI::toJsonValue(m_digilockerid));
    }
    if (m_dob_isSet) {
        obj.insert(QString("dob"), ::OpenAPI::toJsonValue(m_dob));
    }
    if (m_eaadhar_isSet) {
        obj.insert(QString("eaadhar"), ::OpenAPI::toJsonValue(m_eaadhar));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAISample_5_details::getDigilockerid() const {
    return m_digilockerid;
}
void OAISample_5_details::setDigilockerid(const QString &digilockerid) {
    m_digilockerid = digilockerid;
    m_digilockerid_isSet = true;
}

bool OAISample_5_details::is_digilockerid_Set() const{
    return m_digilockerid_isSet;
}

bool OAISample_5_details::is_digilockerid_Valid() const{
    return m_digilockerid_isValid;
}

QString OAISample_5_details::getDob() const {
    return m_dob;
}
void OAISample_5_details::setDob(const QString &dob) {
    m_dob = dob;
    m_dob_isSet = true;
}

bool OAISample_5_details::is_dob_Set() const{
    return m_dob_isSet;
}

bool OAISample_5_details::is_dob_Valid() const{
    return m_dob_isValid;
}

QString OAISample_5_details::getEaadhar() const {
    return m_eaadhar;
}
void OAISample_5_details::setEaadhar(const QString &eaadhar) {
    m_eaadhar = eaadhar;
    m_eaadhar_isSet = true;
}

bool OAISample_5_details::is_eaadhar_Set() const{
    return m_eaadhar_isSet;
}

bool OAISample_5_details::is_eaadhar_Valid() const{
    return m_eaadhar_isValid;
}

QString OAISample_5_details::getGender() const {
    return m_gender;
}
void OAISample_5_details::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAISample_5_details::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAISample_5_details::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAISample_5_details::getName() const {
    return m_name;
}
void OAISample_5_details::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISample_5_details::is_name_Set() const{
    return m_name_isSet;
}

bool OAISample_5_details::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISample_5_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digilockerid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eaadhar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISample_5_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_digilockerid_isValid && m_dob_isValid && m_gender_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
