/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_List_of_issued_Documents_id_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_List_of_issued_Documents_id_200_response::OAIGet_List_of_issued_Documents_id_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_List_of_issued_Documents_id_200_response::OAIGet_List_of_issued_Documents_id_200_response() {
    this->initializeModel();
}

OAIGet_List_of_issued_Documents_id_200_response::~OAIGet_List_of_issued_Documents_id_200_response() {}

void OAIGet_List_of_issued_Documents_id_200_response::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAIGet_List_of_issued_Documents_id_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_List_of_issued_Documents_id_200_response::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;
}

QString OAIGet_List_of_issued_Documents_id_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_List_of_issued_Documents_id_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

QSet<OAIGet_List_of_issued_Documents_id_200_response_items_inner> OAIGet_List_of_issued_Documents_id_200_response::getItems() const {
    return m_items;
}
void OAIGet_List_of_issued_Documents_id_200_response::setItems(const QSet<OAIGet_List_of_issued_Documents_id_200_response_items_inner> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIGet_List_of_issued_Documents_id_200_response::is_items_Set() const{
    return m_items_isSet;
}

bool OAIGet_List_of_issued_Documents_id_200_response::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIGet_List_of_issued_Documents_id_200_response::getResource() const {
    return m_resource;
}
void OAIGet_List_of_issued_Documents_id_200_response::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIGet_List_of_issued_Documents_id_200_response::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIGet_List_of_issued_Documents_id_200_response::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAIGet_List_of_issued_Documents_id_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_List_of_issued_Documents_id_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_items_isValid && m_resource_isValid && true;
}

} // namespace OpenAPI
