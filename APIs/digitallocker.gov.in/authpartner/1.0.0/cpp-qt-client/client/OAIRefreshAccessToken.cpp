/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefreshAccessToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefreshAccessToken::OAIRefreshAccessToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefreshAccessToken::OAIRefreshAccessToken() {
    this->initializeModel();
}

OAIRefreshAccessToken::~OAIRefreshAccessToken() {}

void OAIRefreshAccessToken::initializeModel() {

    m_grant_type_isSet = false;
    m_grant_type_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;
}

void OAIRefreshAccessToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefreshAccessToken::fromJsonObject(QJsonObject json) {

    m_grant_type_isValid = ::OpenAPI::fromJsonValue(m_grant_type, json[QString("grant_type")]);
    m_grant_type_isSet = !json[QString("grant_type")].isNull() && m_grant_type_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refresh_Token")]);
    m_refresh_token_isSet = !json[QString("refresh_Token")].isNull() && m_refresh_token_isValid;
}

QString OAIRefreshAccessToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefreshAccessToken::asJsonObject() const {
    QJsonObject obj;
    if (m_grant_type_isSet) {
        obj.insert(QString("grant_type"), ::OpenAPI::toJsonValue(m_grant_type));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refresh_Token"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    return obj;
}

QString OAIRefreshAccessToken::getGrantType() const {
    return m_grant_type;
}
void OAIRefreshAccessToken::setGrantType(const QString &grant_type) {
    m_grant_type = grant_type;
    m_grant_type_isSet = true;
}

bool OAIRefreshAccessToken::is_grant_type_Set() const{
    return m_grant_type_isSet;
}

bool OAIRefreshAccessToken::is_grant_type_Valid() const{
    return m_grant_type_isValid;
}

QString OAIRefreshAccessToken::getRefreshToken() const {
    return m_refresh_token;
}
void OAIRefreshAccessToken::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIRefreshAccessToken::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIRefreshAccessToken::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

bool OAIRefreshAccessToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefreshAccessToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_grant_type_isValid && m_refresh_token_isValid && true;
}

} // namespace OpenAPI
