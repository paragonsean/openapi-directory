/**
 * Authorized Partner API Specification
 * To access files in user’s DigiLocker account from your application, you must first obtain user’s authorization.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetStatisticsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetStatisticsResponse::OAIGetStatisticsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetStatisticsResponse::OAIGetStatisticsResponse() {
    this->initializeModel();
}

OAIGetStatisticsResponse::~OAIGetStatisticsResponse() {}

void OAIGetStatisticsResponse::initializeModel() {

    m_authentic_documents_isSet = false;
    m_authentic_documents_isValid = false;

    m_count_as_on_isSet = false;
    m_count_as_on_isValid = false;

    m_issuers_isSet = false;
    m_issuers_isValid = false;

    m_monthwise_registations_isSet = false;
    m_monthwise_registations_isValid = false;

    m_requestors_isSet = false;
    m_requestors_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;

    m_yearwise_authentic_documents_isSet = false;
    m_yearwise_authentic_documents_isValid = false;
}

void OAIGetStatisticsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetStatisticsResponse::fromJsonObject(QJsonObject json) {

    m_authentic_documents_isValid = ::OpenAPI::fromJsonValue(m_authentic_documents, json[QString("authentic_documents")]);
    m_authentic_documents_isSet = !json[QString("authentic_documents")].isNull() && m_authentic_documents_isValid;

    m_count_as_on_isValid = ::OpenAPI::fromJsonValue(m_count_as_on, json[QString("count_as_on")]);
    m_count_as_on_isSet = !json[QString("count_as_on")].isNull() && m_count_as_on_isValid;

    m_issuers_isValid = ::OpenAPI::fromJsonValue(m_issuers, json[QString("issuers")]);
    m_issuers_isSet = !json[QString("issuers")].isNull() && m_issuers_isValid;

    m_monthwise_registations_isValid = ::OpenAPI::fromJsonValue(m_monthwise_registations, json[QString("monthwise_registations")]);
    m_monthwise_registations_isSet = !json[QString("monthwise_registations")].isNull() && m_monthwise_registations_isValid;

    m_requestors_isValid = ::OpenAPI::fromJsonValue(m_requestors, json[QString("requestors")]);
    m_requestors_isSet = !json[QString("requestors")].isNull() && m_requestors_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;

    m_yearwise_authentic_documents_isValid = ::OpenAPI::fromJsonValue(m_yearwise_authentic_documents, json[QString("yearwise_authentic_documents")]);
    m_yearwise_authentic_documents_isSet = !json[QString("yearwise_authentic_documents")].isNull() && m_yearwise_authentic_documents_isValid;
}

QString OAIGetStatisticsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetStatisticsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_authentic_documents_isSet) {
        obj.insert(QString("authentic_documents"), ::OpenAPI::toJsonValue(m_authentic_documents));
    }
    if (m_count_as_on_isSet) {
        obj.insert(QString("count_as_on"), ::OpenAPI::toJsonValue(m_count_as_on));
    }
    if (m_issuers_isSet) {
        obj.insert(QString("issuers"), ::OpenAPI::toJsonValue(m_issuers));
    }
    if (m_monthwise_registations.isSet()) {
        obj.insert(QString("monthwise_registations"), ::OpenAPI::toJsonValue(m_monthwise_registations));
    }
    if (m_requestors_isSet) {
        obj.insert(QString("requestors"), ::OpenAPI::toJsonValue(m_requestors));
    }
    if (m_users_isSet) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    if (m_yearwise_authentic_documents.isSet()) {
        obj.insert(QString("yearwise_authentic_documents"), ::OpenAPI::toJsonValue(m_yearwise_authentic_documents));
    }
    return obj;
}

QString OAIGetStatisticsResponse::getAuthenticDocuments() const {
    return m_authentic_documents;
}
void OAIGetStatisticsResponse::setAuthenticDocuments(const QString &authentic_documents) {
    m_authentic_documents = authentic_documents;
    m_authentic_documents_isSet = true;
}

bool OAIGetStatisticsResponse::is_authentic_documents_Set() const{
    return m_authentic_documents_isSet;
}

bool OAIGetStatisticsResponse::is_authentic_documents_Valid() const{
    return m_authentic_documents_isValid;
}

QString OAIGetStatisticsResponse::getCountAsOn() const {
    return m_count_as_on;
}
void OAIGetStatisticsResponse::setCountAsOn(const QString &count_as_on) {
    m_count_as_on = count_as_on;
    m_count_as_on_isSet = true;
}

bool OAIGetStatisticsResponse::is_count_as_on_Set() const{
    return m_count_as_on_isSet;
}

bool OAIGetStatisticsResponse::is_count_as_on_Valid() const{
    return m_count_as_on_isValid;
}

QString OAIGetStatisticsResponse::getIssuers() const {
    return m_issuers;
}
void OAIGetStatisticsResponse::setIssuers(const QString &issuers) {
    m_issuers = issuers;
    m_issuers_isSet = true;
}

bool OAIGetStatisticsResponse::is_issuers_Set() const{
    return m_issuers_isSet;
}

bool OAIGetStatisticsResponse::is_issuers_Valid() const{
    return m_issuers_isValid;
}

OAIGetStatisticsResponse_monthwise_registations OAIGetStatisticsResponse::getMonthwiseRegistations() const {
    return m_monthwise_registations;
}
void OAIGetStatisticsResponse::setMonthwiseRegistations(const OAIGetStatisticsResponse_monthwise_registations &monthwise_registations) {
    m_monthwise_registations = monthwise_registations;
    m_monthwise_registations_isSet = true;
}

bool OAIGetStatisticsResponse::is_monthwise_registations_Set() const{
    return m_monthwise_registations_isSet;
}

bool OAIGetStatisticsResponse::is_monthwise_registations_Valid() const{
    return m_monthwise_registations_isValid;
}

QString OAIGetStatisticsResponse::getRequestors() const {
    return m_requestors;
}
void OAIGetStatisticsResponse::setRequestors(const QString &requestors) {
    m_requestors = requestors;
    m_requestors_isSet = true;
}

bool OAIGetStatisticsResponse::is_requestors_Set() const{
    return m_requestors_isSet;
}

bool OAIGetStatisticsResponse::is_requestors_Valid() const{
    return m_requestors_isValid;
}

QString OAIGetStatisticsResponse::getUsers() const {
    return m_users;
}
void OAIGetStatisticsResponse::setUsers(const QString &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIGetStatisticsResponse::is_users_Set() const{
    return m_users_isSet;
}

bool OAIGetStatisticsResponse::is_users_Valid() const{
    return m_users_isValid;
}

OAIGetStatisticsResponse_yearwise_authentic_documents OAIGetStatisticsResponse::getYearwiseAuthenticDocuments() const {
    return m_yearwise_authentic_documents;
}
void OAIGetStatisticsResponse::setYearwiseAuthenticDocuments(const OAIGetStatisticsResponse_yearwise_authentic_documents &yearwise_authentic_documents) {
    m_yearwise_authentic_documents = yearwise_authentic_documents;
    m_yearwise_authentic_documents_isSet = true;
}

bool OAIGetStatisticsResponse::is_yearwise_authentic_documents_Set() const{
    return m_yearwise_authentic_documents_isSet;
}

bool OAIGetStatisticsResponse::is_yearwise_authentic_documents_Valid() const{
    return m_yearwise_authentic_documents_isValid;
}

bool OAIGetStatisticsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentic_documents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_as_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthwise_registations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requestors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yearwise_authentic_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetStatisticsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authentic_documents_isValid && m_count_as_on_isValid && m_issuers_isValid && m_monthwise_registations_isValid && m_requestors_isValid && m_users_isValid && m_yearwise_authentic_documents_isValid && true;
}

} // namespace OpenAPI
