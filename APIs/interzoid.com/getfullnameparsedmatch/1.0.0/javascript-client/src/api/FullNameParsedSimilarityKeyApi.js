/**
 * Interzoid Get Full Name Parsed Match Similarity Key API
 * This API provides a similarity key used to match with other similar full name data when data fields are parsed into first name and last name components, including for purposes of deduplication, fuzzy matching, or merging of datasets. A much higher match rate will be achieved by matching on the similarity key rather than the data itself. This API is for full name data where first and last name are in separate fields. Use the Full Name Similarity Key API for first and last name data that are in the same field.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interzoid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Getfullnameparsedmatch200Response from '../model/Getfullnameparsedmatch200Response';

/**
* FullNameParsedSimilarityKey service.
* @module api/FullNameParsedSimilarityKeyApi
* @version 1.0.0
*/
export default class FullNameParsedSimilarityKeyApi {

    /**
    * Constructs a new FullNameParsedSimilarityKeyApi. 
    * @alias module:api/FullNameParsedSimilarityKeyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getfullnameparsedmatch operation.
     * @callback module:api/FullNameParsedSimilarityKeyApi~getfullnameparsedmatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getfullnameparsedmatch200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a similarity key for matching purposes for parsed full name data
     * Gets a similarity key for matching purposes for parsed full name data, where the first name and last name are split into separate fields in the source data rather than combined.
     * @param {String} license Your Interzoid license API key. Register at www.interzoid.com/register
     * @param {String} firstname First name from which to generate similarity key
     * @param {String} lastname Last name from which to generate similarity key
     * @param {module:api/FullNameParsedSimilarityKeyApi~getfullnameparsedmatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getfullnameparsedmatch200Response}
     */
    getfullnameparsedmatch(license, firstname, lastname, callback) {
      let postBody = null;
      // verify the required parameter 'license' is set
      if (license === undefined || license === null) {
        throw new Error("Missing the required parameter 'license' when calling getfullnameparsedmatch");
      }
      // verify the required parameter 'firstname' is set
      if (firstname === undefined || firstname === null) {
        throw new Error("Missing the required parameter 'firstname' when calling getfullnameparsedmatch");
      }
      // verify the required parameter 'lastname' is set
      if (lastname === undefined || lastname === null) {
        throw new Error("Missing the required parameter 'lastname' when calling getfullnameparsedmatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'license': license,
        'firstname': firstname,
        'lastname': lastname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Getfullnameparsedmatch200Response;
      return this.apiClient.callApi(
        '/getfullnameparsedmatch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
