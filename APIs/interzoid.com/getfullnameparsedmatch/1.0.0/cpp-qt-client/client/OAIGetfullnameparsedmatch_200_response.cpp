/**
 * Interzoid Get Full Name Parsed Match Similarity Key API
 * This API provides a similarity key used to match with other similar full name data when data fields are parsed into first name and last name components, including for purposes of deduplication, fuzzy matching, or merging of datasets. A much higher match rate will be achieved by matching on the similarity key rather than the data itself. This API is for full name data where first and last name are in separate fields. Use the Full Name Similarity Key API for first and last name data that are in the same field.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interzoid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetfullnameparsedmatch_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetfullnameparsedmatch_200_response::OAIGetfullnameparsedmatch_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetfullnameparsedmatch_200_response::OAIGetfullnameparsedmatch_200_response() {
    this->initializeModel();
}

OAIGetfullnameparsedmatch_200_response::~OAIGetfullnameparsedmatch_200_response() {}

void OAIGetfullnameparsedmatch_200_response::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_credits_isSet = false;
    m_credits_isValid = false;

    m_simkey_isSet = false;
    m_simkey_isValid = false;
}

void OAIGetfullnameparsedmatch_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetfullnameparsedmatch_200_response::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_credits_isValid = ::OpenAPI::fromJsonValue(m_credits, json[QString("Credits")]);
    m_credits_isSet = !json[QString("Credits")].isNull() && m_credits_isValid;

    m_simkey_isValid = ::OpenAPI::fromJsonValue(m_simkey, json[QString("Simkey")]);
    m_simkey_isSet = !json[QString("Simkey")].isNull() && m_simkey_isValid;
}

QString OAIGetfullnameparsedmatch_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetfullnameparsedmatch_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_credits_isSet) {
        obj.insert(QString("Credits"), ::OpenAPI::toJsonValue(m_credits));
    }
    if (m_simkey_isSet) {
        obj.insert(QString("Simkey"), ::OpenAPI::toJsonValue(m_simkey));
    }
    return obj;
}

QString OAIGetfullnameparsedmatch_200_response::getCode() const {
    return m_code;
}
void OAIGetfullnameparsedmatch_200_response::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIGetfullnameparsedmatch_200_response::is_code_Set() const{
    return m_code_isSet;
}

bool OAIGetfullnameparsedmatch_200_response::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIGetfullnameparsedmatch_200_response::getCredits() const {
    return m_credits;
}
void OAIGetfullnameparsedmatch_200_response::setCredits(const QString &credits) {
    m_credits = credits;
    m_credits_isSet = true;
}

bool OAIGetfullnameparsedmatch_200_response::is_credits_Set() const{
    return m_credits_isSet;
}

bool OAIGetfullnameparsedmatch_200_response::is_credits_Valid() const{
    return m_credits_isValid;
}

QString OAIGetfullnameparsedmatch_200_response::getSimkey() const {
    return m_simkey;
}
void OAIGetfullnameparsedmatch_200_response::setSimkey(const QString &simkey) {
    m_simkey = simkey;
    m_simkey_isSet = true;
}

bool OAIGetfullnameparsedmatch_200_response::is_simkey_Set() const{
    return m_simkey_isSet;
}

bool OAIGetfullnameparsedmatch_200_response::is_simkey_Valid() const{
    return m_simkey_isValid;
}

bool OAIGetfullnameparsedmatch_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simkey_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetfullnameparsedmatch_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
