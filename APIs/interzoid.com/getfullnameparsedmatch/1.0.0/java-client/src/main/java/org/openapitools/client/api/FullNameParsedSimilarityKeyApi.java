/*
 * Interzoid Get Full Name Parsed Match Similarity Key API
 * This API provides a similarity key used to match with other similar full name data when data fields are parsed into first name and last name components, including for purposes of deduplication, fuzzy matching, or merging of datasets. A much higher match rate will be achieved by matching on the similarity key rather than the data itself. This API is for full name data where first and last name are in separate fields. Use the Full Name Similarity Key API for first and last name data that are in the same field.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interzoid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Getfullnameparsedmatch200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FullNameParsedSimilarityKeyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FullNameParsedSimilarityKeyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FullNameParsedSimilarityKeyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getfullnameparsedmatch
     * @param license Your Interzoid license API key. Register at www.interzoid.com/register (required)
     * @param firstname First name from which to generate similarity key (required)
     * @param lastname Last name from which to generate similarity key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated similarity key for parsed full name data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request - insufficient parameters </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> credits exhausted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> invalid license API key </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getfullnameparsedmatchCall(String license, String firstname, String lastname, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getfullnameparsedmatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (firstname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstname", firstname));
        }

        if (lastname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastname", lastname));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getfullnameparsedmatchValidateBeforeCall(String license, String firstname, String lastname, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'license' is set
        if (license == null) {
            throw new ApiException("Missing the required parameter 'license' when calling getfullnameparsedmatch(Async)");
        }

        // verify the required parameter 'firstname' is set
        if (firstname == null) {
            throw new ApiException("Missing the required parameter 'firstname' when calling getfullnameparsedmatch(Async)");
        }

        // verify the required parameter 'lastname' is set
        if (lastname == null) {
            throw new ApiException("Missing the required parameter 'lastname' when calling getfullnameparsedmatch(Async)");
        }

        return getfullnameparsedmatchCall(license, firstname, lastname, _callback);

    }

    /**
     * Gets a similarity key for matching purposes for parsed full name data
     * Gets a similarity key for matching purposes for parsed full name data, where the first name and last name are split into separate fields in the source data rather than combined.
     * @param license Your Interzoid license API key. Register at www.interzoid.com/register (required)
     * @param firstname First name from which to generate similarity key (required)
     * @param lastname Last name from which to generate similarity key (required)
     * @return Getfullnameparsedmatch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated similarity key for parsed full name data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request - insufficient parameters </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> credits exhausted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> invalid license API key </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Getfullnameparsedmatch200Response getfullnameparsedmatch(String license, String firstname, String lastname) throws ApiException {
        ApiResponse<Getfullnameparsedmatch200Response> localVarResp = getfullnameparsedmatchWithHttpInfo(license, firstname, lastname);
        return localVarResp.getData();
    }

    /**
     * Gets a similarity key for matching purposes for parsed full name data
     * Gets a similarity key for matching purposes for parsed full name data, where the first name and last name are split into separate fields in the source data rather than combined.
     * @param license Your Interzoid license API key. Register at www.interzoid.com/register (required)
     * @param firstname First name from which to generate similarity key (required)
     * @param lastname Last name from which to generate similarity key (required)
     * @return ApiResponse&lt;Getfullnameparsedmatch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated similarity key for parsed full name data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request - insufficient parameters </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> credits exhausted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> invalid license API key </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Getfullnameparsedmatch200Response> getfullnameparsedmatchWithHttpInfo(String license, String firstname, String lastname) throws ApiException {
        okhttp3.Call localVarCall = getfullnameparsedmatchValidateBeforeCall(license, firstname, lastname, null);
        Type localVarReturnType = new TypeToken<Getfullnameparsedmatch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a similarity key for matching purposes for parsed full name data (asynchronously)
     * Gets a similarity key for matching purposes for parsed full name data, where the first name and last name are split into separate fields in the source data rather than combined.
     * @param license Your Interzoid license API key. Register at www.interzoid.com/register (required)
     * @param firstname First name from which to generate similarity key (required)
     * @param lastname Last name from which to generate similarity key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated similarity key for parsed full name data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request - insufficient parameters </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> credits exhausted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> invalid license API key </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> method not allowed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getfullnameparsedmatchAsync(String license, String firstname, String lastname, final ApiCallback<Getfullnameparsedmatch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getfullnameparsedmatchValidateBeforeCall(license, firstname, lastname, _callback);
        Type localVarReturnType = new TypeToken<Getfullnameparsedmatch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
