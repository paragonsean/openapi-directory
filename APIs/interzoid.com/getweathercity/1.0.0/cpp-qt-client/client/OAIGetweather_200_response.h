/**
 * Interzoid Get Weather City API
 * This API provides current weather information for US Cities, including temperatures, wind speeds, wind direction, relative humidity, and visibility.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interzoid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetweather_200_response.h
 *
 * 
 */

#ifndef OAIGetweather_200_response_H
#define OAIGetweather_200_response_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetweather_200_response : public OAIObject {
public:
    OAIGetweather_200_response();
    OAIGetweather_200_response(QString json);
    ~OAIGetweather_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCity() const;
    void setCity(const QString &city);
    bool is_city_Set() const;
    bool is_city_Valid() const;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QString getCredits() const;
    void setCredits(const QString &credits);
    bool is_credits_Set() const;
    bool is_credits_Valid() const;

    QString getRelativeHumidity() const;
    void setRelativeHumidity(const QString &relative_humidity);
    bool is_relative_humidity_Set() const;
    bool is_relative_humidity_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getTempC() const;
    void setTempC(const QString &temp_c);
    bool is_temp_c_Set() const;
    bool is_temp_c_Valid() const;

    QString getTempF() const;
    void setTempF(const QString &temp_f);
    bool is_temp_f_Set() const;
    bool is_temp_f_Valid() const;

    QString getVisibilityMiles() const;
    void setVisibilityMiles(const QString &visibility_miles);
    bool is_visibility_miles_Set() const;
    bool is_visibility_miles_Valid() const;

    QString getWeather() const;
    void setWeather(const QString &weather);
    bool is_weather_Set() const;
    bool is_weather_Valid() const;

    QString getWindDir() const;
    void setWindDir(const QString &wind_dir);
    bool is_wind_dir_Set() const;
    bool is_wind_dir_Valid() const;

    QString getWindMph() const;
    void setWindMph(const QString &wind_mph);
    bool is_wind_mph_Set() const;
    bool is_wind_mph_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_city;
    bool m_city_isSet;
    bool m_city_isValid;

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QString m_credits;
    bool m_credits_isSet;
    bool m_credits_isValid;

    QString m_relative_humidity;
    bool m_relative_humidity_isSet;
    bool m_relative_humidity_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_temp_c;
    bool m_temp_c_isSet;
    bool m_temp_c_isValid;

    QString m_temp_f;
    bool m_temp_f_isSet;
    bool m_temp_f_isValid;

    QString m_visibility_miles;
    bool m_visibility_miles_isSet;
    bool m_visibility_miles_isValid;

    QString m_weather;
    bool m_weather_isSet;
    bool m_weather_isValid;

    QString m_wind_dir;
    bool m_wind_dir_isSet;
    bool m_wind_dir_isValid;

    QString m_wind_mph;
    bool m_wind_mph_isSet;
    bool m_wind_mph_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetweather_200_response)

#endif // OAIGetweather_200_response_H
