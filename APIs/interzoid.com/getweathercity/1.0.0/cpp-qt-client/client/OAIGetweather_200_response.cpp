/**
 * Interzoid Get Weather City API
 * This API provides current weather information for US Cities, including temperatures, wind speeds, wind direction, relative humidity, and visibility.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interzoid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetweather_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetweather_200_response::OAIGetweather_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetweather_200_response::OAIGetweather_200_response() {
    this->initializeModel();
}

OAIGetweather_200_response::~OAIGetweather_200_response() {}

void OAIGetweather_200_response::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_credits_isSet = false;
    m_credits_isValid = false;

    m_relative_humidity_isSet = false;
    m_relative_humidity_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_temp_c_isSet = false;
    m_temp_c_isValid = false;

    m_temp_f_isSet = false;
    m_temp_f_isValid = false;

    m_visibility_miles_isSet = false;
    m_visibility_miles_isValid = false;

    m_weather_isSet = false;
    m_weather_isValid = false;

    m_wind_dir_isSet = false;
    m_wind_dir_isValid = false;

    m_wind_mph_isSet = false;
    m_wind_mph_isValid = false;
}

void OAIGetweather_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetweather_200_response::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_credits_isValid = ::OpenAPI::fromJsonValue(m_credits, json[QString("Credits")]);
    m_credits_isSet = !json[QString("Credits")].isNull() && m_credits_isValid;

    m_relative_humidity_isValid = ::OpenAPI::fromJsonValue(m_relative_humidity, json[QString("RelativeHumidity")]);
    m_relative_humidity_isSet = !json[QString("RelativeHumidity")].isNull() && m_relative_humidity_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_temp_c_isValid = ::OpenAPI::fromJsonValue(m_temp_c, json[QString("TempC")]);
    m_temp_c_isSet = !json[QString("TempC")].isNull() && m_temp_c_isValid;

    m_temp_f_isValid = ::OpenAPI::fromJsonValue(m_temp_f, json[QString("TempF")]);
    m_temp_f_isSet = !json[QString("TempF")].isNull() && m_temp_f_isValid;

    m_visibility_miles_isValid = ::OpenAPI::fromJsonValue(m_visibility_miles, json[QString("VisibilityMiles")]);
    m_visibility_miles_isSet = !json[QString("VisibilityMiles")].isNull() && m_visibility_miles_isValid;

    m_weather_isValid = ::OpenAPI::fromJsonValue(m_weather, json[QString("Weather")]);
    m_weather_isSet = !json[QString("Weather")].isNull() && m_weather_isValid;

    m_wind_dir_isValid = ::OpenAPI::fromJsonValue(m_wind_dir, json[QString("WindDir")]);
    m_wind_dir_isSet = !json[QString("WindDir")].isNull() && m_wind_dir_isValid;

    m_wind_mph_isValid = ::OpenAPI::fromJsonValue(m_wind_mph, json[QString("WindMPH")]);
    m_wind_mph_isSet = !json[QString("WindMPH")].isNull() && m_wind_mph_isValid;
}

QString OAIGetweather_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetweather_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_credits_isSet) {
        obj.insert(QString("Credits"), ::OpenAPI::toJsonValue(m_credits));
    }
    if (m_relative_humidity_isSet) {
        obj.insert(QString("RelativeHumidity"), ::OpenAPI::toJsonValue(m_relative_humidity));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_temp_c_isSet) {
        obj.insert(QString("TempC"), ::OpenAPI::toJsonValue(m_temp_c));
    }
    if (m_temp_f_isSet) {
        obj.insert(QString("TempF"), ::OpenAPI::toJsonValue(m_temp_f));
    }
    if (m_visibility_miles_isSet) {
        obj.insert(QString("VisibilityMiles"), ::OpenAPI::toJsonValue(m_visibility_miles));
    }
    if (m_weather_isSet) {
        obj.insert(QString("Weather"), ::OpenAPI::toJsonValue(m_weather));
    }
    if (m_wind_dir_isSet) {
        obj.insert(QString("WindDir"), ::OpenAPI::toJsonValue(m_wind_dir));
    }
    if (m_wind_mph_isSet) {
        obj.insert(QString("WindMPH"), ::OpenAPI::toJsonValue(m_wind_mph));
    }
    return obj;
}

QString OAIGetweather_200_response::getCity() const {
    return m_city;
}
void OAIGetweather_200_response::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIGetweather_200_response::is_city_Set() const{
    return m_city_isSet;
}

bool OAIGetweather_200_response::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIGetweather_200_response::getCode() const {
    return m_code;
}
void OAIGetweather_200_response::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIGetweather_200_response::is_code_Set() const{
    return m_code_isSet;
}

bool OAIGetweather_200_response::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIGetweather_200_response::getCredits() const {
    return m_credits;
}
void OAIGetweather_200_response::setCredits(const QString &credits) {
    m_credits = credits;
    m_credits_isSet = true;
}

bool OAIGetweather_200_response::is_credits_Set() const{
    return m_credits_isSet;
}

bool OAIGetweather_200_response::is_credits_Valid() const{
    return m_credits_isValid;
}

QString OAIGetweather_200_response::getRelativeHumidity() const {
    return m_relative_humidity;
}
void OAIGetweather_200_response::setRelativeHumidity(const QString &relative_humidity) {
    m_relative_humidity = relative_humidity;
    m_relative_humidity_isSet = true;
}

bool OAIGetweather_200_response::is_relative_humidity_Set() const{
    return m_relative_humidity_isSet;
}

bool OAIGetweather_200_response::is_relative_humidity_Valid() const{
    return m_relative_humidity_isValid;
}

QString OAIGetweather_200_response::getState() const {
    return m_state;
}
void OAIGetweather_200_response::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetweather_200_response::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetweather_200_response::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGetweather_200_response::getTempC() const {
    return m_temp_c;
}
void OAIGetweather_200_response::setTempC(const QString &temp_c) {
    m_temp_c = temp_c;
    m_temp_c_isSet = true;
}

bool OAIGetweather_200_response::is_temp_c_Set() const{
    return m_temp_c_isSet;
}

bool OAIGetweather_200_response::is_temp_c_Valid() const{
    return m_temp_c_isValid;
}

QString OAIGetweather_200_response::getTempF() const {
    return m_temp_f;
}
void OAIGetweather_200_response::setTempF(const QString &temp_f) {
    m_temp_f = temp_f;
    m_temp_f_isSet = true;
}

bool OAIGetweather_200_response::is_temp_f_Set() const{
    return m_temp_f_isSet;
}

bool OAIGetweather_200_response::is_temp_f_Valid() const{
    return m_temp_f_isValid;
}

QString OAIGetweather_200_response::getVisibilityMiles() const {
    return m_visibility_miles;
}
void OAIGetweather_200_response::setVisibilityMiles(const QString &visibility_miles) {
    m_visibility_miles = visibility_miles;
    m_visibility_miles_isSet = true;
}

bool OAIGetweather_200_response::is_visibility_miles_Set() const{
    return m_visibility_miles_isSet;
}

bool OAIGetweather_200_response::is_visibility_miles_Valid() const{
    return m_visibility_miles_isValid;
}

QString OAIGetweather_200_response::getWeather() const {
    return m_weather;
}
void OAIGetweather_200_response::setWeather(const QString &weather) {
    m_weather = weather;
    m_weather_isSet = true;
}

bool OAIGetweather_200_response::is_weather_Set() const{
    return m_weather_isSet;
}

bool OAIGetweather_200_response::is_weather_Valid() const{
    return m_weather_isValid;
}

QString OAIGetweather_200_response::getWindDir() const {
    return m_wind_dir;
}
void OAIGetweather_200_response::setWindDir(const QString &wind_dir) {
    m_wind_dir = wind_dir;
    m_wind_dir_isSet = true;
}

bool OAIGetweather_200_response::is_wind_dir_Set() const{
    return m_wind_dir_isSet;
}

bool OAIGetweather_200_response::is_wind_dir_Valid() const{
    return m_wind_dir_isValid;
}

QString OAIGetweather_200_response::getWindMph() const {
    return m_wind_mph;
}
void OAIGetweather_200_response::setWindMph(const QString &wind_mph) {
    m_wind_mph = wind_mph;
    m_wind_mph_isSet = true;
}

bool OAIGetweather_200_response::is_wind_mph_Set() const{
    return m_wind_mph_isSet;
}

bool OAIGetweather_200_response::is_wind_mph_Valid() const{
    return m_wind_mph_isValid;
}

bool OAIGetweather_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_humidity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_f_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_miles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weather_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_mph_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetweather_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
