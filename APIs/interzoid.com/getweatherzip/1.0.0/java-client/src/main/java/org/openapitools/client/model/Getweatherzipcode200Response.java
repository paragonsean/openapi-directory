/*
 * Interzoid Get Weather By Zip Code API
 * This API provides current weather information for US Cities, including temperatures, wind speeds, wind direction, relative humidity, and visibility.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interzoid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Getweatherzipcode200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:25.375626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Getweatherzipcode200Response {
  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CREDITS = "Credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private String credits;

  public static final String SERIALIZED_NAME_RELATIVE_HUMIDITY = "RelativeHumidity";
  @SerializedName(SERIALIZED_NAME_RELATIVE_HUMIDITY)
  private String relativeHumidity;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TEMP_C = "TempC";
  @SerializedName(SERIALIZED_NAME_TEMP_C)
  private String tempC;

  public static final String SERIALIZED_NAME_TEMP_F = "TempF";
  @SerializedName(SERIALIZED_NAME_TEMP_F)
  private String tempF;

  public static final String SERIALIZED_NAME_VISIBILITY_MILES = "VisibilityMiles";
  @SerializedName(SERIALIZED_NAME_VISIBILITY_MILES)
  private String visibilityMiles;

  public static final String SERIALIZED_NAME_WEATHER = "Weather";
  @SerializedName(SERIALIZED_NAME_WEATHER)
  private String weather;

  public static final String SERIALIZED_NAME_WIND_DIR = "WindDir";
  @SerializedName(SERIALIZED_NAME_WIND_DIR)
  private String windDir;

  public static final String SERIALIZED_NAME_WIND_M_P_H = "WindMPH";
  @SerializedName(SERIALIZED_NAME_WIND_M_P_H)
  private String windMPH;

  public Getweatherzipcode200Response() {
  }

  public Getweatherzipcode200Response city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Getweatherzipcode200Response code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Getweatherzipcode200Response credits(String credits) {
    this.credits = credits;
    return this;
  }

  /**
   * Get credits
   * @return credits
   */
  @javax.annotation.Nullable
  public String getCredits() {
    return credits;
  }

  public void setCredits(String credits) {
    this.credits = credits;
  }


  public Getweatherzipcode200Response relativeHumidity(String relativeHumidity) {
    this.relativeHumidity = relativeHumidity;
    return this;
  }

  /**
   * Get relativeHumidity
   * @return relativeHumidity
   */
  @javax.annotation.Nullable
  public String getRelativeHumidity() {
    return relativeHumidity;
  }

  public void setRelativeHumidity(String relativeHumidity) {
    this.relativeHumidity = relativeHumidity;
  }


  public Getweatherzipcode200Response state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Getweatherzipcode200Response tempC(String tempC) {
    this.tempC = tempC;
    return this;
  }

  /**
   * Get tempC
   * @return tempC
   */
  @javax.annotation.Nullable
  public String getTempC() {
    return tempC;
  }

  public void setTempC(String tempC) {
    this.tempC = tempC;
  }


  public Getweatherzipcode200Response tempF(String tempF) {
    this.tempF = tempF;
    return this;
  }

  /**
   * Get tempF
   * @return tempF
   */
  @javax.annotation.Nullable
  public String getTempF() {
    return tempF;
  }

  public void setTempF(String tempF) {
    this.tempF = tempF;
  }


  public Getweatherzipcode200Response visibilityMiles(String visibilityMiles) {
    this.visibilityMiles = visibilityMiles;
    return this;
  }

  /**
   * Get visibilityMiles
   * @return visibilityMiles
   */
  @javax.annotation.Nullable
  public String getVisibilityMiles() {
    return visibilityMiles;
  }

  public void setVisibilityMiles(String visibilityMiles) {
    this.visibilityMiles = visibilityMiles;
  }


  public Getweatherzipcode200Response weather(String weather) {
    this.weather = weather;
    return this;
  }

  /**
   * Get weather
   * @return weather
   */
  @javax.annotation.Nullable
  public String getWeather() {
    return weather;
  }

  public void setWeather(String weather) {
    this.weather = weather;
  }


  public Getweatherzipcode200Response windDir(String windDir) {
    this.windDir = windDir;
    return this;
  }

  /**
   * Get windDir
   * @return windDir
   */
  @javax.annotation.Nullable
  public String getWindDir() {
    return windDir;
  }

  public void setWindDir(String windDir) {
    this.windDir = windDir;
  }


  public Getweatherzipcode200Response windMPH(String windMPH) {
    this.windMPH = windMPH;
    return this;
  }

  /**
   * Get windMPH
   * @return windMPH
   */
  @javax.annotation.Nullable
  public String getWindMPH() {
    return windMPH;
  }

  public void setWindMPH(String windMPH) {
    this.windMPH = windMPH;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Getweatherzipcode200Response getweatherzipcode200Response = (Getweatherzipcode200Response) o;
    return Objects.equals(this.city, getweatherzipcode200Response.city) &&
        Objects.equals(this.code, getweatherzipcode200Response.code) &&
        Objects.equals(this.credits, getweatherzipcode200Response.credits) &&
        Objects.equals(this.relativeHumidity, getweatherzipcode200Response.relativeHumidity) &&
        Objects.equals(this.state, getweatherzipcode200Response.state) &&
        Objects.equals(this.tempC, getweatherzipcode200Response.tempC) &&
        Objects.equals(this.tempF, getweatherzipcode200Response.tempF) &&
        Objects.equals(this.visibilityMiles, getweatherzipcode200Response.visibilityMiles) &&
        Objects.equals(this.weather, getweatherzipcode200Response.weather) &&
        Objects.equals(this.windDir, getweatherzipcode200Response.windDir) &&
        Objects.equals(this.windMPH, getweatherzipcode200Response.windMPH);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, code, credits, relativeHumidity, state, tempC, tempF, visibilityMiles, weather, windDir, windMPH);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Getweatherzipcode200Response {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    relativeHumidity: ").append(toIndentedString(relativeHumidity)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tempC: ").append(toIndentedString(tempC)).append("\n");
    sb.append("    tempF: ").append(toIndentedString(tempF)).append("\n");
    sb.append("    visibilityMiles: ").append(toIndentedString(visibilityMiles)).append("\n");
    sb.append("    weather: ").append(toIndentedString(weather)).append("\n");
    sb.append("    windDir: ").append(toIndentedString(windDir)).append("\n");
    sb.append("    windMPH: ").append(toIndentedString(windMPH)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("City");
    openapiFields.add("Code");
    openapiFields.add("Credits");
    openapiFields.add("RelativeHumidity");
    openapiFields.add("State");
    openapiFields.add("TempC");
    openapiFields.add("TempF");
    openapiFields.add("VisibilityMiles");
    openapiFields.add("Weather");
    openapiFields.add("WindDir");
    openapiFields.add("WindMPH");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Getweatherzipcode200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Getweatherzipcode200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Getweatherzipcode200Response is not found in the empty JSON string", Getweatherzipcode200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Getweatherzipcode200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Getweatherzipcode200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("City") != null && !jsonObj.get("City").isJsonNull()) && !jsonObj.get("City").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `City` to be a primitive type in the JSON string but got `%s`", jsonObj.get("City").toString()));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("Credits") != null && !jsonObj.get("Credits").isJsonNull()) && !jsonObj.get("Credits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Credits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Credits").toString()));
      }
      if ((jsonObj.get("RelativeHumidity") != null && !jsonObj.get("RelativeHumidity").isJsonNull()) && !jsonObj.get("RelativeHumidity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RelativeHumidity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RelativeHumidity").toString()));
      }
      if ((jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) && !jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      if ((jsonObj.get("TempC") != null && !jsonObj.get("TempC").isJsonNull()) && !jsonObj.get("TempC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TempC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TempC").toString()));
      }
      if ((jsonObj.get("TempF") != null && !jsonObj.get("TempF").isJsonNull()) && !jsonObj.get("TempF").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TempF` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TempF").toString()));
      }
      if ((jsonObj.get("VisibilityMiles") != null && !jsonObj.get("VisibilityMiles").isJsonNull()) && !jsonObj.get("VisibilityMiles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VisibilityMiles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VisibilityMiles").toString()));
      }
      if ((jsonObj.get("Weather") != null && !jsonObj.get("Weather").isJsonNull()) && !jsonObj.get("Weather").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Weather` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Weather").toString()));
      }
      if ((jsonObj.get("WindDir") != null && !jsonObj.get("WindDir").isJsonNull()) && !jsonObj.get("WindDir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WindDir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WindDir").toString()));
      }
      if ((jsonObj.get("WindMPH") != null && !jsonObj.get("WindMPH").isJsonNull()) && !jsonObj.get("WindMPH").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WindMPH` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WindMPH").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Getweatherzipcode200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Getweatherzipcode200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Getweatherzipcode200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Getweatherzipcode200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Getweatherzipcode200Response>() {
           @Override
           public void write(JsonWriter out, Getweatherzipcode200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Getweatherzipcode200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Getweatherzipcode200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Getweatherzipcode200Response
   * @throws IOException if the JSON string is invalid with respect to Getweatherzipcode200Response
   */
  public static Getweatherzipcode200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Getweatherzipcode200Response.class);
  }

  /**
   * Convert an instance of Getweatherzipcode200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

