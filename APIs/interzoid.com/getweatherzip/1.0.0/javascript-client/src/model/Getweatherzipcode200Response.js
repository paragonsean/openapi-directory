/**
 * Interzoid Get Weather By Zip Code API
 * This API provides current weather information for US Cities, including temperatures, wind speeds, wind direction, relative humidity, and visibility.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interzoid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Getweatherzipcode200Response model module.
 * @module model/Getweatherzipcode200Response
 * @version 1.0.0
 */
class Getweatherzipcode200Response {
    /**
     * Constructs a new <code>Getweatherzipcode200Response</code>.
     * @alias module:model/Getweatherzipcode200Response
     */
    constructor() { 
        
        Getweatherzipcode200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Getweatherzipcode200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Getweatherzipcode200Response} obj Optional instance to populate.
     * @return {module:model/Getweatherzipcode200Response} The populated <code>Getweatherzipcode200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Getweatherzipcode200Response();

            if (data.hasOwnProperty('City')) {
                obj['City'] = ApiClient.convertToType(data['City'], 'String');
            }
            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('Credits')) {
                obj['Credits'] = ApiClient.convertToType(data['Credits'], 'String');
            }
            if (data.hasOwnProperty('RelativeHumidity')) {
                obj['RelativeHumidity'] = ApiClient.convertToType(data['RelativeHumidity'], 'String');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = ApiClient.convertToType(data['State'], 'String');
            }
            if (data.hasOwnProperty('TempC')) {
                obj['TempC'] = ApiClient.convertToType(data['TempC'], 'String');
            }
            if (data.hasOwnProperty('TempF')) {
                obj['TempF'] = ApiClient.convertToType(data['TempF'], 'String');
            }
            if (data.hasOwnProperty('VisibilityMiles')) {
                obj['VisibilityMiles'] = ApiClient.convertToType(data['VisibilityMiles'], 'String');
            }
            if (data.hasOwnProperty('Weather')) {
                obj['Weather'] = ApiClient.convertToType(data['Weather'], 'String');
            }
            if (data.hasOwnProperty('WindDir')) {
                obj['WindDir'] = ApiClient.convertToType(data['WindDir'], 'String');
            }
            if (data.hasOwnProperty('WindMPH')) {
                obj['WindMPH'] = ApiClient.convertToType(data['WindMPH'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Getweatherzipcode200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Getweatherzipcode200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['City'] && !(typeof data['City'] === 'string' || data['City'] instanceof String)) {
            throw new Error("Expected the field `City` to be a primitive type in the JSON string but got " + data['City']);
        }
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // ensure the json data is a string
        if (data['Credits'] && !(typeof data['Credits'] === 'string' || data['Credits'] instanceof String)) {
            throw new Error("Expected the field `Credits` to be a primitive type in the JSON string but got " + data['Credits']);
        }
        // ensure the json data is a string
        if (data['RelativeHumidity'] && !(typeof data['RelativeHumidity'] === 'string' || data['RelativeHumidity'] instanceof String)) {
            throw new Error("Expected the field `RelativeHumidity` to be a primitive type in the JSON string but got " + data['RelativeHumidity']);
        }
        // ensure the json data is a string
        if (data['State'] && !(typeof data['State'] === 'string' || data['State'] instanceof String)) {
            throw new Error("Expected the field `State` to be a primitive type in the JSON string but got " + data['State']);
        }
        // ensure the json data is a string
        if (data['TempC'] && !(typeof data['TempC'] === 'string' || data['TempC'] instanceof String)) {
            throw new Error("Expected the field `TempC` to be a primitive type in the JSON string but got " + data['TempC']);
        }
        // ensure the json data is a string
        if (data['TempF'] && !(typeof data['TempF'] === 'string' || data['TempF'] instanceof String)) {
            throw new Error("Expected the field `TempF` to be a primitive type in the JSON string but got " + data['TempF']);
        }
        // ensure the json data is a string
        if (data['VisibilityMiles'] && !(typeof data['VisibilityMiles'] === 'string' || data['VisibilityMiles'] instanceof String)) {
            throw new Error("Expected the field `VisibilityMiles` to be a primitive type in the JSON string but got " + data['VisibilityMiles']);
        }
        // ensure the json data is a string
        if (data['Weather'] && !(typeof data['Weather'] === 'string' || data['Weather'] instanceof String)) {
            throw new Error("Expected the field `Weather` to be a primitive type in the JSON string but got " + data['Weather']);
        }
        // ensure the json data is a string
        if (data['WindDir'] && !(typeof data['WindDir'] === 'string' || data['WindDir'] instanceof String)) {
            throw new Error("Expected the field `WindDir` to be a primitive type in the JSON string but got " + data['WindDir']);
        }
        // ensure the json data is a string
        if (data['WindMPH'] && !(typeof data['WindMPH'] === 'string' || data['WindMPH'] instanceof String)) {
            throw new Error("Expected the field `WindMPH` to be a primitive type in the JSON string but got " + data['WindMPH']);
        }

        return true;
    }


}



/**
 * @member {String} City
 */
Getweatherzipcode200Response.prototype['City'] = undefined;

/**
 * @member {String} Code
 */
Getweatherzipcode200Response.prototype['Code'] = undefined;

/**
 * @member {String} Credits
 */
Getweatherzipcode200Response.prototype['Credits'] = undefined;

/**
 * @member {String} RelativeHumidity
 */
Getweatherzipcode200Response.prototype['RelativeHumidity'] = undefined;

/**
 * @member {String} State
 */
Getweatherzipcode200Response.prototype['State'] = undefined;

/**
 * @member {String} TempC
 */
Getweatherzipcode200Response.prototype['TempC'] = undefined;

/**
 * @member {String} TempF
 */
Getweatherzipcode200Response.prototype['TempF'] = undefined;

/**
 * @member {String} VisibilityMiles
 */
Getweatherzipcode200Response.prototype['VisibilityMiles'] = undefined;

/**
 * @member {String} Weather
 */
Getweatherzipcode200Response.prototype['Weather'] = undefined;

/**
 * @member {String} WindDir
 */
Getweatherzipcode200Response.prototype['WindDir'] = undefined;

/**
 * @member {String} WindMPH
 */
Getweatherzipcode200Response.prototype['WindMPH'] = undefined;






export default Getweatherzipcode200Response;

