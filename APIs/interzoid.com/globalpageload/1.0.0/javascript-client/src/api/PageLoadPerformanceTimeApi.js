/**
 * Interzoid Global Page Load Performance API
 * This API provides a timed, browser-simulated page load function (or a measured API call) from the specified geography using a server from that geography.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interzoid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Globalpageload200Response from '../model/Globalpageload200Response';

/**
* PageLoadPerformanceTime service.
* @module api/PageLoadPerformanceTimeApi
* @version 1.0.0
*/
export default class PageLoadPerformanceTimeApi {

    /**
    * Constructs a new PageLoadPerformanceTimeApi. 
    * @alias module:api/PageLoadPerformanceTimeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the globalpageload operation.
     * @callback module:api/PageLoadPerformanceTimeApi~globalpageloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Globalpageload200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets page load (or an API call) performance from a specified global geography such as Paris, Tokyo, Virginia, Mumbai, Frankfurt, London, Seoul, California, Sao Paolo, and many more.
     * Gets page load performance from a specified geography 
     * @param {String} license Your Interzoid license API key. Register at www.interzoid.com/register
     * @param {String} origin Geographic location to perform the measurement from (Paris, Hong Kong, Seoul, Mumbai, Sao Paolo, London, etc. see API home page for full list)
     * @param {String} url specific URL to perform load test time
     * @param {module:api/PageLoadPerformanceTimeApi~globalpageloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Globalpageload200Response}
     */
    globalpageload(license, origin, url, callback) {
      let postBody = null;
      // verify the required parameter 'license' is set
      if (license === undefined || license === null) {
        throw new Error("Missing the required parameter 'license' when calling globalpageload");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling globalpageload");
      }
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling globalpageload");
      }

      let pathParams = {
      };
      let queryParams = {
        'license': license,
        'origin': origin,
        'url': url
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Globalpageload200Response;
      return this.apiClient.callApi(
        '/globalpageload', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
