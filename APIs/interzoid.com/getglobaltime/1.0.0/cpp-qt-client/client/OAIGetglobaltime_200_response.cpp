/**
 * Interzoid Get Global Time API
 * This API retrieves the current time for a city or geographic location around the globe.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interzoid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetglobaltime_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetglobaltime_200_response::OAIGetglobaltime_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetglobaltime_200_response::OAIGetglobaltime_200_response() {
    this->initializeModel();
}

OAIGetglobaltime_200_response::~OAIGetglobaltime_200_response() {}

void OAIGetglobaltime_200_response::initializeModel() {

    m_clock_time_isSet = false;
    m_clock_time_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_credits_isSet = false;
    m_credits_isValid = false;

    m_current_date_isSet = false;
    m_current_date_isValid = false;

    m_current_time_isSet = false;
    m_current_time_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_hour_isSet = false;
    m_hour_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_minute_isSet = false;
    m_minute_isValid = false;

    m_month_isSet = false;
    m_month_isValid = false;

    m_month_number_isSet = false;
    m_month_number_isValid = false;

    m_second_isSet = false;
    m_second_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_weekday_isSet = false;
    m_weekday_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIGetglobaltime_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetglobaltime_200_response::fromJsonObject(QJsonObject json) {

    m_clock_time_isValid = ::OpenAPI::fromJsonValue(m_clock_time, json[QString("ClockTime")]);
    m_clock_time_isSet = !json[QString("ClockTime")].isNull() && m_clock_time_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_credits_isValid = ::OpenAPI::fromJsonValue(m_credits, json[QString("Credits")]);
    m_credits_isSet = !json[QString("Credits")].isNull() && m_credits_isValid;

    m_current_date_isValid = ::OpenAPI::fromJsonValue(m_current_date, json[QString("CurrentDate")]);
    m_current_date_isSet = !json[QString("CurrentDate")].isNull() && m_current_date_isValid;

    m_current_time_isValid = ::OpenAPI::fromJsonValue(m_current_time, json[QString("CurrentTime")]);
    m_current_time_isSet = !json[QString("CurrentTime")].isNull() && m_current_time_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_hour_isValid = ::OpenAPI::fromJsonValue(m_hour, json[QString("Hour")]);
    m_hour_isSet = !json[QString("Hour")].isNull() && m_hour_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("Locale")]);
    m_locale_isSet = !json[QString("Locale")].isNull() && m_locale_isValid;

    m_minute_isValid = ::OpenAPI::fromJsonValue(m_minute, json[QString("Minute")]);
    m_minute_isSet = !json[QString("Minute")].isNull() && m_minute_isValid;

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("Month")]);
    m_month_isSet = !json[QString("Month")].isNull() && m_month_isValid;

    m_month_number_isValid = ::OpenAPI::fromJsonValue(m_month_number, json[QString("MonthNumber")]);
    m_month_number_isSet = !json[QString("MonthNumber")].isNull() && m_month_number_isValid;

    m_second_isValid = ::OpenAPI::fromJsonValue(m_second, json[QString("Second")]);
    m_second_isSet = !json[QString("Second")].isNull() && m_second_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;

    m_weekday_isValid = ::OpenAPI::fromJsonValue(m_weekday, json[QString("Weekday")]);
    m_weekday_isSet = !json[QString("Weekday")].isNull() && m_weekday_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("Year")]);
    m_year_isSet = !json[QString("Year")].isNull() && m_year_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("Zone")]);
    m_zone_isSet = !json[QString("Zone")].isNull() && m_zone_isValid;
}

QString OAIGetglobaltime_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetglobaltime_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_clock_time_isSet) {
        obj.insert(QString("ClockTime"), ::OpenAPI::toJsonValue(m_clock_time));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_credits_isSet) {
        obj.insert(QString("Credits"), ::OpenAPI::toJsonValue(m_credits));
    }
    if (m_current_date_isSet) {
        obj.insert(QString("CurrentDate"), ::OpenAPI::toJsonValue(m_current_date));
    }
    if (m_current_time_isSet) {
        obj.insert(QString("CurrentTime"), ::OpenAPI::toJsonValue(m_current_time));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_hour_isSet) {
        obj.insert(QString("Hour"), ::OpenAPI::toJsonValue(m_hour));
    }
    if (m_locale_isSet) {
        obj.insert(QString("Locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_minute_isSet) {
        obj.insert(QString("Minute"), ::OpenAPI::toJsonValue(m_minute));
    }
    if (m_month_isSet) {
        obj.insert(QString("Month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_month_number_isSet) {
        obj.insert(QString("MonthNumber"), ::OpenAPI::toJsonValue(m_month_number));
    }
    if (m_second_isSet) {
        obj.insert(QString("Second"), ::OpenAPI::toJsonValue(m_second));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_weekday_isSet) {
        obj.insert(QString("Weekday"), ::OpenAPI::toJsonValue(m_weekday));
    }
    if (m_year_isSet) {
        obj.insert(QString("Year"), ::OpenAPI::toJsonValue(m_year));
    }
    if (m_zone_isSet) {
        obj.insert(QString("Zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAIGetglobaltime_200_response::getClockTime() const {
    return m_clock_time;
}
void OAIGetglobaltime_200_response::setClockTime(const QString &clock_time) {
    m_clock_time = clock_time;
    m_clock_time_isSet = true;
}

bool OAIGetglobaltime_200_response::is_clock_time_Set() const{
    return m_clock_time_isSet;
}

bool OAIGetglobaltime_200_response::is_clock_time_Valid() const{
    return m_clock_time_isValid;
}

QString OAIGetglobaltime_200_response::getCode() const {
    return m_code;
}
void OAIGetglobaltime_200_response::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIGetglobaltime_200_response::is_code_Set() const{
    return m_code_isSet;
}

bool OAIGetglobaltime_200_response::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIGetglobaltime_200_response::getCredits() const {
    return m_credits;
}
void OAIGetglobaltime_200_response::setCredits(const QString &credits) {
    m_credits = credits;
    m_credits_isSet = true;
}

bool OAIGetglobaltime_200_response::is_credits_Set() const{
    return m_credits_isSet;
}

bool OAIGetglobaltime_200_response::is_credits_Valid() const{
    return m_credits_isValid;
}

QString OAIGetglobaltime_200_response::getCurrentDate() const {
    return m_current_date;
}
void OAIGetglobaltime_200_response::setCurrentDate(const QString &current_date) {
    m_current_date = current_date;
    m_current_date_isSet = true;
}

bool OAIGetglobaltime_200_response::is_current_date_Set() const{
    return m_current_date_isSet;
}

bool OAIGetglobaltime_200_response::is_current_date_Valid() const{
    return m_current_date_isValid;
}

QString OAIGetglobaltime_200_response::getCurrentTime() const {
    return m_current_time;
}
void OAIGetglobaltime_200_response::setCurrentTime(const QString &current_time) {
    m_current_time = current_time;
    m_current_time_isSet = true;
}

bool OAIGetglobaltime_200_response::is_current_time_Set() const{
    return m_current_time_isSet;
}

bool OAIGetglobaltime_200_response::is_current_time_Valid() const{
    return m_current_time_isValid;
}

QString OAIGetglobaltime_200_response::getDay() const {
    return m_day;
}
void OAIGetglobaltime_200_response::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIGetglobaltime_200_response::is_day_Set() const{
    return m_day_isSet;
}

bool OAIGetglobaltime_200_response::is_day_Valid() const{
    return m_day_isValid;
}

QString OAIGetglobaltime_200_response::getHour() const {
    return m_hour;
}
void OAIGetglobaltime_200_response::setHour(const QString &hour) {
    m_hour = hour;
    m_hour_isSet = true;
}

bool OAIGetglobaltime_200_response::is_hour_Set() const{
    return m_hour_isSet;
}

bool OAIGetglobaltime_200_response::is_hour_Valid() const{
    return m_hour_isValid;
}

QString OAIGetglobaltime_200_response::getLocale() const {
    return m_locale;
}
void OAIGetglobaltime_200_response::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIGetglobaltime_200_response::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIGetglobaltime_200_response::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIGetglobaltime_200_response::getMinute() const {
    return m_minute;
}
void OAIGetglobaltime_200_response::setMinute(const QString &minute) {
    m_minute = minute;
    m_minute_isSet = true;
}

bool OAIGetglobaltime_200_response::is_minute_Set() const{
    return m_minute_isSet;
}

bool OAIGetglobaltime_200_response::is_minute_Valid() const{
    return m_minute_isValid;
}

QString OAIGetglobaltime_200_response::getMonth() const {
    return m_month;
}
void OAIGetglobaltime_200_response::setMonth(const QString &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAIGetglobaltime_200_response::is_month_Set() const{
    return m_month_isSet;
}

bool OAIGetglobaltime_200_response::is_month_Valid() const{
    return m_month_isValid;
}

QString OAIGetglobaltime_200_response::getMonthNumber() const {
    return m_month_number;
}
void OAIGetglobaltime_200_response::setMonthNumber(const QString &month_number) {
    m_month_number = month_number;
    m_month_number_isSet = true;
}

bool OAIGetglobaltime_200_response::is_month_number_Set() const{
    return m_month_number_isSet;
}

bool OAIGetglobaltime_200_response::is_month_number_Valid() const{
    return m_month_number_isValid;
}

QString OAIGetglobaltime_200_response::getSecond() const {
    return m_second;
}
void OAIGetglobaltime_200_response::setSecond(const QString &second) {
    m_second = second;
    m_second_isSet = true;
}

bool OAIGetglobaltime_200_response::is_second_Set() const{
    return m_second_isSet;
}

bool OAIGetglobaltime_200_response::is_second_Valid() const{
    return m_second_isValid;
}

QString OAIGetglobaltime_200_response::getTimeStamp() const {
    return m_time_stamp;
}
void OAIGetglobaltime_200_response::setTimeStamp(const QString &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIGetglobaltime_200_response::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIGetglobaltime_200_response::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

QString OAIGetglobaltime_200_response::getWeekday() const {
    return m_weekday;
}
void OAIGetglobaltime_200_response::setWeekday(const QString &weekday) {
    m_weekday = weekday;
    m_weekday_isSet = true;
}

bool OAIGetglobaltime_200_response::is_weekday_Set() const{
    return m_weekday_isSet;
}

bool OAIGetglobaltime_200_response::is_weekday_Valid() const{
    return m_weekday_isValid;
}

QString OAIGetglobaltime_200_response::getYear() const {
    return m_year;
}
void OAIGetglobaltime_200_response::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIGetglobaltime_200_response::is_year_Set() const{
    return m_year_isSet;
}

bool OAIGetglobaltime_200_response::is_year_Valid() const{
    return m_year_isValid;
}

QString OAIGetglobaltime_200_response::getZone() const {
    return m_zone;
}
void OAIGetglobaltime_200_response::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIGetglobaltime_200_response::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIGetglobaltime_200_response::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIGetglobaltime_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clock_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetglobaltime_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
