/**
 * Interzoid Get Global Time API
 * This API retrieves the current time for a city or geographic location around the globe.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interzoid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Getglobaltime200Response model module.
 * @module model/Getglobaltime200Response
 * @version 1.0.0
 */
class Getglobaltime200Response {
    /**
     * Constructs a new <code>Getglobaltime200Response</code>.
     * @alias module:model/Getglobaltime200Response
     */
    constructor() { 
        
        Getglobaltime200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Getglobaltime200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Getglobaltime200Response} obj Optional instance to populate.
     * @return {module:model/Getglobaltime200Response} The populated <code>Getglobaltime200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Getglobaltime200Response();

            if (data.hasOwnProperty('ClockTime')) {
                obj['ClockTime'] = ApiClient.convertToType(data['ClockTime'], 'String');
            }
            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('Credits')) {
                obj['Credits'] = ApiClient.convertToType(data['Credits'], 'String');
            }
            if (data.hasOwnProperty('CurrentDate')) {
                obj['CurrentDate'] = ApiClient.convertToType(data['CurrentDate'], 'String');
            }
            if (data.hasOwnProperty('CurrentTime')) {
                obj['CurrentTime'] = ApiClient.convertToType(data['CurrentTime'], 'String');
            }
            if (data.hasOwnProperty('Day')) {
                obj['Day'] = ApiClient.convertToType(data['Day'], 'String');
            }
            if (data.hasOwnProperty('Hour')) {
                obj['Hour'] = ApiClient.convertToType(data['Hour'], 'String');
            }
            if (data.hasOwnProperty('Locale')) {
                obj['Locale'] = ApiClient.convertToType(data['Locale'], 'String');
            }
            if (data.hasOwnProperty('Minute')) {
                obj['Minute'] = ApiClient.convertToType(data['Minute'], 'String');
            }
            if (data.hasOwnProperty('Month')) {
                obj['Month'] = ApiClient.convertToType(data['Month'], 'String');
            }
            if (data.hasOwnProperty('MonthNumber')) {
                obj['MonthNumber'] = ApiClient.convertToType(data['MonthNumber'], 'String');
            }
            if (data.hasOwnProperty('Second')) {
                obj['Second'] = ApiClient.convertToType(data['Second'], 'String');
            }
            if (data.hasOwnProperty('TimeStamp')) {
                obj['TimeStamp'] = ApiClient.convertToType(data['TimeStamp'], 'String');
            }
            if (data.hasOwnProperty('Weekday')) {
                obj['Weekday'] = ApiClient.convertToType(data['Weekday'], 'String');
            }
            if (data.hasOwnProperty('Year')) {
                obj['Year'] = ApiClient.convertToType(data['Year'], 'String');
            }
            if (data.hasOwnProperty('Zone')) {
                obj['Zone'] = ApiClient.convertToType(data['Zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Getglobaltime200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Getglobaltime200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ClockTime'] && !(typeof data['ClockTime'] === 'string' || data['ClockTime'] instanceof String)) {
            throw new Error("Expected the field `ClockTime` to be a primitive type in the JSON string but got " + data['ClockTime']);
        }
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // ensure the json data is a string
        if (data['Credits'] && !(typeof data['Credits'] === 'string' || data['Credits'] instanceof String)) {
            throw new Error("Expected the field `Credits` to be a primitive type in the JSON string but got " + data['Credits']);
        }
        // ensure the json data is a string
        if (data['CurrentDate'] && !(typeof data['CurrentDate'] === 'string' || data['CurrentDate'] instanceof String)) {
            throw new Error("Expected the field `CurrentDate` to be a primitive type in the JSON string but got " + data['CurrentDate']);
        }
        // ensure the json data is a string
        if (data['CurrentTime'] && !(typeof data['CurrentTime'] === 'string' || data['CurrentTime'] instanceof String)) {
            throw new Error("Expected the field `CurrentTime` to be a primitive type in the JSON string but got " + data['CurrentTime']);
        }
        // ensure the json data is a string
        if (data['Day'] && !(typeof data['Day'] === 'string' || data['Day'] instanceof String)) {
            throw new Error("Expected the field `Day` to be a primitive type in the JSON string but got " + data['Day']);
        }
        // ensure the json data is a string
        if (data['Hour'] && !(typeof data['Hour'] === 'string' || data['Hour'] instanceof String)) {
            throw new Error("Expected the field `Hour` to be a primitive type in the JSON string but got " + data['Hour']);
        }
        // ensure the json data is a string
        if (data['Locale'] && !(typeof data['Locale'] === 'string' || data['Locale'] instanceof String)) {
            throw new Error("Expected the field `Locale` to be a primitive type in the JSON string but got " + data['Locale']);
        }
        // ensure the json data is a string
        if (data['Minute'] && !(typeof data['Minute'] === 'string' || data['Minute'] instanceof String)) {
            throw new Error("Expected the field `Minute` to be a primitive type in the JSON string but got " + data['Minute']);
        }
        // ensure the json data is a string
        if (data['Month'] && !(typeof data['Month'] === 'string' || data['Month'] instanceof String)) {
            throw new Error("Expected the field `Month` to be a primitive type in the JSON string but got " + data['Month']);
        }
        // ensure the json data is a string
        if (data['MonthNumber'] && !(typeof data['MonthNumber'] === 'string' || data['MonthNumber'] instanceof String)) {
            throw new Error("Expected the field `MonthNumber` to be a primitive type in the JSON string but got " + data['MonthNumber']);
        }
        // ensure the json data is a string
        if (data['Second'] && !(typeof data['Second'] === 'string' || data['Second'] instanceof String)) {
            throw new Error("Expected the field `Second` to be a primitive type in the JSON string but got " + data['Second']);
        }
        // ensure the json data is a string
        if (data['TimeStamp'] && !(typeof data['TimeStamp'] === 'string' || data['TimeStamp'] instanceof String)) {
            throw new Error("Expected the field `TimeStamp` to be a primitive type in the JSON string but got " + data['TimeStamp']);
        }
        // ensure the json data is a string
        if (data['Weekday'] && !(typeof data['Weekday'] === 'string' || data['Weekday'] instanceof String)) {
            throw new Error("Expected the field `Weekday` to be a primitive type in the JSON string but got " + data['Weekday']);
        }
        // ensure the json data is a string
        if (data['Year'] && !(typeof data['Year'] === 'string' || data['Year'] instanceof String)) {
            throw new Error("Expected the field `Year` to be a primitive type in the JSON string but got " + data['Year']);
        }
        // ensure the json data is a string
        if (data['Zone'] && !(typeof data['Zone'] === 'string' || data['Zone'] instanceof String)) {
            throw new Error("Expected the field `Zone` to be a primitive type in the JSON string but got " + data['Zone']);
        }

        return true;
    }


}



/**
 * @member {String} ClockTime
 */
Getglobaltime200Response.prototype['ClockTime'] = undefined;

/**
 * @member {String} Code
 */
Getglobaltime200Response.prototype['Code'] = undefined;

/**
 * @member {String} Credits
 */
Getglobaltime200Response.prototype['Credits'] = undefined;

/**
 * @member {String} CurrentDate
 */
Getglobaltime200Response.prototype['CurrentDate'] = undefined;

/**
 * @member {String} CurrentTime
 */
Getglobaltime200Response.prototype['CurrentTime'] = undefined;

/**
 * @member {String} Day
 */
Getglobaltime200Response.prototype['Day'] = undefined;

/**
 * @member {String} Hour
 */
Getglobaltime200Response.prototype['Hour'] = undefined;

/**
 * @member {String} Locale
 */
Getglobaltime200Response.prototype['Locale'] = undefined;

/**
 * @member {String} Minute
 */
Getglobaltime200Response.prototype['Minute'] = undefined;

/**
 * @member {String} Month
 */
Getglobaltime200Response.prototype['Month'] = undefined;

/**
 * @member {String} MonthNumber
 */
Getglobaltime200Response.prototype['MonthNumber'] = undefined;

/**
 * @member {String} Second
 */
Getglobaltime200Response.prototype['Second'] = undefined;

/**
 * @member {String} TimeStamp
 */
Getglobaltime200Response.prototype['TimeStamp'] = undefined;

/**
 * @member {String} Weekday
 */
Getglobaltime200Response.prototype['Weekday'] = undefined;

/**
 * @member {String} Year
 */
Getglobaltime200Response.prototype['Year'] = undefined;

/**
 * @member {String} Zone
 */
Getglobaltime200Response.prototype['Zone'] = undefined;






export default Getglobaltime200Response;

