/*
 * Interzoid Get Global Time API
 * This API retrieves the current time for a city or geographic location around the globe.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interzoid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Getglobaltime200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:18.916234-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Getglobaltime200Response {
  public static final String SERIALIZED_NAME_CLOCK_TIME = "ClockTime";
  @SerializedName(SERIALIZED_NAME_CLOCK_TIME)
  private String clockTime;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CREDITS = "Credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private String credits;

  public static final String SERIALIZED_NAME_CURRENT_DATE = "CurrentDate";
  @SerializedName(SERIALIZED_NAME_CURRENT_DATE)
  private String currentDate;

  public static final String SERIALIZED_NAME_CURRENT_TIME = "CurrentTime";
  @SerializedName(SERIALIZED_NAME_CURRENT_TIME)
  private String currentTime;

  public static final String SERIALIZED_NAME_DAY = "Day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_HOUR = "Hour";
  @SerializedName(SERIALIZED_NAME_HOUR)
  private String hour;

  public static final String SERIALIZED_NAME_LOCALE = "Locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_MINUTE = "Minute";
  @SerializedName(SERIALIZED_NAME_MINUTE)
  private String minute;

  public static final String SERIALIZED_NAME_MONTH = "Month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private String month;

  public static final String SERIALIZED_NAME_MONTH_NUMBER = "MonthNumber";
  @SerializedName(SERIALIZED_NAME_MONTH_NUMBER)
  private String monthNumber;

  public static final String SERIALIZED_NAME_SECOND = "Second";
  @SerializedName(SERIALIZED_NAME_SECOND)
  private String second;

  public static final String SERIALIZED_NAME_TIME_STAMP = "TimeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private String timeStamp;

  public static final String SERIALIZED_NAME_WEEKDAY = "Weekday";
  @SerializedName(SERIALIZED_NAME_WEEKDAY)
  private String weekday;

  public static final String SERIALIZED_NAME_YEAR = "Year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private String year;

  public static final String SERIALIZED_NAME_ZONE = "Zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public Getglobaltime200Response() {
  }

  public Getglobaltime200Response clockTime(String clockTime) {
    this.clockTime = clockTime;
    return this;
  }

  /**
   * Get clockTime
   * @return clockTime
   */
  @javax.annotation.Nullable
  public String getClockTime() {
    return clockTime;
  }

  public void setClockTime(String clockTime) {
    this.clockTime = clockTime;
  }


  public Getglobaltime200Response code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Getglobaltime200Response credits(String credits) {
    this.credits = credits;
    return this;
  }

  /**
   * Get credits
   * @return credits
   */
  @javax.annotation.Nullable
  public String getCredits() {
    return credits;
  }

  public void setCredits(String credits) {
    this.credits = credits;
  }


  public Getglobaltime200Response currentDate(String currentDate) {
    this.currentDate = currentDate;
    return this;
  }

  /**
   * Get currentDate
   * @return currentDate
   */
  @javax.annotation.Nullable
  public String getCurrentDate() {
    return currentDate;
  }

  public void setCurrentDate(String currentDate) {
    this.currentDate = currentDate;
  }


  public Getglobaltime200Response currentTime(String currentTime) {
    this.currentTime = currentTime;
    return this;
  }

  /**
   * Get currentTime
   * @return currentTime
   */
  @javax.annotation.Nullable
  public String getCurrentTime() {
    return currentTime;
  }

  public void setCurrentTime(String currentTime) {
    this.currentTime = currentTime;
  }


  public Getglobaltime200Response day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public Getglobaltime200Response hour(String hour) {
    this.hour = hour;
    return this;
  }

  /**
   * Get hour
   * @return hour
   */
  @javax.annotation.Nullable
  public String getHour() {
    return hour;
  }

  public void setHour(String hour) {
    this.hour = hour;
  }


  public Getglobaltime200Response locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public Getglobaltime200Response minute(String minute) {
    this.minute = minute;
    return this;
  }

  /**
   * Get minute
   * @return minute
   */
  @javax.annotation.Nullable
  public String getMinute() {
    return minute;
  }

  public void setMinute(String minute) {
    this.minute = minute;
  }


  public Getglobaltime200Response month(String month) {
    this.month = month;
    return this;
  }

  /**
   * Get month
   * @return month
   */
  @javax.annotation.Nullable
  public String getMonth() {
    return month;
  }

  public void setMonth(String month) {
    this.month = month;
  }


  public Getglobaltime200Response monthNumber(String monthNumber) {
    this.monthNumber = monthNumber;
    return this;
  }

  /**
   * Get monthNumber
   * @return monthNumber
   */
  @javax.annotation.Nullable
  public String getMonthNumber() {
    return monthNumber;
  }

  public void setMonthNumber(String monthNumber) {
    this.monthNumber = monthNumber;
  }


  public Getglobaltime200Response second(String second) {
    this.second = second;
    return this;
  }

  /**
   * Get second
   * @return second
   */
  @javax.annotation.Nullable
  public String getSecond() {
    return second;
  }

  public void setSecond(String second) {
    this.second = second;
  }


  public Getglobaltime200Response timeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * Get timeStamp
   * @return timeStamp
   */
  @javax.annotation.Nullable
  public String getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
  }


  public Getglobaltime200Response weekday(String weekday) {
    this.weekday = weekday;
    return this;
  }

  /**
   * Get weekday
   * @return weekday
   */
  @javax.annotation.Nullable
  public String getWeekday() {
    return weekday;
  }

  public void setWeekday(String weekday) {
    this.weekday = weekday;
  }


  public Getglobaltime200Response year(String year) {
    this.year = year;
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public String getYear() {
    return year;
  }

  public void setYear(String year) {
    this.year = year;
  }


  public Getglobaltime200Response zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * Get zone
   * @return zone
   */
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Getglobaltime200Response getglobaltime200Response = (Getglobaltime200Response) o;
    return Objects.equals(this.clockTime, getglobaltime200Response.clockTime) &&
        Objects.equals(this.code, getglobaltime200Response.code) &&
        Objects.equals(this.credits, getglobaltime200Response.credits) &&
        Objects.equals(this.currentDate, getglobaltime200Response.currentDate) &&
        Objects.equals(this.currentTime, getglobaltime200Response.currentTime) &&
        Objects.equals(this.day, getglobaltime200Response.day) &&
        Objects.equals(this.hour, getglobaltime200Response.hour) &&
        Objects.equals(this.locale, getglobaltime200Response.locale) &&
        Objects.equals(this.minute, getglobaltime200Response.minute) &&
        Objects.equals(this.month, getglobaltime200Response.month) &&
        Objects.equals(this.monthNumber, getglobaltime200Response.monthNumber) &&
        Objects.equals(this.second, getglobaltime200Response.second) &&
        Objects.equals(this.timeStamp, getglobaltime200Response.timeStamp) &&
        Objects.equals(this.weekday, getglobaltime200Response.weekday) &&
        Objects.equals(this.year, getglobaltime200Response.year) &&
        Objects.equals(this.zone, getglobaltime200Response.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clockTime, code, credits, currentDate, currentTime, day, hour, locale, minute, month, monthNumber, second, timeStamp, weekday, year, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Getglobaltime200Response {\n");
    sb.append("    clockTime: ").append(toIndentedString(clockTime)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    currentDate: ").append(toIndentedString(currentDate)).append("\n");
    sb.append("    currentTime: ").append(toIndentedString(currentTime)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    hour: ").append(toIndentedString(hour)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    minute: ").append(toIndentedString(minute)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    monthNumber: ").append(toIndentedString(monthNumber)).append("\n");
    sb.append("    second: ").append(toIndentedString(second)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    weekday: ").append(toIndentedString(weekday)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClockTime");
    openapiFields.add("Code");
    openapiFields.add("Credits");
    openapiFields.add("CurrentDate");
    openapiFields.add("CurrentTime");
    openapiFields.add("Day");
    openapiFields.add("Hour");
    openapiFields.add("Locale");
    openapiFields.add("Minute");
    openapiFields.add("Month");
    openapiFields.add("MonthNumber");
    openapiFields.add("Second");
    openapiFields.add("TimeStamp");
    openapiFields.add("Weekday");
    openapiFields.add("Year");
    openapiFields.add("Zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Getglobaltime200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Getglobaltime200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Getglobaltime200Response is not found in the empty JSON string", Getglobaltime200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Getglobaltime200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Getglobaltime200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ClockTime") != null && !jsonObj.get("ClockTime").isJsonNull()) && !jsonObj.get("ClockTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClockTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClockTime").toString()));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("Credits") != null && !jsonObj.get("Credits").isJsonNull()) && !jsonObj.get("Credits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Credits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Credits").toString()));
      }
      if ((jsonObj.get("CurrentDate") != null && !jsonObj.get("CurrentDate").isJsonNull()) && !jsonObj.get("CurrentDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentDate").toString()));
      }
      if ((jsonObj.get("CurrentTime") != null && !jsonObj.get("CurrentTime").isJsonNull()) && !jsonObj.get("CurrentTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentTime").toString()));
      }
      if ((jsonObj.get("Day") != null && !jsonObj.get("Day").isJsonNull()) && !jsonObj.get("Day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Day").toString()));
      }
      if ((jsonObj.get("Hour") != null && !jsonObj.get("Hour").isJsonNull()) && !jsonObj.get("Hour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Hour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Hour").toString()));
      }
      if ((jsonObj.get("Locale") != null && !jsonObj.get("Locale").isJsonNull()) && !jsonObj.get("Locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Locale").toString()));
      }
      if ((jsonObj.get("Minute") != null && !jsonObj.get("Minute").isJsonNull()) && !jsonObj.get("Minute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Minute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Minute").toString()));
      }
      if ((jsonObj.get("Month") != null && !jsonObj.get("Month").isJsonNull()) && !jsonObj.get("Month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Month").toString()));
      }
      if ((jsonObj.get("MonthNumber") != null && !jsonObj.get("MonthNumber").isJsonNull()) && !jsonObj.get("MonthNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MonthNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MonthNumber").toString()));
      }
      if ((jsonObj.get("Second") != null && !jsonObj.get("Second").isJsonNull()) && !jsonObj.get("Second").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Second` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Second").toString()));
      }
      if ((jsonObj.get("TimeStamp") != null && !jsonObj.get("TimeStamp").isJsonNull()) && !jsonObj.get("TimeStamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeStamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeStamp").toString()));
      }
      if ((jsonObj.get("Weekday") != null && !jsonObj.get("Weekday").isJsonNull()) && !jsonObj.get("Weekday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Weekday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Weekday").toString()));
      }
      if ((jsonObj.get("Year") != null && !jsonObj.get("Year").isJsonNull()) && !jsonObj.get("Year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Year").toString()));
      }
      if ((jsonObj.get("Zone") != null && !jsonObj.get("Zone").isJsonNull()) && !jsonObj.get("Zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Getglobaltime200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Getglobaltime200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Getglobaltime200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Getglobaltime200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Getglobaltime200Response>() {
           @Override
           public void write(JsonWriter out, Getglobaltime200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Getglobaltime200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Getglobaltime200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Getglobaltime200Response
   * @throws IOException if the JSON string is invalid with respect to Getglobaltime200Response
   */
  public static Getglobaltime200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Getglobaltime200Response.class);
  }

  /**
   * Convert an instance of Getglobaltime200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

