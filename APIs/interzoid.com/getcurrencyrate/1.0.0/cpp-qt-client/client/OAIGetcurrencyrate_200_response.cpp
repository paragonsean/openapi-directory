/**
 * Interzoid Get Currency Rate API
 * This API retrieves the latest currency exchange rate, against the US Dollar, for the given three-letter international currency code. These currency rates are compiled from many global sources and are updated several times per day.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interzoid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetcurrencyrate_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetcurrencyrate_200_response::OAIGetcurrencyrate_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetcurrencyrate_200_response::OAIGetcurrencyrate_200_response() {
    this->initializeModel();
}

OAIGetcurrencyrate_200_response::~OAIGetcurrencyrate_200_response() {}

void OAIGetcurrencyrate_200_response::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_credits_isSet = false;
    m_credits_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAIGetcurrencyrate_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetcurrencyrate_200_response::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_credits_isValid = ::OpenAPI::fromJsonValue(m_credits, json[QString("Credits")]);
    m_credits_isSet = !json[QString("Credits")].isNull() && m_credits_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("Rate")]);
    m_rate_isSet = !json[QString("Rate")].isNull() && m_rate_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("Symbol")]);
    m_symbol_isSet = !json[QString("Symbol")].isNull() && m_symbol_isValid;
}

QString OAIGetcurrencyrate_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetcurrencyrate_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_credits_isSet) {
        obj.insert(QString("Credits"), ::OpenAPI::toJsonValue(m_credits));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rate_isSet) {
        obj.insert(QString("Rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("Symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

QString OAIGetcurrencyrate_200_response::getCode() const {
    return m_code;
}
void OAIGetcurrencyrate_200_response::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIGetcurrencyrate_200_response::is_code_Set() const{
    return m_code_isSet;
}

bool OAIGetcurrencyrate_200_response::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIGetcurrencyrate_200_response::getCountry() const {
    return m_country;
}
void OAIGetcurrencyrate_200_response::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIGetcurrencyrate_200_response::is_country_Set() const{
    return m_country_isSet;
}

bool OAIGetcurrencyrate_200_response::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIGetcurrencyrate_200_response::getCredits() const {
    return m_credits;
}
void OAIGetcurrencyrate_200_response::setCredits(const QString &credits) {
    m_credits = credits;
    m_credits_isSet = true;
}

bool OAIGetcurrencyrate_200_response::is_credits_Set() const{
    return m_credits_isSet;
}

bool OAIGetcurrencyrate_200_response::is_credits_Valid() const{
    return m_credits_isValid;
}

QString OAIGetcurrencyrate_200_response::getName() const {
    return m_name;
}
void OAIGetcurrencyrate_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetcurrencyrate_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetcurrencyrate_200_response::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetcurrencyrate_200_response::getRate() const {
    return m_rate;
}
void OAIGetcurrencyrate_200_response::setRate(const QString &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIGetcurrencyrate_200_response::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIGetcurrencyrate_200_response::is_rate_Valid() const{
    return m_rate_isValid;
}

QString OAIGetcurrencyrate_200_response::getSymbol() const {
    return m_symbol;
}
void OAIGetcurrencyrate_200_response::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIGetcurrencyrate_200_response::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIGetcurrencyrate_200_response::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAIGetcurrencyrate_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetcurrencyrate_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
