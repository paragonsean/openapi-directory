/*
 * Interzoid Zip Code Detailed Info API
 * This API provides detailed information for a given zip code, including city, state, latitude, longitude, area size, and various population demographics.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interzoid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Getzipcodeinfo200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:15.320697-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Getzipcodeinfo200Response {
  public static final String SERIALIZED_NAME_AREA_SQUARE_MILES = "AreaSquareMiles";
  @SerializedName(SERIALIZED_NAME_AREA_SQUARE_MILES)
  private String areaSquareMiles;

  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CREDITS = "Credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private String credits;

  public static final String SERIALIZED_NAME_ELDERLY_HOUSEHOLD_PERCENT = "ElderlyHouseholdPercent";
  @SerializedName(SERIALIZED_NAME_ELDERLY_HOUSEHOLD_PERCENT)
  private String elderlyHouseholdPercent;

  public static final String SERIALIZED_NAME_FARMER_HOUSEHOLD_PERCENT = "FarmerHouseholdPercent";
  @SerializedName(SERIALIZED_NAME_FARMER_HOUSEHOLD_PERCENT)
  private String farmerHouseholdPercent;

  public static final String SERIALIZED_NAME_INCOME_PERCENT100K = "IncomePercent100k";
  @SerializedName(SERIALIZED_NAME_INCOME_PERCENT100K)
  private String incomePercent100k;

  public static final String SERIALIZED_NAME_INCOME_PERCENT200K = "IncomePercent200k";
  @SerializedName(SERIALIZED_NAME_INCOME_PERCENT200K)
  private String incomePercent200k;

  public static final String SERIALIZED_NAME_INCOME_PERCENT50K = "IncomePercent50k";
  @SerializedName(SERIALIZED_NAME_INCOME_PERCENT50K)
  private String incomePercent50k;

  public static final String SERIALIZED_NAME_LATITUDE = "Latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private String latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "Longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private String longitude;

  public static final String SERIALIZED_NAME_MARRIED_HOUSEHOLD_PERCENT = "MarriedHouseholdPercent";
  @SerializedName(SERIALIZED_NAME_MARRIED_HOUSEHOLD_PERCENT)
  private String marriedHouseholdPercent;

  public static final String SERIALIZED_NAME_POPULATION = "Population";
  @SerializedName(SERIALIZED_NAME_POPULATION)
  private String population;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ZIP_CODE = "ZipCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public Getzipcodeinfo200Response() {
  }

  public Getzipcodeinfo200Response areaSquareMiles(String areaSquareMiles) {
    this.areaSquareMiles = areaSquareMiles;
    return this;
  }

  /**
   * Get areaSquareMiles
   * @return areaSquareMiles
   */
  @javax.annotation.Nullable
  public String getAreaSquareMiles() {
    return areaSquareMiles;
  }

  public void setAreaSquareMiles(String areaSquareMiles) {
    this.areaSquareMiles = areaSquareMiles;
  }


  public Getzipcodeinfo200Response city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Getzipcodeinfo200Response code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Getzipcodeinfo200Response credits(String credits) {
    this.credits = credits;
    return this;
  }

  /**
   * Get credits
   * @return credits
   */
  @javax.annotation.Nullable
  public String getCredits() {
    return credits;
  }

  public void setCredits(String credits) {
    this.credits = credits;
  }


  public Getzipcodeinfo200Response elderlyHouseholdPercent(String elderlyHouseholdPercent) {
    this.elderlyHouseholdPercent = elderlyHouseholdPercent;
    return this;
  }

  /**
   * Get elderlyHouseholdPercent
   * @return elderlyHouseholdPercent
   */
  @javax.annotation.Nullable
  public String getElderlyHouseholdPercent() {
    return elderlyHouseholdPercent;
  }

  public void setElderlyHouseholdPercent(String elderlyHouseholdPercent) {
    this.elderlyHouseholdPercent = elderlyHouseholdPercent;
  }


  public Getzipcodeinfo200Response farmerHouseholdPercent(String farmerHouseholdPercent) {
    this.farmerHouseholdPercent = farmerHouseholdPercent;
    return this;
  }

  /**
   * Get farmerHouseholdPercent
   * @return farmerHouseholdPercent
   */
  @javax.annotation.Nullable
  public String getFarmerHouseholdPercent() {
    return farmerHouseholdPercent;
  }

  public void setFarmerHouseholdPercent(String farmerHouseholdPercent) {
    this.farmerHouseholdPercent = farmerHouseholdPercent;
  }


  public Getzipcodeinfo200Response incomePercent100k(String incomePercent100k) {
    this.incomePercent100k = incomePercent100k;
    return this;
  }

  /**
   * Get incomePercent100k
   * @return incomePercent100k
   */
  @javax.annotation.Nullable
  public String getIncomePercent100k() {
    return incomePercent100k;
  }

  public void setIncomePercent100k(String incomePercent100k) {
    this.incomePercent100k = incomePercent100k;
  }


  public Getzipcodeinfo200Response incomePercent200k(String incomePercent200k) {
    this.incomePercent200k = incomePercent200k;
    return this;
  }

  /**
   * Get incomePercent200k
   * @return incomePercent200k
   */
  @javax.annotation.Nullable
  public String getIncomePercent200k() {
    return incomePercent200k;
  }

  public void setIncomePercent200k(String incomePercent200k) {
    this.incomePercent200k = incomePercent200k;
  }


  public Getzipcodeinfo200Response incomePercent50k(String incomePercent50k) {
    this.incomePercent50k = incomePercent50k;
    return this;
  }

  /**
   * Get incomePercent50k
   * @return incomePercent50k
   */
  @javax.annotation.Nullable
  public String getIncomePercent50k() {
    return incomePercent50k;
  }

  public void setIncomePercent50k(String incomePercent50k) {
    this.incomePercent50k = incomePercent50k;
  }


  public Getzipcodeinfo200Response latitude(String latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public String getLatitude() {
    return latitude;
  }

  public void setLatitude(String latitude) {
    this.latitude = latitude;
  }


  public Getzipcodeinfo200Response longitude(String longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public String getLongitude() {
    return longitude;
  }

  public void setLongitude(String longitude) {
    this.longitude = longitude;
  }


  public Getzipcodeinfo200Response marriedHouseholdPercent(String marriedHouseholdPercent) {
    this.marriedHouseholdPercent = marriedHouseholdPercent;
    return this;
  }

  /**
   * Get marriedHouseholdPercent
   * @return marriedHouseholdPercent
   */
  @javax.annotation.Nullable
  public String getMarriedHouseholdPercent() {
    return marriedHouseholdPercent;
  }

  public void setMarriedHouseholdPercent(String marriedHouseholdPercent) {
    this.marriedHouseholdPercent = marriedHouseholdPercent;
  }


  public Getzipcodeinfo200Response population(String population) {
    this.population = population;
    return this;
  }

  /**
   * Get population
   * @return population
   */
  @javax.annotation.Nullable
  public String getPopulation() {
    return population;
  }

  public void setPopulation(String population) {
    this.population = population;
  }


  public Getzipcodeinfo200Response state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Getzipcodeinfo200Response zipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  /**
   * Get zipCode
   * @return zipCode
   */
  @javax.annotation.Nullable
  public String getZipCode() {
    return zipCode;
  }

  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Getzipcodeinfo200Response getzipcodeinfo200Response = (Getzipcodeinfo200Response) o;
    return Objects.equals(this.areaSquareMiles, getzipcodeinfo200Response.areaSquareMiles) &&
        Objects.equals(this.city, getzipcodeinfo200Response.city) &&
        Objects.equals(this.code, getzipcodeinfo200Response.code) &&
        Objects.equals(this.credits, getzipcodeinfo200Response.credits) &&
        Objects.equals(this.elderlyHouseholdPercent, getzipcodeinfo200Response.elderlyHouseholdPercent) &&
        Objects.equals(this.farmerHouseholdPercent, getzipcodeinfo200Response.farmerHouseholdPercent) &&
        Objects.equals(this.incomePercent100k, getzipcodeinfo200Response.incomePercent100k) &&
        Objects.equals(this.incomePercent200k, getzipcodeinfo200Response.incomePercent200k) &&
        Objects.equals(this.incomePercent50k, getzipcodeinfo200Response.incomePercent50k) &&
        Objects.equals(this.latitude, getzipcodeinfo200Response.latitude) &&
        Objects.equals(this.longitude, getzipcodeinfo200Response.longitude) &&
        Objects.equals(this.marriedHouseholdPercent, getzipcodeinfo200Response.marriedHouseholdPercent) &&
        Objects.equals(this.population, getzipcodeinfo200Response.population) &&
        Objects.equals(this.state, getzipcodeinfo200Response.state) &&
        Objects.equals(this.zipCode, getzipcodeinfo200Response.zipCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(areaSquareMiles, city, code, credits, elderlyHouseholdPercent, farmerHouseholdPercent, incomePercent100k, incomePercent200k, incomePercent50k, latitude, longitude, marriedHouseholdPercent, population, state, zipCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Getzipcodeinfo200Response {\n");
    sb.append("    areaSquareMiles: ").append(toIndentedString(areaSquareMiles)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    elderlyHouseholdPercent: ").append(toIndentedString(elderlyHouseholdPercent)).append("\n");
    sb.append("    farmerHouseholdPercent: ").append(toIndentedString(farmerHouseholdPercent)).append("\n");
    sb.append("    incomePercent100k: ").append(toIndentedString(incomePercent100k)).append("\n");
    sb.append("    incomePercent200k: ").append(toIndentedString(incomePercent200k)).append("\n");
    sb.append("    incomePercent50k: ").append(toIndentedString(incomePercent50k)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    marriedHouseholdPercent: ").append(toIndentedString(marriedHouseholdPercent)).append("\n");
    sb.append("    population: ").append(toIndentedString(population)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AreaSquareMiles");
    openapiFields.add("City");
    openapiFields.add("Code");
    openapiFields.add("Credits");
    openapiFields.add("ElderlyHouseholdPercent");
    openapiFields.add("FarmerHouseholdPercent");
    openapiFields.add("IncomePercent100k");
    openapiFields.add("IncomePercent200k");
    openapiFields.add("IncomePercent50k");
    openapiFields.add("Latitude");
    openapiFields.add("Longitude");
    openapiFields.add("MarriedHouseholdPercent");
    openapiFields.add("Population");
    openapiFields.add("State");
    openapiFields.add("ZipCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Getzipcodeinfo200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Getzipcodeinfo200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Getzipcodeinfo200Response is not found in the empty JSON string", Getzipcodeinfo200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Getzipcodeinfo200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Getzipcodeinfo200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AreaSquareMiles") != null && !jsonObj.get("AreaSquareMiles").isJsonNull()) && !jsonObj.get("AreaSquareMiles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AreaSquareMiles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AreaSquareMiles").toString()));
      }
      if ((jsonObj.get("City") != null && !jsonObj.get("City").isJsonNull()) && !jsonObj.get("City").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `City` to be a primitive type in the JSON string but got `%s`", jsonObj.get("City").toString()));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("Credits") != null && !jsonObj.get("Credits").isJsonNull()) && !jsonObj.get("Credits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Credits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Credits").toString()));
      }
      if ((jsonObj.get("ElderlyHouseholdPercent") != null && !jsonObj.get("ElderlyHouseholdPercent").isJsonNull()) && !jsonObj.get("ElderlyHouseholdPercent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ElderlyHouseholdPercent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ElderlyHouseholdPercent").toString()));
      }
      if ((jsonObj.get("FarmerHouseholdPercent") != null && !jsonObj.get("FarmerHouseholdPercent").isJsonNull()) && !jsonObj.get("FarmerHouseholdPercent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FarmerHouseholdPercent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FarmerHouseholdPercent").toString()));
      }
      if ((jsonObj.get("IncomePercent100k") != null && !jsonObj.get("IncomePercent100k").isJsonNull()) && !jsonObj.get("IncomePercent100k").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IncomePercent100k` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IncomePercent100k").toString()));
      }
      if ((jsonObj.get("IncomePercent200k") != null && !jsonObj.get("IncomePercent200k").isJsonNull()) && !jsonObj.get("IncomePercent200k").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IncomePercent200k` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IncomePercent200k").toString()));
      }
      if ((jsonObj.get("IncomePercent50k") != null && !jsonObj.get("IncomePercent50k").isJsonNull()) && !jsonObj.get("IncomePercent50k").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IncomePercent50k` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IncomePercent50k").toString()));
      }
      if ((jsonObj.get("Latitude") != null && !jsonObj.get("Latitude").isJsonNull()) && !jsonObj.get("Latitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Latitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Latitude").toString()));
      }
      if ((jsonObj.get("Longitude") != null && !jsonObj.get("Longitude").isJsonNull()) && !jsonObj.get("Longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Longitude").toString()));
      }
      if ((jsonObj.get("MarriedHouseholdPercent") != null && !jsonObj.get("MarriedHouseholdPercent").isJsonNull()) && !jsonObj.get("MarriedHouseholdPercent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MarriedHouseholdPercent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MarriedHouseholdPercent").toString()));
      }
      if ((jsonObj.get("Population") != null && !jsonObj.get("Population").isJsonNull()) && !jsonObj.get("Population").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Population` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Population").toString()));
      }
      if ((jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) && !jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      if ((jsonObj.get("ZipCode") != null && !jsonObj.get("ZipCode").isJsonNull()) && !jsonObj.get("ZipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ZipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ZipCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Getzipcodeinfo200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Getzipcodeinfo200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Getzipcodeinfo200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Getzipcodeinfo200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Getzipcodeinfo200Response>() {
           @Override
           public void write(JsonWriter out, Getzipcodeinfo200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Getzipcodeinfo200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Getzipcodeinfo200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Getzipcodeinfo200Response
   * @throws IOException if the JSON string is invalid with respect to Getzipcodeinfo200Response
   */
  public static Getzipcodeinfo200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Getzipcodeinfo200Response.class);
  }

  /**
   * Convert an instance of Getzipcodeinfo200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

