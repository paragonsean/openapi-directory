/**
 * City Context
 * City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPointInfo_parks_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPointInfo_parks_inner::OAIPointInfo_parks_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPointInfo_parks_inner::OAIPointInfo_parks_inner() {
    this->initializeModel();
}

OAIPointInfo_parks_inner::~OAIPointInfo_parks_inner() {}

void OAIPointInfo_parks_inner::initializeModel() {

    m_area_sqm_isSet = false;
    m_area_sqm_isValid = false;

    m_centroid_isSet = false;
    m_centroid_isValid = false;

    m_distance_meters_isSet = false;
    m_distance_meters_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIPointInfo_parks_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPointInfo_parks_inner::fromJsonObject(QJsonObject json) {

    m_area_sqm_isValid = ::OpenAPI::fromJsonValue(m_area_sqm, json[QString("areaSqm")]);
    m_area_sqm_isSet = !json[QString("areaSqm")].isNull() && m_area_sqm_isValid;

    m_centroid_isValid = ::OpenAPI::fromJsonValue(m_centroid, json[QString("centroid")]);
    m_centroid_isSet = !json[QString("centroid")].isNull() && m_centroid_isValid;

    m_distance_meters_isValid = ::OpenAPI::fromJsonValue(m_distance_meters, json[QString("distanceMeters")]);
    m_distance_meters_isSet = !json[QString("distanceMeters")].isNull() && m_distance_meters_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIPointInfo_parks_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPointInfo_parks_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_area_sqm_isSet) {
        obj.insert(QString("areaSqm"), ::OpenAPI::toJsonValue(m_area_sqm));
    }
    if (m_centroid_isSet) {
        obj.insert(QString("centroid"), ::OpenAPI::toJsonValue(m_centroid));
    }
    if (m_distance_meters_isSet) {
        obj.insert(QString("distanceMeters"), ::OpenAPI::toJsonValue(m_distance_meters));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

qint32 OAIPointInfo_parks_inner::getAreaSqm() const {
    return m_area_sqm;
}
void OAIPointInfo_parks_inner::setAreaSqm(const qint32 &area_sqm) {
    m_area_sqm = area_sqm;
    m_area_sqm_isSet = true;
}

bool OAIPointInfo_parks_inner::is_area_sqm_Set() const{
    return m_area_sqm_isSet;
}

bool OAIPointInfo_parks_inner::is_area_sqm_Valid() const{
    return m_area_sqm_isValid;
}

OAIObject OAIPointInfo_parks_inner::getCentroid() const {
    return m_centroid;
}
void OAIPointInfo_parks_inner::setCentroid(const OAIObject &centroid) {
    m_centroid = centroid;
    m_centroid_isSet = true;
}

bool OAIPointInfo_parks_inner::is_centroid_Set() const{
    return m_centroid_isSet;
}

bool OAIPointInfo_parks_inner::is_centroid_Valid() const{
    return m_centroid_isValid;
}

qint32 OAIPointInfo_parks_inner::getDistanceMeters() const {
    return m_distance_meters;
}
void OAIPointInfo_parks_inner::setDistanceMeters(const qint32 &distance_meters) {
    m_distance_meters = distance_meters;
    m_distance_meters_isSet = true;
}

bool OAIPointInfo_parks_inner::is_distance_meters_Set() const{
    return m_distance_meters_isSet;
}

bool OAIPointInfo_parks_inner::is_distance_meters_Valid() const{
    return m_distance_meters_isValid;
}

QString OAIPointInfo_parks_inner::getName() const {
    return m_name;
}
void OAIPointInfo_parks_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPointInfo_parks_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPointInfo_parks_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPointInfo_parks_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_sqm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_centroid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPointInfo_parks_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_area_sqm_isValid && m_centroid_isValid && m_distance_meters_isValid && true;
}

} // namespace OpenAPI
