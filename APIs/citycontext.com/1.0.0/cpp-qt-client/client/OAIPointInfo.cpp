/**
 * City Context
 * City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPointInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPointInfo::OAIPointInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPointInfo::OAIPointInfo() {
    this->initializeModel();
}

OAIPointInfo::~OAIPointInfo() {}

void OAIPointInfo::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_lsoa_isSet = false;
    m_lsoa_isValid = false;

    m_parks_isSet = false;
    m_parks_isValid = false;

    m_schools_isSet = false;
    m_schools_isValid = false;
}

void OAIPointInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPointInfo::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_lsoa_isValid = ::OpenAPI::fromJsonValue(m_lsoa, json[QString("lsoa")]);
    m_lsoa_isSet = !json[QString("lsoa")].isNull() && m_lsoa_isValid;

    m_parks_isValid = ::OpenAPI::fromJsonValue(m_parks, json[QString("parks")]);
    m_parks_isSet = !json[QString("parks")].isNull() && m_parks_isValid;

    m_schools_isValid = ::OpenAPI::fromJsonValue(m_schools, json[QString("schools")]);
    m_schools_isSet = !json[QString("schools")].isNull() && m_schools_isValid;
}

QString OAIPointInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPointInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_lsoa.isSet()) {
        obj.insert(QString("lsoa"), ::OpenAPI::toJsonValue(m_lsoa));
    }
    if (m_parks.size() > 0) {
        obj.insert(QString("parks"), ::OpenAPI::toJsonValue(m_parks));
    }
    if (m_schools.size() > 0) {
        obj.insert(QString("schools"), ::OpenAPI::toJsonValue(m_schools));
    }
    return obj;
}

OAILocation OAIPointInfo::getLocation() const {
    return m_location;
}
void OAIPointInfo::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPointInfo::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPointInfo::is_location_Valid() const{
    return m_location_isValid;
}

OAIPointInfo_lsoa OAIPointInfo::getLsoa() const {
    return m_lsoa;
}
void OAIPointInfo::setLsoa(const OAIPointInfo_lsoa &lsoa) {
    m_lsoa = lsoa;
    m_lsoa_isSet = true;
}

bool OAIPointInfo::is_lsoa_Set() const{
    return m_lsoa_isSet;
}

bool OAIPointInfo::is_lsoa_Valid() const{
    return m_lsoa_isValid;
}

QList<OAIPointInfo_parks_inner> OAIPointInfo::getParks() const {
    return m_parks;
}
void OAIPointInfo::setParks(const QList<OAIPointInfo_parks_inner> &parks) {
    m_parks = parks;
    m_parks_isSet = true;
}

bool OAIPointInfo::is_parks_Set() const{
    return m_parks_isSet;
}

bool OAIPointInfo::is_parks_Valid() const{
    return m_parks_isValid;
}

QList<OAIPointInfo_schools_inner> OAIPointInfo::getSchools() const {
    return m_schools;
}
void OAIPointInfo::setSchools(const QList<OAIPointInfo_schools_inner> &schools) {
    m_schools = schools;
    m_schools_isSet = true;
}

bool OAIPointInfo::is_schools_Set() const{
    return m_schools_isSet;
}

bool OAIPointInfo::is_schools_Valid() const{
    return m_schools_isValid;
}

bool OAIPointInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lsoa.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schools.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPointInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && m_parks_isValid && m_schools_isValid && true;
}

} // namespace OpenAPI
