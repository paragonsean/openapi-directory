/**
 * City Context
 * City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_within_london_ccz_isSet = false;
    m_within_london_ccz_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_within_london_ccz_isValid = ::OpenAPI::fromJsonValue(m_within_london_ccz, json[QString("withinLondonCCZ")]);
    m_within_london_ccz_isSet = !json[QString("withinLondonCCZ")].isNull() && m_within_london_ccz_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_within_london_ccz_isSet) {
        obj.insert(QString("withinLondonCCZ"), ::OpenAPI::toJsonValue(m_within_london_ccz));
    }
    return obj;
}

float OAILocation::getLat() const {
    return m_lat;
}
void OAILocation::setLat(const float &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAILocation::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAILocation::is_lat_Valid() const{
    return m_lat_isValid;
}

float OAILocation::getLon() const {
    return m_lon;
}
void OAILocation::setLon(const float &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAILocation::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAILocation::is_lon_Valid() const{
    return m_lon_isValid;
}

bool OAILocation::isWithinLondonCcz() const {
    return m_within_london_ccz;
}
void OAILocation::setWithinLondonCcz(const bool &within_london_ccz) {
    m_within_london_ccz = within_london_ccz;
    m_within_london_ccz_isSet = true;
}

bool OAILocation::is_within_london_ccz_Set() const{
    return m_within_london_ccz_isSet;
}

bool OAILocation::is_within_london_ccz_Valid() const{
    return m_within_london_ccz_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_within_london_ccz_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lat_isValid && m_lon_isValid && true;
}

} // namespace OpenAPI
