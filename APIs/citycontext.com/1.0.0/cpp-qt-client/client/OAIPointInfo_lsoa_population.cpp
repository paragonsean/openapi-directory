/**
 * City Context
 * City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPointInfo_lsoa_population.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPointInfo_lsoa_population::OAIPointInfo_lsoa_population(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPointInfo_lsoa_population::OAIPointInfo_lsoa_population() {
    this->initializeModel();
}

OAIPointInfo_lsoa_population::~OAIPointInfo_lsoa_population() {}

void OAIPointInfo_lsoa_population::initializeModel() {

    m_all_usual_residents_isSet = false;
    m_all_usual_residents_isValid = false;

    m_communal_establishment_residents_isSet = false;
    m_communal_establishment_residents_isValid = false;

    m_household_residents_isSet = false;
    m_household_residents_isValid = false;

    m_households_isSet = false;
    m_households_isValid = false;

    m_persons_per_hectare_isSet = false;
    m_persons_per_hectare_isValid = false;

    m_persons_per_household_isSet = false;
    m_persons_per_household_isValid = false;
}

void OAIPointInfo_lsoa_population::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPointInfo_lsoa_population::fromJsonObject(QJsonObject json) {

    m_all_usual_residents_isValid = ::OpenAPI::fromJsonValue(m_all_usual_residents, json[QString("allUsualResidents")]);
    m_all_usual_residents_isSet = !json[QString("allUsualResidents")].isNull() && m_all_usual_residents_isValid;

    m_communal_establishment_residents_isValid = ::OpenAPI::fromJsonValue(m_communal_establishment_residents, json[QString("communalEstablishmentResidents")]);
    m_communal_establishment_residents_isSet = !json[QString("communalEstablishmentResidents")].isNull() && m_communal_establishment_residents_isValid;

    m_household_residents_isValid = ::OpenAPI::fromJsonValue(m_household_residents, json[QString("householdResidents")]);
    m_household_residents_isSet = !json[QString("householdResidents")].isNull() && m_household_residents_isValid;

    m_households_isValid = ::OpenAPI::fromJsonValue(m_households, json[QString("households")]);
    m_households_isSet = !json[QString("households")].isNull() && m_households_isValid;

    m_persons_per_hectare_isValid = ::OpenAPI::fromJsonValue(m_persons_per_hectare, json[QString("personsPerHectare")]);
    m_persons_per_hectare_isSet = !json[QString("personsPerHectare")].isNull() && m_persons_per_hectare_isValid;

    m_persons_per_household_isValid = ::OpenAPI::fromJsonValue(m_persons_per_household, json[QString("personsPerHousehold")]);
    m_persons_per_household_isSet = !json[QString("personsPerHousehold")].isNull() && m_persons_per_household_isValid;
}

QString OAIPointInfo_lsoa_population::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPointInfo_lsoa_population::asJsonObject() const {
    QJsonObject obj;
    if (m_all_usual_residents_isSet) {
        obj.insert(QString("allUsualResidents"), ::OpenAPI::toJsonValue(m_all_usual_residents));
    }
    if (m_communal_establishment_residents_isSet) {
        obj.insert(QString("communalEstablishmentResidents"), ::OpenAPI::toJsonValue(m_communal_establishment_residents));
    }
    if (m_household_residents_isSet) {
        obj.insert(QString("householdResidents"), ::OpenAPI::toJsonValue(m_household_residents));
    }
    if (m_households_isSet) {
        obj.insert(QString("households"), ::OpenAPI::toJsonValue(m_households));
    }
    if (m_persons_per_hectare_isSet) {
        obj.insert(QString("personsPerHectare"), ::OpenAPI::toJsonValue(m_persons_per_hectare));
    }
    if (m_persons_per_household_isSet) {
        obj.insert(QString("personsPerHousehold"), ::OpenAPI::toJsonValue(m_persons_per_household));
    }
    return obj;
}

qint32 OAIPointInfo_lsoa_population::getAllUsualResidents() const {
    return m_all_usual_residents;
}
void OAIPointInfo_lsoa_population::setAllUsualResidents(const qint32 &all_usual_residents) {
    m_all_usual_residents = all_usual_residents;
    m_all_usual_residents_isSet = true;
}

bool OAIPointInfo_lsoa_population::is_all_usual_residents_Set() const{
    return m_all_usual_residents_isSet;
}

bool OAIPointInfo_lsoa_population::is_all_usual_residents_Valid() const{
    return m_all_usual_residents_isValid;
}

qint32 OAIPointInfo_lsoa_population::getCommunalEstablishmentResidents() const {
    return m_communal_establishment_residents;
}
void OAIPointInfo_lsoa_population::setCommunalEstablishmentResidents(const qint32 &communal_establishment_residents) {
    m_communal_establishment_residents = communal_establishment_residents;
    m_communal_establishment_residents_isSet = true;
}

bool OAIPointInfo_lsoa_population::is_communal_establishment_residents_Set() const{
    return m_communal_establishment_residents_isSet;
}

bool OAIPointInfo_lsoa_population::is_communal_establishment_residents_Valid() const{
    return m_communal_establishment_residents_isValid;
}

qint32 OAIPointInfo_lsoa_population::getHouseholdResidents() const {
    return m_household_residents;
}
void OAIPointInfo_lsoa_population::setHouseholdResidents(const qint32 &household_residents) {
    m_household_residents = household_residents;
    m_household_residents_isSet = true;
}

bool OAIPointInfo_lsoa_population::is_household_residents_Set() const{
    return m_household_residents_isSet;
}

bool OAIPointInfo_lsoa_population::is_household_residents_Valid() const{
    return m_household_residents_isValid;
}

qint32 OAIPointInfo_lsoa_population::getHouseholds() const {
    return m_households;
}
void OAIPointInfo_lsoa_population::setHouseholds(const qint32 &households) {
    m_households = households;
    m_households_isSet = true;
}

bool OAIPointInfo_lsoa_population::is_households_Set() const{
    return m_households_isSet;
}

bool OAIPointInfo_lsoa_population::is_households_Valid() const{
    return m_households_isValid;
}

qint32 OAIPointInfo_lsoa_population::getPersonsPerHectare() const {
    return m_persons_per_hectare;
}
void OAIPointInfo_lsoa_population::setPersonsPerHectare(const qint32 &persons_per_hectare) {
    m_persons_per_hectare = persons_per_hectare;
    m_persons_per_hectare_isSet = true;
}

bool OAIPointInfo_lsoa_population::is_persons_per_hectare_Set() const{
    return m_persons_per_hectare_isSet;
}

bool OAIPointInfo_lsoa_population::is_persons_per_hectare_Valid() const{
    return m_persons_per_hectare_isValid;
}

qint32 OAIPointInfo_lsoa_population::getPersonsPerHousehold() const {
    return m_persons_per_household;
}
void OAIPointInfo_lsoa_population::setPersonsPerHousehold(const qint32 &persons_per_household) {
    m_persons_per_household = persons_per_household;
    m_persons_per_household_isSet = true;
}

bool OAIPointInfo_lsoa_population::is_persons_per_household_Set() const{
    return m_persons_per_household_isSet;
}

bool OAIPointInfo_lsoa_population::is_persons_per_household_Valid() const{
    return m_persons_per_household_isValid;
}

bool OAIPointInfo_lsoa_population::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_usual_residents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_communal_establishment_residents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_household_residents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_households_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persons_per_hectare_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persons_per_household_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPointInfo_lsoa_population::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_all_usual_residents_isValid && m_communal_establishment_residents_isValid && m_household_residents_isValid && m_households_isValid && m_persons_per_hectare_isValid && m_persons_per_household_isValid && true;
}

} // namespace OpenAPI
