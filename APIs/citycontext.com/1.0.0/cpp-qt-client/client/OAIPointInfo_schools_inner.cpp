/**
 * City Context
 * City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPointInfo_schools_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPointInfo_schools_inner::OAIPointInfo_schools_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPointInfo_schools_inner::OAIPointInfo_schools_inner() {
    this->initializeModel();
}

OAIPointInfo_schools_inner::~OAIPointInfo_schools_inner() {}

void OAIPointInfo_schools_inner::initializeModel() {

    m_distance_meters_isSet = false;
    m_distance_meters_isValid = false;

    m_last_inpection_url_isSet = false;
    m_last_inpection_url_isValid = false;

    m_last_inspection_date_isSet = false;
    m_last_inspection_date_isValid = false;

    m_leadership_and_management_isSet = false;
    m_leadership_and_management_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_overall_effectiveness_isSet = false;
    m_overall_effectiveness_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_quality_of_teaching_isSet = false;
    m_quality_of_teaching_isValid = false;

    m_school_name_isSet = false;
    m_school_name_isValid = false;

    m_type_of_establishment_isSet = false;
    m_type_of_establishment_isValid = false;

    m_urn_isSet = false;
    m_urn_isValid = false;
}

void OAIPointInfo_schools_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPointInfo_schools_inner::fromJsonObject(QJsonObject json) {

    m_distance_meters_isValid = ::OpenAPI::fromJsonValue(m_distance_meters, json[QString("distanceMeters")]);
    m_distance_meters_isSet = !json[QString("distanceMeters")].isNull() && m_distance_meters_isValid;

    m_last_inpection_url_isValid = ::OpenAPI::fromJsonValue(m_last_inpection_url, json[QString("lastInpectionUrl")]);
    m_last_inpection_url_isSet = !json[QString("lastInpectionUrl")].isNull() && m_last_inpection_url_isValid;

    m_last_inspection_date_isValid = ::OpenAPI::fromJsonValue(m_last_inspection_date, json[QString("lastInspectionDate")]);
    m_last_inspection_date_isSet = !json[QString("lastInspectionDate")].isNull() && m_last_inspection_date_isValid;

    m_leadership_and_management_isValid = ::OpenAPI::fromJsonValue(m_leadership_and_management, json[QString("leadershipAndManagement")]);
    m_leadership_and_management_isSet = !json[QString("leadershipAndManagement")].isNull() && m_leadership_and_management_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_overall_effectiveness_isValid = ::OpenAPI::fromJsonValue(m_overall_effectiveness, json[QString("overallEffectiveness")]);
    m_overall_effectiveness_isSet = !json[QString("overallEffectiveness")].isNull() && m_overall_effectiveness_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_quality_of_teaching_isValid = ::OpenAPI::fromJsonValue(m_quality_of_teaching, json[QString("qualityOfTeaching")]);
    m_quality_of_teaching_isSet = !json[QString("qualityOfTeaching")].isNull() && m_quality_of_teaching_isValid;

    m_school_name_isValid = ::OpenAPI::fromJsonValue(m_school_name, json[QString("schoolName")]);
    m_school_name_isSet = !json[QString("schoolName")].isNull() && m_school_name_isValid;

    m_type_of_establishment_isValid = ::OpenAPI::fromJsonValue(m_type_of_establishment, json[QString("typeOfEstablishment")]);
    m_type_of_establishment_isSet = !json[QString("typeOfEstablishment")].isNull() && m_type_of_establishment_isValid;

    m_urn_isValid = ::OpenAPI::fromJsonValue(m_urn, json[QString("urn")]);
    m_urn_isSet = !json[QString("urn")].isNull() && m_urn_isValid;
}

QString OAIPointInfo_schools_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPointInfo_schools_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_distance_meters_isSet) {
        obj.insert(QString("distanceMeters"), ::OpenAPI::toJsonValue(m_distance_meters));
    }
    if (m_last_inpection_url_isSet) {
        obj.insert(QString("lastInpectionUrl"), ::OpenAPI::toJsonValue(m_last_inpection_url));
    }
    if (m_last_inspection_date_isSet) {
        obj.insert(QString("lastInspectionDate"), ::OpenAPI::toJsonValue(m_last_inspection_date));
    }
    if (m_leadership_and_management_isSet) {
        obj.insert(QString("leadershipAndManagement"), ::OpenAPI::toJsonValue(m_leadership_and_management));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_overall_effectiveness_isSet) {
        obj.insert(QString("overallEffectiveness"), ::OpenAPI::toJsonValue(m_overall_effectiveness));
    }
    if (m_phase_isSet) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_quality_of_teaching_isSet) {
        obj.insert(QString("qualityOfTeaching"), ::OpenAPI::toJsonValue(m_quality_of_teaching));
    }
    if (m_school_name_isSet) {
        obj.insert(QString("schoolName"), ::OpenAPI::toJsonValue(m_school_name));
    }
    if (m_type_of_establishment_isSet) {
        obj.insert(QString("typeOfEstablishment"), ::OpenAPI::toJsonValue(m_type_of_establishment));
    }
    if (m_urn_isSet) {
        obj.insert(QString("urn"), ::OpenAPI::toJsonValue(m_urn));
    }
    return obj;
}

qint32 OAIPointInfo_schools_inner::getDistanceMeters() const {
    return m_distance_meters;
}
void OAIPointInfo_schools_inner::setDistanceMeters(const qint32 &distance_meters) {
    m_distance_meters = distance_meters;
    m_distance_meters_isSet = true;
}

bool OAIPointInfo_schools_inner::is_distance_meters_Set() const{
    return m_distance_meters_isSet;
}

bool OAIPointInfo_schools_inner::is_distance_meters_Valid() const{
    return m_distance_meters_isValid;
}

QString OAIPointInfo_schools_inner::getLastInpectionUrl() const {
    return m_last_inpection_url;
}
void OAIPointInfo_schools_inner::setLastInpectionUrl(const QString &last_inpection_url) {
    m_last_inpection_url = last_inpection_url;
    m_last_inpection_url_isSet = true;
}

bool OAIPointInfo_schools_inner::is_last_inpection_url_Set() const{
    return m_last_inpection_url_isSet;
}

bool OAIPointInfo_schools_inner::is_last_inpection_url_Valid() const{
    return m_last_inpection_url_isValid;
}

QDateTime OAIPointInfo_schools_inner::getLastInspectionDate() const {
    return m_last_inspection_date;
}
void OAIPointInfo_schools_inner::setLastInspectionDate(const QDateTime &last_inspection_date) {
    m_last_inspection_date = last_inspection_date;
    m_last_inspection_date_isSet = true;
}

bool OAIPointInfo_schools_inner::is_last_inspection_date_Set() const{
    return m_last_inspection_date_isSet;
}

bool OAIPointInfo_schools_inner::is_last_inspection_date_Valid() const{
    return m_last_inspection_date_isValid;
}

qint32 OAIPointInfo_schools_inner::getLeadershipAndManagement() const {
    return m_leadership_and_management;
}
void OAIPointInfo_schools_inner::setLeadershipAndManagement(const qint32 &leadership_and_management) {
    m_leadership_and_management = leadership_and_management;
    m_leadership_and_management_isSet = true;
}

bool OAIPointInfo_schools_inner::is_leadership_and_management_Set() const{
    return m_leadership_and_management_isSet;
}

bool OAIPointInfo_schools_inner::is_leadership_and_management_Valid() const{
    return m_leadership_and_management_isValid;
}

OAIObject OAIPointInfo_schools_inner::getLocation() const {
    return m_location;
}
void OAIPointInfo_schools_inner::setLocation(const OAIObject &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPointInfo_schools_inner::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPointInfo_schools_inner::is_location_Valid() const{
    return m_location_isValid;
}

qint32 OAIPointInfo_schools_inner::getOverallEffectiveness() const {
    return m_overall_effectiveness;
}
void OAIPointInfo_schools_inner::setOverallEffectiveness(const qint32 &overall_effectiveness) {
    m_overall_effectiveness = overall_effectiveness;
    m_overall_effectiveness_isSet = true;
}

bool OAIPointInfo_schools_inner::is_overall_effectiveness_Set() const{
    return m_overall_effectiveness_isSet;
}

bool OAIPointInfo_schools_inner::is_overall_effectiveness_Valid() const{
    return m_overall_effectiveness_isValid;
}

QString OAIPointInfo_schools_inner::getPhase() const {
    return m_phase;
}
void OAIPointInfo_schools_inner::setPhase(const QString &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIPointInfo_schools_inner::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIPointInfo_schools_inner::is_phase_Valid() const{
    return m_phase_isValid;
}

qint32 OAIPointInfo_schools_inner::getQualityOfTeaching() const {
    return m_quality_of_teaching;
}
void OAIPointInfo_schools_inner::setQualityOfTeaching(const qint32 &quality_of_teaching) {
    m_quality_of_teaching = quality_of_teaching;
    m_quality_of_teaching_isSet = true;
}

bool OAIPointInfo_schools_inner::is_quality_of_teaching_Set() const{
    return m_quality_of_teaching_isSet;
}

bool OAIPointInfo_schools_inner::is_quality_of_teaching_Valid() const{
    return m_quality_of_teaching_isValid;
}

QString OAIPointInfo_schools_inner::getSchoolName() const {
    return m_school_name;
}
void OAIPointInfo_schools_inner::setSchoolName(const QString &school_name) {
    m_school_name = school_name;
    m_school_name_isSet = true;
}

bool OAIPointInfo_schools_inner::is_school_name_Set() const{
    return m_school_name_isSet;
}

bool OAIPointInfo_schools_inner::is_school_name_Valid() const{
    return m_school_name_isValid;
}

QString OAIPointInfo_schools_inner::getTypeOfEstablishment() const {
    return m_type_of_establishment;
}
void OAIPointInfo_schools_inner::setTypeOfEstablishment(const QString &type_of_establishment) {
    m_type_of_establishment = type_of_establishment;
    m_type_of_establishment_isSet = true;
}

bool OAIPointInfo_schools_inner::is_type_of_establishment_Set() const{
    return m_type_of_establishment_isSet;
}

bool OAIPointInfo_schools_inner::is_type_of_establishment_Valid() const{
    return m_type_of_establishment_isValid;
}

qint32 OAIPointInfo_schools_inner::getUrn() const {
    return m_urn;
}
void OAIPointInfo_schools_inner::setUrn(const qint32 &urn) {
    m_urn = urn;
    m_urn_isSet = true;
}

bool OAIPointInfo_schools_inner::is_urn_Set() const{
    return m_urn_isSet;
}

bool OAIPointInfo_schools_inner::is_urn_Valid() const{
    return m_urn_isValid;
}

bool OAIPointInfo_schools_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distance_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_inpection_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_inspection_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leadership_and_management_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_effectiveness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_of_teaching_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_school_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_establishment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPointInfo_schools_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_distance_meters_isValid && m_last_inpection_url_isValid && m_last_inspection_date_isValid && m_leadership_and_management_isValid && m_location_isValid && m_overall_effectiveness_isValid && m_phase_isValid && m_quality_of_teaching_isValid && m_school_name_isValid && m_type_of_establishment_isValid && m_urn_isValid && true;
}

} // namespace OpenAPI
