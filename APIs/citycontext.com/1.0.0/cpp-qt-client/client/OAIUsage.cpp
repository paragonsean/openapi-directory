/**
 * City Context
 * City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsage::OAIUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsage::OAIUsage() {
    this->initializeModel();
}

OAIUsage::~OAIUsage() {}

void OAIUsage::initializeModel() {

    m_allowance_isSet = false;
    m_allowance_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_period_end_isSet = false;
    m_period_end_isValid = false;

    m_period_start_isSet = false;
    m_period_start_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsage::fromJsonObject(QJsonObject json) {

    m_allowance_isValid = ::OpenAPI::fromJsonValue(m_allowance, json[QString("allowance")]);
    m_allowance_isSet = !json[QString("allowance")].isNull() && m_allowance_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_period_end_isValid = ::OpenAPI::fromJsonValue(m_period_end, json[QString("periodEnd")]);
    m_period_end_isSet = !json[QString("periodEnd")].isNull() && m_period_end_isValid;

    m_period_start_isValid = ::OpenAPI::fromJsonValue(m_period_start, json[QString("periodStart")]);
    m_period_start_isSet = !json[QString("periodStart")].isNull() && m_period_start_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_allowance_isSet) {
        obj.insert(QString("allowance"), ::OpenAPI::toJsonValue(m_allowance));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_period_end_isSet) {
        obj.insert(QString("periodEnd"), ::OpenAPI::toJsonValue(m_period_end));
    }
    if (m_period_start_isSet) {
        obj.insert(QString("periodStart"), ::OpenAPI::toJsonValue(m_period_start));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

qint32 OAIUsage::getAllowance() const {
    return m_allowance;
}
void OAIUsage::setAllowance(const qint32 &allowance) {
    m_allowance = allowance;
    m_allowance_isSet = true;
}

bool OAIUsage::is_allowance_Set() const{
    return m_allowance_isSet;
}

bool OAIUsage::is_allowance_Valid() const{
    return m_allowance_isValid;
}

QString OAIUsage::getPeriod() const {
    return m_period;
}
void OAIUsage::setPeriod(const QString &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIUsage::is_period_Set() const{
    return m_period_isSet;
}

bool OAIUsage::is_period_Valid() const{
    return m_period_isValid;
}

QDateTime OAIUsage::getPeriodEnd() const {
    return m_period_end;
}
void OAIUsage::setPeriodEnd(const QDateTime &period_end) {
    m_period_end = period_end;
    m_period_end_isSet = true;
}

bool OAIUsage::is_period_end_Set() const{
    return m_period_end_isSet;
}

bool OAIUsage::is_period_end_Valid() const{
    return m_period_end_isValid;
}

QDateTime OAIUsage::getPeriodStart() const {
    return m_period_start;
}
void OAIUsage::setPeriodStart(const QDateTime &period_start) {
    m_period_start = period_start;
    m_period_start_isSet = true;
}

bool OAIUsage::is_period_start_Set() const{
    return m_period_start_isSet;
}

bool OAIUsage::is_period_start_Valid() const{
    return m_period_start_isValid;
}

QString OAIUsage::getPlan() const {
    return m_plan;
}
void OAIUsage::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIUsage::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIUsage::is_plan_Valid() const{
    return m_plan_isValid;
}

qint32 OAIUsage::getUsage() const {
    return m_usage;
}
void OAIUsage::setUsage(const qint32 &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIUsage::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIUsage::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_period_isValid && m_period_end_isValid && m_period_start_isValid && m_plan_isValid && m_usage_isValid && true;
}

} // namespace OpenAPI
