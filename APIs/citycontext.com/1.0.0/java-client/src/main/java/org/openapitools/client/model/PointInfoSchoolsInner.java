/*
 * City Context
 * City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PointInfoSchoolsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:52.551767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PointInfoSchoolsInner {
  public static final String SERIALIZED_NAME_DISTANCE_METERS = "distanceMeters";
  @SerializedName(SERIALIZED_NAME_DISTANCE_METERS)
  private Integer distanceMeters;

  public static final String SERIALIZED_NAME_LAST_INPECTION_URL = "lastInpectionUrl";
  @SerializedName(SERIALIZED_NAME_LAST_INPECTION_URL)
  private String lastInpectionUrl;

  public static final String SERIALIZED_NAME_LAST_INSPECTION_DATE = "lastInspectionDate";
  @SerializedName(SERIALIZED_NAME_LAST_INSPECTION_DATE)
  private OffsetDateTime lastInspectionDate;

  public static final String SERIALIZED_NAME_LEADERSHIP_AND_MANAGEMENT = "leadershipAndManagement";
  @SerializedName(SERIALIZED_NAME_LEADERSHIP_AND_MANAGEMENT)
  private Integer leadershipAndManagement;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Object location;

  public static final String SERIALIZED_NAME_OVERALL_EFFECTIVENESS = "overallEffectiveness";
  @SerializedName(SERIALIZED_NAME_OVERALL_EFFECTIVENESS)
  private Integer overallEffectiveness;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private String phase;

  public static final String SERIALIZED_NAME_QUALITY_OF_TEACHING = "qualityOfTeaching";
  @SerializedName(SERIALIZED_NAME_QUALITY_OF_TEACHING)
  private Integer qualityOfTeaching;

  public static final String SERIALIZED_NAME_SCHOOL_NAME = "schoolName";
  @SerializedName(SERIALIZED_NAME_SCHOOL_NAME)
  private String schoolName;

  public static final String SERIALIZED_NAME_TYPE_OF_ESTABLISHMENT = "typeOfEstablishment";
  @SerializedName(SERIALIZED_NAME_TYPE_OF_ESTABLISHMENT)
  private String typeOfEstablishment;

  public static final String SERIALIZED_NAME_URN = "urn";
  @SerializedName(SERIALIZED_NAME_URN)
  private Integer urn;

  public PointInfoSchoolsInner() {
  }

  public PointInfoSchoolsInner distanceMeters(Integer distanceMeters) {
    this.distanceMeters = distanceMeters;
    return this;
  }

  /**
   * Get distanceMeters
   * @return distanceMeters
   */
  @javax.annotation.Nonnull
  public Integer getDistanceMeters() {
    return distanceMeters;
  }

  public void setDistanceMeters(Integer distanceMeters) {
    this.distanceMeters = distanceMeters;
  }


  public PointInfoSchoolsInner lastInpectionUrl(String lastInpectionUrl) {
    this.lastInpectionUrl = lastInpectionUrl;
    return this;
  }

  /**
   * URL to the last inspection report
   * @return lastInpectionUrl
   */
  @javax.annotation.Nonnull
  public String getLastInpectionUrl() {
    return lastInpectionUrl;
  }

  public void setLastInpectionUrl(String lastInpectionUrl) {
    this.lastInpectionUrl = lastInpectionUrl;
  }


  public PointInfoSchoolsInner lastInspectionDate(OffsetDateTime lastInspectionDate) {
    this.lastInspectionDate = lastInspectionDate;
    return this;
  }

  /**
   * Date of the last Ofsted inspection
   * @return lastInspectionDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastInspectionDate() {
    return lastInspectionDate;
  }

  public void setLastInspectionDate(OffsetDateTime lastInspectionDate) {
    this.lastInspectionDate = lastInspectionDate;
  }


  public PointInfoSchoolsInner leadershipAndManagement(Integer leadershipAndManagement) {
    this.leadershipAndManagement = leadershipAndManagement;
    return this;
  }

  /**
   * Leadership and management grade in the last Ofsted report, from 1 (outstanding) to 4 (inadequate)
   * minimum: 1
   * maximum: 4
   * @return leadershipAndManagement
   */
  @javax.annotation.Nonnull
  public Integer getLeadershipAndManagement() {
    return leadershipAndManagement;
  }

  public void setLeadershipAndManagement(Integer leadershipAndManagement) {
    this.leadershipAndManagement = leadershipAndManagement;
  }


  public PointInfoSchoolsInner location(Object location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nonnull
  public Object getLocation() {
    return location;
  }

  public void setLocation(Object location) {
    this.location = location;
  }


  public PointInfoSchoolsInner overallEffectiveness(Integer overallEffectiveness) {
    this.overallEffectiveness = overallEffectiveness;
    return this;
  }

  /**
   * Overall effectiveness grade in the last Ofsted report, from 1 (outstanding) to 4 (inadequate)
   * minimum: 1
   * maximum: 4
   * @return overallEffectiveness
   */
  @javax.annotation.Nonnull
  public Integer getOverallEffectiveness() {
    return overallEffectiveness;
  }

  public void setOverallEffectiveness(Integer overallEffectiveness) {
    this.overallEffectiveness = overallEffectiveness;
  }


  public PointInfoSchoolsInner phase(String phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nonnull
  public String getPhase() {
    return phase;
  }

  public void setPhase(String phase) {
    this.phase = phase;
  }


  public PointInfoSchoolsInner qualityOfTeaching(Integer qualityOfTeaching) {
    this.qualityOfTeaching = qualityOfTeaching;
    return this;
  }

  /**
   * Quality of teaching grade in the last Ofsted report, from 1 (outstanding) to 4 (inadequate)
   * minimum: 1
   * maximum: 4
   * @return qualityOfTeaching
   */
  @javax.annotation.Nonnull
  public Integer getQualityOfTeaching() {
    return qualityOfTeaching;
  }

  public void setQualityOfTeaching(Integer qualityOfTeaching) {
    this.qualityOfTeaching = qualityOfTeaching;
  }


  public PointInfoSchoolsInner schoolName(String schoolName) {
    this.schoolName = schoolName;
    return this;
  }

  /**
   * Get schoolName
   * @return schoolName
   */
  @javax.annotation.Nonnull
  public String getSchoolName() {
    return schoolName;
  }

  public void setSchoolName(String schoolName) {
    this.schoolName = schoolName;
  }


  public PointInfoSchoolsInner typeOfEstablishment(String typeOfEstablishment) {
    this.typeOfEstablishment = typeOfEstablishment;
    return this;
  }

  /**
   * Get typeOfEstablishment
   * @return typeOfEstablishment
   */
  @javax.annotation.Nonnull
  public String getTypeOfEstablishment() {
    return typeOfEstablishment;
  }

  public void setTypeOfEstablishment(String typeOfEstablishment) {
    this.typeOfEstablishment = typeOfEstablishment;
  }


  public PointInfoSchoolsInner urn(Integer urn) {
    this.urn = urn;
    return this;
  }

  /**
   * Unique school identifier
   * @return urn
   */
  @javax.annotation.Nonnull
  public Integer getUrn() {
    return urn;
  }

  public void setUrn(Integer urn) {
    this.urn = urn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PointInfoSchoolsInner pointInfoSchoolsInner = (PointInfoSchoolsInner) o;
    return Objects.equals(this.distanceMeters, pointInfoSchoolsInner.distanceMeters) &&
        Objects.equals(this.lastInpectionUrl, pointInfoSchoolsInner.lastInpectionUrl) &&
        Objects.equals(this.lastInspectionDate, pointInfoSchoolsInner.lastInspectionDate) &&
        Objects.equals(this.leadershipAndManagement, pointInfoSchoolsInner.leadershipAndManagement) &&
        Objects.equals(this.location, pointInfoSchoolsInner.location) &&
        Objects.equals(this.overallEffectiveness, pointInfoSchoolsInner.overallEffectiveness) &&
        Objects.equals(this.phase, pointInfoSchoolsInner.phase) &&
        Objects.equals(this.qualityOfTeaching, pointInfoSchoolsInner.qualityOfTeaching) &&
        Objects.equals(this.schoolName, pointInfoSchoolsInner.schoolName) &&
        Objects.equals(this.typeOfEstablishment, pointInfoSchoolsInner.typeOfEstablishment) &&
        Objects.equals(this.urn, pointInfoSchoolsInner.urn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distanceMeters, lastInpectionUrl, lastInspectionDate, leadershipAndManagement, location, overallEffectiveness, phase, qualityOfTeaching, schoolName, typeOfEstablishment, urn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PointInfoSchoolsInner {\n");
    sb.append("    distanceMeters: ").append(toIndentedString(distanceMeters)).append("\n");
    sb.append("    lastInpectionUrl: ").append(toIndentedString(lastInpectionUrl)).append("\n");
    sb.append("    lastInspectionDate: ").append(toIndentedString(lastInspectionDate)).append("\n");
    sb.append("    leadershipAndManagement: ").append(toIndentedString(leadershipAndManagement)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    overallEffectiveness: ").append(toIndentedString(overallEffectiveness)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    qualityOfTeaching: ").append(toIndentedString(qualityOfTeaching)).append("\n");
    sb.append("    schoolName: ").append(toIndentedString(schoolName)).append("\n");
    sb.append("    typeOfEstablishment: ").append(toIndentedString(typeOfEstablishment)).append("\n");
    sb.append("    urn: ").append(toIndentedString(urn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distanceMeters");
    openapiFields.add("lastInpectionUrl");
    openapiFields.add("lastInspectionDate");
    openapiFields.add("leadershipAndManagement");
    openapiFields.add("location");
    openapiFields.add("overallEffectiveness");
    openapiFields.add("phase");
    openapiFields.add("qualityOfTeaching");
    openapiFields.add("schoolName");
    openapiFields.add("typeOfEstablishment");
    openapiFields.add("urn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("distanceMeters");
    openapiRequiredFields.add("lastInpectionUrl");
    openapiRequiredFields.add("lastInspectionDate");
    openapiRequiredFields.add("leadershipAndManagement");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("overallEffectiveness");
    openapiRequiredFields.add("phase");
    openapiRequiredFields.add("qualityOfTeaching");
    openapiRequiredFields.add("schoolName");
    openapiRequiredFields.add("typeOfEstablishment");
    openapiRequiredFields.add("urn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PointInfoSchoolsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PointInfoSchoolsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PointInfoSchoolsInner is not found in the empty JSON string", PointInfoSchoolsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PointInfoSchoolsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PointInfoSchoolsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PointInfoSchoolsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("lastInpectionUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastInpectionUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastInpectionUrl").toString()));
      }
      if (!jsonObj.get("phase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phase").toString()));
      }
      if (!jsonObj.get("schoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schoolName").toString()));
      }
      if (!jsonObj.get("typeOfEstablishment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeOfEstablishment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeOfEstablishment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PointInfoSchoolsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PointInfoSchoolsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PointInfoSchoolsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PointInfoSchoolsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PointInfoSchoolsInner>() {
           @Override
           public void write(JsonWriter out, PointInfoSchoolsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PointInfoSchoolsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PointInfoSchoolsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PointInfoSchoolsInner
   * @throws IOException if the JSON string is invalid with respect to PointInfoSchoolsInner
   */
  public static PointInfoSchoolsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PointInfoSchoolsInner.class);
  }

  /**
   * Convert an instance of PointInfoSchoolsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

