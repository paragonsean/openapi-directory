/*
 * City Context
 * City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.PointInfoLsoa;
import org.openapitools.client.model.PointInfoParksInner;
import org.openapitools.client.model.PointInfoSchoolsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contextual information around a given point
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:52.551767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PointInfo {
  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_LSOA = "lsoa";
  @SerializedName(SERIALIZED_NAME_LSOA)
  private PointInfoLsoa lsoa;

  public static final String SERIALIZED_NAME_PARKS = "parks";
  @SerializedName(SERIALIZED_NAME_PARKS)
  private List<PointInfoParksInner> parks = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHOOLS = "schools";
  @SerializedName(SERIALIZED_NAME_SCHOOLS)
  private List<PointInfoSchoolsInner> schools = new ArrayList<>();

  public PointInfo() {
  }

  public PointInfo location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nonnull
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public PointInfo lsoa(PointInfoLsoa lsoa) {
    this.lsoa = lsoa;
    return this;
  }

  /**
   * Get lsoa
   * @return lsoa
   */
  @javax.annotation.Nullable
  public PointInfoLsoa getLsoa() {
    return lsoa;
  }

  public void setLsoa(PointInfoLsoa lsoa) {
    this.lsoa = lsoa;
  }


  public PointInfo parks(List<PointInfoParksInner> parks) {
    this.parks = parks;
    return this;
  }

  public PointInfo addParksItem(PointInfoParksInner parksItem) {
    if (this.parks == null) {
      this.parks = new ArrayList<>();
    }
    this.parks.add(parksItem);
    return this;
  }

  /**
   * Parks within 1km of the point of interest, sorted by descending area
   * @return parks
   */
  @javax.annotation.Nonnull
  public List<PointInfoParksInner> getParks() {
    return parks;
  }

  public void setParks(List<PointInfoParksInner> parks) {
    this.parks = parks;
  }


  public PointInfo schools(List<PointInfoSchoolsInner> schools) {
    this.schools = schools;
    return this;
  }

  public PointInfo addSchoolsItem(PointInfoSchoolsInner schoolsItem) {
    if (this.schools == null) {
      this.schools = new ArrayList<>();
    }
    this.schools.add(schoolsItem);
    return this;
  }

  /**
   * Schools within 1km of the point of interest, sorted by ascending distance from the POI
   * @return schools
   */
  @javax.annotation.Nonnull
  public List<PointInfoSchoolsInner> getSchools() {
    return schools;
  }

  public void setSchools(List<PointInfoSchoolsInner> schools) {
    this.schools = schools;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PointInfo pointInfo = (PointInfo) o;
    return Objects.equals(this.location, pointInfo.location) &&
        Objects.equals(this.lsoa, pointInfo.lsoa) &&
        Objects.equals(this.parks, pointInfo.parks) &&
        Objects.equals(this.schools, pointInfo.schools);
  }

  @Override
  public int hashCode() {
    return Objects.hash(location, lsoa, parks, schools);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PointInfo {\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    lsoa: ").append(toIndentedString(lsoa)).append("\n");
    sb.append("    parks: ").append(toIndentedString(parks)).append("\n");
    sb.append("    schools: ").append(toIndentedString(schools)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("location");
    openapiFields.add("lsoa");
    openapiFields.add("parks");
    openapiFields.add("schools");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("parks");
    openapiRequiredFields.add("schools");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PointInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PointInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PointInfo is not found in the empty JSON string", PointInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PointInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PointInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PointInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `location`
      Location.validateJsonElement(jsonObj.get("location"));
      // validate the optional field `lsoa`
      if (jsonObj.get("lsoa") != null && !jsonObj.get("lsoa").isJsonNull()) {
        PointInfoLsoa.validateJsonElement(jsonObj.get("lsoa"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("parks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parks` to be an array in the JSON string but got `%s`", jsonObj.get("parks").toString()));
      }

      JsonArray jsonArrayparks = jsonObj.getAsJsonArray("parks");
      // validate the required field `parks` (array)
      for (int i = 0; i < jsonArrayparks.size(); i++) {
        PointInfoParksInner.validateJsonElement(jsonArrayparks.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("schools").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schools` to be an array in the JSON string but got `%s`", jsonObj.get("schools").toString()));
      }

      JsonArray jsonArrayschools = jsonObj.getAsJsonArray("schools");
      // validate the required field `schools` (array)
      for (int i = 0; i < jsonArrayschools.size(); i++) {
        PointInfoSchoolsInner.validateJsonElement(jsonArrayschools.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PointInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PointInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PointInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PointInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PointInfo>() {
           @Override
           public void write(JsonWriter out, PointInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PointInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PointInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PointInfo
   * @throws IOException if the JSON string is invalid with respect to PointInfo
   */
  public static PointInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PointInfo.class);
  }

  /**
   * Convert an instance of PointInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

