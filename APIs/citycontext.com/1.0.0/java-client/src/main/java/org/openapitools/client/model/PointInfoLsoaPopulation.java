/*
 * City Context
 * City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PointInfoLsoaPopulation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:11:52.551767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PointInfoLsoaPopulation {
  public static final String SERIALIZED_NAME_ALL_USUAL_RESIDENTS = "allUsualResidents";
  @SerializedName(SERIALIZED_NAME_ALL_USUAL_RESIDENTS)
  private Integer allUsualResidents;

  public static final String SERIALIZED_NAME_COMMUNAL_ESTABLISHMENT_RESIDENTS = "communalEstablishmentResidents";
  @SerializedName(SERIALIZED_NAME_COMMUNAL_ESTABLISHMENT_RESIDENTS)
  private Integer communalEstablishmentResidents;

  public static final String SERIALIZED_NAME_HOUSEHOLD_RESIDENTS = "householdResidents";
  @SerializedName(SERIALIZED_NAME_HOUSEHOLD_RESIDENTS)
  private Integer householdResidents;

  public static final String SERIALIZED_NAME_HOUSEHOLDS = "households";
  @SerializedName(SERIALIZED_NAME_HOUSEHOLDS)
  private Integer households;

  public static final String SERIALIZED_NAME_PERSONS_PER_HECTARE = "personsPerHectare";
  @SerializedName(SERIALIZED_NAME_PERSONS_PER_HECTARE)
  private Integer personsPerHectare;

  public static final String SERIALIZED_NAME_PERSONS_PER_HOUSEHOLD = "personsPerHousehold";
  @SerializedName(SERIALIZED_NAME_PERSONS_PER_HOUSEHOLD)
  private Integer personsPerHousehold;

  public PointInfoLsoaPopulation() {
  }

  public PointInfoLsoaPopulation allUsualResidents(Integer allUsualResidents) {
    this.allUsualResidents = allUsualResidents;
    return this;
  }

  /**
   * Get allUsualResidents
   * @return allUsualResidents
   */
  @javax.annotation.Nonnull
  public Integer getAllUsualResidents() {
    return allUsualResidents;
  }

  public void setAllUsualResidents(Integer allUsualResidents) {
    this.allUsualResidents = allUsualResidents;
  }


  public PointInfoLsoaPopulation communalEstablishmentResidents(Integer communalEstablishmentResidents) {
    this.communalEstablishmentResidents = communalEstablishmentResidents;
    return this;
  }

  /**
   * Get communalEstablishmentResidents
   * @return communalEstablishmentResidents
   */
  @javax.annotation.Nonnull
  public Integer getCommunalEstablishmentResidents() {
    return communalEstablishmentResidents;
  }

  public void setCommunalEstablishmentResidents(Integer communalEstablishmentResidents) {
    this.communalEstablishmentResidents = communalEstablishmentResidents;
  }


  public PointInfoLsoaPopulation householdResidents(Integer householdResidents) {
    this.householdResidents = householdResidents;
    return this;
  }

  /**
   * Get householdResidents
   * @return householdResidents
   */
  @javax.annotation.Nonnull
  public Integer getHouseholdResidents() {
    return householdResidents;
  }

  public void setHouseholdResidents(Integer householdResidents) {
    this.householdResidents = householdResidents;
  }


  public PointInfoLsoaPopulation households(Integer households) {
    this.households = households;
    return this;
  }

  /**
   * Get households
   * @return households
   */
  @javax.annotation.Nonnull
  public Integer getHouseholds() {
    return households;
  }

  public void setHouseholds(Integer households) {
    this.households = households;
  }


  public PointInfoLsoaPopulation personsPerHectare(Integer personsPerHectare) {
    this.personsPerHectare = personsPerHectare;
    return this;
  }

  /**
   * Get personsPerHectare
   * @return personsPerHectare
   */
  @javax.annotation.Nonnull
  public Integer getPersonsPerHectare() {
    return personsPerHectare;
  }

  public void setPersonsPerHectare(Integer personsPerHectare) {
    this.personsPerHectare = personsPerHectare;
  }


  public PointInfoLsoaPopulation personsPerHousehold(Integer personsPerHousehold) {
    this.personsPerHousehold = personsPerHousehold;
    return this;
  }

  /**
   * Get personsPerHousehold
   * @return personsPerHousehold
   */
  @javax.annotation.Nonnull
  public Integer getPersonsPerHousehold() {
    return personsPerHousehold;
  }

  public void setPersonsPerHousehold(Integer personsPerHousehold) {
    this.personsPerHousehold = personsPerHousehold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PointInfoLsoaPopulation pointInfoLsoaPopulation = (PointInfoLsoaPopulation) o;
    return Objects.equals(this.allUsualResidents, pointInfoLsoaPopulation.allUsualResidents) &&
        Objects.equals(this.communalEstablishmentResidents, pointInfoLsoaPopulation.communalEstablishmentResidents) &&
        Objects.equals(this.householdResidents, pointInfoLsoaPopulation.householdResidents) &&
        Objects.equals(this.households, pointInfoLsoaPopulation.households) &&
        Objects.equals(this.personsPerHectare, pointInfoLsoaPopulation.personsPerHectare) &&
        Objects.equals(this.personsPerHousehold, pointInfoLsoaPopulation.personsPerHousehold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allUsualResidents, communalEstablishmentResidents, householdResidents, households, personsPerHectare, personsPerHousehold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PointInfoLsoaPopulation {\n");
    sb.append("    allUsualResidents: ").append(toIndentedString(allUsualResidents)).append("\n");
    sb.append("    communalEstablishmentResidents: ").append(toIndentedString(communalEstablishmentResidents)).append("\n");
    sb.append("    householdResidents: ").append(toIndentedString(householdResidents)).append("\n");
    sb.append("    households: ").append(toIndentedString(households)).append("\n");
    sb.append("    personsPerHectare: ").append(toIndentedString(personsPerHectare)).append("\n");
    sb.append("    personsPerHousehold: ").append(toIndentedString(personsPerHousehold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allUsualResidents");
    openapiFields.add("communalEstablishmentResidents");
    openapiFields.add("householdResidents");
    openapiFields.add("households");
    openapiFields.add("personsPerHectare");
    openapiFields.add("personsPerHousehold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allUsualResidents");
    openapiRequiredFields.add("communalEstablishmentResidents");
    openapiRequiredFields.add("householdResidents");
    openapiRequiredFields.add("households");
    openapiRequiredFields.add("personsPerHectare");
    openapiRequiredFields.add("personsPerHousehold");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PointInfoLsoaPopulation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PointInfoLsoaPopulation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PointInfoLsoaPopulation is not found in the empty JSON string", PointInfoLsoaPopulation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PointInfoLsoaPopulation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PointInfoLsoaPopulation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PointInfoLsoaPopulation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PointInfoLsoaPopulation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PointInfoLsoaPopulation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PointInfoLsoaPopulation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PointInfoLsoaPopulation.class));

       return (TypeAdapter<T>) new TypeAdapter<PointInfoLsoaPopulation>() {
           @Override
           public void write(JsonWriter out, PointInfoLsoaPopulation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PointInfoLsoaPopulation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PointInfoLsoaPopulation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PointInfoLsoaPopulation
   * @throws IOException if the JSON string is invalid with respect to PointInfoLsoaPopulation
   */
  public static PointInfoLsoaPopulation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PointInfoLsoaPopulation.class);
  }

  /**
   * Convert an instance of PointInfoLsoaPopulation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

