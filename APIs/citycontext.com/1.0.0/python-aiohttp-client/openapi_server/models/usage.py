# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Usage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowance: int=None, period: str=None, period_end: datetime=None, period_start: datetime=None, plan: str=None, usage: int=None):
        """Usage - a model defined in OpenAPI

        :param allowance: The allowance of this Usage.
        :param period: The period of this Usage.
        :param period_end: The period_end of this Usage.
        :param period_start: The period_start of this Usage.
        :param plan: The plan of this Usage.
        :param usage: The usage of this Usage.
        """
        self.openapi_types = {
            'allowance': int,
            'period': str,
            'period_end': datetime,
            'period_start': datetime,
            'plan': str,
            'usage': int
        }

        self.attribute_map = {
            'allowance': 'allowance',
            'period': 'period',
            'period_end': 'periodEnd',
            'period_start': 'periodStart',
            'plan': 'plan',
            'usage': 'usage'
        }

        self._allowance = allowance
        self._period = period
        self._period_end = period_end
        self._period_start = period_start
        self._plan = plan
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Usage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Usage of this Usage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowance(self):
        """Gets the allowance of this Usage.


        :return: The allowance of this Usage.
        :rtype: int
        """
        return self._allowance

    @allowance.setter
    def allowance(self, allowance):
        """Sets the allowance of this Usage.


        :param allowance: The allowance of this Usage.
        :type allowance: int
        """

        self._allowance = allowance

    @property
    def period(self):
        """Gets the period of this Usage.


        :return: The period of this Usage.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Usage.


        :param period: The period of this Usage.
        :type period: str
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")

        self._period = period

    @property
    def period_end(self):
        """Gets the period_end of this Usage.


        :return: The period_end of this Usage.
        :rtype: datetime
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this Usage.


        :param period_end: The period_end of this Usage.
        :type period_end: datetime
        """
        if period_end is None:
            raise ValueError("Invalid value for `period_end`, must not be `None`")

        self._period_end = period_end

    @property
    def period_start(self):
        """Gets the period_start of this Usage.


        :return: The period_start of this Usage.
        :rtype: datetime
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this Usage.


        :param period_start: The period_start of this Usage.
        :type period_start: datetime
        """
        if period_start is None:
            raise ValueError("Invalid value for `period_start`, must not be `None`")

        self._period_start = period_start

    @property
    def plan(self):
        """Gets the plan of this Usage.


        :return: The plan of this Usage.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Usage.


        :param plan: The plan of this Usage.
        :type plan: str
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def usage(self):
        """Gets the usage of this Usage.


        :return: The usage of this Usage.
        :rtype: int
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this Usage.


        :param usage: The usage of this Usage.
        :type usage: int
        """
        if usage is None:
            raise ValueError("Invalid value for `usage`, must not be `None`")

        self._usage = usage
