# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PointInfoParksInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area_sqm: int=None, centroid: object=None, distance_meters: int=None, name: str=None):
        """PointInfoParksInner - a model defined in OpenAPI

        :param area_sqm: The area_sqm of this PointInfoParksInner.
        :param centroid: The centroid of this PointInfoParksInner.
        :param distance_meters: The distance_meters of this PointInfoParksInner.
        :param name: The name of this PointInfoParksInner.
        """
        self.openapi_types = {
            'area_sqm': int,
            'centroid': object,
            'distance_meters': int,
            'name': str
        }

        self.attribute_map = {
            'area_sqm': 'areaSqm',
            'centroid': 'centroid',
            'distance_meters': 'distanceMeters',
            'name': 'name'
        }

        self._area_sqm = area_sqm
        self._centroid = centroid
        self._distance_meters = distance_meters
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointInfoParksInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PointInfo_parks_inner of this PointInfoParksInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area_sqm(self):
        """Gets the area_sqm of this PointInfoParksInner.


        :return: The area_sqm of this PointInfoParksInner.
        :rtype: int
        """
        return self._area_sqm

    @area_sqm.setter
    def area_sqm(self, area_sqm):
        """Sets the area_sqm of this PointInfoParksInner.


        :param area_sqm: The area_sqm of this PointInfoParksInner.
        :type area_sqm: int
        """
        if area_sqm is None:
            raise ValueError("Invalid value for `area_sqm`, must not be `None`")

        self._area_sqm = area_sqm

    @property
    def centroid(self):
        """Gets the centroid of this PointInfoParksInner.


        :return: The centroid of this PointInfoParksInner.
        :rtype: object
        """
        return self._centroid

    @centroid.setter
    def centroid(self, centroid):
        """Sets the centroid of this PointInfoParksInner.


        :param centroid: The centroid of this PointInfoParksInner.
        :type centroid: object
        """
        if centroid is None:
            raise ValueError("Invalid value for `centroid`, must not be `None`")

        self._centroid = centroid

    @property
    def distance_meters(self):
        """Gets the distance_meters of this PointInfoParksInner.


        :return: The distance_meters of this PointInfoParksInner.
        :rtype: int
        """
        return self._distance_meters

    @distance_meters.setter
    def distance_meters(self, distance_meters):
        """Sets the distance_meters of this PointInfoParksInner.


        :param distance_meters: The distance_meters of this PointInfoParksInner.
        :type distance_meters: int
        """
        if distance_meters is None:
            raise ValueError("Invalid value for `distance_meters`, must not be `None`")

        self._distance_meters = distance_meters

    @property
    def name(self):
        """Gets the name of this PointInfoParksInner.


        :return: The name of this PointInfoParksInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PointInfoParksInner.


        :param name: The name of this PointInfoParksInner.
        :type name: str
        """

        self._name = name
