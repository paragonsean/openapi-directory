# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lat: float=None, lon: float=None, within_london_ccz: bool=None):
        """Location - a model defined in OpenAPI

        :param lat: The lat of this Location.
        :param lon: The lon of this Location.
        :param within_london_ccz: The within_london_ccz of this Location.
        """
        self.openapi_types = {
            'lat': float,
            'lon': float,
            'within_london_ccz': bool
        }

        self.attribute_map = {
            'lat': 'lat',
            'lon': 'lon',
            'within_london_ccz': 'withinLondonCCZ'
        }

        self._lat = lat
        self._lon = lon
        self._within_london_ccz = within_london_ccz

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lat(self):
        """Gets the lat of this Location.


        :return: The lat of this Location.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Location.


        :param lat: The lat of this Location.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")
        if lat is not None and lat > 85:
            raise ValueError("Invalid value for `lat`, must be a value less than or equal to `85`")
        if lat is not None and lat < -85:
            raise ValueError("Invalid value for `lat`, must be a value greater than or equal to `-85`")

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this Location.


        :return: The lon of this Location.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Location.


        :param lon: The lon of this Location.
        :type lon: float
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")
        if lon is not None and lon > 1.8E+2:
            raise ValueError("Invalid value for `lon`, must be a value less than or equal to `1.8E+2`")
        if lon is not None and lon < -1.8E+2:
            raise ValueError("Invalid value for `lon`, must be a value greater than or equal to `-1.8E+2`")

        self._lon = lon

    @property
    def within_london_ccz(self):
        """Gets the within_london_ccz of this Location.

        Boolean flag indicating whether this point is located within London's Congestion Charge zone

        :return: The within_london_ccz of this Location.
        :rtype: bool
        """
        return self._within_london_ccz

    @within_london_ccz.setter
    def within_london_ccz(self, within_london_ccz):
        """Sets the within_london_ccz of this Location.

        Boolean flag indicating whether this point is located within London's Congestion Charge zone

        :param within_london_ccz: The within_london_ccz of this Location.
        :type within_london_ccz: bool
        """

        self._within_london_ccz = within_london_ccz
