# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PointInfoSchoolsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distance_meters: int=None, last_inpection_url: str=None, last_inspection_date: datetime=None, leadership_and_management: int=None, location: object=None, overall_effectiveness: int=None, phase: str=None, quality_of_teaching: int=None, school_name: str=None, type_of_establishment: str=None, urn: int=None):
        """PointInfoSchoolsInner - a model defined in OpenAPI

        :param distance_meters: The distance_meters of this PointInfoSchoolsInner.
        :param last_inpection_url: The last_inpection_url of this PointInfoSchoolsInner.
        :param last_inspection_date: The last_inspection_date of this PointInfoSchoolsInner.
        :param leadership_and_management: The leadership_and_management of this PointInfoSchoolsInner.
        :param location: The location of this PointInfoSchoolsInner.
        :param overall_effectiveness: The overall_effectiveness of this PointInfoSchoolsInner.
        :param phase: The phase of this PointInfoSchoolsInner.
        :param quality_of_teaching: The quality_of_teaching of this PointInfoSchoolsInner.
        :param school_name: The school_name of this PointInfoSchoolsInner.
        :param type_of_establishment: The type_of_establishment of this PointInfoSchoolsInner.
        :param urn: The urn of this PointInfoSchoolsInner.
        """
        self.openapi_types = {
            'distance_meters': int,
            'last_inpection_url': str,
            'last_inspection_date': datetime,
            'leadership_and_management': int,
            'location': object,
            'overall_effectiveness': int,
            'phase': str,
            'quality_of_teaching': int,
            'school_name': str,
            'type_of_establishment': str,
            'urn': int
        }

        self.attribute_map = {
            'distance_meters': 'distanceMeters',
            'last_inpection_url': 'lastInpectionUrl',
            'last_inspection_date': 'lastInspectionDate',
            'leadership_and_management': 'leadershipAndManagement',
            'location': 'location',
            'overall_effectiveness': 'overallEffectiveness',
            'phase': 'phase',
            'quality_of_teaching': 'qualityOfTeaching',
            'school_name': 'schoolName',
            'type_of_establishment': 'typeOfEstablishment',
            'urn': 'urn'
        }

        self._distance_meters = distance_meters
        self._last_inpection_url = last_inpection_url
        self._last_inspection_date = last_inspection_date
        self._leadership_and_management = leadership_and_management
        self._location = location
        self._overall_effectiveness = overall_effectiveness
        self._phase = phase
        self._quality_of_teaching = quality_of_teaching
        self._school_name = school_name
        self._type_of_establishment = type_of_establishment
        self._urn = urn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointInfoSchoolsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PointInfo_schools_inner of this PointInfoSchoolsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distance_meters(self):
        """Gets the distance_meters of this PointInfoSchoolsInner.


        :return: The distance_meters of this PointInfoSchoolsInner.
        :rtype: int
        """
        return self._distance_meters

    @distance_meters.setter
    def distance_meters(self, distance_meters):
        """Sets the distance_meters of this PointInfoSchoolsInner.


        :param distance_meters: The distance_meters of this PointInfoSchoolsInner.
        :type distance_meters: int
        """
        if distance_meters is None:
            raise ValueError("Invalid value for `distance_meters`, must not be `None`")

        self._distance_meters = distance_meters

    @property
    def last_inpection_url(self):
        """Gets the last_inpection_url of this PointInfoSchoolsInner.

        URL to the last inspection report

        :return: The last_inpection_url of this PointInfoSchoolsInner.
        :rtype: str
        """
        return self._last_inpection_url

    @last_inpection_url.setter
    def last_inpection_url(self, last_inpection_url):
        """Sets the last_inpection_url of this PointInfoSchoolsInner.

        URL to the last inspection report

        :param last_inpection_url: The last_inpection_url of this PointInfoSchoolsInner.
        :type last_inpection_url: str
        """
        if last_inpection_url is None:
            raise ValueError("Invalid value for `last_inpection_url`, must not be `None`")

        self._last_inpection_url = last_inpection_url

    @property
    def last_inspection_date(self):
        """Gets the last_inspection_date of this PointInfoSchoolsInner.

        Date of the last Ofsted inspection

        :return: The last_inspection_date of this PointInfoSchoolsInner.
        :rtype: datetime
        """
        return self._last_inspection_date

    @last_inspection_date.setter
    def last_inspection_date(self, last_inspection_date):
        """Sets the last_inspection_date of this PointInfoSchoolsInner.

        Date of the last Ofsted inspection

        :param last_inspection_date: The last_inspection_date of this PointInfoSchoolsInner.
        :type last_inspection_date: datetime
        """
        if last_inspection_date is None:
            raise ValueError("Invalid value for `last_inspection_date`, must not be `None`")

        self._last_inspection_date = last_inspection_date

    @property
    def leadership_and_management(self):
        """Gets the leadership_and_management of this PointInfoSchoolsInner.

        Leadership and management grade in the last Ofsted report, from 1 (outstanding) to 4 (inadequate)

        :return: The leadership_and_management of this PointInfoSchoolsInner.
        :rtype: int
        """
        return self._leadership_and_management

    @leadership_and_management.setter
    def leadership_and_management(self, leadership_and_management):
        """Sets the leadership_and_management of this PointInfoSchoolsInner.

        Leadership and management grade in the last Ofsted report, from 1 (outstanding) to 4 (inadequate)

        :param leadership_and_management: The leadership_and_management of this PointInfoSchoolsInner.
        :type leadership_and_management: int
        """
        if leadership_and_management is None:
            raise ValueError("Invalid value for `leadership_and_management`, must not be `None`")
        if leadership_and_management is not None and leadership_and_management > 4:
            raise ValueError("Invalid value for `leadership_and_management`, must be a value less than or equal to `4`")
        if leadership_and_management is not None and leadership_and_management < 1:
            raise ValueError("Invalid value for `leadership_and_management`, must be a value greater than or equal to `1`")

        self._leadership_and_management = leadership_and_management

    @property
    def location(self):
        """Gets the location of this PointInfoSchoolsInner.


        :return: The location of this PointInfoSchoolsInner.
        :rtype: object
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PointInfoSchoolsInner.


        :param location: The location of this PointInfoSchoolsInner.
        :type location: object
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def overall_effectiveness(self):
        """Gets the overall_effectiveness of this PointInfoSchoolsInner.

        Overall effectiveness grade in the last Ofsted report, from 1 (outstanding) to 4 (inadequate)

        :return: The overall_effectiveness of this PointInfoSchoolsInner.
        :rtype: int
        """
        return self._overall_effectiveness

    @overall_effectiveness.setter
    def overall_effectiveness(self, overall_effectiveness):
        """Sets the overall_effectiveness of this PointInfoSchoolsInner.

        Overall effectiveness grade in the last Ofsted report, from 1 (outstanding) to 4 (inadequate)

        :param overall_effectiveness: The overall_effectiveness of this PointInfoSchoolsInner.
        :type overall_effectiveness: int
        """
        if overall_effectiveness is None:
            raise ValueError("Invalid value for `overall_effectiveness`, must not be `None`")
        if overall_effectiveness is not None and overall_effectiveness > 4:
            raise ValueError("Invalid value for `overall_effectiveness`, must be a value less than or equal to `4`")
        if overall_effectiveness is not None and overall_effectiveness < 1:
            raise ValueError("Invalid value for `overall_effectiveness`, must be a value greater than or equal to `1`")

        self._overall_effectiveness = overall_effectiveness

    @property
    def phase(self):
        """Gets the phase of this PointInfoSchoolsInner.


        :return: The phase of this PointInfoSchoolsInner.
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this PointInfoSchoolsInner.


        :param phase: The phase of this PointInfoSchoolsInner.
        :type phase: str
        """
        if phase is None:
            raise ValueError("Invalid value for `phase`, must not be `None`")

        self._phase = phase

    @property
    def quality_of_teaching(self):
        """Gets the quality_of_teaching of this PointInfoSchoolsInner.

        Quality of teaching grade in the last Ofsted report, from 1 (outstanding) to 4 (inadequate)

        :return: The quality_of_teaching of this PointInfoSchoolsInner.
        :rtype: int
        """
        return self._quality_of_teaching

    @quality_of_teaching.setter
    def quality_of_teaching(self, quality_of_teaching):
        """Sets the quality_of_teaching of this PointInfoSchoolsInner.

        Quality of teaching grade in the last Ofsted report, from 1 (outstanding) to 4 (inadequate)

        :param quality_of_teaching: The quality_of_teaching of this PointInfoSchoolsInner.
        :type quality_of_teaching: int
        """
        if quality_of_teaching is None:
            raise ValueError("Invalid value for `quality_of_teaching`, must not be `None`")
        if quality_of_teaching is not None and quality_of_teaching > 4:
            raise ValueError("Invalid value for `quality_of_teaching`, must be a value less than or equal to `4`")
        if quality_of_teaching is not None and quality_of_teaching < 1:
            raise ValueError("Invalid value for `quality_of_teaching`, must be a value greater than or equal to `1`")

        self._quality_of_teaching = quality_of_teaching

    @property
    def school_name(self):
        """Gets the school_name of this PointInfoSchoolsInner.


        :return: The school_name of this PointInfoSchoolsInner.
        :rtype: str
        """
        return self._school_name

    @school_name.setter
    def school_name(self, school_name):
        """Sets the school_name of this PointInfoSchoolsInner.


        :param school_name: The school_name of this PointInfoSchoolsInner.
        :type school_name: str
        """
        if school_name is None:
            raise ValueError("Invalid value for `school_name`, must not be `None`")

        self._school_name = school_name

    @property
    def type_of_establishment(self):
        """Gets the type_of_establishment of this PointInfoSchoolsInner.


        :return: The type_of_establishment of this PointInfoSchoolsInner.
        :rtype: str
        """
        return self._type_of_establishment

    @type_of_establishment.setter
    def type_of_establishment(self, type_of_establishment):
        """Sets the type_of_establishment of this PointInfoSchoolsInner.


        :param type_of_establishment: The type_of_establishment of this PointInfoSchoolsInner.
        :type type_of_establishment: str
        """
        if type_of_establishment is None:
            raise ValueError("Invalid value for `type_of_establishment`, must not be `None`")

        self._type_of_establishment = type_of_establishment

    @property
    def urn(self):
        """Gets the urn of this PointInfoSchoolsInner.

        Unique school identifier

        :return: The urn of this PointInfoSchoolsInner.
        :rtype: int
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this PointInfoSchoolsInner.

        Unique school identifier

        :param urn: The urn of this PointInfoSchoolsInner.
        :type urn: int
        """
        if urn is None:
            raise ValueError("Invalid value for `urn`, must not be `None`")

        self._urn = urn
