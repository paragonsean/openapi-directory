# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location import Location
from openapi_server.models.point_info_lsoa import PointInfoLsoa
from openapi_server.models.point_info_parks_inner import PointInfoParksInner
from openapi_server.models.point_info_schools_inner import PointInfoSchoolsInner
from openapi_server import util


class PointInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: Location=None, lsoa: PointInfoLsoa=None, parks: List[PointInfoParksInner]=None, schools: List[PointInfoSchoolsInner]=None):
        """PointInfo - a model defined in OpenAPI

        :param location: The location of this PointInfo.
        :param lsoa: The lsoa of this PointInfo.
        :param parks: The parks of this PointInfo.
        :param schools: The schools of this PointInfo.
        """
        self.openapi_types = {
            'location': Location,
            'lsoa': PointInfoLsoa,
            'parks': List[PointInfoParksInner],
            'schools': List[PointInfoSchoolsInner]
        }

        self.attribute_map = {
            'location': 'location',
            'lsoa': 'lsoa',
            'parks': 'parks',
            'schools': 'schools'
        }

        self._location = location
        self._lsoa = lsoa
        self._parks = parks
        self._schools = schools

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PointInfo of this PointInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this PointInfo.


        :return: The location of this PointInfo.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PointInfo.


        :param location: The location of this PointInfo.
        :type location: Location
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def lsoa(self):
        """Gets the lsoa of this PointInfo.


        :return: The lsoa of this PointInfo.
        :rtype: PointInfoLsoa
        """
        return self._lsoa

    @lsoa.setter
    def lsoa(self, lsoa):
        """Sets the lsoa of this PointInfo.


        :param lsoa: The lsoa of this PointInfo.
        :type lsoa: PointInfoLsoa
        """

        self._lsoa = lsoa

    @property
    def parks(self):
        """Gets the parks of this PointInfo.

        Parks within 1km of the point of interest, sorted by descending area

        :return: The parks of this PointInfo.
        :rtype: List[PointInfoParksInner]
        """
        return self._parks

    @parks.setter
    def parks(self, parks):
        """Sets the parks of this PointInfo.

        Parks within 1km of the point of interest, sorted by descending area

        :param parks: The parks of this PointInfo.
        :type parks: List[PointInfoParksInner]
        """
        if parks is None:
            raise ValueError("Invalid value for `parks`, must not be `None`")

        self._parks = parks

    @property
    def schools(self):
        """Gets the schools of this PointInfo.

        Schools within 1km of the point of interest, sorted by ascending distance from the POI

        :return: The schools of this PointInfo.
        :rtype: List[PointInfoSchoolsInner]
        """
        return self._schools

    @schools.setter
    def schools(self, schools):
        """Sets the schools of this PointInfo.

        Schools within 1km of the point of interest, sorted by ascending distance from the POI

        :param schools: The schools of this PointInfo.
        :type schools: List[PointInfoSchoolsInner]
        """
        if schools is None:
            raise ValueError("Invalid value for `schools`, must not be `None`")

        self._schools = schools
