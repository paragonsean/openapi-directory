# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PointInfoLsoaPopulation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_usual_residents: int=None, communal_establishment_residents: int=None, household_residents: int=None, households: int=None, persons_per_hectare: int=None, persons_per_household: int=None):
        """PointInfoLsoaPopulation - a model defined in OpenAPI

        :param all_usual_residents: The all_usual_residents of this PointInfoLsoaPopulation.
        :param communal_establishment_residents: The communal_establishment_residents of this PointInfoLsoaPopulation.
        :param household_residents: The household_residents of this PointInfoLsoaPopulation.
        :param households: The households of this PointInfoLsoaPopulation.
        :param persons_per_hectare: The persons_per_hectare of this PointInfoLsoaPopulation.
        :param persons_per_household: The persons_per_household of this PointInfoLsoaPopulation.
        """
        self.openapi_types = {
            'all_usual_residents': int,
            'communal_establishment_residents': int,
            'household_residents': int,
            'households': int,
            'persons_per_hectare': int,
            'persons_per_household': int
        }

        self.attribute_map = {
            'all_usual_residents': 'allUsualResidents',
            'communal_establishment_residents': 'communalEstablishmentResidents',
            'household_residents': 'householdResidents',
            'households': 'households',
            'persons_per_hectare': 'personsPerHectare',
            'persons_per_household': 'personsPerHousehold'
        }

        self._all_usual_residents = all_usual_residents
        self._communal_establishment_residents = communal_establishment_residents
        self._household_residents = household_residents
        self._households = households
        self._persons_per_hectare = persons_per_hectare
        self._persons_per_household = persons_per_household

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointInfoLsoaPopulation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PointInfo_lsoa_population of this PointInfoLsoaPopulation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_usual_residents(self):
        """Gets the all_usual_residents of this PointInfoLsoaPopulation.


        :return: The all_usual_residents of this PointInfoLsoaPopulation.
        :rtype: int
        """
        return self._all_usual_residents

    @all_usual_residents.setter
    def all_usual_residents(self, all_usual_residents):
        """Sets the all_usual_residents of this PointInfoLsoaPopulation.


        :param all_usual_residents: The all_usual_residents of this PointInfoLsoaPopulation.
        :type all_usual_residents: int
        """
        if all_usual_residents is None:
            raise ValueError("Invalid value for `all_usual_residents`, must not be `None`")

        self._all_usual_residents = all_usual_residents

    @property
    def communal_establishment_residents(self):
        """Gets the communal_establishment_residents of this PointInfoLsoaPopulation.


        :return: The communal_establishment_residents of this PointInfoLsoaPopulation.
        :rtype: int
        """
        return self._communal_establishment_residents

    @communal_establishment_residents.setter
    def communal_establishment_residents(self, communal_establishment_residents):
        """Sets the communal_establishment_residents of this PointInfoLsoaPopulation.


        :param communal_establishment_residents: The communal_establishment_residents of this PointInfoLsoaPopulation.
        :type communal_establishment_residents: int
        """
        if communal_establishment_residents is None:
            raise ValueError("Invalid value for `communal_establishment_residents`, must not be `None`")

        self._communal_establishment_residents = communal_establishment_residents

    @property
    def household_residents(self):
        """Gets the household_residents of this PointInfoLsoaPopulation.


        :return: The household_residents of this PointInfoLsoaPopulation.
        :rtype: int
        """
        return self._household_residents

    @household_residents.setter
    def household_residents(self, household_residents):
        """Sets the household_residents of this PointInfoLsoaPopulation.


        :param household_residents: The household_residents of this PointInfoLsoaPopulation.
        :type household_residents: int
        """
        if household_residents is None:
            raise ValueError("Invalid value for `household_residents`, must not be `None`")

        self._household_residents = household_residents

    @property
    def households(self):
        """Gets the households of this PointInfoLsoaPopulation.


        :return: The households of this PointInfoLsoaPopulation.
        :rtype: int
        """
        return self._households

    @households.setter
    def households(self, households):
        """Sets the households of this PointInfoLsoaPopulation.


        :param households: The households of this PointInfoLsoaPopulation.
        :type households: int
        """
        if households is None:
            raise ValueError("Invalid value for `households`, must not be `None`")

        self._households = households

    @property
    def persons_per_hectare(self):
        """Gets the persons_per_hectare of this PointInfoLsoaPopulation.


        :return: The persons_per_hectare of this PointInfoLsoaPopulation.
        :rtype: int
        """
        return self._persons_per_hectare

    @persons_per_hectare.setter
    def persons_per_hectare(self, persons_per_hectare):
        """Sets the persons_per_hectare of this PointInfoLsoaPopulation.


        :param persons_per_hectare: The persons_per_hectare of this PointInfoLsoaPopulation.
        :type persons_per_hectare: int
        """
        if persons_per_hectare is None:
            raise ValueError("Invalid value for `persons_per_hectare`, must not be `None`")

        self._persons_per_hectare = persons_per_hectare

    @property
    def persons_per_household(self):
        """Gets the persons_per_household of this PointInfoLsoaPopulation.


        :return: The persons_per_household of this PointInfoLsoaPopulation.
        :rtype: int
        """
        return self._persons_per_household

    @persons_per_household.setter
    def persons_per_household(self, persons_per_household):
        """Sets the persons_per_household of this PointInfoLsoaPopulation.


        :param persons_per_household: The persons_per_household of this PointInfoLsoaPopulation.
        :type persons_per_household: int
        """
        if persons_per_household is None:
            raise ValueError("Invalid value for `persons_per_household`, must not be `None`")

        self._persons_per_household = persons_per_household
