/**
 * City Context
 * City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Location from './Location';
import PointInfoLsoa from './PointInfoLsoa';
import PointInfoParksInner from './PointInfoParksInner';
import PointInfoSchoolsInner from './PointInfoSchoolsInner';

/**
 * The PointInfo model module.
 * @module model/PointInfo
 * @version 1.0.0
 */
class PointInfo {
    /**
     * Constructs a new <code>PointInfo</code>.
     * Contextual information around a given point
     * @alias module:model/PointInfo
     * @param location {module:model/Location} 
     * @param parks {Array.<module:model/PointInfoParksInner>} Parks within 1km of the point of interest, sorted by descending area
     * @param schools {Array.<module:model/PointInfoSchoolsInner>} Schools within 1km of the point of interest, sorted by ascending distance from the POI
     */
    constructor(location, parks, schools) { 
        
        PointInfo.initialize(this, location, parks, schools);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, location, parks, schools) { 
        obj['location'] = location;
        obj['parks'] = parks;
        obj['schools'] = schools;
    }

    /**
     * Constructs a <code>PointInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PointInfo} obj Optional instance to populate.
     * @return {module:model/PointInfo} The populated <code>PointInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PointInfo();

            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('lsoa')) {
                obj['lsoa'] = PointInfoLsoa.constructFromObject(data['lsoa']);
            }
            if (data.hasOwnProperty('parks')) {
                obj['parks'] = ApiClient.convertToType(data['parks'], [PointInfoParksInner]);
            }
            if (data.hasOwnProperty('schools')) {
                obj['schools'] = ApiClient.convertToType(data['schools'], [PointInfoSchoolsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PointInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PointInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PointInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // validate the optional field `lsoa`
        if (data['lsoa']) { // data not null
          PointInfoLsoa.validateJSON(data['lsoa']);
        }
        if (data['parks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parks'])) {
                throw new Error("Expected the field `parks` to be an array in the JSON data but got " + data['parks']);
            }
            // validate the optional field `parks` (array)
            for (const item of data['parks']) {
                PointInfoParksInner.validateJSON(item);
            };
        }
        if (data['schools']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['schools'])) {
                throw new Error("Expected the field `schools` to be an array in the JSON data but got " + data['schools']);
            }
            // validate the optional field `schools` (array)
            for (const item of data['schools']) {
                PointInfoSchoolsInner.validateJSON(item);
            };
        }

        return true;
    }


}

PointInfo.RequiredProperties = ["location", "parks", "schools"];

/**
 * @member {module:model/Location} location
 */
PointInfo.prototype['location'] = undefined;

/**
 * @member {module:model/PointInfoLsoa} lsoa
 */
PointInfo.prototype['lsoa'] = undefined;

/**
 * Parks within 1km of the point of interest, sorted by descending area
 * @member {Array.<module:model/PointInfoParksInner>} parks
 */
PointInfo.prototype['parks'] = undefined;

/**
 * Schools within 1km of the point of interest, sorted by ascending distance from the POI
 * @member {Array.<module:model/PointInfoSchoolsInner>} schools
 */
PointInfo.prototype['schools'] = undefined;






export default PointInfo;

