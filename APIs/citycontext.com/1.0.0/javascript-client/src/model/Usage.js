/**
 * City Context
 * City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Usage model module.
 * @module model/Usage
 * @version 1.0.0
 */
class Usage {
    /**
     * Constructs a new <code>Usage</code>.
     * User plan monthly API quota and usage
     * @alias module:model/Usage
     * @param period {String} 
     * @param periodEnd {Date} 
     * @param periodStart {Date} 
     * @param plan {String} 
     * @param usage {Number} 
     */
    constructor(period, periodEnd, periodStart, plan, usage) { 
        
        Usage.initialize(this, period, periodEnd, periodStart, plan, usage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, period, periodEnd, periodStart, plan, usage) { 
        obj['period'] = period;
        obj['periodEnd'] = periodEnd;
        obj['periodStart'] = periodStart;
        obj['plan'] = plan;
        obj['usage'] = usage;
    }

    /**
     * Constructs a <code>Usage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Usage} obj Optional instance to populate.
     * @return {module:model/Usage} The populated <code>Usage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Usage();

            if (data.hasOwnProperty('allowance')) {
                obj['allowance'] = ApiClient.convertToType(data['allowance'], 'Number');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'String');
            }
            if (data.hasOwnProperty('periodEnd')) {
                obj['periodEnd'] = ApiClient.convertToType(data['periodEnd'], 'Date');
            }
            if (data.hasOwnProperty('periodStart')) {
                obj['periodStart'] = ApiClient.convertToType(data['periodStart'], 'Date');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = ApiClient.convertToType(data['plan'], 'String');
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = ApiClient.convertToType(data['usage'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Usage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Usage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Usage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['period'] && !(typeof data['period'] === 'string' || data['period'] instanceof String)) {
            throw new Error("Expected the field `period` to be a primitive type in the JSON string but got " + data['period']);
        }
        // ensure the json data is a string
        if (data['plan'] && !(typeof data['plan'] === 'string' || data['plan'] instanceof String)) {
            throw new Error("Expected the field `plan` to be a primitive type in the JSON string but got " + data['plan']);
        }

        return true;
    }


}

Usage.RequiredProperties = ["period", "periodEnd", "periodStart", "plan", "usage"];

/**
 * @member {Number} allowance
 */
Usage.prototype['allowance'] = undefined;

/**
 * @member {String} period
 */
Usage.prototype['period'] = undefined;

/**
 * @member {Date} periodEnd
 */
Usage.prototype['periodEnd'] = undefined;

/**
 * @member {Date} periodStart
 */
Usage.prototype['periodStart'] = undefined;

/**
 * @member {String} plan
 */
Usage.prototype['plan'] = undefined;

/**
 * @member {Number} usage
 */
Usage.prototype['usage'] = undefined;






export default Usage;

