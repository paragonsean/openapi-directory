/**
 * City Context
 * City Context provides a straightforward API to access UK Open Data: crime statistics, schools, demographics and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PointInfo from '../model/PointInfo';
import Usage from '../model/Usage';

/**
* Citycontext service.
* @module api/CitycontextApi
* @version 1.0.0
*/
export default class CitycontextApi {

    /**
    * Constructs a new CitycontextApi. 
    * @alias module:api/CitycontextApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the byPoint operation.
     * @callback module:api/CitycontextApi~byPointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query by coordinates (SRID 4326 - decimal degrees)
     * @param {Number} lat Latitude
     * @param {Number} lon Longitude
     * @param {Object} opts Optional parameters
     * @param {Number} [schoolSearchRadius] Search radius for schools, in metres, between 100 and 4000
     * @param {Number} [parkSearchRadius] Search radius for parks, in metres, between 100 and 2000
     * @param {module:api/CitycontextApi~byPointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointInfo}
     */
    byPoint(lat, lon, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling byPoint");
      }
      // verify the required parameter 'lon' is set
      if (lon === undefined || lon === null) {
        throw new Error("Missing the required parameter 'lon' when calling byPoint");
      }

      let pathParams = {
        'lat': lat,
        'lon': lon
      };
      let queryParams = {
        'school_search_radius': opts['schoolSearchRadius'],
        'park_search_radius': opts['parkSearchRadius']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PointInfo;
      return this.apiClient.callApi(
        '/@{lat},{lon}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the byPostcode operation.
     * @callback module:api/CitycontextApi~byPostcodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query by postcode
     * @param {String} postcode Postcode
     * @param {Object} opts Optional parameters
     * @param {Number} [schoolSearchRadius] Search radius for schools, in metres, between 100 and 4000
     * @param {Number} [parkSearchRadius] Search radius for parks, in metres, between 100 and 2000
     * @param {module:api/CitycontextApi~byPostcodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointInfo}
     */
    byPostcode(postcode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'postcode' is set
      if (postcode === undefined || postcode === null) {
        throw new Error("Missing the required parameter 'postcode' when calling byPostcode");
      }

      let pathParams = {
        'postcode': postcode
      };
      let queryParams = {
        'school_search_radius': opts['schoolSearchRadius'],
        'park_search_radius': opts['parkSearchRadius']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PointInfo;
      return this.apiClient.callApi(
        '/postcodes/{postcode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usage operation.
     * @callback module:api/CitycontextApi~usageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Usage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get usage in current month
     * @param {module:api/CitycontextApi~usageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Usage}
     */
    usage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Usage;
      return this.apiClient.callApi(
        '/usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
