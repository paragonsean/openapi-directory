/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CatalogDataPriceUpdateResultInterface;
import org.openapitools.client.model.CatalogTierPriceStorageV1ReplacePutRequest;
import org.openapitools.client.model.ErrorResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsTierPricesApi
 */
@Disabled
public class ProductsTierPricesApiTest {

    private final ProductsTierPricesApi api = new ProductsTierPricesApi();

    /**
     * products/tier-prices
     *
     * Remove existing tier prices and replace them with the new ones. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from replace list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogTierPriceStorageV1ReplacePutTest() throws ApiException {
        CatalogTierPriceStorageV1ReplacePutRequest catalogTierPriceStorageV1ReplacePutRequest = null;
        List<CatalogDataPriceUpdateResultInterface> response = api.catalogTierPriceStorageV1ReplacePut(catalogTierPriceStorageV1ReplacePutRequest);
        // TODO: test validations
    }

    /**
     * products/tier-prices
     *
     * Add or update product prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void catalogTierPriceStorageV1UpdatePostTest() throws ApiException {
        CatalogTierPriceStorageV1ReplacePutRequest catalogTierPriceStorageV1ReplacePutRequest = null;
        List<CatalogDataPriceUpdateResultInterface> response = api.catalogTierPriceStorageV1UpdatePost(catalogTierPriceStorageV1ReplacePutRequest);
        // TODO: test validations
    }

}
