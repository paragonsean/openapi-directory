/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Shipment item interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A product is an item in a shipment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesDataShipmentItemInterface {
  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additional_data";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  private String additionalData;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private Integer entityId;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORDER_ITEM_ID = "order_item_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ITEM_ID)
  private Integer orderItemId;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private Integer parentId;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private Integer productId;

  public static final String SERIALIZED_NAME_QTY = "qty";
  @SerializedName(SERIALIZED_NAME_QTY)
  private BigDecimal qty;

  public static final String SERIALIZED_NAME_ROW_TOTAL = "row_total";
  @SerializedName(SERIALIZED_NAME_ROW_TOTAL)
  private BigDecimal rowTotal;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private BigDecimal weight;

  public SalesDataShipmentItemInterface() {
  }

  public SalesDataShipmentItemInterface additionalData(String additionalData) {
    this.additionalData = additionalData;
    return this;
  }

  /**
   * Additional data.
   * @return additionalData
   */
  @javax.annotation.Nullable
  public String getAdditionalData() {
    return additionalData;
  }

  public void setAdditionalData(String additionalData) {
    this.additionalData = additionalData;
  }


  public SalesDataShipmentItemInterface description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SalesDataShipmentItemInterface entityId(Integer entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Shipment item ID.
   * @return entityId
   */
  @javax.annotation.Nullable
  public Integer getEntityId() {
    return entityId;
  }

  public void setEntityId(Integer entityId) {
    this.entityId = entityId;
  }


  public SalesDataShipmentItemInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentItemInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public SalesDataShipmentItemInterface name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SalesDataShipmentItemInterface orderItemId(Integer orderItemId) {
    this.orderItemId = orderItemId;
    return this;
  }

  /**
   * Order item ID.
   * @return orderItemId
   */
  @javax.annotation.Nonnull
  public Integer getOrderItemId() {
    return orderItemId;
  }

  public void setOrderItemId(Integer orderItemId) {
    this.orderItemId = orderItemId;
  }


  public SalesDataShipmentItemInterface parentId(Integer parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Parent ID.
   * @return parentId
   */
  @javax.annotation.Nullable
  public Integer getParentId() {
    return parentId;
  }

  public void setParentId(Integer parentId) {
    this.parentId = parentId;
  }


  public SalesDataShipmentItemInterface price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Price.
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public SalesDataShipmentItemInterface productId(Integer productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Product ID.
   * @return productId
   */
  @javax.annotation.Nullable
  public Integer getProductId() {
    return productId;
  }

  public void setProductId(Integer productId) {
    this.productId = productId;
  }


  public SalesDataShipmentItemInterface qty(BigDecimal qty) {
    this.qty = qty;
    return this;
  }

  /**
   * Quantity.
   * @return qty
   */
  @javax.annotation.Nonnull
  public BigDecimal getQty() {
    return qty;
  }

  public void setQty(BigDecimal qty) {
    this.qty = qty;
  }


  public SalesDataShipmentItemInterface rowTotal(BigDecimal rowTotal) {
    this.rowTotal = rowTotal;
    return this;
  }

  /**
   * Row total.
   * @return rowTotal
   */
  @javax.annotation.Nullable
  public BigDecimal getRowTotal() {
    return rowTotal;
  }

  public void setRowTotal(BigDecimal rowTotal) {
    this.rowTotal = rowTotal;
  }


  public SalesDataShipmentItemInterface sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * SKU.
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public SalesDataShipmentItemInterface weight(BigDecimal weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Weight.
   * @return weight
   */
  @javax.annotation.Nullable
  public BigDecimal getWeight() {
    return weight;
  }

  public void setWeight(BigDecimal weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesDataShipmentItemInterface salesDataShipmentItemInterface = (SalesDataShipmentItemInterface) o;
    return Objects.equals(this.additionalData, salesDataShipmentItemInterface.additionalData) &&
        Objects.equals(this.description, salesDataShipmentItemInterface.description) &&
        Objects.equals(this.entityId, salesDataShipmentItemInterface.entityId) &&
        Objects.equals(this.extensionAttributes, salesDataShipmentItemInterface.extensionAttributes) &&
        Objects.equals(this.name, salesDataShipmentItemInterface.name) &&
        Objects.equals(this.orderItemId, salesDataShipmentItemInterface.orderItemId) &&
        Objects.equals(this.parentId, salesDataShipmentItemInterface.parentId) &&
        Objects.equals(this.price, salesDataShipmentItemInterface.price) &&
        Objects.equals(this.productId, salesDataShipmentItemInterface.productId) &&
        Objects.equals(this.qty, salesDataShipmentItemInterface.qty) &&
        Objects.equals(this.rowTotal, salesDataShipmentItemInterface.rowTotal) &&
        Objects.equals(this.sku, salesDataShipmentItemInterface.sku) &&
        Objects.equals(this.weight, salesDataShipmentItemInterface.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalData, description, entityId, extensionAttributes, name, orderItemId, parentId, price, productId, qty, rowTotal, sku, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesDataShipmentItemInterface {\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orderItemId: ").append(toIndentedString(orderItemId)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    qty: ").append(toIndentedString(qty)).append("\n");
    sb.append("    rowTotal: ").append(toIndentedString(rowTotal)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_data");
    openapiFields.add("description");
    openapiFields.add("entity_id");
    openapiFields.add("extension_attributes");
    openapiFields.add("name");
    openapiFields.add("order_item_id");
    openapiFields.add("parent_id");
    openapiFields.add("price");
    openapiFields.add("product_id");
    openapiFields.add("qty");
    openapiFields.add("row_total");
    openapiFields.add("sku");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("order_item_id");
    openapiRequiredFields.add("qty");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesDataShipmentItemInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesDataShipmentItemInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesDataShipmentItemInterface is not found in the empty JSON string", SalesDataShipmentItemInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesDataShipmentItemInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesDataShipmentItemInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SalesDataShipmentItemInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additional_data") != null && !jsonObj.get("additional_data").isJsonNull()) && !jsonObj.get("additional_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additional_data").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesDataShipmentItemInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesDataShipmentItemInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesDataShipmentItemInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesDataShipmentItemInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesDataShipmentItemInterface>() {
           @Override
           public void write(JsonWriter out, SalesDataShipmentItemInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesDataShipmentItemInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesDataShipmentItemInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesDataShipmentItemInterface
   * @throws IOException if the JSON string is invalid with respect to SalesDataShipmentItemInterface
   */
  public static SalesDataShipmentItemInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesDataShipmentItemInterface.class);
  }

  /**
   * Convert an instance of SalesDataShipmentItemInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

