/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BundleDataLinkInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface OptionInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BundleDataOptionInterface {
  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_OPTION_ID = "option_id";
  @SerializedName(SERIALIZED_NAME_OPTION_ID)
  private Integer optionId;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_PRODUCT_LINKS = "product_links";
  @SerializedName(SERIALIZED_NAME_PRODUCT_LINKS)
  private List<BundleDataLinkInterface> productLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public BundleDataOptionInterface() {
  }

  public BundleDataOptionInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\OptionInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public BundleDataOptionInterface optionId(Integer optionId) {
    this.optionId = optionId;
    return this;
  }

  /**
   * Option id
   * @return optionId
   */
  @javax.annotation.Nullable
  public Integer getOptionId() {
    return optionId;
  }

  public void setOptionId(Integer optionId) {
    this.optionId = optionId;
  }


  public BundleDataOptionInterface position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Option position
   * @return position
   */
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public BundleDataOptionInterface productLinks(List<BundleDataLinkInterface> productLinks) {
    this.productLinks = productLinks;
    return this;
  }

  public BundleDataOptionInterface addProductLinksItem(BundleDataLinkInterface productLinksItem) {
    if (this.productLinks == null) {
      this.productLinks = new ArrayList<>();
    }
    this.productLinks.add(productLinksItem);
    return this;
  }

  /**
   * Product links
   * @return productLinks
   */
  @javax.annotation.Nullable
  public List<BundleDataLinkInterface> getProductLinks() {
    return productLinks;
  }

  public void setProductLinks(List<BundleDataLinkInterface> productLinks) {
    this.productLinks = productLinks;
  }


  public BundleDataOptionInterface required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Is required option
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public BundleDataOptionInterface sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Product sku
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public BundleDataOptionInterface title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Option title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public BundleDataOptionInterface type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Input type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BundleDataOptionInterface bundleDataOptionInterface = (BundleDataOptionInterface) o;
    return Objects.equals(this.extensionAttributes, bundleDataOptionInterface.extensionAttributes) &&
        Objects.equals(this.optionId, bundleDataOptionInterface.optionId) &&
        Objects.equals(this.position, bundleDataOptionInterface.position) &&
        Objects.equals(this.productLinks, bundleDataOptionInterface.productLinks) &&
        Objects.equals(this.required, bundleDataOptionInterface.required) &&
        Objects.equals(this.sku, bundleDataOptionInterface.sku) &&
        Objects.equals(this.title, bundleDataOptionInterface.title) &&
        Objects.equals(this.type, bundleDataOptionInterface.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extensionAttributes, optionId, position, productLinks, required, sku, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BundleDataOptionInterface {\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    optionId: ").append(toIndentedString(optionId)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    productLinks: ").append(toIndentedString(productLinks)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extension_attributes");
    openapiFields.add("option_id");
    openapiFields.add("position");
    openapiFields.add("product_links");
    openapiFields.add("required");
    openapiFields.add("sku");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BundleDataOptionInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BundleDataOptionInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BundleDataOptionInterface is not found in the empty JSON string", BundleDataOptionInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BundleDataOptionInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BundleDataOptionInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("product_links") != null && !jsonObj.get("product_links").isJsonNull()) {
        JsonArray jsonArrayproductLinks = jsonObj.getAsJsonArray("product_links");
        if (jsonArrayproductLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("product_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `product_links` to be an array in the JSON string but got `%s`", jsonObj.get("product_links").toString()));
          }

          // validate the optional field `product_links` (array)
          for (int i = 0; i < jsonArrayproductLinks.size(); i++) {
            BundleDataLinkInterface.validateJsonElement(jsonArrayproductLinks.get(i));
          };
        }
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BundleDataOptionInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BundleDataOptionInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BundleDataOptionInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BundleDataOptionInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<BundleDataOptionInterface>() {
           @Override
           public void write(JsonWriter out, BundleDataOptionInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BundleDataOptionInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BundleDataOptionInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BundleDataOptionInterface
   * @throws IOException if the JSON string is invalid with respect to BundleDataOptionInterface
   */
  public static BundleDataOptionInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BundleDataOptionInterface.class);
  }

  /**
   * Convert an instance of BundleDataOptionInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

