/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Company hierarchy DTO interface for WebAPI.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanyDataHierarchyInterface {
  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private Integer entityId;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entity_type";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_STRUCTURE_ID = "structure_id";
  @SerializedName(SERIALIZED_NAME_STRUCTURE_ID)
  private Integer structureId;

  public static final String SERIALIZED_NAME_STRUCTURE_PARENT_ID = "structure_parent_id";
  @SerializedName(SERIALIZED_NAME_STRUCTURE_PARENT_ID)
  private Integer structureParentId;

  public CompanyDataHierarchyInterface() {
  }

  public CompanyDataHierarchyInterface entityId(Integer entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Entity ID.
   * @return entityId
   */
  @javax.annotation.Nullable
  public Integer getEntityId() {
    return entityId;
  }

  public void setEntityId(Integer entityId) {
    this.entityId = entityId;
  }


  public CompanyDataHierarchyInterface entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Entity type.
   * @return entityType
   */
  @javax.annotation.Nullable
  public String getEntityType() {
    return entityType;
  }

  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public CompanyDataHierarchyInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Company\\Api\\Data\\HierarchyInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public CompanyDataHierarchyInterface structureId(Integer structureId) {
    this.structureId = structureId;
    return this;
  }

  /**
   * Structure ID.
   * @return structureId
   */
  @javax.annotation.Nullable
  public Integer getStructureId() {
    return structureId;
  }

  public void setStructureId(Integer structureId) {
    this.structureId = structureId;
  }


  public CompanyDataHierarchyInterface structureParentId(Integer structureParentId) {
    this.structureParentId = structureParentId;
    return this;
  }

  /**
   * Structure parent ID.
   * @return structureParentId
   */
  @javax.annotation.Nullable
  public Integer getStructureParentId() {
    return structureParentId;
  }

  public void setStructureParentId(Integer structureParentId) {
    this.structureParentId = structureParentId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyDataHierarchyInterface companyDataHierarchyInterface = (CompanyDataHierarchyInterface) o;
    return Objects.equals(this.entityId, companyDataHierarchyInterface.entityId) &&
        Objects.equals(this.entityType, companyDataHierarchyInterface.entityType) &&
        Objects.equals(this.extensionAttributes, companyDataHierarchyInterface.extensionAttributes) &&
        Objects.equals(this.structureId, companyDataHierarchyInterface.structureId) &&
        Objects.equals(this.structureParentId, companyDataHierarchyInterface.structureParentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityId, entityType, extensionAttributes, structureId, structureParentId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyDataHierarchyInterface {\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    structureId: ").append(toIndentedString(structureId)).append("\n");
    sb.append("    structureParentId: ").append(toIndentedString(structureParentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entity_id");
    openapiFields.add("entity_type");
    openapiFields.add("extension_attributes");
    openapiFields.add("structure_id");
    openapiFields.add("structure_parent_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanyDataHierarchyInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanyDataHierarchyInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyDataHierarchyInterface is not found in the empty JSON string", CompanyDataHierarchyInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanyDataHierarchyInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanyDataHierarchyInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("entity_type") != null && !jsonObj.get("entity_type").isJsonNull()) && !jsonObj.get("entity_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyDataHierarchyInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyDataHierarchyInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyDataHierarchyInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyDataHierarchyInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyDataHierarchyInterface>() {
           @Override
           public void write(JsonWriter out, CompanyDataHierarchyInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyDataHierarchyInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanyDataHierarchyInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanyDataHierarchyInterface
   * @throws IOException if the JSON string is invalid with respect to CompanyDataHierarchyInterface
   */
  public static CompanyDataHierarchyInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyDataHierarchyInterface.class);
  }

  /**
   * Convert an instance of CompanyDataHierarchyInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

