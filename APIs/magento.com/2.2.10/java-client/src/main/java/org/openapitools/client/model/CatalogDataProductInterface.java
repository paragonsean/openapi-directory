/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CatalogDataProductAttributeMediaGalleryEntryInterface;
import org.openapitools.client.model.CatalogDataProductCustomOptionInterface;
import org.openapitools.client.model.CatalogDataProductExtensionInterface;
import org.openapitools.client.model.CatalogDataProductLinkInterface;
import org.openapitools.client.model.CatalogDataProductTierPriceInterface;
import org.openapitools.client.model.FrameworkAttributeInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogDataProductInterface {
  public static final String SERIALIZED_NAME_ATTRIBUTE_SET_ID = "attribute_set_id";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_SET_ID)
  private Integer attributeSetId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "custom_attributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private List<FrameworkAttributeInterface> customAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private CatalogDataProductExtensionInterface extensionAttributes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MEDIA_GALLERY_ENTRIES = "media_gallery_entries";
  @SerializedName(SERIALIZED_NAME_MEDIA_GALLERY_ENTRIES)
  private List<CatalogDataProductAttributeMediaGalleryEntryInterface> mediaGalleryEntries = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<CatalogDataProductCustomOptionInterface> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_PRODUCT_LINKS = "product_links";
  @SerializedName(SERIALIZED_NAME_PRODUCT_LINKS)
  private List<CatalogDataProductLinkInterface> productLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_TIER_PRICES = "tier_prices";
  @SerializedName(SERIALIZED_NAME_TIER_PRICES)
  private List<CatalogDataProductTierPriceInterface> tierPrices = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private String typeId;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private Integer visibility;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private BigDecimal weight;

  public CatalogDataProductInterface() {
  }

  public CatalogDataProductInterface attributeSetId(Integer attributeSetId) {
    this.attributeSetId = attributeSetId;
    return this;
  }

  /**
   * Attribute set id
   * @return attributeSetId
   */
  @javax.annotation.Nullable
  public Integer getAttributeSetId() {
    return attributeSetId;
  }

  public void setAttributeSetId(Integer attributeSetId) {
    this.attributeSetId = attributeSetId;
  }


  public CatalogDataProductInterface createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created date
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public CatalogDataProductInterface customAttributes(List<FrameworkAttributeInterface> customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  public CatalogDataProductInterface addCustomAttributesItem(FrameworkAttributeInterface customAttributesItem) {
    if (this.customAttributes == null) {
      this.customAttributes = new ArrayList<>();
    }
    this.customAttributes.add(customAttributesItem);
    return this;
  }

  /**
   * Custom attributes values.
   * @return customAttributes
   */
  @javax.annotation.Nullable
  public List<FrameworkAttributeInterface> getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(List<FrameworkAttributeInterface> customAttributes) {
    this.customAttributes = customAttributes;
  }


  public CatalogDataProductInterface extensionAttributes(CatalogDataProductExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * Get extensionAttributes
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public CatalogDataProductExtensionInterface getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(CatalogDataProductExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public CatalogDataProductInterface id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CatalogDataProductInterface mediaGalleryEntries(List<CatalogDataProductAttributeMediaGalleryEntryInterface> mediaGalleryEntries) {
    this.mediaGalleryEntries = mediaGalleryEntries;
    return this;
  }

  public CatalogDataProductInterface addMediaGalleryEntriesItem(CatalogDataProductAttributeMediaGalleryEntryInterface mediaGalleryEntriesItem) {
    if (this.mediaGalleryEntries == null) {
      this.mediaGalleryEntries = new ArrayList<>();
    }
    this.mediaGalleryEntries.add(mediaGalleryEntriesItem);
    return this;
  }

  /**
   * Media gallery entries
   * @return mediaGalleryEntries
   */
  @javax.annotation.Nullable
  public List<CatalogDataProductAttributeMediaGalleryEntryInterface> getMediaGalleryEntries() {
    return mediaGalleryEntries;
  }

  public void setMediaGalleryEntries(List<CatalogDataProductAttributeMediaGalleryEntryInterface> mediaGalleryEntries) {
    this.mediaGalleryEntries = mediaGalleryEntries;
  }


  public CatalogDataProductInterface name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CatalogDataProductInterface options(List<CatalogDataProductCustomOptionInterface> options) {
    this.options = options;
    return this;
  }

  public CatalogDataProductInterface addOptionsItem(CatalogDataProductCustomOptionInterface optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * List of product options
   * @return options
   */
  @javax.annotation.Nullable
  public List<CatalogDataProductCustomOptionInterface> getOptions() {
    return options;
  }

  public void setOptions(List<CatalogDataProductCustomOptionInterface> options) {
    this.options = options;
  }


  public CatalogDataProductInterface price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Price
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public CatalogDataProductInterface productLinks(List<CatalogDataProductLinkInterface> productLinks) {
    this.productLinks = productLinks;
    return this;
  }

  public CatalogDataProductInterface addProductLinksItem(CatalogDataProductLinkInterface productLinksItem) {
    if (this.productLinks == null) {
      this.productLinks = new ArrayList<>();
    }
    this.productLinks.add(productLinksItem);
    return this;
  }

  /**
   * Product links info
   * @return productLinks
   */
  @javax.annotation.Nullable
  public List<CatalogDataProductLinkInterface> getProductLinks() {
    return productLinks;
  }

  public void setProductLinks(List<CatalogDataProductLinkInterface> productLinks) {
    this.productLinks = productLinks;
  }


  public CatalogDataProductInterface sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Sku
   * @return sku
   */
  @javax.annotation.Nonnull
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public CatalogDataProductInterface status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Status
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public CatalogDataProductInterface tierPrices(List<CatalogDataProductTierPriceInterface> tierPrices) {
    this.tierPrices = tierPrices;
    return this;
  }

  public CatalogDataProductInterface addTierPricesItem(CatalogDataProductTierPriceInterface tierPricesItem) {
    if (this.tierPrices == null) {
      this.tierPrices = new ArrayList<>();
    }
    this.tierPrices.add(tierPricesItem);
    return this;
  }

  /**
   * List of product tier prices
   * @return tierPrices
   */
  @javax.annotation.Nullable
  public List<CatalogDataProductTierPriceInterface> getTierPrices() {
    return tierPrices;
  }

  public void setTierPrices(List<CatalogDataProductTierPriceInterface> tierPrices) {
    this.tierPrices = tierPrices;
  }


  public CatalogDataProductInterface typeId(String typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * Type id
   * @return typeId
   */
  @javax.annotation.Nullable
  public String getTypeId() {
    return typeId;
  }

  public void setTypeId(String typeId) {
    this.typeId = typeId;
  }


  public CatalogDataProductInterface updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated date
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CatalogDataProductInterface visibility(Integer visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Visibility
   * @return visibility
   */
  @javax.annotation.Nullable
  public Integer getVisibility() {
    return visibility;
  }

  public void setVisibility(Integer visibility) {
    this.visibility = visibility;
  }


  public CatalogDataProductInterface weight(BigDecimal weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Weight
   * @return weight
   */
  @javax.annotation.Nullable
  public BigDecimal getWeight() {
    return weight;
  }

  public void setWeight(BigDecimal weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataProductInterface catalogDataProductInterface = (CatalogDataProductInterface) o;
    return Objects.equals(this.attributeSetId, catalogDataProductInterface.attributeSetId) &&
        Objects.equals(this.createdAt, catalogDataProductInterface.createdAt) &&
        Objects.equals(this.customAttributes, catalogDataProductInterface.customAttributes) &&
        Objects.equals(this.extensionAttributes, catalogDataProductInterface.extensionAttributes) &&
        Objects.equals(this.id, catalogDataProductInterface.id) &&
        Objects.equals(this.mediaGalleryEntries, catalogDataProductInterface.mediaGalleryEntries) &&
        Objects.equals(this.name, catalogDataProductInterface.name) &&
        Objects.equals(this.options, catalogDataProductInterface.options) &&
        Objects.equals(this.price, catalogDataProductInterface.price) &&
        Objects.equals(this.productLinks, catalogDataProductInterface.productLinks) &&
        Objects.equals(this.sku, catalogDataProductInterface.sku) &&
        Objects.equals(this.status, catalogDataProductInterface.status) &&
        Objects.equals(this.tierPrices, catalogDataProductInterface.tierPrices) &&
        Objects.equals(this.typeId, catalogDataProductInterface.typeId) &&
        Objects.equals(this.updatedAt, catalogDataProductInterface.updatedAt) &&
        Objects.equals(this.visibility, catalogDataProductInterface.visibility) &&
        Objects.equals(this.weight, catalogDataProductInterface.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeSetId, createdAt, customAttributes, extensionAttributes, id, mediaGalleryEntries, name, options, price, productLinks, sku, status, tierPrices, typeId, updatedAt, visibility, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataProductInterface {\n");
    sb.append("    attributeSetId: ").append(toIndentedString(attributeSetId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mediaGalleryEntries: ").append(toIndentedString(mediaGalleryEntries)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    productLinks: ").append(toIndentedString(productLinks)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tierPrices: ").append(toIndentedString(tierPrices)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attribute_set_id");
    openapiFields.add("created_at");
    openapiFields.add("custom_attributes");
    openapiFields.add("extension_attributes");
    openapiFields.add("id");
    openapiFields.add("media_gallery_entries");
    openapiFields.add("name");
    openapiFields.add("options");
    openapiFields.add("price");
    openapiFields.add("product_links");
    openapiFields.add("sku");
    openapiFields.add("status");
    openapiFields.add("tier_prices");
    openapiFields.add("type_id");
    openapiFields.add("updated_at");
    openapiFields.add("visibility");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sku");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogDataProductInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogDataProductInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogDataProductInterface is not found in the empty JSON string", CatalogDataProductInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogDataProductInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogDataProductInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogDataProductInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (jsonObj.get("custom_attributes") != null && !jsonObj.get("custom_attributes").isJsonNull()) {
        JsonArray jsonArraycustomAttributes = jsonObj.getAsJsonArray("custom_attributes");
        if (jsonArraycustomAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("custom_attributes").toString()));
          }

          // validate the optional field `custom_attributes` (array)
          for (int i = 0; i < jsonArraycustomAttributes.size(); i++) {
            FrameworkAttributeInterface.validateJsonElement(jsonArraycustomAttributes.get(i));
          };
        }
      }
      // validate the optional field `extension_attributes`
      if (jsonObj.get("extension_attributes") != null && !jsonObj.get("extension_attributes").isJsonNull()) {
        CatalogDataProductExtensionInterface.validateJsonElement(jsonObj.get("extension_attributes"));
      }
      if (jsonObj.get("media_gallery_entries") != null && !jsonObj.get("media_gallery_entries").isJsonNull()) {
        JsonArray jsonArraymediaGalleryEntries = jsonObj.getAsJsonArray("media_gallery_entries");
        if (jsonArraymediaGalleryEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("media_gallery_entries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `media_gallery_entries` to be an array in the JSON string but got `%s`", jsonObj.get("media_gallery_entries").toString()));
          }

          // validate the optional field `media_gallery_entries` (array)
          for (int i = 0; i < jsonArraymediaGalleryEntries.size(); i++) {
            CatalogDataProductAttributeMediaGalleryEntryInterface.validateJsonElement(jsonArraymediaGalleryEntries.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
          }

          // validate the optional field `options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            CatalogDataProductCustomOptionInterface.validateJsonElement(jsonArrayoptions.get(i));
          };
        }
      }
      if (jsonObj.get("product_links") != null && !jsonObj.get("product_links").isJsonNull()) {
        JsonArray jsonArrayproductLinks = jsonObj.getAsJsonArray("product_links");
        if (jsonArrayproductLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("product_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `product_links` to be an array in the JSON string but got `%s`", jsonObj.get("product_links").toString()));
          }

          // validate the optional field `product_links` (array)
          for (int i = 0; i < jsonArrayproductLinks.size(); i++) {
            CatalogDataProductLinkInterface.validateJsonElement(jsonArrayproductLinks.get(i));
          };
        }
      }
      if (!jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if (jsonObj.get("tier_prices") != null && !jsonObj.get("tier_prices").isJsonNull()) {
        JsonArray jsonArraytierPrices = jsonObj.getAsJsonArray("tier_prices");
        if (jsonArraytierPrices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tier_prices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tier_prices` to be an array in the JSON string but got `%s`", jsonObj.get("tier_prices").toString()));
          }

          // validate the optional field `tier_prices` (array)
          for (int i = 0; i < jsonArraytierPrices.size(); i++) {
            CatalogDataProductTierPriceInterface.validateJsonElement(jsonArraytierPrices.get(i));
          };
        }
      }
      if ((jsonObj.get("type_id") != null && !jsonObj.get("type_id").isJsonNull()) && !jsonObj.get("type_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_id").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogDataProductInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogDataProductInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogDataProductInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogDataProductInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogDataProductInterface>() {
           @Override
           public void write(JsonWriter out, CatalogDataProductInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogDataProductInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogDataProductInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogDataProductInterface
   * @throws IOException if the JSON string is invalid with respect to CatalogDataProductInterface
   */
  public static CatalogDataProductInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogDataProductInterface.class);
  }

  /**
   * Convert an instance of CatalogDataProductInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

