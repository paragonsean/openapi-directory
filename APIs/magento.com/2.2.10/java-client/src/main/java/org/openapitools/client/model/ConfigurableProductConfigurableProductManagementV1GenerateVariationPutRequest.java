/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CatalogDataProductInterface;
import org.openapitools.client.model.ConfigurableProductDataOptionInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest {
  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<ConfigurableProductDataOptionInterface> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private CatalogDataProductInterface product;

  public ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest() {
  }

  public ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest options(List<ConfigurableProductDataOptionInterface> options) {
    this.options = options;
    return this;
  }

  public ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest addOptionsItem(ConfigurableProductDataOptionInterface optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nonnull
  public List<ConfigurableProductDataOptionInterface> getOptions() {
    return options;
  }

  public void setOptions(List<ConfigurableProductDataOptionInterface> options) {
    this.options = options;
  }


  public ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest product(CatalogDataProductInterface product) {
    this.product = product;
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nonnull
  public CatalogDataProductInterface getProduct() {
    return product;
  }

  public void setProduct(CatalogDataProductInterface product) {
    this.product = product;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest configurableProductConfigurableProductManagementV1GenerateVariationPutRequest = (ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest) o;
    return Objects.equals(this.options, configurableProductConfigurableProductManagementV1GenerateVariationPutRequest.options) &&
        Objects.equals(this.product, configurableProductConfigurableProductManagementV1GenerateVariationPutRequest.product);
  }

  @Override
  public int hashCode() {
    return Objects.hash(options, product);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest {\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("options");
    openapiFields.add("product");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("options");
    openapiRequiredFields.add("product");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest is not found in the empty JSON string", ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("options").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }

      JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
      // validate the required field `options` (array)
      for (int i = 0; i < jsonArrayoptions.size(); i++) {
        ConfigurableProductDataOptionInterface.validateJsonElement(jsonArrayoptions.get(i));
      };
      // validate the required field `product`
      CatalogDataProductInterface.validateJsonElement(jsonObj.get("product"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest>() {
           @Override
           public void write(JsonWriter out, ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest
   * @throws IOException if the JSON string is invalid with respect to ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest
   */
  public static ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.class);
  }

  /**
   * Convert an instance of ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

