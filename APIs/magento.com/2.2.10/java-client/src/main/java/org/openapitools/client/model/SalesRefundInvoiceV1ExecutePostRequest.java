/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SalesDataCreditmemoCommentCreationInterface;
import org.openapitools.client.model.SalesDataCreditmemoCreationArgumentsInterface;
import org.openapitools.client.model.SalesDataCreditmemoItemCreationInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SalesRefundInvoiceV1ExecutePostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesRefundInvoiceV1ExecutePostRequest {
  public static final String SERIALIZED_NAME_APPEND_COMMENT = "appendComment";
  @SerializedName(SERIALIZED_NAME_APPEND_COMMENT)
  private Boolean appendComment;

  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private SalesDataCreditmemoCreationArgumentsInterface arguments;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private SalesDataCreditmemoCommentCreationInterface comment;

  public static final String SERIALIZED_NAME_IS_ONLINE = "isOnline";
  @SerializedName(SERIALIZED_NAME_IS_ONLINE)
  private Boolean isOnline;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<SalesDataCreditmemoItemCreationInterface> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFY = "notify";
  @SerializedName(SERIALIZED_NAME_NOTIFY)
  private Boolean notify;

  public SalesRefundInvoiceV1ExecutePostRequest() {
  }

  public SalesRefundInvoiceV1ExecutePostRequest appendComment(Boolean appendComment) {
    this.appendComment = appendComment;
    return this;
  }

  /**
   * Get appendComment
   * @return appendComment
   */
  @javax.annotation.Nullable
  public Boolean getAppendComment() {
    return appendComment;
  }

  public void setAppendComment(Boolean appendComment) {
    this.appendComment = appendComment;
  }


  public SalesRefundInvoiceV1ExecutePostRequest arguments(SalesDataCreditmemoCreationArgumentsInterface arguments) {
    this.arguments = arguments;
    return this;
  }

  /**
   * Get arguments
   * @return arguments
   */
  @javax.annotation.Nullable
  public SalesDataCreditmemoCreationArgumentsInterface getArguments() {
    return arguments;
  }

  public void setArguments(SalesDataCreditmemoCreationArgumentsInterface arguments) {
    this.arguments = arguments;
  }


  public SalesRefundInvoiceV1ExecutePostRequest comment(SalesDataCreditmemoCommentCreationInterface comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public SalesDataCreditmemoCommentCreationInterface getComment() {
    return comment;
  }

  public void setComment(SalesDataCreditmemoCommentCreationInterface comment) {
    this.comment = comment;
  }


  public SalesRefundInvoiceV1ExecutePostRequest isOnline(Boolean isOnline) {
    this.isOnline = isOnline;
    return this;
  }

  /**
   * Get isOnline
   * @return isOnline
   */
  @javax.annotation.Nullable
  public Boolean getIsOnline() {
    return isOnline;
  }

  public void setIsOnline(Boolean isOnline) {
    this.isOnline = isOnline;
  }


  public SalesRefundInvoiceV1ExecutePostRequest items(List<SalesDataCreditmemoItemCreationInterface> items) {
    this.items = items;
    return this;
  }

  public SalesRefundInvoiceV1ExecutePostRequest addItemsItem(SalesDataCreditmemoItemCreationInterface itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List<SalesDataCreditmemoItemCreationInterface> getItems() {
    return items;
  }

  public void setItems(List<SalesDataCreditmemoItemCreationInterface> items) {
    this.items = items;
  }


  public SalesRefundInvoiceV1ExecutePostRequest notify(Boolean notify) {
    this.notify = notify;
    return this;
  }

  /**
   * Get notify
   * @return notify
   */
  @javax.annotation.Nullable
  public Boolean getNotify() {
    return notify;
  }

  public void setNotify(Boolean notify) {
    this.notify = notify;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesRefundInvoiceV1ExecutePostRequest salesRefundInvoiceV1ExecutePostRequest = (SalesRefundInvoiceV1ExecutePostRequest) o;
    return Objects.equals(this.appendComment, salesRefundInvoiceV1ExecutePostRequest.appendComment) &&
        Objects.equals(this.arguments, salesRefundInvoiceV1ExecutePostRequest.arguments) &&
        Objects.equals(this.comment, salesRefundInvoiceV1ExecutePostRequest.comment) &&
        Objects.equals(this.isOnline, salesRefundInvoiceV1ExecutePostRequest.isOnline) &&
        Objects.equals(this.items, salesRefundInvoiceV1ExecutePostRequest.items) &&
        Objects.equals(this.notify, salesRefundInvoiceV1ExecutePostRequest.notify);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appendComment, arguments, comment, isOnline, items, notify);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesRefundInvoiceV1ExecutePostRequest {\n");
    sb.append("    appendComment: ").append(toIndentedString(appendComment)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    isOnline: ").append(toIndentedString(isOnline)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    notify: ").append(toIndentedString(notify)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appendComment");
    openapiFields.add("arguments");
    openapiFields.add("comment");
    openapiFields.add("isOnline");
    openapiFields.add("items");
    openapiFields.add("notify");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesRefundInvoiceV1ExecutePostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesRefundInvoiceV1ExecutePostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesRefundInvoiceV1ExecutePostRequest is not found in the empty JSON string", SalesRefundInvoiceV1ExecutePostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesRefundInvoiceV1ExecutePostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesRefundInvoiceV1ExecutePostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arguments`
      if (jsonObj.get("arguments") != null && !jsonObj.get("arguments").isJsonNull()) {
        SalesDataCreditmemoCreationArgumentsInterface.validateJsonElement(jsonObj.get("arguments"));
      }
      // validate the optional field `comment`
      if (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) {
        SalesDataCreditmemoCommentCreationInterface.validateJsonElement(jsonObj.get("comment"));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            SalesDataCreditmemoItemCreationInterface.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesRefundInvoiceV1ExecutePostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesRefundInvoiceV1ExecutePostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesRefundInvoiceV1ExecutePostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesRefundInvoiceV1ExecutePostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesRefundInvoiceV1ExecutePostRequest>() {
           @Override
           public void write(JsonWriter out, SalesRefundInvoiceV1ExecutePostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesRefundInvoiceV1ExecutePostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesRefundInvoiceV1ExecutePostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesRefundInvoiceV1ExecutePostRequest
   * @throws IOException if the JSON string is invalid with respect to SalesRefundInvoiceV1ExecutePostRequest
   */
  public static SalesRefundInvoiceV1ExecutePostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesRefundInvoiceV1ExecutePostRequest.class);
  }

  /**
   * Convert an instance of SalesRefundInvoiceV1ExecutePostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

