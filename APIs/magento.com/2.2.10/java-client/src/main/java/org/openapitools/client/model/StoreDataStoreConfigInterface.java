/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StoreConfig interface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StoreDataStoreConfigInterface {
  public static final String SERIALIZED_NAME_BASE_CURRENCY_CODE = "base_currency_code";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY_CODE)
  private String baseCurrencyCode;

  public static final String SERIALIZED_NAME_BASE_LINK_URL = "base_link_url";
  @SerializedName(SERIALIZED_NAME_BASE_LINK_URL)
  private String baseLinkUrl;

  public static final String SERIALIZED_NAME_BASE_MEDIA_URL = "base_media_url";
  @SerializedName(SERIALIZED_NAME_BASE_MEDIA_URL)
  private String baseMediaUrl;

  public static final String SERIALIZED_NAME_BASE_STATIC_URL = "base_static_url";
  @SerializedName(SERIALIZED_NAME_BASE_STATIC_URL)
  private String baseStaticUrl;

  public static final String SERIALIZED_NAME_BASE_URL = "base_url";
  @SerializedName(SERIALIZED_NAME_BASE_URL)
  private String baseUrl;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DEFAULT_DISPLAY_CURRENCY_CODE = "default_display_currency_code";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DISPLAY_CURRENCY_CODE)
  private String defaultDisplayCurrencyCode;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_SECURE_BASE_LINK_URL = "secure_base_link_url";
  @SerializedName(SERIALIZED_NAME_SECURE_BASE_LINK_URL)
  private String secureBaseLinkUrl;

  public static final String SERIALIZED_NAME_SECURE_BASE_MEDIA_URL = "secure_base_media_url";
  @SerializedName(SERIALIZED_NAME_SECURE_BASE_MEDIA_URL)
  private String secureBaseMediaUrl;

  public static final String SERIALIZED_NAME_SECURE_BASE_STATIC_URL = "secure_base_static_url";
  @SerializedName(SERIALIZED_NAME_SECURE_BASE_STATIC_URL)
  private String secureBaseStaticUrl;

  public static final String SERIALIZED_NAME_SECURE_BASE_URL = "secure_base_url";
  @SerializedName(SERIALIZED_NAME_SECURE_BASE_URL)
  private String secureBaseUrl;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_WEBSITE_ID = "website_id";
  @SerializedName(SERIALIZED_NAME_WEBSITE_ID)
  private Integer websiteId;

  public static final String SERIALIZED_NAME_WEIGHT_UNIT = "weight_unit";
  @SerializedName(SERIALIZED_NAME_WEIGHT_UNIT)
  private String weightUnit;

  public StoreDataStoreConfigInterface() {
  }

  public StoreDataStoreConfigInterface baseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
    return this;
  }

  /**
   * Base currency code
   * @return baseCurrencyCode
   */
  @javax.annotation.Nonnull
  public String getBaseCurrencyCode() {
    return baseCurrencyCode;
  }

  public void setBaseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
  }


  public StoreDataStoreConfigInterface baseLinkUrl(String baseLinkUrl) {
    this.baseLinkUrl = baseLinkUrl;
    return this;
  }

  /**
   * Base link URL for the store
   * @return baseLinkUrl
   */
  @javax.annotation.Nonnull
  public String getBaseLinkUrl() {
    return baseLinkUrl;
  }

  public void setBaseLinkUrl(String baseLinkUrl) {
    this.baseLinkUrl = baseLinkUrl;
  }


  public StoreDataStoreConfigInterface baseMediaUrl(String baseMediaUrl) {
    this.baseMediaUrl = baseMediaUrl;
    return this;
  }

  /**
   * Base media URL for the store
   * @return baseMediaUrl
   */
  @javax.annotation.Nonnull
  public String getBaseMediaUrl() {
    return baseMediaUrl;
  }

  public void setBaseMediaUrl(String baseMediaUrl) {
    this.baseMediaUrl = baseMediaUrl;
  }


  public StoreDataStoreConfigInterface baseStaticUrl(String baseStaticUrl) {
    this.baseStaticUrl = baseStaticUrl;
    return this;
  }

  /**
   * Base static URL for the store
   * @return baseStaticUrl
   */
  @javax.annotation.Nonnull
  public String getBaseStaticUrl() {
    return baseStaticUrl;
  }

  public void setBaseStaticUrl(String baseStaticUrl) {
    this.baseStaticUrl = baseStaticUrl;
  }


  public StoreDataStoreConfigInterface baseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
    return this;
  }

  /**
   * Base URL for the store
   * @return baseUrl
   */
  @javax.annotation.Nonnull
  public String getBaseUrl() {
    return baseUrl;
  }

  public void setBaseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
  }


  public StoreDataStoreConfigInterface code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Store code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public StoreDataStoreConfigInterface defaultDisplayCurrencyCode(String defaultDisplayCurrencyCode) {
    this.defaultDisplayCurrencyCode = defaultDisplayCurrencyCode;
    return this;
  }

  /**
   * Default display currency code
   * @return defaultDisplayCurrencyCode
   */
  @javax.annotation.Nonnull
  public String getDefaultDisplayCurrencyCode() {
    return defaultDisplayCurrencyCode;
  }

  public void setDefaultDisplayCurrencyCode(String defaultDisplayCurrencyCode) {
    this.defaultDisplayCurrencyCode = defaultDisplayCurrencyCode;
  }


  public StoreDataStoreConfigInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\StoreConfigInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public StoreDataStoreConfigInterface id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Store id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public StoreDataStoreConfigInterface locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Store locale
   * @return locale
   */
  @javax.annotation.Nonnull
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public StoreDataStoreConfigInterface secureBaseLinkUrl(String secureBaseLinkUrl) {
    this.secureBaseLinkUrl = secureBaseLinkUrl;
    return this;
  }

  /**
   * Secure base link URL for the store
   * @return secureBaseLinkUrl
   */
  @javax.annotation.Nonnull
  public String getSecureBaseLinkUrl() {
    return secureBaseLinkUrl;
  }

  public void setSecureBaseLinkUrl(String secureBaseLinkUrl) {
    this.secureBaseLinkUrl = secureBaseLinkUrl;
  }


  public StoreDataStoreConfigInterface secureBaseMediaUrl(String secureBaseMediaUrl) {
    this.secureBaseMediaUrl = secureBaseMediaUrl;
    return this;
  }

  /**
   * Secure base media URL for the store
   * @return secureBaseMediaUrl
   */
  @javax.annotation.Nonnull
  public String getSecureBaseMediaUrl() {
    return secureBaseMediaUrl;
  }

  public void setSecureBaseMediaUrl(String secureBaseMediaUrl) {
    this.secureBaseMediaUrl = secureBaseMediaUrl;
  }


  public StoreDataStoreConfigInterface secureBaseStaticUrl(String secureBaseStaticUrl) {
    this.secureBaseStaticUrl = secureBaseStaticUrl;
    return this;
  }

  /**
   * Secure base static URL for the store
   * @return secureBaseStaticUrl
   */
  @javax.annotation.Nonnull
  public String getSecureBaseStaticUrl() {
    return secureBaseStaticUrl;
  }

  public void setSecureBaseStaticUrl(String secureBaseStaticUrl) {
    this.secureBaseStaticUrl = secureBaseStaticUrl;
  }


  public StoreDataStoreConfigInterface secureBaseUrl(String secureBaseUrl) {
    this.secureBaseUrl = secureBaseUrl;
    return this;
  }

  /**
   * Secure base URL for the store
   * @return secureBaseUrl
   */
  @javax.annotation.Nonnull
  public String getSecureBaseUrl() {
    return secureBaseUrl;
  }

  public void setSecureBaseUrl(String secureBaseUrl) {
    this.secureBaseUrl = secureBaseUrl;
  }


  public StoreDataStoreConfigInterface timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Timezone of the store
   * @return timezone
   */
  @javax.annotation.Nonnull
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public StoreDataStoreConfigInterface websiteId(Integer websiteId) {
    this.websiteId = websiteId;
    return this;
  }

  /**
   * Website id of the store
   * @return websiteId
   */
  @javax.annotation.Nonnull
  public Integer getWebsiteId() {
    return websiteId;
  }

  public void setWebsiteId(Integer websiteId) {
    this.websiteId = websiteId;
  }


  public StoreDataStoreConfigInterface weightUnit(String weightUnit) {
    this.weightUnit = weightUnit;
    return this;
  }

  /**
   * The unit of weight
   * @return weightUnit
   */
  @javax.annotation.Nonnull
  public String getWeightUnit() {
    return weightUnit;
  }

  public void setWeightUnit(String weightUnit) {
    this.weightUnit = weightUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoreDataStoreConfigInterface storeDataStoreConfigInterface = (StoreDataStoreConfigInterface) o;
    return Objects.equals(this.baseCurrencyCode, storeDataStoreConfigInterface.baseCurrencyCode) &&
        Objects.equals(this.baseLinkUrl, storeDataStoreConfigInterface.baseLinkUrl) &&
        Objects.equals(this.baseMediaUrl, storeDataStoreConfigInterface.baseMediaUrl) &&
        Objects.equals(this.baseStaticUrl, storeDataStoreConfigInterface.baseStaticUrl) &&
        Objects.equals(this.baseUrl, storeDataStoreConfigInterface.baseUrl) &&
        Objects.equals(this.code, storeDataStoreConfigInterface.code) &&
        Objects.equals(this.defaultDisplayCurrencyCode, storeDataStoreConfigInterface.defaultDisplayCurrencyCode) &&
        Objects.equals(this.extensionAttributes, storeDataStoreConfigInterface.extensionAttributes) &&
        Objects.equals(this.id, storeDataStoreConfigInterface.id) &&
        Objects.equals(this.locale, storeDataStoreConfigInterface.locale) &&
        Objects.equals(this.secureBaseLinkUrl, storeDataStoreConfigInterface.secureBaseLinkUrl) &&
        Objects.equals(this.secureBaseMediaUrl, storeDataStoreConfigInterface.secureBaseMediaUrl) &&
        Objects.equals(this.secureBaseStaticUrl, storeDataStoreConfigInterface.secureBaseStaticUrl) &&
        Objects.equals(this.secureBaseUrl, storeDataStoreConfigInterface.secureBaseUrl) &&
        Objects.equals(this.timezone, storeDataStoreConfigInterface.timezone) &&
        Objects.equals(this.websiteId, storeDataStoreConfigInterface.websiteId) &&
        Objects.equals(this.weightUnit, storeDataStoreConfigInterface.weightUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseCurrencyCode, baseLinkUrl, baseMediaUrl, baseStaticUrl, baseUrl, code, defaultDisplayCurrencyCode, extensionAttributes, id, locale, secureBaseLinkUrl, secureBaseMediaUrl, secureBaseStaticUrl, secureBaseUrl, timezone, websiteId, weightUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoreDataStoreConfigInterface {\n");
    sb.append("    baseCurrencyCode: ").append(toIndentedString(baseCurrencyCode)).append("\n");
    sb.append("    baseLinkUrl: ").append(toIndentedString(baseLinkUrl)).append("\n");
    sb.append("    baseMediaUrl: ").append(toIndentedString(baseMediaUrl)).append("\n");
    sb.append("    baseStaticUrl: ").append(toIndentedString(baseStaticUrl)).append("\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    defaultDisplayCurrencyCode: ").append(toIndentedString(defaultDisplayCurrencyCode)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    secureBaseLinkUrl: ").append(toIndentedString(secureBaseLinkUrl)).append("\n");
    sb.append("    secureBaseMediaUrl: ").append(toIndentedString(secureBaseMediaUrl)).append("\n");
    sb.append("    secureBaseStaticUrl: ").append(toIndentedString(secureBaseStaticUrl)).append("\n");
    sb.append("    secureBaseUrl: ").append(toIndentedString(secureBaseUrl)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    websiteId: ").append(toIndentedString(websiteId)).append("\n");
    sb.append("    weightUnit: ").append(toIndentedString(weightUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_currency_code");
    openapiFields.add("base_link_url");
    openapiFields.add("base_media_url");
    openapiFields.add("base_static_url");
    openapiFields.add("base_url");
    openapiFields.add("code");
    openapiFields.add("default_display_currency_code");
    openapiFields.add("extension_attributes");
    openapiFields.add("id");
    openapiFields.add("locale");
    openapiFields.add("secure_base_link_url");
    openapiFields.add("secure_base_media_url");
    openapiFields.add("secure_base_static_url");
    openapiFields.add("secure_base_url");
    openapiFields.add("timezone");
    openapiFields.add("website_id");
    openapiFields.add("weight_unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("base_currency_code");
    openapiRequiredFields.add("base_link_url");
    openapiRequiredFields.add("base_media_url");
    openapiRequiredFields.add("base_static_url");
    openapiRequiredFields.add("base_url");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("default_display_currency_code");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("locale");
    openapiRequiredFields.add("secure_base_link_url");
    openapiRequiredFields.add("secure_base_media_url");
    openapiRequiredFields.add("secure_base_static_url");
    openapiRequiredFields.add("secure_base_url");
    openapiRequiredFields.add("timezone");
    openapiRequiredFields.add("website_id");
    openapiRequiredFields.add("weight_unit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoreDataStoreConfigInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoreDataStoreConfigInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoreDataStoreConfigInterface is not found in the empty JSON string", StoreDataStoreConfigInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StoreDataStoreConfigInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoreDataStoreConfigInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StoreDataStoreConfigInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("base_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_currency_code").toString()));
      }
      if (!jsonObj.get("base_link_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_link_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_link_url").toString()));
      }
      if (!jsonObj.get("base_media_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_media_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_media_url").toString()));
      }
      if (!jsonObj.get("base_static_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_static_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_static_url").toString()));
      }
      if (!jsonObj.get("base_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_url").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("default_display_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_display_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_display_currency_code").toString()));
      }
      if (!jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if (!jsonObj.get("secure_base_link_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure_base_link_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure_base_link_url").toString()));
      }
      if (!jsonObj.get("secure_base_media_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure_base_media_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure_base_media_url").toString()));
      }
      if (!jsonObj.get("secure_base_static_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure_base_static_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure_base_static_url").toString()));
      }
      if (!jsonObj.get("secure_base_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure_base_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure_base_url").toString()));
      }
      if (!jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if (!jsonObj.get("weight_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weight_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weight_unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoreDataStoreConfigInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoreDataStoreConfigInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoreDataStoreConfigInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoreDataStoreConfigInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<StoreDataStoreConfigInterface>() {
           @Override
           public void write(JsonWriter out, StoreDataStoreConfigInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoreDataStoreConfigInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoreDataStoreConfigInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoreDataStoreConfigInterface
   * @throws IOException if the JSON string is invalid with respect to StoreDataStoreConfigInterface
   */
  public static StoreDataStoreConfigInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoreDataStoreConfigInterface.class);
  }

  /**
   * Convert an instance of StoreDataStoreConfigInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

