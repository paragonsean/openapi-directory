/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Product Render image interface. Represents physical characteristics of image, that can be used in product listing or product view
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogDataProductRenderImageInterface {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private BigDecimal height;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_RESIZED_HEIGHT = "resized_height";
  @SerializedName(SERIALIZED_NAME_RESIZED_HEIGHT)
  private BigDecimal resizedHeight;

  public static final String SERIALIZED_NAME_RESIZED_WIDTH = "resized_width";
  @SerializedName(SERIALIZED_NAME_RESIZED_WIDTH)
  private BigDecimal resizedWidth;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private BigDecimal width;

  public CatalogDataProductRenderImageInterface() {
  }

  public CatalogDataProductRenderImageInterface code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Image code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public CatalogDataProductRenderImageInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\ImageInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public CatalogDataProductRenderImageInterface height(BigDecimal height) {
    this.height = height;
    return this;
  }

  /**
   * Image height
   * @return height
   */
  @javax.annotation.Nonnull
  public BigDecimal getHeight() {
    return height;
  }

  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public CatalogDataProductRenderImageInterface label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Image label
   * @return label
   */
  @javax.annotation.Nonnull
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public CatalogDataProductRenderImageInterface resizedHeight(BigDecimal resizedHeight) {
    this.resizedHeight = resizedHeight;
    return this;
  }

  /**
   * Resize height
   * @return resizedHeight
   */
  @javax.annotation.Nonnull
  public BigDecimal getResizedHeight() {
    return resizedHeight;
  }

  public void setResizedHeight(BigDecimal resizedHeight) {
    this.resizedHeight = resizedHeight;
  }


  public CatalogDataProductRenderImageInterface resizedWidth(BigDecimal resizedWidth) {
    this.resizedWidth = resizedWidth;
    return this;
  }

  /**
   * Resize width
   * @return resizedWidth
   */
  @javax.annotation.Nonnull
  public BigDecimal getResizedWidth() {
    return resizedWidth;
  }

  public void setResizedWidth(BigDecimal resizedWidth) {
    this.resizedWidth = resizedWidth;
  }


  public CatalogDataProductRenderImageInterface url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Image url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public CatalogDataProductRenderImageInterface width(BigDecimal width) {
    this.width = width;
    return this;
  }

  /**
   * Image width in px
   * @return width
   */
  @javax.annotation.Nonnull
  public BigDecimal getWidth() {
    return width;
  }

  public void setWidth(BigDecimal width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataProductRenderImageInterface catalogDataProductRenderImageInterface = (CatalogDataProductRenderImageInterface) o;
    return Objects.equals(this.code, catalogDataProductRenderImageInterface.code) &&
        Objects.equals(this.extensionAttributes, catalogDataProductRenderImageInterface.extensionAttributes) &&
        Objects.equals(this.height, catalogDataProductRenderImageInterface.height) &&
        Objects.equals(this.label, catalogDataProductRenderImageInterface.label) &&
        Objects.equals(this.resizedHeight, catalogDataProductRenderImageInterface.resizedHeight) &&
        Objects.equals(this.resizedWidth, catalogDataProductRenderImageInterface.resizedWidth) &&
        Objects.equals(this.url, catalogDataProductRenderImageInterface.url) &&
        Objects.equals(this.width, catalogDataProductRenderImageInterface.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, extensionAttributes, height, label, resizedHeight, resizedWidth, url, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataProductRenderImageInterface {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    resizedHeight: ").append(toIndentedString(resizedHeight)).append("\n");
    sb.append("    resizedWidth: ").append(toIndentedString(resizedWidth)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("extension_attributes");
    openapiFields.add("height");
    openapiFields.add("label");
    openapiFields.add("resized_height");
    openapiFields.add("resized_width");
    openapiFields.add("url");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("height");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("resized_height");
    openapiRequiredFields.add("resized_width");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("width");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogDataProductRenderImageInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogDataProductRenderImageInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogDataProductRenderImageInterface is not found in the empty JSON string", CatalogDataProductRenderImageInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogDataProductRenderImageInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogDataProductRenderImageInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogDataProductRenderImageInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogDataProductRenderImageInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogDataProductRenderImageInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogDataProductRenderImageInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogDataProductRenderImageInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogDataProductRenderImageInterface>() {
           @Override
           public void write(JsonWriter out, CatalogDataProductRenderImageInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogDataProductRenderImageInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogDataProductRenderImageInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogDataProductRenderImageInterface
   * @throws IOException if the JSON string is invalid with respect to CatalogDataProductRenderImageInterface
   */
  public static CatalogDataProductRenderImageInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogDataProductRenderImageInterface.class);
  }

  /**
   * Convert an instance of CatalogDataProductRenderImageInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

