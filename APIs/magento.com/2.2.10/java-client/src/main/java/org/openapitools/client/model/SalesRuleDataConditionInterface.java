/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface ConditionInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesRuleDataConditionInterface {
  public static final String SERIALIZED_NAME_AGGREGATOR_TYPE = "aggregator_type";
  @SerializedName(SERIALIZED_NAME_AGGREGATOR_TYPE)
  private String aggregatorType;

  public static final String SERIALIZED_NAME_ATTRIBUTE_NAME = "attribute_name";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAME)
  private String attributeName;

  public static final String SERIALIZED_NAME_CONDITION_TYPE = "condition_type";
  @SerializedName(SERIALIZED_NAME_CONDITION_TYPE)
  private String conditionType;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<SalesRuleDataConditionInterface> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private String operator;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public SalesRuleDataConditionInterface() {
  }

  public SalesRuleDataConditionInterface aggregatorType(String aggregatorType) {
    this.aggregatorType = aggregatorType;
    return this;
  }

  /**
   * The aggregator type
   * @return aggregatorType
   */
  @javax.annotation.Nullable
  public String getAggregatorType() {
    return aggregatorType;
  }

  public void setAggregatorType(String aggregatorType) {
    this.aggregatorType = aggregatorType;
  }


  public SalesRuleDataConditionInterface attributeName(String attributeName) {
    this.attributeName = attributeName;
    return this;
  }

  /**
   * The attribute name of the condition
   * @return attributeName
   */
  @javax.annotation.Nullable
  public String getAttributeName() {
    return attributeName;
  }

  public void setAttributeName(String attributeName) {
    this.attributeName = attributeName;
  }


  public SalesRuleDataConditionInterface conditionType(String conditionType) {
    this.conditionType = conditionType;
    return this;
  }

  /**
   * Condition type
   * @return conditionType
   */
  @javax.annotation.Nonnull
  public String getConditionType() {
    return conditionType;
  }

  public void setConditionType(String conditionType) {
    this.conditionType = conditionType;
  }


  public SalesRuleDataConditionInterface conditions(List<SalesRuleDataConditionInterface> conditions) {
    this.conditions = conditions;
    return this;
  }

  public SalesRuleDataConditionInterface addConditionsItem(SalesRuleDataConditionInterface conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * List of conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<SalesRuleDataConditionInterface> getConditions() {
    return conditions;
  }

  public void setConditions(List<SalesRuleDataConditionInterface> conditions) {
    this.conditions = conditions;
  }


  public SalesRuleDataConditionInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\ConditionInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public SalesRuleDataConditionInterface operator(String operator) {
    this.operator = operator;
    return this;
  }

  /**
   * The operator of the condition
   * @return operator
   */
  @javax.annotation.Nonnull
  public String getOperator() {
    return operator;
  }

  public void setOperator(String operator) {
    this.operator = operator;
  }


  public SalesRuleDataConditionInterface value(String value) {
    this.value = value;
    return this;
  }

  /**
   * The value of the condition
   * @return value
   */
  @javax.annotation.Nonnull
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesRuleDataConditionInterface salesRuleDataConditionInterface = (SalesRuleDataConditionInterface) o;
    return Objects.equals(this.aggregatorType, salesRuleDataConditionInterface.aggregatorType) &&
        Objects.equals(this.attributeName, salesRuleDataConditionInterface.attributeName) &&
        Objects.equals(this.conditionType, salesRuleDataConditionInterface.conditionType) &&
        Objects.equals(this.conditions, salesRuleDataConditionInterface.conditions) &&
        Objects.equals(this.extensionAttributes, salesRuleDataConditionInterface.extensionAttributes) &&
        Objects.equals(this.operator, salesRuleDataConditionInterface.operator) &&
        Objects.equals(this.value, salesRuleDataConditionInterface.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregatorType, attributeName, conditionType, conditions, extensionAttributes, operator, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesRuleDataConditionInterface {\n");
    sb.append("    aggregatorType: ").append(toIndentedString(aggregatorType)).append("\n");
    sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
    sb.append("    conditionType: ").append(toIndentedString(conditionType)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregator_type");
    openapiFields.add("attribute_name");
    openapiFields.add("condition_type");
    openapiFields.add("conditions");
    openapiFields.add("extension_attributes");
    openapiFields.add("operator");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("condition_type");
    openapiRequiredFields.add("operator");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesRuleDataConditionInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesRuleDataConditionInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesRuleDataConditionInterface is not found in the empty JSON string", SalesRuleDataConditionInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesRuleDataConditionInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesRuleDataConditionInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SalesRuleDataConditionInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregator_type") != null && !jsonObj.get("aggregator_type").isJsonNull()) && !jsonObj.get("aggregator_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregator_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregator_type").toString()));
      }
      if ((jsonObj.get("attribute_name") != null && !jsonObj.get("attribute_name").isJsonNull()) && !jsonObj.get("attribute_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute_name").toString()));
      }
      if (!jsonObj.get("condition_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition_type").toString()));
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            SalesRuleDataConditionInterface.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      if (!jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      if (!jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesRuleDataConditionInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesRuleDataConditionInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesRuleDataConditionInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesRuleDataConditionInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesRuleDataConditionInterface>() {
           @Override
           public void write(JsonWriter out, SalesRuleDataConditionInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesRuleDataConditionInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesRuleDataConditionInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesRuleDataConditionInterface
   * @throws IOException if the JSON string is invalid with respect to SalesRuleDataConditionInterface
   */
  public static SalesRuleDataConditionInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesRuleDataConditionInterface.class);
  }

  /**
   * Convert an instance of SalesRuleDataConditionInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

