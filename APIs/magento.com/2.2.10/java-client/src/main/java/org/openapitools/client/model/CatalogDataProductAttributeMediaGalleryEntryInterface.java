/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CatalogDataProductAttributeMediaGalleryEntryExtensionInterface;
import org.openapitools.client.model.FrameworkDataImageContentInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogDataProductAttributeMediaGalleryEntryInterface {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private FrameworkDataImageContentInterface content;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private CatalogDataProductAttributeMediaGalleryEntryExtensionInterface extensionAttributes;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private String _file;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "media_type";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<String> types = new ArrayList<>();

  public CatalogDataProductAttributeMediaGalleryEntryInterface() {
  }

  public CatalogDataProductAttributeMediaGalleryEntryInterface content(FrameworkDataImageContentInterface content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public FrameworkDataImageContentInterface getContent() {
    return content;
  }

  public void setContent(FrameworkDataImageContentInterface content) {
    this.content = content;
  }


  public CatalogDataProductAttributeMediaGalleryEntryInterface disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * If gallery entry is hidden from product page
   * @return disabled
   */
  @javax.annotation.Nonnull
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public CatalogDataProductAttributeMediaGalleryEntryInterface extensionAttributes(CatalogDataProductAttributeMediaGalleryEntryExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * Get extensionAttributes
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public CatalogDataProductAttributeMediaGalleryEntryExtensionInterface getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(CatalogDataProductAttributeMediaGalleryEntryExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public CatalogDataProductAttributeMediaGalleryEntryInterface _file(String _file) {
    this._file = _file;
    return this;
  }

  /**
   * File path
   * @return _file
   */
  @javax.annotation.Nullable
  public String getFile() {
    return _file;
  }

  public void setFile(String _file) {
    this._file = _file;
  }


  public CatalogDataProductAttributeMediaGalleryEntryInterface id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Gallery entry ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CatalogDataProductAttributeMediaGalleryEntryInterface label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Gallery entry alternative text
   * @return label
   */
  @javax.annotation.Nonnull
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public CatalogDataProductAttributeMediaGalleryEntryInterface mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * Media type
   * @return mediaType
   */
  @javax.annotation.Nonnull
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }


  public CatalogDataProductAttributeMediaGalleryEntryInterface position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Gallery entry position (sort order)
   * @return position
   */
  @javax.annotation.Nonnull
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public CatalogDataProductAttributeMediaGalleryEntryInterface types(List<String> types) {
    this.types = types;
    return this;
  }

  public CatalogDataProductAttributeMediaGalleryEntryInterface addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * Gallery entry image types (thumbnail, image, small_image etc)
   * @return types
   */
  @javax.annotation.Nonnull
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataProductAttributeMediaGalleryEntryInterface catalogDataProductAttributeMediaGalleryEntryInterface = (CatalogDataProductAttributeMediaGalleryEntryInterface) o;
    return Objects.equals(this.content, catalogDataProductAttributeMediaGalleryEntryInterface.content) &&
        Objects.equals(this.disabled, catalogDataProductAttributeMediaGalleryEntryInterface.disabled) &&
        Objects.equals(this.extensionAttributes, catalogDataProductAttributeMediaGalleryEntryInterface.extensionAttributes) &&
        Objects.equals(this._file, catalogDataProductAttributeMediaGalleryEntryInterface._file) &&
        Objects.equals(this.id, catalogDataProductAttributeMediaGalleryEntryInterface.id) &&
        Objects.equals(this.label, catalogDataProductAttributeMediaGalleryEntryInterface.label) &&
        Objects.equals(this.mediaType, catalogDataProductAttributeMediaGalleryEntryInterface.mediaType) &&
        Objects.equals(this.position, catalogDataProductAttributeMediaGalleryEntryInterface.position) &&
        Objects.equals(this.types, catalogDataProductAttributeMediaGalleryEntryInterface.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, disabled, extensionAttributes, _file, id, label, mediaType, position, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataProductAttributeMediaGalleryEntryInterface {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("disabled");
    openapiFields.add("extension_attributes");
    openapiFields.add("file");
    openapiFields.add("id");
    openapiFields.add("label");
    openapiFields.add("media_type");
    openapiFields.add("position");
    openapiFields.add("types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("disabled");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("media_type");
    openapiRequiredFields.add("position");
    openapiRequiredFields.add("types");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogDataProductAttributeMediaGalleryEntryInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogDataProductAttributeMediaGalleryEntryInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogDataProductAttributeMediaGalleryEntryInterface is not found in the empty JSON string", CatalogDataProductAttributeMediaGalleryEntryInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogDataProductAttributeMediaGalleryEntryInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogDataProductAttributeMediaGalleryEntryInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogDataProductAttributeMediaGalleryEntryInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `content`
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
        FrameworkDataImageContentInterface.validateJsonElement(jsonObj.get("content"));
      }
      // validate the optional field `extension_attributes`
      if (jsonObj.get("extension_attributes") != null && !jsonObj.get("extension_attributes").isJsonNull()) {
        CatalogDataProductAttributeMediaGalleryEntryExtensionInterface.validateJsonElement(jsonObj.get("extension_attributes"));
      }
      if ((jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) && !jsonObj.get("file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file").toString()));
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("media_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_type").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogDataProductAttributeMediaGalleryEntryInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogDataProductAttributeMediaGalleryEntryInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogDataProductAttributeMediaGalleryEntryInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogDataProductAttributeMediaGalleryEntryInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogDataProductAttributeMediaGalleryEntryInterface>() {
           @Override
           public void write(JsonWriter out, CatalogDataProductAttributeMediaGalleryEntryInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogDataProductAttributeMediaGalleryEntryInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogDataProductAttributeMediaGalleryEntryInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogDataProductAttributeMediaGalleryEntryInterface
   * @throws IOException if the JSON string is invalid with respect to CatalogDataProductAttributeMediaGalleryEntryInterface
   */
  public static CatalogDataProductAttributeMediaGalleryEntryInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogDataProductAttributeMediaGalleryEntryInterface.class);
  }

  /**
   * Convert an instance of CatalogDataProductAttributeMediaGalleryEntryInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

