/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface CurrencyInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuoteDataCurrencyInterface {
  public static final String SERIALIZED_NAME_BASE_CURRENCY_CODE = "base_currency_code";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY_CODE)
  private String baseCurrencyCode;

  public static final String SERIALIZED_NAME_BASE_TO_GLOBAL_RATE = "base_to_global_rate";
  @SerializedName(SERIALIZED_NAME_BASE_TO_GLOBAL_RATE)
  private BigDecimal baseToGlobalRate;

  public static final String SERIALIZED_NAME_BASE_TO_QUOTE_RATE = "base_to_quote_rate";
  @SerializedName(SERIALIZED_NAME_BASE_TO_QUOTE_RATE)
  private BigDecimal baseToQuoteRate;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_GLOBAL_CURRENCY_CODE = "global_currency_code";
  @SerializedName(SERIALIZED_NAME_GLOBAL_CURRENCY_CODE)
  private String globalCurrencyCode;

  public static final String SERIALIZED_NAME_QUOTE_CURRENCY_CODE = "quote_currency_code";
  @SerializedName(SERIALIZED_NAME_QUOTE_CURRENCY_CODE)
  private String quoteCurrencyCode;

  public static final String SERIALIZED_NAME_STORE_CURRENCY_CODE = "store_currency_code";
  @SerializedName(SERIALIZED_NAME_STORE_CURRENCY_CODE)
  private String storeCurrencyCode;

  public static final String SERIALIZED_NAME_STORE_TO_BASE_RATE = "store_to_base_rate";
  @SerializedName(SERIALIZED_NAME_STORE_TO_BASE_RATE)
  private BigDecimal storeToBaseRate;

  public static final String SERIALIZED_NAME_STORE_TO_QUOTE_RATE = "store_to_quote_rate";
  @SerializedName(SERIALIZED_NAME_STORE_TO_QUOTE_RATE)
  private BigDecimal storeToQuoteRate;

  public QuoteDataCurrencyInterface() {
  }

  public QuoteDataCurrencyInterface baseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
    return this;
  }

  /**
   * Base currency code
   * @return baseCurrencyCode
   */
  @javax.annotation.Nullable
  public String getBaseCurrencyCode() {
    return baseCurrencyCode;
  }

  public void setBaseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
  }


  public QuoteDataCurrencyInterface baseToGlobalRate(BigDecimal baseToGlobalRate) {
    this.baseToGlobalRate = baseToGlobalRate;
    return this;
  }

  /**
   * Base currency to global currency rate
   * @return baseToGlobalRate
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseToGlobalRate() {
    return baseToGlobalRate;
  }

  public void setBaseToGlobalRate(BigDecimal baseToGlobalRate) {
    this.baseToGlobalRate = baseToGlobalRate;
  }


  public QuoteDataCurrencyInterface baseToQuoteRate(BigDecimal baseToQuoteRate) {
    this.baseToQuoteRate = baseToQuoteRate;
    return this;
  }

  /**
   * Base currency to quote currency rate
   * @return baseToQuoteRate
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseToQuoteRate() {
    return baseToQuoteRate;
  }

  public void setBaseToQuoteRate(BigDecimal baseToQuoteRate) {
    this.baseToQuoteRate = baseToQuoteRate;
  }


  public QuoteDataCurrencyInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CurrencyInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public QuoteDataCurrencyInterface globalCurrencyCode(String globalCurrencyCode) {
    this.globalCurrencyCode = globalCurrencyCode;
    return this;
  }

  /**
   * Global currency code
   * @return globalCurrencyCode
   */
  @javax.annotation.Nullable
  public String getGlobalCurrencyCode() {
    return globalCurrencyCode;
  }

  public void setGlobalCurrencyCode(String globalCurrencyCode) {
    this.globalCurrencyCode = globalCurrencyCode;
  }


  public QuoteDataCurrencyInterface quoteCurrencyCode(String quoteCurrencyCode) {
    this.quoteCurrencyCode = quoteCurrencyCode;
    return this;
  }

  /**
   * Quote currency code
   * @return quoteCurrencyCode
   */
  @javax.annotation.Nullable
  public String getQuoteCurrencyCode() {
    return quoteCurrencyCode;
  }

  public void setQuoteCurrencyCode(String quoteCurrencyCode) {
    this.quoteCurrencyCode = quoteCurrencyCode;
  }


  public QuoteDataCurrencyInterface storeCurrencyCode(String storeCurrencyCode) {
    this.storeCurrencyCode = storeCurrencyCode;
    return this;
  }

  /**
   * Store currency code
   * @return storeCurrencyCode
   */
  @javax.annotation.Nullable
  public String getStoreCurrencyCode() {
    return storeCurrencyCode;
  }

  public void setStoreCurrencyCode(String storeCurrencyCode) {
    this.storeCurrencyCode = storeCurrencyCode;
  }


  public QuoteDataCurrencyInterface storeToBaseRate(BigDecimal storeToBaseRate) {
    this.storeToBaseRate = storeToBaseRate;
    return this;
  }

  /**
   * Store currency to base currency rate
   * @return storeToBaseRate
   */
  @javax.annotation.Nullable
  public BigDecimal getStoreToBaseRate() {
    return storeToBaseRate;
  }

  public void setStoreToBaseRate(BigDecimal storeToBaseRate) {
    this.storeToBaseRate = storeToBaseRate;
  }


  public QuoteDataCurrencyInterface storeToQuoteRate(BigDecimal storeToQuoteRate) {
    this.storeToQuoteRate = storeToQuoteRate;
    return this;
  }

  /**
   * Store currency to quote currency rate
   * @return storeToQuoteRate
   */
  @javax.annotation.Nullable
  public BigDecimal getStoreToQuoteRate() {
    return storeToQuoteRate;
  }

  public void setStoreToQuoteRate(BigDecimal storeToQuoteRate) {
    this.storeToQuoteRate = storeToQuoteRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteDataCurrencyInterface quoteDataCurrencyInterface = (QuoteDataCurrencyInterface) o;
    return Objects.equals(this.baseCurrencyCode, quoteDataCurrencyInterface.baseCurrencyCode) &&
        Objects.equals(this.baseToGlobalRate, quoteDataCurrencyInterface.baseToGlobalRate) &&
        Objects.equals(this.baseToQuoteRate, quoteDataCurrencyInterface.baseToQuoteRate) &&
        Objects.equals(this.extensionAttributes, quoteDataCurrencyInterface.extensionAttributes) &&
        Objects.equals(this.globalCurrencyCode, quoteDataCurrencyInterface.globalCurrencyCode) &&
        Objects.equals(this.quoteCurrencyCode, quoteDataCurrencyInterface.quoteCurrencyCode) &&
        Objects.equals(this.storeCurrencyCode, quoteDataCurrencyInterface.storeCurrencyCode) &&
        Objects.equals(this.storeToBaseRate, quoteDataCurrencyInterface.storeToBaseRate) &&
        Objects.equals(this.storeToQuoteRate, quoteDataCurrencyInterface.storeToQuoteRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseCurrencyCode, baseToGlobalRate, baseToQuoteRate, extensionAttributes, globalCurrencyCode, quoteCurrencyCode, storeCurrencyCode, storeToBaseRate, storeToQuoteRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteDataCurrencyInterface {\n");
    sb.append("    baseCurrencyCode: ").append(toIndentedString(baseCurrencyCode)).append("\n");
    sb.append("    baseToGlobalRate: ").append(toIndentedString(baseToGlobalRate)).append("\n");
    sb.append("    baseToQuoteRate: ").append(toIndentedString(baseToQuoteRate)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    globalCurrencyCode: ").append(toIndentedString(globalCurrencyCode)).append("\n");
    sb.append("    quoteCurrencyCode: ").append(toIndentedString(quoteCurrencyCode)).append("\n");
    sb.append("    storeCurrencyCode: ").append(toIndentedString(storeCurrencyCode)).append("\n");
    sb.append("    storeToBaseRate: ").append(toIndentedString(storeToBaseRate)).append("\n");
    sb.append("    storeToQuoteRate: ").append(toIndentedString(storeToQuoteRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_currency_code");
    openapiFields.add("base_to_global_rate");
    openapiFields.add("base_to_quote_rate");
    openapiFields.add("extension_attributes");
    openapiFields.add("global_currency_code");
    openapiFields.add("quote_currency_code");
    openapiFields.add("store_currency_code");
    openapiFields.add("store_to_base_rate");
    openapiFields.add("store_to_quote_rate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuoteDataCurrencyInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuoteDataCurrencyInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuoteDataCurrencyInterface is not found in the empty JSON string", QuoteDataCurrencyInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuoteDataCurrencyInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuoteDataCurrencyInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("base_currency_code") != null && !jsonObj.get("base_currency_code").isJsonNull()) && !jsonObj.get("base_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_currency_code").toString()));
      }
      if ((jsonObj.get("global_currency_code") != null && !jsonObj.get("global_currency_code").isJsonNull()) && !jsonObj.get("global_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `global_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("global_currency_code").toString()));
      }
      if ((jsonObj.get("quote_currency_code") != null && !jsonObj.get("quote_currency_code").isJsonNull()) && !jsonObj.get("quote_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quote_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quote_currency_code").toString()));
      }
      if ((jsonObj.get("store_currency_code") != null && !jsonObj.get("store_currency_code").isJsonNull()) && !jsonObj.get("store_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `store_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("store_currency_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuoteDataCurrencyInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuoteDataCurrencyInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuoteDataCurrencyInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuoteDataCurrencyInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<QuoteDataCurrencyInterface>() {
           @Override
           public void write(JsonWriter out, QuoteDataCurrencyInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuoteDataCurrencyInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuoteDataCurrencyInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuoteDataCurrencyInterface
   * @throws IOException if the JSON string is invalid with respect to QuoteDataCurrencyInterface
   */
  public static QuoteDataCurrencyInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuoteDataCurrencyInterface.class);
  }

  /**
   * Convert an instance of QuoteDataCurrencyInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

