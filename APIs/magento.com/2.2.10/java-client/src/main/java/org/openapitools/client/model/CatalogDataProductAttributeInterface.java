/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EavDataAttributeFrontendLabelInterface;
import org.openapitools.client.model.EavDataAttributeOptionInterface;
import org.openapitools.client.model.EavDataAttributeValidationRuleInterface;
import org.openapitools.client.model.FrameworkAttributeInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogDataProductAttributeInterface {
  public static final String SERIALIZED_NAME_APPLY_TO = "apply_to";
  @SerializedName(SERIALIZED_NAME_APPLY_TO)
  private List<String> applyTo = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTRIBUTE_CODE = "attribute_code";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_CODE)
  private String attributeCode;

  public static final String SERIALIZED_NAME_ATTRIBUTE_ID = "attribute_id";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_ID)
  private Integer attributeId;

  public static final String SERIALIZED_NAME_BACKEND_MODEL = "backend_model";
  @SerializedName(SERIALIZED_NAME_BACKEND_MODEL)
  private String backendModel;

  public static final String SERIALIZED_NAME_BACKEND_TYPE = "backend_type";
  @SerializedName(SERIALIZED_NAME_BACKEND_TYPE)
  private String backendType;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "custom_attributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private List<FrameworkAttributeInterface> customAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_FRONTEND_LABEL = "default_frontend_label";
  @SerializedName(SERIALIZED_NAME_DEFAULT_FRONTEND_LABEL)
  private String defaultFrontendLabel;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "default_value";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_ENTITY_TYPE_ID = "entity_type_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE_ID)
  private String entityTypeId;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_FRONTEND_CLASS = "frontend_class";
  @SerializedName(SERIALIZED_NAME_FRONTEND_CLASS)
  private String frontendClass;

  public static final String SERIALIZED_NAME_FRONTEND_INPUT = "frontend_input";
  @SerializedName(SERIALIZED_NAME_FRONTEND_INPUT)
  private String frontendInput;

  public static final String SERIALIZED_NAME_FRONTEND_LABELS = "frontend_labels";
  @SerializedName(SERIALIZED_NAME_FRONTEND_LABELS)
  private List<EavDataAttributeFrontendLabelInterface> frontendLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_COMPARABLE = "is_comparable";
  @SerializedName(SERIALIZED_NAME_IS_COMPARABLE)
  private String isComparable;

  public static final String SERIALIZED_NAME_IS_FILTERABLE = "is_filterable";
  @SerializedName(SERIALIZED_NAME_IS_FILTERABLE)
  private Boolean isFilterable;

  public static final String SERIALIZED_NAME_IS_FILTERABLE_IN_GRID = "is_filterable_in_grid";
  @SerializedName(SERIALIZED_NAME_IS_FILTERABLE_IN_GRID)
  private Boolean isFilterableInGrid;

  public static final String SERIALIZED_NAME_IS_FILTERABLE_IN_SEARCH = "is_filterable_in_search";
  @SerializedName(SERIALIZED_NAME_IS_FILTERABLE_IN_SEARCH)
  private Boolean isFilterableInSearch;

  public static final String SERIALIZED_NAME_IS_HTML_ALLOWED_ON_FRONT = "is_html_allowed_on_front";
  @SerializedName(SERIALIZED_NAME_IS_HTML_ALLOWED_ON_FRONT)
  private Boolean isHtmlAllowedOnFront;

  public static final String SERIALIZED_NAME_IS_REQUIRED = "is_required";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
  private Boolean isRequired;

  public static final String SERIALIZED_NAME_IS_SEARCHABLE = "is_searchable";
  @SerializedName(SERIALIZED_NAME_IS_SEARCHABLE)
  private String isSearchable;

  public static final String SERIALIZED_NAME_IS_UNIQUE = "is_unique";
  @SerializedName(SERIALIZED_NAME_IS_UNIQUE)
  private String isUnique;

  public static final String SERIALIZED_NAME_IS_USED_FOR_PROMO_RULES = "is_used_for_promo_rules";
  @SerializedName(SERIALIZED_NAME_IS_USED_FOR_PROMO_RULES)
  private String isUsedForPromoRules;

  public static final String SERIALIZED_NAME_IS_USED_IN_GRID = "is_used_in_grid";
  @SerializedName(SERIALIZED_NAME_IS_USED_IN_GRID)
  private Boolean isUsedInGrid;

  public static final String SERIALIZED_NAME_IS_USER_DEFINED = "is_user_defined";
  @SerializedName(SERIALIZED_NAME_IS_USER_DEFINED)
  private Boolean isUserDefined;

  public static final String SERIALIZED_NAME_IS_VISIBLE = "is_visible";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE)
  private Boolean isVisible;

  public static final String SERIALIZED_NAME_IS_VISIBLE_IN_ADVANCED_SEARCH = "is_visible_in_advanced_search";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE_IN_ADVANCED_SEARCH)
  private String isVisibleInAdvancedSearch;

  public static final String SERIALIZED_NAME_IS_VISIBLE_IN_GRID = "is_visible_in_grid";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE_IN_GRID)
  private Boolean isVisibleInGrid;

  public static final String SERIALIZED_NAME_IS_VISIBLE_ON_FRONT = "is_visible_on_front";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE_ON_FRONT)
  private String isVisibleOnFront;

  public static final String SERIALIZED_NAME_IS_WYSIWYG_ENABLED = "is_wysiwyg_enabled";
  @SerializedName(SERIALIZED_NAME_IS_WYSIWYG_ENABLED)
  private Boolean isWysiwygEnabled;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<EavDataAttributeOptionInterface> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_SOURCE_MODEL = "source_model";
  @SerializedName(SERIALIZED_NAME_SOURCE_MODEL)
  private String sourceModel;

  public static final String SERIALIZED_NAME_USED_FOR_SORT_BY = "used_for_sort_by";
  @SerializedName(SERIALIZED_NAME_USED_FOR_SORT_BY)
  private Boolean usedForSortBy;

  public static final String SERIALIZED_NAME_USED_IN_PRODUCT_LISTING = "used_in_product_listing";
  @SerializedName(SERIALIZED_NAME_USED_IN_PRODUCT_LISTING)
  private String usedInProductListing;

  public static final String SERIALIZED_NAME_VALIDATION_RULES = "validation_rules";
  @SerializedName(SERIALIZED_NAME_VALIDATION_RULES)
  private List<EavDataAttributeValidationRuleInterface> validationRules = new ArrayList<>();

  public CatalogDataProductAttributeInterface() {
  }

  public CatalogDataProductAttributeInterface applyTo(List<String> applyTo) {
    this.applyTo = applyTo;
    return this;
  }

  public CatalogDataProductAttributeInterface addApplyToItem(String applyToItem) {
    if (this.applyTo == null) {
      this.applyTo = new ArrayList<>();
    }
    this.applyTo.add(applyToItem);
    return this;
  }

  /**
   * Apply to value for the element
   * @return applyTo
   */
  @javax.annotation.Nullable
  public List<String> getApplyTo() {
    return applyTo;
  }

  public void setApplyTo(List<String> applyTo) {
    this.applyTo = applyTo;
  }


  public CatalogDataProductAttributeInterface attributeCode(String attributeCode) {
    this.attributeCode = attributeCode;
    return this;
  }

  /**
   * Code of the attribute.
   * @return attributeCode
   */
  @javax.annotation.Nonnull
  public String getAttributeCode() {
    return attributeCode;
  }

  public void setAttributeCode(String attributeCode) {
    this.attributeCode = attributeCode;
  }


  public CatalogDataProductAttributeInterface attributeId(Integer attributeId) {
    this.attributeId = attributeId;
    return this;
  }

  /**
   * Id of the attribute.
   * @return attributeId
   */
  @javax.annotation.Nullable
  public Integer getAttributeId() {
    return attributeId;
  }

  public void setAttributeId(Integer attributeId) {
    this.attributeId = attributeId;
  }


  public CatalogDataProductAttributeInterface backendModel(String backendModel) {
    this.backendModel = backendModel;
    return this;
  }

  /**
   * Backend model
   * @return backendModel
   */
  @javax.annotation.Nullable
  public String getBackendModel() {
    return backendModel;
  }

  public void setBackendModel(String backendModel) {
    this.backendModel = backendModel;
  }


  public CatalogDataProductAttributeInterface backendType(String backendType) {
    this.backendType = backendType;
    return this;
  }

  /**
   * Backend type.
   * @return backendType
   */
  @javax.annotation.Nullable
  public String getBackendType() {
    return backendType;
  }

  public void setBackendType(String backendType) {
    this.backendType = backendType;
  }


  public CatalogDataProductAttributeInterface customAttributes(List<FrameworkAttributeInterface> customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  public CatalogDataProductAttributeInterface addCustomAttributesItem(FrameworkAttributeInterface customAttributesItem) {
    if (this.customAttributes == null) {
      this.customAttributes = new ArrayList<>();
    }
    this.customAttributes.add(customAttributesItem);
    return this;
  }

  /**
   * Custom attributes values.
   * @return customAttributes
   */
  @javax.annotation.Nullable
  public List<FrameworkAttributeInterface> getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(List<FrameworkAttributeInterface> customAttributes) {
    this.customAttributes = customAttributes;
  }


  public CatalogDataProductAttributeInterface defaultFrontendLabel(String defaultFrontendLabel) {
    this.defaultFrontendLabel = defaultFrontendLabel;
    return this;
  }

  /**
   * Frontend label for default store
   * @return defaultFrontendLabel
   */
  @javax.annotation.Nullable
  public String getDefaultFrontendLabel() {
    return defaultFrontendLabel;
  }

  public void setDefaultFrontendLabel(String defaultFrontendLabel) {
    this.defaultFrontendLabel = defaultFrontendLabel;
  }


  public CatalogDataProductAttributeInterface defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Default value for the element.
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public CatalogDataProductAttributeInterface entityTypeId(String entityTypeId) {
    this.entityTypeId = entityTypeId;
    return this;
  }

  /**
   * Entity type id
   * @return entityTypeId
   */
  @javax.annotation.Nonnull
  public String getEntityTypeId() {
    return entityTypeId;
  }

  public void setEntityTypeId(String entityTypeId) {
    this.entityTypeId = entityTypeId;
  }


  public CatalogDataProductAttributeInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\EavAttributeInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public CatalogDataProductAttributeInterface frontendClass(String frontendClass) {
    this.frontendClass = frontendClass;
    return this;
  }

  /**
   * Frontend class of attribute
   * @return frontendClass
   */
  @javax.annotation.Nullable
  public String getFrontendClass() {
    return frontendClass;
  }

  public void setFrontendClass(String frontendClass) {
    this.frontendClass = frontendClass;
  }


  public CatalogDataProductAttributeInterface frontendInput(String frontendInput) {
    this.frontendInput = frontendInput;
    return this;
  }

  /**
   * HTML for input element.
   * @return frontendInput
   */
  @javax.annotation.Nonnull
  public String getFrontendInput() {
    return frontendInput;
  }

  public void setFrontendInput(String frontendInput) {
    this.frontendInput = frontendInput;
  }


  public CatalogDataProductAttributeInterface frontendLabels(List<EavDataAttributeFrontendLabelInterface> frontendLabels) {
    this.frontendLabels = frontendLabels;
    return this;
  }

  public CatalogDataProductAttributeInterface addFrontendLabelsItem(EavDataAttributeFrontendLabelInterface frontendLabelsItem) {
    if (this.frontendLabels == null) {
      this.frontendLabels = new ArrayList<>();
    }
    this.frontendLabels.add(frontendLabelsItem);
    return this;
  }

  /**
   * Frontend label for each store
   * @return frontendLabels
   */
  @javax.annotation.Nonnull
  public List<EavDataAttributeFrontendLabelInterface> getFrontendLabels() {
    return frontendLabels;
  }

  public void setFrontendLabels(List<EavDataAttributeFrontendLabelInterface> frontendLabels) {
    this.frontendLabels = frontendLabels;
  }


  public CatalogDataProductAttributeInterface isComparable(String isComparable) {
    this.isComparable = isComparable;
    return this;
  }

  /**
   * The attribute can be compared on the frontend
   * @return isComparable
   */
  @javax.annotation.Nullable
  public String getIsComparable() {
    return isComparable;
  }

  public void setIsComparable(String isComparable) {
    this.isComparable = isComparable;
  }


  public CatalogDataProductAttributeInterface isFilterable(Boolean isFilterable) {
    this.isFilterable = isFilterable;
    return this;
  }

  /**
   * It used in layered navigation
   * @return isFilterable
   */
  @javax.annotation.Nullable
  public Boolean getIsFilterable() {
    return isFilterable;
  }

  public void setIsFilterable(Boolean isFilterable) {
    this.isFilterable = isFilterable;
  }


  public CatalogDataProductAttributeInterface isFilterableInGrid(Boolean isFilterableInGrid) {
    this.isFilterableInGrid = isFilterableInGrid;
    return this;
  }

  /**
   * It is filterable in catalog product grid
   * @return isFilterableInGrid
   */
  @javax.annotation.Nullable
  public Boolean getIsFilterableInGrid() {
    return isFilterableInGrid;
  }

  public void setIsFilterableInGrid(Boolean isFilterableInGrid) {
    this.isFilterableInGrid = isFilterableInGrid;
  }


  public CatalogDataProductAttributeInterface isFilterableInSearch(Boolean isFilterableInSearch) {
    this.isFilterableInSearch = isFilterableInSearch;
    return this;
  }

  /**
   * It is used in search results layered navigation
   * @return isFilterableInSearch
   */
  @javax.annotation.Nullable
  public Boolean getIsFilterableInSearch() {
    return isFilterableInSearch;
  }

  public void setIsFilterableInSearch(Boolean isFilterableInSearch) {
    this.isFilterableInSearch = isFilterableInSearch;
  }


  public CatalogDataProductAttributeInterface isHtmlAllowedOnFront(Boolean isHtmlAllowedOnFront) {
    this.isHtmlAllowedOnFront = isHtmlAllowedOnFront;
    return this;
  }

  /**
   * The HTML tags are allowed on the frontend
   * @return isHtmlAllowedOnFront
   */
  @javax.annotation.Nullable
  public Boolean getIsHtmlAllowedOnFront() {
    return isHtmlAllowedOnFront;
  }

  public void setIsHtmlAllowedOnFront(Boolean isHtmlAllowedOnFront) {
    this.isHtmlAllowedOnFront = isHtmlAllowedOnFront;
  }


  public CatalogDataProductAttributeInterface isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

  /**
   * Attribute is required.
   * @return isRequired
   */
  @javax.annotation.Nonnull
  public Boolean getIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }


  public CatalogDataProductAttributeInterface isSearchable(String isSearchable) {
    this.isSearchable = isSearchable;
    return this;
  }

  /**
   * The attribute can be used in Quick Search
   * @return isSearchable
   */
  @javax.annotation.Nullable
  public String getIsSearchable() {
    return isSearchable;
  }

  public void setIsSearchable(String isSearchable) {
    this.isSearchable = isSearchable;
  }


  public CatalogDataProductAttributeInterface isUnique(String isUnique) {
    this.isUnique = isUnique;
    return this;
  }

  /**
   * This is a unique attribute
   * @return isUnique
   */
  @javax.annotation.Nullable
  public String getIsUnique() {
    return isUnique;
  }

  public void setIsUnique(String isUnique) {
    this.isUnique = isUnique;
  }


  public CatalogDataProductAttributeInterface isUsedForPromoRules(String isUsedForPromoRules) {
    this.isUsedForPromoRules = isUsedForPromoRules;
    return this;
  }

  /**
   * The attribute can be used for promo rules
   * @return isUsedForPromoRules
   */
  @javax.annotation.Nullable
  public String getIsUsedForPromoRules() {
    return isUsedForPromoRules;
  }

  public void setIsUsedForPromoRules(String isUsedForPromoRules) {
    this.isUsedForPromoRules = isUsedForPromoRules;
  }


  public CatalogDataProductAttributeInterface isUsedInGrid(Boolean isUsedInGrid) {
    this.isUsedInGrid = isUsedInGrid;
    return this;
  }

  /**
   * It is used in catalog product grid
   * @return isUsedInGrid
   */
  @javax.annotation.Nullable
  public Boolean getIsUsedInGrid() {
    return isUsedInGrid;
  }

  public void setIsUsedInGrid(Boolean isUsedInGrid) {
    this.isUsedInGrid = isUsedInGrid;
  }


  public CatalogDataProductAttributeInterface isUserDefined(Boolean isUserDefined) {
    this.isUserDefined = isUserDefined;
    return this;
  }

  /**
   * Current attribute has been defined by a user.
   * @return isUserDefined
   */
  @javax.annotation.Nullable
  public Boolean getIsUserDefined() {
    return isUserDefined;
  }

  public void setIsUserDefined(Boolean isUserDefined) {
    this.isUserDefined = isUserDefined;
  }


  public CatalogDataProductAttributeInterface isVisible(Boolean isVisible) {
    this.isVisible = isVisible;
    return this;
  }

  /**
   * Attribute is visible on frontend.
   * @return isVisible
   */
  @javax.annotation.Nullable
  public Boolean getIsVisible() {
    return isVisible;
  }

  public void setIsVisible(Boolean isVisible) {
    this.isVisible = isVisible;
  }


  public CatalogDataProductAttributeInterface isVisibleInAdvancedSearch(String isVisibleInAdvancedSearch) {
    this.isVisibleInAdvancedSearch = isVisibleInAdvancedSearch;
    return this;
  }

  /**
   * The attribute can be used in Advanced Search
   * @return isVisibleInAdvancedSearch
   */
  @javax.annotation.Nullable
  public String getIsVisibleInAdvancedSearch() {
    return isVisibleInAdvancedSearch;
  }

  public void setIsVisibleInAdvancedSearch(String isVisibleInAdvancedSearch) {
    this.isVisibleInAdvancedSearch = isVisibleInAdvancedSearch;
  }


  public CatalogDataProductAttributeInterface isVisibleInGrid(Boolean isVisibleInGrid) {
    this.isVisibleInGrid = isVisibleInGrid;
    return this;
  }

  /**
   * It is visible in catalog product grid
   * @return isVisibleInGrid
   */
  @javax.annotation.Nullable
  public Boolean getIsVisibleInGrid() {
    return isVisibleInGrid;
  }

  public void setIsVisibleInGrid(Boolean isVisibleInGrid) {
    this.isVisibleInGrid = isVisibleInGrid;
  }


  public CatalogDataProductAttributeInterface isVisibleOnFront(String isVisibleOnFront) {
    this.isVisibleOnFront = isVisibleOnFront;
    return this;
  }

  /**
   * The attribute is visible on the frontend
   * @return isVisibleOnFront
   */
  @javax.annotation.Nullable
  public String getIsVisibleOnFront() {
    return isVisibleOnFront;
  }

  public void setIsVisibleOnFront(String isVisibleOnFront) {
    this.isVisibleOnFront = isVisibleOnFront;
  }


  public CatalogDataProductAttributeInterface isWysiwygEnabled(Boolean isWysiwygEnabled) {
    this.isWysiwygEnabled = isWysiwygEnabled;
    return this;
  }

  /**
   * WYSIWYG flag
   * @return isWysiwygEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsWysiwygEnabled() {
    return isWysiwygEnabled;
  }

  public void setIsWysiwygEnabled(Boolean isWysiwygEnabled) {
    this.isWysiwygEnabled = isWysiwygEnabled;
  }


  public CatalogDataProductAttributeInterface note(String note) {
    this.note = note;
    return this;
  }

  /**
   * The note attribute for the element.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public CatalogDataProductAttributeInterface options(List<EavDataAttributeOptionInterface> options) {
    this.options = options;
    return this;
  }

  public CatalogDataProductAttributeInterface addOptionsItem(EavDataAttributeOptionInterface optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * Options of the attribute (key &#x3D;&gt; value pairs for select)
   * @return options
   */
  @javax.annotation.Nullable
  public List<EavDataAttributeOptionInterface> getOptions() {
    return options;
  }

  public void setOptions(List<EavDataAttributeOptionInterface> options) {
    this.options = options;
  }


  public CatalogDataProductAttributeInterface position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Position
   * @return position
   */
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public CatalogDataProductAttributeInterface scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Attribute scope
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public CatalogDataProductAttributeInterface sourceModel(String sourceModel) {
    this.sourceModel = sourceModel;
    return this;
  }

  /**
   * Source model
   * @return sourceModel
   */
  @javax.annotation.Nullable
  public String getSourceModel() {
    return sourceModel;
  }

  public void setSourceModel(String sourceModel) {
    this.sourceModel = sourceModel;
  }


  public CatalogDataProductAttributeInterface usedForSortBy(Boolean usedForSortBy) {
    this.usedForSortBy = usedForSortBy;
    return this;
  }

  /**
   * It is used for sorting in product listing
   * @return usedForSortBy
   */
  @javax.annotation.Nullable
  public Boolean getUsedForSortBy() {
    return usedForSortBy;
  }

  public void setUsedForSortBy(Boolean usedForSortBy) {
    this.usedForSortBy = usedForSortBy;
  }


  public CatalogDataProductAttributeInterface usedInProductListing(String usedInProductListing) {
    this.usedInProductListing = usedInProductListing;
    return this;
  }

  /**
   * The attribute can be used in product listing
   * @return usedInProductListing
   */
  @javax.annotation.Nullable
  public String getUsedInProductListing() {
    return usedInProductListing;
  }

  public void setUsedInProductListing(String usedInProductListing) {
    this.usedInProductListing = usedInProductListing;
  }


  public CatalogDataProductAttributeInterface validationRules(List<EavDataAttributeValidationRuleInterface> validationRules) {
    this.validationRules = validationRules;
    return this;
  }

  public CatalogDataProductAttributeInterface addValidationRulesItem(EavDataAttributeValidationRuleInterface validationRulesItem) {
    if (this.validationRules == null) {
      this.validationRules = new ArrayList<>();
    }
    this.validationRules.add(validationRulesItem);
    return this;
  }

  /**
   * Validation rules.
   * @return validationRules
   */
  @javax.annotation.Nullable
  public List<EavDataAttributeValidationRuleInterface> getValidationRules() {
    return validationRules;
  }

  public void setValidationRules(List<EavDataAttributeValidationRuleInterface> validationRules) {
    this.validationRules = validationRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataProductAttributeInterface catalogDataProductAttributeInterface = (CatalogDataProductAttributeInterface) o;
    return Objects.equals(this.applyTo, catalogDataProductAttributeInterface.applyTo) &&
        Objects.equals(this.attributeCode, catalogDataProductAttributeInterface.attributeCode) &&
        Objects.equals(this.attributeId, catalogDataProductAttributeInterface.attributeId) &&
        Objects.equals(this.backendModel, catalogDataProductAttributeInterface.backendModel) &&
        Objects.equals(this.backendType, catalogDataProductAttributeInterface.backendType) &&
        Objects.equals(this.customAttributes, catalogDataProductAttributeInterface.customAttributes) &&
        Objects.equals(this.defaultFrontendLabel, catalogDataProductAttributeInterface.defaultFrontendLabel) &&
        Objects.equals(this.defaultValue, catalogDataProductAttributeInterface.defaultValue) &&
        Objects.equals(this.entityTypeId, catalogDataProductAttributeInterface.entityTypeId) &&
        Objects.equals(this.extensionAttributes, catalogDataProductAttributeInterface.extensionAttributes) &&
        Objects.equals(this.frontendClass, catalogDataProductAttributeInterface.frontendClass) &&
        Objects.equals(this.frontendInput, catalogDataProductAttributeInterface.frontendInput) &&
        Objects.equals(this.frontendLabels, catalogDataProductAttributeInterface.frontendLabels) &&
        Objects.equals(this.isComparable, catalogDataProductAttributeInterface.isComparable) &&
        Objects.equals(this.isFilterable, catalogDataProductAttributeInterface.isFilterable) &&
        Objects.equals(this.isFilterableInGrid, catalogDataProductAttributeInterface.isFilterableInGrid) &&
        Objects.equals(this.isFilterableInSearch, catalogDataProductAttributeInterface.isFilterableInSearch) &&
        Objects.equals(this.isHtmlAllowedOnFront, catalogDataProductAttributeInterface.isHtmlAllowedOnFront) &&
        Objects.equals(this.isRequired, catalogDataProductAttributeInterface.isRequired) &&
        Objects.equals(this.isSearchable, catalogDataProductAttributeInterface.isSearchable) &&
        Objects.equals(this.isUnique, catalogDataProductAttributeInterface.isUnique) &&
        Objects.equals(this.isUsedForPromoRules, catalogDataProductAttributeInterface.isUsedForPromoRules) &&
        Objects.equals(this.isUsedInGrid, catalogDataProductAttributeInterface.isUsedInGrid) &&
        Objects.equals(this.isUserDefined, catalogDataProductAttributeInterface.isUserDefined) &&
        Objects.equals(this.isVisible, catalogDataProductAttributeInterface.isVisible) &&
        Objects.equals(this.isVisibleInAdvancedSearch, catalogDataProductAttributeInterface.isVisibleInAdvancedSearch) &&
        Objects.equals(this.isVisibleInGrid, catalogDataProductAttributeInterface.isVisibleInGrid) &&
        Objects.equals(this.isVisibleOnFront, catalogDataProductAttributeInterface.isVisibleOnFront) &&
        Objects.equals(this.isWysiwygEnabled, catalogDataProductAttributeInterface.isWysiwygEnabled) &&
        Objects.equals(this.note, catalogDataProductAttributeInterface.note) &&
        Objects.equals(this.options, catalogDataProductAttributeInterface.options) &&
        Objects.equals(this.position, catalogDataProductAttributeInterface.position) &&
        Objects.equals(this.scope, catalogDataProductAttributeInterface.scope) &&
        Objects.equals(this.sourceModel, catalogDataProductAttributeInterface.sourceModel) &&
        Objects.equals(this.usedForSortBy, catalogDataProductAttributeInterface.usedForSortBy) &&
        Objects.equals(this.usedInProductListing, catalogDataProductAttributeInterface.usedInProductListing) &&
        Objects.equals(this.validationRules, catalogDataProductAttributeInterface.validationRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyTo, attributeCode, attributeId, backendModel, backendType, customAttributes, defaultFrontendLabel, defaultValue, entityTypeId, extensionAttributes, frontendClass, frontendInput, frontendLabels, isComparable, isFilterable, isFilterableInGrid, isFilterableInSearch, isHtmlAllowedOnFront, isRequired, isSearchable, isUnique, isUsedForPromoRules, isUsedInGrid, isUserDefined, isVisible, isVisibleInAdvancedSearch, isVisibleInGrid, isVisibleOnFront, isWysiwygEnabled, note, options, position, scope, sourceModel, usedForSortBy, usedInProductListing, validationRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataProductAttributeInterface {\n");
    sb.append("    applyTo: ").append(toIndentedString(applyTo)).append("\n");
    sb.append("    attributeCode: ").append(toIndentedString(attributeCode)).append("\n");
    sb.append("    attributeId: ").append(toIndentedString(attributeId)).append("\n");
    sb.append("    backendModel: ").append(toIndentedString(backendModel)).append("\n");
    sb.append("    backendType: ").append(toIndentedString(backendType)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    defaultFrontendLabel: ").append(toIndentedString(defaultFrontendLabel)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    entityTypeId: ").append(toIndentedString(entityTypeId)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    frontendClass: ").append(toIndentedString(frontendClass)).append("\n");
    sb.append("    frontendInput: ").append(toIndentedString(frontendInput)).append("\n");
    sb.append("    frontendLabels: ").append(toIndentedString(frontendLabels)).append("\n");
    sb.append("    isComparable: ").append(toIndentedString(isComparable)).append("\n");
    sb.append("    isFilterable: ").append(toIndentedString(isFilterable)).append("\n");
    sb.append("    isFilterableInGrid: ").append(toIndentedString(isFilterableInGrid)).append("\n");
    sb.append("    isFilterableInSearch: ").append(toIndentedString(isFilterableInSearch)).append("\n");
    sb.append("    isHtmlAllowedOnFront: ").append(toIndentedString(isHtmlAllowedOnFront)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    isSearchable: ").append(toIndentedString(isSearchable)).append("\n");
    sb.append("    isUnique: ").append(toIndentedString(isUnique)).append("\n");
    sb.append("    isUsedForPromoRules: ").append(toIndentedString(isUsedForPromoRules)).append("\n");
    sb.append("    isUsedInGrid: ").append(toIndentedString(isUsedInGrid)).append("\n");
    sb.append("    isUserDefined: ").append(toIndentedString(isUserDefined)).append("\n");
    sb.append("    isVisible: ").append(toIndentedString(isVisible)).append("\n");
    sb.append("    isVisibleInAdvancedSearch: ").append(toIndentedString(isVisibleInAdvancedSearch)).append("\n");
    sb.append("    isVisibleInGrid: ").append(toIndentedString(isVisibleInGrid)).append("\n");
    sb.append("    isVisibleOnFront: ").append(toIndentedString(isVisibleOnFront)).append("\n");
    sb.append("    isWysiwygEnabled: ").append(toIndentedString(isWysiwygEnabled)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    sourceModel: ").append(toIndentedString(sourceModel)).append("\n");
    sb.append("    usedForSortBy: ").append(toIndentedString(usedForSortBy)).append("\n");
    sb.append("    usedInProductListing: ").append(toIndentedString(usedInProductListing)).append("\n");
    sb.append("    validationRules: ").append(toIndentedString(validationRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apply_to");
    openapiFields.add("attribute_code");
    openapiFields.add("attribute_id");
    openapiFields.add("backend_model");
    openapiFields.add("backend_type");
    openapiFields.add("custom_attributes");
    openapiFields.add("default_frontend_label");
    openapiFields.add("default_value");
    openapiFields.add("entity_type_id");
    openapiFields.add("extension_attributes");
    openapiFields.add("frontend_class");
    openapiFields.add("frontend_input");
    openapiFields.add("frontend_labels");
    openapiFields.add("is_comparable");
    openapiFields.add("is_filterable");
    openapiFields.add("is_filterable_in_grid");
    openapiFields.add("is_filterable_in_search");
    openapiFields.add("is_html_allowed_on_front");
    openapiFields.add("is_required");
    openapiFields.add("is_searchable");
    openapiFields.add("is_unique");
    openapiFields.add("is_used_for_promo_rules");
    openapiFields.add("is_used_in_grid");
    openapiFields.add("is_user_defined");
    openapiFields.add("is_visible");
    openapiFields.add("is_visible_in_advanced_search");
    openapiFields.add("is_visible_in_grid");
    openapiFields.add("is_visible_on_front");
    openapiFields.add("is_wysiwyg_enabled");
    openapiFields.add("note");
    openapiFields.add("options");
    openapiFields.add("position");
    openapiFields.add("scope");
    openapiFields.add("source_model");
    openapiFields.add("used_for_sort_by");
    openapiFields.add("used_in_product_listing");
    openapiFields.add("validation_rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attribute_code");
    openapiRequiredFields.add("entity_type_id");
    openapiRequiredFields.add("frontend_input");
    openapiRequiredFields.add("frontend_labels");
    openapiRequiredFields.add("is_required");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogDataProductAttributeInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogDataProductAttributeInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogDataProductAttributeInterface is not found in the empty JSON string", CatalogDataProductAttributeInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogDataProductAttributeInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogDataProductAttributeInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogDataProductAttributeInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("apply_to") != null && !jsonObj.get("apply_to").isJsonNull() && !jsonObj.get("apply_to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `apply_to` to be an array in the JSON string but got `%s`", jsonObj.get("apply_to").toString()));
      }
      if (!jsonObj.get("attribute_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute_code").toString()));
      }
      if ((jsonObj.get("backend_model") != null && !jsonObj.get("backend_model").isJsonNull()) && !jsonObj.get("backend_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backend_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backend_model").toString()));
      }
      if ((jsonObj.get("backend_type") != null && !jsonObj.get("backend_type").isJsonNull()) && !jsonObj.get("backend_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backend_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backend_type").toString()));
      }
      if (jsonObj.get("custom_attributes") != null && !jsonObj.get("custom_attributes").isJsonNull()) {
        JsonArray jsonArraycustomAttributes = jsonObj.getAsJsonArray("custom_attributes");
        if (jsonArraycustomAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("custom_attributes").toString()));
          }

          // validate the optional field `custom_attributes` (array)
          for (int i = 0; i < jsonArraycustomAttributes.size(); i++) {
            FrameworkAttributeInterface.validateJsonElement(jsonArraycustomAttributes.get(i));
          };
        }
      }
      if ((jsonObj.get("default_frontend_label") != null && !jsonObj.get("default_frontend_label").isJsonNull()) && !jsonObj.get("default_frontend_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_frontend_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_frontend_label").toString()));
      }
      if ((jsonObj.get("default_value") != null && !jsonObj.get("default_value").isJsonNull()) && !jsonObj.get("default_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_value").toString()));
      }
      if (!jsonObj.get("entity_type_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity_type_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity_type_id").toString()));
      }
      if ((jsonObj.get("frontend_class") != null && !jsonObj.get("frontend_class").isJsonNull()) && !jsonObj.get("frontend_class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frontend_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frontend_class").toString()));
      }
      if (!jsonObj.get("frontend_input").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frontend_input` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frontend_input").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("frontend_labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `frontend_labels` to be an array in the JSON string but got `%s`", jsonObj.get("frontend_labels").toString()));
      }

      JsonArray jsonArrayfrontendLabels = jsonObj.getAsJsonArray("frontend_labels");
      // validate the required field `frontend_labels` (array)
      for (int i = 0; i < jsonArrayfrontendLabels.size(); i++) {
        EavDataAttributeFrontendLabelInterface.validateJsonElement(jsonArrayfrontendLabels.get(i));
      };
      if ((jsonObj.get("is_comparable") != null && !jsonObj.get("is_comparable").isJsonNull()) && !jsonObj.get("is_comparable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_comparable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_comparable").toString()));
      }
      if ((jsonObj.get("is_searchable") != null && !jsonObj.get("is_searchable").isJsonNull()) && !jsonObj.get("is_searchable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_searchable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_searchable").toString()));
      }
      if ((jsonObj.get("is_unique") != null && !jsonObj.get("is_unique").isJsonNull()) && !jsonObj.get("is_unique").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_unique` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_unique").toString()));
      }
      if ((jsonObj.get("is_used_for_promo_rules") != null && !jsonObj.get("is_used_for_promo_rules").isJsonNull()) && !jsonObj.get("is_used_for_promo_rules").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_used_for_promo_rules` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_used_for_promo_rules").toString()));
      }
      if ((jsonObj.get("is_visible_in_advanced_search") != null && !jsonObj.get("is_visible_in_advanced_search").isJsonNull()) && !jsonObj.get("is_visible_in_advanced_search").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_visible_in_advanced_search` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_visible_in_advanced_search").toString()));
      }
      if ((jsonObj.get("is_visible_on_front") != null && !jsonObj.get("is_visible_on_front").isJsonNull()) && !jsonObj.get("is_visible_on_front").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_visible_on_front` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_visible_on_front").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
          }

          // validate the optional field `options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            EavDataAttributeOptionInterface.validateJsonElement(jsonArrayoptions.get(i));
          };
        }
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("source_model") != null && !jsonObj.get("source_model").isJsonNull()) && !jsonObj.get("source_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_model").toString()));
      }
      if ((jsonObj.get("used_in_product_listing") != null && !jsonObj.get("used_in_product_listing").isJsonNull()) && !jsonObj.get("used_in_product_listing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `used_in_product_listing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("used_in_product_listing").toString()));
      }
      if (jsonObj.get("validation_rules") != null && !jsonObj.get("validation_rules").isJsonNull()) {
        JsonArray jsonArrayvalidationRules = jsonObj.getAsJsonArray("validation_rules");
        if (jsonArrayvalidationRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validation_rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validation_rules` to be an array in the JSON string but got `%s`", jsonObj.get("validation_rules").toString()));
          }

          // validate the optional field `validation_rules` (array)
          for (int i = 0; i < jsonArrayvalidationRules.size(); i++) {
            EavDataAttributeValidationRuleInterface.validateJsonElement(jsonArrayvalidationRules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogDataProductAttributeInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogDataProductAttributeInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogDataProductAttributeInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogDataProductAttributeInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogDataProductAttributeInterface>() {
           @Override
           public void write(JsonWriter out, CatalogDataProductAttributeInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogDataProductAttributeInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogDataProductAttributeInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogDataProductAttributeInterface
   * @throws IOException if the JSON string is invalid with respect to CatalogDataProductAttributeInterface
   */
  public static CatalogDataProductAttributeInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogDataProductAttributeInterface.class);
  }

  /**
   * Convert an instance of CatalogDataProductAttributeInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

