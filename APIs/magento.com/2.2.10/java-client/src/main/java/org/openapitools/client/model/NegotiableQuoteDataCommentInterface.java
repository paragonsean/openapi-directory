/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NegotiableQuoteDataCommentAttachmentInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface CommentInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NegotiableQuoteDataCommentInterface {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<NegotiableQuoteDataCommentAttachmentInterface> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CREATOR_ID = "creator_id";
  @SerializedName(SERIALIZED_NAME_CREATOR_ID)
  private Integer creatorId;

  public static final String SERIALIZED_NAME_CREATOR_TYPE = "creator_type";
  @SerializedName(SERIALIZED_NAME_CREATOR_TYPE)
  private Integer creatorType;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private Integer entityId;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_IS_DECLINE = "is_decline";
  @SerializedName(SERIALIZED_NAME_IS_DECLINE)
  private Integer isDecline;

  public static final String SERIALIZED_NAME_IS_DRAFT = "is_draft";
  @SerializedName(SERIALIZED_NAME_IS_DRAFT)
  private Integer isDraft;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private Integer parentId;

  public NegotiableQuoteDataCommentInterface() {
  }

  public NegotiableQuoteDataCommentInterface attachments(List<NegotiableQuoteDataCommentAttachmentInterface> attachments) {
    this.attachments = attachments;
    return this;
  }

  public NegotiableQuoteDataCommentInterface addAttachmentsItem(NegotiableQuoteDataCommentAttachmentInterface attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Existing attachments.
   * @return attachments
   */
  @javax.annotation.Nonnull
  public List<NegotiableQuoteDataCommentAttachmentInterface> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<NegotiableQuoteDataCommentAttachmentInterface> attachments) {
    this.attachments = attachments;
  }


  public NegotiableQuoteDataCommentInterface comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Comment.
   * @return comment
   */
  @javax.annotation.Nonnull
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public NegotiableQuoteDataCommentInterface createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Comment created at.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public NegotiableQuoteDataCommentInterface creatorId(Integer creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  /**
   * Comment creator ID.
   * @return creatorId
   */
  @javax.annotation.Nonnull
  public Integer getCreatorId() {
    return creatorId;
  }

  public void setCreatorId(Integer creatorId) {
    this.creatorId = creatorId;
  }


  public NegotiableQuoteDataCommentInterface creatorType(Integer creatorType) {
    this.creatorType = creatorType;
    return this;
  }

  /**
   * The comment creator type.
   * @return creatorType
   */
  @javax.annotation.Nonnull
  public Integer getCreatorType() {
    return creatorType;
  }

  public void setCreatorType(Integer creatorType) {
    this.creatorType = creatorType;
  }


  public NegotiableQuoteDataCommentInterface entityId(Integer entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Comment ID.
   * @return entityId
   */
  @javax.annotation.Nonnull
  public Integer getEntityId() {
    return entityId;
  }

  public void setEntityId(Integer entityId) {
    this.entityId = entityId;
  }


  public NegotiableQuoteDataCommentInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\CommentInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public NegotiableQuoteDataCommentInterface isDecline(Integer isDecline) {
    this.isDecline = isDecline;
    return this;
  }

  /**
   * Is quote was declined by seller.
   * @return isDecline
   */
  @javax.annotation.Nonnull
  public Integer getIsDecline() {
    return isDecline;
  }

  public void setIsDecline(Integer isDecline) {
    this.isDecline = isDecline;
  }


  public NegotiableQuoteDataCommentInterface isDraft(Integer isDraft) {
    this.isDraft = isDraft;
    return this;
  }

  /**
   * Is quote draft flag.
   * @return isDraft
   */
  @javax.annotation.Nonnull
  public Integer getIsDraft() {
    return isDraft;
  }

  public void setIsDraft(Integer isDraft) {
    this.isDraft = isDraft;
  }


  public NegotiableQuoteDataCommentInterface parentId(Integer parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Negotiable quote ID, that this comment belongs to.
   * @return parentId
   */
  @javax.annotation.Nonnull
  public Integer getParentId() {
    return parentId;
  }

  public void setParentId(Integer parentId) {
    this.parentId = parentId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NegotiableQuoteDataCommentInterface negotiableQuoteDataCommentInterface = (NegotiableQuoteDataCommentInterface) o;
    return Objects.equals(this.attachments, negotiableQuoteDataCommentInterface.attachments) &&
        Objects.equals(this.comment, negotiableQuoteDataCommentInterface.comment) &&
        Objects.equals(this.createdAt, negotiableQuoteDataCommentInterface.createdAt) &&
        Objects.equals(this.creatorId, negotiableQuoteDataCommentInterface.creatorId) &&
        Objects.equals(this.creatorType, negotiableQuoteDataCommentInterface.creatorType) &&
        Objects.equals(this.entityId, negotiableQuoteDataCommentInterface.entityId) &&
        Objects.equals(this.extensionAttributes, negotiableQuoteDataCommentInterface.extensionAttributes) &&
        Objects.equals(this.isDecline, negotiableQuoteDataCommentInterface.isDecline) &&
        Objects.equals(this.isDraft, negotiableQuoteDataCommentInterface.isDraft) &&
        Objects.equals(this.parentId, negotiableQuoteDataCommentInterface.parentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, comment, createdAt, creatorId, creatorType, entityId, extensionAttributes, isDecline, isDraft, parentId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NegotiableQuoteDataCommentInterface {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    creatorType: ").append(toIndentedString(creatorType)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    isDecline: ").append(toIndentedString(isDecline)).append("\n");
    sb.append("    isDraft: ").append(toIndentedString(isDraft)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachments");
    openapiFields.add("comment");
    openapiFields.add("created_at");
    openapiFields.add("creator_id");
    openapiFields.add("creator_type");
    openapiFields.add("entity_id");
    openapiFields.add("extension_attributes");
    openapiFields.add("is_decline");
    openapiFields.add("is_draft");
    openapiFields.add("parent_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attachments");
    openapiRequiredFields.add("comment");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("creator_id");
    openapiRequiredFields.add("creator_type");
    openapiRequiredFields.add("entity_id");
    openapiRequiredFields.add("is_decline");
    openapiRequiredFields.add("is_draft");
    openapiRequiredFields.add("parent_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NegotiableQuoteDataCommentInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NegotiableQuoteDataCommentInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NegotiableQuoteDataCommentInterface is not found in the empty JSON string", NegotiableQuoteDataCommentInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NegotiableQuoteDataCommentInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NegotiableQuoteDataCommentInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NegotiableQuoteDataCommentInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }

      JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
      // validate the required field `attachments` (array)
      for (int i = 0; i < jsonArrayattachments.size(); i++) {
        NegotiableQuoteDataCommentAttachmentInterface.validateJsonElement(jsonArrayattachments.get(i));
      };
      if (!jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NegotiableQuoteDataCommentInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NegotiableQuoteDataCommentInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NegotiableQuoteDataCommentInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NegotiableQuoteDataCommentInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<NegotiableQuoteDataCommentInterface>() {
           @Override
           public void write(JsonWriter out, NegotiableQuoteDataCommentInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NegotiableQuoteDataCommentInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NegotiableQuoteDataCommentInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NegotiableQuoteDataCommentInterface
   * @throws IOException if the JSON string is invalid with respect to NegotiableQuoteDataCommentInterface
   */
  public static NegotiableQuoteDataCommentInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NegotiableQuoteDataCommentInterface.class);
  }

  /**
   * Convert an instance of NegotiableQuoteDataCommentInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

