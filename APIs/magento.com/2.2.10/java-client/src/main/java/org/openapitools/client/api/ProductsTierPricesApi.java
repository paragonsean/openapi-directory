/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CatalogDataPriceUpdateResultInterface;
import org.openapitools.client.model.CatalogTierPriceStorageV1ReplacePutRequest;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsTierPricesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsTierPricesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsTierPricesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for catalogTierPriceStorageV1ReplacePut
     * @param catalogTierPriceStorageV1ReplacePutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogTierPriceStorageV1ReplacePutCall(CatalogTierPriceStorageV1ReplacePutRequest catalogTierPriceStorageV1ReplacePutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogTierPriceStorageV1ReplacePutRequest;

        // create path and map variables
        String localVarPath = "/V1/products/tier-prices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogTierPriceStorageV1ReplacePutValidateBeforeCall(CatalogTierPriceStorageV1ReplacePutRequest catalogTierPriceStorageV1ReplacePutRequest, final ApiCallback _callback) throws ApiException {
        return catalogTierPriceStorageV1ReplacePutCall(catalogTierPriceStorageV1ReplacePutRequest, _callback);

    }

    /**
     * products/tier-prices
     * Remove existing tier prices and replace them with the new ones. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from replace list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     * @param catalogTierPriceStorageV1ReplacePutRequest  (optional)
     * @return List&lt;CatalogDataPriceUpdateResultInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<CatalogDataPriceUpdateResultInterface> catalogTierPriceStorageV1ReplacePut(CatalogTierPriceStorageV1ReplacePutRequest catalogTierPriceStorageV1ReplacePutRequest) throws ApiException {
        ApiResponse<List<CatalogDataPriceUpdateResultInterface>> localVarResp = catalogTierPriceStorageV1ReplacePutWithHttpInfo(catalogTierPriceStorageV1ReplacePutRequest);
        return localVarResp.getData();
    }

    /**
     * products/tier-prices
     * Remove existing tier prices and replace them with the new ones. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from replace list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     * @param catalogTierPriceStorageV1ReplacePutRequest  (optional)
     * @return ApiResponse&lt;List&lt;CatalogDataPriceUpdateResultInterface&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CatalogDataPriceUpdateResultInterface>> catalogTierPriceStorageV1ReplacePutWithHttpInfo(CatalogTierPriceStorageV1ReplacePutRequest catalogTierPriceStorageV1ReplacePutRequest) throws ApiException {
        okhttp3.Call localVarCall = catalogTierPriceStorageV1ReplacePutValidateBeforeCall(catalogTierPriceStorageV1ReplacePutRequest, null);
        Type localVarReturnType = new TypeToken<List<CatalogDataPriceUpdateResultInterface>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * products/tier-prices (asynchronously)
     * Remove existing tier prices and replace them with the new ones. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from replace list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     * @param catalogTierPriceStorageV1ReplacePutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogTierPriceStorageV1ReplacePutAsync(CatalogTierPriceStorageV1ReplacePutRequest catalogTierPriceStorageV1ReplacePutRequest, final ApiCallback<List<CatalogDataPriceUpdateResultInterface>> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogTierPriceStorageV1ReplacePutValidateBeforeCall(catalogTierPriceStorageV1ReplacePutRequest, _callback);
        Type localVarReturnType = new TypeToken<List<CatalogDataPriceUpdateResultInterface>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for catalogTierPriceStorageV1UpdatePost
     * @param catalogTierPriceStorageV1ReplacePutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogTierPriceStorageV1UpdatePostCall(CatalogTierPriceStorageV1ReplacePutRequest catalogTierPriceStorageV1ReplacePutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = catalogTierPriceStorageV1ReplacePutRequest;

        // create path and map variables
        String localVarPath = "/V1/products/tier-prices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call catalogTierPriceStorageV1UpdatePostValidateBeforeCall(CatalogTierPriceStorageV1ReplacePutRequest catalogTierPriceStorageV1ReplacePutRequest, final ApiCallback _callback) throws ApiException {
        return catalogTierPriceStorageV1UpdatePostCall(catalogTierPriceStorageV1ReplacePutRequest, _callback);

    }

    /**
     * products/tier-prices
     * Add or update product prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     * @param catalogTierPriceStorageV1ReplacePutRequest  (optional)
     * @return List&lt;CatalogDataPriceUpdateResultInterface&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public List<CatalogDataPriceUpdateResultInterface> catalogTierPriceStorageV1UpdatePost(CatalogTierPriceStorageV1ReplacePutRequest catalogTierPriceStorageV1ReplacePutRequest) throws ApiException {
        ApiResponse<List<CatalogDataPriceUpdateResultInterface>> localVarResp = catalogTierPriceStorageV1UpdatePostWithHttpInfo(catalogTierPriceStorageV1ReplacePutRequest);
        return localVarResp.getData();
    }

    /**
     * products/tier-prices
     * Add or update product prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     * @param catalogTierPriceStorageV1ReplacePutRequest  (optional)
     * @return ApiResponse&lt;List&lt;CatalogDataPriceUpdateResultInterface&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CatalogDataPriceUpdateResultInterface>> catalogTierPriceStorageV1UpdatePostWithHttpInfo(CatalogTierPriceStorageV1ReplacePutRequest catalogTierPriceStorageV1ReplacePutRequest) throws ApiException {
        okhttp3.Call localVarCall = catalogTierPriceStorageV1UpdatePostValidateBeforeCall(catalogTierPriceStorageV1ReplacePutRequest, null);
        Type localVarReturnType = new TypeToken<List<CatalogDataPriceUpdateResultInterface>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * products/tier-prices (asynchronously)
     * Add or update product prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.
     * @param catalogTierPriceStorageV1ReplacePutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call catalogTierPriceStorageV1UpdatePostAsync(CatalogTierPriceStorageV1ReplacePutRequest catalogTierPriceStorageV1ReplacePutRequest, final ApiCallback<List<CatalogDataPriceUpdateResultInterface>> _callback) throws ApiException {

        okhttp3.Call localVarCall = catalogTierPriceStorageV1UpdatePostValidateBeforeCall(catalogTierPriceStorageV1ReplacePutRequest, _callback);
        Type localVarReturnType = new TypeToken<List<CatalogDataPriceUpdateResultInterface>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
