/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FrameworkAttributeInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogDataCategoryInterface {
  public static final String SERIALIZED_NAME_AVAILABLE_SORT_BY = "available_sort_by";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_SORT_BY)
  private List<String> availableSortBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private String children;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "custom_attributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private List<FrameworkAttributeInterface> customAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INCLUDE_IN_MENU = "include_in_menu";
  @SerializedName(SERIALIZED_NAME_INCLUDE_IN_MENU)
  private Boolean includeInMenu;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private Integer parentId;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public CatalogDataCategoryInterface() {
  }

  public CatalogDataCategoryInterface availableSortBy(List<String> availableSortBy) {
    this.availableSortBy = availableSortBy;
    return this;
  }

  public CatalogDataCategoryInterface addAvailableSortByItem(String availableSortByItem) {
    if (this.availableSortBy == null) {
      this.availableSortBy = new ArrayList<>();
    }
    this.availableSortBy.add(availableSortByItem);
    return this;
  }

  /**
   * Get availableSortBy
   * @return availableSortBy
   */
  @javax.annotation.Nullable
  public List<String> getAvailableSortBy() {
    return availableSortBy;
  }

  public void setAvailableSortBy(List<String> availableSortBy) {
    this.availableSortBy = availableSortBy;
  }


  public CatalogDataCategoryInterface children(String children) {
    this.children = children;
    return this;
  }

  /**
   * Get children
   * @return children
   */
  @javax.annotation.Nullable
  public String getChildren() {
    return children;
  }

  public void setChildren(String children) {
    this.children = children;
  }


  public CatalogDataCategoryInterface createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public CatalogDataCategoryInterface customAttributes(List<FrameworkAttributeInterface> customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  public CatalogDataCategoryInterface addCustomAttributesItem(FrameworkAttributeInterface customAttributesItem) {
    if (this.customAttributes == null) {
      this.customAttributes = new ArrayList<>();
    }
    this.customAttributes.add(customAttributesItem);
    return this;
  }

  /**
   * Custom attributes values.
   * @return customAttributes
   */
  @javax.annotation.Nullable
  public List<FrameworkAttributeInterface> getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(List<FrameworkAttributeInterface> customAttributes) {
    this.customAttributes = customAttributes;
  }


  public CatalogDataCategoryInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CategoryInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public CatalogDataCategoryInterface id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CatalogDataCategoryInterface includeInMenu(Boolean includeInMenu) {
    this.includeInMenu = includeInMenu;
    return this;
  }

  /**
   * Get includeInMenu
   * @return includeInMenu
   */
  @javax.annotation.Nullable
  public Boolean getIncludeInMenu() {
    return includeInMenu;
  }

  public void setIncludeInMenu(Boolean includeInMenu) {
    this.includeInMenu = includeInMenu;
  }


  public CatalogDataCategoryInterface isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Whether category is active
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public CatalogDataCategoryInterface level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Category level
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public CatalogDataCategoryInterface name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Category name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CatalogDataCategoryInterface parentId(Integer parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Parent category ID
   * @return parentId
   */
  @javax.annotation.Nullable
  public Integer getParentId() {
    return parentId;
  }

  public void setParentId(Integer parentId) {
    this.parentId = parentId;
  }


  public CatalogDataCategoryInterface path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public CatalogDataCategoryInterface position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Category position
   * @return position
   */
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public CatalogDataCategoryInterface updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataCategoryInterface catalogDataCategoryInterface = (CatalogDataCategoryInterface) o;
    return Objects.equals(this.availableSortBy, catalogDataCategoryInterface.availableSortBy) &&
        Objects.equals(this.children, catalogDataCategoryInterface.children) &&
        Objects.equals(this.createdAt, catalogDataCategoryInterface.createdAt) &&
        Objects.equals(this.customAttributes, catalogDataCategoryInterface.customAttributes) &&
        Objects.equals(this.extensionAttributes, catalogDataCategoryInterface.extensionAttributes) &&
        Objects.equals(this.id, catalogDataCategoryInterface.id) &&
        Objects.equals(this.includeInMenu, catalogDataCategoryInterface.includeInMenu) &&
        Objects.equals(this.isActive, catalogDataCategoryInterface.isActive) &&
        Objects.equals(this.level, catalogDataCategoryInterface.level) &&
        Objects.equals(this.name, catalogDataCategoryInterface.name) &&
        Objects.equals(this.parentId, catalogDataCategoryInterface.parentId) &&
        Objects.equals(this.path, catalogDataCategoryInterface.path) &&
        Objects.equals(this.position, catalogDataCategoryInterface.position) &&
        Objects.equals(this.updatedAt, catalogDataCategoryInterface.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableSortBy, children, createdAt, customAttributes, extensionAttributes, id, includeInMenu, isActive, level, name, parentId, path, position, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataCategoryInterface {\n");
    sb.append("    availableSortBy: ").append(toIndentedString(availableSortBy)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    includeInMenu: ").append(toIndentedString(includeInMenu)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available_sort_by");
    openapiFields.add("children");
    openapiFields.add("created_at");
    openapiFields.add("custom_attributes");
    openapiFields.add("extension_attributes");
    openapiFields.add("id");
    openapiFields.add("include_in_menu");
    openapiFields.add("is_active");
    openapiFields.add("level");
    openapiFields.add("name");
    openapiFields.add("parent_id");
    openapiFields.add("path");
    openapiFields.add("position");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogDataCategoryInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogDataCategoryInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogDataCategoryInterface is not found in the empty JSON string", CatalogDataCategoryInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogDataCategoryInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogDataCategoryInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("available_sort_by") != null && !jsonObj.get("available_sort_by").isJsonNull() && !jsonObj.get("available_sort_by").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_sort_by` to be an array in the JSON string but got `%s`", jsonObj.get("available_sort_by").toString()));
      }
      if ((jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull()) && !jsonObj.get("children").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `children` to be a primitive type in the JSON string but got `%s`", jsonObj.get("children").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (jsonObj.get("custom_attributes") != null && !jsonObj.get("custom_attributes").isJsonNull()) {
        JsonArray jsonArraycustomAttributes = jsonObj.getAsJsonArray("custom_attributes");
        if (jsonArraycustomAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("custom_attributes").toString()));
          }

          // validate the optional field `custom_attributes` (array)
          for (int i = 0; i < jsonArraycustomAttributes.size(); i++) {
            FrameworkAttributeInterface.validateJsonElement(jsonArraycustomAttributes.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogDataCategoryInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogDataCategoryInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogDataCategoryInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogDataCategoryInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogDataCategoryInterface>() {
           @Override
           public void write(JsonWriter out, CatalogDataCategoryInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogDataCategoryInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogDataCategoryInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogDataCategoryInterface
   * @throws IOException if the JSON string is invalid with respect to CatalogDataCategoryInterface
   */
  public static CatalogDataCategoryInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogDataCategoryInterface.class);
  }

  /**
   * Convert an instance of CatalogDataCategoryInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

