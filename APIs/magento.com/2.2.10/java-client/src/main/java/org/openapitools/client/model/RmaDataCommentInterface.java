/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FrameworkAttributeInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface CommentInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RmaDataCommentInterface {
  public static final String SERIALIZED_NAME_ADMIN = "admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private Boolean admin;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "custom_attributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private List<FrameworkAttributeInterface> customAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER_NOTIFIED = "customer_notified";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NOTIFIED)
  private Boolean customerNotified;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private Integer entityId;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_RMA_ENTITY_ID = "rma_entity_id";
  @SerializedName(SERIALIZED_NAME_RMA_ENTITY_ID)
  private Integer rmaEntityId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_VISIBLE_ON_FRONT = "visible_on_front";
  @SerializedName(SERIALIZED_NAME_VISIBLE_ON_FRONT)
  private Boolean visibleOnFront;

  public RmaDataCommentInterface() {
  }

  public RmaDataCommentInterface admin(Boolean admin) {
    this.admin = admin;
    return this;
  }

  /**
   * Is_admin
   * @return admin
   */
  @javax.annotation.Nonnull
  public Boolean getAdmin() {
    return admin;
  }

  public void setAdmin(Boolean admin) {
    this.admin = admin;
  }


  public RmaDataCommentInterface comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Comment
   * @return comment
   */
  @javax.annotation.Nonnull
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public RmaDataCommentInterface createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created_at
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public RmaDataCommentInterface customAttributes(List<FrameworkAttributeInterface> customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  public RmaDataCommentInterface addCustomAttributesItem(FrameworkAttributeInterface customAttributesItem) {
    if (this.customAttributes == null) {
      this.customAttributes = new ArrayList<>();
    }
    this.customAttributes.add(customAttributesItem);
    return this;
  }

  /**
   * Custom attributes values.
   * @return customAttributes
   */
  @javax.annotation.Nullable
  public List<FrameworkAttributeInterface> getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(List<FrameworkAttributeInterface> customAttributes) {
    this.customAttributes = customAttributes;
  }


  public RmaDataCommentInterface customerNotified(Boolean customerNotified) {
    this.customerNotified = customerNotified;
    return this;
  }

  /**
   * Is_customer_notified
   * @return customerNotified
   */
  @javax.annotation.Nonnull
  public Boolean getCustomerNotified() {
    return customerNotified;
  }

  public void setCustomerNotified(Boolean customerNotified) {
    this.customerNotified = customerNotified;
  }


  public RmaDataCommentInterface entityId(Integer entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Entity_id
   * @return entityId
   */
  @javax.annotation.Nonnull
  public Integer getEntityId() {
    return entityId;
  }

  public void setEntityId(Integer entityId) {
    this.entityId = entityId;
  }


  public RmaDataCommentInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\CommentInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public RmaDataCommentInterface rmaEntityId(Integer rmaEntityId) {
    this.rmaEntityId = rmaEntityId;
    return this;
  }

  /**
   * Rma Id
   * @return rmaEntityId
   */
  @javax.annotation.Nonnull
  public Integer getRmaEntityId() {
    return rmaEntityId;
  }

  public void setRmaEntityId(Integer rmaEntityId) {
    this.rmaEntityId = rmaEntityId;
  }


  public RmaDataCommentInterface status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public RmaDataCommentInterface visibleOnFront(Boolean visibleOnFront) {
    this.visibleOnFront = visibleOnFront;
    return this;
  }

  /**
   * Is_visible_on_front
   * @return visibleOnFront
   */
  @javax.annotation.Nonnull
  public Boolean getVisibleOnFront() {
    return visibleOnFront;
  }

  public void setVisibleOnFront(Boolean visibleOnFront) {
    this.visibleOnFront = visibleOnFront;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RmaDataCommentInterface rmaDataCommentInterface = (RmaDataCommentInterface) o;
    return Objects.equals(this.admin, rmaDataCommentInterface.admin) &&
        Objects.equals(this.comment, rmaDataCommentInterface.comment) &&
        Objects.equals(this.createdAt, rmaDataCommentInterface.createdAt) &&
        Objects.equals(this.customAttributes, rmaDataCommentInterface.customAttributes) &&
        Objects.equals(this.customerNotified, rmaDataCommentInterface.customerNotified) &&
        Objects.equals(this.entityId, rmaDataCommentInterface.entityId) &&
        Objects.equals(this.extensionAttributes, rmaDataCommentInterface.extensionAttributes) &&
        Objects.equals(this.rmaEntityId, rmaDataCommentInterface.rmaEntityId) &&
        Objects.equals(this.status, rmaDataCommentInterface.status) &&
        Objects.equals(this.visibleOnFront, rmaDataCommentInterface.visibleOnFront);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admin, comment, createdAt, customAttributes, customerNotified, entityId, extensionAttributes, rmaEntityId, status, visibleOnFront);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RmaDataCommentInterface {\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    customerNotified: ").append(toIndentedString(customerNotified)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    rmaEntityId: ").append(toIndentedString(rmaEntityId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    visibleOnFront: ").append(toIndentedString(visibleOnFront)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin");
    openapiFields.add("comment");
    openapiFields.add("created_at");
    openapiFields.add("custom_attributes");
    openapiFields.add("customer_notified");
    openapiFields.add("entity_id");
    openapiFields.add("extension_attributes");
    openapiFields.add("rma_entity_id");
    openapiFields.add("status");
    openapiFields.add("visible_on_front");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("admin");
    openapiRequiredFields.add("comment");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("customer_notified");
    openapiRequiredFields.add("entity_id");
    openapiRequiredFields.add("rma_entity_id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("visible_on_front");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RmaDataCommentInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RmaDataCommentInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RmaDataCommentInterface is not found in the empty JSON string", RmaDataCommentInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RmaDataCommentInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RmaDataCommentInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RmaDataCommentInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (jsonObj.get("custom_attributes") != null && !jsonObj.get("custom_attributes").isJsonNull()) {
        JsonArray jsonArraycustomAttributes = jsonObj.getAsJsonArray("custom_attributes");
        if (jsonArraycustomAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("custom_attributes").toString()));
          }

          // validate the optional field `custom_attributes` (array)
          for (int i = 0; i < jsonArraycustomAttributes.size(); i++) {
            FrameworkAttributeInterface.validateJsonElement(jsonArraycustomAttributes.get(i));
          };
        }
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RmaDataCommentInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RmaDataCommentInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RmaDataCommentInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RmaDataCommentInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<RmaDataCommentInterface>() {
           @Override
           public void write(JsonWriter out, RmaDataCommentInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RmaDataCommentInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RmaDataCommentInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RmaDataCommentInterface
   * @throws IOException if the JSON string is invalid with respect to RmaDataCommentInterface
   */
  public static RmaDataCommentInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RmaDataCommentInterface.class);
  }

  /**
   * Convert an instance of RmaDataCommentInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

