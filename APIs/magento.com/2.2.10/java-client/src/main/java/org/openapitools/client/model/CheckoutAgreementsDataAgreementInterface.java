/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface AgreementInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckoutAgreementsDataAgreementInterface {
  public static final String SERIALIZED_NAME_AGREEMENT_ID = "agreement_id";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_ID)
  private Integer agreementId;

  public static final String SERIALIZED_NAME_CHECKBOX_TEXT = "checkbox_text";
  @SerializedName(SERIALIZED_NAME_CHECKBOX_TEXT)
  private String checkboxText;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CONTENT_HEIGHT = "content_height";
  @SerializedName(SERIALIZED_NAME_CONTENT_HEIGHT)
  private String contentHeight;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_HTML = "is_html";
  @SerializedName(SERIALIZED_NAME_IS_HTML)
  private Boolean isHtml;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private Integer mode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public CheckoutAgreementsDataAgreementInterface() {
  }

  public CheckoutAgreementsDataAgreementInterface agreementId(Integer agreementId) {
    this.agreementId = agreementId;
    return this;
  }

  /**
   * Agreement ID.
   * @return agreementId
   */
  @javax.annotation.Nonnull
  public Integer getAgreementId() {
    return agreementId;
  }

  public void setAgreementId(Integer agreementId) {
    this.agreementId = agreementId;
  }


  public CheckoutAgreementsDataAgreementInterface checkboxText(String checkboxText) {
    this.checkboxText = checkboxText;
    return this;
  }

  /**
   * Agreement checkbox text.
   * @return checkboxText
   */
  @javax.annotation.Nonnull
  public String getCheckboxText() {
    return checkboxText;
  }

  public void setCheckboxText(String checkboxText) {
    this.checkboxText = checkboxText;
  }


  public CheckoutAgreementsDataAgreementInterface content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Agreement content.
   * @return content
   */
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public CheckoutAgreementsDataAgreementInterface contentHeight(String contentHeight) {
    this.contentHeight = contentHeight;
    return this;
  }

  /**
   * Agreement content height. Otherwise, null.
   * @return contentHeight
   */
  @javax.annotation.Nullable
  public String getContentHeight() {
    return contentHeight;
  }

  public void setContentHeight(String contentHeight) {
    this.contentHeight = contentHeight;
  }


  public CheckoutAgreementsDataAgreementInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\CheckoutAgreements\\Api\\Data\\AgreementInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public CheckoutAgreementsDataAgreementInterface isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Agreement status.
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public CheckoutAgreementsDataAgreementInterface isHtml(Boolean isHtml) {
    this.isHtml = isHtml;
    return this;
  }

  /**
   * * true - HTML. * false - plain text.
   * @return isHtml
   */
  @javax.annotation.Nonnull
  public Boolean getIsHtml() {
    return isHtml;
  }

  public void setIsHtml(Boolean isHtml) {
    this.isHtml = isHtml;
  }


  public CheckoutAgreementsDataAgreementInterface mode(Integer mode) {
    this.mode = mode;
    return this;
  }

  /**
   * The agreement applied mode.
   * @return mode
   */
  @javax.annotation.Nonnull
  public Integer getMode() {
    return mode;
  }

  public void setMode(Integer mode) {
    this.mode = mode;
  }


  public CheckoutAgreementsDataAgreementInterface name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Agreement name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutAgreementsDataAgreementInterface checkoutAgreementsDataAgreementInterface = (CheckoutAgreementsDataAgreementInterface) o;
    return Objects.equals(this.agreementId, checkoutAgreementsDataAgreementInterface.agreementId) &&
        Objects.equals(this.checkboxText, checkoutAgreementsDataAgreementInterface.checkboxText) &&
        Objects.equals(this.content, checkoutAgreementsDataAgreementInterface.content) &&
        Objects.equals(this.contentHeight, checkoutAgreementsDataAgreementInterface.contentHeight) &&
        Objects.equals(this.extensionAttributes, checkoutAgreementsDataAgreementInterface.extensionAttributes) &&
        Objects.equals(this.isActive, checkoutAgreementsDataAgreementInterface.isActive) &&
        Objects.equals(this.isHtml, checkoutAgreementsDataAgreementInterface.isHtml) &&
        Objects.equals(this.mode, checkoutAgreementsDataAgreementInterface.mode) &&
        Objects.equals(this.name, checkoutAgreementsDataAgreementInterface.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agreementId, checkboxText, content, contentHeight, extensionAttributes, isActive, isHtml, mode, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutAgreementsDataAgreementInterface {\n");
    sb.append("    agreementId: ").append(toIndentedString(agreementId)).append("\n");
    sb.append("    checkboxText: ").append(toIndentedString(checkboxText)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentHeight: ").append(toIndentedString(contentHeight)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isHtml: ").append(toIndentedString(isHtml)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agreement_id");
    openapiFields.add("checkbox_text");
    openapiFields.add("content");
    openapiFields.add("content_height");
    openapiFields.add("extension_attributes");
    openapiFields.add("is_active");
    openapiFields.add("is_html");
    openapiFields.add("mode");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("agreement_id");
    openapiRequiredFields.add("checkbox_text");
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("is_active");
    openapiRequiredFields.add("is_html");
    openapiRequiredFields.add("mode");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckoutAgreementsDataAgreementInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutAgreementsDataAgreementInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutAgreementsDataAgreementInterface is not found in the empty JSON string", CheckoutAgreementsDataAgreementInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckoutAgreementsDataAgreementInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutAgreementsDataAgreementInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckoutAgreementsDataAgreementInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("checkbox_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkbox_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkbox_text").toString()));
      }
      if (!jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("content_height") != null && !jsonObj.get("content_height").isJsonNull()) && !jsonObj.get("content_height").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_height` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_height").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutAgreementsDataAgreementInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutAgreementsDataAgreementInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutAgreementsDataAgreementInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutAgreementsDataAgreementInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutAgreementsDataAgreementInterface>() {
           @Override
           public void write(JsonWriter out, CheckoutAgreementsDataAgreementInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutAgreementsDataAgreementInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckoutAgreementsDataAgreementInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckoutAgreementsDataAgreementInterface
   * @throws IOException if the JSON string is invalid with respect to CheckoutAgreementsDataAgreementInterface
   */
  public static CheckoutAgreementsDataAgreementInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutAgreementsDataAgreementInterface.class);
  }

  /**
   * Convert an instance of CheckoutAgreementsDataAgreementInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

