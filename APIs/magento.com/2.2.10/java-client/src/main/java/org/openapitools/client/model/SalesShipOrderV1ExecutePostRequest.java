/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SalesDataShipmentCommentCreationInterface;
import org.openapitools.client.model.SalesDataShipmentCreationArgumentsInterface;
import org.openapitools.client.model.SalesDataShipmentItemCreationInterface;
import org.openapitools.client.model.SalesDataShipmentPackageCreationInterface;
import org.openapitools.client.model.SalesDataShipmentTrackCreationInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SalesShipOrderV1ExecutePostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesShipOrderV1ExecutePostRequest {
  public static final String SERIALIZED_NAME_APPEND_COMMENT = "appendComment";
  @SerializedName(SERIALIZED_NAME_APPEND_COMMENT)
  private Boolean appendComment;

  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private SalesDataShipmentCreationArgumentsInterface arguments;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private SalesDataShipmentCommentCreationInterface comment;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<SalesDataShipmentItemCreationInterface> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFY = "notify";
  @SerializedName(SERIALIZED_NAME_NOTIFY)
  private Boolean notify;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<SalesDataShipmentPackageCreationInterface> packages = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private List<SalesDataShipmentTrackCreationInterface> tracks = new ArrayList<>();

  public SalesShipOrderV1ExecutePostRequest() {
  }

  public SalesShipOrderV1ExecutePostRequest appendComment(Boolean appendComment) {
    this.appendComment = appendComment;
    return this;
  }

  /**
   * Get appendComment
   * @return appendComment
   */
  @javax.annotation.Nullable
  public Boolean getAppendComment() {
    return appendComment;
  }

  public void setAppendComment(Boolean appendComment) {
    this.appendComment = appendComment;
  }


  public SalesShipOrderV1ExecutePostRequest arguments(SalesDataShipmentCreationArgumentsInterface arguments) {
    this.arguments = arguments;
    return this;
  }

  /**
   * Get arguments
   * @return arguments
   */
  @javax.annotation.Nullable
  public SalesDataShipmentCreationArgumentsInterface getArguments() {
    return arguments;
  }

  public void setArguments(SalesDataShipmentCreationArgumentsInterface arguments) {
    this.arguments = arguments;
  }


  public SalesShipOrderV1ExecutePostRequest comment(SalesDataShipmentCommentCreationInterface comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public SalesDataShipmentCommentCreationInterface getComment() {
    return comment;
  }

  public void setComment(SalesDataShipmentCommentCreationInterface comment) {
    this.comment = comment;
  }


  public SalesShipOrderV1ExecutePostRequest items(List<SalesDataShipmentItemCreationInterface> items) {
    this.items = items;
    return this;
  }

  public SalesShipOrderV1ExecutePostRequest addItemsItem(SalesDataShipmentItemCreationInterface itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List<SalesDataShipmentItemCreationInterface> getItems() {
    return items;
  }

  public void setItems(List<SalesDataShipmentItemCreationInterface> items) {
    this.items = items;
  }


  public SalesShipOrderV1ExecutePostRequest notify(Boolean notify) {
    this.notify = notify;
    return this;
  }

  /**
   * Get notify
   * @return notify
   */
  @javax.annotation.Nullable
  public Boolean getNotify() {
    return notify;
  }

  public void setNotify(Boolean notify) {
    this.notify = notify;
  }


  public SalesShipOrderV1ExecutePostRequest packages(List<SalesDataShipmentPackageCreationInterface> packages) {
    this.packages = packages;
    return this;
  }

  public SalesShipOrderV1ExecutePostRequest addPackagesItem(SalesDataShipmentPackageCreationInterface packagesItem) {
    if (this.packages == null) {
      this.packages = new ArrayList<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

  /**
   * Get packages
   * @return packages
   */
  @javax.annotation.Nullable
  public List<SalesDataShipmentPackageCreationInterface> getPackages() {
    return packages;
  }

  public void setPackages(List<SalesDataShipmentPackageCreationInterface> packages) {
    this.packages = packages;
  }


  public SalesShipOrderV1ExecutePostRequest tracks(List<SalesDataShipmentTrackCreationInterface> tracks) {
    this.tracks = tracks;
    return this;
  }

  public SalesShipOrderV1ExecutePostRequest addTracksItem(SalesDataShipmentTrackCreationInterface tracksItem) {
    if (this.tracks == null) {
      this.tracks = new ArrayList<>();
    }
    this.tracks.add(tracksItem);
    return this;
  }

  /**
   * Get tracks
   * @return tracks
   */
  @javax.annotation.Nullable
  public List<SalesDataShipmentTrackCreationInterface> getTracks() {
    return tracks;
  }

  public void setTracks(List<SalesDataShipmentTrackCreationInterface> tracks) {
    this.tracks = tracks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesShipOrderV1ExecutePostRequest salesShipOrderV1ExecutePostRequest = (SalesShipOrderV1ExecutePostRequest) o;
    return Objects.equals(this.appendComment, salesShipOrderV1ExecutePostRequest.appendComment) &&
        Objects.equals(this.arguments, salesShipOrderV1ExecutePostRequest.arguments) &&
        Objects.equals(this.comment, salesShipOrderV1ExecutePostRequest.comment) &&
        Objects.equals(this.items, salesShipOrderV1ExecutePostRequest.items) &&
        Objects.equals(this.notify, salesShipOrderV1ExecutePostRequest.notify) &&
        Objects.equals(this.packages, salesShipOrderV1ExecutePostRequest.packages) &&
        Objects.equals(this.tracks, salesShipOrderV1ExecutePostRequest.tracks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appendComment, arguments, comment, items, notify, packages, tracks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesShipOrderV1ExecutePostRequest {\n");
    sb.append("    appendComment: ").append(toIndentedString(appendComment)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    notify: ").append(toIndentedString(notify)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appendComment");
    openapiFields.add("arguments");
    openapiFields.add("comment");
    openapiFields.add("items");
    openapiFields.add("notify");
    openapiFields.add("packages");
    openapiFields.add("tracks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesShipOrderV1ExecutePostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesShipOrderV1ExecutePostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesShipOrderV1ExecutePostRequest is not found in the empty JSON string", SalesShipOrderV1ExecutePostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesShipOrderV1ExecutePostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesShipOrderV1ExecutePostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arguments`
      if (jsonObj.get("arguments") != null && !jsonObj.get("arguments").isJsonNull()) {
        SalesDataShipmentCreationArgumentsInterface.validateJsonElement(jsonObj.get("arguments"));
      }
      // validate the optional field `comment`
      if (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) {
        SalesDataShipmentCommentCreationInterface.validateJsonElement(jsonObj.get("comment"));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            SalesDataShipmentItemCreationInterface.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull()) {
        JsonArray jsonArraypackages = jsonObj.getAsJsonArray("packages");
        if (jsonArraypackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
          }

          // validate the optional field `packages` (array)
          for (int i = 0; i < jsonArraypackages.size(); i++) {
            SalesDataShipmentPackageCreationInterface.validateJsonElement(jsonArraypackages.get(i));
          };
        }
      }
      if (jsonObj.get("tracks") != null && !jsonObj.get("tracks").isJsonNull()) {
        JsonArray jsonArraytracks = jsonObj.getAsJsonArray("tracks");
        if (jsonArraytracks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracks` to be an array in the JSON string but got `%s`", jsonObj.get("tracks").toString()));
          }

          // validate the optional field `tracks` (array)
          for (int i = 0; i < jsonArraytracks.size(); i++) {
            SalesDataShipmentTrackCreationInterface.validateJsonElement(jsonArraytracks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesShipOrderV1ExecutePostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesShipOrderV1ExecutePostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesShipOrderV1ExecutePostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesShipOrderV1ExecutePostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesShipOrderV1ExecutePostRequest>() {
           @Override
           public void write(JsonWriter out, SalesShipOrderV1ExecutePostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesShipOrderV1ExecutePostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesShipOrderV1ExecutePostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesShipOrderV1ExecutePostRequest
   * @throws IOException if the JSON string is invalid with respect to SalesShipOrderV1ExecutePostRequest
   */
  public static SalesShipOrderV1ExecutePostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesShipOrderV1ExecutePostRequest.class);
  }

  /**
   * Convert an instance of SalesShipOrderV1ExecutePostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

