/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DirectoryDataExchangeRateInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Currency Information interface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DirectoryDataCurrencyInformationInterface {
  public static final String SERIALIZED_NAME_AVAILABLE_CURRENCY_CODES = "available_currency_codes";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_CURRENCY_CODES)
  private List<String> availableCurrencyCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE_CURRENCY_CODE = "base_currency_code";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY_CODE)
  private String baseCurrencyCode;

  public static final String SERIALIZED_NAME_BASE_CURRENCY_SYMBOL = "base_currency_symbol";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY_SYMBOL)
  private String baseCurrencySymbol;

  public static final String SERIALIZED_NAME_DEFAULT_DISPLAY_CURRENCY_CODE = "default_display_currency_code";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DISPLAY_CURRENCY_CODE)
  private String defaultDisplayCurrencyCode;

  public static final String SERIALIZED_NAME_DEFAULT_DISPLAY_CURRENCY_SYMBOL = "default_display_currency_symbol";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DISPLAY_CURRENCY_SYMBOL)
  private String defaultDisplayCurrencySymbol;

  public static final String SERIALIZED_NAME_EXCHANGE_RATES = "exchange_rates";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATES)
  private List<DirectoryDataExchangeRateInterface> exchangeRates = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public DirectoryDataCurrencyInformationInterface() {
  }

  public DirectoryDataCurrencyInformationInterface availableCurrencyCodes(List<String> availableCurrencyCodes) {
    this.availableCurrencyCodes = availableCurrencyCodes;
    return this;
  }

  public DirectoryDataCurrencyInformationInterface addAvailableCurrencyCodesItem(String availableCurrencyCodesItem) {
    if (this.availableCurrencyCodes == null) {
      this.availableCurrencyCodes = new ArrayList<>();
    }
    this.availableCurrencyCodes.add(availableCurrencyCodesItem);
    return this;
  }

  /**
   * The list of allowed currency codes for the store.
   * @return availableCurrencyCodes
   */
  @javax.annotation.Nonnull
  public List<String> getAvailableCurrencyCodes() {
    return availableCurrencyCodes;
  }

  public void setAvailableCurrencyCodes(List<String> availableCurrencyCodes) {
    this.availableCurrencyCodes = availableCurrencyCodes;
  }


  public DirectoryDataCurrencyInformationInterface baseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
    return this;
  }

  /**
   * The base currency code for the store.
   * @return baseCurrencyCode
   */
  @javax.annotation.Nonnull
  public String getBaseCurrencyCode() {
    return baseCurrencyCode;
  }

  public void setBaseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
  }


  public DirectoryDataCurrencyInformationInterface baseCurrencySymbol(String baseCurrencySymbol) {
    this.baseCurrencySymbol = baseCurrencySymbol;
    return this;
  }

  /**
   * The currency symbol of the base currency for the store.
   * @return baseCurrencySymbol
   */
  @javax.annotation.Nonnull
  public String getBaseCurrencySymbol() {
    return baseCurrencySymbol;
  }

  public void setBaseCurrencySymbol(String baseCurrencySymbol) {
    this.baseCurrencySymbol = baseCurrencySymbol;
  }


  public DirectoryDataCurrencyInformationInterface defaultDisplayCurrencyCode(String defaultDisplayCurrencyCode) {
    this.defaultDisplayCurrencyCode = defaultDisplayCurrencyCode;
    return this;
  }

  /**
   * The default display currency code for the store.
   * @return defaultDisplayCurrencyCode
   */
  @javax.annotation.Nonnull
  public String getDefaultDisplayCurrencyCode() {
    return defaultDisplayCurrencyCode;
  }

  public void setDefaultDisplayCurrencyCode(String defaultDisplayCurrencyCode) {
    this.defaultDisplayCurrencyCode = defaultDisplayCurrencyCode;
  }


  public DirectoryDataCurrencyInformationInterface defaultDisplayCurrencySymbol(String defaultDisplayCurrencySymbol) {
    this.defaultDisplayCurrencySymbol = defaultDisplayCurrencySymbol;
    return this;
  }

  /**
   * The currency symbol of the default display currency for the store.
   * @return defaultDisplayCurrencySymbol
   */
  @javax.annotation.Nonnull
  public String getDefaultDisplayCurrencySymbol() {
    return defaultDisplayCurrencySymbol;
  }

  public void setDefaultDisplayCurrencySymbol(String defaultDisplayCurrencySymbol) {
    this.defaultDisplayCurrencySymbol = defaultDisplayCurrencySymbol;
  }


  public DirectoryDataCurrencyInformationInterface exchangeRates(List<DirectoryDataExchangeRateInterface> exchangeRates) {
    this.exchangeRates = exchangeRates;
    return this;
  }

  public DirectoryDataCurrencyInformationInterface addExchangeRatesItem(DirectoryDataExchangeRateInterface exchangeRatesItem) {
    if (this.exchangeRates == null) {
      this.exchangeRates = new ArrayList<>();
    }
    this.exchangeRates.add(exchangeRatesItem);
    return this;
  }

  /**
   * The list of exchange rate information for the store.
   * @return exchangeRates
   */
  @javax.annotation.Nonnull
  public List<DirectoryDataExchangeRateInterface> getExchangeRates() {
    return exchangeRates;
  }

  public void setExchangeRates(List<DirectoryDataExchangeRateInterface> exchangeRates) {
    this.exchangeRates = exchangeRates;
  }


  public DirectoryDataCurrencyInformationInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CurrencyInformationInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectoryDataCurrencyInformationInterface directoryDataCurrencyInformationInterface = (DirectoryDataCurrencyInformationInterface) o;
    return Objects.equals(this.availableCurrencyCodes, directoryDataCurrencyInformationInterface.availableCurrencyCodes) &&
        Objects.equals(this.baseCurrencyCode, directoryDataCurrencyInformationInterface.baseCurrencyCode) &&
        Objects.equals(this.baseCurrencySymbol, directoryDataCurrencyInformationInterface.baseCurrencySymbol) &&
        Objects.equals(this.defaultDisplayCurrencyCode, directoryDataCurrencyInformationInterface.defaultDisplayCurrencyCode) &&
        Objects.equals(this.defaultDisplayCurrencySymbol, directoryDataCurrencyInformationInterface.defaultDisplayCurrencySymbol) &&
        Objects.equals(this.exchangeRates, directoryDataCurrencyInformationInterface.exchangeRates) &&
        Objects.equals(this.extensionAttributes, directoryDataCurrencyInformationInterface.extensionAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableCurrencyCodes, baseCurrencyCode, baseCurrencySymbol, defaultDisplayCurrencyCode, defaultDisplayCurrencySymbol, exchangeRates, extensionAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectoryDataCurrencyInformationInterface {\n");
    sb.append("    availableCurrencyCodes: ").append(toIndentedString(availableCurrencyCodes)).append("\n");
    sb.append("    baseCurrencyCode: ").append(toIndentedString(baseCurrencyCode)).append("\n");
    sb.append("    baseCurrencySymbol: ").append(toIndentedString(baseCurrencySymbol)).append("\n");
    sb.append("    defaultDisplayCurrencyCode: ").append(toIndentedString(defaultDisplayCurrencyCode)).append("\n");
    sb.append("    defaultDisplayCurrencySymbol: ").append(toIndentedString(defaultDisplayCurrencySymbol)).append("\n");
    sb.append("    exchangeRates: ").append(toIndentedString(exchangeRates)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available_currency_codes");
    openapiFields.add("base_currency_code");
    openapiFields.add("base_currency_symbol");
    openapiFields.add("default_display_currency_code");
    openapiFields.add("default_display_currency_symbol");
    openapiFields.add("exchange_rates");
    openapiFields.add("extension_attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("available_currency_codes");
    openapiRequiredFields.add("base_currency_code");
    openapiRequiredFields.add("base_currency_symbol");
    openapiRequiredFields.add("default_display_currency_code");
    openapiRequiredFields.add("default_display_currency_symbol");
    openapiRequiredFields.add("exchange_rates");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DirectoryDataCurrencyInformationInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DirectoryDataCurrencyInformationInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectoryDataCurrencyInformationInterface is not found in the empty JSON string", DirectoryDataCurrencyInformationInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DirectoryDataCurrencyInformationInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DirectoryDataCurrencyInformationInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DirectoryDataCurrencyInformationInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("available_currency_codes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("available_currency_codes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_currency_codes` to be an array in the JSON string but got `%s`", jsonObj.get("available_currency_codes").toString()));
      }
      if (!jsonObj.get("base_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_currency_code").toString()));
      }
      if (!jsonObj.get("base_currency_symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_currency_symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_currency_symbol").toString()));
      }
      if (!jsonObj.get("default_display_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_display_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_display_currency_code").toString()));
      }
      if (!jsonObj.get("default_display_currency_symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_display_currency_symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_display_currency_symbol").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("exchange_rates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange_rates` to be an array in the JSON string but got `%s`", jsonObj.get("exchange_rates").toString()));
      }

      JsonArray jsonArrayexchangeRates = jsonObj.getAsJsonArray("exchange_rates");
      // validate the required field `exchange_rates` (array)
      for (int i = 0; i < jsonArrayexchangeRates.size(); i++) {
        DirectoryDataExchangeRateInterface.validateJsonElement(jsonArrayexchangeRates.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectoryDataCurrencyInformationInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectoryDataCurrencyInformationInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectoryDataCurrencyInformationInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectoryDataCurrencyInformationInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectoryDataCurrencyInformationInterface>() {
           @Override
           public void write(JsonWriter out, DirectoryDataCurrencyInformationInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectoryDataCurrencyInformationInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DirectoryDataCurrencyInformationInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DirectoryDataCurrencyInformationInterface
   * @throws IOException if the JSON string is invalid with respect to DirectoryDataCurrencyInformationInterface
   */
  public static DirectoryDataCurrencyInformationInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectoryDataCurrencyInformationInterface.class);
  }

  /**
   * Convert an instance of DirectoryDataCurrencyInformationInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

