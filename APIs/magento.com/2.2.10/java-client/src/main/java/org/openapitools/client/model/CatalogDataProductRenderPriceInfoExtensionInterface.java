/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CatalogDataProductRenderPriceInfoInterface;
import org.openapitools.client.model.MsrpDataProductRenderMsrpPriceInfoInterface;
import org.openapitools.client.model.WeeeDataProductRenderWeeeAdjustmentAttributeInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\PriceInfoInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogDataProductRenderPriceInfoExtensionInterface {
  public static final String SERIALIZED_NAME_MSRP = "msrp";
  @SerializedName(SERIALIZED_NAME_MSRP)
  private MsrpDataProductRenderMsrpPriceInfoInterface msrp;

  public static final String SERIALIZED_NAME_TAX_ADJUSTMENTS = "tax_adjustments";
  @SerializedName(SERIALIZED_NAME_TAX_ADJUSTMENTS)
  private CatalogDataProductRenderPriceInfoInterface taxAdjustments;

  public static final String SERIALIZED_NAME_WEEE_ADJUSTMENT = "weee_adjustment";
  @SerializedName(SERIALIZED_NAME_WEEE_ADJUSTMENT)
  private String weeeAdjustment;

  public static final String SERIALIZED_NAME_WEEE_ATTRIBUTES = "weee_attributes";
  @SerializedName(SERIALIZED_NAME_WEEE_ATTRIBUTES)
  private List<WeeeDataProductRenderWeeeAdjustmentAttributeInterface> weeeAttributes = new ArrayList<>();

  public CatalogDataProductRenderPriceInfoExtensionInterface() {
  }

  public CatalogDataProductRenderPriceInfoExtensionInterface msrp(MsrpDataProductRenderMsrpPriceInfoInterface msrp) {
    this.msrp = msrp;
    return this;
  }

  /**
   * Get msrp
   * @return msrp
   */
  @javax.annotation.Nullable
  public MsrpDataProductRenderMsrpPriceInfoInterface getMsrp() {
    return msrp;
  }

  public void setMsrp(MsrpDataProductRenderMsrpPriceInfoInterface msrp) {
    this.msrp = msrp;
  }


  public CatalogDataProductRenderPriceInfoExtensionInterface taxAdjustments(CatalogDataProductRenderPriceInfoInterface taxAdjustments) {
    this.taxAdjustments = taxAdjustments;
    return this;
  }

  /**
   * Get taxAdjustments
   * @return taxAdjustments
   */
  @javax.annotation.Nullable
  public CatalogDataProductRenderPriceInfoInterface getTaxAdjustments() {
    return taxAdjustments;
  }

  public void setTaxAdjustments(CatalogDataProductRenderPriceInfoInterface taxAdjustments) {
    this.taxAdjustments = taxAdjustments;
  }


  public CatalogDataProductRenderPriceInfoExtensionInterface weeeAdjustment(String weeeAdjustment) {
    this.weeeAdjustment = weeeAdjustment;
    return this;
  }

  /**
   * Get weeeAdjustment
   * @return weeeAdjustment
   */
  @javax.annotation.Nullable
  public String getWeeeAdjustment() {
    return weeeAdjustment;
  }

  public void setWeeeAdjustment(String weeeAdjustment) {
    this.weeeAdjustment = weeeAdjustment;
  }


  public CatalogDataProductRenderPriceInfoExtensionInterface weeeAttributes(List<WeeeDataProductRenderWeeeAdjustmentAttributeInterface> weeeAttributes) {
    this.weeeAttributes = weeeAttributes;
    return this;
  }

  public CatalogDataProductRenderPriceInfoExtensionInterface addWeeeAttributesItem(WeeeDataProductRenderWeeeAdjustmentAttributeInterface weeeAttributesItem) {
    if (this.weeeAttributes == null) {
      this.weeeAttributes = new ArrayList<>();
    }
    this.weeeAttributes.add(weeeAttributesItem);
    return this;
  }

  /**
   * Get weeeAttributes
   * @return weeeAttributes
   */
  @javax.annotation.Nullable
  public List<WeeeDataProductRenderWeeeAdjustmentAttributeInterface> getWeeeAttributes() {
    return weeeAttributes;
  }

  public void setWeeeAttributes(List<WeeeDataProductRenderWeeeAdjustmentAttributeInterface> weeeAttributes) {
    this.weeeAttributes = weeeAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataProductRenderPriceInfoExtensionInterface catalogDataProductRenderPriceInfoExtensionInterface = (CatalogDataProductRenderPriceInfoExtensionInterface) o;
    return Objects.equals(this.msrp, catalogDataProductRenderPriceInfoExtensionInterface.msrp) &&
        Objects.equals(this.taxAdjustments, catalogDataProductRenderPriceInfoExtensionInterface.taxAdjustments) &&
        Objects.equals(this.weeeAdjustment, catalogDataProductRenderPriceInfoExtensionInterface.weeeAdjustment) &&
        Objects.equals(this.weeeAttributes, catalogDataProductRenderPriceInfoExtensionInterface.weeeAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(msrp, taxAdjustments, weeeAdjustment, weeeAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataProductRenderPriceInfoExtensionInterface {\n");
    sb.append("    msrp: ").append(toIndentedString(msrp)).append("\n");
    sb.append("    taxAdjustments: ").append(toIndentedString(taxAdjustments)).append("\n");
    sb.append("    weeeAdjustment: ").append(toIndentedString(weeeAdjustment)).append("\n");
    sb.append("    weeeAttributes: ").append(toIndentedString(weeeAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("msrp");
    openapiFields.add("tax_adjustments");
    openapiFields.add("weee_adjustment");
    openapiFields.add("weee_attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogDataProductRenderPriceInfoExtensionInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogDataProductRenderPriceInfoExtensionInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogDataProductRenderPriceInfoExtensionInterface is not found in the empty JSON string", CatalogDataProductRenderPriceInfoExtensionInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogDataProductRenderPriceInfoExtensionInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogDataProductRenderPriceInfoExtensionInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `msrp`
      if (jsonObj.get("msrp") != null && !jsonObj.get("msrp").isJsonNull()) {
        MsrpDataProductRenderMsrpPriceInfoInterface.validateJsonElement(jsonObj.get("msrp"));
      }
      // validate the optional field `tax_adjustments`
      if (jsonObj.get("tax_adjustments") != null && !jsonObj.get("tax_adjustments").isJsonNull()) {
        CatalogDataProductRenderPriceInfoInterface.validateJsonElement(jsonObj.get("tax_adjustments"));
      }
      if ((jsonObj.get("weee_adjustment") != null && !jsonObj.get("weee_adjustment").isJsonNull()) && !jsonObj.get("weee_adjustment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weee_adjustment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weee_adjustment").toString()));
      }
      if (jsonObj.get("weee_attributes") != null && !jsonObj.get("weee_attributes").isJsonNull()) {
        JsonArray jsonArrayweeeAttributes = jsonObj.getAsJsonArray("weee_attributes");
        if (jsonArrayweeeAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("weee_attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `weee_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("weee_attributes").toString()));
          }

          // validate the optional field `weee_attributes` (array)
          for (int i = 0; i < jsonArrayweeeAttributes.size(); i++) {
            WeeeDataProductRenderWeeeAdjustmentAttributeInterface.validateJsonElement(jsonArrayweeeAttributes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogDataProductRenderPriceInfoExtensionInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogDataProductRenderPriceInfoExtensionInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogDataProductRenderPriceInfoExtensionInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogDataProductRenderPriceInfoExtensionInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogDataProductRenderPriceInfoExtensionInterface>() {
           @Override
           public void write(JsonWriter out, CatalogDataProductRenderPriceInfoExtensionInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogDataProductRenderPriceInfoExtensionInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogDataProductRenderPriceInfoExtensionInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogDataProductRenderPriceInfoExtensionInterface
   * @throws IOException if the JSON string is invalid with respect to CatalogDataProductRenderPriceInfoExtensionInterface
   */
  public static CatalogDataProductRenderPriceInfoExtensionInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogDataProductRenderPriceInfoExtensionInterface.class);
  }

  /**
   * Convert an instance of CatalogDataProductRenderPriceInfoExtensionInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

