/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogDataCategoryTreeInterface {
  public static final String SERIALIZED_NAME_CHILDREN_DATA = "children_data";
  @SerializedName(SERIALIZED_NAME_CHILDREN_DATA)
  private List<CatalogDataCategoryTreeInterface> childrenData = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private Integer parentId;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_PRODUCT_COUNT = "product_count";
  @SerializedName(SERIALIZED_NAME_PRODUCT_COUNT)
  private Integer productCount;

  public CatalogDataCategoryTreeInterface() {
  }

  public CatalogDataCategoryTreeInterface childrenData(List<CatalogDataCategoryTreeInterface> childrenData) {
    this.childrenData = childrenData;
    return this;
  }

  public CatalogDataCategoryTreeInterface addChildrenDataItem(CatalogDataCategoryTreeInterface childrenDataItem) {
    if (this.childrenData == null) {
      this.childrenData = new ArrayList<>();
    }
    this.childrenData.add(childrenDataItem);
    return this;
  }

  /**
   * Get childrenData
   * @return childrenData
   */
  @javax.annotation.Nonnull
  public List<CatalogDataCategoryTreeInterface> getChildrenData() {
    return childrenData;
  }

  public void setChildrenData(List<CatalogDataCategoryTreeInterface> childrenData) {
    this.childrenData = childrenData;
  }


  public CatalogDataCategoryTreeInterface id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CatalogDataCategoryTreeInterface isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Whether category is active
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public CatalogDataCategoryTreeInterface level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Category level
   * @return level
   */
  @javax.annotation.Nonnull
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public CatalogDataCategoryTreeInterface name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Category name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CatalogDataCategoryTreeInterface parentId(Integer parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Parent category ID
   * @return parentId
   */
  @javax.annotation.Nonnull
  public Integer getParentId() {
    return parentId;
  }

  public void setParentId(Integer parentId) {
    this.parentId = parentId;
  }


  public CatalogDataCategoryTreeInterface position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Category position
   * @return position
   */
  @javax.annotation.Nonnull
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public CatalogDataCategoryTreeInterface productCount(Integer productCount) {
    this.productCount = productCount;
    return this;
  }

  /**
   * Product count
   * @return productCount
   */
  @javax.annotation.Nonnull
  public Integer getProductCount() {
    return productCount;
  }

  public void setProductCount(Integer productCount) {
    this.productCount = productCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataCategoryTreeInterface catalogDataCategoryTreeInterface = (CatalogDataCategoryTreeInterface) o;
    return Objects.equals(this.childrenData, catalogDataCategoryTreeInterface.childrenData) &&
        Objects.equals(this.id, catalogDataCategoryTreeInterface.id) &&
        Objects.equals(this.isActive, catalogDataCategoryTreeInterface.isActive) &&
        Objects.equals(this.level, catalogDataCategoryTreeInterface.level) &&
        Objects.equals(this.name, catalogDataCategoryTreeInterface.name) &&
        Objects.equals(this.parentId, catalogDataCategoryTreeInterface.parentId) &&
        Objects.equals(this.position, catalogDataCategoryTreeInterface.position) &&
        Objects.equals(this.productCount, catalogDataCategoryTreeInterface.productCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childrenData, id, isActive, level, name, parentId, position, productCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataCategoryTreeInterface {\n");
    sb.append("    childrenData: ").append(toIndentedString(childrenData)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    productCount: ").append(toIndentedString(productCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("children_data");
    openapiFields.add("id");
    openapiFields.add("is_active");
    openapiFields.add("level");
    openapiFields.add("name");
    openapiFields.add("parent_id");
    openapiFields.add("position");
    openapiFields.add("product_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("children_data");
    openapiRequiredFields.add("is_active");
    openapiRequiredFields.add("level");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("parent_id");
    openapiRequiredFields.add("position");
    openapiRequiredFields.add("product_count");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogDataCategoryTreeInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogDataCategoryTreeInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogDataCategoryTreeInterface is not found in the empty JSON string", CatalogDataCategoryTreeInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogDataCategoryTreeInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogDataCategoryTreeInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogDataCategoryTreeInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("children_data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `children_data` to be an array in the JSON string but got `%s`", jsonObj.get("children_data").toString()));
      }

      JsonArray jsonArraychildrenData = jsonObj.getAsJsonArray("children_data");
      // validate the required field `children_data` (array)
      for (int i = 0; i < jsonArraychildrenData.size(); i++) {
        CatalogDataCategoryTreeInterface.validateJsonElement(jsonArraychildrenData.get(i));
      };
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogDataCategoryTreeInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogDataCategoryTreeInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogDataCategoryTreeInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogDataCategoryTreeInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogDataCategoryTreeInterface>() {
           @Override
           public void write(JsonWriter out, CatalogDataCategoryTreeInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogDataCategoryTreeInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogDataCategoryTreeInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogDataCategoryTreeInterface
   * @throws IOException if the JSON string is invalid with respect to CatalogDataCategoryTreeInterface
   */
  public static CatalogDataCategoryTreeInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogDataCategoryTreeInterface.class);
  }

  /**
   * Convert an instance of CatalogDataCategoryTreeInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

