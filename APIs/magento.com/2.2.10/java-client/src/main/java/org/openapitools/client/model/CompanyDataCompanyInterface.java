/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CompanyDataCompanyExtensionInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface for Company entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanyDataCompanyInterface {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_COMPANY_EMAIL = "company_email";
  @SerializedName(SERIALIZED_NAME_COMPANY_EMAIL)
  private String companyEmail;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COUNTRY_ID = "country_id";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ID)
  private String countryId;

  public static final String SERIALIZED_NAME_CUSTOMER_GROUP_ID = "customer_group_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_GROUP_ID)
  private Integer customerGroupId;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private CompanyDataCompanyExtensionInterface extensionAttributes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LEGAL_NAME = "legal_name";
  @SerializedName(SERIALIZED_NAME_LEGAL_NAME)
  private String legalName;

  public static final String SERIALIZED_NAME_POSTCODE = "postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_REGION_ID = "region_id";
  @SerializedName(SERIALIZED_NAME_REGION_ID)
  private String regionId;

  public static final String SERIALIZED_NAME_REJECT_REASON = "reject_reason";
  @SerializedName(SERIALIZED_NAME_REJECT_REASON)
  private String rejectReason;

  public static final String SERIALIZED_NAME_REJECTED_AT = "rejected_at";
  @SerializedName(SERIALIZED_NAME_REJECTED_AT)
  private String rejectedAt;

  public static final String SERIALIZED_NAME_RESELLER_ID = "reseller_id";
  @SerializedName(SERIALIZED_NAME_RESELLER_ID)
  private String resellerId;

  public static final String SERIALIZED_NAME_SALES_REPRESENTATIVE_ID = "sales_representative_id";
  @SerializedName(SERIALIZED_NAME_SALES_REPRESENTATIVE_ID)
  private Integer salesRepresentativeId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private List<String> street = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPER_USER_ID = "super_user_id";
  @SerializedName(SERIALIZED_NAME_SUPER_USER_ID)
  private Integer superUserId;

  public static final String SERIALIZED_NAME_TELEPHONE = "telephone";
  @SerializedName(SERIALIZED_NAME_TELEPHONE)
  private String telephone;

  public static final String SERIALIZED_NAME_VAT_TAX_ID = "vat_tax_id";
  @SerializedName(SERIALIZED_NAME_VAT_TAX_ID)
  private String vatTaxId;

  public CompanyDataCompanyInterface() {
  }

  public CompanyDataCompanyInterface city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City.
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public CompanyDataCompanyInterface comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Comment.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public CompanyDataCompanyInterface companyEmail(String companyEmail) {
    this.companyEmail = companyEmail;
    return this;
  }

  /**
   * Company email.
   * @return companyEmail
   */
  @javax.annotation.Nullable
  public String getCompanyEmail() {
    return companyEmail;
  }

  public void setCompanyEmail(String companyEmail) {
    this.companyEmail = companyEmail;
  }


  public CompanyDataCompanyInterface companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Company name.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public CompanyDataCompanyInterface countryId(String countryId) {
    this.countryId = countryId;
    return this;
  }

  /**
   * Country.
   * @return countryId
   */
  @javax.annotation.Nullable
  public String getCountryId() {
    return countryId;
  }

  public void setCountryId(String countryId) {
    this.countryId = countryId;
  }


  public CompanyDataCompanyInterface customerGroupId(Integer customerGroupId) {
    this.customerGroupId = customerGroupId;
    return this;
  }

  /**
   * Customer Group Id.
   * @return customerGroupId
   */
  @javax.annotation.Nonnull
  public Integer getCustomerGroupId() {
    return customerGroupId;
  }

  public void setCustomerGroupId(Integer customerGroupId) {
    this.customerGroupId = customerGroupId;
  }


  public CompanyDataCompanyInterface extensionAttributes(CompanyDataCompanyExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * Get extensionAttributes
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public CompanyDataCompanyExtensionInterface getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(CompanyDataCompanyExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public CompanyDataCompanyInterface id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Id.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CompanyDataCompanyInterface legalName(String legalName) {
    this.legalName = legalName;
    return this;
  }

  /**
   * Legal name.
   * @return legalName
   */
  @javax.annotation.Nullable
  public String getLegalName() {
    return legalName;
  }

  public void setLegalName(String legalName) {
    this.legalName = legalName;
  }


  public CompanyDataCompanyInterface postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * Postcode.
   * @return postcode
   */
  @javax.annotation.Nullable
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }


  public CompanyDataCompanyInterface region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Region.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public CompanyDataCompanyInterface regionId(String regionId) {
    this.regionId = regionId;
    return this;
  }

  /**
   * Region Id.
   * @return regionId
   */
  @javax.annotation.Nullable
  public String getRegionId() {
    return regionId;
  }

  public void setRegionId(String regionId) {
    this.regionId = regionId;
  }


  public CompanyDataCompanyInterface rejectReason(String rejectReason) {
    this.rejectReason = rejectReason;
    return this;
  }

  /**
   * Reject Reason.
   * @return rejectReason
   */
  @javax.annotation.Nonnull
  public String getRejectReason() {
    return rejectReason;
  }

  public void setRejectReason(String rejectReason) {
    this.rejectReason = rejectReason;
  }


  public CompanyDataCompanyInterface rejectedAt(String rejectedAt) {
    this.rejectedAt = rejectedAt;
    return this;
  }

  /**
   * Rejected at time.
   * @return rejectedAt
   */
  @javax.annotation.Nonnull
  public String getRejectedAt() {
    return rejectedAt;
  }

  public void setRejectedAt(String rejectedAt) {
    this.rejectedAt = rejectedAt;
  }


  public CompanyDataCompanyInterface resellerId(String resellerId) {
    this.resellerId = resellerId;
    return this;
  }

  /**
   * Reseller Id.
   * @return resellerId
   */
  @javax.annotation.Nullable
  public String getResellerId() {
    return resellerId;
  }

  public void setResellerId(String resellerId) {
    this.resellerId = resellerId;
  }


  public CompanyDataCompanyInterface salesRepresentativeId(Integer salesRepresentativeId) {
    this.salesRepresentativeId = salesRepresentativeId;
    return this;
  }

  /**
   * Sales Representative Id.
   * @return salesRepresentativeId
   */
  @javax.annotation.Nonnull
  public Integer getSalesRepresentativeId() {
    return salesRepresentativeId;
  }

  public void setSalesRepresentativeId(Integer salesRepresentativeId) {
    this.salesRepresentativeId = salesRepresentativeId;
  }


  public CompanyDataCompanyInterface status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Status.
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public CompanyDataCompanyInterface street(List<String> street) {
    this.street = street;
    return this;
  }

  public CompanyDataCompanyInterface addStreetItem(String streetItem) {
    if (this.street == null) {
      this.street = new ArrayList<>();
    }
    this.street.add(streetItem);
    return this;
  }

  /**
   * Street.
   * @return street
   */
  @javax.annotation.Nonnull
  public List<String> getStreet() {
    return street;
  }

  public void setStreet(List<String> street) {
    this.street = street;
  }


  public CompanyDataCompanyInterface superUserId(Integer superUserId) {
    this.superUserId = superUserId;
    return this;
  }

  /**
   * Company admin customer id.
   * @return superUserId
   */
  @javax.annotation.Nonnull
  public Integer getSuperUserId() {
    return superUserId;
  }

  public void setSuperUserId(Integer superUserId) {
    this.superUserId = superUserId;
  }


  public CompanyDataCompanyInterface telephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  /**
   * Telephone.
   * @return telephone
   */
  @javax.annotation.Nullable
  public String getTelephone() {
    return telephone;
  }

  public void setTelephone(String telephone) {
    this.telephone = telephone;
  }


  public CompanyDataCompanyInterface vatTaxId(String vatTaxId) {
    this.vatTaxId = vatTaxId;
    return this;
  }

  /**
   * Vat tax id.
   * @return vatTaxId
   */
  @javax.annotation.Nullable
  public String getVatTaxId() {
    return vatTaxId;
  }

  public void setVatTaxId(String vatTaxId) {
    this.vatTaxId = vatTaxId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyDataCompanyInterface companyDataCompanyInterface = (CompanyDataCompanyInterface) o;
    return Objects.equals(this.city, companyDataCompanyInterface.city) &&
        Objects.equals(this.comment, companyDataCompanyInterface.comment) &&
        Objects.equals(this.companyEmail, companyDataCompanyInterface.companyEmail) &&
        Objects.equals(this.companyName, companyDataCompanyInterface.companyName) &&
        Objects.equals(this.countryId, companyDataCompanyInterface.countryId) &&
        Objects.equals(this.customerGroupId, companyDataCompanyInterface.customerGroupId) &&
        Objects.equals(this.extensionAttributes, companyDataCompanyInterface.extensionAttributes) &&
        Objects.equals(this.id, companyDataCompanyInterface.id) &&
        Objects.equals(this.legalName, companyDataCompanyInterface.legalName) &&
        Objects.equals(this.postcode, companyDataCompanyInterface.postcode) &&
        Objects.equals(this.region, companyDataCompanyInterface.region) &&
        Objects.equals(this.regionId, companyDataCompanyInterface.regionId) &&
        Objects.equals(this.rejectReason, companyDataCompanyInterface.rejectReason) &&
        Objects.equals(this.rejectedAt, companyDataCompanyInterface.rejectedAt) &&
        Objects.equals(this.resellerId, companyDataCompanyInterface.resellerId) &&
        Objects.equals(this.salesRepresentativeId, companyDataCompanyInterface.salesRepresentativeId) &&
        Objects.equals(this.status, companyDataCompanyInterface.status) &&
        Objects.equals(this.street, companyDataCompanyInterface.street) &&
        Objects.equals(this.superUserId, companyDataCompanyInterface.superUserId) &&
        Objects.equals(this.telephone, companyDataCompanyInterface.telephone) &&
        Objects.equals(this.vatTaxId, companyDataCompanyInterface.vatTaxId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, comment, companyEmail, companyName, countryId, customerGroupId, extensionAttributes, id, legalName, postcode, region, regionId, rejectReason, rejectedAt, resellerId, salesRepresentativeId, status, street, superUserId, telephone, vatTaxId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyDataCompanyInterface {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    companyEmail: ").append(toIndentedString(companyEmail)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    countryId: ").append(toIndentedString(countryId)).append("\n");
    sb.append("    customerGroupId: ").append(toIndentedString(customerGroupId)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
    sb.append("    rejectReason: ").append(toIndentedString(rejectReason)).append("\n");
    sb.append("    rejectedAt: ").append(toIndentedString(rejectedAt)).append("\n");
    sb.append("    resellerId: ").append(toIndentedString(resellerId)).append("\n");
    sb.append("    salesRepresentativeId: ").append(toIndentedString(salesRepresentativeId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    superUserId: ").append(toIndentedString(superUserId)).append("\n");
    sb.append("    telephone: ").append(toIndentedString(telephone)).append("\n");
    sb.append("    vatTaxId: ").append(toIndentedString(vatTaxId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("comment");
    openapiFields.add("company_email");
    openapiFields.add("company_name");
    openapiFields.add("country_id");
    openapiFields.add("customer_group_id");
    openapiFields.add("extension_attributes");
    openapiFields.add("id");
    openapiFields.add("legal_name");
    openapiFields.add("postcode");
    openapiFields.add("region");
    openapiFields.add("region_id");
    openapiFields.add("reject_reason");
    openapiFields.add("rejected_at");
    openapiFields.add("reseller_id");
    openapiFields.add("sales_representative_id");
    openapiFields.add("status");
    openapiFields.add("street");
    openapiFields.add("super_user_id");
    openapiFields.add("telephone");
    openapiFields.add("vat_tax_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("customer_group_id");
    openapiRequiredFields.add("reject_reason");
    openapiRequiredFields.add("rejected_at");
    openapiRequiredFields.add("sales_representative_id");
    openapiRequiredFields.add("street");
    openapiRequiredFields.add("super_user_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanyDataCompanyInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanyDataCompanyInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyDataCompanyInterface is not found in the empty JSON string", CompanyDataCompanyInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanyDataCompanyInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanyDataCompanyInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompanyDataCompanyInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("company_email") != null && !jsonObj.get("company_email").isJsonNull()) && !jsonObj.get("company_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_email").toString()));
      }
      if ((jsonObj.get("company_name") != null && !jsonObj.get("company_name").isJsonNull()) && !jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
      if ((jsonObj.get("country_id") != null && !jsonObj.get("country_id").isJsonNull()) && !jsonObj.get("country_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_id").toString()));
      }
      // validate the optional field `extension_attributes`
      if (jsonObj.get("extension_attributes") != null && !jsonObj.get("extension_attributes").isJsonNull()) {
        CompanyDataCompanyExtensionInterface.validateJsonElement(jsonObj.get("extension_attributes"));
      }
      if ((jsonObj.get("legal_name") != null && !jsonObj.get("legal_name").isJsonNull()) && !jsonObj.get("legal_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legal_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legal_name").toString()));
      }
      if ((jsonObj.get("postcode") != null && !jsonObj.get("postcode").isJsonNull()) && !jsonObj.get("postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postcode").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("region_id") != null && !jsonObj.get("region_id").isJsonNull()) && !jsonObj.get("region_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region_id").toString()));
      }
      if (!jsonObj.get("reject_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reject_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reject_reason").toString()));
      }
      if (!jsonObj.get("rejected_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejected_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rejected_at").toString()));
      }
      if ((jsonObj.get("reseller_id") != null && !jsonObj.get("reseller_id").isJsonNull()) && !jsonObj.get("reseller_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reseller_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reseller_id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("street") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("street").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be an array in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("telephone") != null && !jsonObj.get("telephone").isJsonNull()) && !jsonObj.get("telephone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `telephone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("telephone").toString()));
      }
      if ((jsonObj.get("vat_tax_id") != null && !jsonObj.get("vat_tax_id").isJsonNull()) && !jsonObj.get("vat_tax_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vat_tax_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vat_tax_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyDataCompanyInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyDataCompanyInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyDataCompanyInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyDataCompanyInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyDataCompanyInterface>() {
           @Override
           public void write(JsonWriter out, CompanyDataCompanyInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyDataCompanyInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanyDataCompanyInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanyDataCompanyInterface
   * @throws IOException if the JSON string is invalid with respect to CompanyDataCompanyInterface
   */
  public static CompanyDataCompanyInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyDataCompanyInterface.class);
  }

  /**
   * Convert an instance of CompanyDataCompanyInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

