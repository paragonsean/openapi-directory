/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CatalogDataProductCustomOptionExtensionInterface;
import org.openapitools.client.model.CatalogDataProductCustomOptionValuesInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogDataProductCustomOptionInterface {
  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private CatalogDataProductCustomOptionExtensionInterface extensionAttributes;

  public static final String SERIALIZED_NAME_FILE_EXTENSION = "file_extension";
  @SerializedName(SERIALIZED_NAME_FILE_EXTENSION)
  private String fileExtension;

  public static final String SERIALIZED_NAME_IMAGE_SIZE_X = "image_size_x";
  @SerializedName(SERIALIZED_NAME_IMAGE_SIZE_X)
  private Integer imageSizeX;

  public static final String SERIALIZED_NAME_IMAGE_SIZE_Y = "image_size_y";
  @SerializedName(SERIALIZED_NAME_IMAGE_SIZE_Y)
  private Integer imageSizeY;

  public static final String SERIALIZED_NAME_IS_REQUIRE = "is_require";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRE)
  private Boolean isRequire;

  public static final String SERIALIZED_NAME_MAX_CHARACTERS = "max_characters";
  @SerializedName(SERIALIZED_NAME_MAX_CHARACTERS)
  private Integer maxCharacters;

  public static final String SERIALIZED_NAME_OPTION_ID = "option_id";
  @SerializedName(SERIALIZED_NAME_OPTION_ID)
  private Integer optionId;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_PRICE_TYPE = "price_type";
  @SerializedName(SERIALIZED_NAME_PRICE_TYPE)
  private String priceType;

  public static final String SERIALIZED_NAME_PRODUCT_SKU = "product_sku";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SKU)
  private String productSku;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sort_order";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<CatalogDataProductCustomOptionValuesInterface> values = new ArrayList<>();

  public CatalogDataProductCustomOptionInterface() {
  }

  public CatalogDataProductCustomOptionInterface extensionAttributes(CatalogDataProductCustomOptionExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * Get extensionAttributes
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public CatalogDataProductCustomOptionExtensionInterface getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(CatalogDataProductCustomOptionExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public CatalogDataProductCustomOptionInterface fileExtension(String fileExtension) {
    this.fileExtension = fileExtension;
    return this;
  }

  /**
   * Get fileExtension
   * @return fileExtension
   */
  @javax.annotation.Nullable
  public String getFileExtension() {
    return fileExtension;
  }

  public void setFileExtension(String fileExtension) {
    this.fileExtension = fileExtension;
  }


  public CatalogDataProductCustomOptionInterface imageSizeX(Integer imageSizeX) {
    this.imageSizeX = imageSizeX;
    return this;
  }

  /**
   * Get imageSizeX
   * @return imageSizeX
   */
  @javax.annotation.Nullable
  public Integer getImageSizeX() {
    return imageSizeX;
  }

  public void setImageSizeX(Integer imageSizeX) {
    this.imageSizeX = imageSizeX;
  }


  public CatalogDataProductCustomOptionInterface imageSizeY(Integer imageSizeY) {
    this.imageSizeY = imageSizeY;
    return this;
  }

  /**
   * Get imageSizeY
   * @return imageSizeY
   */
  @javax.annotation.Nullable
  public Integer getImageSizeY() {
    return imageSizeY;
  }

  public void setImageSizeY(Integer imageSizeY) {
    this.imageSizeY = imageSizeY;
  }


  public CatalogDataProductCustomOptionInterface isRequire(Boolean isRequire) {
    this.isRequire = isRequire;
    return this;
  }

  /**
   * Is require
   * @return isRequire
   */
  @javax.annotation.Nonnull
  public Boolean getIsRequire() {
    return isRequire;
  }

  public void setIsRequire(Boolean isRequire) {
    this.isRequire = isRequire;
  }


  public CatalogDataProductCustomOptionInterface maxCharacters(Integer maxCharacters) {
    this.maxCharacters = maxCharacters;
    return this;
  }

  /**
   * Get maxCharacters
   * @return maxCharacters
   */
  @javax.annotation.Nullable
  public Integer getMaxCharacters() {
    return maxCharacters;
  }

  public void setMaxCharacters(Integer maxCharacters) {
    this.maxCharacters = maxCharacters;
  }


  public CatalogDataProductCustomOptionInterface optionId(Integer optionId) {
    this.optionId = optionId;
    return this;
  }

  /**
   * Option id
   * @return optionId
   */
  @javax.annotation.Nullable
  public Integer getOptionId() {
    return optionId;
  }

  public void setOptionId(Integer optionId) {
    this.optionId = optionId;
  }


  public CatalogDataProductCustomOptionInterface price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Price
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public CatalogDataProductCustomOptionInterface priceType(String priceType) {
    this.priceType = priceType;
    return this;
  }

  /**
   * Price type
   * @return priceType
   */
  @javax.annotation.Nullable
  public String getPriceType() {
    return priceType;
  }

  public void setPriceType(String priceType) {
    this.priceType = priceType;
  }


  public CatalogDataProductCustomOptionInterface productSku(String productSku) {
    this.productSku = productSku;
    return this;
  }

  /**
   * Product SKU
   * @return productSku
   */
  @javax.annotation.Nonnull
  public String getProductSku() {
    return productSku;
  }

  public void setProductSku(String productSku) {
    this.productSku = productSku;
  }


  public CatalogDataProductCustomOptionInterface sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Sku
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public CatalogDataProductCustomOptionInterface sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Sort order
   * @return sortOrder
   */
  @javax.annotation.Nonnull
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public CatalogDataProductCustomOptionInterface title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Option title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CatalogDataProductCustomOptionInterface type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Option type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public CatalogDataProductCustomOptionInterface values(List<CatalogDataProductCustomOptionValuesInterface> values) {
    this.values = values;
    return this;
  }

  public CatalogDataProductCustomOptionInterface addValuesItem(CatalogDataProductCustomOptionValuesInterface valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * Get values
   * @return values
   */
  @javax.annotation.Nullable
  public List<CatalogDataProductCustomOptionValuesInterface> getValues() {
    return values;
  }

  public void setValues(List<CatalogDataProductCustomOptionValuesInterface> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataProductCustomOptionInterface catalogDataProductCustomOptionInterface = (CatalogDataProductCustomOptionInterface) o;
    return Objects.equals(this.extensionAttributes, catalogDataProductCustomOptionInterface.extensionAttributes) &&
        Objects.equals(this.fileExtension, catalogDataProductCustomOptionInterface.fileExtension) &&
        Objects.equals(this.imageSizeX, catalogDataProductCustomOptionInterface.imageSizeX) &&
        Objects.equals(this.imageSizeY, catalogDataProductCustomOptionInterface.imageSizeY) &&
        Objects.equals(this.isRequire, catalogDataProductCustomOptionInterface.isRequire) &&
        Objects.equals(this.maxCharacters, catalogDataProductCustomOptionInterface.maxCharacters) &&
        Objects.equals(this.optionId, catalogDataProductCustomOptionInterface.optionId) &&
        Objects.equals(this.price, catalogDataProductCustomOptionInterface.price) &&
        Objects.equals(this.priceType, catalogDataProductCustomOptionInterface.priceType) &&
        Objects.equals(this.productSku, catalogDataProductCustomOptionInterface.productSku) &&
        Objects.equals(this.sku, catalogDataProductCustomOptionInterface.sku) &&
        Objects.equals(this.sortOrder, catalogDataProductCustomOptionInterface.sortOrder) &&
        Objects.equals(this.title, catalogDataProductCustomOptionInterface.title) &&
        Objects.equals(this.type, catalogDataProductCustomOptionInterface.type) &&
        Objects.equals(this.values, catalogDataProductCustomOptionInterface.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extensionAttributes, fileExtension, imageSizeX, imageSizeY, isRequire, maxCharacters, optionId, price, priceType, productSku, sku, sortOrder, title, type, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataProductCustomOptionInterface {\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    fileExtension: ").append(toIndentedString(fileExtension)).append("\n");
    sb.append("    imageSizeX: ").append(toIndentedString(imageSizeX)).append("\n");
    sb.append("    imageSizeY: ").append(toIndentedString(imageSizeY)).append("\n");
    sb.append("    isRequire: ").append(toIndentedString(isRequire)).append("\n");
    sb.append("    maxCharacters: ").append(toIndentedString(maxCharacters)).append("\n");
    sb.append("    optionId: ").append(toIndentedString(optionId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceType: ").append(toIndentedString(priceType)).append("\n");
    sb.append("    productSku: ").append(toIndentedString(productSku)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extension_attributes");
    openapiFields.add("file_extension");
    openapiFields.add("image_size_x");
    openapiFields.add("image_size_y");
    openapiFields.add("is_require");
    openapiFields.add("max_characters");
    openapiFields.add("option_id");
    openapiFields.add("price");
    openapiFields.add("price_type");
    openapiFields.add("product_sku");
    openapiFields.add("sku");
    openapiFields.add("sort_order");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("is_require");
    openapiRequiredFields.add("product_sku");
    openapiRequiredFields.add("sort_order");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogDataProductCustomOptionInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogDataProductCustomOptionInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogDataProductCustomOptionInterface is not found in the empty JSON string", CatalogDataProductCustomOptionInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogDataProductCustomOptionInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogDataProductCustomOptionInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogDataProductCustomOptionInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `extension_attributes`
      if (jsonObj.get("extension_attributes") != null && !jsonObj.get("extension_attributes").isJsonNull()) {
        CatalogDataProductCustomOptionExtensionInterface.validateJsonElement(jsonObj.get("extension_attributes"));
      }
      if ((jsonObj.get("file_extension") != null && !jsonObj.get("file_extension").isJsonNull()) && !jsonObj.get("file_extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_extension").toString()));
      }
      if ((jsonObj.get("price_type") != null && !jsonObj.get("price_type").isJsonNull()) && !jsonObj.get("price_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price_type").toString()));
      }
      if (!jsonObj.get("product_sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_sku").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull()) {
        JsonArray jsonArrayvalues = jsonObj.getAsJsonArray("values");
        if (jsonArrayvalues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
          }

          // validate the optional field `values` (array)
          for (int i = 0; i < jsonArrayvalues.size(); i++) {
            CatalogDataProductCustomOptionValuesInterface.validateJsonElement(jsonArrayvalues.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogDataProductCustomOptionInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogDataProductCustomOptionInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogDataProductCustomOptionInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogDataProductCustomOptionInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogDataProductCustomOptionInterface>() {
           @Override
           public void write(JsonWriter out, CatalogDataProductCustomOptionInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogDataProductCustomOptionInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogDataProductCustomOptionInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogDataProductCustomOptionInterface
   * @throws IOException if the JSON string is invalid with respect to CatalogDataProductCustomOptionInterface
   */
  public static CatalogDataProductCustomOptionInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogDataProductCustomOptionInterface.class);
  }

  /**
   * Convert an instance of CatalogDataProductCustomOptionInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

