/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface RequisitionListItemInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequisitionListDataRequisitionListItemInterface {
  public static final String SERIALIZED_NAME_ADDED_AT = "added_at";
  @SerializedName(SERIALIZED_NAME_ADDED_AT)
  private String addedAt;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<String> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_QTY = "qty";
  @SerializedName(SERIALIZED_NAME_QTY)
  private BigDecimal qty;

  public static final String SERIALIZED_NAME_REQUISITION_LIST_ID = "requisition_list_id";
  @SerializedName(SERIALIZED_NAME_REQUISITION_LIST_ID)
  private Integer requisitionListId;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_STORE_ID = "store_id";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private Integer storeId;

  public RequisitionListDataRequisitionListItemInterface() {
  }

  public RequisitionListDataRequisitionListItemInterface addedAt(String addedAt) {
    this.addedAt = addedAt;
    return this;
  }

  /**
   * Added_at value.
   * @return addedAt
   */
  @javax.annotation.Nonnull
  public String getAddedAt() {
    return addedAt;
  }

  public void setAddedAt(String addedAt) {
    this.addedAt = addedAt;
  }


  public RequisitionListDataRequisitionListItemInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\RequisitionList\\Api\\Data\\RequisitionListItemInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public RequisitionListDataRequisitionListItemInterface id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Requisition List ID.
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public RequisitionListDataRequisitionListItemInterface options(List<String> options) {
    this.options = options;
    return this;
  }

  public RequisitionListDataRequisitionListItemInterface addOptionsItem(String optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * Requisition list item options.
   * @return options
   */
  @javax.annotation.Nonnull
  public List<String> getOptions() {
    return options;
  }

  public void setOptions(List<String> options) {
    this.options = options;
  }


  public RequisitionListDataRequisitionListItemInterface qty(BigDecimal qty) {
    this.qty = qty;
    return this;
  }

  /**
   * Product Qty.
   * @return qty
   */
  @javax.annotation.Nonnull
  public BigDecimal getQty() {
    return qty;
  }

  public void setQty(BigDecimal qty) {
    this.qty = qty;
  }


  public RequisitionListDataRequisitionListItemInterface requisitionListId(Integer requisitionListId) {
    this.requisitionListId = requisitionListId;
    return this;
  }

  /**
   * Requisition List ID.
   * @return requisitionListId
   */
  @javax.annotation.Nonnull
  public Integer getRequisitionListId() {
    return requisitionListId;
  }

  public void setRequisitionListId(Integer requisitionListId) {
    this.requisitionListId = requisitionListId;
  }


  public RequisitionListDataRequisitionListItemInterface sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Product SKU.
   * @return sku
   */
  @javax.annotation.Nonnull
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public RequisitionListDataRequisitionListItemInterface storeId(Integer storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * Store ID.
   * @return storeId
   */
  @javax.annotation.Nonnull
  public Integer getStoreId() {
    return storeId;
  }

  public void setStoreId(Integer storeId) {
    this.storeId = storeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequisitionListDataRequisitionListItemInterface requisitionListDataRequisitionListItemInterface = (RequisitionListDataRequisitionListItemInterface) o;
    return Objects.equals(this.addedAt, requisitionListDataRequisitionListItemInterface.addedAt) &&
        Objects.equals(this.extensionAttributes, requisitionListDataRequisitionListItemInterface.extensionAttributes) &&
        Objects.equals(this.id, requisitionListDataRequisitionListItemInterface.id) &&
        Objects.equals(this.options, requisitionListDataRequisitionListItemInterface.options) &&
        Objects.equals(this.qty, requisitionListDataRequisitionListItemInterface.qty) &&
        Objects.equals(this.requisitionListId, requisitionListDataRequisitionListItemInterface.requisitionListId) &&
        Objects.equals(this.sku, requisitionListDataRequisitionListItemInterface.sku) &&
        Objects.equals(this.storeId, requisitionListDataRequisitionListItemInterface.storeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedAt, extensionAttributes, id, options, qty, requisitionListId, sku, storeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequisitionListDataRequisitionListItemInterface {\n");
    sb.append("    addedAt: ").append(toIndentedString(addedAt)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    qty: ").append(toIndentedString(qty)).append("\n");
    sb.append("    requisitionListId: ").append(toIndentedString(requisitionListId)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added_at");
    openapiFields.add("extension_attributes");
    openapiFields.add("id");
    openapiFields.add("options");
    openapiFields.add("qty");
    openapiFields.add("requisition_list_id");
    openapiFields.add("sku");
    openapiFields.add("store_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("added_at");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("options");
    openapiRequiredFields.add("qty");
    openapiRequiredFields.add("requisition_list_id");
    openapiRequiredFields.add("sku");
    openapiRequiredFields.add("store_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequisitionListDataRequisitionListItemInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequisitionListDataRequisitionListItemInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequisitionListDataRequisitionListItemInterface is not found in the empty JSON string", RequisitionListDataRequisitionListItemInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequisitionListDataRequisitionListItemInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequisitionListDataRequisitionListItemInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RequisitionListDataRequisitionListItemInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("added_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `added_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("added_at").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("options") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("options").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }
      if (!jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequisitionListDataRequisitionListItemInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequisitionListDataRequisitionListItemInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequisitionListDataRequisitionListItemInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequisitionListDataRequisitionListItemInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<RequisitionListDataRequisitionListItemInterface>() {
           @Override
           public void write(JsonWriter out, RequisitionListDataRequisitionListItemInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequisitionListDataRequisitionListItemInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequisitionListDataRequisitionListItemInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequisitionListDataRequisitionListItemInterface
   * @throws IOException if the JSON string is invalid with respect to RequisitionListDataRequisitionListItemInterface
   */
  public static RequisitionListDataRequisitionListItemInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequisitionListDataRequisitionListItemInterface.class);
  }

  /**
   * Convert an instance of RequisitionListDataRequisitionListItemInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

