/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.NegotiableQuoteDataNegotiableQuoteTotalsInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuoteDataTotalsExtensionInterface {
  public static final String SERIALIZED_NAME_BASE_CUSTOMER_BALANCE_AMOUNT = "base_customer_balance_amount";
  @SerializedName(SERIALIZED_NAME_BASE_CUSTOMER_BALANCE_AMOUNT)
  private BigDecimal baseCustomerBalanceAmount;

  public static final String SERIALIZED_NAME_BASE_REWARD_CURRENCY_AMOUNT = "base_reward_currency_amount";
  @SerializedName(SERIALIZED_NAME_BASE_REWARD_CURRENCY_AMOUNT)
  private BigDecimal baseRewardCurrencyAmount;

  public static final String SERIALIZED_NAME_COUPON_LABEL = "coupon_label";
  @SerializedName(SERIALIZED_NAME_COUPON_LABEL)
  private String couponLabel;

  public static final String SERIALIZED_NAME_CUSTOMER_BALANCE_AMOUNT = "customer_balance_amount";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_BALANCE_AMOUNT)
  private BigDecimal customerBalanceAmount;

  public static final String SERIALIZED_NAME_NEGOTIABLE_QUOTE_TOTALS = "negotiable_quote_totals";
  @SerializedName(SERIALIZED_NAME_NEGOTIABLE_QUOTE_TOTALS)
  private NegotiableQuoteDataNegotiableQuoteTotalsInterface negotiableQuoteTotals;

  public static final String SERIALIZED_NAME_REWARD_CURRENCY_AMOUNT = "reward_currency_amount";
  @SerializedName(SERIALIZED_NAME_REWARD_CURRENCY_AMOUNT)
  private BigDecimal rewardCurrencyAmount;

  public static final String SERIALIZED_NAME_REWARD_POINTS_BALANCE = "reward_points_balance";
  @SerializedName(SERIALIZED_NAME_REWARD_POINTS_BALANCE)
  private BigDecimal rewardPointsBalance;

  public QuoteDataTotalsExtensionInterface() {
  }

  public QuoteDataTotalsExtensionInterface baseCustomerBalanceAmount(BigDecimal baseCustomerBalanceAmount) {
    this.baseCustomerBalanceAmount = baseCustomerBalanceAmount;
    return this;
  }

  /**
   * Get baseCustomerBalanceAmount
   * @return baseCustomerBalanceAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseCustomerBalanceAmount() {
    return baseCustomerBalanceAmount;
  }

  public void setBaseCustomerBalanceAmount(BigDecimal baseCustomerBalanceAmount) {
    this.baseCustomerBalanceAmount = baseCustomerBalanceAmount;
  }


  public QuoteDataTotalsExtensionInterface baseRewardCurrencyAmount(BigDecimal baseRewardCurrencyAmount) {
    this.baseRewardCurrencyAmount = baseRewardCurrencyAmount;
    return this;
  }

  /**
   * Get baseRewardCurrencyAmount
   * @return baseRewardCurrencyAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseRewardCurrencyAmount() {
    return baseRewardCurrencyAmount;
  }

  public void setBaseRewardCurrencyAmount(BigDecimal baseRewardCurrencyAmount) {
    this.baseRewardCurrencyAmount = baseRewardCurrencyAmount;
  }


  public QuoteDataTotalsExtensionInterface couponLabel(String couponLabel) {
    this.couponLabel = couponLabel;
    return this;
  }

  /**
   * Get couponLabel
   * @return couponLabel
   */
  @javax.annotation.Nullable
  public String getCouponLabel() {
    return couponLabel;
  }

  public void setCouponLabel(String couponLabel) {
    this.couponLabel = couponLabel;
  }


  public QuoteDataTotalsExtensionInterface customerBalanceAmount(BigDecimal customerBalanceAmount) {
    this.customerBalanceAmount = customerBalanceAmount;
    return this;
  }

  /**
   * Get customerBalanceAmount
   * @return customerBalanceAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getCustomerBalanceAmount() {
    return customerBalanceAmount;
  }

  public void setCustomerBalanceAmount(BigDecimal customerBalanceAmount) {
    this.customerBalanceAmount = customerBalanceAmount;
  }


  public QuoteDataTotalsExtensionInterface negotiableQuoteTotals(NegotiableQuoteDataNegotiableQuoteTotalsInterface negotiableQuoteTotals) {
    this.negotiableQuoteTotals = negotiableQuoteTotals;
    return this;
  }

  /**
   * Get negotiableQuoteTotals
   * @return negotiableQuoteTotals
   */
  @javax.annotation.Nullable
  public NegotiableQuoteDataNegotiableQuoteTotalsInterface getNegotiableQuoteTotals() {
    return negotiableQuoteTotals;
  }

  public void setNegotiableQuoteTotals(NegotiableQuoteDataNegotiableQuoteTotalsInterface negotiableQuoteTotals) {
    this.negotiableQuoteTotals = negotiableQuoteTotals;
  }


  public QuoteDataTotalsExtensionInterface rewardCurrencyAmount(BigDecimal rewardCurrencyAmount) {
    this.rewardCurrencyAmount = rewardCurrencyAmount;
    return this;
  }

  /**
   * Get rewardCurrencyAmount
   * @return rewardCurrencyAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getRewardCurrencyAmount() {
    return rewardCurrencyAmount;
  }

  public void setRewardCurrencyAmount(BigDecimal rewardCurrencyAmount) {
    this.rewardCurrencyAmount = rewardCurrencyAmount;
  }


  public QuoteDataTotalsExtensionInterface rewardPointsBalance(BigDecimal rewardPointsBalance) {
    this.rewardPointsBalance = rewardPointsBalance;
    return this;
  }

  /**
   * Get rewardPointsBalance
   * @return rewardPointsBalance
   */
  @javax.annotation.Nullable
  public BigDecimal getRewardPointsBalance() {
    return rewardPointsBalance;
  }

  public void setRewardPointsBalance(BigDecimal rewardPointsBalance) {
    this.rewardPointsBalance = rewardPointsBalance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteDataTotalsExtensionInterface quoteDataTotalsExtensionInterface = (QuoteDataTotalsExtensionInterface) o;
    return Objects.equals(this.baseCustomerBalanceAmount, quoteDataTotalsExtensionInterface.baseCustomerBalanceAmount) &&
        Objects.equals(this.baseRewardCurrencyAmount, quoteDataTotalsExtensionInterface.baseRewardCurrencyAmount) &&
        Objects.equals(this.couponLabel, quoteDataTotalsExtensionInterface.couponLabel) &&
        Objects.equals(this.customerBalanceAmount, quoteDataTotalsExtensionInterface.customerBalanceAmount) &&
        Objects.equals(this.negotiableQuoteTotals, quoteDataTotalsExtensionInterface.negotiableQuoteTotals) &&
        Objects.equals(this.rewardCurrencyAmount, quoteDataTotalsExtensionInterface.rewardCurrencyAmount) &&
        Objects.equals(this.rewardPointsBalance, quoteDataTotalsExtensionInterface.rewardPointsBalance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseCustomerBalanceAmount, baseRewardCurrencyAmount, couponLabel, customerBalanceAmount, negotiableQuoteTotals, rewardCurrencyAmount, rewardPointsBalance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteDataTotalsExtensionInterface {\n");
    sb.append("    baseCustomerBalanceAmount: ").append(toIndentedString(baseCustomerBalanceAmount)).append("\n");
    sb.append("    baseRewardCurrencyAmount: ").append(toIndentedString(baseRewardCurrencyAmount)).append("\n");
    sb.append("    couponLabel: ").append(toIndentedString(couponLabel)).append("\n");
    sb.append("    customerBalanceAmount: ").append(toIndentedString(customerBalanceAmount)).append("\n");
    sb.append("    negotiableQuoteTotals: ").append(toIndentedString(negotiableQuoteTotals)).append("\n");
    sb.append("    rewardCurrencyAmount: ").append(toIndentedString(rewardCurrencyAmount)).append("\n");
    sb.append("    rewardPointsBalance: ").append(toIndentedString(rewardPointsBalance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_customer_balance_amount");
    openapiFields.add("base_reward_currency_amount");
    openapiFields.add("coupon_label");
    openapiFields.add("customer_balance_amount");
    openapiFields.add("negotiable_quote_totals");
    openapiFields.add("reward_currency_amount");
    openapiFields.add("reward_points_balance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuoteDataTotalsExtensionInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuoteDataTotalsExtensionInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuoteDataTotalsExtensionInterface is not found in the empty JSON string", QuoteDataTotalsExtensionInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuoteDataTotalsExtensionInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuoteDataTotalsExtensionInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("coupon_label") != null && !jsonObj.get("coupon_label").isJsonNull()) && !jsonObj.get("coupon_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coupon_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coupon_label").toString()));
      }
      // validate the optional field `negotiable_quote_totals`
      if (jsonObj.get("negotiable_quote_totals") != null && !jsonObj.get("negotiable_quote_totals").isJsonNull()) {
        NegotiableQuoteDataNegotiableQuoteTotalsInterface.validateJsonElement(jsonObj.get("negotiable_quote_totals"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuoteDataTotalsExtensionInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuoteDataTotalsExtensionInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuoteDataTotalsExtensionInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuoteDataTotalsExtensionInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<QuoteDataTotalsExtensionInterface>() {
           @Override
           public void write(JsonWriter out, QuoteDataTotalsExtensionInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuoteDataTotalsExtensionInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuoteDataTotalsExtensionInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuoteDataTotalsExtensionInterface
   * @throws IOException if the JSON string is invalid with respect to QuoteDataTotalsExtensionInterface
   */
  public static QuoteDataTotalsExtensionInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuoteDataTotalsExtensionInterface.class);
  }

  /**
   * Convert an instance of QuoteDataTotalsExtensionInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

