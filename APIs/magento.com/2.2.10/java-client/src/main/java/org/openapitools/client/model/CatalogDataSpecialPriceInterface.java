/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Product Special Price Interface is used to encapsulate data that can be processed by efficient price API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogDataSpecialPriceInterface {
  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_PRICE_FROM = "price_from";
  @SerializedName(SERIALIZED_NAME_PRICE_FROM)
  private String priceFrom;

  public static final String SERIALIZED_NAME_PRICE_TO = "price_to";
  @SerializedName(SERIALIZED_NAME_PRICE_TO)
  private String priceTo;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_STORE_ID = "store_id";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private Integer storeId;

  public CatalogDataSpecialPriceInterface() {
  }

  public CatalogDataSpecialPriceInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\SpecialPriceInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public CatalogDataSpecialPriceInterface price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Product special price value.
   * @return price
   */
  @javax.annotation.Nonnull
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public CatalogDataSpecialPriceInterface priceFrom(String priceFrom) {
    this.priceFrom = priceFrom;
    return this;
  }

  /**
   * Start date for special price in Y-m-d H:i:s format.
   * @return priceFrom
   */
  @javax.annotation.Nonnull
  public String getPriceFrom() {
    return priceFrom;
  }

  public void setPriceFrom(String priceFrom) {
    this.priceFrom = priceFrom;
  }


  public CatalogDataSpecialPriceInterface priceTo(String priceTo) {
    this.priceTo = priceTo;
    return this;
  }

  /**
   * End date for special price in Y-m-d H:i:s format.
   * @return priceTo
   */
  @javax.annotation.Nonnull
  public String getPriceTo() {
    return priceTo;
  }

  public void setPriceTo(String priceTo) {
    this.priceTo = priceTo;
  }


  public CatalogDataSpecialPriceInterface sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * SKU of product, that contains special price value.
   * @return sku
   */
  @javax.annotation.Nonnull
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public CatalogDataSpecialPriceInterface storeId(Integer storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * ID of store, that contains special price value.
   * @return storeId
   */
  @javax.annotation.Nonnull
  public Integer getStoreId() {
    return storeId;
  }

  public void setStoreId(Integer storeId) {
    this.storeId = storeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataSpecialPriceInterface catalogDataSpecialPriceInterface = (CatalogDataSpecialPriceInterface) o;
    return Objects.equals(this.extensionAttributes, catalogDataSpecialPriceInterface.extensionAttributes) &&
        Objects.equals(this.price, catalogDataSpecialPriceInterface.price) &&
        Objects.equals(this.priceFrom, catalogDataSpecialPriceInterface.priceFrom) &&
        Objects.equals(this.priceTo, catalogDataSpecialPriceInterface.priceTo) &&
        Objects.equals(this.sku, catalogDataSpecialPriceInterface.sku) &&
        Objects.equals(this.storeId, catalogDataSpecialPriceInterface.storeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extensionAttributes, price, priceFrom, priceTo, sku, storeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataSpecialPriceInterface {\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceFrom: ").append(toIndentedString(priceFrom)).append("\n");
    sb.append("    priceTo: ").append(toIndentedString(priceTo)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extension_attributes");
    openapiFields.add("price");
    openapiFields.add("price_from");
    openapiFields.add("price_to");
    openapiFields.add("sku");
    openapiFields.add("store_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("price_from");
    openapiRequiredFields.add("price_to");
    openapiRequiredFields.add("sku");
    openapiRequiredFields.add("store_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogDataSpecialPriceInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogDataSpecialPriceInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogDataSpecialPriceInterface is not found in the empty JSON string", CatalogDataSpecialPriceInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogDataSpecialPriceInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogDataSpecialPriceInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogDataSpecialPriceInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("price_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price_from").toString()));
      }
      if (!jsonObj.get("price_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price_to").toString()));
      }
      if (!jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogDataSpecialPriceInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogDataSpecialPriceInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogDataSpecialPriceInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogDataSpecialPriceInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogDataSpecialPriceInterface>() {
           @Override
           public void write(JsonWriter out, CatalogDataSpecialPriceInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogDataSpecialPriceInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogDataSpecialPriceInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogDataSpecialPriceInterface
   * @throws IOException if the JSON string is invalid with respect to CatalogDataSpecialPriceInterface
   */
  public static CatalogDataSpecialPriceInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogDataSpecialPriceInterface.class);
  }

  /**
   * Convert an instance of CatalogDataSpecialPriceInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

