/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface CategoryInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RmaDataItemInterface {
  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private Integer entityId;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_ORDER_ITEM_ID = "order_item_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ITEM_ID)
  private Integer orderItemId;

  public static final String SERIALIZED_NAME_QTY_APPROVED = "qty_approved";
  @SerializedName(SERIALIZED_NAME_QTY_APPROVED)
  private Integer qtyApproved;

  public static final String SERIALIZED_NAME_QTY_AUTHORIZED = "qty_authorized";
  @SerializedName(SERIALIZED_NAME_QTY_AUTHORIZED)
  private Integer qtyAuthorized;

  public static final String SERIALIZED_NAME_QTY_REQUESTED = "qty_requested";
  @SerializedName(SERIALIZED_NAME_QTY_REQUESTED)
  private Integer qtyRequested;

  public static final String SERIALIZED_NAME_QTY_RETURNED = "qty_returned";
  @SerializedName(SERIALIZED_NAME_QTY_RETURNED)
  private Integer qtyReturned;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private String resolution;

  public static final String SERIALIZED_NAME_RMA_ENTITY_ID = "rma_entity_id";
  @SerializedName(SERIALIZED_NAME_RMA_ENTITY_ID)
  private Integer rmaEntityId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public RmaDataItemInterface() {
  }

  public RmaDataItemInterface condition(String condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Condition
   * @return condition
   */
  @javax.annotation.Nonnull
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }


  public RmaDataItemInterface entityId(Integer entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Id
   * @return entityId
   */
  @javax.annotation.Nonnull
  public Integer getEntityId() {
    return entityId;
  }

  public void setEntityId(Integer entityId) {
    this.entityId = entityId;
  }


  public RmaDataItemInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\ItemInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public RmaDataItemInterface orderItemId(Integer orderItemId) {
    this.orderItemId = orderItemId;
    return this;
  }

  /**
   * Order_item_id
   * @return orderItemId
   */
  @javax.annotation.Nonnull
  public Integer getOrderItemId() {
    return orderItemId;
  }

  public void setOrderItemId(Integer orderItemId) {
    this.orderItemId = orderItemId;
  }


  public RmaDataItemInterface qtyApproved(Integer qtyApproved) {
    this.qtyApproved = qtyApproved;
    return this;
  }

  /**
   * Qty_approved
   * @return qtyApproved
   */
  @javax.annotation.Nonnull
  public Integer getQtyApproved() {
    return qtyApproved;
  }

  public void setQtyApproved(Integer qtyApproved) {
    this.qtyApproved = qtyApproved;
  }


  public RmaDataItemInterface qtyAuthorized(Integer qtyAuthorized) {
    this.qtyAuthorized = qtyAuthorized;
    return this;
  }

  /**
   * Qty_authorized
   * @return qtyAuthorized
   */
  @javax.annotation.Nonnull
  public Integer getQtyAuthorized() {
    return qtyAuthorized;
  }

  public void setQtyAuthorized(Integer qtyAuthorized) {
    this.qtyAuthorized = qtyAuthorized;
  }


  public RmaDataItemInterface qtyRequested(Integer qtyRequested) {
    this.qtyRequested = qtyRequested;
    return this;
  }

  /**
   * Qty_requested
   * @return qtyRequested
   */
  @javax.annotation.Nonnull
  public Integer getQtyRequested() {
    return qtyRequested;
  }

  public void setQtyRequested(Integer qtyRequested) {
    this.qtyRequested = qtyRequested;
  }


  public RmaDataItemInterface qtyReturned(Integer qtyReturned) {
    this.qtyReturned = qtyReturned;
    return this;
  }

  /**
   * Qty_returned
   * @return qtyReturned
   */
  @javax.annotation.Nonnull
  public Integer getQtyReturned() {
    return qtyReturned;
  }

  public void setQtyReturned(Integer qtyReturned) {
    this.qtyReturned = qtyReturned;
  }


  public RmaDataItemInterface reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Reason
   * @return reason
   */
  @javax.annotation.Nonnull
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public RmaDataItemInterface resolution(String resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * Resolution
   * @return resolution
   */
  @javax.annotation.Nonnull
  public String getResolution() {
    return resolution;
  }

  public void setResolution(String resolution) {
    this.resolution = resolution;
  }


  public RmaDataItemInterface rmaEntityId(Integer rmaEntityId) {
    this.rmaEntityId = rmaEntityId;
    return this;
  }

  /**
   * RMA id
   * @return rmaEntityId
   */
  @javax.annotation.Nonnull
  public Integer getRmaEntityId() {
    return rmaEntityId;
  }

  public void setRmaEntityId(Integer rmaEntityId) {
    this.rmaEntityId = rmaEntityId;
  }


  public RmaDataItemInterface status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RmaDataItemInterface rmaDataItemInterface = (RmaDataItemInterface) o;
    return Objects.equals(this.condition, rmaDataItemInterface.condition) &&
        Objects.equals(this.entityId, rmaDataItemInterface.entityId) &&
        Objects.equals(this.extensionAttributes, rmaDataItemInterface.extensionAttributes) &&
        Objects.equals(this.orderItemId, rmaDataItemInterface.orderItemId) &&
        Objects.equals(this.qtyApproved, rmaDataItemInterface.qtyApproved) &&
        Objects.equals(this.qtyAuthorized, rmaDataItemInterface.qtyAuthorized) &&
        Objects.equals(this.qtyRequested, rmaDataItemInterface.qtyRequested) &&
        Objects.equals(this.qtyReturned, rmaDataItemInterface.qtyReturned) &&
        Objects.equals(this.reason, rmaDataItemInterface.reason) &&
        Objects.equals(this.resolution, rmaDataItemInterface.resolution) &&
        Objects.equals(this.rmaEntityId, rmaDataItemInterface.rmaEntityId) &&
        Objects.equals(this.status, rmaDataItemInterface.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, entityId, extensionAttributes, orderItemId, qtyApproved, qtyAuthorized, qtyRequested, qtyReturned, reason, resolution, rmaEntityId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RmaDataItemInterface {\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    orderItemId: ").append(toIndentedString(orderItemId)).append("\n");
    sb.append("    qtyApproved: ").append(toIndentedString(qtyApproved)).append("\n");
    sb.append("    qtyAuthorized: ").append(toIndentedString(qtyAuthorized)).append("\n");
    sb.append("    qtyRequested: ").append(toIndentedString(qtyRequested)).append("\n");
    sb.append("    qtyReturned: ").append(toIndentedString(qtyReturned)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    rmaEntityId: ").append(toIndentedString(rmaEntityId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("condition");
    openapiFields.add("entity_id");
    openapiFields.add("extension_attributes");
    openapiFields.add("order_item_id");
    openapiFields.add("qty_approved");
    openapiFields.add("qty_authorized");
    openapiFields.add("qty_requested");
    openapiFields.add("qty_returned");
    openapiFields.add("reason");
    openapiFields.add("resolution");
    openapiFields.add("rma_entity_id");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("condition");
    openapiRequiredFields.add("entity_id");
    openapiRequiredFields.add("order_item_id");
    openapiRequiredFields.add("qty_approved");
    openapiRequiredFields.add("qty_authorized");
    openapiRequiredFields.add("qty_requested");
    openapiRequiredFields.add("qty_returned");
    openapiRequiredFields.add("reason");
    openapiRequiredFields.add("resolution");
    openapiRequiredFields.add("rma_entity_id");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RmaDataItemInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RmaDataItemInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RmaDataItemInterface is not found in the empty JSON string", RmaDataItemInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RmaDataItemInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RmaDataItemInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RmaDataItemInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      if (!jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if (!jsonObj.get("resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RmaDataItemInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RmaDataItemInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RmaDataItemInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RmaDataItemInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<RmaDataItemInterface>() {
           @Override
           public void write(JsonWriter out, RmaDataItemInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RmaDataItemInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RmaDataItemInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RmaDataItemInterface
   * @throws IOException if the JSON string is invalid with respect to RmaDataItemInterface
   */
  public static RmaDataItemInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RmaDataItemInterface.class);
  }

  /**
   * Convert an instance of RmaDataItemInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

