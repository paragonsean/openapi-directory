/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QuoteDataTotalSegmentInterface;
import org.openapitools.client.model.QuoteDataTotalsExtensionInterface;
import org.openapitools.client.model.QuoteDataTotalsItemInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface TotalsInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuoteDataTotalsInterface {
  public static final String SERIALIZED_NAME_BASE_CURRENCY_CODE = "base_currency_code";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY_CODE)
  private String baseCurrencyCode;

  public static final String SERIALIZED_NAME_BASE_DISCOUNT_AMOUNT = "base_discount_amount";
  @SerializedName(SERIALIZED_NAME_BASE_DISCOUNT_AMOUNT)
  private BigDecimal baseDiscountAmount;

  public static final String SERIALIZED_NAME_BASE_GRAND_TOTAL = "base_grand_total";
  @SerializedName(SERIALIZED_NAME_BASE_GRAND_TOTAL)
  private BigDecimal baseGrandTotal;

  public static final String SERIALIZED_NAME_BASE_SHIPPING_AMOUNT = "base_shipping_amount";
  @SerializedName(SERIALIZED_NAME_BASE_SHIPPING_AMOUNT)
  private BigDecimal baseShippingAmount;

  public static final String SERIALIZED_NAME_BASE_SHIPPING_DISCOUNT_AMOUNT = "base_shipping_discount_amount";
  @SerializedName(SERIALIZED_NAME_BASE_SHIPPING_DISCOUNT_AMOUNT)
  private BigDecimal baseShippingDiscountAmount;

  public static final String SERIALIZED_NAME_BASE_SHIPPING_INCL_TAX = "base_shipping_incl_tax";
  @SerializedName(SERIALIZED_NAME_BASE_SHIPPING_INCL_TAX)
  private BigDecimal baseShippingInclTax;

  public static final String SERIALIZED_NAME_BASE_SHIPPING_TAX_AMOUNT = "base_shipping_tax_amount";
  @SerializedName(SERIALIZED_NAME_BASE_SHIPPING_TAX_AMOUNT)
  private BigDecimal baseShippingTaxAmount;

  public static final String SERIALIZED_NAME_BASE_SUBTOTAL = "base_subtotal";
  @SerializedName(SERIALIZED_NAME_BASE_SUBTOTAL)
  private BigDecimal baseSubtotal;

  public static final String SERIALIZED_NAME_BASE_SUBTOTAL_INCL_TAX = "base_subtotal_incl_tax";
  @SerializedName(SERIALIZED_NAME_BASE_SUBTOTAL_INCL_TAX)
  private BigDecimal baseSubtotalInclTax;

  public static final String SERIALIZED_NAME_BASE_SUBTOTAL_WITH_DISCOUNT = "base_subtotal_with_discount";
  @SerializedName(SERIALIZED_NAME_BASE_SUBTOTAL_WITH_DISCOUNT)
  private BigDecimal baseSubtotalWithDiscount;

  public static final String SERIALIZED_NAME_BASE_TAX_AMOUNT = "base_tax_amount";
  @SerializedName(SERIALIZED_NAME_BASE_TAX_AMOUNT)
  private BigDecimal baseTaxAmount;

  public static final String SERIALIZED_NAME_COUPON_CODE = "coupon_code";
  @SerializedName(SERIALIZED_NAME_COUPON_CODE)
  private String couponCode;

  public static final String SERIALIZED_NAME_DISCOUNT_AMOUNT = "discount_amount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_AMOUNT)
  private BigDecimal discountAmount;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private QuoteDataTotalsExtensionInterface extensionAttributes;

  public static final String SERIALIZED_NAME_GRAND_TOTAL = "grand_total";
  @SerializedName(SERIALIZED_NAME_GRAND_TOTAL)
  private BigDecimal grandTotal;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<QuoteDataTotalsItemInterface> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEMS_QTY = "items_qty";
  @SerializedName(SERIALIZED_NAME_ITEMS_QTY)
  private Integer itemsQty;

  public static final String SERIALIZED_NAME_QUOTE_CURRENCY_CODE = "quote_currency_code";
  @SerializedName(SERIALIZED_NAME_QUOTE_CURRENCY_CODE)
  private String quoteCurrencyCode;

  public static final String SERIALIZED_NAME_SHIPPING_AMOUNT = "shipping_amount";
  @SerializedName(SERIALIZED_NAME_SHIPPING_AMOUNT)
  private BigDecimal shippingAmount;

  public static final String SERIALIZED_NAME_SHIPPING_DISCOUNT_AMOUNT = "shipping_discount_amount";
  @SerializedName(SERIALIZED_NAME_SHIPPING_DISCOUNT_AMOUNT)
  private BigDecimal shippingDiscountAmount;

  public static final String SERIALIZED_NAME_SHIPPING_INCL_TAX = "shipping_incl_tax";
  @SerializedName(SERIALIZED_NAME_SHIPPING_INCL_TAX)
  private BigDecimal shippingInclTax;

  public static final String SERIALIZED_NAME_SHIPPING_TAX_AMOUNT = "shipping_tax_amount";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TAX_AMOUNT)
  private BigDecimal shippingTaxAmount;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private BigDecimal subtotal;

  public static final String SERIALIZED_NAME_SUBTOTAL_INCL_TAX = "subtotal_incl_tax";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_INCL_TAX)
  private BigDecimal subtotalInclTax;

  public static final String SERIALIZED_NAME_SUBTOTAL_WITH_DISCOUNT = "subtotal_with_discount";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_WITH_DISCOUNT)
  private BigDecimal subtotalWithDiscount;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "tax_amount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private BigDecimal taxAmount;

  public static final String SERIALIZED_NAME_TOTAL_SEGMENTS = "total_segments";
  @SerializedName(SERIALIZED_NAME_TOTAL_SEGMENTS)
  private List<QuoteDataTotalSegmentInterface> totalSegments = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEEE_TAX_APPLIED_AMOUNT = "weee_tax_applied_amount";
  @SerializedName(SERIALIZED_NAME_WEEE_TAX_APPLIED_AMOUNT)
  private BigDecimal weeeTaxAppliedAmount;

  public QuoteDataTotalsInterface() {
  }

  public QuoteDataTotalsInterface baseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
    return this;
  }

  /**
   * Base currency code
   * @return baseCurrencyCode
   */
  @javax.annotation.Nullable
  public String getBaseCurrencyCode() {
    return baseCurrencyCode;
  }

  public void setBaseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
  }


  public QuoteDataTotalsInterface baseDiscountAmount(BigDecimal baseDiscountAmount) {
    this.baseDiscountAmount = baseDiscountAmount;
    return this;
  }

  /**
   * Discount amount in base currency
   * @return baseDiscountAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseDiscountAmount() {
    return baseDiscountAmount;
  }

  public void setBaseDiscountAmount(BigDecimal baseDiscountAmount) {
    this.baseDiscountAmount = baseDiscountAmount;
  }


  public QuoteDataTotalsInterface baseGrandTotal(BigDecimal baseGrandTotal) {
    this.baseGrandTotal = baseGrandTotal;
    return this;
  }

  /**
   * Grand total in base currency
   * @return baseGrandTotal
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseGrandTotal() {
    return baseGrandTotal;
  }

  public void setBaseGrandTotal(BigDecimal baseGrandTotal) {
    this.baseGrandTotal = baseGrandTotal;
  }


  public QuoteDataTotalsInterface baseShippingAmount(BigDecimal baseShippingAmount) {
    this.baseShippingAmount = baseShippingAmount;
    return this;
  }

  /**
   * Shipping amount in base currency
   * @return baseShippingAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseShippingAmount() {
    return baseShippingAmount;
  }

  public void setBaseShippingAmount(BigDecimal baseShippingAmount) {
    this.baseShippingAmount = baseShippingAmount;
  }


  public QuoteDataTotalsInterface baseShippingDiscountAmount(BigDecimal baseShippingDiscountAmount) {
    this.baseShippingDiscountAmount = baseShippingDiscountAmount;
    return this;
  }

  /**
   * Shipping discount amount in base currency
   * @return baseShippingDiscountAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseShippingDiscountAmount() {
    return baseShippingDiscountAmount;
  }

  public void setBaseShippingDiscountAmount(BigDecimal baseShippingDiscountAmount) {
    this.baseShippingDiscountAmount = baseShippingDiscountAmount;
  }


  public QuoteDataTotalsInterface baseShippingInclTax(BigDecimal baseShippingInclTax) {
    this.baseShippingInclTax = baseShippingInclTax;
    return this;
  }

  /**
   * Shipping including tax in base currency
   * @return baseShippingInclTax
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseShippingInclTax() {
    return baseShippingInclTax;
  }

  public void setBaseShippingInclTax(BigDecimal baseShippingInclTax) {
    this.baseShippingInclTax = baseShippingInclTax;
  }


  public QuoteDataTotalsInterface baseShippingTaxAmount(BigDecimal baseShippingTaxAmount) {
    this.baseShippingTaxAmount = baseShippingTaxAmount;
    return this;
  }

  /**
   * Shipping tax amount in base currency
   * @return baseShippingTaxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseShippingTaxAmount() {
    return baseShippingTaxAmount;
  }

  public void setBaseShippingTaxAmount(BigDecimal baseShippingTaxAmount) {
    this.baseShippingTaxAmount = baseShippingTaxAmount;
  }


  public QuoteDataTotalsInterface baseSubtotal(BigDecimal baseSubtotal) {
    this.baseSubtotal = baseSubtotal;
    return this;
  }

  /**
   * Subtotal in base currency
   * @return baseSubtotal
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseSubtotal() {
    return baseSubtotal;
  }

  public void setBaseSubtotal(BigDecimal baseSubtotal) {
    this.baseSubtotal = baseSubtotal;
  }


  public QuoteDataTotalsInterface baseSubtotalInclTax(BigDecimal baseSubtotalInclTax) {
    this.baseSubtotalInclTax = baseSubtotalInclTax;
    return this;
  }

  /**
   * Subtotal including tax in base currency
   * @return baseSubtotalInclTax
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseSubtotalInclTax() {
    return baseSubtotalInclTax;
  }

  public void setBaseSubtotalInclTax(BigDecimal baseSubtotalInclTax) {
    this.baseSubtotalInclTax = baseSubtotalInclTax;
  }


  public QuoteDataTotalsInterface baseSubtotalWithDiscount(BigDecimal baseSubtotalWithDiscount) {
    this.baseSubtotalWithDiscount = baseSubtotalWithDiscount;
    return this;
  }

  /**
   * Subtotal in base currency with applied discount
   * @return baseSubtotalWithDiscount
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseSubtotalWithDiscount() {
    return baseSubtotalWithDiscount;
  }

  public void setBaseSubtotalWithDiscount(BigDecimal baseSubtotalWithDiscount) {
    this.baseSubtotalWithDiscount = baseSubtotalWithDiscount;
  }


  public QuoteDataTotalsInterface baseTaxAmount(BigDecimal baseTaxAmount) {
    this.baseTaxAmount = baseTaxAmount;
    return this;
  }

  /**
   * Tax amount in base currency
   * @return baseTaxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseTaxAmount() {
    return baseTaxAmount;
  }

  public void setBaseTaxAmount(BigDecimal baseTaxAmount) {
    this.baseTaxAmount = baseTaxAmount;
  }


  public QuoteDataTotalsInterface couponCode(String couponCode) {
    this.couponCode = couponCode;
    return this;
  }

  /**
   * Applied coupon code
   * @return couponCode
   */
  @javax.annotation.Nullable
  public String getCouponCode() {
    return couponCode;
  }

  public void setCouponCode(String couponCode) {
    this.couponCode = couponCode;
  }


  public QuoteDataTotalsInterface discountAmount(BigDecimal discountAmount) {
    this.discountAmount = discountAmount;
    return this;
  }

  /**
   * Discount amount in quote currency
   * @return discountAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getDiscountAmount() {
    return discountAmount;
  }

  public void setDiscountAmount(BigDecimal discountAmount) {
    this.discountAmount = discountAmount;
  }


  public QuoteDataTotalsInterface extensionAttributes(QuoteDataTotalsExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * Get extensionAttributes
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public QuoteDataTotalsExtensionInterface getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(QuoteDataTotalsExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public QuoteDataTotalsInterface grandTotal(BigDecimal grandTotal) {
    this.grandTotal = grandTotal;
    return this;
  }

  /**
   * Grand total in quote currency
   * @return grandTotal
   */
  @javax.annotation.Nullable
  public BigDecimal getGrandTotal() {
    return grandTotal;
  }

  public void setGrandTotal(BigDecimal grandTotal) {
    this.grandTotal = grandTotal;
  }


  public QuoteDataTotalsInterface items(List<QuoteDataTotalsItemInterface> items) {
    this.items = items;
    return this;
  }

  public QuoteDataTotalsInterface addItemsItem(QuoteDataTotalsItemInterface itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Totals by items
   * @return items
   */
  @javax.annotation.Nullable
  public List<QuoteDataTotalsItemInterface> getItems() {
    return items;
  }

  public void setItems(List<QuoteDataTotalsItemInterface> items) {
    this.items = items;
  }


  public QuoteDataTotalsInterface itemsQty(Integer itemsQty) {
    this.itemsQty = itemsQty;
    return this;
  }

  /**
   * Items qty
   * @return itemsQty
   */
  @javax.annotation.Nullable
  public Integer getItemsQty() {
    return itemsQty;
  }

  public void setItemsQty(Integer itemsQty) {
    this.itemsQty = itemsQty;
  }


  public QuoteDataTotalsInterface quoteCurrencyCode(String quoteCurrencyCode) {
    this.quoteCurrencyCode = quoteCurrencyCode;
    return this;
  }

  /**
   * Quote currency code
   * @return quoteCurrencyCode
   */
  @javax.annotation.Nullable
  public String getQuoteCurrencyCode() {
    return quoteCurrencyCode;
  }

  public void setQuoteCurrencyCode(String quoteCurrencyCode) {
    this.quoteCurrencyCode = quoteCurrencyCode;
  }


  public QuoteDataTotalsInterface shippingAmount(BigDecimal shippingAmount) {
    this.shippingAmount = shippingAmount;
    return this;
  }

  /**
   * Shipping amount in quote currency
   * @return shippingAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getShippingAmount() {
    return shippingAmount;
  }

  public void setShippingAmount(BigDecimal shippingAmount) {
    this.shippingAmount = shippingAmount;
  }


  public QuoteDataTotalsInterface shippingDiscountAmount(BigDecimal shippingDiscountAmount) {
    this.shippingDiscountAmount = shippingDiscountAmount;
    return this;
  }

  /**
   * Shipping discount amount in quote currency
   * @return shippingDiscountAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getShippingDiscountAmount() {
    return shippingDiscountAmount;
  }

  public void setShippingDiscountAmount(BigDecimal shippingDiscountAmount) {
    this.shippingDiscountAmount = shippingDiscountAmount;
  }


  public QuoteDataTotalsInterface shippingInclTax(BigDecimal shippingInclTax) {
    this.shippingInclTax = shippingInclTax;
    return this;
  }

  /**
   * Shipping including tax in quote currency
   * @return shippingInclTax
   */
  @javax.annotation.Nullable
  public BigDecimal getShippingInclTax() {
    return shippingInclTax;
  }

  public void setShippingInclTax(BigDecimal shippingInclTax) {
    this.shippingInclTax = shippingInclTax;
  }


  public QuoteDataTotalsInterface shippingTaxAmount(BigDecimal shippingTaxAmount) {
    this.shippingTaxAmount = shippingTaxAmount;
    return this;
  }

  /**
   * Shipping tax amount in quote currency
   * @return shippingTaxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getShippingTaxAmount() {
    return shippingTaxAmount;
  }

  public void setShippingTaxAmount(BigDecimal shippingTaxAmount) {
    this.shippingTaxAmount = shippingTaxAmount;
  }


  public QuoteDataTotalsInterface subtotal(BigDecimal subtotal) {
    this.subtotal = subtotal;
    return this;
  }

  /**
   * Subtotal in quote currency
   * @return subtotal
   */
  @javax.annotation.Nullable
  public BigDecimal getSubtotal() {
    return subtotal;
  }

  public void setSubtotal(BigDecimal subtotal) {
    this.subtotal = subtotal;
  }


  public QuoteDataTotalsInterface subtotalInclTax(BigDecimal subtotalInclTax) {
    this.subtotalInclTax = subtotalInclTax;
    return this;
  }

  /**
   * Subtotal including tax in quote currency
   * @return subtotalInclTax
   */
  @javax.annotation.Nullable
  public BigDecimal getSubtotalInclTax() {
    return subtotalInclTax;
  }

  public void setSubtotalInclTax(BigDecimal subtotalInclTax) {
    this.subtotalInclTax = subtotalInclTax;
  }


  public QuoteDataTotalsInterface subtotalWithDiscount(BigDecimal subtotalWithDiscount) {
    this.subtotalWithDiscount = subtotalWithDiscount;
    return this;
  }

  /**
   * Subtotal in quote currency with applied discount
   * @return subtotalWithDiscount
   */
  @javax.annotation.Nullable
  public BigDecimal getSubtotalWithDiscount() {
    return subtotalWithDiscount;
  }

  public void setSubtotalWithDiscount(BigDecimal subtotalWithDiscount) {
    this.subtotalWithDiscount = subtotalWithDiscount;
  }


  public QuoteDataTotalsInterface taxAmount(BigDecimal taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Tax amount in quote currency
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(BigDecimal taxAmount) {
    this.taxAmount = taxAmount;
  }


  public QuoteDataTotalsInterface totalSegments(List<QuoteDataTotalSegmentInterface> totalSegments) {
    this.totalSegments = totalSegments;
    return this;
  }

  public QuoteDataTotalsInterface addTotalSegmentsItem(QuoteDataTotalSegmentInterface totalSegmentsItem) {
    if (this.totalSegments == null) {
      this.totalSegments = new ArrayList<>();
    }
    this.totalSegments.add(totalSegmentsItem);
    return this;
  }

  /**
   * Dynamically calculated totals
   * @return totalSegments
   */
  @javax.annotation.Nonnull
  public List<QuoteDataTotalSegmentInterface> getTotalSegments() {
    return totalSegments;
  }

  public void setTotalSegments(List<QuoteDataTotalSegmentInterface> totalSegments) {
    this.totalSegments = totalSegments;
  }


  public QuoteDataTotalsInterface weeeTaxAppliedAmount(BigDecimal weeeTaxAppliedAmount) {
    this.weeeTaxAppliedAmount = weeeTaxAppliedAmount;
    return this;
  }

  /**
   * Item weee tax applied amount in quote currency.
   * @return weeeTaxAppliedAmount
   */
  @javax.annotation.Nonnull
  public BigDecimal getWeeeTaxAppliedAmount() {
    return weeeTaxAppliedAmount;
  }

  public void setWeeeTaxAppliedAmount(BigDecimal weeeTaxAppliedAmount) {
    this.weeeTaxAppliedAmount = weeeTaxAppliedAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteDataTotalsInterface quoteDataTotalsInterface = (QuoteDataTotalsInterface) o;
    return Objects.equals(this.baseCurrencyCode, quoteDataTotalsInterface.baseCurrencyCode) &&
        Objects.equals(this.baseDiscountAmount, quoteDataTotalsInterface.baseDiscountAmount) &&
        Objects.equals(this.baseGrandTotal, quoteDataTotalsInterface.baseGrandTotal) &&
        Objects.equals(this.baseShippingAmount, quoteDataTotalsInterface.baseShippingAmount) &&
        Objects.equals(this.baseShippingDiscountAmount, quoteDataTotalsInterface.baseShippingDiscountAmount) &&
        Objects.equals(this.baseShippingInclTax, quoteDataTotalsInterface.baseShippingInclTax) &&
        Objects.equals(this.baseShippingTaxAmount, quoteDataTotalsInterface.baseShippingTaxAmount) &&
        Objects.equals(this.baseSubtotal, quoteDataTotalsInterface.baseSubtotal) &&
        Objects.equals(this.baseSubtotalInclTax, quoteDataTotalsInterface.baseSubtotalInclTax) &&
        Objects.equals(this.baseSubtotalWithDiscount, quoteDataTotalsInterface.baseSubtotalWithDiscount) &&
        Objects.equals(this.baseTaxAmount, quoteDataTotalsInterface.baseTaxAmount) &&
        Objects.equals(this.couponCode, quoteDataTotalsInterface.couponCode) &&
        Objects.equals(this.discountAmount, quoteDataTotalsInterface.discountAmount) &&
        Objects.equals(this.extensionAttributes, quoteDataTotalsInterface.extensionAttributes) &&
        Objects.equals(this.grandTotal, quoteDataTotalsInterface.grandTotal) &&
        Objects.equals(this.items, quoteDataTotalsInterface.items) &&
        Objects.equals(this.itemsQty, quoteDataTotalsInterface.itemsQty) &&
        Objects.equals(this.quoteCurrencyCode, quoteDataTotalsInterface.quoteCurrencyCode) &&
        Objects.equals(this.shippingAmount, quoteDataTotalsInterface.shippingAmount) &&
        Objects.equals(this.shippingDiscountAmount, quoteDataTotalsInterface.shippingDiscountAmount) &&
        Objects.equals(this.shippingInclTax, quoteDataTotalsInterface.shippingInclTax) &&
        Objects.equals(this.shippingTaxAmount, quoteDataTotalsInterface.shippingTaxAmount) &&
        Objects.equals(this.subtotal, quoteDataTotalsInterface.subtotal) &&
        Objects.equals(this.subtotalInclTax, quoteDataTotalsInterface.subtotalInclTax) &&
        Objects.equals(this.subtotalWithDiscount, quoteDataTotalsInterface.subtotalWithDiscount) &&
        Objects.equals(this.taxAmount, quoteDataTotalsInterface.taxAmount) &&
        Objects.equals(this.totalSegments, quoteDataTotalsInterface.totalSegments) &&
        Objects.equals(this.weeeTaxAppliedAmount, quoteDataTotalsInterface.weeeTaxAppliedAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseCurrencyCode, baseDiscountAmount, baseGrandTotal, baseShippingAmount, baseShippingDiscountAmount, baseShippingInclTax, baseShippingTaxAmount, baseSubtotal, baseSubtotalInclTax, baseSubtotalWithDiscount, baseTaxAmount, couponCode, discountAmount, extensionAttributes, grandTotal, items, itemsQty, quoteCurrencyCode, shippingAmount, shippingDiscountAmount, shippingInclTax, shippingTaxAmount, subtotal, subtotalInclTax, subtotalWithDiscount, taxAmount, totalSegments, weeeTaxAppliedAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteDataTotalsInterface {\n");
    sb.append("    baseCurrencyCode: ").append(toIndentedString(baseCurrencyCode)).append("\n");
    sb.append("    baseDiscountAmount: ").append(toIndentedString(baseDiscountAmount)).append("\n");
    sb.append("    baseGrandTotal: ").append(toIndentedString(baseGrandTotal)).append("\n");
    sb.append("    baseShippingAmount: ").append(toIndentedString(baseShippingAmount)).append("\n");
    sb.append("    baseShippingDiscountAmount: ").append(toIndentedString(baseShippingDiscountAmount)).append("\n");
    sb.append("    baseShippingInclTax: ").append(toIndentedString(baseShippingInclTax)).append("\n");
    sb.append("    baseShippingTaxAmount: ").append(toIndentedString(baseShippingTaxAmount)).append("\n");
    sb.append("    baseSubtotal: ").append(toIndentedString(baseSubtotal)).append("\n");
    sb.append("    baseSubtotalInclTax: ").append(toIndentedString(baseSubtotalInclTax)).append("\n");
    sb.append("    baseSubtotalWithDiscount: ").append(toIndentedString(baseSubtotalWithDiscount)).append("\n");
    sb.append("    baseTaxAmount: ").append(toIndentedString(baseTaxAmount)).append("\n");
    sb.append("    couponCode: ").append(toIndentedString(couponCode)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    grandTotal: ").append(toIndentedString(grandTotal)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    itemsQty: ").append(toIndentedString(itemsQty)).append("\n");
    sb.append("    quoteCurrencyCode: ").append(toIndentedString(quoteCurrencyCode)).append("\n");
    sb.append("    shippingAmount: ").append(toIndentedString(shippingAmount)).append("\n");
    sb.append("    shippingDiscountAmount: ").append(toIndentedString(shippingDiscountAmount)).append("\n");
    sb.append("    shippingInclTax: ").append(toIndentedString(shippingInclTax)).append("\n");
    sb.append("    shippingTaxAmount: ").append(toIndentedString(shippingTaxAmount)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    subtotalInclTax: ").append(toIndentedString(subtotalInclTax)).append("\n");
    sb.append("    subtotalWithDiscount: ").append(toIndentedString(subtotalWithDiscount)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    totalSegments: ").append(toIndentedString(totalSegments)).append("\n");
    sb.append("    weeeTaxAppliedAmount: ").append(toIndentedString(weeeTaxAppliedAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_currency_code");
    openapiFields.add("base_discount_amount");
    openapiFields.add("base_grand_total");
    openapiFields.add("base_shipping_amount");
    openapiFields.add("base_shipping_discount_amount");
    openapiFields.add("base_shipping_incl_tax");
    openapiFields.add("base_shipping_tax_amount");
    openapiFields.add("base_subtotal");
    openapiFields.add("base_subtotal_incl_tax");
    openapiFields.add("base_subtotal_with_discount");
    openapiFields.add("base_tax_amount");
    openapiFields.add("coupon_code");
    openapiFields.add("discount_amount");
    openapiFields.add("extension_attributes");
    openapiFields.add("grand_total");
    openapiFields.add("items");
    openapiFields.add("items_qty");
    openapiFields.add("quote_currency_code");
    openapiFields.add("shipping_amount");
    openapiFields.add("shipping_discount_amount");
    openapiFields.add("shipping_incl_tax");
    openapiFields.add("shipping_tax_amount");
    openapiFields.add("subtotal");
    openapiFields.add("subtotal_incl_tax");
    openapiFields.add("subtotal_with_discount");
    openapiFields.add("tax_amount");
    openapiFields.add("total_segments");
    openapiFields.add("weee_tax_applied_amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("total_segments");
    openapiRequiredFields.add("weee_tax_applied_amount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuoteDataTotalsInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuoteDataTotalsInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuoteDataTotalsInterface is not found in the empty JSON string", QuoteDataTotalsInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuoteDataTotalsInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuoteDataTotalsInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QuoteDataTotalsInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("base_currency_code") != null && !jsonObj.get("base_currency_code").isJsonNull()) && !jsonObj.get("base_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_currency_code").toString()));
      }
      if ((jsonObj.get("coupon_code") != null && !jsonObj.get("coupon_code").isJsonNull()) && !jsonObj.get("coupon_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coupon_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coupon_code").toString()));
      }
      // validate the optional field `extension_attributes`
      if (jsonObj.get("extension_attributes") != null && !jsonObj.get("extension_attributes").isJsonNull()) {
        QuoteDataTotalsExtensionInterface.validateJsonElement(jsonObj.get("extension_attributes"));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            QuoteDataTotalsItemInterface.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("quote_currency_code") != null && !jsonObj.get("quote_currency_code").isJsonNull()) && !jsonObj.get("quote_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quote_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quote_currency_code").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("total_segments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_segments` to be an array in the JSON string but got `%s`", jsonObj.get("total_segments").toString()));
      }

      JsonArray jsonArraytotalSegments = jsonObj.getAsJsonArray("total_segments");
      // validate the required field `total_segments` (array)
      for (int i = 0; i < jsonArraytotalSegments.size(); i++) {
        QuoteDataTotalSegmentInterface.validateJsonElement(jsonArraytotalSegments.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuoteDataTotalsInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuoteDataTotalsInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuoteDataTotalsInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuoteDataTotalsInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<QuoteDataTotalsInterface>() {
           @Override
           public void write(JsonWriter out, QuoteDataTotalsInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuoteDataTotalsInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuoteDataTotalsInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuoteDataTotalsInterface
   * @throws IOException if the JSON string is invalid with respect to QuoteDataTotalsInterface
   */
  public static QuoteDataTotalsInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuoteDataTotalsInterface.class);
  }

  /**
   * Convert an instance of QuoteDataTotalsInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

