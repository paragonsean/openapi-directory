/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BundleDataOptionInterface;
import org.openapitools.client.model.CatalogDataCategoryLinkInterface;
import org.openapitools.client.model.CatalogInventoryDataStockItemInterface;
import org.openapitools.client.model.ConfigurableProductDataOptionInterface;
import org.openapitools.client.model.DownloadableDataLinkInterface;
import org.openapitools.client.model.DownloadableDataSampleInterface;
import org.openapitools.client.model.GiftCardDataGiftcardAmountInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogDataProductExtensionInterface {
  public static final String SERIALIZED_NAME_BUNDLE_PRODUCT_OPTIONS = "bundle_product_options";
  @SerializedName(SERIALIZED_NAME_BUNDLE_PRODUCT_OPTIONS)
  private List<BundleDataOptionInterface> bundleProductOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_LINKS = "category_links";
  @SerializedName(SERIALIZED_NAME_CATEGORY_LINKS)
  private List<CatalogDataCategoryLinkInterface> categoryLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIGURABLE_PRODUCT_LINKS = "configurable_product_links";
  @SerializedName(SERIALIZED_NAME_CONFIGURABLE_PRODUCT_LINKS)
  private List<Integer> configurableProductLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIGURABLE_PRODUCT_OPTIONS = "configurable_product_options";
  @SerializedName(SERIALIZED_NAME_CONFIGURABLE_PRODUCT_OPTIONS)
  private List<ConfigurableProductDataOptionInterface> configurableProductOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOWNLOADABLE_PRODUCT_LINKS = "downloadable_product_links";
  @SerializedName(SERIALIZED_NAME_DOWNLOADABLE_PRODUCT_LINKS)
  private List<DownloadableDataLinkInterface> downloadableProductLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOWNLOADABLE_PRODUCT_SAMPLES = "downloadable_product_samples";
  @SerializedName(SERIALIZED_NAME_DOWNLOADABLE_PRODUCT_SAMPLES)
  private List<DownloadableDataSampleInterface> downloadableProductSamples = new ArrayList<>();

  public static final String SERIALIZED_NAME_GIFTCARD_AMOUNTS = "giftcard_amounts";
  @SerializedName(SERIALIZED_NAME_GIFTCARD_AMOUNTS)
  private List<GiftCardDataGiftcardAmountInterface> giftcardAmounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_STOCK_ITEM = "stock_item";
  @SerializedName(SERIALIZED_NAME_STOCK_ITEM)
  private CatalogInventoryDataStockItemInterface stockItem;

  public static final String SERIALIZED_NAME_WEBSITE_IDS = "website_ids";
  @SerializedName(SERIALIZED_NAME_WEBSITE_IDS)
  private List<Integer> websiteIds = new ArrayList<>();

  public CatalogDataProductExtensionInterface() {
  }

  public CatalogDataProductExtensionInterface bundleProductOptions(List<BundleDataOptionInterface> bundleProductOptions) {
    this.bundleProductOptions = bundleProductOptions;
    return this;
  }

  public CatalogDataProductExtensionInterface addBundleProductOptionsItem(BundleDataOptionInterface bundleProductOptionsItem) {
    if (this.bundleProductOptions == null) {
      this.bundleProductOptions = new ArrayList<>();
    }
    this.bundleProductOptions.add(bundleProductOptionsItem);
    return this;
  }

  /**
   * Get bundleProductOptions
   * @return bundleProductOptions
   */
  @javax.annotation.Nullable
  public List<BundleDataOptionInterface> getBundleProductOptions() {
    return bundleProductOptions;
  }

  public void setBundleProductOptions(List<BundleDataOptionInterface> bundleProductOptions) {
    this.bundleProductOptions = bundleProductOptions;
  }


  public CatalogDataProductExtensionInterface categoryLinks(List<CatalogDataCategoryLinkInterface> categoryLinks) {
    this.categoryLinks = categoryLinks;
    return this;
  }

  public CatalogDataProductExtensionInterface addCategoryLinksItem(CatalogDataCategoryLinkInterface categoryLinksItem) {
    if (this.categoryLinks == null) {
      this.categoryLinks = new ArrayList<>();
    }
    this.categoryLinks.add(categoryLinksItem);
    return this;
  }

  /**
   * Get categoryLinks
   * @return categoryLinks
   */
  @javax.annotation.Nullable
  public List<CatalogDataCategoryLinkInterface> getCategoryLinks() {
    return categoryLinks;
  }

  public void setCategoryLinks(List<CatalogDataCategoryLinkInterface> categoryLinks) {
    this.categoryLinks = categoryLinks;
  }


  public CatalogDataProductExtensionInterface configurableProductLinks(List<Integer> configurableProductLinks) {
    this.configurableProductLinks = configurableProductLinks;
    return this;
  }

  public CatalogDataProductExtensionInterface addConfigurableProductLinksItem(Integer configurableProductLinksItem) {
    if (this.configurableProductLinks == null) {
      this.configurableProductLinks = new ArrayList<>();
    }
    this.configurableProductLinks.add(configurableProductLinksItem);
    return this;
  }

  /**
   * Get configurableProductLinks
   * @return configurableProductLinks
   */
  @javax.annotation.Nullable
  public List<Integer> getConfigurableProductLinks() {
    return configurableProductLinks;
  }

  public void setConfigurableProductLinks(List<Integer> configurableProductLinks) {
    this.configurableProductLinks = configurableProductLinks;
  }


  public CatalogDataProductExtensionInterface configurableProductOptions(List<ConfigurableProductDataOptionInterface> configurableProductOptions) {
    this.configurableProductOptions = configurableProductOptions;
    return this;
  }

  public CatalogDataProductExtensionInterface addConfigurableProductOptionsItem(ConfigurableProductDataOptionInterface configurableProductOptionsItem) {
    if (this.configurableProductOptions == null) {
      this.configurableProductOptions = new ArrayList<>();
    }
    this.configurableProductOptions.add(configurableProductOptionsItem);
    return this;
  }

  /**
   * Get configurableProductOptions
   * @return configurableProductOptions
   */
  @javax.annotation.Nullable
  public List<ConfigurableProductDataOptionInterface> getConfigurableProductOptions() {
    return configurableProductOptions;
  }

  public void setConfigurableProductOptions(List<ConfigurableProductDataOptionInterface> configurableProductOptions) {
    this.configurableProductOptions = configurableProductOptions;
  }


  public CatalogDataProductExtensionInterface downloadableProductLinks(List<DownloadableDataLinkInterface> downloadableProductLinks) {
    this.downloadableProductLinks = downloadableProductLinks;
    return this;
  }

  public CatalogDataProductExtensionInterface addDownloadableProductLinksItem(DownloadableDataLinkInterface downloadableProductLinksItem) {
    if (this.downloadableProductLinks == null) {
      this.downloadableProductLinks = new ArrayList<>();
    }
    this.downloadableProductLinks.add(downloadableProductLinksItem);
    return this;
  }

  /**
   * Get downloadableProductLinks
   * @return downloadableProductLinks
   */
  @javax.annotation.Nullable
  public List<DownloadableDataLinkInterface> getDownloadableProductLinks() {
    return downloadableProductLinks;
  }

  public void setDownloadableProductLinks(List<DownloadableDataLinkInterface> downloadableProductLinks) {
    this.downloadableProductLinks = downloadableProductLinks;
  }


  public CatalogDataProductExtensionInterface downloadableProductSamples(List<DownloadableDataSampleInterface> downloadableProductSamples) {
    this.downloadableProductSamples = downloadableProductSamples;
    return this;
  }

  public CatalogDataProductExtensionInterface addDownloadableProductSamplesItem(DownloadableDataSampleInterface downloadableProductSamplesItem) {
    if (this.downloadableProductSamples == null) {
      this.downloadableProductSamples = new ArrayList<>();
    }
    this.downloadableProductSamples.add(downloadableProductSamplesItem);
    return this;
  }

  /**
   * Get downloadableProductSamples
   * @return downloadableProductSamples
   */
  @javax.annotation.Nullable
  public List<DownloadableDataSampleInterface> getDownloadableProductSamples() {
    return downloadableProductSamples;
  }

  public void setDownloadableProductSamples(List<DownloadableDataSampleInterface> downloadableProductSamples) {
    this.downloadableProductSamples = downloadableProductSamples;
  }


  public CatalogDataProductExtensionInterface giftcardAmounts(List<GiftCardDataGiftcardAmountInterface> giftcardAmounts) {
    this.giftcardAmounts = giftcardAmounts;
    return this;
  }

  public CatalogDataProductExtensionInterface addGiftcardAmountsItem(GiftCardDataGiftcardAmountInterface giftcardAmountsItem) {
    if (this.giftcardAmounts == null) {
      this.giftcardAmounts = new ArrayList<>();
    }
    this.giftcardAmounts.add(giftcardAmountsItem);
    return this;
  }

  /**
   * Get giftcardAmounts
   * @return giftcardAmounts
   */
  @javax.annotation.Nullable
  public List<GiftCardDataGiftcardAmountInterface> getGiftcardAmounts() {
    return giftcardAmounts;
  }

  public void setGiftcardAmounts(List<GiftCardDataGiftcardAmountInterface> giftcardAmounts) {
    this.giftcardAmounts = giftcardAmounts;
  }


  public CatalogDataProductExtensionInterface stockItem(CatalogInventoryDataStockItemInterface stockItem) {
    this.stockItem = stockItem;
    return this;
  }

  /**
   * Get stockItem
   * @return stockItem
   */
  @javax.annotation.Nullable
  public CatalogInventoryDataStockItemInterface getStockItem() {
    return stockItem;
  }

  public void setStockItem(CatalogInventoryDataStockItemInterface stockItem) {
    this.stockItem = stockItem;
  }


  public CatalogDataProductExtensionInterface websiteIds(List<Integer> websiteIds) {
    this.websiteIds = websiteIds;
    return this;
  }

  public CatalogDataProductExtensionInterface addWebsiteIdsItem(Integer websiteIdsItem) {
    if (this.websiteIds == null) {
      this.websiteIds = new ArrayList<>();
    }
    this.websiteIds.add(websiteIdsItem);
    return this;
  }

  /**
   * Get websiteIds
   * @return websiteIds
   */
  @javax.annotation.Nullable
  public List<Integer> getWebsiteIds() {
    return websiteIds;
  }

  public void setWebsiteIds(List<Integer> websiteIds) {
    this.websiteIds = websiteIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataProductExtensionInterface catalogDataProductExtensionInterface = (CatalogDataProductExtensionInterface) o;
    return Objects.equals(this.bundleProductOptions, catalogDataProductExtensionInterface.bundleProductOptions) &&
        Objects.equals(this.categoryLinks, catalogDataProductExtensionInterface.categoryLinks) &&
        Objects.equals(this.configurableProductLinks, catalogDataProductExtensionInterface.configurableProductLinks) &&
        Objects.equals(this.configurableProductOptions, catalogDataProductExtensionInterface.configurableProductOptions) &&
        Objects.equals(this.downloadableProductLinks, catalogDataProductExtensionInterface.downloadableProductLinks) &&
        Objects.equals(this.downloadableProductSamples, catalogDataProductExtensionInterface.downloadableProductSamples) &&
        Objects.equals(this.giftcardAmounts, catalogDataProductExtensionInterface.giftcardAmounts) &&
        Objects.equals(this.stockItem, catalogDataProductExtensionInterface.stockItem) &&
        Objects.equals(this.websiteIds, catalogDataProductExtensionInterface.websiteIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundleProductOptions, categoryLinks, configurableProductLinks, configurableProductOptions, downloadableProductLinks, downloadableProductSamples, giftcardAmounts, stockItem, websiteIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataProductExtensionInterface {\n");
    sb.append("    bundleProductOptions: ").append(toIndentedString(bundleProductOptions)).append("\n");
    sb.append("    categoryLinks: ").append(toIndentedString(categoryLinks)).append("\n");
    sb.append("    configurableProductLinks: ").append(toIndentedString(configurableProductLinks)).append("\n");
    sb.append("    configurableProductOptions: ").append(toIndentedString(configurableProductOptions)).append("\n");
    sb.append("    downloadableProductLinks: ").append(toIndentedString(downloadableProductLinks)).append("\n");
    sb.append("    downloadableProductSamples: ").append(toIndentedString(downloadableProductSamples)).append("\n");
    sb.append("    giftcardAmounts: ").append(toIndentedString(giftcardAmounts)).append("\n");
    sb.append("    stockItem: ").append(toIndentedString(stockItem)).append("\n");
    sb.append("    websiteIds: ").append(toIndentedString(websiteIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bundle_product_options");
    openapiFields.add("category_links");
    openapiFields.add("configurable_product_links");
    openapiFields.add("configurable_product_options");
    openapiFields.add("downloadable_product_links");
    openapiFields.add("downloadable_product_samples");
    openapiFields.add("giftcard_amounts");
    openapiFields.add("stock_item");
    openapiFields.add("website_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogDataProductExtensionInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogDataProductExtensionInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogDataProductExtensionInterface is not found in the empty JSON string", CatalogDataProductExtensionInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogDataProductExtensionInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogDataProductExtensionInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bundle_product_options") != null && !jsonObj.get("bundle_product_options").isJsonNull()) {
        JsonArray jsonArraybundleProductOptions = jsonObj.getAsJsonArray("bundle_product_options");
        if (jsonArraybundleProductOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bundle_product_options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bundle_product_options` to be an array in the JSON string but got `%s`", jsonObj.get("bundle_product_options").toString()));
          }

          // validate the optional field `bundle_product_options` (array)
          for (int i = 0; i < jsonArraybundleProductOptions.size(); i++) {
            BundleDataOptionInterface.validateJsonElement(jsonArraybundleProductOptions.get(i));
          };
        }
      }
      if (jsonObj.get("category_links") != null && !jsonObj.get("category_links").isJsonNull()) {
        JsonArray jsonArraycategoryLinks = jsonObj.getAsJsonArray("category_links");
        if (jsonArraycategoryLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("category_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `category_links` to be an array in the JSON string but got `%s`", jsonObj.get("category_links").toString()));
          }

          // validate the optional field `category_links` (array)
          for (int i = 0; i < jsonArraycategoryLinks.size(); i++) {
            CatalogDataCategoryLinkInterface.validateJsonElement(jsonArraycategoryLinks.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("configurable_product_links") != null && !jsonObj.get("configurable_product_links").isJsonNull() && !jsonObj.get("configurable_product_links").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurable_product_links` to be an array in the JSON string but got `%s`", jsonObj.get("configurable_product_links").toString()));
      }
      if (jsonObj.get("configurable_product_options") != null && !jsonObj.get("configurable_product_options").isJsonNull()) {
        JsonArray jsonArrayconfigurableProductOptions = jsonObj.getAsJsonArray("configurable_product_options");
        if (jsonArrayconfigurableProductOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configurable_product_options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configurable_product_options` to be an array in the JSON string but got `%s`", jsonObj.get("configurable_product_options").toString()));
          }

          // validate the optional field `configurable_product_options` (array)
          for (int i = 0; i < jsonArrayconfigurableProductOptions.size(); i++) {
            ConfigurableProductDataOptionInterface.validateJsonElement(jsonArrayconfigurableProductOptions.get(i));
          };
        }
      }
      if (jsonObj.get("downloadable_product_links") != null && !jsonObj.get("downloadable_product_links").isJsonNull()) {
        JsonArray jsonArraydownloadableProductLinks = jsonObj.getAsJsonArray("downloadable_product_links");
        if (jsonArraydownloadableProductLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("downloadable_product_links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `downloadable_product_links` to be an array in the JSON string but got `%s`", jsonObj.get("downloadable_product_links").toString()));
          }

          // validate the optional field `downloadable_product_links` (array)
          for (int i = 0; i < jsonArraydownloadableProductLinks.size(); i++) {
            DownloadableDataLinkInterface.validateJsonElement(jsonArraydownloadableProductLinks.get(i));
          };
        }
      }
      if (jsonObj.get("downloadable_product_samples") != null && !jsonObj.get("downloadable_product_samples").isJsonNull()) {
        JsonArray jsonArraydownloadableProductSamples = jsonObj.getAsJsonArray("downloadable_product_samples");
        if (jsonArraydownloadableProductSamples != null) {
          // ensure the json data is an array
          if (!jsonObj.get("downloadable_product_samples").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `downloadable_product_samples` to be an array in the JSON string but got `%s`", jsonObj.get("downloadable_product_samples").toString()));
          }

          // validate the optional field `downloadable_product_samples` (array)
          for (int i = 0; i < jsonArraydownloadableProductSamples.size(); i++) {
            DownloadableDataSampleInterface.validateJsonElement(jsonArraydownloadableProductSamples.get(i));
          };
        }
      }
      if (jsonObj.get("giftcard_amounts") != null && !jsonObj.get("giftcard_amounts").isJsonNull()) {
        JsonArray jsonArraygiftcardAmounts = jsonObj.getAsJsonArray("giftcard_amounts");
        if (jsonArraygiftcardAmounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("giftcard_amounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `giftcard_amounts` to be an array in the JSON string but got `%s`", jsonObj.get("giftcard_amounts").toString()));
          }

          // validate the optional field `giftcard_amounts` (array)
          for (int i = 0; i < jsonArraygiftcardAmounts.size(); i++) {
            GiftCardDataGiftcardAmountInterface.validateJsonElement(jsonArraygiftcardAmounts.get(i));
          };
        }
      }
      // validate the optional field `stock_item`
      if (jsonObj.get("stock_item") != null && !jsonObj.get("stock_item").isJsonNull()) {
        CatalogInventoryDataStockItemInterface.validateJsonElement(jsonObj.get("stock_item"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("website_ids") != null && !jsonObj.get("website_ids").isJsonNull() && !jsonObj.get("website_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `website_ids` to be an array in the JSON string but got `%s`", jsonObj.get("website_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogDataProductExtensionInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogDataProductExtensionInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogDataProductExtensionInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogDataProductExtensionInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogDataProductExtensionInterface>() {
           @Override
           public void write(JsonWriter out, CatalogDataProductExtensionInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogDataProductExtensionInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogDataProductExtensionInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogDataProductExtensionInterface
   * @throws IOException if the JSON string is invalid with respect to CatalogDataProductExtensionInterface
   */
  public static CatalogDataProductExtensionInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogDataProductExtensionInterface.class);
  }

  /**
   * Convert an instance of CatalogDataProductExtensionInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

