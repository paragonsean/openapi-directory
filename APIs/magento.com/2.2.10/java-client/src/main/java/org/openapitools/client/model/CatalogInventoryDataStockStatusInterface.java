/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CatalogInventoryDataStockItemInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface StockStatusInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogInventoryDataStockStatusInterface {
  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private Integer productId;

  public static final String SERIALIZED_NAME_QTY = "qty";
  @SerializedName(SERIALIZED_NAME_QTY)
  private Integer qty;

  public static final String SERIALIZED_NAME_STOCK_ID = "stock_id";
  @SerializedName(SERIALIZED_NAME_STOCK_ID)
  private Integer stockId;

  public static final String SERIALIZED_NAME_STOCK_ITEM = "stock_item";
  @SerializedName(SERIALIZED_NAME_STOCK_ITEM)
  private CatalogInventoryDataStockItemInterface stockItem;

  public static final String SERIALIZED_NAME_STOCK_STATUS = "stock_status";
  @SerializedName(SERIALIZED_NAME_STOCK_STATUS)
  private Integer stockStatus;

  public CatalogInventoryDataStockStatusInterface() {
  }

  public CatalogInventoryDataStockStatusInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\CatalogInventory\\Api\\Data\\StockStatusInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public CatalogInventoryDataStockStatusInterface productId(Integer productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Get productId
   * @return productId
   */
  @javax.annotation.Nonnull
  public Integer getProductId() {
    return productId;
  }

  public void setProductId(Integer productId) {
    this.productId = productId;
  }


  public CatalogInventoryDataStockStatusInterface qty(Integer qty) {
    this.qty = qty;
    return this;
  }

  /**
   * Get qty
   * @return qty
   */
  @javax.annotation.Nonnull
  public Integer getQty() {
    return qty;
  }

  public void setQty(Integer qty) {
    this.qty = qty;
  }


  public CatalogInventoryDataStockStatusInterface stockId(Integer stockId) {
    this.stockId = stockId;
    return this;
  }

  /**
   * Get stockId
   * @return stockId
   */
  @javax.annotation.Nonnull
  public Integer getStockId() {
    return stockId;
  }

  public void setStockId(Integer stockId) {
    this.stockId = stockId;
  }


  public CatalogInventoryDataStockStatusInterface stockItem(CatalogInventoryDataStockItemInterface stockItem) {
    this.stockItem = stockItem;
    return this;
  }

  /**
   * Get stockItem
   * @return stockItem
   */
  @javax.annotation.Nonnull
  public CatalogInventoryDataStockItemInterface getStockItem() {
    return stockItem;
  }

  public void setStockItem(CatalogInventoryDataStockItemInterface stockItem) {
    this.stockItem = stockItem;
  }


  public CatalogInventoryDataStockStatusInterface stockStatus(Integer stockStatus) {
    this.stockStatus = stockStatus;
    return this;
  }

  /**
   * Get stockStatus
   * @return stockStatus
   */
  @javax.annotation.Nonnull
  public Integer getStockStatus() {
    return stockStatus;
  }

  public void setStockStatus(Integer stockStatus) {
    this.stockStatus = stockStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogInventoryDataStockStatusInterface catalogInventoryDataStockStatusInterface = (CatalogInventoryDataStockStatusInterface) o;
    return Objects.equals(this.extensionAttributes, catalogInventoryDataStockStatusInterface.extensionAttributes) &&
        Objects.equals(this.productId, catalogInventoryDataStockStatusInterface.productId) &&
        Objects.equals(this.qty, catalogInventoryDataStockStatusInterface.qty) &&
        Objects.equals(this.stockId, catalogInventoryDataStockStatusInterface.stockId) &&
        Objects.equals(this.stockItem, catalogInventoryDataStockStatusInterface.stockItem) &&
        Objects.equals(this.stockStatus, catalogInventoryDataStockStatusInterface.stockStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extensionAttributes, productId, qty, stockId, stockItem, stockStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogInventoryDataStockStatusInterface {\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    qty: ").append(toIndentedString(qty)).append("\n");
    sb.append("    stockId: ").append(toIndentedString(stockId)).append("\n");
    sb.append("    stockItem: ").append(toIndentedString(stockItem)).append("\n");
    sb.append("    stockStatus: ").append(toIndentedString(stockStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extension_attributes");
    openapiFields.add("product_id");
    openapiFields.add("qty");
    openapiFields.add("stock_id");
    openapiFields.add("stock_item");
    openapiFields.add("stock_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("product_id");
    openapiRequiredFields.add("qty");
    openapiRequiredFields.add("stock_id");
    openapiRequiredFields.add("stock_item");
    openapiRequiredFields.add("stock_status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogInventoryDataStockStatusInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogInventoryDataStockStatusInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogInventoryDataStockStatusInterface is not found in the empty JSON string", CatalogInventoryDataStockStatusInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogInventoryDataStockStatusInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogInventoryDataStockStatusInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogInventoryDataStockStatusInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `stock_item`
      CatalogInventoryDataStockItemInterface.validateJsonElement(jsonObj.get("stock_item"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogInventoryDataStockStatusInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogInventoryDataStockStatusInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogInventoryDataStockStatusInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogInventoryDataStockStatusInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogInventoryDataStockStatusInterface>() {
           @Override
           public void write(JsonWriter out, CatalogInventoryDataStockStatusInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogInventoryDataStockStatusInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogInventoryDataStockStatusInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogInventoryDataStockStatusInterface
   * @throws IOException if the JSON string is invalid with respect to CatalogInventoryDataStockStatusInterface
   */
  public static CatalogInventoryDataStockStatusInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogInventoryDataStockStatusInterface.class);
  }

  /**
   * Convert an instance of CatalogInventoryDataStockStatusInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

