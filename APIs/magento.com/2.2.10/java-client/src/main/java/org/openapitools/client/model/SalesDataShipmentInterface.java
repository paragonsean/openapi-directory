/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SalesDataShipmentCommentInterface;
import org.openapitools.client.model.SalesDataShipmentExtensionInterface;
import org.openapitools.client.model.SalesDataShipmentItemInterface;
import org.openapitools.client.model.SalesDataShipmentPackageInterface;
import org.openapitools.client.model.SalesDataShipmentTrackInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Shipment interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesDataShipmentInterface {
  public static final String SERIALIZED_NAME_BILLING_ADDRESS_ID = "billing_address_id";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS_ID)
  private Integer billingAddressId;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private List<SalesDataShipmentCommentInterface> comments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Integer customerId;

  public static final String SERIALIZED_NAME_EMAIL_SENT = "email_sent";
  @SerializedName(SERIALIZED_NAME_EMAIL_SENT)
  private Integer emailSent;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private Integer entityId;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private SalesDataShipmentExtensionInterface extensionAttributes;

  public static final String SERIALIZED_NAME_INCREMENT_ID = "increment_id";
  @SerializedName(SERIALIZED_NAME_INCREMENT_ID)
  private String incrementId;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<SalesDataShipmentItemInterface> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private Integer orderId;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<SalesDataShipmentPackageInterface> packages = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPMENT_STATUS = "shipment_status";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_STATUS)
  private Integer shipmentStatus;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS_ID = "shipping_address_id";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS_ID)
  private Integer shippingAddressId;

  public static final String SERIALIZED_NAME_SHIPPING_LABEL = "shipping_label";
  @SerializedName(SERIALIZED_NAME_SHIPPING_LABEL)
  private String shippingLabel;

  public static final String SERIALIZED_NAME_STORE_ID = "store_id";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private Integer storeId;

  public static final String SERIALIZED_NAME_TOTAL_QTY = "total_qty";
  @SerializedName(SERIALIZED_NAME_TOTAL_QTY)
  private BigDecimal totalQty;

  public static final String SERIALIZED_NAME_TOTAL_WEIGHT = "total_weight";
  @SerializedName(SERIALIZED_NAME_TOTAL_WEIGHT)
  private BigDecimal totalWeight;

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private List<SalesDataShipmentTrackInterface> tracks = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public SalesDataShipmentInterface() {
  }

  public SalesDataShipmentInterface billingAddressId(Integer billingAddressId) {
    this.billingAddressId = billingAddressId;
    return this;
  }

  /**
   * Billing address ID.
   * @return billingAddressId
   */
  @javax.annotation.Nullable
  public Integer getBillingAddressId() {
    return billingAddressId;
  }

  public void setBillingAddressId(Integer billingAddressId) {
    this.billingAddressId = billingAddressId;
  }


  public SalesDataShipmentInterface comments(List<SalesDataShipmentCommentInterface> comments) {
    this.comments = comments;
    return this;
  }

  public SalesDataShipmentInterface addCommentsItem(SalesDataShipmentCommentInterface commentsItem) {
    if (this.comments == null) {
      this.comments = new ArrayList<>();
    }
    this.comments.add(commentsItem);
    return this;
  }

  /**
   * Array of comments.
   * @return comments
   */
  @javax.annotation.Nonnull
  public List<SalesDataShipmentCommentInterface> getComments() {
    return comments;
  }

  public void setComments(List<SalesDataShipmentCommentInterface> comments) {
    this.comments = comments;
  }


  public SalesDataShipmentInterface createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created-at timestamp.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public SalesDataShipmentInterface customerId(Integer customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Customer ID.
   * @return customerId
   */
  @javax.annotation.Nullable
  public Integer getCustomerId() {
    return customerId;
  }

  public void setCustomerId(Integer customerId) {
    this.customerId = customerId;
  }


  public SalesDataShipmentInterface emailSent(Integer emailSent) {
    this.emailSent = emailSent;
    return this;
  }

  /**
   * Email-sent flag value.
   * @return emailSent
   */
  @javax.annotation.Nullable
  public Integer getEmailSent() {
    return emailSent;
  }

  public void setEmailSent(Integer emailSent) {
    this.emailSent = emailSent;
  }


  public SalesDataShipmentInterface entityId(Integer entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Shipment ID.
   * @return entityId
   */
  @javax.annotation.Nullable
  public Integer getEntityId() {
    return entityId;
  }

  public void setEntityId(Integer entityId) {
    this.entityId = entityId;
  }


  public SalesDataShipmentInterface extensionAttributes(SalesDataShipmentExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * Get extensionAttributes
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public SalesDataShipmentExtensionInterface getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(SalesDataShipmentExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public SalesDataShipmentInterface incrementId(String incrementId) {
    this.incrementId = incrementId;
    return this;
  }

  /**
   * Increment ID.
   * @return incrementId
   */
  @javax.annotation.Nullable
  public String getIncrementId() {
    return incrementId;
  }

  public void setIncrementId(String incrementId) {
    this.incrementId = incrementId;
  }


  public SalesDataShipmentInterface items(List<SalesDataShipmentItemInterface> items) {
    this.items = items;
    return this;
  }

  public SalesDataShipmentInterface addItemsItem(SalesDataShipmentItemInterface itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Array of items.
   * @return items
   */
  @javax.annotation.Nonnull
  public List<SalesDataShipmentItemInterface> getItems() {
    return items;
  }

  public void setItems(List<SalesDataShipmentItemInterface> items) {
    this.items = items;
  }


  public SalesDataShipmentInterface orderId(Integer orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Order ID.
   * @return orderId
   */
  @javax.annotation.Nonnull
  public Integer getOrderId() {
    return orderId;
  }

  public void setOrderId(Integer orderId) {
    this.orderId = orderId;
  }


  public SalesDataShipmentInterface packages(List<SalesDataShipmentPackageInterface> packages) {
    this.packages = packages;
    return this;
  }

  public SalesDataShipmentInterface addPackagesItem(SalesDataShipmentPackageInterface packagesItem) {
    if (this.packages == null) {
      this.packages = new ArrayList<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

  /**
   * Array of packages, if any. Otherwise, null.
   * @return packages
   */
  @javax.annotation.Nullable
  public List<SalesDataShipmentPackageInterface> getPackages() {
    return packages;
  }

  public void setPackages(List<SalesDataShipmentPackageInterface> packages) {
    this.packages = packages;
  }


  public SalesDataShipmentInterface shipmentStatus(Integer shipmentStatus) {
    this.shipmentStatus = shipmentStatus;
    return this;
  }

  /**
   * Shipment status.
   * @return shipmentStatus
   */
  @javax.annotation.Nullable
  public Integer getShipmentStatus() {
    return shipmentStatus;
  }

  public void setShipmentStatus(Integer shipmentStatus) {
    this.shipmentStatus = shipmentStatus;
  }


  public SalesDataShipmentInterface shippingAddressId(Integer shippingAddressId) {
    this.shippingAddressId = shippingAddressId;
    return this;
  }

  /**
   * Shipping address ID.
   * @return shippingAddressId
   */
  @javax.annotation.Nullable
  public Integer getShippingAddressId() {
    return shippingAddressId;
  }

  public void setShippingAddressId(Integer shippingAddressId) {
    this.shippingAddressId = shippingAddressId;
  }


  public SalesDataShipmentInterface shippingLabel(String shippingLabel) {
    this.shippingLabel = shippingLabel;
    return this;
  }

  /**
   * Shipping label.
   * @return shippingLabel
   */
  @javax.annotation.Nullable
  public String getShippingLabel() {
    return shippingLabel;
  }

  public void setShippingLabel(String shippingLabel) {
    this.shippingLabel = shippingLabel;
  }


  public SalesDataShipmentInterface storeId(Integer storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * Store ID.
   * @return storeId
   */
  @javax.annotation.Nullable
  public Integer getStoreId() {
    return storeId;
  }

  public void setStoreId(Integer storeId) {
    this.storeId = storeId;
  }


  public SalesDataShipmentInterface totalQty(BigDecimal totalQty) {
    this.totalQty = totalQty;
    return this;
  }

  /**
   * Total quantity.
   * @return totalQty
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalQty() {
    return totalQty;
  }

  public void setTotalQty(BigDecimal totalQty) {
    this.totalQty = totalQty;
  }


  public SalesDataShipmentInterface totalWeight(BigDecimal totalWeight) {
    this.totalWeight = totalWeight;
    return this;
  }

  /**
   * Total weight.
   * @return totalWeight
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalWeight() {
    return totalWeight;
  }

  public void setTotalWeight(BigDecimal totalWeight) {
    this.totalWeight = totalWeight;
  }


  public SalesDataShipmentInterface tracks(List<SalesDataShipmentTrackInterface> tracks) {
    this.tracks = tracks;
    return this;
  }

  public SalesDataShipmentInterface addTracksItem(SalesDataShipmentTrackInterface tracksItem) {
    if (this.tracks == null) {
      this.tracks = new ArrayList<>();
    }
    this.tracks.add(tracksItem);
    return this;
  }

  /**
   * Array of tracks.
   * @return tracks
   */
  @javax.annotation.Nonnull
  public List<SalesDataShipmentTrackInterface> getTracks() {
    return tracks;
  }

  public void setTracks(List<SalesDataShipmentTrackInterface> tracks) {
    this.tracks = tracks;
  }


  public SalesDataShipmentInterface updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated-at timestamp.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesDataShipmentInterface salesDataShipmentInterface = (SalesDataShipmentInterface) o;
    return Objects.equals(this.billingAddressId, salesDataShipmentInterface.billingAddressId) &&
        Objects.equals(this.comments, salesDataShipmentInterface.comments) &&
        Objects.equals(this.createdAt, salesDataShipmentInterface.createdAt) &&
        Objects.equals(this.customerId, salesDataShipmentInterface.customerId) &&
        Objects.equals(this.emailSent, salesDataShipmentInterface.emailSent) &&
        Objects.equals(this.entityId, salesDataShipmentInterface.entityId) &&
        Objects.equals(this.extensionAttributes, salesDataShipmentInterface.extensionAttributes) &&
        Objects.equals(this.incrementId, salesDataShipmentInterface.incrementId) &&
        Objects.equals(this.items, salesDataShipmentInterface.items) &&
        Objects.equals(this.orderId, salesDataShipmentInterface.orderId) &&
        Objects.equals(this.packages, salesDataShipmentInterface.packages) &&
        Objects.equals(this.shipmentStatus, salesDataShipmentInterface.shipmentStatus) &&
        Objects.equals(this.shippingAddressId, salesDataShipmentInterface.shippingAddressId) &&
        Objects.equals(this.shippingLabel, salesDataShipmentInterface.shippingLabel) &&
        Objects.equals(this.storeId, salesDataShipmentInterface.storeId) &&
        Objects.equals(this.totalQty, salesDataShipmentInterface.totalQty) &&
        Objects.equals(this.totalWeight, salesDataShipmentInterface.totalWeight) &&
        Objects.equals(this.tracks, salesDataShipmentInterface.tracks) &&
        Objects.equals(this.updatedAt, salesDataShipmentInterface.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAddressId, comments, createdAt, customerId, emailSent, entityId, extensionAttributes, incrementId, items, orderId, packages, shipmentStatus, shippingAddressId, shippingLabel, storeId, totalQty, totalWeight, tracks, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesDataShipmentInterface {\n");
    sb.append("    billingAddressId: ").append(toIndentedString(billingAddressId)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    emailSent: ").append(toIndentedString(emailSent)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    incrementId: ").append(toIndentedString(incrementId)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    shipmentStatus: ").append(toIndentedString(shipmentStatus)).append("\n");
    sb.append("    shippingAddressId: ").append(toIndentedString(shippingAddressId)).append("\n");
    sb.append("    shippingLabel: ").append(toIndentedString(shippingLabel)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    totalQty: ").append(toIndentedString(totalQty)).append("\n");
    sb.append("    totalWeight: ").append(toIndentedString(totalWeight)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_address_id");
    openapiFields.add("comments");
    openapiFields.add("created_at");
    openapiFields.add("customer_id");
    openapiFields.add("email_sent");
    openapiFields.add("entity_id");
    openapiFields.add("extension_attributes");
    openapiFields.add("increment_id");
    openapiFields.add("items");
    openapiFields.add("order_id");
    openapiFields.add("packages");
    openapiFields.add("shipment_status");
    openapiFields.add("shipping_address_id");
    openapiFields.add("shipping_label");
    openapiFields.add("store_id");
    openapiFields.add("total_qty");
    openapiFields.add("total_weight");
    openapiFields.add("tracks");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("comments");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("order_id");
    openapiRequiredFields.add("tracks");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesDataShipmentInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesDataShipmentInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesDataShipmentInterface is not found in the empty JSON string", SalesDataShipmentInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesDataShipmentInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesDataShipmentInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SalesDataShipmentInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("comments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be an array in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }

      JsonArray jsonArraycomments = jsonObj.getAsJsonArray("comments");
      // validate the required field `comments` (array)
      for (int i = 0; i < jsonArraycomments.size(); i++) {
        SalesDataShipmentCommentInterface.validateJsonElement(jsonArraycomments.get(i));
      };
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      // validate the optional field `extension_attributes`
      if (jsonObj.get("extension_attributes") != null && !jsonObj.get("extension_attributes").isJsonNull()) {
        SalesDataShipmentExtensionInterface.validateJsonElement(jsonObj.get("extension_attributes"));
      }
      if ((jsonObj.get("increment_id") != null && !jsonObj.get("increment_id").isJsonNull()) && !jsonObj.get("increment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `increment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("increment_id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        SalesDataShipmentItemInterface.validateJsonElement(jsonArrayitems.get(i));
      };
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull()) {
        JsonArray jsonArraypackages = jsonObj.getAsJsonArray("packages");
        if (jsonArraypackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
          }

          // validate the optional field `packages` (array)
          for (int i = 0; i < jsonArraypackages.size(); i++) {
            SalesDataShipmentPackageInterface.validateJsonElement(jsonArraypackages.get(i));
          };
        }
      }
      if ((jsonObj.get("shipping_label") != null && !jsonObj.get("shipping_label").isJsonNull()) && !jsonObj.get("shipping_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_label").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("tracks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracks` to be an array in the JSON string but got `%s`", jsonObj.get("tracks").toString()));
      }

      JsonArray jsonArraytracks = jsonObj.getAsJsonArray("tracks");
      // validate the required field `tracks` (array)
      for (int i = 0; i < jsonArraytracks.size(); i++) {
        SalesDataShipmentTrackInterface.validateJsonElement(jsonArraytracks.get(i));
      };
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesDataShipmentInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesDataShipmentInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesDataShipmentInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesDataShipmentInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesDataShipmentInterface>() {
           @Override
           public void write(JsonWriter out, SalesDataShipmentInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesDataShipmentInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesDataShipmentInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesDataShipmentInterface
   * @throws IOException if the JSON string is invalid with respect to SalesDataShipmentInterface
   */
  public static SalesDataShipmentInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesDataShipmentInterface.class);
  }

  /**
   * Convert an instance of SalesDataShipmentInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

