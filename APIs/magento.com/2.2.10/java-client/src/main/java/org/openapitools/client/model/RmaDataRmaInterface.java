/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FrameworkAttributeInterface;
import org.openapitools.client.model.RmaDataCommentInterface;
import org.openapitools.client.model.RmaDataItemInterface;
import org.openapitools.client.model.RmaDataTrackInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface RmaInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RmaDataRmaInterface {
  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private List<RmaDataCommentInterface> comments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "custom_attributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private List<FrameworkAttributeInterface> customAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER_CUSTOM_EMAIL = "customer_custom_email";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CUSTOM_EMAIL)
  private String customerCustomEmail;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Integer customerId;

  public static final String SERIALIZED_NAME_DATE_REQUESTED = "date_requested";
  @SerializedName(SERIALIZED_NAME_DATE_REQUESTED)
  private String dateRequested;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private Integer entityId;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_INCREMENT_ID = "increment_id";
  @SerializedName(SERIALIZED_NAME_INCREMENT_ID)
  private String incrementId;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<RmaDataItemInterface> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private Integer orderId;

  public static final String SERIALIZED_NAME_ORDER_INCREMENT_ID = "order_increment_id";
  @SerializedName(SERIALIZED_NAME_ORDER_INCREMENT_ID)
  private String orderIncrementId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STORE_ID = "store_id";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private Integer storeId;

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private List<RmaDataTrackInterface> tracks = new ArrayList<>();

  public RmaDataRmaInterface() {
  }

  public RmaDataRmaInterface comments(List<RmaDataCommentInterface> comments) {
    this.comments = comments;
    return this;
  }

  public RmaDataRmaInterface addCommentsItem(RmaDataCommentInterface commentsItem) {
    if (this.comments == null) {
      this.comments = new ArrayList<>();
    }
    this.comments.add(commentsItem);
    return this;
  }

  /**
   * Comments list
   * @return comments
   */
  @javax.annotation.Nonnull
  public List<RmaDataCommentInterface> getComments() {
    return comments;
  }

  public void setComments(List<RmaDataCommentInterface> comments) {
    this.comments = comments;
  }


  public RmaDataRmaInterface customAttributes(List<FrameworkAttributeInterface> customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  public RmaDataRmaInterface addCustomAttributesItem(FrameworkAttributeInterface customAttributesItem) {
    if (this.customAttributes == null) {
      this.customAttributes = new ArrayList<>();
    }
    this.customAttributes.add(customAttributesItem);
    return this;
  }

  /**
   * Custom attributes values.
   * @return customAttributes
   */
  @javax.annotation.Nullable
  public List<FrameworkAttributeInterface> getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(List<FrameworkAttributeInterface> customAttributes) {
    this.customAttributes = customAttributes;
  }


  public RmaDataRmaInterface customerCustomEmail(String customerCustomEmail) {
    this.customerCustomEmail = customerCustomEmail;
    return this;
  }

  /**
   * Customer_custom_email
   * @return customerCustomEmail
   */
  @javax.annotation.Nonnull
  public String getCustomerCustomEmail() {
    return customerCustomEmail;
  }

  public void setCustomerCustomEmail(String customerCustomEmail) {
    this.customerCustomEmail = customerCustomEmail;
  }


  public RmaDataRmaInterface customerId(Integer customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Customer_id
   * @return customerId
   */
  @javax.annotation.Nonnull
  public Integer getCustomerId() {
    return customerId;
  }

  public void setCustomerId(Integer customerId) {
    this.customerId = customerId;
  }


  public RmaDataRmaInterface dateRequested(String dateRequested) {
    this.dateRequested = dateRequested;
    return this;
  }

  /**
   * Date_requested
   * @return dateRequested
   */
  @javax.annotation.Nonnull
  public String getDateRequested() {
    return dateRequested;
  }

  public void setDateRequested(String dateRequested) {
    this.dateRequested = dateRequested;
  }


  public RmaDataRmaInterface entityId(Integer entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Entity_id
   * @return entityId
   */
  @javax.annotation.Nonnull
  public Integer getEntityId() {
    return entityId;
  }

  public void setEntityId(Integer entityId) {
    this.entityId = entityId;
  }


  public RmaDataRmaInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\RmaInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public RmaDataRmaInterface incrementId(String incrementId) {
    this.incrementId = incrementId;
    return this;
  }

  /**
   * Entity_id
   * @return incrementId
   */
  @javax.annotation.Nonnull
  public String getIncrementId() {
    return incrementId;
  }

  public void setIncrementId(String incrementId) {
    this.incrementId = incrementId;
  }


  public RmaDataRmaInterface items(List<RmaDataItemInterface> items) {
    this.items = items;
    return this;
  }

  public RmaDataRmaInterface addItemsItem(RmaDataItemInterface itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Items
   * @return items
   */
  @javax.annotation.Nonnull
  public List<RmaDataItemInterface> getItems() {
    return items;
  }

  public void setItems(List<RmaDataItemInterface> items) {
    this.items = items;
  }


  public RmaDataRmaInterface orderId(Integer orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Order_id
   * @return orderId
   */
  @javax.annotation.Nonnull
  public Integer getOrderId() {
    return orderId;
  }

  public void setOrderId(Integer orderId) {
    this.orderId = orderId;
  }


  public RmaDataRmaInterface orderIncrementId(String orderIncrementId) {
    this.orderIncrementId = orderIncrementId;
    return this;
  }

  /**
   * Order_increment_id
   * @return orderIncrementId
   */
  @javax.annotation.Nonnull
  public String getOrderIncrementId() {
    return orderIncrementId;
  }

  public void setOrderIncrementId(String orderIncrementId) {
    this.orderIncrementId = orderIncrementId;
  }


  public RmaDataRmaInterface status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public RmaDataRmaInterface storeId(Integer storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * Store_id
   * @return storeId
   */
  @javax.annotation.Nonnull
  public Integer getStoreId() {
    return storeId;
  }

  public void setStoreId(Integer storeId) {
    this.storeId = storeId;
  }


  public RmaDataRmaInterface tracks(List<RmaDataTrackInterface> tracks) {
    this.tracks = tracks;
    return this;
  }

  public RmaDataRmaInterface addTracksItem(RmaDataTrackInterface tracksItem) {
    if (this.tracks == null) {
      this.tracks = new ArrayList<>();
    }
    this.tracks.add(tracksItem);
    return this;
  }

  /**
   * Tracks list
   * @return tracks
   */
  @javax.annotation.Nonnull
  public List<RmaDataTrackInterface> getTracks() {
    return tracks;
  }

  public void setTracks(List<RmaDataTrackInterface> tracks) {
    this.tracks = tracks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RmaDataRmaInterface rmaDataRmaInterface = (RmaDataRmaInterface) o;
    return Objects.equals(this.comments, rmaDataRmaInterface.comments) &&
        Objects.equals(this.customAttributes, rmaDataRmaInterface.customAttributes) &&
        Objects.equals(this.customerCustomEmail, rmaDataRmaInterface.customerCustomEmail) &&
        Objects.equals(this.customerId, rmaDataRmaInterface.customerId) &&
        Objects.equals(this.dateRequested, rmaDataRmaInterface.dateRequested) &&
        Objects.equals(this.entityId, rmaDataRmaInterface.entityId) &&
        Objects.equals(this.extensionAttributes, rmaDataRmaInterface.extensionAttributes) &&
        Objects.equals(this.incrementId, rmaDataRmaInterface.incrementId) &&
        Objects.equals(this.items, rmaDataRmaInterface.items) &&
        Objects.equals(this.orderId, rmaDataRmaInterface.orderId) &&
        Objects.equals(this.orderIncrementId, rmaDataRmaInterface.orderIncrementId) &&
        Objects.equals(this.status, rmaDataRmaInterface.status) &&
        Objects.equals(this.storeId, rmaDataRmaInterface.storeId) &&
        Objects.equals(this.tracks, rmaDataRmaInterface.tracks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, customAttributes, customerCustomEmail, customerId, dateRequested, entityId, extensionAttributes, incrementId, items, orderId, orderIncrementId, status, storeId, tracks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RmaDataRmaInterface {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    customerCustomEmail: ").append(toIndentedString(customerCustomEmail)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    dateRequested: ").append(toIndentedString(dateRequested)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    incrementId: ").append(toIndentedString(incrementId)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderIncrementId: ").append(toIndentedString(orderIncrementId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comments");
    openapiFields.add("custom_attributes");
    openapiFields.add("customer_custom_email");
    openapiFields.add("customer_id");
    openapiFields.add("date_requested");
    openapiFields.add("entity_id");
    openapiFields.add("extension_attributes");
    openapiFields.add("increment_id");
    openapiFields.add("items");
    openapiFields.add("order_id");
    openapiFields.add("order_increment_id");
    openapiFields.add("status");
    openapiFields.add("store_id");
    openapiFields.add("tracks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("comments");
    openapiRequiredFields.add("customer_custom_email");
    openapiRequiredFields.add("customer_id");
    openapiRequiredFields.add("date_requested");
    openapiRequiredFields.add("entity_id");
    openapiRequiredFields.add("increment_id");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("order_id");
    openapiRequiredFields.add("order_increment_id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("store_id");
    openapiRequiredFields.add("tracks");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RmaDataRmaInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RmaDataRmaInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RmaDataRmaInterface is not found in the empty JSON string", RmaDataRmaInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RmaDataRmaInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RmaDataRmaInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RmaDataRmaInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("comments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be an array in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }

      JsonArray jsonArraycomments = jsonObj.getAsJsonArray("comments");
      // validate the required field `comments` (array)
      for (int i = 0; i < jsonArraycomments.size(); i++) {
        RmaDataCommentInterface.validateJsonElement(jsonArraycomments.get(i));
      };
      if (jsonObj.get("custom_attributes") != null && !jsonObj.get("custom_attributes").isJsonNull()) {
        JsonArray jsonArraycustomAttributes = jsonObj.getAsJsonArray("custom_attributes");
        if (jsonArraycustomAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("custom_attributes").toString()));
          }

          // validate the optional field `custom_attributes` (array)
          for (int i = 0; i < jsonArraycustomAttributes.size(); i++) {
            FrameworkAttributeInterface.validateJsonElement(jsonArraycustomAttributes.get(i));
          };
        }
      }
      if (!jsonObj.get("customer_custom_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_custom_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_custom_email").toString()));
      }
      if (!jsonObj.get("date_requested").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_requested` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_requested").toString()));
      }
      if (!jsonObj.get("increment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `increment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("increment_id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        RmaDataItemInterface.validateJsonElement(jsonArrayitems.get(i));
      };
      if (!jsonObj.get("order_increment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_increment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_increment_id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("tracks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracks` to be an array in the JSON string but got `%s`", jsonObj.get("tracks").toString()));
      }

      JsonArray jsonArraytracks = jsonObj.getAsJsonArray("tracks");
      // validate the required field `tracks` (array)
      for (int i = 0; i < jsonArraytracks.size(); i++) {
        RmaDataTrackInterface.validateJsonElement(jsonArraytracks.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RmaDataRmaInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RmaDataRmaInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RmaDataRmaInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RmaDataRmaInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<RmaDataRmaInterface>() {
           @Override
           public void write(JsonWriter out, RmaDataRmaInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RmaDataRmaInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RmaDataRmaInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RmaDataRmaInterface
   * @throws IOException if the JSON string is invalid with respect to RmaDataRmaInterface
   */
  public static RmaDataRmaInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RmaDataRmaInterface.class);
  }

  /**
   * Convert an instance of RmaDataRmaInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

