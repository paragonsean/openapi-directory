/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomerDataOptionInterface;
import org.openapitools.client.model.CustomerDataValidationRuleInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Customer attribute metadata interface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomerDataAttributeMetadataInterface {
  public static final String SERIALIZED_NAME_ATTRIBUTE_CODE = "attribute_code";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_CODE)
  private String attributeCode;

  public static final String SERIALIZED_NAME_BACKEND_TYPE = "backend_type";
  @SerializedName(SERIALIZED_NAME_BACKEND_TYPE)
  private String backendType;

  public static final String SERIALIZED_NAME_DATA_MODEL = "data_model";
  @SerializedName(SERIALIZED_NAME_DATA_MODEL)
  private String dataModel;

  public static final String SERIALIZED_NAME_FRONTEND_CLASS = "frontend_class";
  @SerializedName(SERIALIZED_NAME_FRONTEND_CLASS)
  private String frontendClass;

  public static final String SERIALIZED_NAME_FRONTEND_INPUT = "frontend_input";
  @SerializedName(SERIALIZED_NAME_FRONTEND_INPUT)
  private String frontendInput;

  public static final String SERIALIZED_NAME_FRONTEND_LABEL = "frontend_label";
  @SerializedName(SERIALIZED_NAME_FRONTEND_LABEL)
  private String frontendLabel;

  public static final String SERIALIZED_NAME_INPUT_FILTER = "input_filter";
  @SerializedName(SERIALIZED_NAME_INPUT_FILTER)
  private String inputFilter;

  public static final String SERIALIZED_NAME_IS_FILTERABLE_IN_GRID = "is_filterable_in_grid";
  @SerializedName(SERIALIZED_NAME_IS_FILTERABLE_IN_GRID)
  private Boolean isFilterableInGrid;

  public static final String SERIALIZED_NAME_IS_SEARCHABLE_IN_GRID = "is_searchable_in_grid";
  @SerializedName(SERIALIZED_NAME_IS_SEARCHABLE_IN_GRID)
  private Boolean isSearchableInGrid;

  public static final String SERIALIZED_NAME_IS_USED_IN_GRID = "is_used_in_grid";
  @SerializedName(SERIALIZED_NAME_IS_USED_IN_GRID)
  private Boolean isUsedInGrid;

  public static final String SERIALIZED_NAME_IS_VISIBLE_IN_GRID = "is_visible_in_grid";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE_IN_GRID)
  private Boolean isVisibleInGrid;

  public static final String SERIALIZED_NAME_MULTILINE_COUNT = "multiline_count";
  @SerializedName(SERIALIZED_NAME_MULTILINE_COUNT)
  private Integer multilineCount;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<CustomerDataOptionInterface> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sort_order";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_STORE_LABEL = "store_label";
  @SerializedName(SERIALIZED_NAME_STORE_LABEL)
  private String storeLabel;

  public static final String SERIALIZED_NAME_SYSTEM = "system";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private Boolean system;

  public static final String SERIALIZED_NAME_USER_DEFINED = "user_defined";
  @SerializedName(SERIALIZED_NAME_USER_DEFINED)
  private Boolean userDefined;

  public static final String SERIALIZED_NAME_VALIDATION_RULES = "validation_rules";
  @SerializedName(SERIALIZED_NAME_VALIDATION_RULES)
  private List<CustomerDataValidationRuleInterface> validationRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public CustomerDataAttributeMetadataInterface() {
  }

  public CustomerDataAttributeMetadataInterface attributeCode(String attributeCode) {
    this.attributeCode = attributeCode;
    return this;
  }

  /**
   * Code of the attribute.
   * @return attributeCode
   */
  @javax.annotation.Nonnull
  public String getAttributeCode() {
    return attributeCode;
  }

  public void setAttributeCode(String attributeCode) {
    this.attributeCode = attributeCode;
  }


  public CustomerDataAttributeMetadataInterface backendType(String backendType) {
    this.backendType = backendType;
    return this;
  }

  /**
   * Backend type.
   * @return backendType
   */
  @javax.annotation.Nonnull
  public String getBackendType() {
    return backendType;
  }

  public void setBackendType(String backendType) {
    this.backendType = backendType;
  }


  public CustomerDataAttributeMetadataInterface dataModel(String dataModel) {
    this.dataModel = dataModel;
    return this;
  }

  /**
   * Data model for attribute.
   * @return dataModel
   */
  @javax.annotation.Nonnull
  public String getDataModel() {
    return dataModel;
  }

  public void setDataModel(String dataModel) {
    this.dataModel = dataModel;
  }


  public CustomerDataAttributeMetadataInterface frontendClass(String frontendClass) {
    this.frontendClass = frontendClass;
    return this;
  }

  /**
   * Class which is used to display the attribute on frontend.
   * @return frontendClass
   */
  @javax.annotation.Nonnull
  public String getFrontendClass() {
    return frontendClass;
  }

  public void setFrontendClass(String frontendClass) {
    this.frontendClass = frontendClass;
  }


  public CustomerDataAttributeMetadataInterface frontendInput(String frontendInput) {
    this.frontendInput = frontendInput;
    return this;
  }

  /**
   * HTML for input element.
   * @return frontendInput
   */
  @javax.annotation.Nonnull
  public String getFrontendInput() {
    return frontendInput;
  }

  public void setFrontendInput(String frontendInput) {
    this.frontendInput = frontendInput;
  }


  public CustomerDataAttributeMetadataInterface frontendLabel(String frontendLabel) {
    this.frontendLabel = frontendLabel;
    return this;
  }

  /**
   * Label which supposed to be displayed on frontend.
   * @return frontendLabel
   */
  @javax.annotation.Nonnull
  public String getFrontendLabel() {
    return frontendLabel;
  }

  public void setFrontendLabel(String frontendLabel) {
    this.frontendLabel = frontendLabel;
  }


  public CustomerDataAttributeMetadataInterface inputFilter(String inputFilter) {
    this.inputFilter = inputFilter;
    return this;
  }

  /**
   * Template used for input (e.g. \&quot;date\&quot;)
   * @return inputFilter
   */
  @javax.annotation.Nonnull
  public String getInputFilter() {
    return inputFilter;
  }

  public void setInputFilter(String inputFilter) {
    this.inputFilter = inputFilter;
  }


  public CustomerDataAttributeMetadataInterface isFilterableInGrid(Boolean isFilterableInGrid) {
    this.isFilterableInGrid = isFilterableInGrid;
    return this;
  }

  /**
   * It is filterable in customer grid
   * @return isFilterableInGrid
   */
  @javax.annotation.Nullable
  public Boolean getIsFilterableInGrid() {
    return isFilterableInGrid;
  }

  public void setIsFilterableInGrid(Boolean isFilterableInGrid) {
    this.isFilterableInGrid = isFilterableInGrid;
  }


  public CustomerDataAttributeMetadataInterface isSearchableInGrid(Boolean isSearchableInGrid) {
    this.isSearchableInGrid = isSearchableInGrid;
    return this;
  }

  /**
   * It is searchable in customer grid
   * @return isSearchableInGrid
   */
  @javax.annotation.Nullable
  public Boolean getIsSearchableInGrid() {
    return isSearchableInGrid;
  }

  public void setIsSearchableInGrid(Boolean isSearchableInGrid) {
    this.isSearchableInGrid = isSearchableInGrid;
  }


  public CustomerDataAttributeMetadataInterface isUsedInGrid(Boolean isUsedInGrid) {
    this.isUsedInGrid = isUsedInGrid;
    return this;
  }

  /**
   * It is used in customer grid
   * @return isUsedInGrid
   */
  @javax.annotation.Nullable
  public Boolean getIsUsedInGrid() {
    return isUsedInGrid;
  }

  public void setIsUsedInGrid(Boolean isUsedInGrid) {
    this.isUsedInGrid = isUsedInGrid;
  }


  public CustomerDataAttributeMetadataInterface isVisibleInGrid(Boolean isVisibleInGrid) {
    this.isVisibleInGrid = isVisibleInGrid;
    return this;
  }

  /**
   * It is visible in customer grid
   * @return isVisibleInGrid
   */
  @javax.annotation.Nullable
  public Boolean getIsVisibleInGrid() {
    return isVisibleInGrid;
  }

  public void setIsVisibleInGrid(Boolean isVisibleInGrid) {
    this.isVisibleInGrid = isVisibleInGrid;
  }


  public CustomerDataAttributeMetadataInterface multilineCount(Integer multilineCount) {
    this.multilineCount = multilineCount;
    return this;
  }

  /**
   * Of lines of the attribute value.
   * @return multilineCount
   */
  @javax.annotation.Nonnull
  public Integer getMultilineCount() {
    return multilineCount;
  }

  public void setMultilineCount(Integer multilineCount) {
    this.multilineCount = multilineCount;
  }


  public CustomerDataAttributeMetadataInterface note(String note) {
    this.note = note;
    return this;
  }

  /**
   * The note attribute for the element.
   * @return note
   */
  @javax.annotation.Nonnull
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public CustomerDataAttributeMetadataInterface options(List<CustomerDataOptionInterface> options) {
    this.options = options;
    return this;
  }

  public CustomerDataAttributeMetadataInterface addOptionsItem(CustomerDataOptionInterface optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * Options of the attribute (key &#x3D;&gt; value pairs for select)
   * @return options
   */
  @javax.annotation.Nonnull
  public List<CustomerDataOptionInterface> getOptions() {
    return options;
  }

  public void setOptions(List<CustomerDataOptionInterface> options) {
    this.options = options;
  }


  public CustomerDataAttributeMetadataInterface required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Attribute is required.
   * @return required
   */
  @javax.annotation.Nonnull
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public CustomerDataAttributeMetadataInterface sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Attributes sort order.
   * @return sortOrder
   */
  @javax.annotation.Nonnull
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public CustomerDataAttributeMetadataInterface storeLabel(String storeLabel) {
    this.storeLabel = storeLabel;
    return this;
  }

  /**
   * Label of the store.
   * @return storeLabel
   */
  @javax.annotation.Nonnull
  public String getStoreLabel() {
    return storeLabel;
  }

  public void setStoreLabel(String storeLabel) {
    this.storeLabel = storeLabel;
  }


  public CustomerDataAttributeMetadataInterface system(Boolean system) {
    this.system = system;
    return this;
  }

  /**
   * This is a system attribute.
   * @return system
   */
  @javax.annotation.Nonnull
  public Boolean getSystem() {
    return system;
  }

  public void setSystem(Boolean system) {
    this.system = system;
  }


  public CustomerDataAttributeMetadataInterface userDefined(Boolean userDefined) {
    this.userDefined = userDefined;
    return this;
  }

  /**
   * Current attribute has been defined by a user.
   * @return userDefined
   */
  @javax.annotation.Nonnull
  public Boolean getUserDefined() {
    return userDefined;
  }

  public void setUserDefined(Boolean userDefined) {
    this.userDefined = userDefined;
  }


  public CustomerDataAttributeMetadataInterface validationRules(List<CustomerDataValidationRuleInterface> validationRules) {
    this.validationRules = validationRules;
    return this;
  }

  public CustomerDataAttributeMetadataInterface addValidationRulesItem(CustomerDataValidationRuleInterface validationRulesItem) {
    if (this.validationRules == null) {
      this.validationRules = new ArrayList<>();
    }
    this.validationRules.add(validationRulesItem);
    return this;
  }

  /**
   * Validation rules.
   * @return validationRules
   */
  @javax.annotation.Nonnull
  public List<CustomerDataValidationRuleInterface> getValidationRules() {
    return validationRules;
  }

  public void setValidationRules(List<CustomerDataValidationRuleInterface> validationRules) {
    this.validationRules = validationRules;
  }


  public CustomerDataAttributeMetadataInterface visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Attribute is visible on frontend.
   * @return visible
   */
  @javax.annotation.Nonnull
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerDataAttributeMetadataInterface customerDataAttributeMetadataInterface = (CustomerDataAttributeMetadataInterface) o;
    return Objects.equals(this.attributeCode, customerDataAttributeMetadataInterface.attributeCode) &&
        Objects.equals(this.backendType, customerDataAttributeMetadataInterface.backendType) &&
        Objects.equals(this.dataModel, customerDataAttributeMetadataInterface.dataModel) &&
        Objects.equals(this.frontendClass, customerDataAttributeMetadataInterface.frontendClass) &&
        Objects.equals(this.frontendInput, customerDataAttributeMetadataInterface.frontendInput) &&
        Objects.equals(this.frontendLabel, customerDataAttributeMetadataInterface.frontendLabel) &&
        Objects.equals(this.inputFilter, customerDataAttributeMetadataInterface.inputFilter) &&
        Objects.equals(this.isFilterableInGrid, customerDataAttributeMetadataInterface.isFilterableInGrid) &&
        Objects.equals(this.isSearchableInGrid, customerDataAttributeMetadataInterface.isSearchableInGrid) &&
        Objects.equals(this.isUsedInGrid, customerDataAttributeMetadataInterface.isUsedInGrid) &&
        Objects.equals(this.isVisibleInGrid, customerDataAttributeMetadataInterface.isVisibleInGrid) &&
        Objects.equals(this.multilineCount, customerDataAttributeMetadataInterface.multilineCount) &&
        Objects.equals(this.note, customerDataAttributeMetadataInterface.note) &&
        Objects.equals(this.options, customerDataAttributeMetadataInterface.options) &&
        Objects.equals(this.required, customerDataAttributeMetadataInterface.required) &&
        Objects.equals(this.sortOrder, customerDataAttributeMetadataInterface.sortOrder) &&
        Objects.equals(this.storeLabel, customerDataAttributeMetadataInterface.storeLabel) &&
        Objects.equals(this.system, customerDataAttributeMetadataInterface.system) &&
        Objects.equals(this.userDefined, customerDataAttributeMetadataInterface.userDefined) &&
        Objects.equals(this.validationRules, customerDataAttributeMetadataInterface.validationRules) &&
        Objects.equals(this.visible, customerDataAttributeMetadataInterface.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeCode, backendType, dataModel, frontendClass, frontendInput, frontendLabel, inputFilter, isFilterableInGrid, isSearchableInGrid, isUsedInGrid, isVisibleInGrid, multilineCount, note, options, required, sortOrder, storeLabel, system, userDefined, validationRules, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerDataAttributeMetadataInterface {\n");
    sb.append("    attributeCode: ").append(toIndentedString(attributeCode)).append("\n");
    sb.append("    backendType: ").append(toIndentedString(backendType)).append("\n");
    sb.append("    dataModel: ").append(toIndentedString(dataModel)).append("\n");
    sb.append("    frontendClass: ").append(toIndentedString(frontendClass)).append("\n");
    sb.append("    frontendInput: ").append(toIndentedString(frontendInput)).append("\n");
    sb.append("    frontendLabel: ").append(toIndentedString(frontendLabel)).append("\n");
    sb.append("    inputFilter: ").append(toIndentedString(inputFilter)).append("\n");
    sb.append("    isFilterableInGrid: ").append(toIndentedString(isFilterableInGrid)).append("\n");
    sb.append("    isSearchableInGrid: ").append(toIndentedString(isSearchableInGrid)).append("\n");
    sb.append("    isUsedInGrid: ").append(toIndentedString(isUsedInGrid)).append("\n");
    sb.append("    isVisibleInGrid: ").append(toIndentedString(isVisibleInGrid)).append("\n");
    sb.append("    multilineCount: ").append(toIndentedString(multilineCount)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    storeLabel: ").append(toIndentedString(storeLabel)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    userDefined: ").append(toIndentedString(userDefined)).append("\n");
    sb.append("    validationRules: ").append(toIndentedString(validationRules)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attribute_code");
    openapiFields.add("backend_type");
    openapiFields.add("data_model");
    openapiFields.add("frontend_class");
    openapiFields.add("frontend_input");
    openapiFields.add("frontend_label");
    openapiFields.add("input_filter");
    openapiFields.add("is_filterable_in_grid");
    openapiFields.add("is_searchable_in_grid");
    openapiFields.add("is_used_in_grid");
    openapiFields.add("is_visible_in_grid");
    openapiFields.add("multiline_count");
    openapiFields.add("note");
    openapiFields.add("options");
    openapiFields.add("required");
    openapiFields.add("sort_order");
    openapiFields.add("store_label");
    openapiFields.add("system");
    openapiFields.add("user_defined");
    openapiFields.add("validation_rules");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attribute_code");
    openapiRequiredFields.add("backend_type");
    openapiRequiredFields.add("data_model");
    openapiRequiredFields.add("frontend_class");
    openapiRequiredFields.add("frontend_input");
    openapiRequiredFields.add("frontend_label");
    openapiRequiredFields.add("input_filter");
    openapiRequiredFields.add("multiline_count");
    openapiRequiredFields.add("note");
    openapiRequiredFields.add("options");
    openapiRequiredFields.add("required");
    openapiRequiredFields.add("sort_order");
    openapiRequiredFields.add("store_label");
    openapiRequiredFields.add("system");
    openapiRequiredFields.add("user_defined");
    openapiRequiredFields.add("validation_rules");
    openapiRequiredFields.add("visible");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerDataAttributeMetadataInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerDataAttributeMetadataInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerDataAttributeMetadataInterface is not found in the empty JSON string", CustomerDataAttributeMetadataInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerDataAttributeMetadataInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerDataAttributeMetadataInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerDataAttributeMetadataInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("attribute_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute_code").toString()));
      }
      if (!jsonObj.get("backend_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backend_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backend_type").toString()));
      }
      if (!jsonObj.get("data_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_model").toString()));
      }
      if (!jsonObj.get("frontend_class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frontend_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frontend_class").toString()));
      }
      if (!jsonObj.get("frontend_input").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frontend_input` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frontend_input").toString()));
      }
      if (!jsonObj.get("frontend_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frontend_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frontend_label").toString()));
      }
      if (!jsonObj.get("input_filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("input_filter").toString()));
      }
      if (!jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("options").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }

      JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
      // validate the required field `options` (array)
      for (int i = 0; i < jsonArrayoptions.size(); i++) {
        CustomerDataOptionInterface.validateJsonElement(jsonArrayoptions.get(i));
      };
      if (!jsonObj.get("store_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `store_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("store_label").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("validation_rules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validation_rules` to be an array in the JSON string but got `%s`", jsonObj.get("validation_rules").toString()));
      }

      JsonArray jsonArrayvalidationRules = jsonObj.getAsJsonArray("validation_rules");
      // validate the required field `validation_rules` (array)
      for (int i = 0; i < jsonArrayvalidationRules.size(); i++) {
        CustomerDataValidationRuleInterface.validateJsonElement(jsonArrayvalidationRules.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerDataAttributeMetadataInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerDataAttributeMetadataInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerDataAttributeMetadataInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerDataAttributeMetadataInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerDataAttributeMetadataInterface>() {
           @Override
           public void write(JsonWriter out, CustomerDataAttributeMetadataInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerDataAttributeMetadataInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerDataAttributeMetadataInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerDataAttributeMetadataInterface
   * @throws IOException if the JSON string is invalid with respect to CustomerDataAttributeMetadataInterface
   */
  public static CustomerDataAttributeMetadataInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerDataAttributeMetadataInterface.class);
  }

  /**
   * Convert an instance of CustomerDataAttributeMetadataInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

