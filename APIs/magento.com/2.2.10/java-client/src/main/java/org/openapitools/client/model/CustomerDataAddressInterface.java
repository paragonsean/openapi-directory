/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomerDataRegionInterface;
import org.openapitools.client.model.FrameworkAttributeInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Customer address interface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomerDataAddressInterface {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_COUNTRY_ID = "country_id";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ID)
  private String countryId;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "custom_attributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private List<FrameworkAttributeInterface> customAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Integer customerId;

  public static final String SERIALIZED_NAME_DEFAULT_BILLING = "default_billing";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BILLING)
  private Boolean defaultBilling;

  public static final String SERIALIZED_NAME_DEFAULT_SHIPPING = "default_shipping";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SHIPPING)
  private Boolean defaultShipping;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_FIRSTNAME = "firstname";
  @SerializedName(SERIALIZED_NAME_FIRSTNAME)
  private String firstname;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LASTNAME = "lastname";
  @SerializedName(SERIALIZED_NAME_LASTNAME)
  private String lastname;

  public static final String SERIALIZED_NAME_MIDDLENAME = "middlename";
  @SerializedName(SERIALIZED_NAME_MIDDLENAME)
  private String middlename;

  public static final String SERIALIZED_NAME_POSTCODE = "postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private CustomerDataRegionInterface region;

  public static final String SERIALIZED_NAME_REGION_ID = "region_id";
  @SerializedName(SERIALIZED_NAME_REGION_ID)
  private Integer regionId;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private List<String> street = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUFFIX = "suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private String suffix;

  public static final String SERIALIZED_NAME_TELEPHONE = "telephone";
  @SerializedName(SERIALIZED_NAME_TELEPHONE)
  private String telephone;

  public static final String SERIALIZED_NAME_VAT_ID = "vat_id";
  @SerializedName(SERIALIZED_NAME_VAT_ID)
  private String vatId;

  public CustomerDataAddressInterface() {
  }

  public CustomerDataAddressInterface city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City name
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public CustomerDataAddressInterface company(String company) {
    this.company = company;
    return this;
  }

  /**
   * Company
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public CustomerDataAddressInterface countryId(String countryId) {
    this.countryId = countryId;
    return this;
  }

  /**
   * Country code in ISO_3166-2 format
   * @return countryId
   */
  @javax.annotation.Nullable
  public String getCountryId() {
    return countryId;
  }

  public void setCountryId(String countryId) {
    this.countryId = countryId;
  }


  public CustomerDataAddressInterface customAttributes(List<FrameworkAttributeInterface> customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  public CustomerDataAddressInterface addCustomAttributesItem(FrameworkAttributeInterface customAttributesItem) {
    if (this.customAttributes == null) {
      this.customAttributes = new ArrayList<>();
    }
    this.customAttributes.add(customAttributesItem);
    return this;
  }

  /**
   * Custom attributes values.
   * @return customAttributes
   */
  @javax.annotation.Nullable
  public List<FrameworkAttributeInterface> getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(List<FrameworkAttributeInterface> customAttributes) {
    this.customAttributes = customAttributes;
  }


  public CustomerDataAddressInterface customerId(Integer customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Customer ID
   * @return customerId
   */
  @javax.annotation.Nullable
  public Integer getCustomerId() {
    return customerId;
  }

  public void setCustomerId(Integer customerId) {
    this.customerId = customerId;
  }


  public CustomerDataAddressInterface defaultBilling(Boolean defaultBilling) {
    this.defaultBilling = defaultBilling;
    return this;
  }

  /**
   * If this address is default billing address
   * @return defaultBilling
   */
  @javax.annotation.Nullable
  public Boolean getDefaultBilling() {
    return defaultBilling;
  }

  public void setDefaultBilling(Boolean defaultBilling) {
    this.defaultBilling = defaultBilling;
  }


  public CustomerDataAddressInterface defaultShipping(Boolean defaultShipping) {
    this.defaultShipping = defaultShipping;
    return this;
  }

  /**
   * If this address is default shipping address.
   * @return defaultShipping
   */
  @javax.annotation.Nullable
  public Boolean getDefaultShipping() {
    return defaultShipping;
  }

  public void setDefaultShipping(Boolean defaultShipping) {
    this.defaultShipping = defaultShipping;
  }


  public CustomerDataAddressInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\AddressInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public CustomerDataAddressInterface fax(String fax) {
    this.fax = fax;
    return this;
  }

  /**
   * Fax number
   * @return fax
   */
  @javax.annotation.Nullable
  public String getFax() {
    return fax;
  }

  public void setFax(String fax) {
    this.fax = fax;
  }


  public CustomerDataAddressInterface firstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

  /**
   * First name
   * @return firstname
   */
  @javax.annotation.Nullable
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }


  public CustomerDataAddressInterface id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CustomerDataAddressInterface lastname(String lastname) {
    this.lastname = lastname;
    return this;
  }

  /**
   * Last name
   * @return lastname
   */
  @javax.annotation.Nullable
  public String getLastname() {
    return lastname;
  }

  public void setLastname(String lastname) {
    this.lastname = lastname;
  }


  public CustomerDataAddressInterface middlename(String middlename) {
    this.middlename = middlename;
    return this;
  }

  /**
   * Middle name
   * @return middlename
   */
  @javax.annotation.Nullable
  public String getMiddlename() {
    return middlename;
  }

  public void setMiddlename(String middlename) {
    this.middlename = middlename;
  }


  public CustomerDataAddressInterface postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * Postcode
   * @return postcode
   */
  @javax.annotation.Nullable
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }


  public CustomerDataAddressInterface prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * Prefix
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  public CustomerDataAddressInterface region(CustomerDataRegionInterface region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public CustomerDataRegionInterface getRegion() {
    return region;
  }

  public void setRegion(CustomerDataRegionInterface region) {
    this.region = region;
  }


  public CustomerDataAddressInterface regionId(Integer regionId) {
    this.regionId = regionId;
    return this;
  }

  /**
   * Region ID
   * @return regionId
   */
  @javax.annotation.Nullable
  public Integer getRegionId() {
    return regionId;
  }

  public void setRegionId(Integer regionId) {
    this.regionId = regionId;
  }


  public CustomerDataAddressInterface street(List<String> street) {
    this.street = street;
    return this;
  }

  public CustomerDataAddressInterface addStreetItem(String streetItem) {
    if (this.street == null) {
      this.street = new ArrayList<>();
    }
    this.street.add(streetItem);
    return this;
  }

  /**
   * Street
   * @return street
   */
  @javax.annotation.Nullable
  public List<String> getStreet() {
    return street;
  }

  public void setStreet(List<String> street) {
    this.street = street;
  }


  public CustomerDataAddressInterface suffix(String suffix) {
    this.suffix = suffix;
    return this;
  }

  /**
   * Suffix
   * @return suffix
   */
  @javax.annotation.Nullable
  public String getSuffix() {
    return suffix;
  }

  public void setSuffix(String suffix) {
    this.suffix = suffix;
  }


  public CustomerDataAddressInterface telephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  /**
   * Telephone number
   * @return telephone
   */
  @javax.annotation.Nullable
  public String getTelephone() {
    return telephone;
  }

  public void setTelephone(String telephone) {
    this.telephone = telephone;
  }


  public CustomerDataAddressInterface vatId(String vatId) {
    this.vatId = vatId;
    return this;
  }

  /**
   * Vat id
   * @return vatId
   */
  @javax.annotation.Nullable
  public String getVatId() {
    return vatId;
  }

  public void setVatId(String vatId) {
    this.vatId = vatId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerDataAddressInterface customerDataAddressInterface = (CustomerDataAddressInterface) o;
    return Objects.equals(this.city, customerDataAddressInterface.city) &&
        Objects.equals(this.company, customerDataAddressInterface.company) &&
        Objects.equals(this.countryId, customerDataAddressInterface.countryId) &&
        Objects.equals(this.customAttributes, customerDataAddressInterface.customAttributes) &&
        Objects.equals(this.customerId, customerDataAddressInterface.customerId) &&
        Objects.equals(this.defaultBilling, customerDataAddressInterface.defaultBilling) &&
        Objects.equals(this.defaultShipping, customerDataAddressInterface.defaultShipping) &&
        Objects.equals(this.extensionAttributes, customerDataAddressInterface.extensionAttributes) &&
        Objects.equals(this.fax, customerDataAddressInterface.fax) &&
        Objects.equals(this.firstname, customerDataAddressInterface.firstname) &&
        Objects.equals(this.id, customerDataAddressInterface.id) &&
        Objects.equals(this.lastname, customerDataAddressInterface.lastname) &&
        Objects.equals(this.middlename, customerDataAddressInterface.middlename) &&
        Objects.equals(this.postcode, customerDataAddressInterface.postcode) &&
        Objects.equals(this.prefix, customerDataAddressInterface.prefix) &&
        Objects.equals(this.region, customerDataAddressInterface.region) &&
        Objects.equals(this.regionId, customerDataAddressInterface.regionId) &&
        Objects.equals(this.street, customerDataAddressInterface.street) &&
        Objects.equals(this.suffix, customerDataAddressInterface.suffix) &&
        Objects.equals(this.telephone, customerDataAddressInterface.telephone) &&
        Objects.equals(this.vatId, customerDataAddressInterface.vatId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, company, countryId, customAttributes, customerId, defaultBilling, defaultShipping, extensionAttributes, fax, firstname, id, lastname, middlename, postcode, prefix, region, regionId, street, suffix, telephone, vatId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerDataAddressInterface {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    countryId: ").append(toIndentedString(countryId)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    defaultBilling: ").append(toIndentedString(defaultBilling)).append("\n");
    sb.append("    defaultShipping: ").append(toIndentedString(defaultShipping)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    middlename: ").append(toIndentedString(middlename)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    telephone: ").append(toIndentedString(telephone)).append("\n");
    sb.append("    vatId: ").append(toIndentedString(vatId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("company");
    openapiFields.add("country_id");
    openapiFields.add("custom_attributes");
    openapiFields.add("customer_id");
    openapiFields.add("default_billing");
    openapiFields.add("default_shipping");
    openapiFields.add("extension_attributes");
    openapiFields.add("fax");
    openapiFields.add("firstname");
    openapiFields.add("id");
    openapiFields.add("lastname");
    openapiFields.add("middlename");
    openapiFields.add("postcode");
    openapiFields.add("prefix");
    openapiFields.add("region");
    openapiFields.add("region_id");
    openapiFields.add("street");
    openapiFields.add("suffix");
    openapiFields.add("telephone");
    openapiFields.add("vat_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerDataAddressInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerDataAddressInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerDataAddressInterface is not found in the empty JSON string", CustomerDataAddressInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerDataAddressInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerDataAddressInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("country_id") != null && !jsonObj.get("country_id").isJsonNull()) && !jsonObj.get("country_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_id").toString()));
      }
      if (jsonObj.get("custom_attributes") != null && !jsonObj.get("custom_attributes").isJsonNull()) {
        JsonArray jsonArraycustomAttributes = jsonObj.getAsJsonArray("custom_attributes");
        if (jsonArraycustomAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("custom_attributes").toString()));
          }

          // validate the optional field `custom_attributes` (array)
          for (int i = 0; i < jsonArraycustomAttributes.size(); i++) {
            FrameworkAttributeInterface.validateJsonElement(jsonArraycustomAttributes.get(i));
          };
        }
      }
      if ((jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull()) && !jsonObj.get("fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fax").toString()));
      }
      if ((jsonObj.get("firstname") != null && !jsonObj.get("firstname").isJsonNull()) && !jsonObj.get("firstname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstname").toString()));
      }
      if ((jsonObj.get("lastname") != null && !jsonObj.get("lastname").isJsonNull()) && !jsonObj.get("lastname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastname").toString()));
      }
      if ((jsonObj.get("middlename") != null && !jsonObj.get("middlename").isJsonNull()) && !jsonObj.get("middlename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middlename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middlename").toString()));
      }
      if ((jsonObj.get("postcode") != null && !jsonObj.get("postcode").isJsonNull()) && !jsonObj.get("postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postcode").toString()));
      }
      if ((jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) && !jsonObj.get("prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefix").toString()));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        CustomerDataRegionInterface.validateJsonElement(jsonObj.get("region"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull() && !jsonObj.get("street").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be an array in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("suffix") != null && !jsonObj.get("suffix").isJsonNull()) && !jsonObj.get("suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suffix").toString()));
      }
      if ((jsonObj.get("telephone") != null && !jsonObj.get("telephone").isJsonNull()) && !jsonObj.get("telephone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `telephone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("telephone").toString()));
      }
      if ((jsonObj.get("vat_id") != null && !jsonObj.get("vat_id").isJsonNull()) && !jsonObj.get("vat_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vat_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vat_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerDataAddressInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerDataAddressInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerDataAddressInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerDataAddressInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerDataAddressInterface>() {
           @Override
           public void write(JsonWriter out, CustomerDataAddressInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerDataAddressInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerDataAddressInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerDataAddressInterface
   * @throws IOException if the JSON string is invalid with respect to CustomerDataAddressInterface
   */
  public static CustomerDataAddressInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerDataAddressInterface.class);
  }

  /**
   * Convert an instance of CustomerDataAddressInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

