/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tax rule interface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaxDataTaxRuleInterface {
  public static final String SERIALIZED_NAME_CALCULATE_SUBTOTAL = "calculate_subtotal";
  @SerializedName(SERIALIZED_NAME_CALCULATE_SUBTOTAL)
  private Boolean calculateSubtotal;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CUSTOMER_TAX_CLASS_IDS = "customer_tax_class_ids";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TAX_CLASS_IDS)
  private List<Integer> customerTaxClassIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_PRODUCT_TAX_CLASS_IDS = "product_tax_class_ids";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TAX_CLASS_IDS)
  private List<Integer> productTaxClassIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX_RATE_IDS = "tax_rate_ids";
  @SerializedName(SERIALIZED_NAME_TAX_RATE_IDS)
  private List<Integer> taxRateIds = new ArrayList<>();

  public TaxDataTaxRuleInterface() {
  }

  public TaxDataTaxRuleInterface calculateSubtotal(Boolean calculateSubtotal) {
    this.calculateSubtotal = calculateSubtotal;
    return this;
  }

  /**
   * Calculate subtotal.
   * @return calculateSubtotal
   */
  @javax.annotation.Nullable
  public Boolean getCalculateSubtotal() {
    return calculateSubtotal;
  }

  public void setCalculateSubtotal(Boolean calculateSubtotal) {
    this.calculateSubtotal = calculateSubtotal;
  }


  public TaxDataTaxRuleInterface code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Tax rule code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public TaxDataTaxRuleInterface customerTaxClassIds(List<Integer> customerTaxClassIds) {
    this.customerTaxClassIds = customerTaxClassIds;
    return this;
  }

  public TaxDataTaxRuleInterface addCustomerTaxClassIdsItem(Integer customerTaxClassIdsItem) {
    if (this.customerTaxClassIds == null) {
      this.customerTaxClassIds = new ArrayList<>();
    }
    this.customerTaxClassIds.add(customerTaxClassIdsItem);
    return this;
  }

  /**
   * Customer tax class id
   * @return customerTaxClassIds
   */
  @javax.annotation.Nonnull
  public List<Integer> getCustomerTaxClassIds() {
    return customerTaxClassIds;
  }

  public void setCustomerTaxClassIds(List<Integer> customerTaxClassIds) {
    this.customerTaxClassIds = customerTaxClassIds;
  }


  public TaxDataTaxRuleInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRuleInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public TaxDataTaxRuleInterface id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public TaxDataTaxRuleInterface position(Integer position) {
    this.position = position;
    return this;
  }

  /**
   * Sort order.
   * @return position
   */
  @javax.annotation.Nonnull
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public TaxDataTaxRuleInterface priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Priority
   * @return priority
   */
  @javax.annotation.Nonnull
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public TaxDataTaxRuleInterface productTaxClassIds(List<Integer> productTaxClassIds) {
    this.productTaxClassIds = productTaxClassIds;
    return this;
  }

  public TaxDataTaxRuleInterface addProductTaxClassIdsItem(Integer productTaxClassIdsItem) {
    if (this.productTaxClassIds == null) {
      this.productTaxClassIds = new ArrayList<>();
    }
    this.productTaxClassIds.add(productTaxClassIdsItem);
    return this;
  }

  /**
   * Product tax class id
   * @return productTaxClassIds
   */
  @javax.annotation.Nonnull
  public List<Integer> getProductTaxClassIds() {
    return productTaxClassIds;
  }

  public void setProductTaxClassIds(List<Integer> productTaxClassIds) {
    this.productTaxClassIds = productTaxClassIds;
  }


  public TaxDataTaxRuleInterface taxRateIds(List<Integer> taxRateIds) {
    this.taxRateIds = taxRateIds;
    return this;
  }

  public TaxDataTaxRuleInterface addTaxRateIdsItem(Integer taxRateIdsItem) {
    if (this.taxRateIds == null) {
      this.taxRateIds = new ArrayList<>();
    }
    this.taxRateIds.add(taxRateIdsItem);
    return this;
  }

  /**
   * Tax rate ids
   * @return taxRateIds
   */
  @javax.annotation.Nonnull
  public List<Integer> getTaxRateIds() {
    return taxRateIds;
  }

  public void setTaxRateIds(List<Integer> taxRateIds) {
    this.taxRateIds = taxRateIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxDataTaxRuleInterface taxDataTaxRuleInterface = (TaxDataTaxRuleInterface) o;
    return Objects.equals(this.calculateSubtotal, taxDataTaxRuleInterface.calculateSubtotal) &&
        Objects.equals(this.code, taxDataTaxRuleInterface.code) &&
        Objects.equals(this.customerTaxClassIds, taxDataTaxRuleInterface.customerTaxClassIds) &&
        Objects.equals(this.extensionAttributes, taxDataTaxRuleInterface.extensionAttributes) &&
        Objects.equals(this.id, taxDataTaxRuleInterface.id) &&
        Objects.equals(this.position, taxDataTaxRuleInterface.position) &&
        Objects.equals(this.priority, taxDataTaxRuleInterface.priority) &&
        Objects.equals(this.productTaxClassIds, taxDataTaxRuleInterface.productTaxClassIds) &&
        Objects.equals(this.taxRateIds, taxDataTaxRuleInterface.taxRateIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculateSubtotal, code, customerTaxClassIds, extensionAttributes, id, position, priority, productTaxClassIds, taxRateIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxDataTaxRuleInterface {\n");
    sb.append("    calculateSubtotal: ").append(toIndentedString(calculateSubtotal)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    customerTaxClassIds: ").append(toIndentedString(customerTaxClassIds)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    productTaxClassIds: ").append(toIndentedString(productTaxClassIds)).append("\n");
    sb.append("    taxRateIds: ").append(toIndentedString(taxRateIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calculate_subtotal");
    openapiFields.add("code");
    openapiFields.add("customer_tax_class_ids");
    openapiFields.add("extension_attributes");
    openapiFields.add("id");
    openapiFields.add("position");
    openapiFields.add("priority");
    openapiFields.add("product_tax_class_ids");
    openapiFields.add("tax_rate_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("customer_tax_class_ids");
    openapiRequiredFields.add("position");
    openapiRequiredFields.add("priority");
    openapiRequiredFields.add("product_tax_class_ids");
    openapiRequiredFields.add("tax_rate_ids");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaxDataTaxRuleInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaxDataTaxRuleInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxDataTaxRuleInterface is not found in the empty JSON string", TaxDataTaxRuleInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaxDataTaxRuleInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxDataTaxRuleInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TaxDataTaxRuleInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("customer_tax_class_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("customer_tax_class_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_tax_class_ids` to be an array in the JSON string but got `%s`", jsonObj.get("customer_tax_class_ids").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("product_tax_class_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("product_tax_class_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_tax_class_ids` to be an array in the JSON string but got `%s`", jsonObj.get("product_tax_class_ids").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tax_rate_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tax_rate_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_rate_ids` to be an array in the JSON string but got `%s`", jsonObj.get("tax_rate_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxDataTaxRuleInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxDataTaxRuleInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxDataTaxRuleInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxDataTaxRuleInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxDataTaxRuleInterface>() {
           @Override
           public void write(JsonWriter out, TaxDataTaxRuleInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxDataTaxRuleInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaxDataTaxRuleInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaxDataTaxRuleInterface
   * @throws IOException if the JSON string is invalid with respect to TaxDataTaxRuleInterface
   */
  public static TaxDataTaxRuleInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxDataTaxRuleInterface.class);
  }

  /**
   * Convert an instance of TaxDataTaxRuleInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

