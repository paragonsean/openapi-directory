/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface WrappingInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GiftWrappingDataWrappingInterface {
  public static final String SERIALIZED_NAME_BASE_CURRENCY_CODE = "base_currency_code";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY_CODE)
  private String baseCurrencyCode;

  public static final String SERIALIZED_NAME_BASE_PRICE = "base_price";
  @SerializedName(SERIALIZED_NAME_BASE_PRICE)
  private BigDecimal basePrice;

  public static final String SERIALIZED_NAME_DESIGN = "design";
  @SerializedName(SERIALIZED_NAME_DESIGN)
  private String design;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_IMAGE_BASE64_CONTENT = "image_base64_content";
  @SerializedName(SERIALIZED_NAME_IMAGE_BASE64_CONTENT)
  private String imageBase64Content;

  public static final String SERIALIZED_NAME_IMAGE_NAME = "image_name";
  @SerializedName(SERIALIZED_NAME_IMAGE_NAME)
  private String imageName;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_WEBSITE_IDS = "website_ids";
  @SerializedName(SERIALIZED_NAME_WEBSITE_IDS)
  private List<Integer> websiteIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_WRAPPING_ID = "wrapping_id";
  @SerializedName(SERIALIZED_NAME_WRAPPING_ID)
  private Integer wrappingId;

  public GiftWrappingDataWrappingInterface() {
  }

  public GiftWrappingDataWrappingInterface baseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
    return this;
  }

  /**
   * Get baseCurrencyCode
   * @return baseCurrencyCode
   */
  @javax.annotation.Nullable
  public String getBaseCurrencyCode() {
    return baseCurrencyCode;
  }

  public void setBaseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
  }


  public GiftWrappingDataWrappingInterface basePrice(BigDecimal basePrice) {
    this.basePrice = basePrice;
    return this;
  }

  /**
   * Get basePrice
   * @return basePrice
   */
  @javax.annotation.Nonnull
  public BigDecimal getBasePrice() {
    return basePrice;
  }

  public void setBasePrice(BigDecimal basePrice) {
    this.basePrice = basePrice;
  }


  public GiftWrappingDataWrappingInterface design(String design) {
    this.design = design;
    return this;
  }

  /**
   * Get design
   * @return design
   */
  @javax.annotation.Nonnull
  public String getDesign() {
    return design;
  }

  public void setDesign(String design) {
    this.design = design;
  }


  public GiftWrappingDataWrappingInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\GiftWrapping\\Api\\Data\\WrappingInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public GiftWrappingDataWrappingInterface imageBase64Content(String imageBase64Content) {
    this.imageBase64Content = imageBase64Content;
    return this;
  }

  /**
   * Get imageBase64Content
   * @return imageBase64Content
   */
  @javax.annotation.Nullable
  public String getImageBase64Content() {
    return imageBase64Content;
  }

  public void setImageBase64Content(String imageBase64Content) {
    this.imageBase64Content = imageBase64Content;
  }


  public GiftWrappingDataWrappingInterface imageName(String imageName) {
    this.imageName = imageName;
    return this;
  }

  /**
   * Get imageName
   * @return imageName
   */
  @javax.annotation.Nullable
  public String getImageName() {
    return imageName;
  }

  public void setImageName(String imageName) {
    this.imageName = imageName;
  }


  public GiftWrappingDataWrappingInterface imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Wrapping image URL.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public GiftWrappingDataWrappingInterface status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public GiftWrappingDataWrappingInterface websiteIds(List<Integer> websiteIds) {
    this.websiteIds = websiteIds;
    return this;
  }

  public GiftWrappingDataWrappingInterface addWebsiteIdsItem(Integer websiteIdsItem) {
    if (this.websiteIds == null) {
      this.websiteIds = new ArrayList<>();
    }
    this.websiteIds.add(websiteIdsItem);
    return this;
  }

  /**
   * Get websiteIds
   * @return websiteIds
   */
  @javax.annotation.Nullable
  public List<Integer> getWebsiteIds() {
    return websiteIds;
  }

  public void setWebsiteIds(List<Integer> websiteIds) {
    this.websiteIds = websiteIds;
  }


  public GiftWrappingDataWrappingInterface wrappingId(Integer wrappingId) {
    this.wrappingId = wrappingId;
    return this;
  }

  /**
   * Get wrappingId
   * @return wrappingId
   */
  @javax.annotation.Nullable
  public Integer getWrappingId() {
    return wrappingId;
  }

  public void setWrappingId(Integer wrappingId) {
    this.wrappingId = wrappingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GiftWrappingDataWrappingInterface giftWrappingDataWrappingInterface = (GiftWrappingDataWrappingInterface) o;
    return Objects.equals(this.baseCurrencyCode, giftWrappingDataWrappingInterface.baseCurrencyCode) &&
        Objects.equals(this.basePrice, giftWrappingDataWrappingInterface.basePrice) &&
        Objects.equals(this.design, giftWrappingDataWrappingInterface.design) &&
        Objects.equals(this.extensionAttributes, giftWrappingDataWrappingInterface.extensionAttributes) &&
        Objects.equals(this.imageBase64Content, giftWrappingDataWrappingInterface.imageBase64Content) &&
        Objects.equals(this.imageName, giftWrappingDataWrappingInterface.imageName) &&
        Objects.equals(this.imageUrl, giftWrappingDataWrappingInterface.imageUrl) &&
        Objects.equals(this.status, giftWrappingDataWrappingInterface.status) &&
        Objects.equals(this.websiteIds, giftWrappingDataWrappingInterface.websiteIds) &&
        Objects.equals(this.wrappingId, giftWrappingDataWrappingInterface.wrappingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseCurrencyCode, basePrice, design, extensionAttributes, imageBase64Content, imageName, imageUrl, status, websiteIds, wrappingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GiftWrappingDataWrappingInterface {\n");
    sb.append("    baseCurrencyCode: ").append(toIndentedString(baseCurrencyCode)).append("\n");
    sb.append("    basePrice: ").append(toIndentedString(basePrice)).append("\n");
    sb.append("    design: ").append(toIndentedString(design)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    imageBase64Content: ").append(toIndentedString(imageBase64Content)).append("\n");
    sb.append("    imageName: ").append(toIndentedString(imageName)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    websiteIds: ").append(toIndentedString(websiteIds)).append("\n");
    sb.append("    wrappingId: ").append(toIndentedString(wrappingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_currency_code");
    openapiFields.add("base_price");
    openapiFields.add("design");
    openapiFields.add("extension_attributes");
    openapiFields.add("image_base64_content");
    openapiFields.add("image_name");
    openapiFields.add("image_url");
    openapiFields.add("status");
    openapiFields.add("website_ids");
    openapiFields.add("wrapping_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("base_price");
    openapiRequiredFields.add("design");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GiftWrappingDataWrappingInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GiftWrappingDataWrappingInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GiftWrappingDataWrappingInterface is not found in the empty JSON string", GiftWrappingDataWrappingInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GiftWrappingDataWrappingInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GiftWrappingDataWrappingInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GiftWrappingDataWrappingInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("base_currency_code") != null && !jsonObj.get("base_currency_code").isJsonNull()) && !jsonObj.get("base_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_currency_code").toString()));
      }
      if (!jsonObj.get("design").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `design` to be a primitive type in the JSON string but got `%s`", jsonObj.get("design").toString()));
      }
      if ((jsonObj.get("image_base64_content") != null && !jsonObj.get("image_base64_content").isJsonNull()) && !jsonObj.get("image_base64_content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_base64_content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_base64_content").toString()));
      }
      if ((jsonObj.get("image_name") != null && !jsonObj.get("image_name").isJsonNull()) && !jsonObj.get("image_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_name").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("website_ids") != null && !jsonObj.get("website_ids").isJsonNull() && !jsonObj.get("website_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `website_ids` to be an array in the JSON string but got `%s`", jsonObj.get("website_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GiftWrappingDataWrappingInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GiftWrappingDataWrappingInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GiftWrappingDataWrappingInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GiftWrappingDataWrappingInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<GiftWrappingDataWrappingInterface>() {
           @Override
           public void write(JsonWriter out, GiftWrappingDataWrappingInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GiftWrappingDataWrappingInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GiftWrappingDataWrappingInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GiftWrappingDataWrappingInterface
   * @throws IOException if the JSON string is invalid with respect to GiftWrappingDataWrappingInterface
   */
  public static GiftWrappingDataWrappingInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GiftWrappingDataWrappingInterface.class);
  }

  /**
   * Convert an instance of GiftWrappingDataWrappingInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

