/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Temando Order Collection Point Interface â€“ Order Details/Fulfillment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TemandoShippingDataCollectionPointOrderCollectionPointInterface {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COLLECTION_POINT_ID = "collection_point_id";
  @SerializedName(SERIALIZED_NAME_COLLECTION_POINT_ID)
  private String collectionPointId;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POSTCODE = "postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public static final String SERIALIZED_NAME_RECIPIENT_ADDRESS_ID = "recipient_address_id";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ADDRESS_ID)
  private Integer recipientAddressId;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private List<String> street = new ArrayList<>();

  public TemandoShippingDataCollectionPointOrderCollectionPointInterface() {
  }

  public TemandoShippingDataCollectionPointOrderCollectionPointInterface city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public TemandoShippingDataCollectionPointOrderCollectionPointInterface collectionPointId(String collectionPointId) {
    this.collectionPointId = collectionPointId;
    return this;
  }

  /**
   * Get collectionPointId
   * @return collectionPointId
   */
  @javax.annotation.Nonnull
  public String getCollectionPointId() {
    return collectionPointId;
  }

  public void setCollectionPointId(String collectionPointId) {
    this.collectionPointId = collectionPointId;
  }


  public TemandoShippingDataCollectionPointOrderCollectionPointInterface country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public TemandoShippingDataCollectionPointOrderCollectionPointInterface name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TemandoShippingDataCollectionPointOrderCollectionPointInterface postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * Get postcode
   * @return postcode
   */
  @javax.annotation.Nonnull
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }


  public TemandoShippingDataCollectionPointOrderCollectionPointInterface recipientAddressId(Integer recipientAddressId) {
    this.recipientAddressId = recipientAddressId;
    return this;
  }

  /**
   * Get recipientAddressId
   * @return recipientAddressId
   */
  @javax.annotation.Nonnull
  public Integer getRecipientAddressId() {
    return recipientAddressId;
  }

  public void setRecipientAddressId(Integer recipientAddressId) {
    this.recipientAddressId = recipientAddressId;
  }


  public TemandoShippingDataCollectionPointOrderCollectionPointInterface region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nonnull
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public TemandoShippingDataCollectionPointOrderCollectionPointInterface street(List<String> street) {
    this.street = street;
    return this;
  }

  public TemandoShippingDataCollectionPointOrderCollectionPointInterface addStreetItem(String streetItem) {
    if (this.street == null) {
      this.street = new ArrayList<>();
    }
    this.street.add(streetItem);
    return this;
  }

  /**
   * Get street
   * @return street
   */
  @javax.annotation.Nonnull
  public List<String> getStreet() {
    return street;
  }

  public void setStreet(List<String> street) {
    this.street = street;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemandoShippingDataCollectionPointOrderCollectionPointInterface temandoShippingDataCollectionPointOrderCollectionPointInterface = (TemandoShippingDataCollectionPointOrderCollectionPointInterface) o;
    return Objects.equals(this.city, temandoShippingDataCollectionPointOrderCollectionPointInterface.city) &&
        Objects.equals(this.collectionPointId, temandoShippingDataCollectionPointOrderCollectionPointInterface.collectionPointId) &&
        Objects.equals(this.country, temandoShippingDataCollectionPointOrderCollectionPointInterface.country) &&
        Objects.equals(this.name, temandoShippingDataCollectionPointOrderCollectionPointInterface.name) &&
        Objects.equals(this.postcode, temandoShippingDataCollectionPointOrderCollectionPointInterface.postcode) &&
        Objects.equals(this.recipientAddressId, temandoShippingDataCollectionPointOrderCollectionPointInterface.recipientAddressId) &&
        Objects.equals(this.region, temandoShippingDataCollectionPointOrderCollectionPointInterface.region) &&
        Objects.equals(this.street, temandoShippingDataCollectionPointOrderCollectionPointInterface.street);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, collectionPointId, country, name, postcode, recipientAddressId, region, street);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemandoShippingDataCollectionPointOrderCollectionPointInterface {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    collectionPointId: ").append(toIndentedString(collectionPointId)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    recipientAddressId: ").append(toIndentedString(recipientAddressId)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("collection_point_id");
    openapiFields.add("country");
    openapiFields.add("name");
    openapiFields.add("postcode");
    openapiFields.add("recipient_address_id");
    openapiFields.add("region");
    openapiFields.add("street");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("collection_point_id");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("postcode");
    openapiRequiredFields.add("recipient_address_id");
    openapiRequiredFields.add("region");
    openapiRequiredFields.add("street");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemandoShippingDataCollectionPointOrderCollectionPointInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemandoShippingDataCollectionPointOrderCollectionPointInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemandoShippingDataCollectionPointOrderCollectionPointInterface is not found in the empty JSON string", TemandoShippingDataCollectionPointOrderCollectionPointInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemandoShippingDataCollectionPointOrderCollectionPointInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemandoShippingDataCollectionPointOrderCollectionPointInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TemandoShippingDataCollectionPointOrderCollectionPointInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("collection_point_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection_point_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collection_point_id").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postcode").toString()));
      }
      if (!jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("street") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("street").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be an array in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemandoShippingDataCollectionPointOrderCollectionPointInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemandoShippingDataCollectionPointOrderCollectionPointInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemandoShippingDataCollectionPointOrderCollectionPointInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemandoShippingDataCollectionPointOrderCollectionPointInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<TemandoShippingDataCollectionPointOrderCollectionPointInterface>() {
           @Override
           public void write(JsonWriter out, TemandoShippingDataCollectionPointOrderCollectionPointInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemandoShippingDataCollectionPointOrderCollectionPointInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemandoShippingDataCollectionPointOrderCollectionPointInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemandoShippingDataCollectionPointOrderCollectionPointInterface
   * @throws IOException if the JSON string is invalid with respect to TemandoShippingDataCollectionPointOrderCollectionPointInterface
   */
  public static TemandoShippingDataCollectionPointOrderCollectionPointInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemandoShippingDataCollectionPointOrderCollectionPointInterface.class);
  }

  /**
   * Convert an instance of TemandoShippingDataCollectionPointOrderCollectionPointInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

