/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * History data transfer object interface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanyCreditDataHistoryDataInterface {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_AVAILABLE_LIMIT = "available_limit";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_LIMIT)
  private BigDecimal availableLimit;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private BigDecimal balance;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_COMPANY_CREDIT_ID = "company_credit_id";
  @SerializedName(SERIALIZED_NAME_COMPANY_CREDIT_ID)
  private Integer companyCreditId;

  public static final String SERIALIZED_NAME_CREDIT_LIMIT = "credit_limit";
  @SerializedName(SERIALIZED_NAME_CREDIT_LIMIT)
  private BigDecimal creditLimit;

  public static final String SERIALIZED_NAME_CURRENCY_CREDIT = "currency_credit";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CREDIT)
  private String currencyCredit;

  public static final String SERIALIZED_NAME_CURRENCY_OPERATION = "currency_operation";
  @SerializedName(SERIALIZED_NAME_CURRENCY_OPERATION)
  private String currencyOperation;

  public static final String SERIALIZED_NAME_DATETIME = "datetime";
  @SerializedName(SERIALIZED_NAME_DATETIME)
  private String datetime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER = "purchase_order";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER)
  private String purchaseOrder;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private BigDecimal rate;

  public static final String SERIALIZED_NAME_RATE_CREDIT = "rate_credit";
  @SerializedName(SERIALIZED_NAME_RATE_CREDIT)
  private BigDecimal rateCredit;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Integer type;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_USER_TYPE = "user_type";
  @SerializedName(SERIALIZED_NAME_USER_TYPE)
  private Integer userType;

  public CompanyCreditDataHistoryDataInterface() {
  }

  public CompanyCreditDataHistoryDataInterface amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Amount.
   * @return amount
   */
  @javax.annotation.Nonnull
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public CompanyCreditDataHistoryDataInterface availableLimit(BigDecimal availableLimit) {
    this.availableLimit = availableLimit;
    return this;
  }

  /**
   * Available limit.
   * @return availableLimit
   */
  @javax.annotation.Nullable
  public BigDecimal getAvailableLimit() {
    return availableLimit;
  }

  public void setAvailableLimit(BigDecimal availableLimit) {
    this.availableLimit = availableLimit;
  }


  public CompanyCreditDataHistoryDataInterface balance(BigDecimal balance) {
    this.balance = balance;
    return this;
  }

  /**
   * Outstanding balance.
   * @return balance
   */
  @javax.annotation.Nonnull
  public BigDecimal getBalance() {
    return balance;
  }

  public void setBalance(BigDecimal balance) {
    this.balance = balance;
  }


  public CompanyCreditDataHistoryDataInterface comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Comment.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public CompanyCreditDataHistoryDataInterface companyCreditId(Integer companyCreditId) {
    this.companyCreditId = companyCreditId;
    return this;
  }

  /**
   * Company credit id.
   * @return companyCreditId
   */
  @javax.annotation.Nullable
  public Integer getCompanyCreditId() {
    return companyCreditId;
  }

  public void setCompanyCreditId(Integer companyCreditId) {
    this.companyCreditId = companyCreditId;
  }


  public CompanyCreditDataHistoryDataInterface creditLimit(BigDecimal creditLimit) {
    this.creditLimit = creditLimit;
    return this;
  }

  /**
   * Credit limit.
   * @return creditLimit
   */
  @javax.annotation.Nonnull
  public BigDecimal getCreditLimit() {
    return creditLimit;
  }

  public void setCreditLimit(BigDecimal creditLimit) {
    this.creditLimit = creditLimit;
  }


  public CompanyCreditDataHistoryDataInterface currencyCredit(String currencyCredit) {
    this.currencyCredit = currencyCredit;
    return this;
  }

  /**
   * Currency code of credit.
   * @return currencyCredit
   */
  @javax.annotation.Nullable
  public String getCurrencyCredit() {
    return currencyCredit;
  }

  public void setCurrencyCredit(String currencyCredit) {
    this.currencyCredit = currencyCredit;
  }


  public CompanyCreditDataHistoryDataInterface currencyOperation(String currencyOperation) {
    this.currencyOperation = currencyOperation;
    return this;
  }

  /**
   * Currency code of operation.
   * @return currencyOperation
   */
  @javax.annotation.Nullable
  public String getCurrencyOperation() {
    return currencyOperation;
  }

  public void setCurrencyOperation(String currencyOperation) {
    this.currencyOperation = currencyOperation;
  }


  public CompanyCreditDataHistoryDataInterface datetime(String datetime) {
    this.datetime = datetime;
    return this;
  }

  /**
   * Operation datetime.
   * @return datetime
   */
  @javax.annotation.Nullable
  public String getDatetime() {
    return datetime;
  }

  public void setDatetime(String datetime) {
    this.datetime = datetime;
  }


  public CompanyCreditDataHistoryDataInterface id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CompanyCreditDataHistoryDataInterface purchaseOrder(String purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
    return this;
  }

  /**
   * Purchase Order number.
   * @return purchaseOrder
   */
  @javax.annotation.Nullable
  public String getPurchaseOrder() {
    return purchaseOrder;
  }

  public void setPurchaseOrder(String purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
  }


  public CompanyCreditDataHistoryDataInterface rate(BigDecimal rate) {
    this.rate = rate;
    return this;
  }

  /**
   * Currency rate between credit and operation currencies.
   * @return rate
   */
  @javax.annotation.Nonnull
  public BigDecimal getRate() {
    return rate;
  }

  public void setRate(BigDecimal rate) {
    this.rate = rate;
  }


  public CompanyCreditDataHistoryDataInterface rateCredit(BigDecimal rateCredit) {
    this.rateCredit = rateCredit;
    return this;
  }

  /**
   * Rate between credit and base currencies.
   * @return rateCredit
   */
  @javax.annotation.Nullable
  public BigDecimal getRateCredit() {
    return rateCredit;
  }

  public void setRateCredit(BigDecimal rateCredit) {
    this.rateCredit = rateCredit;
  }


  public CompanyCreditDataHistoryDataInterface type(Integer type) {
    this.type = type;
    return this;
  }

  /**
   * Type of operation.
   * @return type
   */
  @javax.annotation.Nullable
  public Integer getType() {
    return type;
  }

  public void setType(Integer type) {
    this.type = type;
  }


  public CompanyCreditDataHistoryDataInterface userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User Id.
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public CompanyCreditDataHistoryDataInterface userType(Integer userType) {
    this.userType = userType;
    return this;
  }

  /**
   * User type: integration, admin, customer.
   * @return userType
   */
  @javax.annotation.Nullable
  public Integer getUserType() {
    return userType;
  }

  public void setUserType(Integer userType) {
    this.userType = userType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyCreditDataHistoryDataInterface companyCreditDataHistoryDataInterface = (CompanyCreditDataHistoryDataInterface) o;
    return Objects.equals(this.amount, companyCreditDataHistoryDataInterface.amount) &&
        Objects.equals(this.availableLimit, companyCreditDataHistoryDataInterface.availableLimit) &&
        Objects.equals(this.balance, companyCreditDataHistoryDataInterface.balance) &&
        Objects.equals(this.comment, companyCreditDataHistoryDataInterface.comment) &&
        Objects.equals(this.companyCreditId, companyCreditDataHistoryDataInterface.companyCreditId) &&
        Objects.equals(this.creditLimit, companyCreditDataHistoryDataInterface.creditLimit) &&
        Objects.equals(this.currencyCredit, companyCreditDataHistoryDataInterface.currencyCredit) &&
        Objects.equals(this.currencyOperation, companyCreditDataHistoryDataInterface.currencyOperation) &&
        Objects.equals(this.datetime, companyCreditDataHistoryDataInterface.datetime) &&
        Objects.equals(this.id, companyCreditDataHistoryDataInterface.id) &&
        Objects.equals(this.purchaseOrder, companyCreditDataHistoryDataInterface.purchaseOrder) &&
        Objects.equals(this.rate, companyCreditDataHistoryDataInterface.rate) &&
        Objects.equals(this.rateCredit, companyCreditDataHistoryDataInterface.rateCredit) &&
        Objects.equals(this.type, companyCreditDataHistoryDataInterface.type) &&
        Objects.equals(this.userId, companyCreditDataHistoryDataInterface.userId) &&
        Objects.equals(this.userType, companyCreditDataHistoryDataInterface.userType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, availableLimit, balance, comment, companyCreditId, creditLimit, currencyCredit, currencyOperation, datetime, id, purchaseOrder, rate, rateCredit, type, userId, userType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyCreditDataHistoryDataInterface {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    availableLimit: ").append(toIndentedString(availableLimit)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    companyCreditId: ").append(toIndentedString(companyCreditId)).append("\n");
    sb.append("    creditLimit: ").append(toIndentedString(creditLimit)).append("\n");
    sb.append("    currencyCredit: ").append(toIndentedString(currencyCredit)).append("\n");
    sb.append("    currencyOperation: ").append(toIndentedString(currencyOperation)).append("\n");
    sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    purchaseOrder: ").append(toIndentedString(purchaseOrder)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    rateCredit: ").append(toIndentedString(rateCredit)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("available_limit");
    openapiFields.add("balance");
    openapiFields.add("comment");
    openapiFields.add("company_credit_id");
    openapiFields.add("credit_limit");
    openapiFields.add("currency_credit");
    openapiFields.add("currency_operation");
    openapiFields.add("datetime");
    openapiFields.add("id");
    openapiFields.add("purchase_order");
    openapiFields.add("rate");
    openapiFields.add("rate_credit");
    openapiFields.add("type");
    openapiFields.add("user_id");
    openapiFields.add("user_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("credit_limit");
    openapiRequiredFields.add("rate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanyCreditDataHistoryDataInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanyCreditDataHistoryDataInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyCreditDataHistoryDataInterface is not found in the empty JSON string", CompanyCreditDataHistoryDataInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanyCreditDataHistoryDataInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanyCreditDataHistoryDataInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompanyCreditDataHistoryDataInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("currency_credit") != null && !jsonObj.get("currency_credit").isJsonNull()) && !jsonObj.get("currency_credit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_credit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_credit").toString()));
      }
      if ((jsonObj.get("currency_operation") != null && !jsonObj.get("currency_operation").isJsonNull()) && !jsonObj.get("currency_operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_operation").toString()));
      }
      if ((jsonObj.get("datetime") != null && !jsonObj.get("datetime").isJsonNull()) && !jsonObj.get("datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datetime").toString()));
      }
      if ((jsonObj.get("purchase_order") != null && !jsonObj.get("purchase_order").isJsonNull()) && !jsonObj.get("purchase_order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_order").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyCreditDataHistoryDataInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyCreditDataHistoryDataInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyCreditDataHistoryDataInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyCreditDataHistoryDataInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyCreditDataHistoryDataInterface>() {
           @Override
           public void write(JsonWriter out, CompanyCreditDataHistoryDataInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyCreditDataHistoryDataInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanyCreditDataHistoryDataInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanyCreditDataHistoryDataInterface
   * @throws IOException if the JSON string is invalid with respect to CompanyCreditDataHistoryDataInterface
   */
  public static CompanyCreditDataHistoryDataInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyCreditDataHistoryDataInterface.class);
  }

  /**
   * Convert an instance of CompanyCreditDataHistoryDataInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

