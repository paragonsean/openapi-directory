/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TaxDataOrderTaxDetailsAppliedTaxInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface OrderTaxDetailsItemInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaxDataOrderTaxDetailsItemInterface {
  public static final String SERIALIZED_NAME_APPLIED_TAXES = "applied_taxes";
  @SerializedName(SERIALIZED_NAME_APPLIED_TAXES)
  private List<TaxDataOrderTaxDetailsAppliedTaxInterface> appliedTaxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSOCIATED_ITEM_ID = "associated_item_id";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_ITEM_ID)
  private Integer associatedItemId;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_ITEM_ID = "item_id";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private Integer itemId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public TaxDataOrderTaxDetailsItemInterface() {
  }

  public TaxDataOrderTaxDetailsItemInterface appliedTaxes(List<TaxDataOrderTaxDetailsAppliedTaxInterface> appliedTaxes) {
    this.appliedTaxes = appliedTaxes;
    return this;
  }

  public TaxDataOrderTaxDetailsItemInterface addAppliedTaxesItem(TaxDataOrderTaxDetailsAppliedTaxInterface appliedTaxesItem) {
    if (this.appliedTaxes == null) {
      this.appliedTaxes = new ArrayList<>();
    }
    this.appliedTaxes.add(appliedTaxesItem);
    return this;
  }

  /**
   * Applied taxes
   * @return appliedTaxes
   */
  @javax.annotation.Nullable
  public List<TaxDataOrderTaxDetailsAppliedTaxInterface> getAppliedTaxes() {
    return appliedTaxes;
  }

  public void setAppliedTaxes(List<TaxDataOrderTaxDetailsAppliedTaxInterface> appliedTaxes) {
    this.appliedTaxes = appliedTaxes;
  }


  public TaxDataOrderTaxDetailsItemInterface associatedItemId(Integer associatedItemId) {
    this.associatedItemId = associatedItemId;
    return this;
  }

  /**
   * Associated item id if this item is associated with another item, null otherwise
   * @return associatedItemId
   */
  @javax.annotation.Nullable
  public Integer getAssociatedItemId() {
    return associatedItemId;
  }

  public void setAssociatedItemId(Integer associatedItemId) {
    this.associatedItemId = associatedItemId;
  }


  public TaxDataOrderTaxDetailsItemInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\OrderTaxDetailsItemInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public TaxDataOrderTaxDetailsItemInterface itemId(Integer itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Item id if this item is a product
   * @return itemId
   */
  @javax.annotation.Nullable
  public Integer getItemId() {
    return itemId;
  }

  public void setItemId(Integer itemId) {
    this.itemId = itemId;
  }


  public TaxDataOrderTaxDetailsItemInterface type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type (shipping, product, weee, gift wrapping, etc)
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxDataOrderTaxDetailsItemInterface taxDataOrderTaxDetailsItemInterface = (TaxDataOrderTaxDetailsItemInterface) o;
    return Objects.equals(this.appliedTaxes, taxDataOrderTaxDetailsItemInterface.appliedTaxes) &&
        Objects.equals(this.associatedItemId, taxDataOrderTaxDetailsItemInterface.associatedItemId) &&
        Objects.equals(this.extensionAttributes, taxDataOrderTaxDetailsItemInterface.extensionAttributes) &&
        Objects.equals(this.itemId, taxDataOrderTaxDetailsItemInterface.itemId) &&
        Objects.equals(this.type, taxDataOrderTaxDetailsItemInterface.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedTaxes, associatedItemId, extensionAttributes, itemId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxDataOrderTaxDetailsItemInterface {\n");
    sb.append("    appliedTaxes: ").append(toIndentedString(appliedTaxes)).append("\n");
    sb.append("    associatedItemId: ").append(toIndentedString(associatedItemId)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applied_taxes");
    openapiFields.add("associated_item_id");
    openapiFields.add("extension_attributes");
    openapiFields.add("item_id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaxDataOrderTaxDetailsItemInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaxDataOrderTaxDetailsItemInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxDataOrderTaxDetailsItemInterface is not found in the empty JSON string", TaxDataOrderTaxDetailsItemInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaxDataOrderTaxDetailsItemInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxDataOrderTaxDetailsItemInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("applied_taxes") != null && !jsonObj.get("applied_taxes").isJsonNull()) {
        JsonArray jsonArrayappliedTaxes = jsonObj.getAsJsonArray("applied_taxes");
        if (jsonArrayappliedTaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applied_taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applied_taxes` to be an array in the JSON string but got `%s`", jsonObj.get("applied_taxes").toString()));
          }

          // validate the optional field `applied_taxes` (array)
          for (int i = 0; i < jsonArrayappliedTaxes.size(); i++) {
            TaxDataOrderTaxDetailsAppliedTaxInterface.validateJsonElement(jsonArrayappliedTaxes.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxDataOrderTaxDetailsItemInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxDataOrderTaxDetailsItemInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxDataOrderTaxDetailsItemInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxDataOrderTaxDetailsItemInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxDataOrderTaxDetailsItemInterface>() {
           @Override
           public void write(JsonWriter out, TaxDataOrderTaxDetailsItemInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxDataOrderTaxDetailsItemInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaxDataOrderTaxDetailsItemInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaxDataOrderTaxDetailsItemInterface
   * @throws IOException if the JSON string is invalid with respect to TaxDataOrderTaxDetailsItemInterface
   */
  public static TaxDataOrderTaxDetailsItemInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxDataOrderTaxDetailsItemInterface.class);
  }

  /**
   * Convert an instance of TaxDataOrderTaxDetailsItemInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

