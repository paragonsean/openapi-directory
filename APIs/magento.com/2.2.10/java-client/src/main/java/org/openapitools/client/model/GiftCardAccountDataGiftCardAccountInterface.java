/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Gift Card Account data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GiftCardAccountDataGiftCardAccountInterface {
  public static final String SERIALIZED_NAME_BASE_GIFT_CARDS_AMOUNT = "base_gift_cards_amount";
  @SerializedName(SERIALIZED_NAME_BASE_GIFT_CARDS_AMOUNT)
  private BigDecimal baseGiftCardsAmount;

  public static final String SERIALIZED_NAME_BASE_GIFT_CARDS_AMOUNT_USED = "base_gift_cards_amount_used";
  @SerializedName(SERIALIZED_NAME_BASE_GIFT_CARDS_AMOUNT_USED)
  private BigDecimal baseGiftCardsAmountUsed;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_GIFT_CARDS = "gift_cards";
  @SerializedName(SERIALIZED_NAME_GIFT_CARDS)
  private List<String> giftCards = new ArrayList<>();

  public static final String SERIALIZED_NAME_GIFT_CARDS_AMOUNT = "gift_cards_amount";
  @SerializedName(SERIALIZED_NAME_GIFT_CARDS_AMOUNT)
  private BigDecimal giftCardsAmount;

  public static final String SERIALIZED_NAME_GIFT_CARDS_AMOUNT_USED = "gift_cards_amount_used";
  @SerializedName(SERIALIZED_NAME_GIFT_CARDS_AMOUNT_USED)
  private BigDecimal giftCardsAmountUsed;

  public GiftCardAccountDataGiftCardAccountInterface() {
  }

  public GiftCardAccountDataGiftCardAccountInterface baseGiftCardsAmount(BigDecimal baseGiftCardsAmount) {
    this.baseGiftCardsAmount = baseGiftCardsAmount;
    return this;
  }

  /**
   * Cards amount in base currency
   * @return baseGiftCardsAmount
   */
  @javax.annotation.Nonnull
  public BigDecimal getBaseGiftCardsAmount() {
    return baseGiftCardsAmount;
  }

  public void setBaseGiftCardsAmount(BigDecimal baseGiftCardsAmount) {
    this.baseGiftCardsAmount = baseGiftCardsAmount;
  }


  public GiftCardAccountDataGiftCardAccountInterface baseGiftCardsAmountUsed(BigDecimal baseGiftCardsAmountUsed) {
    this.baseGiftCardsAmountUsed = baseGiftCardsAmountUsed;
    return this;
  }

  /**
   * Cards amount used in base currency
   * @return baseGiftCardsAmountUsed
   */
  @javax.annotation.Nonnull
  public BigDecimal getBaseGiftCardsAmountUsed() {
    return baseGiftCardsAmountUsed;
  }

  public void setBaseGiftCardsAmountUsed(BigDecimal baseGiftCardsAmountUsed) {
    this.baseGiftCardsAmountUsed = baseGiftCardsAmountUsed;
  }


  public GiftCardAccountDataGiftCardAccountInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\GiftCardAccount\\Api\\Data\\GiftCardAccountInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public GiftCardAccountDataGiftCardAccountInterface giftCards(List<String> giftCards) {
    this.giftCards = giftCards;
    return this;
  }

  public GiftCardAccountDataGiftCardAccountInterface addGiftCardsItem(String giftCardsItem) {
    if (this.giftCards == null) {
      this.giftCards = new ArrayList<>();
    }
    this.giftCards.add(giftCardsItem);
    return this;
  }

  /**
   * Cards codes
   * @return giftCards
   */
  @javax.annotation.Nonnull
  public List<String> getGiftCards() {
    return giftCards;
  }

  public void setGiftCards(List<String> giftCards) {
    this.giftCards = giftCards;
  }


  public GiftCardAccountDataGiftCardAccountInterface giftCardsAmount(BigDecimal giftCardsAmount) {
    this.giftCardsAmount = giftCardsAmount;
    return this;
  }

  /**
   * Cards amount in quote currency
   * @return giftCardsAmount
   */
  @javax.annotation.Nonnull
  public BigDecimal getGiftCardsAmount() {
    return giftCardsAmount;
  }

  public void setGiftCardsAmount(BigDecimal giftCardsAmount) {
    this.giftCardsAmount = giftCardsAmount;
  }


  public GiftCardAccountDataGiftCardAccountInterface giftCardsAmountUsed(BigDecimal giftCardsAmountUsed) {
    this.giftCardsAmountUsed = giftCardsAmountUsed;
    return this;
  }

  /**
   * Cards amount used in quote currency
   * @return giftCardsAmountUsed
   */
  @javax.annotation.Nonnull
  public BigDecimal getGiftCardsAmountUsed() {
    return giftCardsAmountUsed;
  }

  public void setGiftCardsAmountUsed(BigDecimal giftCardsAmountUsed) {
    this.giftCardsAmountUsed = giftCardsAmountUsed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GiftCardAccountDataGiftCardAccountInterface giftCardAccountDataGiftCardAccountInterface = (GiftCardAccountDataGiftCardAccountInterface) o;
    return Objects.equals(this.baseGiftCardsAmount, giftCardAccountDataGiftCardAccountInterface.baseGiftCardsAmount) &&
        Objects.equals(this.baseGiftCardsAmountUsed, giftCardAccountDataGiftCardAccountInterface.baseGiftCardsAmountUsed) &&
        Objects.equals(this.extensionAttributes, giftCardAccountDataGiftCardAccountInterface.extensionAttributes) &&
        Objects.equals(this.giftCards, giftCardAccountDataGiftCardAccountInterface.giftCards) &&
        Objects.equals(this.giftCardsAmount, giftCardAccountDataGiftCardAccountInterface.giftCardsAmount) &&
        Objects.equals(this.giftCardsAmountUsed, giftCardAccountDataGiftCardAccountInterface.giftCardsAmountUsed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseGiftCardsAmount, baseGiftCardsAmountUsed, extensionAttributes, giftCards, giftCardsAmount, giftCardsAmountUsed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GiftCardAccountDataGiftCardAccountInterface {\n");
    sb.append("    baseGiftCardsAmount: ").append(toIndentedString(baseGiftCardsAmount)).append("\n");
    sb.append("    baseGiftCardsAmountUsed: ").append(toIndentedString(baseGiftCardsAmountUsed)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    giftCards: ").append(toIndentedString(giftCards)).append("\n");
    sb.append("    giftCardsAmount: ").append(toIndentedString(giftCardsAmount)).append("\n");
    sb.append("    giftCardsAmountUsed: ").append(toIndentedString(giftCardsAmountUsed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_gift_cards_amount");
    openapiFields.add("base_gift_cards_amount_used");
    openapiFields.add("extension_attributes");
    openapiFields.add("gift_cards");
    openapiFields.add("gift_cards_amount");
    openapiFields.add("gift_cards_amount_used");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("base_gift_cards_amount");
    openapiRequiredFields.add("base_gift_cards_amount_used");
    openapiRequiredFields.add("gift_cards");
    openapiRequiredFields.add("gift_cards_amount");
    openapiRequiredFields.add("gift_cards_amount_used");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GiftCardAccountDataGiftCardAccountInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GiftCardAccountDataGiftCardAccountInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GiftCardAccountDataGiftCardAccountInterface is not found in the empty JSON string", GiftCardAccountDataGiftCardAccountInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GiftCardAccountDataGiftCardAccountInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GiftCardAccountDataGiftCardAccountInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GiftCardAccountDataGiftCardAccountInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("gift_cards") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("gift_cards").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gift_cards` to be an array in the JSON string but got `%s`", jsonObj.get("gift_cards").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GiftCardAccountDataGiftCardAccountInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GiftCardAccountDataGiftCardAccountInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GiftCardAccountDataGiftCardAccountInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GiftCardAccountDataGiftCardAccountInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<GiftCardAccountDataGiftCardAccountInterface>() {
           @Override
           public void write(JsonWriter out, GiftCardAccountDataGiftCardAccountInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GiftCardAccountDataGiftCardAccountInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GiftCardAccountDataGiftCardAccountInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GiftCardAccountDataGiftCardAccountInterface
   * @throws IOException if the JSON string is invalid with respect to GiftCardAccountDataGiftCardAccountInterface
   */
  public static GiftCardAccountDataGiftCardAccountInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GiftCardAccountDataGiftCardAccountInterface.class);
  }

  /**
   * Convert an instance of GiftCardAccountDataGiftCardAccountInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

