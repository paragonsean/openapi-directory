/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Formatted Price interface. Aggregate formatted html with price representations. E.g.: &lt;span class&#x3D;\&quot;price\&quot;&gt;$9.00&lt;/span&gt; Consider currency, rounding and html
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogDataProductRenderFormattedPriceInfoInterface {
  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_FINAL_PRICE = "final_price";
  @SerializedName(SERIALIZED_NAME_FINAL_PRICE)
  private String finalPrice;

  public static final String SERIALIZED_NAME_MAX_PRICE = "max_price";
  @SerializedName(SERIALIZED_NAME_MAX_PRICE)
  private String maxPrice;

  public static final String SERIALIZED_NAME_MAX_REGULAR_PRICE = "max_regular_price";
  @SerializedName(SERIALIZED_NAME_MAX_REGULAR_PRICE)
  private String maxRegularPrice;

  public static final String SERIALIZED_NAME_MINIMAL_PRICE = "minimal_price";
  @SerializedName(SERIALIZED_NAME_MINIMAL_PRICE)
  private String minimalPrice;

  public static final String SERIALIZED_NAME_MINIMAL_REGULAR_PRICE = "minimal_regular_price";
  @SerializedName(SERIALIZED_NAME_MINIMAL_REGULAR_PRICE)
  private String minimalRegularPrice;

  public static final String SERIALIZED_NAME_REGULAR_PRICE = "regular_price";
  @SerializedName(SERIALIZED_NAME_REGULAR_PRICE)
  private String regularPrice;

  public static final String SERIALIZED_NAME_SPECIAL_PRICE = "special_price";
  @SerializedName(SERIALIZED_NAME_SPECIAL_PRICE)
  private String specialPrice;

  public CatalogDataProductRenderFormattedPriceInfoInterface() {
  }

  public CatalogDataProductRenderFormattedPriceInfoInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\FormattedPriceInfoInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public CatalogDataProductRenderFormattedPriceInfoInterface finalPrice(String finalPrice) {
    this.finalPrice = finalPrice;
    return this;
  }

  /**
   * Html with final price
   * @return finalPrice
   */
  @javax.annotation.Nonnull
  public String getFinalPrice() {
    return finalPrice;
  }

  public void setFinalPrice(String finalPrice) {
    this.finalPrice = finalPrice;
  }


  public CatalogDataProductRenderFormattedPriceInfoInterface maxPrice(String maxPrice) {
    this.maxPrice = maxPrice;
    return this;
  }

  /**
   * Max price of a product
   * @return maxPrice
   */
  @javax.annotation.Nonnull
  public String getMaxPrice() {
    return maxPrice;
  }

  public void setMaxPrice(String maxPrice) {
    this.maxPrice = maxPrice;
  }


  public CatalogDataProductRenderFormattedPriceInfoInterface maxRegularPrice(String maxRegularPrice) {
    this.maxRegularPrice = maxRegularPrice;
    return this;
  }

  /**
   * Max regular price
   * @return maxRegularPrice
   */
  @javax.annotation.Nonnull
  public String getMaxRegularPrice() {
    return maxRegularPrice;
  }

  public void setMaxRegularPrice(String maxRegularPrice) {
    this.maxRegularPrice = maxRegularPrice;
  }


  public CatalogDataProductRenderFormattedPriceInfoInterface minimalPrice(String minimalPrice) {
    this.minimalPrice = minimalPrice;
    return this;
  }

  /**
   * The minimal price of the product or variation
   * @return minimalPrice
   */
  @javax.annotation.Nonnull
  public String getMinimalPrice() {
    return minimalPrice;
  }

  public void setMinimalPrice(String minimalPrice) {
    this.minimalPrice = minimalPrice;
  }


  public CatalogDataProductRenderFormattedPriceInfoInterface minimalRegularPrice(String minimalRegularPrice) {
    this.minimalRegularPrice = minimalRegularPrice;
    return this;
  }

  /**
   * Minimal regular price
   * @return minimalRegularPrice
   */
  @javax.annotation.Nonnull
  public String getMinimalRegularPrice() {
    return minimalRegularPrice;
  }

  public void setMinimalRegularPrice(String minimalRegularPrice) {
    this.minimalRegularPrice = minimalRegularPrice;
  }


  public CatalogDataProductRenderFormattedPriceInfoInterface regularPrice(String regularPrice) {
    this.regularPrice = regularPrice;
    return this;
  }

  /**
   * Price - is price of product without discounts and special price with taxes and fixed product tax
   * @return regularPrice
   */
  @javax.annotation.Nonnull
  public String getRegularPrice() {
    return regularPrice;
  }

  public void setRegularPrice(String regularPrice) {
    this.regularPrice = regularPrice;
  }


  public CatalogDataProductRenderFormattedPriceInfoInterface specialPrice(String specialPrice) {
    this.specialPrice = specialPrice;
    return this;
  }

  /**
   * Special price
   * @return specialPrice
   */
  @javax.annotation.Nonnull
  public String getSpecialPrice() {
    return specialPrice;
  }

  public void setSpecialPrice(String specialPrice) {
    this.specialPrice = specialPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataProductRenderFormattedPriceInfoInterface catalogDataProductRenderFormattedPriceInfoInterface = (CatalogDataProductRenderFormattedPriceInfoInterface) o;
    return Objects.equals(this.extensionAttributes, catalogDataProductRenderFormattedPriceInfoInterface.extensionAttributes) &&
        Objects.equals(this.finalPrice, catalogDataProductRenderFormattedPriceInfoInterface.finalPrice) &&
        Objects.equals(this.maxPrice, catalogDataProductRenderFormattedPriceInfoInterface.maxPrice) &&
        Objects.equals(this.maxRegularPrice, catalogDataProductRenderFormattedPriceInfoInterface.maxRegularPrice) &&
        Objects.equals(this.minimalPrice, catalogDataProductRenderFormattedPriceInfoInterface.minimalPrice) &&
        Objects.equals(this.minimalRegularPrice, catalogDataProductRenderFormattedPriceInfoInterface.minimalRegularPrice) &&
        Objects.equals(this.regularPrice, catalogDataProductRenderFormattedPriceInfoInterface.regularPrice) &&
        Objects.equals(this.specialPrice, catalogDataProductRenderFormattedPriceInfoInterface.specialPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extensionAttributes, finalPrice, maxPrice, maxRegularPrice, minimalPrice, minimalRegularPrice, regularPrice, specialPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataProductRenderFormattedPriceInfoInterface {\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    finalPrice: ").append(toIndentedString(finalPrice)).append("\n");
    sb.append("    maxPrice: ").append(toIndentedString(maxPrice)).append("\n");
    sb.append("    maxRegularPrice: ").append(toIndentedString(maxRegularPrice)).append("\n");
    sb.append("    minimalPrice: ").append(toIndentedString(minimalPrice)).append("\n");
    sb.append("    minimalRegularPrice: ").append(toIndentedString(minimalRegularPrice)).append("\n");
    sb.append("    regularPrice: ").append(toIndentedString(regularPrice)).append("\n");
    sb.append("    specialPrice: ").append(toIndentedString(specialPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extension_attributes");
    openapiFields.add("final_price");
    openapiFields.add("max_price");
    openapiFields.add("max_regular_price");
    openapiFields.add("minimal_price");
    openapiFields.add("minimal_regular_price");
    openapiFields.add("regular_price");
    openapiFields.add("special_price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("final_price");
    openapiRequiredFields.add("max_price");
    openapiRequiredFields.add("max_regular_price");
    openapiRequiredFields.add("minimal_price");
    openapiRequiredFields.add("minimal_regular_price");
    openapiRequiredFields.add("regular_price");
    openapiRequiredFields.add("special_price");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogDataProductRenderFormattedPriceInfoInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogDataProductRenderFormattedPriceInfoInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogDataProductRenderFormattedPriceInfoInterface is not found in the empty JSON string", CatalogDataProductRenderFormattedPriceInfoInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogDataProductRenderFormattedPriceInfoInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogDataProductRenderFormattedPriceInfoInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogDataProductRenderFormattedPriceInfoInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("final_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `final_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("final_price").toString()));
      }
      if (!jsonObj.get("max_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_price").toString()));
      }
      if (!jsonObj.get("max_regular_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_regular_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_regular_price").toString()));
      }
      if (!jsonObj.get("minimal_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimal_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimal_price").toString()));
      }
      if (!jsonObj.get("minimal_regular_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimal_regular_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimal_regular_price").toString()));
      }
      if (!jsonObj.get("regular_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regular_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regular_price").toString()));
      }
      if (!jsonObj.get("special_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `special_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("special_price").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogDataProductRenderFormattedPriceInfoInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogDataProductRenderFormattedPriceInfoInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogDataProductRenderFormattedPriceInfoInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogDataProductRenderFormattedPriceInfoInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogDataProductRenderFormattedPriceInfoInterface>() {
           @Override
           public void write(JsonWriter out, CatalogDataProductRenderFormattedPriceInfoInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogDataProductRenderFormattedPriceInfoInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogDataProductRenderFormattedPriceInfoInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogDataProductRenderFormattedPriceInfoInterface
   * @throws IOException if the JSON string is invalid with respect to CatalogDataProductRenderFormattedPriceInfoInterface
   */
  public static CatalogDataProductRenderFormattedPriceInfoInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogDataProductRenderFormattedPriceInfoInterface.class);
  }

  /**
   * Convert an instance of CatalogDataProductRenderFormattedPriceInfoInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

