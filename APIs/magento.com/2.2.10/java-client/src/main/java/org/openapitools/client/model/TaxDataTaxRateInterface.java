/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TaxDataTaxRateTitleInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tax rate interface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaxDataTaxRateInterface {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private BigDecimal rate;

  public static final String SERIALIZED_NAME_REGION_NAME = "region_name";
  @SerializedName(SERIALIZED_NAME_REGION_NAME)
  private String regionName;

  public static final String SERIALIZED_NAME_TAX_COUNTRY_ID = "tax_country_id";
  @SerializedName(SERIALIZED_NAME_TAX_COUNTRY_ID)
  private String taxCountryId;

  public static final String SERIALIZED_NAME_TAX_POSTCODE = "tax_postcode";
  @SerializedName(SERIALIZED_NAME_TAX_POSTCODE)
  private String taxPostcode;

  public static final String SERIALIZED_NAME_TAX_REGION_ID = "tax_region_id";
  @SerializedName(SERIALIZED_NAME_TAX_REGION_ID)
  private Integer taxRegionId;

  public static final String SERIALIZED_NAME_TITLES = "titles";
  @SerializedName(SERIALIZED_NAME_TITLES)
  private List<TaxDataTaxRateTitleInterface> titles = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZIP_FROM = "zip_from";
  @SerializedName(SERIALIZED_NAME_ZIP_FROM)
  private Integer zipFrom;

  public static final String SERIALIZED_NAME_ZIP_IS_RANGE = "zip_is_range";
  @SerializedName(SERIALIZED_NAME_ZIP_IS_RANGE)
  private Integer zipIsRange;

  public static final String SERIALIZED_NAME_ZIP_TO = "zip_to";
  @SerializedName(SERIALIZED_NAME_ZIP_TO)
  private Integer zipTo;

  public TaxDataTaxRateInterface() {
  }

  public TaxDataTaxRateInterface code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Tax rate code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public TaxDataTaxRateInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRateInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public TaxDataTaxRateInterface id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public TaxDataTaxRateInterface rate(BigDecimal rate) {
    this.rate = rate;
    return this;
  }

  /**
   * Tax rate in percentage
   * @return rate
   */
  @javax.annotation.Nonnull
  public BigDecimal getRate() {
    return rate;
  }

  public void setRate(BigDecimal rate) {
    this.rate = rate;
  }


  public TaxDataTaxRateInterface regionName(String regionName) {
    this.regionName = regionName;
    return this;
  }

  /**
   * Region name
   * @return regionName
   */
  @javax.annotation.Nullable
  public String getRegionName() {
    return regionName;
  }

  public void setRegionName(String regionName) {
    this.regionName = regionName;
  }


  public TaxDataTaxRateInterface taxCountryId(String taxCountryId) {
    this.taxCountryId = taxCountryId;
    return this;
  }

  /**
   * Country id
   * @return taxCountryId
   */
  @javax.annotation.Nonnull
  public String getTaxCountryId() {
    return taxCountryId;
  }

  public void setTaxCountryId(String taxCountryId) {
    this.taxCountryId = taxCountryId;
  }


  public TaxDataTaxRateInterface taxPostcode(String taxPostcode) {
    this.taxPostcode = taxPostcode;
    return this;
  }

  /**
   * Postcode
   * @return taxPostcode
   */
  @javax.annotation.Nullable
  public String getTaxPostcode() {
    return taxPostcode;
  }

  public void setTaxPostcode(String taxPostcode) {
    this.taxPostcode = taxPostcode;
  }


  public TaxDataTaxRateInterface taxRegionId(Integer taxRegionId) {
    this.taxRegionId = taxRegionId;
    return this;
  }

  /**
   * Region id
   * @return taxRegionId
   */
  @javax.annotation.Nullable
  public Integer getTaxRegionId() {
    return taxRegionId;
  }

  public void setTaxRegionId(Integer taxRegionId) {
    this.taxRegionId = taxRegionId;
  }


  public TaxDataTaxRateInterface titles(List<TaxDataTaxRateTitleInterface> titles) {
    this.titles = titles;
    return this;
  }

  public TaxDataTaxRateInterface addTitlesItem(TaxDataTaxRateTitleInterface titlesItem) {
    if (this.titles == null) {
      this.titles = new ArrayList<>();
    }
    this.titles.add(titlesItem);
    return this;
  }

  /**
   * Tax rate titles
   * @return titles
   */
  @javax.annotation.Nullable
  public List<TaxDataTaxRateTitleInterface> getTitles() {
    return titles;
  }

  public void setTitles(List<TaxDataTaxRateTitleInterface> titles) {
    this.titles = titles;
  }


  public TaxDataTaxRateInterface zipFrom(Integer zipFrom) {
    this.zipFrom = zipFrom;
    return this;
  }

  /**
   * Zip range from
   * @return zipFrom
   */
  @javax.annotation.Nullable
  public Integer getZipFrom() {
    return zipFrom;
  }

  public void setZipFrom(Integer zipFrom) {
    this.zipFrom = zipFrom;
  }


  public TaxDataTaxRateInterface zipIsRange(Integer zipIsRange) {
    this.zipIsRange = zipIsRange;
    return this;
  }

  /**
   * Zip is range
   * @return zipIsRange
   */
  @javax.annotation.Nullable
  public Integer getZipIsRange() {
    return zipIsRange;
  }

  public void setZipIsRange(Integer zipIsRange) {
    this.zipIsRange = zipIsRange;
  }


  public TaxDataTaxRateInterface zipTo(Integer zipTo) {
    this.zipTo = zipTo;
    return this;
  }

  /**
   * Zip range to
   * @return zipTo
   */
  @javax.annotation.Nullable
  public Integer getZipTo() {
    return zipTo;
  }

  public void setZipTo(Integer zipTo) {
    this.zipTo = zipTo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxDataTaxRateInterface taxDataTaxRateInterface = (TaxDataTaxRateInterface) o;
    return Objects.equals(this.code, taxDataTaxRateInterface.code) &&
        Objects.equals(this.extensionAttributes, taxDataTaxRateInterface.extensionAttributes) &&
        Objects.equals(this.id, taxDataTaxRateInterface.id) &&
        Objects.equals(this.rate, taxDataTaxRateInterface.rate) &&
        Objects.equals(this.regionName, taxDataTaxRateInterface.regionName) &&
        Objects.equals(this.taxCountryId, taxDataTaxRateInterface.taxCountryId) &&
        Objects.equals(this.taxPostcode, taxDataTaxRateInterface.taxPostcode) &&
        Objects.equals(this.taxRegionId, taxDataTaxRateInterface.taxRegionId) &&
        Objects.equals(this.titles, taxDataTaxRateInterface.titles) &&
        Objects.equals(this.zipFrom, taxDataTaxRateInterface.zipFrom) &&
        Objects.equals(this.zipIsRange, taxDataTaxRateInterface.zipIsRange) &&
        Objects.equals(this.zipTo, taxDataTaxRateInterface.zipTo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, extensionAttributes, id, rate, regionName, taxCountryId, taxPostcode, taxRegionId, titles, zipFrom, zipIsRange, zipTo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxDataTaxRateInterface {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    regionName: ").append(toIndentedString(regionName)).append("\n");
    sb.append("    taxCountryId: ").append(toIndentedString(taxCountryId)).append("\n");
    sb.append("    taxPostcode: ").append(toIndentedString(taxPostcode)).append("\n");
    sb.append("    taxRegionId: ").append(toIndentedString(taxRegionId)).append("\n");
    sb.append("    titles: ").append(toIndentedString(titles)).append("\n");
    sb.append("    zipFrom: ").append(toIndentedString(zipFrom)).append("\n");
    sb.append("    zipIsRange: ").append(toIndentedString(zipIsRange)).append("\n");
    sb.append("    zipTo: ").append(toIndentedString(zipTo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("extension_attributes");
    openapiFields.add("id");
    openapiFields.add("rate");
    openapiFields.add("region_name");
    openapiFields.add("tax_country_id");
    openapiFields.add("tax_postcode");
    openapiFields.add("tax_region_id");
    openapiFields.add("titles");
    openapiFields.add("zip_from");
    openapiFields.add("zip_is_range");
    openapiFields.add("zip_to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("rate");
    openapiRequiredFields.add("tax_country_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaxDataTaxRateInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaxDataTaxRateInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxDataTaxRateInterface is not found in the empty JSON string", TaxDataTaxRateInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaxDataTaxRateInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxDataTaxRateInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TaxDataTaxRateInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("region_name") != null && !jsonObj.get("region_name").isJsonNull()) && !jsonObj.get("region_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region_name").toString()));
      }
      if (!jsonObj.get("tax_country_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_country_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_country_id").toString()));
      }
      if ((jsonObj.get("tax_postcode") != null && !jsonObj.get("tax_postcode").isJsonNull()) && !jsonObj.get("tax_postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_postcode").toString()));
      }
      if (jsonObj.get("titles") != null && !jsonObj.get("titles").isJsonNull()) {
        JsonArray jsonArraytitles = jsonObj.getAsJsonArray("titles");
        if (jsonArraytitles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("titles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `titles` to be an array in the JSON string but got `%s`", jsonObj.get("titles").toString()));
          }

          // validate the optional field `titles` (array)
          for (int i = 0; i < jsonArraytitles.size(); i++) {
            TaxDataTaxRateTitleInterface.validateJsonElement(jsonArraytitles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxDataTaxRateInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxDataTaxRateInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxDataTaxRateInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxDataTaxRateInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxDataTaxRateInterface>() {
           @Override
           public void write(JsonWriter out, TaxDataTaxRateInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxDataTaxRateInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaxDataTaxRateInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaxDataTaxRateInterface
   * @throws IOException if the JSON string is invalid with respect to TaxDataTaxRateInterface
   */
  public static TaxDataTaxRateInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxDataTaxRateInterface.class);
  }

  /**
   * Convert an instance of TaxDataTaxRateInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

