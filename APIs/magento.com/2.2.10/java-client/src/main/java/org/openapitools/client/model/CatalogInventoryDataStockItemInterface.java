/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface StockItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogInventoryDataStockItemInterface {
  public static final String SERIALIZED_NAME_BACKORDERS = "backorders";
  @SerializedName(SERIALIZED_NAME_BACKORDERS)
  private Integer backorders;

  public static final String SERIALIZED_NAME_ENABLE_QTY_INCREMENTS = "enable_qty_increments";
  @SerializedName(SERIALIZED_NAME_ENABLE_QTY_INCREMENTS)
  private Boolean enableQtyIncrements;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_IS_DECIMAL_DIVIDED = "is_decimal_divided";
  @SerializedName(SERIALIZED_NAME_IS_DECIMAL_DIVIDED)
  private Boolean isDecimalDivided;

  public static final String SERIALIZED_NAME_IS_IN_STOCK = "is_in_stock";
  @SerializedName(SERIALIZED_NAME_IS_IN_STOCK)
  private Boolean isInStock;

  public static final String SERIALIZED_NAME_IS_QTY_DECIMAL = "is_qty_decimal";
  @SerializedName(SERIALIZED_NAME_IS_QTY_DECIMAL)
  private Boolean isQtyDecimal;

  public static final String SERIALIZED_NAME_ITEM_ID = "item_id";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private Integer itemId;

  public static final String SERIALIZED_NAME_LOW_STOCK_DATE = "low_stock_date";
  @SerializedName(SERIALIZED_NAME_LOW_STOCK_DATE)
  private String lowStockDate;

  public static final String SERIALIZED_NAME_MANAGE_STOCK = "manage_stock";
  @SerializedName(SERIALIZED_NAME_MANAGE_STOCK)
  private Boolean manageStock;

  public static final String SERIALIZED_NAME_MAX_SALE_QTY = "max_sale_qty";
  @SerializedName(SERIALIZED_NAME_MAX_SALE_QTY)
  private BigDecimal maxSaleQty;

  public static final String SERIALIZED_NAME_MIN_QTY = "min_qty";
  @SerializedName(SERIALIZED_NAME_MIN_QTY)
  private BigDecimal minQty;

  public static final String SERIALIZED_NAME_MIN_SALE_QTY = "min_sale_qty";
  @SerializedName(SERIALIZED_NAME_MIN_SALE_QTY)
  private BigDecimal minSaleQty;

  public static final String SERIALIZED_NAME_NOTIFY_STOCK_QTY = "notify_stock_qty";
  @SerializedName(SERIALIZED_NAME_NOTIFY_STOCK_QTY)
  private BigDecimal notifyStockQty;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private Integer productId;

  public static final String SERIALIZED_NAME_QTY = "qty";
  @SerializedName(SERIALIZED_NAME_QTY)
  private BigDecimal qty;

  public static final String SERIALIZED_NAME_QTY_INCREMENTS = "qty_increments";
  @SerializedName(SERIALIZED_NAME_QTY_INCREMENTS)
  private BigDecimal qtyIncrements;

  public static final String SERIALIZED_NAME_SHOW_DEFAULT_NOTIFICATION_MESSAGE = "show_default_notification_message";
  @SerializedName(SERIALIZED_NAME_SHOW_DEFAULT_NOTIFICATION_MESSAGE)
  private Boolean showDefaultNotificationMessage;

  public static final String SERIALIZED_NAME_STOCK_ID = "stock_id";
  @SerializedName(SERIALIZED_NAME_STOCK_ID)
  private Integer stockId;

  public static final String SERIALIZED_NAME_STOCK_STATUS_CHANGED_AUTO = "stock_status_changed_auto";
  @SerializedName(SERIALIZED_NAME_STOCK_STATUS_CHANGED_AUTO)
  private Integer stockStatusChangedAuto;

  public static final String SERIALIZED_NAME_USE_CONFIG_BACKORDERS = "use_config_backorders";
  @SerializedName(SERIALIZED_NAME_USE_CONFIG_BACKORDERS)
  private Boolean useConfigBackorders;

  public static final String SERIALIZED_NAME_USE_CONFIG_ENABLE_QTY_INC = "use_config_enable_qty_inc";
  @SerializedName(SERIALIZED_NAME_USE_CONFIG_ENABLE_QTY_INC)
  private Boolean useConfigEnableQtyInc;

  public static final String SERIALIZED_NAME_USE_CONFIG_MANAGE_STOCK = "use_config_manage_stock";
  @SerializedName(SERIALIZED_NAME_USE_CONFIG_MANAGE_STOCK)
  private Boolean useConfigManageStock;

  public static final String SERIALIZED_NAME_USE_CONFIG_MAX_SALE_QTY = "use_config_max_sale_qty";
  @SerializedName(SERIALIZED_NAME_USE_CONFIG_MAX_SALE_QTY)
  private Boolean useConfigMaxSaleQty;

  public static final String SERIALIZED_NAME_USE_CONFIG_MIN_QTY = "use_config_min_qty";
  @SerializedName(SERIALIZED_NAME_USE_CONFIG_MIN_QTY)
  private Boolean useConfigMinQty;

  public static final String SERIALIZED_NAME_USE_CONFIG_MIN_SALE_QTY = "use_config_min_sale_qty";
  @SerializedName(SERIALIZED_NAME_USE_CONFIG_MIN_SALE_QTY)
  private Integer useConfigMinSaleQty;

  public static final String SERIALIZED_NAME_USE_CONFIG_NOTIFY_STOCK_QTY = "use_config_notify_stock_qty";
  @SerializedName(SERIALIZED_NAME_USE_CONFIG_NOTIFY_STOCK_QTY)
  private Boolean useConfigNotifyStockQty;

  public static final String SERIALIZED_NAME_USE_CONFIG_QTY_INCREMENTS = "use_config_qty_increments";
  @SerializedName(SERIALIZED_NAME_USE_CONFIG_QTY_INCREMENTS)
  private Boolean useConfigQtyIncrements;

  public CatalogInventoryDataStockItemInterface() {
  }

  public CatalogInventoryDataStockItemInterface backorders(Integer backorders) {
    this.backorders = backorders;
    return this;
  }

  /**
   * Backorders status
   * @return backorders
   */
  @javax.annotation.Nonnull
  public Integer getBackorders() {
    return backorders;
  }

  public void setBackorders(Integer backorders) {
    this.backorders = backorders;
  }


  public CatalogInventoryDataStockItemInterface enableQtyIncrements(Boolean enableQtyIncrements) {
    this.enableQtyIncrements = enableQtyIncrements;
    return this;
  }

  /**
   * Whether Quantity Increments is enabled
   * @return enableQtyIncrements
   */
  @javax.annotation.Nonnull
  public Boolean getEnableQtyIncrements() {
    return enableQtyIncrements;
  }

  public void setEnableQtyIncrements(Boolean enableQtyIncrements) {
    this.enableQtyIncrements = enableQtyIncrements;
  }


  public CatalogInventoryDataStockItemInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\CatalogInventory\\Api\\Data\\StockItemInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public CatalogInventoryDataStockItemInterface isDecimalDivided(Boolean isDecimalDivided) {
    this.isDecimalDivided = isDecimalDivided;
    return this;
  }

  /**
   * Get isDecimalDivided
   * @return isDecimalDivided
   */
  @javax.annotation.Nonnull
  public Boolean getIsDecimalDivided() {
    return isDecimalDivided;
  }

  public void setIsDecimalDivided(Boolean isDecimalDivided) {
    this.isDecimalDivided = isDecimalDivided;
  }


  public CatalogInventoryDataStockItemInterface isInStock(Boolean isInStock) {
    this.isInStock = isInStock;
    return this;
  }

  /**
   * Stock Availability
   * @return isInStock
   */
  @javax.annotation.Nonnull
  public Boolean getIsInStock() {
    return isInStock;
  }

  public void setIsInStock(Boolean isInStock) {
    this.isInStock = isInStock;
  }


  public CatalogInventoryDataStockItemInterface isQtyDecimal(Boolean isQtyDecimal) {
    this.isQtyDecimal = isQtyDecimal;
    return this;
  }

  /**
   * Get isQtyDecimal
   * @return isQtyDecimal
   */
  @javax.annotation.Nonnull
  public Boolean getIsQtyDecimal() {
    return isQtyDecimal;
  }

  public void setIsQtyDecimal(Boolean isQtyDecimal) {
    this.isQtyDecimal = isQtyDecimal;
  }


  public CatalogInventoryDataStockItemInterface itemId(Integer itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Get itemId
   * @return itemId
   */
  @javax.annotation.Nullable
  public Integer getItemId() {
    return itemId;
  }

  public void setItemId(Integer itemId) {
    this.itemId = itemId;
  }


  public CatalogInventoryDataStockItemInterface lowStockDate(String lowStockDate) {
    this.lowStockDate = lowStockDate;
    return this;
  }

  /**
   * Get lowStockDate
   * @return lowStockDate
   */
  @javax.annotation.Nonnull
  public String getLowStockDate() {
    return lowStockDate;
  }

  public void setLowStockDate(String lowStockDate) {
    this.lowStockDate = lowStockDate;
  }


  public CatalogInventoryDataStockItemInterface manageStock(Boolean manageStock) {
    this.manageStock = manageStock;
    return this;
  }

  /**
   * Can Manage Stock
   * @return manageStock
   */
  @javax.annotation.Nonnull
  public Boolean getManageStock() {
    return manageStock;
  }

  public void setManageStock(Boolean manageStock) {
    this.manageStock = manageStock;
  }


  public CatalogInventoryDataStockItemInterface maxSaleQty(BigDecimal maxSaleQty) {
    this.maxSaleQty = maxSaleQty;
    return this;
  }

  /**
   * Maximum Qty Allowed in Shopping Cart data wrapper
   * @return maxSaleQty
   */
  @javax.annotation.Nonnull
  public BigDecimal getMaxSaleQty() {
    return maxSaleQty;
  }

  public void setMaxSaleQty(BigDecimal maxSaleQty) {
    this.maxSaleQty = maxSaleQty;
  }


  public CatalogInventoryDataStockItemInterface minQty(BigDecimal minQty) {
    this.minQty = minQty;
    return this;
  }

  /**
   * Minimal quantity available for item status in stock
   * @return minQty
   */
  @javax.annotation.Nonnull
  public BigDecimal getMinQty() {
    return minQty;
  }

  public void setMinQty(BigDecimal minQty) {
    this.minQty = minQty;
  }


  public CatalogInventoryDataStockItemInterface minSaleQty(BigDecimal minSaleQty) {
    this.minSaleQty = minSaleQty;
    return this;
  }

  /**
   * Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation
   * @return minSaleQty
   */
  @javax.annotation.Nonnull
  public BigDecimal getMinSaleQty() {
    return minSaleQty;
  }

  public void setMinSaleQty(BigDecimal minSaleQty) {
    this.minSaleQty = minSaleQty;
  }


  public CatalogInventoryDataStockItemInterface notifyStockQty(BigDecimal notifyStockQty) {
    this.notifyStockQty = notifyStockQty;
    return this;
  }

  /**
   * Notify for Quantity Below data wrapper
   * @return notifyStockQty
   */
  @javax.annotation.Nonnull
  public BigDecimal getNotifyStockQty() {
    return notifyStockQty;
  }

  public void setNotifyStockQty(BigDecimal notifyStockQty) {
    this.notifyStockQty = notifyStockQty;
  }


  public CatalogInventoryDataStockItemInterface productId(Integer productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Get productId
   * @return productId
   */
  @javax.annotation.Nullable
  public Integer getProductId() {
    return productId;
  }

  public void setProductId(Integer productId) {
    this.productId = productId;
  }


  public CatalogInventoryDataStockItemInterface qty(BigDecimal qty) {
    this.qty = qty;
    return this;
  }

  /**
   * Get qty
   * @return qty
   */
  @javax.annotation.Nonnull
  public BigDecimal getQty() {
    return qty;
  }

  public void setQty(BigDecimal qty) {
    this.qty = qty;
  }


  public CatalogInventoryDataStockItemInterface qtyIncrements(BigDecimal qtyIncrements) {
    this.qtyIncrements = qtyIncrements;
    return this;
  }

  /**
   * Quantity Increments data wrapper
   * @return qtyIncrements
   */
  @javax.annotation.Nonnull
  public BigDecimal getQtyIncrements() {
    return qtyIncrements;
  }

  public void setQtyIncrements(BigDecimal qtyIncrements) {
    this.qtyIncrements = qtyIncrements;
  }


  public CatalogInventoryDataStockItemInterface showDefaultNotificationMessage(Boolean showDefaultNotificationMessage) {
    this.showDefaultNotificationMessage = showDefaultNotificationMessage;
    return this;
  }

  /**
   * Get showDefaultNotificationMessage
   * @return showDefaultNotificationMessage
   */
  @javax.annotation.Nonnull
  public Boolean getShowDefaultNotificationMessage() {
    return showDefaultNotificationMessage;
  }

  public void setShowDefaultNotificationMessage(Boolean showDefaultNotificationMessage) {
    this.showDefaultNotificationMessage = showDefaultNotificationMessage;
  }


  public CatalogInventoryDataStockItemInterface stockId(Integer stockId) {
    this.stockId = stockId;
    return this;
  }

  /**
   * Stock identifier
   * @return stockId
   */
  @javax.annotation.Nullable
  public Integer getStockId() {
    return stockId;
  }

  public void setStockId(Integer stockId) {
    this.stockId = stockId;
  }


  public CatalogInventoryDataStockItemInterface stockStatusChangedAuto(Integer stockStatusChangedAuto) {
    this.stockStatusChangedAuto = stockStatusChangedAuto;
    return this;
  }

  /**
   * Get stockStatusChangedAuto
   * @return stockStatusChangedAuto
   */
  @javax.annotation.Nonnull
  public Integer getStockStatusChangedAuto() {
    return stockStatusChangedAuto;
  }

  public void setStockStatusChangedAuto(Integer stockStatusChangedAuto) {
    this.stockStatusChangedAuto = stockStatusChangedAuto;
  }


  public CatalogInventoryDataStockItemInterface useConfigBackorders(Boolean useConfigBackorders) {
    this.useConfigBackorders = useConfigBackorders;
    return this;
  }

  /**
   * Get useConfigBackorders
   * @return useConfigBackorders
   */
  @javax.annotation.Nonnull
  public Boolean getUseConfigBackorders() {
    return useConfigBackorders;
  }

  public void setUseConfigBackorders(Boolean useConfigBackorders) {
    this.useConfigBackorders = useConfigBackorders;
  }


  public CatalogInventoryDataStockItemInterface useConfigEnableQtyInc(Boolean useConfigEnableQtyInc) {
    this.useConfigEnableQtyInc = useConfigEnableQtyInc;
    return this;
  }

  /**
   * Get useConfigEnableQtyInc
   * @return useConfigEnableQtyInc
   */
  @javax.annotation.Nonnull
  public Boolean getUseConfigEnableQtyInc() {
    return useConfigEnableQtyInc;
  }

  public void setUseConfigEnableQtyInc(Boolean useConfigEnableQtyInc) {
    this.useConfigEnableQtyInc = useConfigEnableQtyInc;
  }


  public CatalogInventoryDataStockItemInterface useConfigManageStock(Boolean useConfigManageStock) {
    this.useConfigManageStock = useConfigManageStock;
    return this;
  }

  /**
   * Get useConfigManageStock
   * @return useConfigManageStock
   */
  @javax.annotation.Nonnull
  public Boolean getUseConfigManageStock() {
    return useConfigManageStock;
  }

  public void setUseConfigManageStock(Boolean useConfigManageStock) {
    this.useConfigManageStock = useConfigManageStock;
  }


  public CatalogInventoryDataStockItemInterface useConfigMaxSaleQty(Boolean useConfigMaxSaleQty) {
    this.useConfigMaxSaleQty = useConfigMaxSaleQty;
    return this;
  }

  /**
   * Get useConfigMaxSaleQty
   * @return useConfigMaxSaleQty
   */
  @javax.annotation.Nonnull
  public Boolean getUseConfigMaxSaleQty() {
    return useConfigMaxSaleQty;
  }

  public void setUseConfigMaxSaleQty(Boolean useConfigMaxSaleQty) {
    this.useConfigMaxSaleQty = useConfigMaxSaleQty;
  }


  public CatalogInventoryDataStockItemInterface useConfigMinQty(Boolean useConfigMinQty) {
    this.useConfigMinQty = useConfigMinQty;
    return this;
  }

  /**
   * Get useConfigMinQty
   * @return useConfigMinQty
   */
  @javax.annotation.Nonnull
  public Boolean getUseConfigMinQty() {
    return useConfigMinQty;
  }

  public void setUseConfigMinQty(Boolean useConfigMinQty) {
    this.useConfigMinQty = useConfigMinQty;
  }


  public CatalogInventoryDataStockItemInterface useConfigMinSaleQty(Integer useConfigMinSaleQty) {
    this.useConfigMinSaleQty = useConfigMinSaleQty;
    return this;
  }

  /**
   * Get useConfigMinSaleQty
   * @return useConfigMinSaleQty
   */
  @javax.annotation.Nonnull
  public Integer getUseConfigMinSaleQty() {
    return useConfigMinSaleQty;
  }

  public void setUseConfigMinSaleQty(Integer useConfigMinSaleQty) {
    this.useConfigMinSaleQty = useConfigMinSaleQty;
  }


  public CatalogInventoryDataStockItemInterface useConfigNotifyStockQty(Boolean useConfigNotifyStockQty) {
    this.useConfigNotifyStockQty = useConfigNotifyStockQty;
    return this;
  }

  /**
   * Get useConfigNotifyStockQty
   * @return useConfigNotifyStockQty
   */
  @javax.annotation.Nonnull
  public Boolean getUseConfigNotifyStockQty() {
    return useConfigNotifyStockQty;
  }

  public void setUseConfigNotifyStockQty(Boolean useConfigNotifyStockQty) {
    this.useConfigNotifyStockQty = useConfigNotifyStockQty;
  }


  public CatalogInventoryDataStockItemInterface useConfigQtyIncrements(Boolean useConfigQtyIncrements) {
    this.useConfigQtyIncrements = useConfigQtyIncrements;
    return this;
  }

  /**
   * Get useConfigQtyIncrements
   * @return useConfigQtyIncrements
   */
  @javax.annotation.Nonnull
  public Boolean getUseConfigQtyIncrements() {
    return useConfigQtyIncrements;
  }

  public void setUseConfigQtyIncrements(Boolean useConfigQtyIncrements) {
    this.useConfigQtyIncrements = useConfigQtyIncrements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogInventoryDataStockItemInterface catalogInventoryDataStockItemInterface = (CatalogInventoryDataStockItemInterface) o;
    return Objects.equals(this.backorders, catalogInventoryDataStockItemInterface.backorders) &&
        Objects.equals(this.enableQtyIncrements, catalogInventoryDataStockItemInterface.enableQtyIncrements) &&
        Objects.equals(this.extensionAttributes, catalogInventoryDataStockItemInterface.extensionAttributes) &&
        Objects.equals(this.isDecimalDivided, catalogInventoryDataStockItemInterface.isDecimalDivided) &&
        Objects.equals(this.isInStock, catalogInventoryDataStockItemInterface.isInStock) &&
        Objects.equals(this.isQtyDecimal, catalogInventoryDataStockItemInterface.isQtyDecimal) &&
        Objects.equals(this.itemId, catalogInventoryDataStockItemInterface.itemId) &&
        Objects.equals(this.lowStockDate, catalogInventoryDataStockItemInterface.lowStockDate) &&
        Objects.equals(this.manageStock, catalogInventoryDataStockItemInterface.manageStock) &&
        Objects.equals(this.maxSaleQty, catalogInventoryDataStockItemInterface.maxSaleQty) &&
        Objects.equals(this.minQty, catalogInventoryDataStockItemInterface.minQty) &&
        Objects.equals(this.minSaleQty, catalogInventoryDataStockItemInterface.minSaleQty) &&
        Objects.equals(this.notifyStockQty, catalogInventoryDataStockItemInterface.notifyStockQty) &&
        Objects.equals(this.productId, catalogInventoryDataStockItemInterface.productId) &&
        Objects.equals(this.qty, catalogInventoryDataStockItemInterface.qty) &&
        Objects.equals(this.qtyIncrements, catalogInventoryDataStockItemInterface.qtyIncrements) &&
        Objects.equals(this.showDefaultNotificationMessage, catalogInventoryDataStockItemInterface.showDefaultNotificationMessage) &&
        Objects.equals(this.stockId, catalogInventoryDataStockItemInterface.stockId) &&
        Objects.equals(this.stockStatusChangedAuto, catalogInventoryDataStockItemInterface.stockStatusChangedAuto) &&
        Objects.equals(this.useConfigBackorders, catalogInventoryDataStockItemInterface.useConfigBackorders) &&
        Objects.equals(this.useConfigEnableQtyInc, catalogInventoryDataStockItemInterface.useConfigEnableQtyInc) &&
        Objects.equals(this.useConfigManageStock, catalogInventoryDataStockItemInterface.useConfigManageStock) &&
        Objects.equals(this.useConfigMaxSaleQty, catalogInventoryDataStockItemInterface.useConfigMaxSaleQty) &&
        Objects.equals(this.useConfigMinQty, catalogInventoryDataStockItemInterface.useConfigMinQty) &&
        Objects.equals(this.useConfigMinSaleQty, catalogInventoryDataStockItemInterface.useConfigMinSaleQty) &&
        Objects.equals(this.useConfigNotifyStockQty, catalogInventoryDataStockItemInterface.useConfigNotifyStockQty) &&
        Objects.equals(this.useConfigQtyIncrements, catalogInventoryDataStockItemInterface.useConfigQtyIncrements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backorders, enableQtyIncrements, extensionAttributes, isDecimalDivided, isInStock, isQtyDecimal, itemId, lowStockDate, manageStock, maxSaleQty, minQty, minSaleQty, notifyStockQty, productId, qty, qtyIncrements, showDefaultNotificationMessage, stockId, stockStatusChangedAuto, useConfigBackorders, useConfigEnableQtyInc, useConfigManageStock, useConfigMaxSaleQty, useConfigMinQty, useConfigMinSaleQty, useConfigNotifyStockQty, useConfigQtyIncrements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogInventoryDataStockItemInterface {\n");
    sb.append("    backorders: ").append(toIndentedString(backorders)).append("\n");
    sb.append("    enableQtyIncrements: ").append(toIndentedString(enableQtyIncrements)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    isDecimalDivided: ").append(toIndentedString(isDecimalDivided)).append("\n");
    sb.append("    isInStock: ").append(toIndentedString(isInStock)).append("\n");
    sb.append("    isQtyDecimal: ").append(toIndentedString(isQtyDecimal)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    lowStockDate: ").append(toIndentedString(lowStockDate)).append("\n");
    sb.append("    manageStock: ").append(toIndentedString(manageStock)).append("\n");
    sb.append("    maxSaleQty: ").append(toIndentedString(maxSaleQty)).append("\n");
    sb.append("    minQty: ").append(toIndentedString(minQty)).append("\n");
    sb.append("    minSaleQty: ").append(toIndentedString(minSaleQty)).append("\n");
    sb.append("    notifyStockQty: ").append(toIndentedString(notifyStockQty)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    qty: ").append(toIndentedString(qty)).append("\n");
    sb.append("    qtyIncrements: ").append(toIndentedString(qtyIncrements)).append("\n");
    sb.append("    showDefaultNotificationMessage: ").append(toIndentedString(showDefaultNotificationMessage)).append("\n");
    sb.append("    stockId: ").append(toIndentedString(stockId)).append("\n");
    sb.append("    stockStatusChangedAuto: ").append(toIndentedString(stockStatusChangedAuto)).append("\n");
    sb.append("    useConfigBackorders: ").append(toIndentedString(useConfigBackorders)).append("\n");
    sb.append("    useConfigEnableQtyInc: ").append(toIndentedString(useConfigEnableQtyInc)).append("\n");
    sb.append("    useConfigManageStock: ").append(toIndentedString(useConfigManageStock)).append("\n");
    sb.append("    useConfigMaxSaleQty: ").append(toIndentedString(useConfigMaxSaleQty)).append("\n");
    sb.append("    useConfigMinQty: ").append(toIndentedString(useConfigMinQty)).append("\n");
    sb.append("    useConfigMinSaleQty: ").append(toIndentedString(useConfigMinSaleQty)).append("\n");
    sb.append("    useConfigNotifyStockQty: ").append(toIndentedString(useConfigNotifyStockQty)).append("\n");
    sb.append("    useConfigQtyIncrements: ").append(toIndentedString(useConfigQtyIncrements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backorders");
    openapiFields.add("enable_qty_increments");
    openapiFields.add("extension_attributes");
    openapiFields.add("is_decimal_divided");
    openapiFields.add("is_in_stock");
    openapiFields.add("is_qty_decimal");
    openapiFields.add("item_id");
    openapiFields.add("low_stock_date");
    openapiFields.add("manage_stock");
    openapiFields.add("max_sale_qty");
    openapiFields.add("min_qty");
    openapiFields.add("min_sale_qty");
    openapiFields.add("notify_stock_qty");
    openapiFields.add("product_id");
    openapiFields.add("qty");
    openapiFields.add("qty_increments");
    openapiFields.add("show_default_notification_message");
    openapiFields.add("stock_id");
    openapiFields.add("stock_status_changed_auto");
    openapiFields.add("use_config_backorders");
    openapiFields.add("use_config_enable_qty_inc");
    openapiFields.add("use_config_manage_stock");
    openapiFields.add("use_config_max_sale_qty");
    openapiFields.add("use_config_min_qty");
    openapiFields.add("use_config_min_sale_qty");
    openapiFields.add("use_config_notify_stock_qty");
    openapiFields.add("use_config_qty_increments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("backorders");
    openapiRequiredFields.add("enable_qty_increments");
    openapiRequiredFields.add("is_decimal_divided");
    openapiRequiredFields.add("is_in_stock");
    openapiRequiredFields.add("is_qty_decimal");
    openapiRequiredFields.add("low_stock_date");
    openapiRequiredFields.add("manage_stock");
    openapiRequiredFields.add("max_sale_qty");
    openapiRequiredFields.add("min_qty");
    openapiRequiredFields.add("min_sale_qty");
    openapiRequiredFields.add("notify_stock_qty");
    openapiRequiredFields.add("qty");
    openapiRequiredFields.add("qty_increments");
    openapiRequiredFields.add("show_default_notification_message");
    openapiRequiredFields.add("stock_status_changed_auto");
    openapiRequiredFields.add("use_config_backorders");
    openapiRequiredFields.add("use_config_enable_qty_inc");
    openapiRequiredFields.add("use_config_manage_stock");
    openapiRequiredFields.add("use_config_max_sale_qty");
    openapiRequiredFields.add("use_config_min_qty");
    openapiRequiredFields.add("use_config_min_sale_qty");
    openapiRequiredFields.add("use_config_notify_stock_qty");
    openapiRequiredFields.add("use_config_qty_increments");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogInventoryDataStockItemInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogInventoryDataStockItemInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogInventoryDataStockItemInterface is not found in the empty JSON string", CatalogInventoryDataStockItemInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogInventoryDataStockItemInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogInventoryDataStockItemInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CatalogInventoryDataStockItemInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("low_stock_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `low_stock_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("low_stock_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogInventoryDataStockItemInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogInventoryDataStockItemInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogInventoryDataStockItemInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogInventoryDataStockItemInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogInventoryDataStockItemInterface>() {
           @Override
           public void write(JsonWriter out, CatalogInventoryDataStockItemInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogInventoryDataStockItemInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogInventoryDataStockItemInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogInventoryDataStockItemInterface
   * @throws IOException if the JSON string is invalid with respect to CatalogInventoryDataStockItemInterface
   */
  public static CatalogInventoryDataStockItemInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogInventoryDataStockItemInterface.class);
  }

  /**
   * Convert an instance of CatalogInventoryDataStockItemInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

