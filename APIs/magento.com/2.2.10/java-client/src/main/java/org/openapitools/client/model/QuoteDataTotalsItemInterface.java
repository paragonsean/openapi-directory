/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.QuoteDataTotalsItemExtensionInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interface TotalsItemInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuoteDataTotalsItemInterface {
  public static final String SERIALIZED_NAME_BASE_DISCOUNT_AMOUNT = "base_discount_amount";
  @SerializedName(SERIALIZED_NAME_BASE_DISCOUNT_AMOUNT)
  private BigDecimal baseDiscountAmount;

  public static final String SERIALIZED_NAME_BASE_PRICE = "base_price";
  @SerializedName(SERIALIZED_NAME_BASE_PRICE)
  private BigDecimal basePrice;

  public static final String SERIALIZED_NAME_BASE_PRICE_INCL_TAX = "base_price_incl_tax";
  @SerializedName(SERIALIZED_NAME_BASE_PRICE_INCL_TAX)
  private BigDecimal basePriceInclTax;

  public static final String SERIALIZED_NAME_BASE_ROW_TOTAL = "base_row_total";
  @SerializedName(SERIALIZED_NAME_BASE_ROW_TOTAL)
  private BigDecimal baseRowTotal;

  public static final String SERIALIZED_NAME_BASE_ROW_TOTAL_INCL_TAX = "base_row_total_incl_tax";
  @SerializedName(SERIALIZED_NAME_BASE_ROW_TOTAL_INCL_TAX)
  private BigDecimal baseRowTotalInclTax;

  public static final String SERIALIZED_NAME_BASE_TAX_AMOUNT = "base_tax_amount";
  @SerializedName(SERIALIZED_NAME_BASE_TAX_AMOUNT)
  private BigDecimal baseTaxAmount;

  public static final String SERIALIZED_NAME_DISCOUNT_AMOUNT = "discount_amount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_AMOUNT)
  private BigDecimal discountAmount;

  public static final String SERIALIZED_NAME_DISCOUNT_PERCENT = "discount_percent";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_PERCENT)
  private BigDecimal discountPercent;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private QuoteDataTotalsItemExtensionInterface extensionAttributes;

  public static final String SERIALIZED_NAME_ITEM_ID = "item_id";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private Integer itemId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private String options;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_PRICE_INCL_TAX = "price_incl_tax";
  @SerializedName(SERIALIZED_NAME_PRICE_INCL_TAX)
  private BigDecimal priceInclTax;

  public static final String SERIALIZED_NAME_QTY = "qty";
  @SerializedName(SERIALIZED_NAME_QTY)
  private BigDecimal qty;

  public static final String SERIALIZED_NAME_ROW_TOTAL = "row_total";
  @SerializedName(SERIALIZED_NAME_ROW_TOTAL)
  private BigDecimal rowTotal;

  public static final String SERIALIZED_NAME_ROW_TOTAL_INCL_TAX = "row_total_incl_tax";
  @SerializedName(SERIALIZED_NAME_ROW_TOTAL_INCL_TAX)
  private BigDecimal rowTotalInclTax;

  public static final String SERIALIZED_NAME_ROW_TOTAL_WITH_DISCOUNT = "row_total_with_discount";
  @SerializedName(SERIALIZED_NAME_ROW_TOTAL_WITH_DISCOUNT)
  private BigDecimal rowTotalWithDiscount;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "tax_amount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private BigDecimal taxAmount;

  public static final String SERIALIZED_NAME_TAX_PERCENT = "tax_percent";
  @SerializedName(SERIALIZED_NAME_TAX_PERCENT)
  private BigDecimal taxPercent;

  public static final String SERIALIZED_NAME_WEEE_TAX_APPLIED = "weee_tax_applied";
  @SerializedName(SERIALIZED_NAME_WEEE_TAX_APPLIED)
  private String weeeTaxApplied;

  public static final String SERIALIZED_NAME_WEEE_TAX_APPLIED_AMOUNT = "weee_tax_applied_amount";
  @SerializedName(SERIALIZED_NAME_WEEE_TAX_APPLIED_AMOUNT)
  private BigDecimal weeeTaxAppliedAmount;

  public QuoteDataTotalsItemInterface() {
  }

  public QuoteDataTotalsItemInterface baseDiscountAmount(BigDecimal baseDiscountAmount) {
    this.baseDiscountAmount = baseDiscountAmount;
    return this;
  }

  /**
   * Discount amount in base currency. Otherwise, null.
   * @return baseDiscountAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseDiscountAmount() {
    return baseDiscountAmount;
  }

  public void setBaseDiscountAmount(BigDecimal baseDiscountAmount) {
    this.baseDiscountAmount = baseDiscountAmount;
  }


  public QuoteDataTotalsItemInterface basePrice(BigDecimal basePrice) {
    this.basePrice = basePrice;
    return this;
  }

  /**
   * Item price in base currency.
   * @return basePrice
   */
  @javax.annotation.Nonnull
  public BigDecimal getBasePrice() {
    return basePrice;
  }

  public void setBasePrice(BigDecimal basePrice) {
    this.basePrice = basePrice;
  }


  public QuoteDataTotalsItemInterface basePriceInclTax(BigDecimal basePriceInclTax) {
    this.basePriceInclTax = basePriceInclTax;
    return this;
  }

  /**
   * Price including tax in base currency. Otherwise, null.
   * @return basePriceInclTax
   */
  @javax.annotation.Nullable
  public BigDecimal getBasePriceInclTax() {
    return basePriceInclTax;
  }

  public void setBasePriceInclTax(BigDecimal basePriceInclTax) {
    this.basePriceInclTax = basePriceInclTax;
  }


  public QuoteDataTotalsItemInterface baseRowTotal(BigDecimal baseRowTotal) {
    this.baseRowTotal = baseRowTotal;
    return this;
  }

  /**
   * Row total in base currency.
   * @return baseRowTotal
   */
  @javax.annotation.Nonnull
  public BigDecimal getBaseRowTotal() {
    return baseRowTotal;
  }

  public void setBaseRowTotal(BigDecimal baseRowTotal) {
    this.baseRowTotal = baseRowTotal;
  }


  public QuoteDataTotalsItemInterface baseRowTotalInclTax(BigDecimal baseRowTotalInclTax) {
    this.baseRowTotalInclTax = baseRowTotalInclTax;
    return this;
  }

  /**
   * Row total including tax in base currency. Otherwise, null.
   * @return baseRowTotalInclTax
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseRowTotalInclTax() {
    return baseRowTotalInclTax;
  }

  public void setBaseRowTotalInclTax(BigDecimal baseRowTotalInclTax) {
    this.baseRowTotalInclTax = baseRowTotalInclTax;
  }


  public QuoteDataTotalsItemInterface baseTaxAmount(BigDecimal baseTaxAmount) {
    this.baseTaxAmount = baseTaxAmount;
    return this;
  }

  /**
   * Tax amount in base currency. Otherwise, null.
   * @return baseTaxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getBaseTaxAmount() {
    return baseTaxAmount;
  }

  public void setBaseTaxAmount(BigDecimal baseTaxAmount) {
    this.baseTaxAmount = baseTaxAmount;
  }


  public QuoteDataTotalsItemInterface discountAmount(BigDecimal discountAmount) {
    this.discountAmount = discountAmount;
    return this;
  }

  /**
   * Discount amount in quote currency. Otherwise, null.
   * @return discountAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getDiscountAmount() {
    return discountAmount;
  }

  public void setDiscountAmount(BigDecimal discountAmount) {
    this.discountAmount = discountAmount;
  }


  public QuoteDataTotalsItemInterface discountPercent(BigDecimal discountPercent) {
    this.discountPercent = discountPercent;
    return this;
  }

  /**
   * Discount percent. Otherwise, null.
   * @return discountPercent
   */
  @javax.annotation.Nullable
  public BigDecimal getDiscountPercent() {
    return discountPercent;
  }

  public void setDiscountPercent(BigDecimal discountPercent) {
    this.discountPercent = discountPercent;
  }


  public QuoteDataTotalsItemInterface extensionAttributes(QuoteDataTotalsItemExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * Get extensionAttributes
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public QuoteDataTotalsItemExtensionInterface getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(QuoteDataTotalsItemExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public QuoteDataTotalsItemInterface itemId(Integer itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Item id
   * @return itemId
   */
  @javax.annotation.Nonnull
  public Integer getItemId() {
    return itemId;
  }

  public void setItemId(Integer itemId) {
    this.itemId = itemId;
  }


  public QuoteDataTotalsItemInterface name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Product name. Otherwise, null.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public QuoteDataTotalsItemInterface options(String options) {
    this.options = options;
    return this;
  }

  /**
   * Item price in quote currency.
   * @return options
   */
  @javax.annotation.Nonnull
  public String getOptions() {
    return options;
  }

  public void setOptions(String options) {
    this.options = options;
  }


  public QuoteDataTotalsItemInterface price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Item price in quote currency.
   * @return price
   */
  @javax.annotation.Nonnull
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public QuoteDataTotalsItemInterface priceInclTax(BigDecimal priceInclTax) {
    this.priceInclTax = priceInclTax;
    return this;
  }

  /**
   * Price including tax in quote currency. Otherwise, null.
   * @return priceInclTax
   */
  @javax.annotation.Nullable
  public BigDecimal getPriceInclTax() {
    return priceInclTax;
  }

  public void setPriceInclTax(BigDecimal priceInclTax) {
    this.priceInclTax = priceInclTax;
  }


  public QuoteDataTotalsItemInterface qty(BigDecimal qty) {
    this.qty = qty;
    return this;
  }

  /**
   * Item quantity.
   * @return qty
   */
  @javax.annotation.Nonnull
  public BigDecimal getQty() {
    return qty;
  }

  public void setQty(BigDecimal qty) {
    this.qty = qty;
  }


  public QuoteDataTotalsItemInterface rowTotal(BigDecimal rowTotal) {
    this.rowTotal = rowTotal;
    return this;
  }

  /**
   * Row total in quote currency.
   * @return rowTotal
   */
  @javax.annotation.Nonnull
  public BigDecimal getRowTotal() {
    return rowTotal;
  }

  public void setRowTotal(BigDecimal rowTotal) {
    this.rowTotal = rowTotal;
  }


  public QuoteDataTotalsItemInterface rowTotalInclTax(BigDecimal rowTotalInclTax) {
    this.rowTotalInclTax = rowTotalInclTax;
    return this;
  }

  /**
   * Row total including tax in quote currency. Otherwise, null.
   * @return rowTotalInclTax
   */
  @javax.annotation.Nullable
  public BigDecimal getRowTotalInclTax() {
    return rowTotalInclTax;
  }

  public void setRowTotalInclTax(BigDecimal rowTotalInclTax) {
    this.rowTotalInclTax = rowTotalInclTax;
  }


  public QuoteDataTotalsItemInterface rowTotalWithDiscount(BigDecimal rowTotalWithDiscount) {
    this.rowTotalWithDiscount = rowTotalWithDiscount;
    return this;
  }

  /**
   * Row total with discount in quote currency. Otherwise, null.
   * @return rowTotalWithDiscount
   */
  @javax.annotation.Nullable
  public BigDecimal getRowTotalWithDiscount() {
    return rowTotalWithDiscount;
  }

  public void setRowTotalWithDiscount(BigDecimal rowTotalWithDiscount) {
    this.rowTotalWithDiscount = rowTotalWithDiscount;
  }


  public QuoteDataTotalsItemInterface taxAmount(BigDecimal taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Tax amount in quote currency. Otherwise, null.
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(BigDecimal taxAmount) {
    this.taxAmount = taxAmount;
  }


  public QuoteDataTotalsItemInterface taxPercent(BigDecimal taxPercent) {
    this.taxPercent = taxPercent;
    return this;
  }

  /**
   * Tax percent. Otherwise, null.
   * @return taxPercent
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxPercent() {
    return taxPercent;
  }

  public void setTaxPercent(BigDecimal taxPercent) {
    this.taxPercent = taxPercent;
  }


  public QuoteDataTotalsItemInterface weeeTaxApplied(String weeeTaxApplied) {
    this.weeeTaxApplied = weeeTaxApplied;
    return this;
  }

  /**
   * Item weee tax applied in quote currency.
   * @return weeeTaxApplied
   */
  @javax.annotation.Nonnull
  public String getWeeeTaxApplied() {
    return weeeTaxApplied;
  }

  public void setWeeeTaxApplied(String weeeTaxApplied) {
    this.weeeTaxApplied = weeeTaxApplied;
  }


  public QuoteDataTotalsItemInterface weeeTaxAppliedAmount(BigDecimal weeeTaxAppliedAmount) {
    this.weeeTaxAppliedAmount = weeeTaxAppliedAmount;
    return this;
  }

  /**
   * Item weee tax applied amount in quote currency.
   * @return weeeTaxAppliedAmount
   */
  @javax.annotation.Nonnull
  public BigDecimal getWeeeTaxAppliedAmount() {
    return weeeTaxAppliedAmount;
  }

  public void setWeeeTaxAppliedAmount(BigDecimal weeeTaxAppliedAmount) {
    this.weeeTaxAppliedAmount = weeeTaxAppliedAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteDataTotalsItemInterface quoteDataTotalsItemInterface = (QuoteDataTotalsItemInterface) o;
    return Objects.equals(this.baseDiscountAmount, quoteDataTotalsItemInterface.baseDiscountAmount) &&
        Objects.equals(this.basePrice, quoteDataTotalsItemInterface.basePrice) &&
        Objects.equals(this.basePriceInclTax, quoteDataTotalsItemInterface.basePriceInclTax) &&
        Objects.equals(this.baseRowTotal, quoteDataTotalsItemInterface.baseRowTotal) &&
        Objects.equals(this.baseRowTotalInclTax, quoteDataTotalsItemInterface.baseRowTotalInclTax) &&
        Objects.equals(this.baseTaxAmount, quoteDataTotalsItemInterface.baseTaxAmount) &&
        Objects.equals(this.discountAmount, quoteDataTotalsItemInterface.discountAmount) &&
        Objects.equals(this.discountPercent, quoteDataTotalsItemInterface.discountPercent) &&
        Objects.equals(this.extensionAttributes, quoteDataTotalsItemInterface.extensionAttributes) &&
        Objects.equals(this.itemId, quoteDataTotalsItemInterface.itemId) &&
        Objects.equals(this.name, quoteDataTotalsItemInterface.name) &&
        Objects.equals(this.options, quoteDataTotalsItemInterface.options) &&
        Objects.equals(this.price, quoteDataTotalsItemInterface.price) &&
        Objects.equals(this.priceInclTax, quoteDataTotalsItemInterface.priceInclTax) &&
        Objects.equals(this.qty, quoteDataTotalsItemInterface.qty) &&
        Objects.equals(this.rowTotal, quoteDataTotalsItemInterface.rowTotal) &&
        Objects.equals(this.rowTotalInclTax, quoteDataTotalsItemInterface.rowTotalInclTax) &&
        Objects.equals(this.rowTotalWithDiscount, quoteDataTotalsItemInterface.rowTotalWithDiscount) &&
        Objects.equals(this.taxAmount, quoteDataTotalsItemInterface.taxAmount) &&
        Objects.equals(this.taxPercent, quoteDataTotalsItemInterface.taxPercent) &&
        Objects.equals(this.weeeTaxApplied, quoteDataTotalsItemInterface.weeeTaxApplied) &&
        Objects.equals(this.weeeTaxAppliedAmount, quoteDataTotalsItemInterface.weeeTaxAppliedAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseDiscountAmount, basePrice, basePriceInclTax, baseRowTotal, baseRowTotalInclTax, baseTaxAmount, discountAmount, discountPercent, extensionAttributes, itemId, name, options, price, priceInclTax, qty, rowTotal, rowTotalInclTax, rowTotalWithDiscount, taxAmount, taxPercent, weeeTaxApplied, weeeTaxAppliedAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteDataTotalsItemInterface {\n");
    sb.append("    baseDiscountAmount: ").append(toIndentedString(baseDiscountAmount)).append("\n");
    sb.append("    basePrice: ").append(toIndentedString(basePrice)).append("\n");
    sb.append("    basePriceInclTax: ").append(toIndentedString(basePriceInclTax)).append("\n");
    sb.append("    baseRowTotal: ").append(toIndentedString(baseRowTotal)).append("\n");
    sb.append("    baseRowTotalInclTax: ").append(toIndentedString(baseRowTotalInclTax)).append("\n");
    sb.append("    baseTaxAmount: ").append(toIndentedString(baseTaxAmount)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    discountPercent: ").append(toIndentedString(discountPercent)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceInclTax: ").append(toIndentedString(priceInclTax)).append("\n");
    sb.append("    qty: ").append(toIndentedString(qty)).append("\n");
    sb.append("    rowTotal: ").append(toIndentedString(rowTotal)).append("\n");
    sb.append("    rowTotalInclTax: ").append(toIndentedString(rowTotalInclTax)).append("\n");
    sb.append("    rowTotalWithDiscount: ").append(toIndentedString(rowTotalWithDiscount)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    taxPercent: ").append(toIndentedString(taxPercent)).append("\n");
    sb.append("    weeeTaxApplied: ").append(toIndentedString(weeeTaxApplied)).append("\n");
    sb.append("    weeeTaxAppliedAmount: ").append(toIndentedString(weeeTaxAppliedAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_discount_amount");
    openapiFields.add("base_price");
    openapiFields.add("base_price_incl_tax");
    openapiFields.add("base_row_total");
    openapiFields.add("base_row_total_incl_tax");
    openapiFields.add("base_tax_amount");
    openapiFields.add("discount_amount");
    openapiFields.add("discount_percent");
    openapiFields.add("extension_attributes");
    openapiFields.add("item_id");
    openapiFields.add("name");
    openapiFields.add("options");
    openapiFields.add("price");
    openapiFields.add("price_incl_tax");
    openapiFields.add("qty");
    openapiFields.add("row_total");
    openapiFields.add("row_total_incl_tax");
    openapiFields.add("row_total_with_discount");
    openapiFields.add("tax_amount");
    openapiFields.add("tax_percent");
    openapiFields.add("weee_tax_applied");
    openapiFields.add("weee_tax_applied_amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("base_price");
    openapiRequiredFields.add("base_row_total");
    openapiRequiredFields.add("item_id");
    openapiRequiredFields.add("options");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("qty");
    openapiRequiredFields.add("row_total");
    openapiRequiredFields.add("weee_tax_applied");
    openapiRequiredFields.add("weee_tax_applied_amount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuoteDataTotalsItemInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuoteDataTotalsItemInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuoteDataTotalsItemInterface is not found in the empty JSON string", QuoteDataTotalsItemInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuoteDataTotalsItemInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuoteDataTotalsItemInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QuoteDataTotalsItemInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `extension_attributes`
      if (jsonObj.get("extension_attributes") != null && !jsonObj.get("extension_attributes").isJsonNull()) {
        QuoteDataTotalsItemExtensionInterface.validateJsonElement(jsonObj.get("extension_attributes"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("options").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be a primitive type in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }
      if (!jsonObj.get("weee_tax_applied").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weee_tax_applied` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weee_tax_applied").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuoteDataTotalsItemInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuoteDataTotalsItemInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuoteDataTotalsItemInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuoteDataTotalsItemInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<QuoteDataTotalsItemInterface>() {
           @Override
           public void write(JsonWriter out, QuoteDataTotalsItemInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuoteDataTotalsItemInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuoteDataTotalsItemInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuoteDataTotalsItemInterface
   * @throws IOException if the JSON string is invalid with respect to QuoteDataTotalsItemInterface
   */
  public static QuoteDataTotalsItemInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuoteDataTotalsItemInterface.class);
  }

  /**
   * Convert an instance of QuoteDataTotalsItemInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

