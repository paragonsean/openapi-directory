/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DirectoryDataRegionInformationInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Country Information interface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DirectoryDataCountryInformationInterface {
  public static final String SERIALIZED_NAME_AVAILABLE_REGIONS = "available_regions";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_REGIONS)
  private List<DirectoryDataRegionInformationInterface> availableRegions = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;

  public static final String SERIALIZED_NAME_FULL_NAME_ENGLISH = "full_name_english";
  @SerializedName(SERIALIZED_NAME_FULL_NAME_ENGLISH)
  private String fullNameEnglish;

  public static final String SERIALIZED_NAME_FULL_NAME_LOCALE = "full_name_locale";
  @SerializedName(SERIALIZED_NAME_FULL_NAME_LOCALE)
  private String fullNameLocale;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_THREE_LETTER_ABBREVIATION = "three_letter_abbreviation";
  @SerializedName(SERIALIZED_NAME_THREE_LETTER_ABBREVIATION)
  private String threeLetterAbbreviation;

  public static final String SERIALIZED_NAME_TWO_LETTER_ABBREVIATION = "two_letter_abbreviation";
  @SerializedName(SERIALIZED_NAME_TWO_LETTER_ABBREVIATION)
  private String twoLetterAbbreviation;

  public DirectoryDataCountryInformationInterface() {
  }

  public DirectoryDataCountryInformationInterface availableRegions(List<DirectoryDataRegionInformationInterface> availableRegions) {
    this.availableRegions = availableRegions;
    return this;
  }

  public DirectoryDataCountryInformationInterface addAvailableRegionsItem(DirectoryDataRegionInformationInterface availableRegionsItem) {
    if (this.availableRegions == null) {
      this.availableRegions = new ArrayList<>();
    }
    this.availableRegions.add(availableRegionsItem);
    return this;
  }

  /**
   * The available regions for the store.
   * @return availableRegions
   */
  @javax.annotation.Nullable
  public List<DirectoryDataRegionInformationInterface> getAvailableRegions() {
    return availableRegions;
  }

  public void setAvailableRegions(List<DirectoryDataRegionInformationInterface> availableRegions) {
    this.availableRegions = availableRegions;
  }


  public DirectoryDataCountryInformationInterface extensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
    return this;
  }

  /**
   * ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CountryInformationInterface
   * @return extensionAttributes
   */
  @javax.annotation.Nullable
  public Object getExtensionAttributes() {
    return extensionAttributes;
  }

  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  public DirectoryDataCountryInformationInterface fullNameEnglish(String fullNameEnglish) {
    this.fullNameEnglish = fullNameEnglish;
    return this;
  }

  /**
   * The country full name (in English) for the store.
   * @return fullNameEnglish
   */
  @javax.annotation.Nonnull
  public String getFullNameEnglish() {
    return fullNameEnglish;
  }

  public void setFullNameEnglish(String fullNameEnglish) {
    this.fullNameEnglish = fullNameEnglish;
  }


  public DirectoryDataCountryInformationInterface fullNameLocale(String fullNameLocale) {
    this.fullNameLocale = fullNameLocale;
    return this;
  }

  /**
   * The country full name (in store locale) for the store.
   * @return fullNameLocale
   */
  @javax.annotation.Nonnull
  public String getFullNameLocale() {
    return fullNameLocale;
  }

  public void setFullNameLocale(String fullNameLocale) {
    this.fullNameLocale = fullNameLocale;
  }


  public DirectoryDataCountryInformationInterface id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The country id for the store.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DirectoryDataCountryInformationInterface threeLetterAbbreviation(String threeLetterAbbreviation) {
    this.threeLetterAbbreviation = threeLetterAbbreviation;
    return this;
  }

  /**
   * The country 3 letter abbreviation for the store.
   * @return threeLetterAbbreviation
   */
  @javax.annotation.Nonnull
  public String getThreeLetterAbbreviation() {
    return threeLetterAbbreviation;
  }

  public void setThreeLetterAbbreviation(String threeLetterAbbreviation) {
    this.threeLetterAbbreviation = threeLetterAbbreviation;
  }


  public DirectoryDataCountryInformationInterface twoLetterAbbreviation(String twoLetterAbbreviation) {
    this.twoLetterAbbreviation = twoLetterAbbreviation;
    return this;
  }

  /**
   * The country 2 letter abbreviation for the store.
   * @return twoLetterAbbreviation
   */
  @javax.annotation.Nonnull
  public String getTwoLetterAbbreviation() {
    return twoLetterAbbreviation;
  }

  public void setTwoLetterAbbreviation(String twoLetterAbbreviation) {
    this.twoLetterAbbreviation = twoLetterAbbreviation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectoryDataCountryInformationInterface directoryDataCountryInformationInterface = (DirectoryDataCountryInformationInterface) o;
    return Objects.equals(this.availableRegions, directoryDataCountryInformationInterface.availableRegions) &&
        Objects.equals(this.extensionAttributes, directoryDataCountryInformationInterface.extensionAttributes) &&
        Objects.equals(this.fullNameEnglish, directoryDataCountryInformationInterface.fullNameEnglish) &&
        Objects.equals(this.fullNameLocale, directoryDataCountryInformationInterface.fullNameLocale) &&
        Objects.equals(this.id, directoryDataCountryInformationInterface.id) &&
        Objects.equals(this.threeLetterAbbreviation, directoryDataCountryInformationInterface.threeLetterAbbreviation) &&
        Objects.equals(this.twoLetterAbbreviation, directoryDataCountryInformationInterface.twoLetterAbbreviation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableRegions, extensionAttributes, fullNameEnglish, fullNameLocale, id, threeLetterAbbreviation, twoLetterAbbreviation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectoryDataCountryInformationInterface {\n");
    sb.append("    availableRegions: ").append(toIndentedString(availableRegions)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("    fullNameEnglish: ").append(toIndentedString(fullNameEnglish)).append("\n");
    sb.append("    fullNameLocale: ").append(toIndentedString(fullNameLocale)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    threeLetterAbbreviation: ").append(toIndentedString(threeLetterAbbreviation)).append("\n");
    sb.append("    twoLetterAbbreviation: ").append(toIndentedString(twoLetterAbbreviation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available_regions");
    openapiFields.add("extension_attributes");
    openapiFields.add("full_name_english");
    openapiFields.add("full_name_locale");
    openapiFields.add("id");
    openapiFields.add("three_letter_abbreviation");
    openapiFields.add("two_letter_abbreviation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("full_name_english");
    openapiRequiredFields.add("full_name_locale");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("three_letter_abbreviation");
    openapiRequiredFields.add("two_letter_abbreviation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DirectoryDataCountryInformationInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DirectoryDataCountryInformationInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectoryDataCountryInformationInterface is not found in the empty JSON string", DirectoryDataCountryInformationInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DirectoryDataCountryInformationInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DirectoryDataCountryInformationInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DirectoryDataCountryInformationInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("available_regions") != null && !jsonObj.get("available_regions").isJsonNull()) {
        JsonArray jsonArrayavailableRegions = jsonObj.getAsJsonArray("available_regions");
        if (jsonArrayavailableRegions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("available_regions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `available_regions` to be an array in the JSON string but got `%s`", jsonObj.get("available_regions").toString()));
          }

          // validate the optional field `available_regions` (array)
          for (int i = 0; i < jsonArrayavailableRegions.size(); i++) {
            DirectoryDataRegionInformationInterface.validateJsonElement(jsonArrayavailableRegions.get(i));
          };
        }
      }
      if (!jsonObj.get("full_name_english").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name_english` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name_english").toString()));
      }
      if (!jsonObj.get("full_name_locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name_locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name_locale").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("three_letter_abbreviation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `three_letter_abbreviation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("three_letter_abbreviation").toString()));
      }
      if (!jsonObj.get("two_letter_abbreviation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `two_letter_abbreviation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("two_letter_abbreviation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectoryDataCountryInformationInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectoryDataCountryInformationInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectoryDataCountryInformationInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectoryDataCountryInformationInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectoryDataCountryInformationInterface>() {
           @Override
           public void write(JsonWriter out, DirectoryDataCountryInformationInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectoryDataCountryInformationInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DirectoryDataCountryInformationInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DirectoryDataCountryInformationInterface
   * @throws IOException if the JSON string is invalid with respect to DirectoryDataCountryInformationInterface
   */
  public static DirectoryDataCountryInformationInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectoryDataCountryInformationInterface.class);
  }

  /**
   * Convert an instance of DirectoryDataCountryInformationInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

