/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Gateway vault payment token interface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VaultDataPaymentTokenInterface {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Integer customerId;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private Integer entityId;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_GATEWAY_TOKEN = "gateway_token";
  @SerializedName(SERIALIZED_NAME_GATEWAY_TOKEN)
  private String gatewayToken;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_VISIBLE = "is_visible";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE)
  private Boolean isVisible;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_CODE = "payment_method_code";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_CODE)
  private String paymentMethodCode;

  public static final String SERIALIZED_NAME_PUBLIC_HASH = "public_hash";
  @SerializedName(SERIALIZED_NAME_PUBLIC_HASH)
  private String publicHash;

  public static final String SERIALIZED_NAME_TOKEN_DETAILS = "token_details";
  @SerializedName(SERIALIZED_NAME_TOKEN_DETAILS)
  private String tokenDetails;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public VaultDataPaymentTokenInterface() {
  }

  public VaultDataPaymentTokenInterface createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Token creation timestamp
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public VaultDataPaymentTokenInterface customerId(Integer customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Customer ID.
   * @return customerId
   */
  @javax.annotation.Nullable
  public Integer getCustomerId() {
    return customerId;
  }

  public void setCustomerId(Integer customerId) {
    this.customerId = customerId;
  }


  public VaultDataPaymentTokenInterface entityId(Integer entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Entity ID.
   * @return entityId
   */
  @javax.annotation.Nullable
  public Integer getEntityId() {
    return entityId;
  }

  public void setEntityId(Integer entityId) {
    this.entityId = entityId;
  }


  public VaultDataPaymentTokenInterface expiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Token expiration timestamp
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public String getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public VaultDataPaymentTokenInterface gatewayToken(String gatewayToken) {
    this.gatewayToken = gatewayToken;
    return this;
  }

  /**
   * Gateway token ID
   * @return gatewayToken
   */
  @javax.annotation.Nonnull
  public String getGatewayToken() {
    return gatewayToken;
  }

  public void setGatewayToken(String gatewayToken) {
    this.gatewayToken = gatewayToken;
  }


  public VaultDataPaymentTokenInterface isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Is active.
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public VaultDataPaymentTokenInterface isVisible(Boolean isVisible) {
    this.isVisible = isVisible;
    return this;
  }

  /**
   * Is visible.
   * @return isVisible
   */
  @javax.annotation.Nonnull
  public Boolean getIsVisible() {
    return isVisible;
  }

  public void setIsVisible(Boolean isVisible) {
    this.isVisible = isVisible;
  }


  public VaultDataPaymentTokenInterface paymentMethodCode(String paymentMethodCode) {
    this.paymentMethodCode = paymentMethodCode;
    return this;
  }

  /**
   * Payment method code
   * @return paymentMethodCode
   */
  @javax.annotation.Nonnull
  public String getPaymentMethodCode() {
    return paymentMethodCode;
  }

  public void setPaymentMethodCode(String paymentMethodCode) {
    this.paymentMethodCode = paymentMethodCode;
  }


  public VaultDataPaymentTokenInterface publicHash(String publicHash) {
    this.publicHash = publicHash;
    return this;
  }

  /**
   * Public hash
   * @return publicHash
   */
  @javax.annotation.Nonnull
  public String getPublicHash() {
    return publicHash;
  }

  public void setPublicHash(String publicHash) {
    this.publicHash = publicHash;
  }


  public VaultDataPaymentTokenInterface tokenDetails(String tokenDetails) {
    this.tokenDetails = tokenDetails;
    return this;
  }

  /**
   * Token details
   * @return tokenDetails
   */
  @javax.annotation.Nonnull
  public String getTokenDetails() {
    return tokenDetails;
  }

  public void setTokenDetails(String tokenDetails) {
    this.tokenDetails = tokenDetails;
  }


  public VaultDataPaymentTokenInterface type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VaultDataPaymentTokenInterface vaultDataPaymentTokenInterface = (VaultDataPaymentTokenInterface) o;
    return Objects.equals(this.createdAt, vaultDataPaymentTokenInterface.createdAt) &&
        Objects.equals(this.customerId, vaultDataPaymentTokenInterface.customerId) &&
        Objects.equals(this.entityId, vaultDataPaymentTokenInterface.entityId) &&
        Objects.equals(this.expiresAt, vaultDataPaymentTokenInterface.expiresAt) &&
        Objects.equals(this.gatewayToken, vaultDataPaymentTokenInterface.gatewayToken) &&
        Objects.equals(this.isActive, vaultDataPaymentTokenInterface.isActive) &&
        Objects.equals(this.isVisible, vaultDataPaymentTokenInterface.isVisible) &&
        Objects.equals(this.paymentMethodCode, vaultDataPaymentTokenInterface.paymentMethodCode) &&
        Objects.equals(this.publicHash, vaultDataPaymentTokenInterface.publicHash) &&
        Objects.equals(this.tokenDetails, vaultDataPaymentTokenInterface.tokenDetails) &&
        Objects.equals(this.type, vaultDataPaymentTokenInterface.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, customerId, entityId, expiresAt, gatewayToken, isActive, isVisible, paymentMethodCode, publicHash, tokenDetails, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VaultDataPaymentTokenInterface {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    gatewayToken: ").append(toIndentedString(gatewayToken)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isVisible: ").append(toIndentedString(isVisible)).append("\n");
    sb.append("    paymentMethodCode: ").append(toIndentedString(paymentMethodCode)).append("\n");
    sb.append("    publicHash: ").append(toIndentedString(publicHash)).append("\n");
    sb.append("    tokenDetails: ").append(toIndentedString(tokenDetails)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("customer_id");
    openapiFields.add("entity_id");
    openapiFields.add("expires_at");
    openapiFields.add("gateway_token");
    openapiFields.add("is_active");
    openapiFields.add("is_visible");
    openapiFields.add("payment_method_code");
    openapiFields.add("public_hash");
    openapiFields.add("token_details");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("gateway_token");
    openapiRequiredFields.add("is_active");
    openapiRequiredFields.add("is_visible");
    openapiRequiredFields.add("payment_method_code");
    openapiRequiredFields.add("public_hash");
    openapiRequiredFields.add("token_details");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VaultDataPaymentTokenInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VaultDataPaymentTokenInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VaultDataPaymentTokenInterface is not found in the empty JSON string", VaultDataPaymentTokenInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VaultDataPaymentTokenInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VaultDataPaymentTokenInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VaultDataPaymentTokenInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("expires_at") != null && !jsonObj.get("expires_at").isJsonNull()) && !jsonObj.get("expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_at").toString()));
      }
      if (!jsonObj.get("gateway_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gateway_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gateway_token").toString()));
      }
      if (!jsonObj.get("payment_method_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method_code").toString()));
      }
      if (!jsonObj.get("public_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_hash").toString()));
      }
      if (!jsonObj.get("token_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_details").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VaultDataPaymentTokenInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VaultDataPaymentTokenInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VaultDataPaymentTokenInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VaultDataPaymentTokenInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<VaultDataPaymentTokenInterface>() {
           @Override
           public void write(JsonWriter out, VaultDataPaymentTokenInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VaultDataPaymentTokenInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VaultDataPaymentTokenInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VaultDataPaymentTokenInterface
   * @throws IOException if the JSON string is invalid with respect to VaultDataPaymentTokenInterface
   */
  public static VaultDataPaymentTokenInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VaultDataPaymentTokenInterface.class);
  }

  /**
   * Convert an instance of VaultDataPaymentTokenInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

