/*
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Extension attribute for quote totals model.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:51.810681-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NegotiableQuoteDataNegotiableQuoteTotalsInterface {
  public static final String SERIALIZED_NAME_BASE_COST_TOTAL = "base_cost_total";
  @SerializedName(SERIALIZED_NAME_BASE_COST_TOTAL)
  private BigDecimal baseCostTotal;

  public static final String SERIALIZED_NAME_BASE_ORIGINAL_PRICE_INCL_TAX = "base_original_price_incl_tax";
  @SerializedName(SERIALIZED_NAME_BASE_ORIGINAL_PRICE_INCL_TAX)
  private BigDecimal baseOriginalPriceInclTax;

  public static final String SERIALIZED_NAME_BASE_ORIGINAL_TAX = "base_original_tax";
  @SerializedName(SERIALIZED_NAME_BASE_ORIGINAL_TAX)
  private BigDecimal baseOriginalTax;

  public static final String SERIALIZED_NAME_BASE_ORIGINAL_TOTAL = "base_original_total";
  @SerializedName(SERIALIZED_NAME_BASE_ORIGINAL_TOTAL)
  private BigDecimal baseOriginalTotal;

  public static final String SERIALIZED_NAME_BASE_TO_QUOTE_RATE = "base_to_quote_rate";
  @SerializedName(SERIALIZED_NAME_BASE_TO_QUOTE_RATE)
  private BigDecimal baseToQuoteRate;

  public static final String SERIALIZED_NAME_COST_TOTAL = "cost_total";
  @SerializedName(SERIALIZED_NAME_COST_TOTAL)
  private BigDecimal costTotal;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOMER_GROUP = "customer_group";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_GROUP)
  private Integer customerGroup;

  public static final String SERIALIZED_NAME_ITEMS_COUNT = "items_count";
  @SerializedName(SERIALIZED_NAME_ITEMS_COUNT)
  private Integer itemsCount;

  public static final String SERIALIZED_NAME_NEGOTIATED_PRICE_TYPE = "negotiated_price_type";
  @SerializedName(SERIALIZED_NAME_NEGOTIATED_PRICE_TYPE)
  private Integer negotiatedPriceType;

  public static final String SERIALIZED_NAME_NEGOTIATED_PRICE_VALUE = "negotiated_price_value";
  @SerializedName(SERIALIZED_NAME_NEGOTIATED_PRICE_VALUE)
  private BigDecimal negotiatedPriceValue;

  public static final String SERIALIZED_NAME_ORIGINAL_PRICE_INCL_TAX = "original_price_incl_tax";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_PRICE_INCL_TAX)
  private BigDecimal originalPriceInclTax;

  public static final String SERIALIZED_NAME_ORIGINAL_TAX = "original_tax";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TAX)
  private BigDecimal originalTax;

  public static final String SERIALIZED_NAME_ORIGINAL_TOTAL = "original_total";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TOTAL)
  private BigDecimal originalTotal;

  public static final String SERIALIZED_NAME_QUOTE_STATUS = "quote_status";
  @SerializedName(SERIALIZED_NAME_QUOTE_STATUS)
  private String quoteStatus;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public NegotiableQuoteDataNegotiableQuoteTotalsInterface() {
  }

  public NegotiableQuoteDataNegotiableQuoteTotalsInterface baseCostTotal(BigDecimal baseCostTotal) {
    this.baseCostTotal = baseCostTotal;
    return this;
  }

  /**
   * Total cost for quote in base currency.
   * @return baseCostTotal
   */
  @javax.annotation.Nonnull
  public BigDecimal getBaseCostTotal() {
    return baseCostTotal;
  }

  public void setBaseCostTotal(BigDecimal baseCostTotal) {
    this.baseCostTotal = baseCostTotal;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface baseOriginalPriceInclTax(BigDecimal baseOriginalPriceInclTax) {
    this.baseOriginalPriceInclTax = baseOriginalPriceInclTax;
    return this;
  }

  /**
   * Original price with included tax for quote in base currency.
   * @return baseOriginalPriceInclTax
   */
  @javax.annotation.Nonnull
  public BigDecimal getBaseOriginalPriceInclTax() {
    return baseOriginalPriceInclTax;
  }

  public void setBaseOriginalPriceInclTax(BigDecimal baseOriginalPriceInclTax) {
    this.baseOriginalPriceInclTax = baseOriginalPriceInclTax;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface baseOriginalTax(BigDecimal baseOriginalTax) {
    this.baseOriginalTax = baseOriginalTax;
    return this;
  }

  /**
   * Original tax amount for quote in base currency.
   * @return baseOriginalTax
   */
  @javax.annotation.Nonnull
  public BigDecimal getBaseOriginalTax() {
    return baseOriginalTax;
  }

  public void setBaseOriginalTax(BigDecimal baseOriginalTax) {
    this.baseOriginalTax = baseOriginalTax;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface baseOriginalTotal(BigDecimal baseOriginalTotal) {
    this.baseOriginalTotal = baseOriginalTotal;
    return this;
  }

  /**
   * Original quote total in base currency.
   * @return baseOriginalTotal
   */
  @javax.annotation.Nonnull
  public BigDecimal getBaseOriginalTotal() {
    return baseOriginalTotal;
  }

  public void setBaseOriginalTotal(BigDecimal baseOriginalTotal) {
    this.baseOriginalTotal = baseOriginalTotal;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface baseToQuoteRate(BigDecimal baseToQuoteRate) {
    this.baseToQuoteRate = baseToQuoteRate;
    return this;
  }

  /**
   * Base currency to quote currency rate.
   * @return baseToQuoteRate
   */
  @javax.annotation.Nonnull
  public BigDecimal getBaseToQuoteRate() {
    return baseToQuoteRate;
  }

  public void setBaseToQuoteRate(BigDecimal baseToQuoteRate) {
    this.baseToQuoteRate = baseToQuoteRate;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface costTotal(BigDecimal costTotal) {
    this.costTotal = costTotal;
    return this;
  }

  /**
   * Total cost for quote.
   * @return costTotal
   */
  @javax.annotation.Nonnull
  public BigDecimal getCostTotal() {
    return costTotal;
  }

  public void setCostTotal(BigDecimal costTotal) {
    this.costTotal = costTotal;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The cart creation date and time.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface customerGroup(Integer customerGroup) {
    this.customerGroup = customerGroup;
    return this;
  }

  /**
   * Customer group id.
   * @return customerGroup
   */
  @javax.annotation.Nonnull
  public Integer getCustomerGroup() {
    return customerGroup;
  }

  public void setCustomerGroup(Integer customerGroup) {
    this.customerGroup = customerGroup;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface itemsCount(Integer itemsCount) {
    this.itemsCount = itemsCount;
    return this;
  }

  /**
   * The number of different items or products in the cart.
   * @return itemsCount
   */
  @javax.annotation.Nonnull
  public Integer getItemsCount() {
    return itemsCount;
  }

  public void setItemsCount(Integer itemsCount) {
    this.itemsCount = itemsCount;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface negotiatedPriceType(Integer negotiatedPriceType) {
    this.negotiatedPriceType = negotiatedPriceType;
    return this;
  }

  /**
   * Negotiable quote type.
   * @return negotiatedPriceType
   */
  @javax.annotation.Nonnull
  public Integer getNegotiatedPriceType() {
    return negotiatedPriceType;
  }

  public void setNegotiatedPriceType(Integer negotiatedPriceType) {
    this.negotiatedPriceType = negotiatedPriceType;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface negotiatedPriceValue(BigDecimal negotiatedPriceValue) {
    this.negotiatedPriceValue = negotiatedPriceValue;
    return this;
  }

  /**
   * Negotiable price value for quote.
   * @return negotiatedPriceValue
   */
  @javax.annotation.Nonnull
  public BigDecimal getNegotiatedPriceValue() {
    return negotiatedPriceValue;
  }

  public void setNegotiatedPriceValue(BigDecimal negotiatedPriceValue) {
    this.negotiatedPriceValue = negotiatedPriceValue;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface originalPriceInclTax(BigDecimal originalPriceInclTax) {
    this.originalPriceInclTax = originalPriceInclTax;
    return this;
  }

  /**
   * Original price with included tax for quote.
   * @return originalPriceInclTax
   */
  @javax.annotation.Nonnull
  public BigDecimal getOriginalPriceInclTax() {
    return originalPriceInclTax;
  }

  public void setOriginalPriceInclTax(BigDecimal originalPriceInclTax) {
    this.originalPriceInclTax = originalPriceInclTax;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface originalTax(BigDecimal originalTax) {
    this.originalTax = originalTax;
    return this;
  }

  /**
   * Original tax amount for quote.
   * @return originalTax
   */
  @javax.annotation.Nonnull
  public BigDecimal getOriginalTax() {
    return originalTax;
  }

  public void setOriginalTax(BigDecimal originalTax) {
    this.originalTax = originalTax;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface originalTotal(BigDecimal originalTotal) {
    this.originalTotal = originalTotal;
    return this;
  }

  /**
   * Original quote total.
   * @return originalTotal
   */
  @javax.annotation.Nonnull
  public BigDecimal getOriginalTotal() {
    return originalTotal;
  }

  public void setOriginalTotal(BigDecimal originalTotal) {
    this.originalTotal = originalTotal;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface quoteStatus(String quoteStatus) {
    this.quoteStatus = quoteStatus;
    return this;
  }

  /**
   * Negotiable quote status.
   * @return quoteStatus
   */
  @javax.annotation.Nonnull
  public String getQuoteStatus() {
    return quoteStatus;
  }

  public void setQuoteStatus(String quoteStatus) {
    this.quoteStatus = quoteStatus;
  }


  public NegotiableQuoteDataNegotiableQuoteTotalsInterface updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The cart last update date and time.
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NegotiableQuoteDataNegotiableQuoteTotalsInterface negotiableQuoteDataNegotiableQuoteTotalsInterface = (NegotiableQuoteDataNegotiableQuoteTotalsInterface) o;
    return Objects.equals(this.baseCostTotal, negotiableQuoteDataNegotiableQuoteTotalsInterface.baseCostTotal) &&
        Objects.equals(this.baseOriginalPriceInclTax, negotiableQuoteDataNegotiableQuoteTotalsInterface.baseOriginalPriceInclTax) &&
        Objects.equals(this.baseOriginalTax, negotiableQuoteDataNegotiableQuoteTotalsInterface.baseOriginalTax) &&
        Objects.equals(this.baseOriginalTotal, negotiableQuoteDataNegotiableQuoteTotalsInterface.baseOriginalTotal) &&
        Objects.equals(this.baseToQuoteRate, negotiableQuoteDataNegotiableQuoteTotalsInterface.baseToQuoteRate) &&
        Objects.equals(this.costTotal, negotiableQuoteDataNegotiableQuoteTotalsInterface.costTotal) &&
        Objects.equals(this.createdAt, negotiableQuoteDataNegotiableQuoteTotalsInterface.createdAt) &&
        Objects.equals(this.customerGroup, negotiableQuoteDataNegotiableQuoteTotalsInterface.customerGroup) &&
        Objects.equals(this.itemsCount, negotiableQuoteDataNegotiableQuoteTotalsInterface.itemsCount) &&
        Objects.equals(this.negotiatedPriceType, negotiableQuoteDataNegotiableQuoteTotalsInterface.negotiatedPriceType) &&
        Objects.equals(this.negotiatedPriceValue, negotiableQuoteDataNegotiableQuoteTotalsInterface.negotiatedPriceValue) &&
        Objects.equals(this.originalPriceInclTax, negotiableQuoteDataNegotiableQuoteTotalsInterface.originalPriceInclTax) &&
        Objects.equals(this.originalTax, negotiableQuoteDataNegotiableQuoteTotalsInterface.originalTax) &&
        Objects.equals(this.originalTotal, negotiableQuoteDataNegotiableQuoteTotalsInterface.originalTotal) &&
        Objects.equals(this.quoteStatus, negotiableQuoteDataNegotiableQuoteTotalsInterface.quoteStatus) &&
        Objects.equals(this.updatedAt, negotiableQuoteDataNegotiableQuoteTotalsInterface.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseCostTotal, baseOriginalPriceInclTax, baseOriginalTax, baseOriginalTotal, baseToQuoteRate, costTotal, createdAt, customerGroup, itemsCount, negotiatedPriceType, negotiatedPriceValue, originalPriceInclTax, originalTax, originalTotal, quoteStatus, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NegotiableQuoteDataNegotiableQuoteTotalsInterface {\n");
    sb.append("    baseCostTotal: ").append(toIndentedString(baseCostTotal)).append("\n");
    sb.append("    baseOriginalPriceInclTax: ").append(toIndentedString(baseOriginalPriceInclTax)).append("\n");
    sb.append("    baseOriginalTax: ").append(toIndentedString(baseOriginalTax)).append("\n");
    sb.append("    baseOriginalTotal: ").append(toIndentedString(baseOriginalTotal)).append("\n");
    sb.append("    baseToQuoteRate: ").append(toIndentedString(baseToQuoteRate)).append("\n");
    sb.append("    costTotal: ").append(toIndentedString(costTotal)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customerGroup: ").append(toIndentedString(customerGroup)).append("\n");
    sb.append("    itemsCount: ").append(toIndentedString(itemsCount)).append("\n");
    sb.append("    negotiatedPriceType: ").append(toIndentedString(negotiatedPriceType)).append("\n");
    sb.append("    negotiatedPriceValue: ").append(toIndentedString(negotiatedPriceValue)).append("\n");
    sb.append("    originalPriceInclTax: ").append(toIndentedString(originalPriceInclTax)).append("\n");
    sb.append("    originalTax: ").append(toIndentedString(originalTax)).append("\n");
    sb.append("    originalTotal: ").append(toIndentedString(originalTotal)).append("\n");
    sb.append("    quoteStatus: ").append(toIndentedString(quoteStatus)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_cost_total");
    openapiFields.add("base_original_price_incl_tax");
    openapiFields.add("base_original_tax");
    openapiFields.add("base_original_total");
    openapiFields.add("base_to_quote_rate");
    openapiFields.add("cost_total");
    openapiFields.add("created_at");
    openapiFields.add("customer_group");
    openapiFields.add("items_count");
    openapiFields.add("negotiated_price_type");
    openapiFields.add("negotiated_price_value");
    openapiFields.add("original_price_incl_tax");
    openapiFields.add("original_tax");
    openapiFields.add("original_total");
    openapiFields.add("quote_status");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("base_cost_total");
    openapiRequiredFields.add("base_original_price_incl_tax");
    openapiRequiredFields.add("base_original_tax");
    openapiRequiredFields.add("base_original_total");
    openapiRequiredFields.add("base_to_quote_rate");
    openapiRequiredFields.add("cost_total");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("customer_group");
    openapiRequiredFields.add("items_count");
    openapiRequiredFields.add("negotiated_price_type");
    openapiRequiredFields.add("negotiated_price_value");
    openapiRequiredFields.add("original_price_incl_tax");
    openapiRequiredFields.add("original_tax");
    openapiRequiredFields.add("original_total");
    openapiRequiredFields.add("quote_status");
    openapiRequiredFields.add("updated_at");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NegotiableQuoteDataNegotiableQuoteTotalsInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NegotiableQuoteDataNegotiableQuoteTotalsInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NegotiableQuoteDataNegotiableQuoteTotalsInterface is not found in the empty JSON string", NegotiableQuoteDataNegotiableQuoteTotalsInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NegotiableQuoteDataNegotiableQuoteTotalsInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NegotiableQuoteDataNegotiableQuoteTotalsInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NegotiableQuoteDataNegotiableQuoteTotalsInterface.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (!jsonObj.get("quote_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quote_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quote_status").toString()));
      }
      if (!jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NegotiableQuoteDataNegotiableQuoteTotalsInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NegotiableQuoteDataNegotiableQuoteTotalsInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NegotiableQuoteDataNegotiableQuoteTotalsInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NegotiableQuoteDataNegotiableQuoteTotalsInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<NegotiableQuoteDataNegotiableQuoteTotalsInterface>() {
           @Override
           public void write(JsonWriter out, NegotiableQuoteDataNegotiableQuoteTotalsInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NegotiableQuoteDataNegotiableQuoteTotalsInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NegotiableQuoteDataNegotiableQuoteTotalsInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NegotiableQuoteDataNegotiableQuoteTotalsInterface
   * @throws IOException if the JSON string is invalid with respect to NegotiableQuoteDataNegotiableQuoteTotalsInterface
   */
  public static NegotiableQuoteDataNegotiableQuoteTotalsInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NegotiableQuoteDataNegotiableQuoteTotalsInterface.class);
  }

  /**
   * Convert an instance of NegotiableQuoteDataNegotiableQuoteTotalsInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

