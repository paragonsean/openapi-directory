# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompanyCreditDataCreditBalanceOptionsInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_base: str=None, currency_display: str=None, order_increment: str=None, purchase_order: str=None):
        """CompanyCreditDataCreditBalanceOptionsInterface - a model defined in OpenAPI

        :param currency_base: The currency_base of this CompanyCreditDataCreditBalanceOptionsInterface.
        :param currency_display: The currency_display of this CompanyCreditDataCreditBalanceOptionsInterface.
        :param order_increment: The order_increment of this CompanyCreditDataCreditBalanceOptionsInterface.
        :param purchase_order: The purchase_order of this CompanyCreditDataCreditBalanceOptionsInterface.
        """
        self.openapi_types = {
            'currency_base': str,
            'currency_display': str,
            'order_increment': str,
            'purchase_order': str
        }

        self.attribute_map = {
            'currency_base': 'currency_base',
            'currency_display': 'currency_display',
            'order_increment': 'order_increment',
            'purchase_order': 'purchase_order'
        }

        self._currency_base = currency_base
        self._currency_display = currency_display
        self._order_increment = order_increment
        self._purchase_order = purchase_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyCreditDataCreditBalanceOptionsInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The company-credit-data-credit-balance-options-interface of this CompanyCreditDataCreditBalanceOptionsInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_base(self):
        """Gets the currency_base of this CompanyCreditDataCreditBalanceOptionsInterface.

        Currency base.

        :return: The currency_base of this CompanyCreditDataCreditBalanceOptionsInterface.
        :rtype: str
        """
        return self._currency_base

    @currency_base.setter
    def currency_base(self, currency_base):
        """Sets the currency_base of this CompanyCreditDataCreditBalanceOptionsInterface.

        Currency base.

        :param currency_base: The currency_base of this CompanyCreditDataCreditBalanceOptionsInterface.
        :type currency_base: str
        """
        if currency_base is None:
            raise ValueError("Invalid value for `currency_base`, must not be `None`")

        self._currency_base = currency_base

    @property
    def currency_display(self):
        """Gets the currency_display of this CompanyCreditDataCreditBalanceOptionsInterface.

        Currency display.

        :return: The currency_display of this CompanyCreditDataCreditBalanceOptionsInterface.
        :rtype: str
        """
        return self._currency_display

    @currency_display.setter
    def currency_display(self, currency_display):
        """Sets the currency_display of this CompanyCreditDataCreditBalanceOptionsInterface.

        Currency display.

        :param currency_display: The currency_display of this CompanyCreditDataCreditBalanceOptionsInterface.
        :type currency_display: str
        """
        if currency_display is None:
            raise ValueError("Invalid value for `currency_display`, must not be `None`")

        self._currency_display = currency_display

    @property
    def order_increment(self):
        """Gets the order_increment of this CompanyCreditDataCreditBalanceOptionsInterface.

        Order increment.

        :return: The order_increment of this CompanyCreditDataCreditBalanceOptionsInterface.
        :rtype: str
        """
        return self._order_increment

    @order_increment.setter
    def order_increment(self, order_increment):
        """Sets the order_increment of this CompanyCreditDataCreditBalanceOptionsInterface.

        Order increment.

        :param order_increment: The order_increment of this CompanyCreditDataCreditBalanceOptionsInterface.
        :type order_increment: str
        """
        if order_increment is None:
            raise ValueError("Invalid value for `order_increment`, must not be `None`")

        self._order_increment = order_increment

    @property
    def purchase_order(self):
        """Gets the purchase_order of this CompanyCreditDataCreditBalanceOptionsInterface.

        Purchase order number.

        :return: The purchase_order of this CompanyCreditDataCreditBalanceOptionsInterface.
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this CompanyCreditDataCreditBalanceOptionsInterface.

        Purchase order number.

        :param purchase_order: The purchase_order of this CompanyCreditDataCreditBalanceOptionsInterface.
        :type purchase_order: str
        """
        if purchase_order is None:
            raise ValueError("Invalid value for `purchase_order`, must not be `None`")

        self._purchase_order = purchase_order
