# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompanyCompanyHierarchyV1MoveNodePutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_parent_id: int=None):
        """CompanyCompanyHierarchyV1MoveNodePutRequest - a model defined in OpenAPI

        :param new_parent_id: The new_parent_id of this CompanyCompanyHierarchyV1MoveNodePutRequest.
        """
        self.openapi_types = {
            'new_parent_id': int
        }

        self.attribute_map = {
            'new_parent_id': 'newParentId'
        }

        self._new_parent_id = new_parent_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyCompanyHierarchyV1MoveNodePutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The companyCompanyHierarchyV1MoveNodePut_request of this CompanyCompanyHierarchyV1MoveNodePutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_parent_id(self):
        """Gets the new_parent_id of this CompanyCompanyHierarchyV1MoveNodePutRequest.


        :return: The new_parent_id of this CompanyCompanyHierarchyV1MoveNodePutRequest.
        :rtype: int
        """
        return self._new_parent_id

    @new_parent_id.setter
    def new_parent_id(self, new_parent_id):
        """Sets the new_parent_id of this CompanyCompanyHierarchyV1MoveNodePutRequest.


        :param new_parent_id: The new_parent_id of this CompanyCompanyHierarchyV1MoveNodePutRequest.
        :type new_parent_id: int
        """
        if new_parent_id is None:
            raise ValueError("Invalid value for `new_parent_id`, must not be `None`")

        self._new_parent_id = new_parent_id
