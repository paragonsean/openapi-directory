# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NegotiableQuoteDataCompanyQuoteConfigInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_id: str=None, extension_attributes: object=None, is_quote_enabled: bool=None):
        """NegotiableQuoteDataCompanyQuoteConfigInterface - a model defined in OpenAPI

        :param company_id: The company_id of this NegotiableQuoteDataCompanyQuoteConfigInterface.
        :param extension_attributes: The extension_attributes of this NegotiableQuoteDataCompanyQuoteConfigInterface.
        :param is_quote_enabled: The is_quote_enabled of this NegotiableQuoteDataCompanyQuoteConfigInterface.
        """
        self.openapi_types = {
            'company_id': str,
            'extension_attributes': object,
            'is_quote_enabled': bool
        }

        self.attribute_map = {
            'company_id': 'company_id',
            'extension_attributes': 'extension_attributes',
            'is_quote_enabled': 'is_quote_enabled'
        }

        self._company_id = company_id
        self._extension_attributes = extension_attributes
        self._is_quote_enabled = is_quote_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NegotiableQuoteDataCompanyQuoteConfigInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The negotiable-quote-data-company-quote-config-interface of this NegotiableQuoteDataCompanyQuoteConfigInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_id(self):
        """Gets the company_id of this NegotiableQuoteDataCompanyQuoteConfigInterface.

        Company id

        :return: The company_id of this NegotiableQuoteDataCompanyQuoteConfigInterface.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this NegotiableQuoteDataCompanyQuoteConfigInterface.

        Company id

        :param company_id: The company_id of this NegotiableQuoteDataCompanyQuoteConfigInterface.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this NegotiableQuoteDataCompanyQuoteConfigInterface.

        ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\CompanyQuoteConfigInterface

        :return: The extension_attributes of this NegotiableQuoteDataCompanyQuoteConfigInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this NegotiableQuoteDataCompanyQuoteConfigInterface.

        ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\CompanyQuoteConfigInterface

        :param extension_attributes: The extension_attributes of this NegotiableQuoteDataCompanyQuoteConfigInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def is_quote_enabled(self):
        """Gets the is_quote_enabled of this NegotiableQuoteDataCompanyQuoteConfigInterface.

        Quote enabled for company

        :return: The is_quote_enabled of this NegotiableQuoteDataCompanyQuoteConfigInterface.
        :rtype: bool
        """
        return self._is_quote_enabled

    @is_quote_enabled.setter
    def is_quote_enabled(self, is_quote_enabled):
        """Sets the is_quote_enabled of this NegotiableQuoteDataCompanyQuoteConfigInterface.

        Quote enabled for company

        :param is_quote_enabled: The is_quote_enabled of this NegotiableQuoteDataCompanyQuoteConfigInterface.
        :type is_quote_enabled: bool
        """
        if is_quote_enabled is None:
            raise ValueError("Invalid value for `is_quote_enabled`, must not be `None`")

        self._is_quote_enabled = is_quote_enabled
