# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sales_data_order_address_interface import SalesDataOrderAddressInterface
from openapi_server.models.sales_data_order_extension_interface import SalesDataOrderExtensionInterface
from openapi_server.models.sales_data_order_item_interface import SalesDataOrderItemInterface
from openapi_server.models.sales_data_order_payment_interface import SalesDataOrderPaymentInterface
from openapi_server.models.sales_data_order_status_history_interface import SalesDataOrderStatusHistoryInterface
from openapi_server import util


class SalesDataOrderInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustment_negative: float=None, adjustment_positive: float=None, applied_rule_ids: str=None, base_adjustment_negative: float=None, base_adjustment_positive: float=None, base_currency_code: str=None, base_discount_amount: float=None, base_discount_canceled: float=None, base_discount_invoiced: float=None, base_discount_refunded: float=None, base_discount_tax_compensation_amount: float=None, base_discount_tax_compensation_invoiced: float=None, base_discount_tax_compensation_refunded: float=None, base_grand_total: float=None, base_shipping_amount: float=None, base_shipping_canceled: float=None, base_shipping_discount_amount: float=None, base_shipping_discount_tax_compensation_amnt: float=None, base_shipping_incl_tax: float=None, base_shipping_invoiced: float=None, base_shipping_refunded: float=None, base_shipping_tax_amount: float=None, base_shipping_tax_refunded: float=None, base_subtotal: float=None, base_subtotal_canceled: float=None, base_subtotal_incl_tax: float=None, base_subtotal_invoiced: float=None, base_subtotal_refunded: float=None, base_tax_amount: float=None, base_tax_canceled: float=None, base_tax_invoiced: float=None, base_tax_refunded: float=None, base_to_global_rate: float=None, base_to_order_rate: float=None, base_total_canceled: float=None, base_total_due: float=None, base_total_invoiced: float=None, base_total_invoiced_cost: float=None, base_total_offline_refunded: float=None, base_total_online_refunded: float=None, base_total_paid: float=None, base_total_qty_ordered: float=None, base_total_refunded: float=None, billing_address: SalesDataOrderAddressInterface=None, billing_address_id: int=None, can_ship_partially: int=None, can_ship_partially_item: int=None, coupon_code: str=None, created_at: str=None, customer_dob: str=None, customer_email: str=None, customer_firstname: str=None, customer_gender: int=None, customer_group_id: int=None, customer_id: int=None, customer_is_guest: int=None, customer_lastname: str=None, customer_middlename: str=None, customer_note: str=None, customer_note_notify: int=None, customer_prefix: str=None, customer_suffix: str=None, customer_taxvat: str=None, discount_amount: float=None, discount_canceled: float=None, discount_description: str=None, discount_invoiced: float=None, discount_refunded: float=None, discount_tax_compensation_amount: float=None, discount_tax_compensation_invoiced: float=None, discount_tax_compensation_refunded: float=None, edit_increment: int=None, email_sent: int=None, entity_id: int=None, ext_customer_id: str=None, ext_order_id: str=None, extension_attributes: SalesDataOrderExtensionInterface=None, forced_shipment_with_invoice: int=None, global_currency_code: str=None, grand_total: float=None, hold_before_state: str=None, hold_before_status: str=None, increment_id: str=None, is_virtual: int=None, items: List[SalesDataOrderItemInterface]=None, order_currency_code: str=None, original_increment_id: str=None, payment: SalesDataOrderPaymentInterface=None, payment_auth_expiration: int=None, payment_authorization_amount: float=None, protect_code: str=None, quote_address_id: int=None, quote_id: int=None, relation_child_id: str=None, relation_child_real_id: str=None, relation_parent_id: str=None, relation_parent_real_id: str=None, remote_ip: str=None, shipping_amount: float=None, shipping_canceled: float=None, shipping_description: str=None, shipping_discount_amount: float=None, shipping_discount_tax_compensation_amount: float=None, shipping_incl_tax: float=None, shipping_invoiced: float=None, shipping_refunded: float=None, shipping_tax_amount: float=None, shipping_tax_refunded: float=None, state: str=None, status: str=None, status_histories: List[SalesDataOrderStatusHistoryInterface]=None, store_currency_code: str=None, store_id: int=None, store_name: str=None, store_to_base_rate: float=None, store_to_order_rate: float=None, subtotal: float=None, subtotal_canceled: float=None, subtotal_incl_tax: float=None, subtotal_invoiced: float=None, subtotal_refunded: float=None, tax_amount: float=None, tax_canceled: float=None, tax_invoiced: float=None, tax_refunded: float=None, total_canceled: float=None, total_due: float=None, total_invoiced: float=None, total_item_count: int=None, total_offline_refunded: float=None, total_online_refunded: float=None, total_paid: float=None, total_qty_ordered: float=None, total_refunded: float=None, updated_at: str=None, weight: float=None, x_forwarded_for: str=None):
        """SalesDataOrderInterface - a model defined in OpenAPI

        :param adjustment_negative: The adjustment_negative of this SalesDataOrderInterface.
        :param adjustment_positive: The adjustment_positive of this SalesDataOrderInterface.
        :param applied_rule_ids: The applied_rule_ids of this SalesDataOrderInterface.
        :param base_adjustment_negative: The base_adjustment_negative of this SalesDataOrderInterface.
        :param base_adjustment_positive: The base_adjustment_positive of this SalesDataOrderInterface.
        :param base_currency_code: The base_currency_code of this SalesDataOrderInterface.
        :param base_discount_amount: The base_discount_amount of this SalesDataOrderInterface.
        :param base_discount_canceled: The base_discount_canceled of this SalesDataOrderInterface.
        :param base_discount_invoiced: The base_discount_invoiced of this SalesDataOrderInterface.
        :param base_discount_refunded: The base_discount_refunded of this SalesDataOrderInterface.
        :param base_discount_tax_compensation_amount: The base_discount_tax_compensation_amount of this SalesDataOrderInterface.
        :param base_discount_tax_compensation_invoiced: The base_discount_tax_compensation_invoiced of this SalesDataOrderInterface.
        :param base_discount_tax_compensation_refunded: The base_discount_tax_compensation_refunded of this SalesDataOrderInterface.
        :param base_grand_total: The base_grand_total of this SalesDataOrderInterface.
        :param base_shipping_amount: The base_shipping_amount of this SalesDataOrderInterface.
        :param base_shipping_canceled: The base_shipping_canceled of this SalesDataOrderInterface.
        :param base_shipping_discount_amount: The base_shipping_discount_amount of this SalesDataOrderInterface.
        :param base_shipping_discount_tax_compensation_amnt: The base_shipping_discount_tax_compensation_amnt of this SalesDataOrderInterface.
        :param base_shipping_incl_tax: The base_shipping_incl_tax of this SalesDataOrderInterface.
        :param base_shipping_invoiced: The base_shipping_invoiced of this SalesDataOrderInterface.
        :param base_shipping_refunded: The base_shipping_refunded of this SalesDataOrderInterface.
        :param base_shipping_tax_amount: The base_shipping_tax_amount of this SalesDataOrderInterface.
        :param base_shipping_tax_refunded: The base_shipping_tax_refunded of this SalesDataOrderInterface.
        :param base_subtotal: The base_subtotal of this SalesDataOrderInterface.
        :param base_subtotal_canceled: The base_subtotal_canceled of this SalesDataOrderInterface.
        :param base_subtotal_incl_tax: The base_subtotal_incl_tax of this SalesDataOrderInterface.
        :param base_subtotal_invoiced: The base_subtotal_invoiced of this SalesDataOrderInterface.
        :param base_subtotal_refunded: The base_subtotal_refunded of this SalesDataOrderInterface.
        :param base_tax_amount: The base_tax_amount of this SalesDataOrderInterface.
        :param base_tax_canceled: The base_tax_canceled of this SalesDataOrderInterface.
        :param base_tax_invoiced: The base_tax_invoiced of this SalesDataOrderInterface.
        :param base_tax_refunded: The base_tax_refunded of this SalesDataOrderInterface.
        :param base_to_global_rate: The base_to_global_rate of this SalesDataOrderInterface.
        :param base_to_order_rate: The base_to_order_rate of this SalesDataOrderInterface.
        :param base_total_canceled: The base_total_canceled of this SalesDataOrderInterface.
        :param base_total_due: The base_total_due of this SalesDataOrderInterface.
        :param base_total_invoiced: The base_total_invoiced of this SalesDataOrderInterface.
        :param base_total_invoiced_cost: The base_total_invoiced_cost of this SalesDataOrderInterface.
        :param base_total_offline_refunded: The base_total_offline_refunded of this SalesDataOrderInterface.
        :param base_total_online_refunded: The base_total_online_refunded of this SalesDataOrderInterface.
        :param base_total_paid: The base_total_paid of this SalesDataOrderInterface.
        :param base_total_qty_ordered: The base_total_qty_ordered of this SalesDataOrderInterface.
        :param base_total_refunded: The base_total_refunded of this SalesDataOrderInterface.
        :param billing_address: The billing_address of this SalesDataOrderInterface.
        :param billing_address_id: The billing_address_id of this SalesDataOrderInterface.
        :param can_ship_partially: The can_ship_partially of this SalesDataOrderInterface.
        :param can_ship_partially_item: The can_ship_partially_item of this SalesDataOrderInterface.
        :param coupon_code: The coupon_code of this SalesDataOrderInterface.
        :param created_at: The created_at of this SalesDataOrderInterface.
        :param customer_dob: The customer_dob of this SalesDataOrderInterface.
        :param customer_email: The customer_email of this SalesDataOrderInterface.
        :param customer_firstname: The customer_firstname of this SalesDataOrderInterface.
        :param customer_gender: The customer_gender of this SalesDataOrderInterface.
        :param customer_group_id: The customer_group_id of this SalesDataOrderInterface.
        :param customer_id: The customer_id of this SalesDataOrderInterface.
        :param customer_is_guest: The customer_is_guest of this SalesDataOrderInterface.
        :param customer_lastname: The customer_lastname of this SalesDataOrderInterface.
        :param customer_middlename: The customer_middlename of this SalesDataOrderInterface.
        :param customer_note: The customer_note of this SalesDataOrderInterface.
        :param customer_note_notify: The customer_note_notify of this SalesDataOrderInterface.
        :param customer_prefix: The customer_prefix of this SalesDataOrderInterface.
        :param customer_suffix: The customer_suffix of this SalesDataOrderInterface.
        :param customer_taxvat: The customer_taxvat of this SalesDataOrderInterface.
        :param discount_amount: The discount_amount of this SalesDataOrderInterface.
        :param discount_canceled: The discount_canceled of this SalesDataOrderInterface.
        :param discount_description: The discount_description of this SalesDataOrderInterface.
        :param discount_invoiced: The discount_invoiced of this SalesDataOrderInterface.
        :param discount_refunded: The discount_refunded of this SalesDataOrderInterface.
        :param discount_tax_compensation_amount: The discount_tax_compensation_amount of this SalesDataOrderInterface.
        :param discount_tax_compensation_invoiced: The discount_tax_compensation_invoiced of this SalesDataOrderInterface.
        :param discount_tax_compensation_refunded: The discount_tax_compensation_refunded of this SalesDataOrderInterface.
        :param edit_increment: The edit_increment of this SalesDataOrderInterface.
        :param email_sent: The email_sent of this SalesDataOrderInterface.
        :param entity_id: The entity_id of this SalesDataOrderInterface.
        :param ext_customer_id: The ext_customer_id of this SalesDataOrderInterface.
        :param ext_order_id: The ext_order_id of this SalesDataOrderInterface.
        :param extension_attributes: The extension_attributes of this SalesDataOrderInterface.
        :param forced_shipment_with_invoice: The forced_shipment_with_invoice of this SalesDataOrderInterface.
        :param global_currency_code: The global_currency_code of this SalesDataOrderInterface.
        :param grand_total: The grand_total of this SalesDataOrderInterface.
        :param hold_before_state: The hold_before_state of this SalesDataOrderInterface.
        :param hold_before_status: The hold_before_status of this SalesDataOrderInterface.
        :param increment_id: The increment_id of this SalesDataOrderInterface.
        :param is_virtual: The is_virtual of this SalesDataOrderInterface.
        :param items: The items of this SalesDataOrderInterface.
        :param order_currency_code: The order_currency_code of this SalesDataOrderInterface.
        :param original_increment_id: The original_increment_id of this SalesDataOrderInterface.
        :param payment: The payment of this SalesDataOrderInterface.
        :param payment_auth_expiration: The payment_auth_expiration of this SalesDataOrderInterface.
        :param payment_authorization_amount: The payment_authorization_amount of this SalesDataOrderInterface.
        :param protect_code: The protect_code of this SalesDataOrderInterface.
        :param quote_address_id: The quote_address_id of this SalesDataOrderInterface.
        :param quote_id: The quote_id of this SalesDataOrderInterface.
        :param relation_child_id: The relation_child_id of this SalesDataOrderInterface.
        :param relation_child_real_id: The relation_child_real_id of this SalesDataOrderInterface.
        :param relation_parent_id: The relation_parent_id of this SalesDataOrderInterface.
        :param relation_parent_real_id: The relation_parent_real_id of this SalesDataOrderInterface.
        :param remote_ip: The remote_ip of this SalesDataOrderInterface.
        :param shipping_amount: The shipping_amount of this SalesDataOrderInterface.
        :param shipping_canceled: The shipping_canceled of this SalesDataOrderInterface.
        :param shipping_description: The shipping_description of this SalesDataOrderInterface.
        :param shipping_discount_amount: The shipping_discount_amount of this SalesDataOrderInterface.
        :param shipping_discount_tax_compensation_amount: The shipping_discount_tax_compensation_amount of this SalesDataOrderInterface.
        :param shipping_incl_tax: The shipping_incl_tax of this SalesDataOrderInterface.
        :param shipping_invoiced: The shipping_invoiced of this SalesDataOrderInterface.
        :param shipping_refunded: The shipping_refunded of this SalesDataOrderInterface.
        :param shipping_tax_amount: The shipping_tax_amount of this SalesDataOrderInterface.
        :param shipping_tax_refunded: The shipping_tax_refunded of this SalesDataOrderInterface.
        :param state: The state of this SalesDataOrderInterface.
        :param status: The status of this SalesDataOrderInterface.
        :param status_histories: The status_histories of this SalesDataOrderInterface.
        :param store_currency_code: The store_currency_code of this SalesDataOrderInterface.
        :param store_id: The store_id of this SalesDataOrderInterface.
        :param store_name: The store_name of this SalesDataOrderInterface.
        :param store_to_base_rate: The store_to_base_rate of this SalesDataOrderInterface.
        :param store_to_order_rate: The store_to_order_rate of this SalesDataOrderInterface.
        :param subtotal: The subtotal of this SalesDataOrderInterface.
        :param subtotal_canceled: The subtotal_canceled of this SalesDataOrderInterface.
        :param subtotal_incl_tax: The subtotal_incl_tax of this SalesDataOrderInterface.
        :param subtotal_invoiced: The subtotal_invoiced of this SalesDataOrderInterface.
        :param subtotal_refunded: The subtotal_refunded of this SalesDataOrderInterface.
        :param tax_amount: The tax_amount of this SalesDataOrderInterface.
        :param tax_canceled: The tax_canceled of this SalesDataOrderInterface.
        :param tax_invoiced: The tax_invoiced of this SalesDataOrderInterface.
        :param tax_refunded: The tax_refunded of this SalesDataOrderInterface.
        :param total_canceled: The total_canceled of this SalesDataOrderInterface.
        :param total_due: The total_due of this SalesDataOrderInterface.
        :param total_invoiced: The total_invoiced of this SalesDataOrderInterface.
        :param total_item_count: The total_item_count of this SalesDataOrderInterface.
        :param total_offline_refunded: The total_offline_refunded of this SalesDataOrderInterface.
        :param total_online_refunded: The total_online_refunded of this SalesDataOrderInterface.
        :param total_paid: The total_paid of this SalesDataOrderInterface.
        :param total_qty_ordered: The total_qty_ordered of this SalesDataOrderInterface.
        :param total_refunded: The total_refunded of this SalesDataOrderInterface.
        :param updated_at: The updated_at of this SalesDataOrderInterface.
        :param weight: The weight of this SalesDataOrderInterface.
        :param x_forwarded_for: The x_forwarded_for of this SalesDataOrderInterface.
        """
        self.openapi_types = {
            'adjustment_negative': float,
            'adjustment_positive': float,
            'applied_rule_ids': str,
            'base_adjustment_negative': float,
            'base_adjustment_positive': float,
            'base_currency_code': str,
            'base_discount_amount': float,
            'base_discount_canceled': float,
            'base_discount_invoiced': float,
            'base_discount_refunded': float,
            'base_discount_tax_compensation_amount': float,
            'base_discount_tax_compensation_invoiced': float,
            'base_discount_tax_compensation_refunded': float,
            'base_grand_total': float,
            'base_shipping_amount': float,
            'base_shipping_canceled': float,
            'base_shipping_discount_amount': float,
            'base_shipping_discount_tax_compensation_amnt': float,
            'base_shipping_incl_tax': float,
            'base_shipping_invoiced': float,
            'base_shipping_refunded': float,
            'base_shipping_tax_amount': float,
            'base_shipping_tax_refunded': float,
            'base_subtotal': float,
            'base_subtotal_canceled': float,
            'base_subtotal_incl_tax': float,
            'base_subtotal_invoiced': float,
            'base_subtotal_refunded': float,
            'base_tax_amount': float,
            'base_tax_canceled': float,
            'base_tax_invoiced': float,
            'base_tax_refunded': float,
            'base_to_global_rate': float,
            'base_to_order_rate': float,
            'base_total_canceled': float,
            'base_total_due': float,
            'base_total_invoiced': float,
            'base_total_invoiced_cost': float,
            'base_total_offline_refunded': float,
            'base_total_online_refunded': float,
            'base_total_paid': float,
            'base_total_qty_ordered': float,
            'base_total_refunded': float,
            'billing_address': SalesDataOrderAddressInterface,
            'billing_address_id': int,
            'can_ship_partially': int,
            'can_ship_partially_item': int,
            'coupon_code': str,
            'created_at': str,
            'customer_dob': str,
            'customer_email': str,
            'customer_firstname': str,
            'customer_gender': int,
            'customer_group_id': int,
            'customer_id': int,
            'customer_is_guest': int,
            'customer_lastname': str,
            'customer_middlename': str,
            'customer_note': str,
            'customer_note_notify': int,
            'customer_prefix': str,
            'customer_suffix': str,
            'customer_taxvat': str,
            'discount_amount': float,
            'discount_canceled': float,
            'discount_description': str,
            'discount_invoiced': float,
            'discount_refunded': float,
            'discount_tax_compensation_amount': float,
            'discount_tax_compensation_invoiced': float,
            'discount_tax_compensation_refunded': float,
            'edit_increment': int,
            'email_sent': int,
            'entity_id': int,
            'ext_customer_id': str,
            'ext_order_id': str,
            'extension_attributes': SalesDataOrderExtensionInterface,
            'forced_shipment_with_invoice': int,
            'global_currency_code': str,
            'grand_total': float,
            'hold_before_state': str,
            'hold_before_status': str,
            'increment_id': str,
            'is_virtual': int,
            'items': List[SalesDataOrderItemInterface],
            'order_currency_code': str,
            'original_increment_id': str,
            'payment': SalesDataOrderPaymentInterface,
            'payment_auth_expiration': int,
            'payment_authorization_amount': float,
            'protect_code': str,
            'quote_address_id': int,
            'quote_id': int,
            'relation_child_id': str,
            'relation_child_real_id': str,
            'relation_parent_id': str,
            'relation_parent_real_id': str,
            'remote_ip': str,
            'shipping_amount': float,
            'shipping_canceled': float,
            'shipping_description': str,
            'shipping_discount_amount': float,
            'shipping_discount_tax_compensation_amount': float,
            'shipping_incl_tax': float,
            'shipping_invoiced': float,
            'shipping_refunded': float,
            'shipping_tax_amount': float,
            'shipping_tax_refunded': float,
            'state': str,
            'status': str,
            'status_histories': List[SalesDataOrderStatusHistoryInterface],
            'store_currency_code': str,
            'store_id': int,
            'store_name': str,
            'store_to_base_rate': float,
            'store_to_order_rate': float,
            'subtotal': float,
            'subtotal_canceled': float,
            'subtotal_incl_tax': float,
            'subtotal_invoiced': float,
            'subtotal_refunded': float,
            'tax_amount': float,
            'tax_canceled': float,
            'tax_invoiced': float,
            'tax_refunded': float,
            'total_canceled': float,
            'total_due': float,
            'total_invoiced': float,
            'total_item_count': int,
            'total_offline_refunded': float,
            'total_online_refunded': float,
            'total_paid': float,
            'total_qty_ordered': float,
            'total_refunded': float,
            'updated_at': str,
            'weight': float,
            'x_forwarded_for': str
        }

        self.attribute_map = {
            'adjustment_negative': 'adjustment_negative',
            'adjustment_positive': 'adjustment_positive',
            'applied_rule_ids': 'applied_rule_ids',
            'base_adjustment_negative': 'base_adjustment_negative',
            'base_adjustment_positive': 'base_adjustment_positive',
            'base_currency_code': 'base_currency_code',
            'base_discount_amount': 'base_discount_amount',
            'base_discount_canceled': 'base_discount_canceled',
            'base_discount_invoiced': 'base_discount_invoiced',
            'base_discount_refunded': 'base_discount_refunded',
            'base_discount_tax_compensation_amount': 'base_discount_tax_compensation_amount',
            'base_discount_tax_compensation_invoiced': 'base_discount_tax_compensation_invoiced',
            'base_discount_tax_compensation_refunded': 'base_discount_tax_compensation_refunded',
            'base_grand_total': 'base_grand_total',
            'base_shipping_amount': 'base_shipping_amount',
            'base_shipping_canceled': 'base_shipping_canceled',
            'base_shipping_discount_amount': 'base_shipping_discount_amount',
            'base_shipping_discount_tax_compensation_amnt': 'base_shipping_discount_tax_compensation_amnt',
            'base_shipping_incl_tax': 'base_shipping_incl_tax',
            'base_shipping_invoiced': 'base_shipping_invoiced',
            'base_shipping_refunded': 'base_shipping_refunded',
            'base_shipping_tax_amount': 'base_shipping_tax_amount',
            'base_shipping_tax_refunded': 'base_shipping_tax_refunded',
            'base_subtotal': 'base_subtotal',
            'base_subtotal_canceled': 'base_subtotal_canceled',
            'base_subtotal_incl_tax': 'base_subtotal_incl_tax',
            'base_subtotal_invoiced': 'base_subtotal_invoiced',
            'base_subtotal_refunded': 'base_subtotal_refunded',
            'base_tax_amount': 'base_tax_amount',
            'base_tax_canceled': 'base_tax_canceled',
            'base_tax_invoiced': 'base_tax_invoiced',
            'base_tax_refunded': 'base_tax_refunded',
            'base_to_global_rate': 'base_to_global_rate',
            'base_to_order_rate': 'base_to_order_rate',
            'base_total_canceled': 'base_total_canceled',
            'base_total_due': 'base_total_due',
            'base_total_invoiced': 'base_total_invoiced',
            'base_total_invoiced_cost': 'base_total_invoiced_cost',
            'base_total_offline_refunded': 'base_total_offline_refunded',
            'base_total_online_refunded': 'base_total_online_refunded',
            'base_total_paid': 'base_total_paid',
            'base_total_qty_ordered': 'base_total_qty_ordered',
            'base_total_refunded': 'base_total_refunded',
            'billing_address': 'billing_address',
            'billing_address_id': 'billing_address_id',
            'can_ship_partially': 'can_ship_partially',
            'can_ship_partially_item': 'can_ship_partially_item',
            'coupon_code': 'coupon_code',
            'created_at': 'created_at',
            'customer_dob': 'customer_dob',
            'customer_email': 'customer_email',
            'customer_firstname': 'customer_firstname',
            'customer_gender': 'customer_gender',
            'customer_group_id': 'customer_group_id',
            'customer_id': 'customer_id',
            'customer_is_guest': 'customer_is_guest',
            'customer_lastname': 'customer_lastname',
            'customer_middlename': 'customer_middlename',
            'customer_note': 'customer_note',
            'customer_note_notify': 'customer_note_notify',
            'customer_prefix': 'customer_prefix',
            'customer_suffix': 'customer_suffix',
            'customer_taxvat': 'customer_taxvat',
            'discount_amount': 'discount_amount',
            'discount_canceled': 'discount_canceled',
            'discount_description': 'discount_description',
            'discount_invoiced': 'discount_invoiced',
            'discount_refunded': 'discount_refunded',
            'discount_tax_compensation_amount': 'discount_tax_compensation_amount',
            'discount_tax_compensation_invoiced': 'discount_tax_compensation_invoiced',
            'discount_tax_compensation_refunded': 'discount_tax_compensation_refunded',
            'edit_increment': 'edit_increment',
            'email_sent': 'email_sent',
            'entity_id': 'entity_id',
            'ext_customer_id': 'ext_customer_id',
            'ext_order_id': 'ext_order_id',
            'extension_attributes': 'extension_attributes',
            'forced_shipment_with_invoice': 'forced_shipment_with_invoice',
            'global_currency_code': 'global_currency_code',
            'grand_total': 'grand_total',
            'hold_before_state': 'hold_before_state',
            'hold_before_status': 'hold_before_status',
            'increment_id': 'increment_id',
            'is_virtual': 'is_virtual',
            'items': 'items',
            'order_currency_code': 'order_currency_code',
            'original_increment_id': 'original_increment_id',
            'payment': 'payment',
            'payment_auth_expiration': 'payment_auth_expiration',
            'payment_authorization_amount': 'payment_authorization_amount',
            'protect_code': 'protect_code',
            'quote_address_id': 'quote_address_id',
            'quote_id': 'quote_id',
            'relation_child_id': 'relation_child_id',
            'relation_child_real_id': 'relation_child_real_id',
            'relation_parent_id': 'relation_parent_id',
            'relation_parent_real_id': 'relation_parent_real_id',
            'remote_ip': 'remote_ip',
            'shipping_amount': 'shipping_amount',
            'shipping_canceled': 'shipping_canceled',
            'shipping_description': 'shipping_description',
            'shipping_discount_amount': 'shipping_discount_amount',
            'shipping_discount_tax_compensation_amount': 'shipping_discount_tax_compensation_amount',
            'shipping_incl_tax': 'shipping_incl_tax',
            'shipping_invoiced': 'shipping_invoiced',
            'shipping_refunded': 'shipping_refunded',
            'shipping_tax_amount': 'shipping_tax_amount',
            'shipping_tax_refunded': 'shipping_tax_refunded',
            'state': 'state',
            'status': 'status',
            'status_histories': 'status_histories',
            'store_currency_code': 'store_currency_code',
            'store_id': 'store_id',
            'store_name': 'store_name',
            'store_to_base_rate': 'store_to_base_rate',
            'store_to_order_rate': 'store_to_order_rate',
            'subtotal': 'subtotal',
            'subtotal_canceled': 'subtotal_canceled',
            'subtotal_incl_tax': 'subtotal_incl_tax',
            'subtotal_invoiced': 'subtotal_invoiced',
            'subtotal_refunded': 'subtotal_refunded',
            'tax_amount': 'tax_amount',
            'tax_canceled': 'tax_canceled',
            'tax_invoiced': 'tax_invoiced',
            'tax_refunded': 'tax_refunded',
            'total_canceled': 'total_canceled',
            'total_due': 'total_due',
            'total_invoiced': 'total_invoiced',
            'total_item_count': 'total_item_count',
            'total_offline_refunded': 'total_offline_refunded',
            'total_online_refunded': 'total_online_refunded',
            'total_paid': 'total_paid',
            'total_qty_ordered': 'total_qty_ordered',
            'total_refunded': 'total_refunded',
            'updated_at': 'updated_at',
            'weight': 'weight',
            'x_forwarded_for': 'x_forwarded_for'
        }

        self._adjustment_negative = adjustment_negative
        self._adjustment_positive = adjustment_positive
        self._applied_rule_ids = applied_rule_ids
        self._base_adjustment_negative = base_adjustment_negative
        self._base_adjustment_positive = base_adjustment_positive
        self._base_currency_code = base_currency_code
        self._base_discount_amount = base_discount_amount
        self._base_discount_canceled = base_discount_canceled
        self._base_discount_invoiced = base_discount_invoiced
        self._base_discount_refunded = base_discount_refunded
        self._base_discount_tax_compensation_amount = base_discount_tax_compensation_amount
        self._base_discount_tax_compensation_invoiced = base_discount_tax_compensation_invoiced
        self._base_discount_tax_compensation_refunded = base_discount_tax_compensation_refunded
        self._base_grand_total = base_grand_total
        self._base_shipping_amount = base_shipping_amount
        self._base_shipping_canceled = base_shipping_canceled
        self._base_shipping_discount_amount = base_shipping_discount_amount
        self._base_shipping_discount_tax_compensation_amnt = base_shipping_discount_tax_compensation_amnt
        self._base_shipping_incl_tax = base_shipping_incl_tax
        self._base_shipping_invoiced = base_shipping_invoiced
        self._base_shipping_refunded = base_shipping_refunded
        self._base_shipping_tax_amount = base_shipping_tax_amount
        self._base_shipping_tax_refunded = base_shipping_tax_refunded
        self._base_subtotal = base_subtotal
        self._base_subtotal_canceled = base_subtotal_canceled
        self._base_subtotal_incl_tax = base_subtotal_incl_tax
        self._base_subtotal_invoiced = base_subtotal_invoiced
        self._base_subtotal_refunded = base_subtotal_refunded
        self._base_tax_amount = base_tax_amount
        self._base_tax_canceled = base_tax_canceled
        self._base_tax_invoiced = base_tax_invoiced
        self._base_tax_refunded = base_tax_refunded
        self._base_to_global_rate = base_to_global_rate
        self._base_to_order_rate = base_to_order_rate
        self._base_total_canceled = base_total_canceled
        self._base_total_due = base_total_due
        self._base_total_invoiced = base_total_invoiced
        self._base_total_invoiced_cost = base_total_invoiced_cost
        self._base_total_offline_refunded = base_total_offline_refunded
        self._base_total_online_refunded = base_total_online_refunded
        self._base_total_paid = base_total_paid
        self._base_total_qty_ordered = base_total_qty_ordered
        self._base_total_refunded = base_total_refunded
        self._billing_address = billing_address
        self._billing_address_id = billing_address_id
        self._can_ship_partially = can_ship_partially
        self._can_ship_partially_item = can_ship_partially_item
        self._coupon_code = coupon_code
        self._created_at = created_at
        self._customer_dob = customer_dob
        self._customer_email = customer_email
        self._customer_firstname = customer_firstname
        self._customer_gender = customer_gender
        self._customer_group_id = customer_group_id
        self._customer_id = customer_id
        self._customer_is_guest = customer_is_guest
        self._customer_lastname = customer_lastname
        self._customer_middlename = customer_middlename
        self._customer_note = customer_note
        self._customer_note_notify = customer_note_notify
        self._customer_prefix = customer_prefix
        self._customer_suffix = customer_suffix
        self._customer_taxvat = customer_taxvat
        self._discount_amount = discount_amount
        self._discount_canceled = discount_canceled
        self._discount_description = discount_description
        self._discount_invoiced = discount_invoiced
        self._discount_refunded = discount_refunded
        self._discount_tax_compensation_amount = discount_tax_compensation_amount
        self._discount_tax_compensation_invoiced = discount_tax_compensation_invoiced
        self._discount_tax_compensation_refunded = discount_tax_compensation_refunded
        self._edit_increment = edit_increment
        self._email_sent = email_sent
        self._entity_id = entity_id
        self._ext_customer_id = ext_customer_id
        self._ext_order_id = ext_order_id
        self._extension_attributes = extension_attributes
        self._forced_shipment_with_invoice = forced_shipment_with_invoice
        self._global_currency_code = global_currency_code
        self._grand_total = grand_total
        self._hold_before_state = hold_before_state
        self._hold_before_status = hold_before_status
        self._increment_id = increment_id
        self._is_virtual = is_virtual
        self._items = items
        self._order_currency_code = order_currency_code
        self._original_increment_id = original_increment_id
        self._payment = payment
        self._payment_auth_expiration = payment_auth_expiration
        self._payment_authorization_amount = payment_authorization_amount
        self._protect_code = protect_code
        self._quote_address_id = quote_address_id
        self._quote_id = quote_id
        self._relation_child_id = relation_child_id
        self._relation_child_real_id = relation_child_real_id
        self._relation_parent_id = relation_parent_id
        self._relation_parent_real_id = relation_parent_real_id
        self._remote_ip = remote_ip
        self._shipping_amount = shipping_amount
        self._shipping_canceled = shipping_canceled
        self._shipping_description = shipping_description
        self._shipping_discount_amount = shipping_discount_amount
        self._shipping_discount_tax_compensation_amount = shipping_discount_tax_compensation_amount
        self._shipping_incl_tax = shipping_incl_tax
        self._shipping_invoiced = shipping_invoiced
        self._shipping_refunded = shipping_refunded
        self._shipping_tax_amount = shipping_tax_amount
        self._shipping_tax_refunded = shipping_tax_refunded
        self._state = state
        self._status = status
        self._status_histories = status_histories
        self._store_currency_code = store_currency_code
        self._store_id = store_id
        self._store_name = store_name
        self._store_to_base_rate = store_to_base_rate
        self._store_to_order_rate = store_to_order_rate
        self._subtotal = subtotal
        self._subtotal_canceled = subtotal_canceled
        self._subtotal_incl_tax = subtotal_incl_tax
        self._subtotal_invoiced = subtotal_invoiced
        self._subtotal_refunded = subtotal_refunded
        self._tax_amount = tax_amount
        self._tax_canceled = tax_canceled
        self._tax_invoiced = tax_invoiced
        self._tax_refunded = tax_refunded
        self._total_canceled = total_canceled
        self._total_due = total_due
        self._total_invoiced = total_invoiced
        self._total_item_count = total_item_count
        self._total_offline_refunded = total_offline_refunded
        self._total_online_refunded = total_online_refunded
        self._total_paid = total_paid
        self._total_qty_ordered = total_qty_ordered
        self._total_refunded = total_refunded
        self._updated_at = updated_at
        self._weight = weight
        self._x_forwarded_for = x_forwarded_for

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesDataOrderInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sales-data-order-interface of this SalesDataOrderInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment_negative(self):
        """Gets the adjustment_negative of this SalesDataOrderInterface.

        Negative adjustment value.

        :return: The adjustment_negative of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._adjustment_negative

    @adjustment_negative.setter
    def adjustment_negative(self, adjustment_negative):
        """Sets the adjustment_negative of this SalesDataOrderInterface.

        Negative adjustment value.

        :param adjustment_negative: The adjustment_negative of this SalesDataOrderInterface.
        :type adjustment_negative: float
        """

        self._adjustment_negative = adjustment_negative

    @property
    def adjustment_positive(self):
        """Gets the adjustment_positive of this SalesDataOrderInterface.

        Positive adjustment value.

        :return: The adjustment_positive of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._adjustment_positive

    @adjustment_positive.setter
    def adjustment_positive(self, adjustment_positive):
        """Sets the adjustment_positive of this SalesDataOrderInterface.

        Positive adjustment value.

        :param adjustment_positive: The adjustment_positive of this SalesDataOrderInterface.
        :type adjustment_positive: float
        """

        self._adjustment_positive = adjustment_positive

    @property
    def applied_rule_ids(self):
        """Gets the applied_rule_ids of this SalesDataOrderInterface.

        Applied rule IDs.

        :return: The applied_rule_ids of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._applied_rule_ids

    @applied_rule_ids.setter
    def applied_rule_ids(self, applied_rule_ids):
        """Sets the applied_rule_ids of this SalesDataOrderInterface.

        Applied rule IDs.

        :param applied_rule_ids: The applied_rule_ids of this SalesDataOrderInterface.
        :type applied_rule_ids: str
        """

        self._applied_rule_ids = applied_rule_ids

    @property
    def base_adjustment_negative(self):
        """Gets the base_adjustment_negative of this SalesDataOrderInterface.

        Base negative adjustment value.

        :return: The base_adjustment_negative of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_adjustment_negative

    @base_adjustment_negative.setter
    def base_adjustment_negative(self, base_adjustment_negative):
        """Sets the base_adjustment_negative of this SalesDataOrderInterface.

        Base negative adjustment value.

        :param base_adjustment_negative: The base_adjustment_negative of this SalesDataOrderInterface.
        :type base_adjustment_negative: float
        """

        self._base_adjustment_negative = base_adjustment_negative

    @property
    def base_adjustment_positive(self):
        """Gets the base_adjustment_positive of this SalesDataOrderInterface.

        Base positive adjustment value.

        :return: The base_adjustment_positive of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_adjustment_positive

    @base_adjustment_positive.setter
    def base_adjustment_positive(self, base_adjustment_positive):
        """Sets the base_adjustment_positive of this SalesDataOrderInterface.

        Base positive adjustment value.

        :param base_adjustment_positive: The base_adjustment_positive of this SalesDataOrderInterface.
        :type base_adjustment_positive: float
        """

        self._base_adjustment_positive = base_adjustment_positive

    @property
    def base_currency_code(self):
        """Gets the base_currency_code of this SalesDataOrderInterface.

        Base currency code.

        :return: The base_currency_code of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._base_currency_code

    @base_currency_code.setter
    def base_currency_code(self, base_currency_code):
        """Sets the base_currency_code of this SalesDataOrderInterface.

        Base currency code.

        :param base_currency_code: The base_currency_code of this SalesDataOrderInterface.
        :type base_currency_code: str
        """

        self._base_currency_code = base_currency_code

    @property
    def base_discount_amount(self):
        """Gets the base_discount_amount of this SalesDataOrderInterface.

        Base discount amount.

        :return: The base_discount_amount of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_discount_amount

    @base_discount_amount.setter
    def base_discount_amount(self, base_discount_amount):
        """Sets the base_discount_amount of this SalesDataOrderInterface.

        Base discount amount.

        :param base_discount_amount: The base_discount_amount of this SalesDataOrderInterface.
        :type base_discount_amount: float
        """

        self._base_discount_amount = base_discount_amount

    @property
    def base_discount_canceled(self):
        """Gets the base_discount_canceled of this SalesDataOrderInterface.

        Base discount canceled.

        :return: The base_discount_canceled of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_discount_canceled

    @base_discount_canceled.setter
    def base_discount_canceled(self, base_discount_canceled):
        """Sets the base_discount_canceled of this SalesDataOrderInterface.

        Base discount canceled.

        :param base_discount_canceled: The base_discount_canceled of this SalesDataOrderInterface.
        :type base_discount_canceled: float
        """

        self._base_discount_canceled = base_discount_canceled

    @property
    def base_discount_invoiced(self):
        """Gets the base_discount_invoiced of this SalesDataOrderInterface.

        Base discount invoiced.

        :return: The base_discount_invoiced of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_discount_invoiced

    @base_discount_invoiced.setter
    def base_discount_invoiced(self, base_discount_invoiced):
        """Sets the base_discount_invoiced of this SalesDataOrderInterface.

        Base discount invoiced.

        :param base_discount_invoiced: The base_discount_invoiced of this SalesDataOrderInterface.
        :type base_discount_invoiced: float
        """

        self._base_discount_invoiced = base_discount_invoiced

    @property
    def base_discount_refunded(self):
        """Gets the base_discount_refunded of this SalesDataOrderInterface.

        Base discount refunded.

        :return: The base_discount_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_discount_refunded

    @base_discount_refunded.setter
    def base_discount_refunded(self, base_discount_refunded):
        """Sets the base_discount_refunded of this SalesDataOrderInterface.

        Base discount refunded.

        :param base_discount_refunded: The base_discount_refunded of this SalesDataOrderInterface.
        :type base_discount_refunded: float
        """

        self._base_discount_refunded = base_discount_refunded

    @property
    def base_discount_tax_compensation_amount(self):
        """Gets the base_discount_tax_compensation_amount of this SalesDataOrderInterface.

        Base discount tax compensation amount.

        :return: The base_discount_tax_compensation_amount of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_discount_tax_compensation_amount

    @base_discount_tax_compensation_amount.setter
    def base_discount_tax_compensation_amount(self, base_discount_tax_compensation_amount):
        """Sets the base_discount_tax_compensation_amount of this SalesDataOrderInterface.

        Base discount tax compensation amount.

        :param base_discount_tax_compensation_amount: The base_discount_tax_compensation_amount of this SalesDataOrderInterface.
        :type base_discount_tax_compensation_amount: float
        """

        self._base_discount_tax_compensation_amount = base_discount_tax_compensation_amount

    @property
    def base_discount_tax_compensation_invoiced(self):
        """Gets the base_discount_tax_compensation_invoiced of this SalesDataOrderInterface.

        Base discount tax compensation invoiced.

        :return: The base_discount_tax_compensation_invoiced of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_discount_tax_compensation_invoiced

    @base_discount_tax_compensation_invoiced.setter
    def base_discount_tax_compensation_invoiced(self, base_discount_tax_compensation_invoiced):
        """Sets the base_discount_tax_compensation_invoiced of this SalesDataOrderInterface.

        Base discount tax compensation invoiced.

        :param base_discount_tax_compensation_invoiced: The base_discount_tax_compensation_invoiced of this SalesDataOrderInterface.
        :type base_discount_tax_compensation_invoiced: float
        """

        self._base_discount_tax_compensation_invoiced = base_discount_tax_compensation_invoiced

    @property
    def base_discount_tax_compensation_refunded(self):
        """Gets the base_discount_tax_compensation_refunded of this SalesDataOrderInterface.

        Base discount tax compensation refunded.

        :return: The base_discount_tax_compensation_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_discount_tax_compensation_refunded

    @base_discount_tax_compensation_refunded.setter
    def base_discount_tax_compensation_refunded(self, base_discount_tax_compensation_refunded):
        """Sets the base_discount_tax_compensation_refunded of this SalesDataOrderInterface.

        Base discount tax compensation refunded.

        :param base_discount_tax_compensation_refunded: The base_discount_tax_compensation_refunded of this SalesDataOrderInterface.
        :type base_discount_tax_compensation_refunded: float
        """

        self._base_discount_tax_compensation_refunded = base_discount_tax_compensation_refunded

    @property
    def base_grand_total(self):
        """Gets the base_grand_total of this SalesDataOrderInterface.

        Base grand total.

        :return: The base_grand_total of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_grand_total

    @base_grand_total.setter
    def base_grand_total(self, base_grand_total):
        """Sets the base_grand_total of this SalesDataOrderInterface.

        Base grand total.

        :param base_grand_total: The base_grand_total of this SalesDataOrderInterface.
        :type base_grand_total: float
        """
        if base_grand_total is None:
            raise ValueError("Invalid value for `base_grand_total`, must not be `None`")

        self._base_grand_total = base_grand_total

    @property
    def base_shipping_amount(self):
        """Gets the base_shipping_amount of this SalesDataOrderInterface.

        Base shipping amount.

        :return: The base_shipping_amount of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_shipping_amount

    @base_shipping_amount.setter
    def base_shipping_amount(self, base_shipping_amount):
        """Sets the base_shipping_amount of this SalesDataOrderInterface.

        Base shipping amount.

        :param base_shipping_amount: The base_shipping_amount of this SalesDataOrderInterface.
        :type base_shipping_amount: float
        """

        self._base_shipping_amount = base_shipping_amount

    @property
    def base_shipping_canceled(self):
        """Gets the base_shipping_canceled of this SalesDataOrderInterface.

        Base shipping canceled.

        :return: The base_shipping_canceled of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_shipping_canceled

    @base_shipping_canceled.setter
    def base_shipping_canceled(self, base_shipping_canceled):
        """Sets the base_shipping_canceled of this SalesDataOrderInterface.

        Base shipping canceled.

        :param base_shipping_canceled: The base_shipping_canceled of this SalesDataOrderInterface.
        :type base_shipping_canceled: float
        """

        self._base_shipping_canceled = base_shipping_canceled

    @property
    def base_shipping_discount_amount(self):
        """Gets the base_shipping_discount_amount of this SalesDataOrderInterface.

        Base shipping discount amount.

        :return: The base_shipping_discount_amount of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_shipping_discount_amount

    @base_shipping_discount_amount.setter
    def base_shipping_discount_amount(self, base_shipping_discount_amount):
        """Sets the base_shipping_discount_amount of this SalesDataOrderInterface.

        Base shipping discount amount.

        :param base_shipping_discount_amount: The base_shipping_discount_amount of this SalesDataOrderInterface.
        :type base_shipping_discount_amount: float
        """

        self._base_shipping_discount_amount = base_shipping_discount_amount

    @property
    def base_shipping_discount_tax_compensation_amnt(self):
        """Gets the base_shipping_discount_tax_compensation_amnt of this SalesDataOrderInterface.

        Base shipping discount tax compensation amount.

        :return: The base_shipping_discount_tax_compensation_amnt of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_shipping_discount_tax_compensation_amnt

    @base_shipping_discount_tax_compensation_amnt.setter
    def base_shipping_discount_tax_compensation_amnt(self, base_shipping_discount_tax_compensation_amnt):
        """Sets the base_shipping_discount_tax_compensation_amnt of this SalesDataOrderInterface.

        Base shipping discount tax compensation amount.

        :param base_shipping_discount_tax_compensation_amnt: The base_shipping_discount_tax_compensation_amnt of this SalesDataOrderInterface.
        :type base_shipping_discount_tax_compensation_amnt: float
        """

        self._base_shipping_discount_tax_compensation_amnt = base_shipping_discount_tax_compensation_amnt

    @property
    def base_shipping_incl_tax(self):
        """Gets the base_shipping_incl_tax of this SalesDataOrderInterface.

        Base shipping including tax.

        :return: The base_shipping_incl_tax of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_shipping_incl_tax

    @base_shipping_incl_tax.setter
    def base_shipping_incl_tax(self, base_shipping_incl_tax):
        """Sets the base_shipping_incl_tax of this SalesDataOrderInterface.

        Base shipping including tax.

        :param base_shipping_incl_tax: The base_shipping_incl_tax of this SalesDataOrderInterface.
        :type base_shipping_incl_tax: float
        """

        self._base_shipping_incl_tax = base_shipping_incl_tax

    @property
    def base_shipping_invoiced(self):
        """Gets the base_shipping_invoiced of this SalesDataOrderInterface.

        Base shipping invoiced.

        :return: The base_shipping_invoiced of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_shipping_invoiced

    @base_shipping_invoiced.setter
    def base_shipping_invoiced(self, base_shipping_invoiced):
        """Sets the base_shipping_invoiced of this SalesDataOrderInterface.

        Base shipping invoiced.

        :param base_shipping_invoiced: The base_shipping_invoiced of this SalesDataOrderInterface.
        :type base_shipping_invoiced: float
        """

        self._base_shipping_invoiced = base_shipping_invoiced

    @property
    def base_shipping_refunded(self):
        """Gets the base_shipping_refunded of this SalesDataOrderInterface.

        Base shipping refunded.

        :return: The base_shipping_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_shipping_refunded

    @base_shipping_refunded.setter
    def base_shipping_refunded(self, base_shipping_refunded):
        """Sets the base_shipping_refunded of this SalesDataOrderInterface.

        Base shipping refunded.

        :param base_shipping_refunded: The base_shipping_refunded of this SalesDataOrderInterface.
        :type base_shipping_refunded: float
        """

        self._base_shipping_refunded = base_shipping_refunded

    @property
    def base_shipping_tax_amount(self):
        """Gets the base_shipping_tax_amount of this SalesDataOrderInterface.

        Base shipping tax amount.

        :return: The base_shipping_tax_amount of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_shipping_tax_amount

    @base_shipping_tax_amount.setter
    def base_shipping_tax_amount(self, base_shipping_tax_amount):
        """Sets the base_shipping_tax_amount of this SalesDataOrderInterface.

        Base shipping tax amount.

        :param base_shipping_tax_amount: The base_shipping_tax_amount of this SalesDataOrderInterface.
        :type base_shipping_tax_amount: float
        """

        self._base_shipping_tax_amount = base_shipping_tax_amount

    @property
    def base_shipping_tax_refunded(self):
        """Gets the base_shipping_tax_refunded of this SalesDataOrderInterface.

        Base shipping tax refunded.

        :return: The base_shipping_tax_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_shipping_tax_refunded

    @base_shipping_tax_refunded.setter
    def base_shipping_tax_refunded(self, base_shipping_tax_refunded):
        """Sets the base_shipping_tax_refunded of this SalesDataOrderInterface.

        Base shipping tax refunded.

        :param base_shipping_tax_refunded: The base_shipping_tax_refunded of this SalesDataOrderInterface.
        :type base_shipping_tax_refunded: float
        """

        self._base_shipping_tax_refunded = base_shipping_tax_refunded

    @property
    def base_subtotal(self):
        """Gets the base_subtotal of this SalesDataOrderInterface.

        Base subtotal.

        :return: The base_subtotal of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_subtotal

    @base_subtotal.setter
    def base_subtotal(self, base_subtotal):
        """Sets the base_subtotal of this SalesDataOrderInterface.

        Base subtotal.

        :param base_subtotal: The base_subtotal of this SalesDataOrderInterface.
        :type base_subtotal: float
        """

        self._base_subtotal = base_subtotal

    @property
    def base_subtotal_canceled(self):
        """Gets the base_subtotal_canceled of this SalesDataOrderInterface.

        Base subtotal canceled.

        :return: The base_subtotal_canceled of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_subtotal_canceled

    @base_subtotal_canceled.setter
    def base_subtotal_canceled(self, base_subtotal_canceled):
        """Sets the base_subtotal_canceled of this SalesDataOrderInterface.

        Base subtotal canceled.

        :param base_subtotal_canceled: The base_subtotal_canceled of this SalesDataOrderInterface.
        :type base_subtotal_canceled: float
        """

        self._base_subtotal_canceled = base_subtotal_canceled

    @property
    def base_subtotal_incl_tax(self):
        """Gets the base_subtotal_incl_tax of this SalesDataOrderInterface.

        Base subtotal including tax.

        :return: The base_subtotal_incl_tax of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_subtotal_incl_tax

    @base_subtotal_incl_tax.setter
    def base_subtotal_incl_tax(self, base_subtotal_incl_tax):
        """Sets the base_subtotal_incl_tax of this SalesDataOrderInterface.

        Base subtotal including tax.

        :param base_subtotal_incl_tax: The base_subtotal_incl_tax of this SalesDataOrderInterface.
        :type base_subtotal_incl_tax: float
        """

        self._base_subtotal_incl_tax = base_subtotal_incl_tax

    @property
    def base_subtotal_invoiced(self):
        """Gets the base_subtotal_invoiced of this SalesDataOrderInterface.

        Base subtotal invoiced.

        :return: The base_subtotal_invoiced of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_subtotal_invoiced

    @base_subtotal_invoiced.setter
    def base_subtotal_invoiced(self, base_subtotal_invoiced):
        """Sets the base_subtotal_invoiced of this SalesDataOrderInterface.

        Base subtotal invoiced.

        :param base_subtotal_invoiced: The base_subtotal_invoiced of this SalesDataOrderInterface.
        :type base_subtotal_invoiced: float
        """

        self._base_subtotal_invoiced = base_subtotal_invoiced

    @property
    def base_subtotal_refunded(self):
        """Gets the base_subtotal_refunded of this SalesDataOrderInterface.

        Base subtotal refunded.

        :return: The base_subtotal_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_subtotal_refunded

    @base_subtotal_refunded.setter
    def base_subtotal_refunded(self, base_subtotal_refunded):
        """Sets the base_subtotal_refunded of this SalesDataOrderInterface.

        Base subtotal refunded.

        :param base_subtotal_refunded: The base_subtotal_refunded of this SalesDataOrderInterface.
        :type base_subtotal_refunded: float
        """

        self._base_subtotal_refunded = base_subtotal_refunded

    @property
    def base_tax_amount(self):
        """Gets the base_tax_amount of this SalesDataOrderInterface.

        Base tax amount.

        :return: The base_tax_amount of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_tax_amount

    @base_tax_amount.setter
    def base_tax_amount(self, base_tax_amount):
        """Sets the base_tax_amount of this SalesDataOrderInterface.

        Base tax amount.

        :param base_tax_amount: The base_tax_amount of this SalesDataOrderInterface.
        :type base_tax_amount: float
        """

        self._base_tax_amount = base_tax_amount

    @property
    def base_tax_canceled(self):
        """Gets the base_tax_canceled of this SalesDataOrderInterface.

        Base tax canceled.

        :return: The base_tax_canceled of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_tax_canceled

    @base_tax_canceled.setter
    def base_tax_canceled(self, base_tax_canceled):
        """Sets the base_tax_canceled of this SalesDataOrderInterface.

        Base tax canceled.

        :param base_tax_canceled: The base_tax_canceled of this SalesDataOrderInterface.
        :type base_tax_canceled: float
        """

        self._base_tax_canceled = base_tax_canceled

    @property
    def base_tax_invoiced(self):
        """Gets the base_tax_invoiced of this SalesDataOrderInterface.

        Base tax invoiced.

        :return: The base_tax_invoiced of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_tax_invoiced

    @base_tax_invoiced.setter
    def base_tax_invoiced(self, base_tax_invoiced):
        """Sets the base_tax_invoiced of this SalesDataOrderInterface.

        Base tax invoiced.

        :param base_tax_invoiced: The base_tax_invoiced of this SalesDataOrderInterface.
        :type base_tax_invoiced: float
        """

        self._base_tax_invoiced = base_tax_invoiced

    @property
    def base_tax_refunded(self):
        """Gets the base_tax_refunded of this SalesDataOrderInterface.

        Base tax refunded.

        :return: The base_tax_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_tax_refunded

    @base_tax_refunded.setter
    def base_tax_refunded(self, base_tax_refunded):
        """Sets the base_tax_refunded of this SalesDataOrderInterface.

        Base tax refunded.

        :param base_tax_refunded: The base_tax_refunded of this SalesDataOrderInterface.
        :type base_tax_refunded: float
        """

        self._base_tax_refunded = base_tax_refunded

    @property
    def base_to_global_rate(self):
        """Gets the base_to_global_rate of this SalesDataOrderInterface.

        Base-to-global rate.

        :return: The base_to_global_rate of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_to_global_rate

    @base_to_global_rate.setter
    def base_to_global_rate(self, base_to_global_rate):
        """Sets the base_to_global_rate of this SalesDataOrderInterface.

        Base-to-global rate.

        :param base_to_global_rate: The base_to_global_rate of this SalesDataOrderInterface.
        :type base_to_global_rate: float
        """

        self._base_to_global_rate = base_to_global_rate

    @property
    def base_to_order_rate(self):
        """Gets the base_to_order_rate of this SalesDataOrderInterface.

        Base-to-order rate.

        :return: The base_to_order_rate of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_to_order_rate

    @base_to_order_rate.setter
    def base_to_order_rate(self, base_to_order_rate):
        """Sets the base_to_order_rate of this SalesDataOrderInterface.

        Base-to-order rate.

        :param base_to_order_rate: The base_to_order_rate of this SalesDataOrderInterface.
        :type base_to_order_rate: float
        """

        self._base_to_order_rate = base_to_order_rate

    @property
    def base_total_canceled(self):
        """Gets the base_total_canceled of this SalesDataOrderInterface.

        Base total canceled.

        :return: The base_total_canceled of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_total_canceled

    @base_total_canceled.setter
    def base_total_canceled(self, base_total_canceled):
        """Sets the base_total_canceled of this SalesDataOrderInterface.

        Base total canceled.

        :param base_total_canceled: The base_total_canceled of this SalesDataOrderInterface.
        :type base_total_canceled: float
        """

        self._base_total_canceled = base_total_canceled

    @property
    def base_total_due(self):
        """Gets the base_total_due of this SalesDataOrderInterface.

        Base total due.

        :return: The base_total_due of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_total_due

    @base_total_due.setter
    def base_total_due(self, base_total_due):
        """Sets the base_total_due of this SalesDataOrderInterface.

        Base total due.

        :param base_total_due: The base_total_due of this SalesDataOrderInterface.
        :type base_total_due: float
        """

        self._base_total_due = base_total_due

    @property
    def base_total_invoiced(self):
        """Gets the base_total_invoiced of this SalesDataOrderInterface.

        Base total invoiced.

        :return: The base_total_invoiced of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_total_invoiced

    @base_total_invoiced.setter
    def base_total_invoiced(self, base_total_invoiced):
        """Sets the base_total_invoiced of this SalesDataOrderInterface.

        Base total invoiced.

        :param base_total_invoiced: The base_total_invoiced of this SalesDataOrderInterface.
        :type base_total_invoiced: float
        """

        self._base_total_invoiced = base_total_invoiced

    @property
    def base_total_invoiced_cost(self):
        """Gets the base_total_invoiced_cost of this SalesDataOrderInterface.

        Base total invoiced cost.

        :return: The base_total_invoiced_cost of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_total_invoiced_cost

    @base_total_invoiced_cost.setter
    def base_total_invoiced_cost(self, base_total_invoiced_cost):
        """Sets the base_total_invoiced_cost of this SalesDataOrderInterface.

        Base total invoiced cost.

        :param base_total_invoiced_cost: The base_total_invoiced_cost of this SalesDataOrderInterface.
        :type base_total_invoiced_cost: float
        """

        self._base_total_invoiced_cost = base_total_invoiced_cost

    @property
    def base_total_offline_refunded(self):
        """Gets the base_total_offline_refunded of this SalesDataOrderInterface.

        Base total offline refunded.

        :return: The base_total_offline_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_total_offline_refunded

    @base_total_offline_refunded.setter
    def base_total_offline_refunded(self, base_total_offline_refunded):
        """Sets the base_total_offline_refunded of this SalesDataOrderInterface.

        Base total offline refunded.

        :param base_total_offline_refunded: The base_total_offline_refunded of this SalesDataOrderInterface.
        :type base_total_offline_refunded: float
        """

        self._base_total_offline_refunded = base_total_offline_refunded

    @property
    def base_total_online_refunded(self):
        """Gets the base_total_online_refunded of this SalesDataOrderInterface.

        Base total online refunded.

        :return: The base_total_online_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_total_online_refunded

    @base_total_online_refunded.setter
    def base_total_online_refunded(self, base_total_online_refunded):
        """Sets the base_total_online_refunded of this SalesDataOrderInterface.

        Base total online refunded.

        :param base_total_online_refunded: The base_total_online_refunded of this SalesDataOrderInterface.
        :type base_total_online_refunded: float
        """

        self._base_total_online_refunded = base_total_online_refunded

    @property
    def base_total_paid(self):
        """Gets the base_total_paid of this SalesDataOrderInterface.

        Base total paid.

        :return: The base_total_paid of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_total_paid

    @base_total_paid.setter
    def base_total_paid(self, base_total_paid):
        """Sets the base_total_paid of this SalesDataOrderInterface.

        Base total paid.

        :param base_total_paid: The base_total_paid of this SalesDataOrderInterface.
        :type base_total_paid: float
        """

        self._base_total_paid = base_total_paid

    @property
    def base_total_qty_ordered(self):
        """Gets the base_total_qty_ordered of this SalesDataOrderInterface.

        Base total quantity ordered.

        :return: The base_total_qty_ordered of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_total_qty_ordered

    @base_total_qty_ordered.setter
    def base_total_qty_ordered(self, base_total_qty_ordered):
        """Sets the base_total_qty_ordered of this SalesDataOrderInterface.

        Base total quantity ordered.

        :param base_total_qty_ordered: The base_total_qty_ordered of this SalesDataOrderInterface.
        :type base_total_qty_ordered: float
        """

        self._base_total_qty_ordered = base_total_qty_ordered

    @property
    def base_total_refunded(self):
        """Gets the base_total_refunded of this SalesDataOrderInterface.

        Base total refunded.

        :return: The base_total_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._base_total_refunded

    @base_total_refunded.setter
    def base_total_refunded(self, base_total_refunded):
        """Sets the base_total_refunded of this SalesDataOrderInterface.

        Base total refunded.

        :param base_total_refunded: The base_total_refunded of this SalesDataOrderInterface.
        :type base_total_refunded: float
        """

        self._base_total_refunded = base_total_refunded

    @property
    def billing_address(self):
        """Gets the billing_address of this SalesDataOrderInterface.


        :return: The billing_address of this SalesDataOrderInterface.
        :rtype: SalesDataOrderAddressInterface
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this SalesDataOrderInterface.


        :param billing_address: The billing_address of this SalesDataOrderInterface.
        :type billing_address: SalesDataOrderAddressInterface
        """

        self._billing_address = billing_address

    @property
    def billing_address_id(self):
        """Gets the billing_address_id of this SalesDataOrderInterface.

        Billing address ID.

        :return: The billing_address_id of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._billing_address_id

    @billing_address_id.setter
    def billing_address_id(self, billing_address_id):
        """Sets the billing_address_id of this SalesDataOrderInterface.

        Billing address ID.

        :param billing_address_id: The billing_address_id of this SalesDataOrderInterface.
        :type billing_address_id: int
        """

        self._billing_address_id = billing_address_id

    @property
    def can_ship_partially(self):
        """Gets the can_ship_partially of this SalesDataOrderInterface.

        Can-ship-partially flag value.

        :return: The can_ship_partially of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._can_ship_partially

    @can_ship_partially.setter
    def can_ship_partially(self, can_ship_partially):
        """Sets the can_ship_partially of this SalesDataOrderInterface.

        Can-ship-partially flag value.

        :param can_ship_partially: The can_ship_partially of this SalesDataOrderInterface.
        :type can_ship_partially: int
        """

        self._can_ship_partially = can_ship_partially

    @property
    def can_ship_partially_item(self):
        """Gets the can_ship_partially_item of this SalesDataOrderInterface.

        Can-ship-partially-item flag value.

        :return: The can_ship_partially_item of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._can_ship_partially_item

    @can_ship_partially_item.setter
    def can_ship_partially_item(self, can_ship_partially_item):
        """Sets the can_ship_partially_item of this SalesDataOrderInterface.

        Can-ship-partially-item flag value.

        :param can_ship_partially_item: The can_ship_partially_item of this SalesDataOrderInterface.
        :type can_ship_partially_item: int
        """

        self._can_ship_partially_item = can_ship_partially_item

    @property
    def coupon_code(self):
        """Gets the coupon_code of this SalesDataOrderInterface.

        Coupon code.

        :return: The coupon_code of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """Sets the coupon_code of this SalesDataOrderInterface.

        Coupon code.

        :param coupon_code: The coupon_code of this SalesDataOrderInterface.
        :type coupon_code: str
        """

        self._coupon_code = coupon_code

    @property
    def created_at(self):
        """Gets the created_at of this SalesDataOrderInterface.

        Created-at timestamp.

        :return: The created_at of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SalesDataOrderInterface.

        Created-at timestamp.

        :param created_at: The created_at of this SalesDataOrderInterface.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def customer_dob(self):
        """Gets the customer_dob of this SalesDataOrderInterface.

        Customer date-of-birth (DOB).

        :return: The customer_dob of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._customer_dob

    @customer_dob.setter
    def customer_dob(self, customer_dob):
        """Sets the customer_dob of this SalesDataOrderInterface.

        Customer date-of-birth (DOB).

        :param customer_dob: The customer_dob of this SalesDataOrderInterface.
        :type customer_dob: str
        """

        self._customer_dob = customer_dob

    @property
    def customer_email(self):
        """Gets the customer_email of this SalesDataOrderInterface.

        Customer email address.

        :return: The customer_email of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this SalesDataOrderInterface.

        Customer email address.

        :param customer_email: The customer_email of this SalesDataOrderInterface.
        :type customer_email: str
        """
        if customer_email is None:
            raise ValueError("Invalid value for `customer_email`, must not be `None`")

        self._customer_email = customer_email

    @property
    def customer_firstname(self):
        """Gets the customer_firstname of this SalesDataOrderInterface.

        Customer first name.

        :return: The customer_firstname of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._customer_firstname

    @customer_firstname.setter
    def customer_firstname(self, customer_firstname):
        """Sets the customer_firstname of this SalesDataOrderInterface.

        Customer first name.

        :param customer_firstname: The customer_firstname of this SalesDataOrderInterface.
        :type customer_firstname: str
        """

        self._customer_firstname = customer_firstname

    @property
    def customer_gender(self):
        """Gets the customer_gender of this SalesDataOrderInterface.

        Customer gender.

        :return: The customer_gender of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._customer_gender

    @customer_gender.setter
    def customer_gender(self, customer_gender):
        """Sets the customer_gender of this SalesDataOrderInterface.

        Customer gender.

        :param customer_gender: The customer_gender of this SalesDataOrderInterface.
        :type customer_gender: int
        """

        self._customer_gender = customer_gender

    @property
    def customer_group_id(self):
        """Gets the customer_group_id of this SalesDataOrderInterface.

        Customer group ID.

        :return: The customer_group_id of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._customer_group_id

    @customer_group_id.setter
    def customer_group_id(self, customer_group_id):
        """Sets the customer_group_id of this SalesDataOrderInterface.

        Customer group ID.

        :param customer_group_id: The customer_group_id of this SalesDataOrderInterface.
        :type customer_group_id: int
        """

        self._customer_group_id = customer_group_id

    @property
    def customer_id(self):
        """Gets the customer_id of this SalesDataOrderInterface.

        Customer ID.

        :return: The customer_id of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SalesDataOrderInterface.

        Customer ID.

        :param customer_id: The customer_id of this SalesDataOrderInterface.
        :type customer_id: int
        """

        self._customer_id = customer_id

    @property
    def customer_is_guest(self):
        """Gets the customer_is_guest of this SalesDataOrderInterface.

        Customer-is-guest flag value.

        :return: The customer_is_guest of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._customer_is_guest

    @customer_is_guest.setter
    def customer_is_guest(self, customer_is_guest):
        """Sets the customer_is_guest of this SalesDataOrderInterface.

        Customer-is-guest flag value.

        :param customer_is_guest: The customer_is_guest of this SalesDataOrderInterface.
        :type customer_is_guest: int
        """

        self._customer_is_guest = customer_is_guest

    @property
    def customer_lastname(self):
        """Gets the customer_lastname of this SalesDataOrderInterface.

        Customer last name.

        :return: The customer_lastname of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._customer_lastname

    @customer_lastname.setter
    def customer_lastname(self, customer_lastname):
        """Sets the customer_lastname of this SalesDataOrderInterface.

        Customer last name.

        :param customer_lastname: The customer_lastname of this SalesDataOrderInterface.
        :type customer_lastname: str
        """

        self._customer_lastname = customer_lastname

    @property
    def customer_middlename(self):
        """Gets the customer_middlename of this SalesDataOrderInterface.

        Customer middle name.

        :return: The customer_middlename of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._customer_middlename

    @customer_middlename.setter
    def customer_middlename(self, customer_middlename):
        """Sets the customer_middlename of this SalesDataOrderInterface.

        Customer middle name.

        :param customer_middlename: The customer_middlename of this SalesDataOrderInterface.
        :type customer_middlename: str
        """

        self._customer_middlename = customer_middlename

    @property
    def customer_note(self):
        """Gets the customer_note of this SalesDataOrderInterface.

        Customer note.

        :return: The customer_note of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._customer_note

    @customer_note.setter
    def customer_note(self, customer_note):
        """Sets the customer_note of this SalesDataOrderInterface.

        Customer note.

        :param customer_note: The customer_note of this SalesDataOrderInterface.
        :type customer_note: str
        """

        self._customer_note = customer_note

    @property
    def customer_note_notify(self):
        """Gets the customer_note_notify of this SalesDataOrderInterface.

        Customer-note-notify flag value.

        :return: The customer_note_notify of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._customer_note_notify

    @customer_note_notify.setter
    def customer_note_notify(self, customer_note_notify):
        """Sets the customer_note_notify of this SalesDataOrderInterface.

        Customer-note-notify flag value.

        :param customer_note_notify: The customer_note_notify of this SalesDataOrderInterface.
        :type customer_note_notify: int
        """

        self._customer_note_notify = customer_note_notify

    @property
    def customer_prefix(self):
        """Gets the customer_prefix of this SalesDataOrderInterface.

        Customer prefix.

        :return: The customer_prefix of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._customer_prefix

    @customer_prefix.setter
    def customer_prefix(self, customer_prefix):
        """Sets the customer_prefix of this SalesDataOrderInterface.

        Customer prefix.

        :param customer_prefix: The customer_prefix of this SalesDataOrderInterface.
        :type customer_prefix: str
        """

        self._customer_prefix = customer_prefix

    @property
    def customer_suffix(self):
        """Gets the customer_suffix of this SalesDataOrderInterface.

        Customer suffix.

        :return: The customer_suffix of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._customer_suffix

    @customer_suffix.setter
    def customer_suffix(self, customer_suffix):
        """Sets the customer_suffix of this SalesDataOrderInterface.

        Customer suffix.

        :param customer_suffix: The customer_suffix of this SalesDataOrderInterface.
        :type customer_suffix: str
        """

        self._customer_suffix = customer_suffix

    @property
    def customer_taxvat(self):
        """Gets the customer_taxvat of this SalesDataOrderInterface.

        Customer value-added tax (VAT).

        :return: The customer_taxvat of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._customer_taxvat

    @customer_taxvat.setter
    def customer_taxvat(self, customer_taxvat):
        """Sets the customer_taxvat of this SalesDataOrderInterface.

        Customer value-added tax (VAT).

        :param customer_taxvat: The customer_taxvat of this SalesDataOrderInterface.
        :type customer_taxvat: str
        """

        self._customer_taxvat = customer_taxvat

    @property
    def discount_amount(self):
        """Gets the discount_amount of this SalesDataOrderInterface.

        Discount amount.

        :return: The discount_amount of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this SalesDataOrderInterface.

        Discount amount.

        :param discount_amount: The discount_amount of this SalesDataOrderInterface.
        :type discount_amount: float
        """

        self._discount_amount = discount_amount

    @property
    def discount_canceled(self):
        """Gets the discount_canceled of this SalesDataOrderInterface.

        Discount canceled.

        :return: The discount_canceled of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._discount_canceled

    @discount_canceled.setter
    def discount_canceled(self, discount_canceled):
        """Sets the discount_canceled of this SalesDataOrderInterface.

        Discount canceled.

        :param discount_canceled: The discount_canceled of this SalesDataOrderInterface.
        :type discount_canceled: float
        """

        self._discount_canceled = discount_canceled

    @property
    def discount_description(self):
        """Gets the discount_description of this SalesDataOrderInterface.

        Discount description.

        :return: The discount_description of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._discount_description

    @discount_description.setter
    def discount_description(self, discount_description):
        """Sets the discount_description of this SalesDataOrderInterface.

        Discount description.

        :param discount_description: The discount_description of this SalesDataOrderInterface.
        :type discount_description: str
        """

        self._discount_description = discount_description

    @property
    def discount_invoiced(self):
        """Gets the discount_invoiced of this SalesDataOrderInterface.

        Discount invoiced.

        :return: The discount_invoiced of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._discount_invoiced

    @discount_invoiced.setter
    def discount_invoiced(self, discount_invoiced):
        """Sets the discount_invoiced of this SalesDataOrderInterface.

        Discount invoiced.

        :param discount_invoiced: The discount_invoiced of this SalesDataOrderInterface.
        :type discount_invoiced: float
        """

        self._discount_invoiced = discount_invoiced

    @property
    def discount_refunded(self):
        """Gets the discount_refunded of this SalesDataOrderInterface.

        Discount refunded amount.

        :return: The discount_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._discount_refunded

    @discount_refunded.setter
    def discount_refunded(self, discount_refunded):
        """Sets the discount_refunded of this SalesDataOrderInterface.

        Discount refunded amount.

        :param discount_refunded: The discount_refunded of this SalesDataOrderInterface.
        :type discount_refunded: float
        """

        self._discount_refunded = discount_refunded

    @property
    def discount_tax_compensation_amount(self):
        """Gets the discount_tax_compensation_amount of this SalesDataOrderInterface.

        Discount tax compensation amount.

        :return: The discount_tax_compensation_amount of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._discount_tax_compensation_amount

    @discount_tax_compensation_amount.setter
    def discount_tax_compensation_amount(self, discount_tax_compensation_amount):
        """Sets the discount_tax_compensation_amount of this SalesDataOrderInterface.

        Discount tax compensation amount.

        :param discount_tax_compensation_amount: The discount_tax_compensation_amount of this SalesDataOrderInterface.
        :type discount_tax_compensation_amount: float
        """

        self._discount_tax_compensation_amount = discount_tax_compensation_amount

    @property
    def discount_tax_compensation_invoiced(self):
        """Gets the discount_tax_compensation_invoiced of this SalesDataOrderInterface.

        Discount tax compensation invoiced amount.

        :return: The discount_tax_compensation_invoiced of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._discount_tax_compensation_invoiced

    @discount_tax_compensation_invoiced.setter
    def discount_tax_compensation_invoiced(self, discount_tax_compensation_invoiced):
        """Sets the discount_tax_compensation_invoiced of this SalesDataOrderInterface.

        Discount tax compensation invoiced amount.

        :param discount_tax_compensation_invoiced: The discount_tax_compensation_invoiced of this SalesDataOrderInterface.
        :type discount_tax_compensation_invoiced: float
        """

        self._discount_tax_compensation_invoiced = discount_tax_compensation_invoiced

    @property
    def discount_tax_compensation_refunded(self):
        """Gets the discount_tax_compensation_refunded of this SalesDataOrderInterface.

        Discount tax compensation refunded amount.

        :return: The discount_tax_compensation_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._discount_tax_compensation_refunded

    @discount_tax_compensation_refunded.setter
    def discount_tax_compensation_refunded(self, discount_tax_compensation_refunded):
        """Sets the discount_tax_compensation_refunded of this SalesDataOrderInterface.

        Discount tax compensation refunded amount.

        :param discount_tax_compensation_refunded: The discount_tax_compensation_refunded of this SalesDataOrderInterface.
        :type discount_tax_compensation_refunded: float
        """

        self._discount_tax_compensation_refunded = discount_tax_compensation_refunded

    @property
    def edit_increment(self):
        """Gets the edit_increment of this SalesDataOrderInterface.

        Edit increment value.

        :return: The edit_increment of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._edit_increment

    @edit_increment.setter
    def edit_increment(self, edit_increment):
        """Sets the edit_increment of this SalesDataOrderInterface.

        Edit increment value.

        :param edit_increment: The edit_increment of this SalesDataOrderInterface.
        :type edit_increment: int
        """

        self._edit_increment = edit_increment

    @property
    def email_sent(self):
        """Gets the email_sent of this SalesDataOrderInterface.

        Email-sent flag value.

        :return: The email_sent of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._email_sent

    @email_sent.setter
    def email_sent(self, email_sent):
        """Sets the email_sent of this SalesDataOrderInterface.

        Email-sent flag value.

        :param email_sent: The email_sent of this SalesDataOrderInterface.
        :type email_sent: int
        """

        self._email_sent = email_sent

    @property
    def entity_id(self):
        """Gets the entity_id of this SalesDataOrderInterface.

        Order ID.

        :return: The entity_id of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this SalesDataOrderInterface.

        Order ID.

        :param entity_id: The entity_id of this SalesDataOrderInterface.
        :type entity_id: int
        """

        self._entity_id = entity_id

    @property
    def ext_customer_id(self):
        """Gets the ext_customer_id of this SalesDataOrderInterface.

        External customer ID.

        :return: The ext_customer_id of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._ext_customer_id

    @ext_customer_id.setter
    def ext_customer_id(self, ext_customer_id):
        """Sets the ext_customer_id of this SalesDataOrderInterface.

        External customer ID.

        :param ext_customer_id: The ext_customer_id of this SalesDataOrderInterface.
        :type ext_customer_id: str
        """

        self._ext_customer_id = ext_customer_id

    @property
    def ext_order_id(self):
        """Gets the ext_order_id of this SalesDataOrderInterface.

        External order ID.

        :return: The ext_order_id of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._ext_order_id

    @ext_order_id.setter
    def ext_order_id(self, ext_order_id):
        """Sets the ext_order_id of this SalesDataOrderInterface.

        External order ID.

        :param ext_order_id: The ext_order_id of this SalesDataOrderInterface.
        :type ext_order_id: str
        """

        self._ext_order_id = ext_order_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this SalesDataOrderInterface.


        :return: The extension_attributes of this SalesDataOrderInterface.
        :rtype: SalesDataOrderExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this SalesDataOrderInterface.


        :param extension_attributes: The extension_attributes of this SalesDataOrderInterface.
        :type extension_attributes: SalesDataOrderExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def forced_shipment_with_invoice(self):
        """Gets the forced_shipment_with_invoice of this SalesDataOrderInterface.

        Forced-shipment-with-invoice flag value.

        :return: The forced_shipment_with_invoice of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._forced_shipment_with_invoice

    @forced_shipment_with_invoice.setter
    def forced_shipment_with_invoice(self, forced_shipment_with_invoice):
        """Sets the forced_shipment_with_invoice of this SalesDataOrderInterface.

        Forced-shipment-with-invoice flag value.

        :param forced_shipment_with_invoice: The forced_shipment_with_invoice of this SalesDataOrderInterface.
        :type forced_shipment_with_invoice: int
        """

        self._forced_shipment_with_invoice = forced_shipment_with_invoice

    @property
    def global_currency_code(self):
        """Gets the global_currency_code of this SalesDataOrderInterface.

        Global currency code.

        :return: The global_currency_code of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._global_currency_code

    @global_currency_code.setter
    def global_currency_code(self, global_currency_code):
        """Sets the global_currency_code of this SalesDataOrderInterface.

        Global currency code.

        :param global_currency_code: The global_currency_code of this SalesDataOrderInterface.
        :type global_currency_code: str
        """

        self._global_currency_code = global_currency_code

    @property
    def grand_total(self):
        """Gets the grand_total of this SalesDataOrderInterface.

        Grand total.

        :return: The grand_total of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._grand_total

    @grand_total.setter
    def grand_total(self, grand_total):
        """Sets the grand_total of this SalesDataOrderInterface.

        Grand total.

        :param grand_total: The grand_total of this SalesDataOrderInterface.
        :type grand_total: float
        """
        if grand_total is None:
            raise ValueError("Invalid value for `grand_total`, must not be `None`")

        self._grand_total = grand_total

    @property
    def hold_before_state(self):
        """Gets the hold_before_state of this SalesDataOrderInterface.

        Hold before state.

        :return: The hold_before_state of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._hold_before_state

    @hold_before_state.setter
    def hold_before_state(self, hold_before_state):
        """Sets the hold_before_state of this SalesDataOrderInterface.

        Hold before state.

        :param hold_before_state: The hold_before_state of this SalesDataOrderInterface.
        :type hold_before_state: str
        """

        self._hold_before_state = hold_before_state

    @property
    def hold_before_status(self):
        """Gets the hold_before_status of this SalesDataOrderInterface.

        Hold before status.

        :return: The hold_before_status of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._hold_before_status

    @hold_before_status.setter
    def hold_before_status(self, hold_before_status):
        """Sets the hold_before_status of this SalesDataOrderInterface.

        Hold before status.

        :param hold_before_status: The hold_before_status of this SalesDataOrderInterface.
        :type hold_before_status: str
        """

        self._hold_before_status = hold_before_status

    @property
    def increment_id(self):
        """Gets the increment_id of this SalesDataOrderInterface.

        Increment ID.

        :return: The increment_id of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._increment_id

    @increment_id.setter
    def increment_id(self, increment_id):
        """Sets the increment_id of this SalesDataOrderInterface.

        Increment ID.

        :param increment_id: The increment_id of this SalesDataOrderInterface.
        :type increment_id: str
        """

        self._increment_id = increment_id

    @property
    def is_virtual(self):
        """Gets the is_virtual of this SalesDataOrderInterface.

        Is-virtual flag value.

        :return: The is_virtual of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._is_virtual

    @is_virtual.setter
    def is_virtual(self, is_virtual):
        """Sets the is_virtual of this SalesDataOrderInterface.

        Is-virtual flag value.

        :param is_virtual: The is_virtual of this SalesDataOrderInterface.
        :type is_virtual: int
        """

        self._is_virtual = is_virtual

    @property
    def items(self):
        """Gets the items of this SalesDataOrderInterface.

        Array of items.

        :return: The items of this SalesDataOrderInterface.
        :rtype: List[SalesDataOrderItemInterface]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SalesDataOrderInterface.

        Array of items.

        :param items: The items of this SalesDataOrderInterface.
        :type items: List[SalesDataOrderItemInterface]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def order_currency_code(self):
        """Gets the order_currency_code of this SalesDataOrderInterface.

        Order currency code.

        :return: The order_currency_code of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._order_currency_code

    @order_currency_code.setter
    def order_currency_code(self, order_currency_code):
        """Sets the order_currency_code of this SalesDataOrderInterface.

        Order currency code.

        :param order_currency_code: The order_currency_code of this SalesDataOrderInterface.
        :type order_currency_code: str
        """

        self._order_currency_code = order_currency_code

    @property
    def original_increment_id(self):
        """Gets the original_increment_id of this SalesDataOrderInterface.

        Original increment ID.

        :return: The original_increment_id of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._original_increment_id

    @original_increment_id.setter
    def original_increment_id(self, original_increment_id):
        """Sets the original_increment_id of this SalesDataOrderInterface.

        Original increment ID.

        :param original_increment_id: The original_increment_id of this SalesDataOrderInterface.
        :type original_increment_id: str
        """

        self._original_increment_id = original_increment_id

    @property
    def payment(self):
        """Gets the payment of this SalesDataOrderInterface.


        :return: The payment of this SalesDataOrderInterface.
        :rtype: SalesDataOrderPaymentInterface
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this SalesDataOrderInterface.


        :param payment: The payment of this SalesDataOrderInterface.
        :type payment: SalesDataOrderPaymentInterface
        """

        self._payment = payment

    @property
    def payment_auth_expiration(self):
        """Gets the payment_auth_expiration of this SalesDataOrderInterface.

        Payment authorization expiration date.

        :return: The payment_auth_expiration of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._payment_auth_expiration

    @payment_auth_expiration.setter
    def payment_auth_expiration(self, payment_auth_expiration):
        """Sets the payment_auth_expiration of this SalesDataOrderInterface.

        Payment authorization expiration date.

        :param payment_auth_expiration: The payment_auth_expiration of this SalesDataOrderInterface.
        :type payment_auth_expiration: int
        """

        self._payment_auth_expiration = payment_auth_expiration

    @property
    def payment_authorization_amount(self):
        """Gets the payment_authorization_amount of this SalesDataOrderInterface.

        Payment authorization amount.

        :return: The payment_authorization_amount of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._payment_authorization_amount

    @payment_authorization_amount.setter
    def payment_authorization_amount(self, payment_authorization_amount):
        """Sets the payment_authorization_amount of this SalesDataOrderInterface.

        Payment authorization amount.

        :param payment_authorization_amount: The payment_authorization_amount of this SalesDataOrderInterface.
        :type payment_authorization_amount: float
        """

        self._payment_authorization_amount = payment_authorization_amount

    @property
    def protect_code(self):
        """Gets the protect_code of this SalesDataOrderInterface.

        Protect code.

        :return: The protect_code of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._protect_code

    @protect_code.setter
    def protect_code(self, protect_code):
        """Sets the protect_code of this SalesDataOrderInterface.

        Protect code.

        :param protect_code: The protect_code of this SalesDataOrderInterface.
        :type protect_code: str
        """

        self._protect_code = protect_code

    @property
    def quote_address_id(self):
        """Gets the quote_address_id of this SalesDataOrderInterface.

        Quote address ID.

        :return: The quote_address_id of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._quote_address_id

    @quote_address_id.setter
    def quote_address_id(self, quote_address_id):
        """Sets the quote_address_id of this SalesDataOrderInterface.

        Quote address ID.

        :param quote_address_id: The quote_address_id of this SalesDataOrderInterface.
        :type quote_address_id: int
        """

        self._quote_address_id = quote_address_id

    @property
    def quote_id(self):
        """Gets the quote_id of this SalesDataOrderInterface.

        Quote ID.

        :return: The quote_id of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._quote_id

    @quote_id.setter
    def quote_id(self, quote_id):
        """Sets the quote_id of this SalesDataOrderInterface.

        Quote ID.

        :param quote_id: The quote_id of this SalesDataOrderInterface.
        :type quote_id: int
        """

        self._quote_id = quote_id

    @property
    def relation_child_id(self):
        """Gets the relation_child_id of this SalesDataOrderInterface.

        Relation child ID.

        :return: The relation_child_id of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._relation_child_id

    @relation_child_id.setter
    def relation_child_id(self, relation_child_id):
        """Sets the relation_child_id of this SalesDataOrderInterface.

        Relation child ID.

        :param relation_child_id: The relation_child_id of this SalesDataOrderInterface.
        :type relation_child_id: str
        """

        self._relation_child_id = relation_child_id

    @property
    def relation_child_real_id(self):
        """Gets the relation_child_real_id of this SalesDataOrderInterface.

        Relation child real ID.

        :return: The relation_child_real_id of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._relation_child_real_id

    @relation_child_real_id.setter
    def relation_child_real_id(self, relation_child_real_id):
        """Sets the relation_child_real_id of this SalesDataOrderInterface.

        Relation child real ID.

        :param relation_child_real_id: The relation_child_real_id of this SalesDataOrderInterface.
        :type relation_child_real_id: str
        """

        self._relation_child_real_id = relation_child_real_id

    @property
    def relation_parent_id(self):
        """Gets the relation_parent_id of this SalesDataOrderInterface.

        Relation parent ID.

        :return: The relation_parent_id of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._relation_parent_id

    @relation_parent_id.setter
    def relation_parent_id(self, relation_parent_id):
        """Sets the relation_parent_id of this SalesDataOrderInterface.

        Relation parent ID.

        :param relation_parent_id: The relation_parent_id of this SalesDataOrderInterface.
        :type relation_parent_id: str
        """

        self._relation_parent_id = relation_parent_id

    @property
    def relation_parent_real_id(self):
        """Gets the relation_parent_real_id of this SalesDataOrderInterface.

        Relation parent real ID.

        :return: The relation_parent_real_id of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._relation_parent_real_id

    @relation_parent_real_id.setter
    def relation_parent_real_id(self, relation_parent_real_id):
        """Sets the relation_parent_real_id of this SalesDataOrderInterface.

        Relation parent real ID.

        :param relation_parent_real_id: The relation_parent_real_id of this SalesDataOrderInterface.
        :type relation_parent_real_id: str
        """

        self._relation_parent_real_id = relation_parent_real_id

    @property
    def remote_ip(self):
        """Gets the remote_ip of this SalesDataOrderInterface.

        Remote IP address.

        :return: The remote_ip of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._remote_ip

    @remote_ip.setter
    def remote_ip(self, remote_ip):
        """Sets the remote_ip of this SalesDataOrderInterface.

        Remote IP address.

        :param remote_ip: The remote_ip of this SalesDataOrderInterface.
        :type remote_ip: str
        """

        self._remote_ip = remote_ip

    @property
    def shipping_amount(self):
        """Gets the shipping_amount of this SalesDataOrderInterface.

        Shipping amount.

        :return: The shipping_amount of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._shipping_amount

    @shipping_amount.setter
    def shipping_amount(self, shipping_amount):
        """Sets the shipping_amount of this SalesDataOrderInterface.

        Shipping amount.

        :param shipping_amount: The shipping_amount of this SalesDataOrderInterface.
        :type shipping_amount: float
        """

        self._shipping_amount = shipping_amount

    @property
    def shipping_canceled(self):
        """Gets the shipping_canceled of this SalesDataOrderInterface.

        Shipping canceled amount.

        :return: The shipping_canceled of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._shipping_canceled

    @shipping_canceled.setter
    def shipping_canceled(self, shipping_canceled):
        """Sets the shipping_canceled of this SalesDataOrderInterface.

        Shipping canceled amount.

        :param shipping_canceled: The shipping_canceled of this SalesDataOrderInterface.
        :type shipping_canceled: float
        """

        self._shipping_canceled = shipping_canceled

    @property
    def shipping_description(self):
        """Gets the shipping_description of this SalesDataOrderInterface.

        Shipping description.

        :return: The shipping_description of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._shipping_description

    @shipping_description.setter
    def shipping_description(self, shipping_description):
        """Sets the shipping_description of this SalesDataOrderInterface.

        Shipping description.

        :param shipping_description: The shipping_description of this SalesDataOrderInterface.
        :type shipping_description: str
        """

        self._shipping_description = shipping_description

    @property
    def shipping_discount_amount(self):
        """Gets the shipping_discount_amount of this SalesDataOrderInterface.

        Shipping discount amount.

        :return: The shipping_discount_amount of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._shipping_discount_amount

    @shipping_discount_amount.setter
    def shipping_discount_amount(self, shipping_discount_amount):
        """Sets the shipping_discount_amount of this SalesDataOrderInterface.

        Shipping discount amount.

        :param shipping_discount_amount: The shipping_discount_amount of this SalesDataOrderInterface.
        :type shipping_discount_amount: float
        """

        self._shipping_discount_amount = shipping_discount_amount

    @property
    def shipping_discount_tax_compensation_amount(self):
        """Gets the shipping_discount_tax_compensation_amount of this SalesDataOrderInterface.

        Shipping discount tax compensation amount.

        :return: The shipping_discount_tax_compensation_amount of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._shipping_discount_tax_compensation_amount

    @shipping_discount_tax_compensation_amount.setter
    def shipping_discount_tax_compensation_amount(self, shipping_discount_tax_compensation_amount):
        """Sets the shipping_discount_tax_compensation_amount of this SalesDataOrderInterface.

        Shipping discount tax compensation amount.

        :param shipping_discount_tax_compensation_amount: The shipping_discount_tax_compensation_amount of this SalesDataOrderInterface.
        :type shipping_discount_tax_compensation_amount: float
        """

        self._shipping_discount_tax_compensation_amount = shipping_discount_tax_compensation_amount

    @property
    def shipping_incl_tax(self):
        """Gets the shipping_incl_tax of this SalesDataOrderInterface.

        Shipping including tax amount.

        :return: The shipping_incl_tax of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._shipping_incl_tax

    @shipping_incl_tax.setter
    def shipping_incl_tax(self, shipping_incl_tax):
        """Sets the shipping_incl_tax of this SalesDataOrderInterface.

        Shipping including tax amount.

        :param shipping_incl_tax: The shipping_incl_tax of this SalesDataOrderInterface.
        :type shipping_incl_tax: float
        """

        self._shipping_incl_tax = shipping_incl_tax

    @property
    def shipping_invoiced(self):
        """Gets the shipping_invoiced of this SalesDataOrderInterface.

        Shipping invoiced amount.

        :return: The shipping_invoiced of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._shipping_invoiced

    @shipping_invoiced.setter
    def shipping_invoiced(self, shipping_invoiced):
        """Sets the shipping_invoiced of this SalesDataOrderInterface.

        Shipping invoiced amount.

        :param shipping_invoiced: The shipping_invoiced of this SalesDataOrderInterface.
        :type shipping_invoiced: float
        """

        self._shipping_invoiced = shipping_invoiced

    @property
    def shipping_refunded(self):
        """Gets the shipping_refunded of this SalesDataOrderInterface.

        Shipping refunded amount.

        :return: The shipping_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._shipping_refunded

    @shipping_refunded.setter
    def shipping_refunded(self, shipping_refunded):
        """Sets the shipping_refunded of this SalesDataOrderInterface.

        Shipping refunded amount.

        :param shipping_refunded: The shipping_refunded of this SalesDataOrderInterface.
        :type shipping_refunded: float
        """

        self._shipping_refunded = shipping_refunded

    @property
    def shipping_tax_amount(self):
        """Gets the shipping_tax_amount of this SalesDataOrderInterface.

        Shipping tax amount.

        :return: The shipping_tax_amount of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._shipping_tax_amount

    @shipping_tax_amount.setter
    def shipping_tax_amount(self, shipping_tax_amount):
        """Sets the shipping_tax_amount of this SalesDataOrderInterface.

        Shipping tax amount.

        :param shipping_tax_amount: The shipping_tax_amount of this SalesDataOrderInterface.
        :type shipping_tax_amount: float
        """

        self._shipping_tax_amount = shipping_tax_amount

    @property
    def shipping_tax_refunded(self):
        """Gets the shipping_tax_refunded of this SalesDataOrderInterface.

        Shipping tax refunded amount.

        :return: The shipping_tax_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._shipping_tax_refunded

    @shipping_tax_refunded.setter
    def shipping_tax_refunded(self, shipping_tax_refunded):
        """Sets the shipping_tax_refunded of this SalesDataOrderInterface.

        Shipping tax refunded amount.

        :param shipping_tax_refunded: The shipping_tax_refunded of this SalesDataOrderInterface.
        :type shipping_tax_refunded: float
        """

        self._shipping_tax_refunded = shipping_tax_refunded

    @property
    def state(self):
        """Gets the state of this SalesDataOrderInterface.

        State.

        :return: The state of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SalesDataOrderInterface.

        State.

        :param state: The state of this SalesDataOrderInterface.
        :type state: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this SalesDataOrderInterface.

        Status.

        :return: The status of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SalesDataOrderInterface.

        Status.

        :param status: The status of this SalesDataOrderInterface.
        :type status: str
        """

        self._status = status

    @property
    def status_histories(self):
        """Gets the status_histories of this SalesDataOrderInterface.

        Array of status histories.

        :return: The status_histories of this SalesDataOrderInterface.
        :rtype: List[SalesDataOrderStatusHistoryInterface]
        """
        return self._status_histories

    @status_histories.setter
    def status_histories(self, status_histories):
        """Sets the status_histories of this SalesDataOrderInterface.

        Array of status histories.

        :param status_histories: The status_histories of this SalesDataOrderInterface.
        :type status_histories: List[SalesDataOrderStatusHistoryInterface]
        """

        self._status_histories = status_histories

    @property
    def store_currency_code(self):
        """Gets the store_currency_code of this SalesDataOrderInterface.

        Store currency code.

        :return: The store_currency_code of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._store_currency_code

    @store_currency_code.setter
    def store_currency_code(self, store_currency_code):
        """Sets the store_currency_code of this SalesDataOrderInterface.

        Store currency code.

        :param store_currency_code: The store_currency_code of this SalesDataOrderInterface.
        :type store_currency_code: str
        """

        self._store_currency_code = store_currency_code

    @property
    def store_id(self):
        """Gets the store_id of this SalesDataOrderInterface.

        Store ID.

        :return: The store_id of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this SalesDataOrderInterface.

        Store ID.

        :param store_id: The store_id of this SalesDataOrderInterface.
        :type store_id: int
        """

        self._store_id = store_id

    @property
    def store_name(self):
        """Gets the store_name of this SalesDataOrderInterface.

        Store name.

        :return: The store_name of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name):
        """Sets the store_name of this SalesDataOrderInterface.

        Store name.

        :param store_name: The store_name of this SalesDataOrderInterface.
        :type store_name: str
        """

        self._store_name = store_name

    @property
    def store_to_base_rate(self):
        """Gets the store_to_base_rate of this SalesDataOrderInterface.

        Store-to-base rate.

        :return: The store_to_base_rate of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._store_to_base_rate

    @store_to_base_rate.setter
    def store_to_base_rate(self, store_to_base_rate):
        """Sets the store_to_base_rate of this SalesDataOrderInterface.

        Store-to-base rate.

        :param store_to_base_rate: The store_to_base_rate of this SalesDataOrderInterface.
        :type store_to_base_rate: float
        """

        self._store_to_base_rate = store_to_base_rate

    @property
    def store_to_order_rate(self):
        """Gets the store_to_order_rate of this SalesDataOrderInterface.

        Store-to-order rate.

        :return: The store_to_order_rate of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._store_to_order_rate

    @store_to_order_rate.setter
    def store_to_order_rate(self, store_to_order_rate):
        """Sets the store_to_order_rate of this SalesDataOrderInterface.

        Store-to-order rate.

        :param store_to_order_rate: The store_to_order_rate of this SalesDataOrderInterface.
        :type store_to_order_rate: float
        """

        self._store_to_order_rate = store_to_order_rate

    @property
    def subtotal(self):
        """Gets the subtotal of this SalesDataOrderInterface.

        Subtotal.

        :return: The subtotal of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this SalesDataOrderInterface.

        Subtotal.

        :param subtotal: The subtotal of this SalesDataOrderInterface.
        :type subtotal: float
        """

        self._subtotal = subtotal

    @property
    def subtotal_canceled(self):
        """Gets the subtotal_canceled of this SalesDataOrderInterface.

        Subtotal canceled amount.

        :return: The subtotal_canceled of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._subtotal_canceled

    @subtotal_canceled.setter
    def subtotal_canceled(self, subtotal_canceled):
        """Sets the subtotal_canceled of this SalesDataOrderInterface.

        Subtotal canceled amount.

        :param subtotal_canceled: The subtotal_canceled of this SalesDataOrderInterface.
        :type subtotal_canceled: float
        """

        self._subtotal_canceled = subtotal_canceled

    @property
    def subtotal_incl_tax(self):
        """Gets the subtotal_incl_tax of this SalesDataOrderInterface.

        Subtotal including tax amount.

        :return: The subtotal_incl_tax of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._subtotal_incl_tax

    @subtotal_incl_tax.setter
    def subtotal_incl_tax(self, subtotal_incl_tax):
        """Sets the subtotal_incl_tax of this SalesDataOrderInterface.

        Subtotal including tax amount.

        :param subtotal_incl_tax: The subtotal_incl_tax of this SalesDataOrderInterface.
        :type subtotal_incl_tax: float
        """

        self._subtotal_incl_tax = subtotal_incl_tax

    @property
    def subtotal_invoiced(self):
        """Gets the subtotal_invoiced of this SalesDataOrderInterface.

        Subtotal invoiced amount.

        :return: The subtotal_invoiced of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._subtotal_invoiced

    @subtotal_invoiced.setter
    def subtotal_invoiced(self, subtotal_invoiced):
        """Sets the subtotal_invoiced of this SalesDataOrderInterface.

        Subtotal invoiced amount.

        :param subtotal_invoiced: The subtotal_invoiced of this SalesDataOrderInterface.
        :type subtotal_invoiced: float
        """

        self._subtotal_invoiced = subtotal_invoiced

    @property
    def subtotal_refunded(self):
        """Gets the subtotal_refunded of this SalesDataOrderInterface.

        Subtotal refunded amount.

        :return: The subtotal_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._subtotal_refunded

    @subtotal_refunded.setter
    def subtotal_refunded(self, subtotal_refunded):
        """Sets the subtotal_refunded of this SalesDataOrderInterface.

        Subtotal refunded amount.

        :param subtotal_refunded: The subtotal_refunded of this SalesDataOrderInterface.
        :type subtotal_refunded: float
        """

        self._subtotal_refunded = subtotal_refunded

    @property
    def tax_amount(self):
        """Gets the tax_amount of this SalesDataOrderInterface.

        Tax amount.

        :return: The tax_amount of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this SalesDataOrderInterface.

        Tax amount.

        :param tax_amount: The tax_amount of this SalesDataOrderInterface.
        :type tax_amount: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_canceled(self):
        """Gets the tax_canceled of this SalesDataOrderInterface.

        Tax canceled amount.

        :return: The tax_canceled of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._tax_canceled

    @tax_canceled.setter
    def tax_canceled(self, tax_canceled):
        """Sets the tax_canceled of this SalesDataOrderInterface.

        Tax canceled amount.

        :param tax_canceled: The tax_canceled of this SalesDataOrderInterface.
        :type tax_canceled: float
        """

        self._tax_canceled = tax_canceled

    @property
    def tax_invoiced(self):
        """Gets the tax_invoiced of this SalesDataOrderInterface.

        Tax invoiced amount.

        :return: The tax_invoiced of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._tax_invoiced

    @tax_invoiced.setter
    def tax_invoiced(self, tax_invoiced):
        """Sets the tax_invoiced of this SalesDataOrderInterface.

        Tax invoiced amount.

        :param tax_invoiced: The tax_invoiced of this SalesDataOrderInterface.
        :type tax_invoiced: float
        """

        self._tax_invoiced = tax_invoiced

    @property
    def tax_refunded(self):
        """Gets the tax_refunded of this SalesDataOrderInterface.

        Tax refunded amount.

        :return: The tax_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._tax_refunded

    @tax_refunded.setter
    def tax_refunded(self, tax_refunded):
        """Sets the tax_refunded of this SalesDataOrderInterface.

        Tax refunded amount.

        :param tax_refunded: The tax_refunded of this SalesDataOrderInterface.
        :type tax_refunded: float
        """

        self._tax_refunded = tax_refunded

    @property
    def total_canceled(self):
        """Gets the total_canceled of this SalesDataOrderInterface.

        Total canceled.

        :return: The total_canceled of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._total_canceled

    @total_canceled.setter
    def total_canceled(self, total_canceled):
        """Sets the total_canceled of this SalesDataOrderInterface.

        Total canceled.

        :param total_canceled: The total_canceled of this SalesDataOrderInterface.
        :type total_canceled: float
        """

        self._total_canceled = total_canceled

    @property
    def total_due(self):
        """Gets the total_due of this SalesDataOrderInterface.

        Total due.

        :return: The total_due of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._total_due

    @total_due.setter
    def total_due(self, total_due):
        """Sets the total_due of this SalesDataOrderInterface.

        Total due.

        :param total_due: The total_due of this SalesDataOrderInterface.
        :type total_due: float
        """

        self._total_due = total_due

    @property
    def total_invoiced(self):
        """Gets the total_invoiced of this SalesDataOrderInterface.

        Total invoiced amount.

        :return: The total_invoiced of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._total_invoiced

    @total_invoiced.setter
    def total_invoiced(self, total_invoiced):
        """Sets the total_invoiced of this SalesDataOrderInterface.

        Total invoiced amount.

        :param total_invoiced: The total_invoiced of this SalesDataOrderInterface.
        :type total_invoiced: float
        """

        self._total_invoiced = total_invoiced

    @property
    def total_item_count(self):
        """Gets the total_item_count of this SalesDataOrderInterface.

        Total item count.

        :return: The total_item_count of this SalesDataOrderInterface.
        :rtype: int
        """
        return self._total_item_count

    @total_item_count.setter
    def total_item_count(self, total_item_count):
        """Sets the total_item_count of this SalesDataOrderInterface.

        Total item count.

        :param total_item_count: The total_item_count of this SalesDataOrderInterface.
        :type total_item_count: int
        """

        self._total_item_count = total_item_count

    @property
    def total_offline_refunded(self):
        """Gets the total_offline_refunded of this SalesDataOrderInterface.

        Total offline refunded amount.

        :return: The total_offline_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._total_offline_refunded

    @total_offline_refunded.setter
    def total_offline_refunded(self, total_offline_refunded):
        """Sets the total_offline_refunded of this SalesDataOrderInterface.

        Total offline refunded amount.

        :param total_offline_refunded: The total_offline_refunded of this SalesDataOrderInterface.
        :type total_offline_refunded: float
        """

        self._total_offline_refunded = total_offline_refunded

    @property
    def total_online_refunded(self):
        """Gets the total_online_refunded of this SalesDataOrderInterface.

        Total online refunded amount.

        :return: The total_online_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._total_online_refunded

    @total_online_refunded.setter
    def total_online_refunded(self, total_online_refunded):
        """Sets the total_online_refunded of this SalesDataOrderInterface.

        Total online refunded amount.

        :param total_online_refunded: The total_online_refunded of this SalesDataOrderInterface.
        :type total_online_refunded: float
        """

        self._total_online_refunded = total_online_refunded

    @property
    def total_paid(self):
        """Gets the total_paid of this SalesDataOrderInterface.

        Total paid.

        :return: The total_paid of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._total_paid

    @total_paid.setter
    def total_paid(self, total_paid):
        """Sets the total_paid of this SalesDataOrderInterface.

        Total paid.

        :param total_paid: The total_paid of this SalesDataOrderInterface.
        :type total_paid: float
        """

        self._total_paid = total_paid

    @property
    def total_qty_ordered(self):
        """Gets the total_qty_ordered of this SalesDataOrderInterface.

        Total quantity ordered.

        :return: The total_qty_ordered of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._total_qty_ordered

    @total_qty_ordered.setter
    def total_qty_ordered(self, total_qty_ordered):
        """Sets the total_qty_ordered of this SalesDataOrderInterface.

        Total quantity ordered.

        :param total_qty_ordered: The total_qty_ordered of this SalesDataOrderInterface.
        :type total_qty_ordered: float
        """

        self._total_qty_ordered = total_qty_ordered

    @property
    def total_refunded(self):
        """Gets the total_refunded of this SalesDataOrderInterface.

        Total amount refunded.

        :return: The total_refunded of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._total_refunded

    @total_refunded.setter
    def total_refunded(self, total_refunded):
        """Sets the total_refunded of this SalesDataOrderInterface.

        Total amount refunded.

        :param total_refunded: The total_refunded of this SalesDataOrderInterface.
        :type total_refunded: float
        """

        self._total_refunded = total_refunded

    @property
    def updated_at(self):
        """Gets the updated_at of this SalesDataOrderInterface.

        Updated-at timestamp.

        :return: The updated_at of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SalesDataOrderInterface.

        Updated-at timestamp.

        :param updated_at: The updated_at of this SalesDataOrderInterface.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def weight(self):
        """Gets the weight of this SalesDataOrderInterface.

        Weight.

        :return: The weight of this SalesDataOrderInterface.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SalesDataOrderInterface.

        Weight.

        :param weight: The weight of this SalesDataOrderInterface.
        :type weight: float
        """

        self._weight = weight

    @property
    def x_forwarded_for(self):
        """Gets the x_forwarded_for of this SalesDataOrderInterface.

        X-Forwarded-For field value.

        :return: The x_forwarded_for of this SalesDataOrderInterface.
        :rtype: str
        """
        return self._x_forwarded_for

    @x_forwarded_for.setter
    def x_forwarded_for(self, x_forwarded_for):
        """Sets the x_forwarded_for of this SalesDataOrderInterface.

        X-Forwarded-For field value.

        :param x_forwarded_for: The x_forwarded_for of this SalesDataOrderInterface.
        :type x_forwarded_for: str
        """

        self._x_forwarded_for = x_forwarded_for
