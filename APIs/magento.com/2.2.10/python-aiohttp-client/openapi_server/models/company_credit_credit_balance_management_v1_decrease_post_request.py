# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.company_credit_data_credit_balance_options_interface import CompanyCreditDataCreditBalanceOptionsInterface
from openapi_server import util


class CompanyCreditCreditBalanceManagementV1DecreasePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, currency: str=None, operation_type: int=None, options: CompanyCreditDataCreditBalanceOptionsInterface=None, value: float=None):
        """CompanyCreditCreditBalanceManagementV1DecreasePostRequest - a model defined in OpenAPI

        :param comment: The comment of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        :param currency: The currency of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        :param operation_type: The operation_type of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        :param options: The options of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        :param value: The value of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        """
        self.openapi_types = {
            'comment': str,
            'currency': str,
            'operation_type': int,
            'options': CompanyCreditDataCreditBalanceOptionsInterface,
            'value': float
        }

        self.attribute_map = {
            'comment': 'comment',
            'currency': 'currency',
            'operation_type': 'operationType',
            'options': 'options',
            'value': 'value'
        }

        self._comment = comment
        self._currency = currency
        self._operation_type = operation_type
        self._options = options
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyCreditCreditBalanceManagementV1DecreasePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The companyCreditCreditBalanceManagementV1DecreasePost_request of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.

        [optional]

        :return: The comment of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.

        [optional]

        :param comment: The comment of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        :type comment: str
        """

        self._comment = comment

    @property
    def currency(self):
        """Gets the currency of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.


        :return: The currency of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.


        :param currency: The currency of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def operation_type(self):
        """Gets the operation_type of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.


        :return: The operation_type of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        :rtype: int
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.


        :param operation_type: The operation_type of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        :type operation_type: int
        """
        if operation_type is None:
            raise ValueError("Invalid value for `operation_type`, must not be `None`")

        self._operation_type = operation_type

    @property
    def options(self):
        """Gets the options of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.


        :return: The options of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        :rtype: CompanyCreditDataCreditBalanceOptionsInterface
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.


        :param options: The options of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        :type options: CompanyCreditDataCreditBalanceOptionsInterface
        """

        self._options = options

    @property
    def value(self):
        """Gets the value of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.


        :return: The value of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.


        :param value: The value of this CompanyCreditCreditBalanceManagementV1DecreasePostRequest.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
