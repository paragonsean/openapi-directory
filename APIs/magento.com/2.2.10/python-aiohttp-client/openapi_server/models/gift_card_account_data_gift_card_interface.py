# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GiftCardAccountDataGiftCardInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, base_amount: float=None, code: str=None, id: int=None):
        """GiftCardAccountDataGiftCardInterface - a model defined in OpenAPI

        :param amount: The amount of this GiftCardAccountDataGiftCardInterface.
        :param base_amount: The base_amount of this GiftCardAccountDataGiftCardInterface.
        :param code: The code of this GiftCardAccountDataGiftCardInterface.
        :param id: The id of this GiftCardAccountDataGiftCardInterface.
        """
        self.openapi_types = {
            'amount': float,
            'base_amount': float,
            'code': str,
            'id': int
        }

        self.attribute_map = {
            'amount': 'amount',
            'base_amount': 'base_amount',
            'code': 'code',
            'id': 'id'
        }

        self._amount = amount
        self._base_amount = base_amount
        self._code = code
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GiftCardAccountDataGiftCardInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The gift-card-account-data-gift-card-interface of this GiftCardAccountDataGiftCardInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this GiftCardAccountDataGiftCardInterface.

        Amount

        :return: The amount of this GiftCardAccountDataGiftCardInterface.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GiftCardAccountDataGiftCardInterface.

        Amount

        :param amount: The amount of this GiftCardAccountDataGiftCardInterface.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def base_amount(self):
        """Gets the base_amount of this GiftCardAccountDataGiftCardInterface.

        Base Amount

        :return: The base_amount of this GiftCardAccountDataGiftCardInterface.
        :rtype: float
        """
        return self._base_amount

    @base_amount.setter
    def base_amount(self, base_amount):
        """Sets the base_amount of this GiftCardAccountDataGiftCardInterface.

        Base Amount

        :param base_amount: The base_amount of this GiftCardAccountDataGiftCardInterface.
        :type base_amount: float
        """
        if base_amount is None:
            raise ValueError("Invalid value for `base_amount`, must not be `None`")

        self._base_amount = base_amount

    @property
    def code(self):
        """Gets the code of this GiftCardAccountDataGiftCardInterface.

        Code

        :return: The code of this GiftCardAccountDataGiftCardInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GiftCardAccountDataGiftCardInterface.

        Code

        :param code: The code of this GiftCardAccountDataGiftCardInterface.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def id(self):
        """Gets the id of this GiftCardAccountDataGiftCardInterface.

        Id

        :return: The id of this GiftCardAccountDataGiftCardInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GiftCardAccountDataGiftCardInterface.

        Id

        :param id: The id of this GiftCardAccountDataGiftCardInterface.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
