# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_data_custom_option_extension_interface import CatalogDataCustomOptionExtensionInterface
from openapi_server import util


class CatalogDataCustomOptionInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension_attributes: CatalogDataCustomOptionExtensionInterface=None, option_id: str=None, option_value: str=None):
        """CatalogDataCustomOptionInterface - a model defined in OpenAPI

        :param extension_attributes: The extension_attributes of this CatalogDataCustomOptionInterface.
        :param option_id: The option_id of this CatalogDataCustomOptionInterface.
        :param option_value: The option_value of this CatalogDataCustomOptionInterface.
        """
        self.openapi_types = {
            'extension_attributes': CatalogDataCustomOptionExtensionInterface,
            'option_id': str,
            'option_value': str
        }

        self.attribute_map = {
            'extension_attributes': 'extension_attributes',
            'option_id': 'option_id',
            'option_value': 'option_value'
        }

        self._extension_attributes = extension_attributes
        self._option_id = option_id
        self._option_value = option_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataCustomOptionInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-custom-option-interface of this CatalogDataCustomOptionInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CatalogDataCustomOptionInterface.


        :return: The extension_attributes of this CatalogDataCustomOptionInterface.
        :rtype: CatalogDataCustomOptionExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CatalogDataCustomOptionInterface.


        :param extension_attributes: The extension_attributes of this CatalogDataCustomOptionInterface.
        :type extension_attributes: CatalogDataCustomOptionExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def option_id(self):
        """Gets the option_id of this CatalogDataCustomOptionInterface.

        Option id

        :return: The option_id of this CatalogDataCustomOptionInterface.
        :rtype: str
        """
        return self._option_id

    @option_id.setter
    def option_id(self, option_id):
        """Sets the option_id of this CatalogDataCustomOptionInterface.

        Option id

        :param option_id: The option_id of this CatalogDataCustomOptionInterface.
        :type option_id: str
        """
        if option_id is None:
            raise ValueError("Invalid value for `option_id`, must not be `None`")

        self._option_id = option_id

    @property
    def option_value(self):
        """Gets the option_value of this CatalogDataCustomOptionInterface.

        Option value

        :return: The option_value of this CatalogDataCustomOptionInterface.
        :rtype: str
        """
        return self._option_value

    @option_value.setter
    def option_value(self, option_value):
        """Sets the option_value of this CatalogDataCustomOptionInterface.

        Option value

        :param option_value: The option_value of this CatalogDataCustomOptionInterface.
        :type option_value: str
        """
        if option_value is None:
            raise ValueError("Invalid value for `option_value`, must not be `None`")

        self._option_value = option_value
