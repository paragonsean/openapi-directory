# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_data_customer_interface import CustomerDataCustomerInterface
from openapi_server.models.quote_data_address_interface import QuoteDataAddressInterface
from openapi_server.models.quote_data_cart_extension_interface import QuoteDataCartExtensionInterface
from openapi_server.models.quote_data_cart_item_interface import QuoteDataCartItemInterface
from openapi_server.models.quote_data_currency_interface import QuoteDataCurrencyInterface
from openapi_server import util


class QuoteDataCartInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: QuoteDataAddressInterface=None, converted_at: str=None, created_at: str=None, currency: QuoteDataCurrencyInterface=None, customer: CustomerDataCustomerInterface=None, customer_is_guest: bool=None, customer_note: str=None, customer_note_notify: bool=None, customer_tax_class_id: int=None, extension_attributes: QuoteDataCartExtensionInterface=None, id: int=None, is_active: bool=None, is_virtual: bool=None, items: List[QuoteDataCartItemInterface]=None, items_count: int=None, items_qty: float=None, orig_order_id: int=None, reserved_order_id: str=None, store_id: int=None, updated_at: str=None):
        """QuoteDataCartInterface - a model defined in OpenAPI

        :param billing_address: The billing_address of this QuoteDataCartInterface.
        :param converted_at: The converted_at of this QuoteDataCartInterface.
        :param created_at: The created_at of this QuoteDataCartInterface.
        :param currency: The currency of this QuoteDataCartInterface.
        :param customer: The customer of this QuoteDataCartInterface.
        :param customer_is_guest: The customer_is_guest of this QuoteDataCartInterface.
        :param customer_note: The customer_note of this QuoteDataCartInterface.
        :param customer_note_notify: The customer_note_notify of this QuoteDataCartInterface.
        :param customer_tax_class_id: The customer_tax_class_id of this QuoteDataCartInterface.
        :param extension_attributes: The extension_attributes of this QuoteDataCartInterface.
        :param id: The id of this QuoteDataCartInterface.
        :param is_active: The is_active of this QuoteDataCartInterface.
        :param is_virtual: The is_virtual of this QuoteDataCartInterface.
        :param items: The items of this QuoteDataCartInterface.
        :param items_count: The items_count of this QuoteDataCartInterface.
        :param items_qty: The items_qty of this QuoteDataCartInterface.
        :param orig_order_id: The orig_order_id of this QuoteDataCartInterface.
        :param reserved_order_id: The reserved_order_id of this QuoteDataCartInterface.
        :param store_id: The store_id of this QuoteDataCartInterface.
        :param updated_at: The updated_at of this QuoteDataCartInterface.
        """
        self.openapi_types = {
            'billing_address': QuoteDataAddressInterface,
            'converted_at': str,
            'created_at': str,
            'currency': QuoteDataCurrencyInterface,
            'customer': CustomerDataCustomerInterface,
            'customer_is_guest': bool,
            'customer_note': str,
            'customer_note_notify': bool,
            'customer_tax_class_id': int,
            'extension_attributes': QuoteDataCartExtensionInterface,
            'id': int,
            'is_active': bool,
            'is_virtual': bool,
            'items': List[QuoteDataCartItemInterface],
            'items_count': int,
            'items_qty': float,
            'orig_order_id': int,
            'reserved_order_id': str,
            'store_id': int,
            'updated_at': str
        }

        self.attribute_map = {
            'billing_address': 'billing_address',
            'converted_at': 'converted_at',
            'created_at': 'created_at',
            'currency': 'currency',
            'customer': 'customer',
            'customer_is_guest': 'customer_is_guest',
            'customer_note': 'customer_note',
            'customer_note_notify': 'customer_note_notify',
            'customer_tax_class_id': 'customer_tax_class_id',
            'extension_attributes': 'extension_attributes',
            'id': 'id',
            'is_active': 'is_active',
            'is_virtual': 'is_virtual',
            'items': 'items',
            'items_count': 'items_count',
            'items_qty': 'items_qty',
            'orig_order_id': 'orig_order_id',
            'reserved_order_id': 'reserved_order_id',
            'store_id': 'store_id',
            'updated_at': 'updated_at'
        }

        self._billing_address = billing_address
        self._converted_at = converted_at
        self._created_at = created_at
        self._currency = currency
        self._customer = customer
        self._customer_is_guest = customer_is_guest
        self._customer_note = customer_note
        self._customer_note_notify = customer_note_notify
        self._customer_tax_class_id = customer_tax_class_id
        self._extension_attributes = extension_attributes
        self._id = id
        self._is_active = is_active
        self._is_virtual = is_virtual
        self._items = items
        self._items_count = items_count
        self._items_qty = items_qty
        self._orig_order_id = orig_order_id
        self._reserved_order_id = reserved_order_id
        self._store_id = store_id
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuoteDataCartInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The quote-data-cart-interface of this QuoteDataCartInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this QuoteDataCartInterface.


        :return: The billing_address of this QuoteDataCartInterface.
        :rtype: QuoteDataAddressInterface
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this QuoteDataCartInterface.


        :param billing_address: The billing_address of this QuoteDataCartInterface.
        :type billing_address: QuoteDataAddressInterface
        """

        self._billing_address = billing_address

    @property
    def converted_at(self):
        """Gets the converted_at of this QuoteDataCartInterface.

        Cart conversion date and time. Otherwise, null.

        :return: The converted_at of this QuoteDataCartInterface.
        :rtype: str
        """
        return self._converted_at

    @converted_at.setter
    def converted_at(self, converted_at):
        """Sets the converted_at of this QuoteDataCartInterface.

        Cart conversion date and time. Otherwise, null.

        :param converted_at: The converted_at of this QuoteDataCartInterface.
        :type converted_at: str
        """

        self._converted_at = converted_at

    @property
    def created_at(self):
        """Gets the created_at of this QuoteDataCartInterface.

        Cart creation date and time. Otherwise, null.

        :return: The created_at of this QuoteDataCartInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this QuoteDataCartInterface.

        Cart creation date and time. Otherwise, null.

        :param created_at: The created_at of this QuoteDataCartInterface.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this QuoteDataCartInterface.


        :return: The currency of this QuoteDataCartInterface.
        :rtype: QuoteDataCurrencyInterface
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this QuoteDataCartInterface.


        :param currency: The currency of this QuoteDataCartInterface.
        :type currency: QuoteDataCurrencyInterface
        """

        self._currency = currency

    @property
    def customer(self):
        """Gets the customer of this QuoteDataCartInterface.


        :return: The customer of this QuoteDataCartInterface.
        :rtype: CustomerDataCustomerInterface
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this QuoteDataCartInterface.


        :param customer: The customer of this QuoteDataCartInterface.
        :type customer: CustomerDataCustomerInterface
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")

        self._customer = customer

    @property
    def customer_is_guest(self):
        """Gets the customer_is_guest of this QuoteDataCartInterface.

        For guest customers, false for logged in customers

        :return: The customer_is_guest of this QuoteDataCartInterface.
        :rtype: bool
        """
        return self._customer_is_guest

    @customer_is_guest.setter
    def customer_is_guest(self, customer_is_guest):
        """Sets the customer_is_guest of this QuoteDataCartInterface.

        For guest customers, false for logged in customers

        :param customer_is_guest: The customer_is_guest of this QuoteDataCartInterface.
        :type customer_is_guest: bool
        """

        self._customer_is_guest = customer_is_guest

    @property
    def customer_note(self):
        """Gets the customer_note of this QuoteDataCartInterface.

        Notice text

        :return: The customer_note of this QuoteDataCartInterface.
        :rtype: str
        """
        return self._customer_note

    @customer_note.setter
    def customer_note(self, customer_note):
        """Sets the customer_note of this QuoteDataCartInterface.

        Notice text

        :param customer_note: The customer_note of this QuoteDataCartInterface.
        :type customer_note: str
        """

        self._customer_note = customer_note

    @property
    def customer_note_notify(self):
        """Gets the customer_note_notify of this QuoteDataCartInterface.

        Customer notification flag

        :return: The customer_note_notify of this QuoteDataCartInterface.
        :rtype: bool
        """
        return self._customer_note_notify

    @customer_note_notify.setter
    def customer_note_notify(self, customer_note_notify):
        """Sets the customer_note_notify of this QuoteDataCartInterface.

        Customer notification flag

        :param customer_note_notify: The customer_note_notify of this QuoteDataCartInterface.
        :type customer_note_notify: bool
        """

        self._customer_note_notify = customer_note_notify

    @property
    def customer_tax_class_id(self):
        """Gets the customer_tax_class_id of this QuoteDataCartInterface.

        Customer tax class ID.

        :return: The customer_tax_class_id of this QuoteDataCartInterface.
        :rtype: int
        """
        return self._customer_tax_class_id

    @customer_tax_class_id.setter
    def customer_tax_class_id(self, customer_tax_class_id):
        """Sets the customer_tax_class_id of this QuoteDataCartInterface.

        Customer tax class ID.

        :param customer_tax_class_id: The customer_tax_class_id of this QuoteDataCartInterface.
        :type customer_tax_class_id: int
        """

        self._customer_tax_class_id = customer_tax_class_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this QuoteDataCartInterface.


        :return: The extension_attributes of this QuoteDataCartInterface.
        :rtype: QuoteDataCartExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this QuoteDataCartInterface.


        :param extension_attributes: The extension_attributes of this QuoteDataCartInterface.
        :type extension_attributes: QuoteDataCartExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def id(self):
        """Gets the id of this QuoteDataCartInterface.

        Cart/quote ID.

        :return: The id of this QuoteDataCartInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuoteDataCartInterface.

        Cart/quote ID.

        :param id: The id of this QuoteDataCartInterface.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this QuoteDataCartInterface.

        Active status flag value. Otherwise, null.

        :return: The is_active of this QuoteDataCartInterface.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this QuoteDataCartInterface.

        Active status flag value. Otherwise, null.

        :param is_active: The is_active of this QuoteDataCartInterface.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_virtual(self):
        """Gets the is_virtual of this QuoteDataCartInterface.

        Virtual flag value. Otherwise, null.

        :return: The is_virtual of this QuoteDataCartInterface.
        :rtype: bool
        """
        return self._is_virtual

    @is_virtual.setter
    def is_virtual(self, is_virtual):
        """Sets the is_virtual of this QuoteDataCartInterface.

        Virtual flag value. Otherwise, null.

        :param is_virtual: The is_virtual of this QuoteDataCartInterface.
        :type is_virtual: bool
        """

        self._is_virtual = is_virtual

    @property
    def items(self):
        """Gets the items of this QuoteDataCartInterface.

        Array of items. Otherwise, null.

        :return: The items of this QuoteDataCartInterface.
        :rtype: List[QuoteDataCartItemInterface]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this QuoteDataCartInterface.

        Array of items. Otherwise, null.

        :param items: The items of this QuoteDataCartInterface.
        :type items: List[QuoteDataCartItemInterface]
        """

        self._items = items

    @property
    def items_count(self):
        """Gets the items_count of this QuoteDataCartInterface.

        Number of different items or products in the cart. Otherwise, null.

        :return: The items_count of this QuoteDataCartInterface.
        :rtype: int
        """
        return self._items_count

    @items_count.setter
    def items_count(self, items_count):
        """Sets the items_count of this QuoteDataCartInterface.

        Number of different items or products in the cart. Otherwise, null.

        :param items_count: The items_count of this QuoteDataCartInterface.
        :type items_count: int
        """

        self._items_count = items_count

    @property
    def items_qty(self):
        """Gets the items_qty of this QuoteDataCartInterface.

        Total quantity of all cart items. Otherwise, null.

        :return: The items_qty of this QuoteDataCartInterface.
        :rtype: float
        """
        return self._items_qty

    @items_qty.setter
    def items_qty(self, items_qty):
        """Sets the items_qty of this QuoteDataCartInterface.

        Total quantity of all cart items. Otherwise, null.

        :param items_qty: The items_qty of this QuoteDataCartInterface.
        :type items_qty: float
        """

        self._items_qty = items_qty

    @property
    def orig_order_id(self):
        """Gets the orig_order_id of this QuoteDataCartInterface.

        Original order ID. Otherwise, null.

        :return: The orig_order_id of this QuoteDataCartInterface.
        :rtype: int
        """
        return self._orig_order_id

    @orig_order_id.setter
    def orig_order_id(self, orig_order_id):
        """Sets the orig_order_id of this QuoteDataCartInterface.

        Original order ID. Otherwise, null.

        :param orig_order_id: The orig_order_id of this QuoteDataCartInterface.
        :type orig_order_id: int
        """

        self._orig_order_id = orig_order_id

    @property
    def reserved_order_id(self):
        """Gets the reserved_order_id of this QuoteDataCartInterface.

        Reserved order ID. Otherwise, null.

        :return: The reserved_order_id of this QuoteDataCartInterface.
        :rtype: str
        """
        return self._reserved_order_id

    @reserved_order_id.setter
    def reserved_order_id(self, reserved_order_id):
        """Sets the reserved_order_id of this QuoteDataCartInterface.

        Reserved order ID. Otherwise, null.

        :param reserved_order_id: The reserved_order_id of this QuoteDataCartInterface.
        :type reserved_order_id: str
        """

        self._reserved_order_id = reserved_order_id

    @property
    def store_id(self):
        """Gets the store_id of this QuoteDataCartInterface.

        Store identifier

        :return: The store_id of this QuoteDataCartInterface.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this QuoteDataCartInterface.

        Store identifier

        :param store_id: The store_id of this QuoteDataCartInterface.
        :type store_id: int
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id

    @property
    def updated_at(self):
        """Gets the updated_at of this QuoteDataCartInterface.

        Cart last update date and time. Otherwise, null.

        :return: The updated_at of this QuoteDataCartInterface.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this QuoteDataCartInterface.

        Cart last update date and time. Otherwise, null.

        :param updated_at: The updated_at of this QuoteDataCartInterface.
        :type updated_at: str
        """

        self._updated_at = updated_at
