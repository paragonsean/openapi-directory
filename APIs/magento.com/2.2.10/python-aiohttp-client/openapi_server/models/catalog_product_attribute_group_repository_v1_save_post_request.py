# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eav_data_attribute_group_interface import EavDataAttributeGroupInterface
from openapi_server import util


class CatalogProductAttributeGroupRepositoryV1SavePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group: EavDataAttributeGroupInterface=None):
        """CatalogProductAttributeGroupRepositoryV1SavePostRequest - a model defined in OpenAPI

        :param group: The group of this CatalogProductAttributeGroupRepositoryV1SavePostRequest.
        """
        self.openapi_types = {
            'group': EavDataAttributeGroupInterface
        }

        self.attribute_map = {
            'group': 'group'
        }

        self._group = group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogProductAttributeGroupRepositoryV1SavePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalogProductAttributeGroupRepositoryV1SavePost_request of this CatalogProductAttributeGroupRepositoryV1SavePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this CatalogProductAttributeGroupRepositoryV1SavePostRequest.


        :return: The group of this CatalogProductAttributeGroupRepositoryV1SavePostRequest.
        :rtype: EavDataAttributeGroupInterface
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this CatalogProductAttributeGroupRepositoryV1SavePostRequest.


        :param group: The group of this CatalogProductAttributeGroupRepositoryV1SavePostRequest.
        :type group: EavDataAttributeGroupInterface
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group
