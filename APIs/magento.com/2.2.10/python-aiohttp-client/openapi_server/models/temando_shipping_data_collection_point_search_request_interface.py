# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TemandoShippingDataCollectionPointSearchRequestInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_id: str=None, pending: bool=None, postcode: str=None, shipping_address_id: int=None):
        """TemandoShippingDataCollectionPointSearchRequestInterface - a model defined in OpenAPI

        :param country_id: The country_id of this TemandoShippingDataCollectionPointSearchRequestInterface.
        :param pending: The pending of this TemandoShippingDataCollectionPointSearchRequestInterface.
        :param postcode: The postcode of this TemandoShippingDataCollectionPointSearchRequestInterface.
        :param shipping_address_id: The shipping_address_id of this TemandoShippingDataCollectionPointSearchRequestInterface.
        """
        self.openapi_types = {
            'country_id': str,
            'pending': bool,
            'postcode': str,
            'shipping_address_id': int
        }

        self.attribute_map = {
            'country_id': 'country_id',
            'pending': 'pending',
            'postcode': 'postcode',
            'shipping_address_id': 'shipping_address_id'
        }

        self._country_id = country_id
        self._pending = pending
        self._postcode = postcode
        self._shipping_address_id = shipping_address_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemandoShippingDataCollectionPointSearchRequestInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The temando-shipping-data-collection-point-search-request-interface of this TemandoShippingDataCollectionPointSearchRequestInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_id(self):
        """Gets the country_id of this TemandoShippingDataCollectionPointSearchRequestInterface.


        :return: The country_id of this TemandoShippingDataCollectionPointSearchRequestInterface.
        :rtype: str
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this TemandoShippingDataCollectionPointSearchRequestInterface.


        :param country_id: The country_id of this TemandoShippingDataCollectionPointSearchRequestInterface.
        :type country_id: str
        """
        if country_id is None:
            raise ValueError("Invalid value for `country_id`, must not be `None`")

        self._country_id = country_id

    @property
    def pending(self):
        """Gets the pending of this TemandoShippingDataCollectionPointSearchRequestInterface.


        :return: The pending of this TemandoShippingDataCollectionPointSearchRequestInterface.
        :rtype: bool
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this TemandoShippingDataCollectionPointSearchRequestInterface.


        :param pending: The pending of this TemandoShippingDataCollectionPointSearchRequestInterface.
        :type pending: bool
        """
        if pending is None:
            raise ValueError("Invalid value for `pending`, must not be `None`")

        self._pending = pending

    @property
    def postcode(self):
        """Gets the postcode of this TemandoShippingDataCollectionPointSearchRequestInterface.


        :return: The postcode of this TemandoShippingDataCollectionPointSearchRequestInterface.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this TemandoShippingDataCollectionPointSearchRequestInterface.


        :param postcode: The postcode of this TemandoShippingDataCollectionPointSearchRequestInterface.
        :type postcode: str
        """
        if postcode is None:
            raise ValueError("Invalid value for `postcode`, must not be `None`")

        self._postcode = postcode

    @property
    def shipping_address_id(self):
        """Gets the shipping_address_id of this TemandoShippingDataCollectionPointSearchRequestInterface.


        :return: The shipping_address_id of this TemandoShippingDataCollectionPointSearchRequestInterface.
        :rtype: int
        """
        return self._shipping_address_id

    @shipping_address_id.setter
    def shipping_address_id(self, shipping_address_id):
        """Sets the shipping_address_id of this TemandoShippingDataCollectionPointSearchRequestInterface.


        :param shipping_address_id: The shipping_address_id of this TemandoShippingDataCollectionPointSearchRequestInterface.
        :type shipping_address_id: int
        """
        if shipping_address_id is None:
            raise ValueError("Invalid value for `shipping_address_id`, must not be `None`")

        self._shipping_address_id = shipping_address_id
