# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_data_product_interface import CatalogDataProductInterface
from openapi_server.models.configurable_product_data_option_interface import ConfigurableProductDataOptionInterface
from openapi_server import util


class ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, options: List[ConfigurableProductDataOptionInterface]=None, product: CatalogDataProductInterface=None):
        """ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest - a model defined in OpenAPI

        :param options: The options of this ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.
        :param product: The product of this ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.
        """
        self.openapi_types = {
            'options': List[ConfigurableProductDataOptionInterface],
            'product': CatalogDataProductInterface
        }

        self.attribute_map = {
            'options': 'options',
            'product': 'product'
        }

        self._options = options
        self._product = product

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The configurableProductConfigurableProductManagementV1GenerateVariationPut_request of this ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def options(self):
        """Gets the options of this ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.


        :return: The options of this ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.
        :rtype: List[ConfigurableProductDataOptionInterface]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.


        :param options: The options of this ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.
        :type options: List[ConfigurableProductDataOptionInterface]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def product(self):
        """Gets the product of this ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.


        :return: The product of this ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.
        :rtype: CatalogDataProductInterface
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.


        :param product: The product of this ConfigurableProductConfigurableProductManagementV1GenerateVariationPutRequest.
        :type product: CatalogDataProductInterface
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product
