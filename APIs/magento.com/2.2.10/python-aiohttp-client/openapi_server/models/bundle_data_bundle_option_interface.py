# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BundleDataBundleOptionInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension_attributes: object=None, option_id: int=None, option_qty: int=None, option_selections: List[int]=None):
        """BundleDataBundleOptionInterface - a model defined in OpenAPI

        :param extension_attributes: The extension_attributes of this BundleDataBundleOptionInterface.
        :param option_id: The option_id of this BundleDataBundleOptionInterface.
        :param option_qty: The option_qty of this BundleDataBundleOptionInterface.
        :param option_selections: The option_selections of this BundleDataBundleOptionInterface.
        """
        self.openapi_types = {
            'extension_attributes': object,
            'option_id': int,
            'option_qty': int,
            'option_selections': List[int]
        }

        self.attribute_map = {
            'extension_attributes': 'extension_attributes',
            'option_id': 'option_id',
            'option_qty': 'option_qty',
            'option_selections': 'option_selections'
        }

        self._extension_attributes = extension_attributes
        self._option_id = option_id
        self._option_qty = option_qty
        self._option_selections = option_selections

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BundleDataBundleOptionInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bundle-data-bundle-option-interface of this BundleDataBundleOptionInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this BundleDataBundleOptionInterface.

        ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\BundleOptionInterface

        :return: The extension_attributes of this BundleDataBundleOptionInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this BundleDataBundleOptionInterface.

        ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\BundleOptionInterface

        :param extension_attributes: The extension_attributes of this BundleDataBundleOptionInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def option_id(self):
        """Gets the option_id of this BundleDataBundleOptionInterface.

        Bundle option id.

        :return: The option_id of this BundleDataBundleOptionInterface.
        :rtype: int
        """
        return self._option_id

    @option_id.setter
    def option_id(self, option_id):
        """Sets the option_id of this BundleDataBundleOptionInterface.

        Bundle option id.

        :param option_id: The option_id of this BundleDataBundleOptionInterface.
        :type option_id: int
        """
        if option_id is None:
            raise ValueError("Invalid value for `option_id`, must not be `None`")

        self._option_id = option_id

    @property
    def option_qty(self):
        """Gets the option_qty of this BundleDataBundleOptionInterface.

        Bundle option quantity.

        :return: The option_qty of this BundleDataBundleOptionInterface.
        :rtype: int
        """
        return self._option_qty

    @option_qty.setter
    def option_qty(self, option_qty):
        """Sets the option_qty of this BundleDataBundleOptionInterface.

        Bundle option quantity.

        :param option_qty: The option_qty of this BundleDataBundleOptionInterface.
        :type option_qty: int
        """
        if option_qty is None:
            raise ValueError("Invalid value for `option_qty`, must not be `None`")

        self._option_qty = option_qty

    @property
    def option_selections(self):
        """Gets the option_selections of this BundleDataBundleOptionInterface.

        Bundle option selection ids.

        :return: The option_selections of this BundleDataBundleOptionInterface.
        :rtype: List[int]
        """
        return self._option_selections

    @option_selections.setter
    def option_selections(self, option_selections):
        """Sets the option_selections of this BundleDataBundleOptionInterface.

        Bundle option selection ids.

        :param option_selections: The option_selections of this BundleDataBundleOptionInterface.
        :type option_selections: List[int]
        """
        if option_selections is None:
            raise ValueError("Invalid value for `option_selections`, must not be `None`")

        self._option_selections = option_selections
