# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TemandoShippingDataCollectionPointOrderCollectionPointInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, collection_point_id: str=None, country: str=None, name: str=None, postcode: str=None, recipient_address_id: int=None, region: str=None, street: List[str]=None):
        """TemandoShippingDataCollectionPointOrderCollectionPointInterface - a model defined in OpenAPI

        :param city: The city of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :param collection_point_id: The collection_point_id of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :param country: The country of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :param name: The name of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :param postcode: The postcode of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :param recipient_address_id: The recipient_address_id of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :param region: The region of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :param street: The street of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        """
        self.openapi_types = {
            'city': str,
            'collection_point_id': str,
            'country': str,
            'name': str,
            'postcode': str,
            'recipient_address_id': int,
            'region': str,
            'street': List[str]
        }

        self.attribute_map = {
            'city': 'city',
            'collection_point_id': 'collection_point_id',
            'country': 'country',
            'name': 'name',
            'postcode': 'postcode',
            'recipient_address_id': 'recipient_address_id',
            'region': 'region',
            'street': 'street'
        }

        self._city = city
        self._collection_point_id = collection_point_id
        self._country = country
        self._name = name
        self._postcode = postcode
        self._recipient_address_id = recipient_address_id
        self._region = region
        self._street = street

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemandoShippingDataCollectionPointOrderCollectionPointInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The temando-shipping-data-collection-point-order-collection-point-interface of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :return: The city of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :param city: The city of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def collection_point_id(self):
        """Gets the collection_point_id of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :return: The collection_point_id of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :rtype: str
        """
        return self._collection_point_id

    @collection_point_id.setter
    def collection_point_id(self, collection_point_id):
        """Sets the collection_point_id of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :param collection_point_id: The collection_point_id of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :type collection_point_id: str
        """
        if collection_point_id is None:
            raise ValueError("Invalid value for `collection_point_id`, must not be `None`")

        self._collection_point_id = collection_point_id

    @property
    def country(self):
        """Gets the country of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :return: The country of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :param country: The country of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def name(self):
        """Gets the name of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :return: The name of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :param name: The name of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def postcode(self):
        """Gets the postcode of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :return: The postcode of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :param postcode: The postcode of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :type postcode: str
        """
        if postcode is None:
            raise ValueError("Invalid value for `postcode`, must not be `None`")

        self._postcode = postcode

    @property
    def recipient_address_id(self):
        """Gets the recipient_address_id of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :return: The recipient_address_id of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :rtype: int
        """
        return self._recipient_address_id

    @recipient_address_id.setter
    def recipient_address_id(self, recipient_address_id):
        """Sets the recipient_address_id of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :param recipient_address_id: The recipient_address_id of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :type recipient_address_id: int
        """
        if recipient_address_id is None:
            raise ValueError("Invalid value for `recipient_address_id`, must not be `None`")

        self._recipient_address_id = recipient_address_id

    @property
    def region(self):
        """Gets the region of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :return: The region of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :param region: The region of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def street(self):
        """Gets the street of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :return: The street of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :rtype: List[str]
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.


        :param street: The street of this TemandoShippingDataCollectionPointOrderCollectionPointInterface.
        :type street: List[str]
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")

        self._street = street
