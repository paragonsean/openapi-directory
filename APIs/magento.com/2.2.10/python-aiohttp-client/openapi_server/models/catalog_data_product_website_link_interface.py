# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogDataProductWebsiteLinkInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sku: str=None, website_id: int=None):
        """CatalogDataProductWebsiteLinkInterface - a model defined in OpenAPI

        :param sku: The sku of this CatalogDataProductWebsiteLinkInterface.
        :param website_id: The website_id of this CatalogDataProductWebsiteLinkInterface.
        """
        self.openapi_types = {
            'sku': str,
            'website_id': int
        }

        self.attribute_map = {
            'sku': 'sku',
            'website_id': 'website_id'
        }

        self._sku = sku
        self._website_id = website_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataProductWebsiteLinkInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-product-website-link-interface of this CatalogDataProductWebsiteLinkInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sku(self):
        """Gets the sku of this CatalogDataProductWebsiteLinkInterface.


        :return: The sku of this CatalogDataProductWebsiteLinkInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this CatalogDataProductWebsiteLinkInterface.


        :param sku: The sku of this CatalogDataProductWebsiteLinkInterface.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def website_id(self):
        """Gets the website_id of this CatalogDataProductWebsiteLinkInterface.

        Website ids

        :return: The website_id of this CatalogDataProductWebsiteLinkInterface.
        :rtype: int
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this CatalogDataProductWebsiteLinkInterface.

        Website ids

        :param website_id: The website_id of this CatalogDataProductWebsiteLinkInterface.
        :type website_id: int
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")

        self._website_id = website_id
