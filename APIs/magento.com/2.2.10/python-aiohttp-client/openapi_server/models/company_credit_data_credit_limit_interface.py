# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompanyCreditDataCreditLimitInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_limit: float=None, balance: float=None, company_id: int=None, credit_comment: str=None, credit_limit: float=None, currency_code: str=None, exceed_limit: bool=None, extension_attributes: object=None, id: int=None):
        """CompanyCreditDataCreditLimitInterface - a model defined in OpenAPI

        :param available_limit: The available_limit of this CompanyCreditDataCreditLimitInterface.
        :param balance: The balance of this CompanyCreditDataCreditLimitInterface.
        :param company_id: The company_id of this CompanyCreditDataCreditLimitInterface.
        :param credit_comment: The credit_comment of this CompanyCreditDataCreditLimitInterface.
        :param credit_limit: The credit_limit of this CompanyCreditDataCreditLimitInterface.
        :param currency_code: The currency_code of this CompanyCreditDataCreditLimitInterface.
        :param exceed_limit: The exceed_limit of this CompanyCreditDataCreditLimitInterface.
        :param extension_attributes: The extension_attributes of this CompanyCreditDataCreditLimitInterface.
        :param id: The id of this CompanyCreditDataCreditLimitInterface.
        """
        self.openapi_types = {
            'available_limit': float,
            'balance': float,
            'company_id': int,
            'credit_comment': str,
            'credit_limit': float,
            'currency_code': str,
            'exceed_limit': bool,
            'extension_attributes': object,
            'id': int
        }

        self.attribute_map = {
            'available_limit': 'available_limit',
            'balance': 'balance',
            'company_id': 'company_id',
            'credit_comment': 'credit_comment',
            'credit_limit': 'credit_limit',
            'currency_code': 'currency_code',
            'exceed_limit': 'exceed_limit',
            'extension_attributes': 'extension_attributes',
            'id': 'id'
        }

        self._available_limit = available_limit
        self._balance = balance
        self._company_id = company_id
        self._credit_comment = credit_comment
        self._credit_limit = credit_limit
        self._currency_code = currency_code
        self._exceed_limit = exceed_limit
        self._extension_attributes = extension_attributes
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyCreditDataCreditLimitInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The company-credit-data-credit-limit-interface of this CompanyCreditDataCreditLimitInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_limit(self):
        """Gets the available_limit of this CompanyCreditDataCreditLimitInterface.

        Available Limit.

        :return: The available_limit of this CompanyCreditDataCreditLimitInterface.
        :rtype: float
        """
        return self._available_limit

    @available_limit.setter
    def available_limit(self, available_limit):
        """Sets the available_limit of this CompanyCreditDataCreditLimitInterface.

        Available Limit.

        :param available_limit: The available_limit of this CompanyCreditDataCreditLimitInterface.
        :type available_limit: float
        """

        self._available_limit = available_limit

    @property
    def balance(self):
        """Gets the balance of this CompanyCreditDataCreditLimitInterface.

        Balance.

        :return: The balance of this CompanyCreditDataCreditLimitInterface.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this CompanyCreditDataCreditLimitInterface.

        Balance.

        :param balance: The balance of this CompanyCreditDataCreditLimitInterface.
        :type balance: float
        """

        self._balance = balance

    @property
    def company_id(self):
        """Gets the company_id of this CompanyCreditDataCreditLimitInterface.

        Company id.

        :return: The company_id of this CompanyCreditDataCreditLimitInterface.
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CompanyCreditDataCreditLimitInterface.

        Company id.

        :param company_id: The company_id of this CompanyCreditDataCreditLimitInterface.
        :type company_id: int
        """

        self._company_id = company_id

    @property
    def credit_comment(self):
        """Gets the credit_comment of this CompanyCreditDataCreditLimitInterface.

        Credit comment for company credit history.

        :return: The credit_comment of this CompanyCreditDataCreditLimitInterface.
        :rtype: str
        """
        return self._credit_comment

    @credit_comment.setter
    def credit_comment(self, credit_comment):
        """Sets the credit_comment of this CompanyCreditDataCreditLimitInterface.

        Credit comment for company credit history.

        :param credit_comment: The credit_comment of this CompanyCreditDataCreditLimitInterface.
        :type credit_comment: str
        """

        self._credit_comment = credit_comment

    @property
    def credit_limit(self):
        """Gets the credit_limit of this CompanyCreditDataCreditLimitInterface.

        Credit Limit.

        :return: The credit_limit of this CompanyCreditDataCreditLimitInterface.
        :rtype: float
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this CompanyCreditDataCreditLimitInterface.

        Credit Limit.

        :param credit_limit: The credit_limit of this CompanyCreditDataCreditLimitInterface.
        :type credit_limit: float
        """

        self._credit_limit = credit_limit

    @property
    def currency_code(self):
        """Gets the currency_code of this CompanyCreditDataCreditLimitInterface.

        Currency Code.

        :return: The currency_code of this CompanyCreditDataCreditLimitInterface.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CompanyCreditDataCreditLimitInterface.

        Currency Code.

        :param currency_code: The currency_code of this CompanyCreditDataCreditLimitInterface.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def exceed_limit(self):
        """Gets the exceed_limit of this CompanyCreditDataCreditLimitInterface.

        Exceed Limit.

        :return: The exceed_limit of this CompanyCreditDataCreditLimitInterface.
        :rtype: bool
        """
        return self._exceed_limit

    @exceed_limit.setter
    def exceed_limit(self, exceed_limit):
        """Sets the exceed_limit of this CompanyCreditDataCreditLimitInterface.

        Exceed Limit.

        :param exceed_limit: The exceed_limit of this CompanyCreditDataCreditLimitInterface.
        :type exceed_limit: bool
        """
        if exceed_limit is None:
            raise ValueError("Invalid value for `exceed_limit`, must not be `None`")

        self._exceed_limit = exceed_limit

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CompanyCreditDataCreditLimitInterface.

        ExtensionInterface class for @see \\Magento\\CompanyCredit\\Api\\Data\\CreditLimitInterface

        :return: The extension_attributes of this CompanyCreditDataCreditLimitInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CompanyCreditDataCreditLimitInterface.

        ExtensionInterface class for @see \\Magento\\CompanyCredit\\Api\\Data\\CreditLimitInterface

        :param extension_attributes: The extension_attributes of this CompanyCreditDataCreditLimitInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def id(self):
        """Gets the id of this CompanyCreditDataCreditLimitInterface.

        ID.

        :return: The id of this CompanyCreditDataCreditLimitInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyCreditDataCreditLimitInterface.

        ID.

        :param id: The id of this CompanyCreditDataCreditLimitInterface.
        :type id: int
        """

        self._id = id
