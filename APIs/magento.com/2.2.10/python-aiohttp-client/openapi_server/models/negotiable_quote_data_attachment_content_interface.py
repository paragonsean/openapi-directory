# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NegotiableQuoteDataAttachmentContentInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base64_encoded_data: str=None, extension_attributes: object=None, name: str=None, type: str=None):
        """NegotiableQuoteDataAttachmentContentInterface - a model defined in OpenAPI

        :param base64_encoded_data: The base64_encoded_data of this NegotiableQuoteDataAttachmentContentInterface.
        :param extension_attributes: The extension_attributes of this NegotiableQuoteDataAttachmentContentInterface.
        :param name: The name of this NegotiableQuoteDataAttachmentContentInterface.
        :param type: The type of this NegotiableQuoteDataAttachmentContentInterface.
        """
        self.openapi_types = {
            'base64_encoded_data': str,
            'extension_attributes': object,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'base64_encoded_data': 'base64_encoded_data',
            'extension_attributes': 'extension_attributes',
            'name': 'name',
            'type': 'type'
        }

        self._base64_encoded_data = base64_encoded_data
        self._extension_attributes = extension_attributes
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NegotiableQuoteDataAttachmentContentInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The negotiable-quote-data-attachment-content-interface of this NegotiableQuoteDataAttachmentContentInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base64_encoded_data(self):
        """Gets the base64_encoded_data of this NegotiableQuoteDataAttachmentContentInterface.

        Media data (base64 encoded content).

        :return: The base64_encoded_data of this NegotiableQuoteDataAttachmentContentInterface.
        :rtype: str
        """
        return self._base64_encoded_data

    @base64_encoded_data.setter
    def base64_encoded_data(self, base64_encoded_data):
        """Sets the base64_encoded_data of this NegotiableQuoteDataAttachmentContentInterface.

        Media data (base64 encoded content).

        :param base64_encoded_data: The base64_encoded_data of this NegotiableQuoteDataAttachmentContentInterface.
        :type base64_encoded_data: str
        """
        if base64_encoded_data is None:
            raise ValueError("Invalid value for `base64_encoded_data`, must not be `None`")

        self._base64_encoded_data = base64_encoded_data

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this NegotiableQuoteDataAttachmentContentInterface.

        ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\AttachmentContentInterface

        :return: The extension_attributes of this NegotiableQuoteDataAttachmentContentInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this NegotiableQuoteDataAttachmentContentInterface.

        ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\AttachmentContentInterface

        :param extension_attributes: The extension_attributes of this NegotiableQuoteDataAttachmentContentInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def name(self):
        """Gets the name of this NegotiableQuoteDataAttachmentContentInterface.

        File name.

        :return: The name of this NegotiableQuoteDataAttachmentContentInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NegotiableQuoteDataAttachmentContentInterface.

        File name.

        :param name: The name of this NegotiableQuoteDataAttachmentContentInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this NegotiableQuoteDataAttachmentContentInterface.

        MIME type.

        :return: The type of this NegotiableQuoteDataAttachmentContentInterface.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NegotiableQuoteDataAttachmentContentInterface.

        MIME type.

        :param type: The type of this NegotiableQuoteDataAttachmentContentInterface.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
