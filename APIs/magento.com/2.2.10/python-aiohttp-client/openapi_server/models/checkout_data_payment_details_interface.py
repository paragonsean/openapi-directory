# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.quote_data_payment_method_interface import QuoteDataPaymentMethodInterface
from openapi_server.models.quote_data_totals_interface import QuoteDataTotalsInterface
from openapi_server import util


class CheckoutDataPaymentDetailsInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension_attributes: object=None, payment_methods: List[QuoteDataPaymentMethodInterface]=None, totals: QuoteDataTotalsInterface=None):
        """CheckoutDataPaymentDetailsInterface - a model defined in OpenAPI

        :param extension_attributes: The extension_attributes of this CheckoutDataPaymentDetailsInterface.
        :param payment_methods: The payment_methods of this CheckoutDataPaymentDetailsInterface.
        :param totals: The totals of this CheckoutDataPaymentDetailsInterface.
        """
        self.openapi_types = {
            'extension_attributes': object,
            'payment_methods': List[QuoteDataPaymentMethodInterface],
            'totals': QuoteDataTotalsInterface
        }

        self.attribute_map = {
            'extension_attributes': 'extension_attributes',
            'payment_methods': 'payment_methods',
            'totals': 'totals'
        }

        self._extension_attributes = extension_attributes
        self._payment_methods = payment_methods
        self._totals = totals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckoutDataPaymentDetailsInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The checkout-data-payment-details-interface of this CheckoutDataPaymentDetailsInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CheckoutDataPaymentDetailsInterface.

        ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\PaymentDetailsInterface

        :return: The extension_attributes of this CheckoutDataPaymentDetailsInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CheckoutDataPaymentDetailsInterface.

        ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\PaymentDetailsInterface

        :param extension_attributes: The extension_attributes of this CheckoutDataPaymentDetailsInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def payment_methods(self):
        """Gets the payment_methods of this CheckoutDataPaymentDetailsInterface.


        :return: The payment_methods of this CheckoutDataPaymentDetailsInterface.
        :rtype: List[QuoteDataPaymentMethodInterface]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this CheckoutDataPaymentDetailsInterface.


        :param payment_methods: The payment_methods of this CheckoutDataPaymentDetailsInterface.
        :type payment_methods: List[QuoteDataPaymentMethodInterface]
        """
        if payment_methods is None:
            raise ValueError("Invalid value for `payment_methods`, must not be `None`")

        self._payment_methods = payment_methods

    @property
    def totals(self):
        """Gets the totals of this CheckoutDataPaymentDetailsInterface.


        :return: The totals of this CheckoutDataPaymentDetailsInterface.
        :rtype: QuoteDataTotalsInterface
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """Sets the totals of this CheckoutDataPaymentDetailsInterface.


        :param totals: The totals of this CheckoutDataPaymentDetailsInterface.
        :type totals: QuoteDataTotalsInterface
        """
        if totals is None:
            raise ValueError("Invalid value for `totals`, must not be `None`")

        self._totals = totals
