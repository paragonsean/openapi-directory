# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerAccountManagementV1ResetPasswordPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, new_password: str=None, reset_token: str=None):
        """CustomerAccountManagementV1ResetPasswordPostRequest - a model defined in OpenAPI

        :param email: The email of this CustomerAccountManagementV1ResetPasswordPostRequest.
        :param new_password: The new_password of this CustomerAccountManagementV1ResetPasswordPostRequest.
        :param reset_token: The reset_token of this CustomerAccountManagementV1ResetPasswordPostRequest.
        """
        self.openapi_types = {
            'email': str,
            'new_password': str,
            'reset_token': str
        }

        self.attribute_map = {
            'email': 'email',
            'new_password': 'newPassword',
            'reset_token': 'resetToken'
        }

        self._email = email
        self._new_password = new_password
        self._reset_token = reset_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerAccountManagementV1ResetPasswordPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customerAccountManagementV1ResetPasswordPost_request of this CustomerAccountManagementV1ResetPasswordPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this CustomerAccountManagementV1ResetPasswordPostRequest.

        If empty value given then the customer will be matched by the RP token.

        :return: The email of this CustomerAccountManagementV1ResetPasswordPostRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerAccountManagementV1ResetPasswordPostRequest.

        If empty value given then the customer will be matched by the RP token.

        :param email: The email of this CustomerAccountManagementV1ResetPasswordPostRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def new_password(self):
        """Gets the new_password of this CustomerAccountManagementV1ResetPasswordPostRequest.


        :return: The new_password of this CustomerAccountManagementV1ResetPasswordPostRequest.
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this CustomerAccountManagementV1ResetPasswordPostRequest.


        :param new_password: The new_password of this CustomerAccountManagementV1ResetPasswordPostRequest.
        :type new_password: str
        """
        if new_password is None:
            raise ValueError("Invalid value for `new_password`, must not be `None`")

        self._new_password = new_password

    @property
    def reset_token(self):
        """Gets the reset_token of this CustomerAccountManagementV1ResetPasswordPostRequest.


        :return: The reset_token of this CustomerAccountManagementV1ResetPasswordPostRequest.
        :rtype: str
        """
        return self._reset_token

    @reset_token.setter
    def reset_token(self, reset_token):
        """Sets the reset_token of this CustomerAccountManagementV1ResetPasswordPostRequest.


        :param reset_token: The reset_token of this CustomerAccountManagementV1ResetPasswordPostRequest.
        :type reset_token: str
        """
        if reset_token is None:
            raise ValueError("Invalid value for `reset_token`, must not be `None`")

        self._reset_token = reset_token
