# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.quote_data_total_segment_extension_interface import QuoteDataTotalSegmentExtensionInterface
from openapi_server import util


class QuoteDataTotalSegmentInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area: str=None, code: str=None, extension_attributes: QuoteDataTotalSegmentExtensionInterface=None, title: str=None, value: float=None):
        """QuoteDataTotalSegmentInterface - a model defined in OpenAPI

        :param area: The area of this QuoteDataTotalSegmentInterface.
        :param code: The code of this QuoteDataTotalSegmentInterface.
        :param extension_attributes: The extension_attributes of this QuoteDataTotalSegmentInterface.
        :param title: The title of this QuoteDataTotalSegmentInterface.
        :param value: The value of this QuoteDataTotalSegmentInterface.
        """
        self.openapi_types = {
            'area': str,
            'code': str,
            'extension_attributes': QuoteDataTotalSegmentExtensionInterface,
            'title': str,
            'value': float
        }

        self.attribute_map = {
            'area': 'area',
            'code': 'code',
            'extension_attributes': 'extension_attributes',
            'title': 'title',
            'value': 'value'
        }

        self._area = area
        self._code = code
        self._extension_attributes = extension_attributes
        self._title = title
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuoteDataTotalSegmentInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The quote-data-total-segment-interface of this QuoteDataTotalSegmentInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area(self):
        """Gets the area of this QuoteDataTotalSegmentInterface.

        Display area code.

        :return: The area of this QuoteDataTotalSegmentInterface.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this QuoteDataTotalSegmentInterface.

        Display area code.

        :param area: The area of this QuoteDataTotalSegmentInterface.
        :type area: str
        """

        self._area = area

    @property
    def code(self):
        """Gets the code of this QuoteDataTotalSegmentInterface.

        Code

        :return: The code of this QuoteDataTotalSegmentInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this QuoteDataTotalSegmentInterface.

        Code

        :param code: The code of this QuoteDataTotalSegmentInterface.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this QuoteDataTotalSegmentInterface.


        :return: The extension_attributes of this QuoteDataTotalSegmentInterface.
        :rtype: QuoteDataTotalSegmentExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this QuoteDataTotalSegmentInterface.


        :param extension_attributes: The extension_attributes of this QuoteDataTotalSegmentInterface.
        :type extension_attributes: QuoteDataTotalSegmentExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def title(self):
        """Gets the title of this QuoteDataTotalSegmentInterface.

        Total title

        :return: The title of this QuoteDataTotalSegmentInterface.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this QuoteDataTotalSegmentInterface.

        Total title

        :param title: The title of this QuoteDataTotalSegmentInterface.
        :type title: str
        """

        self._title = title

    @property
    def value(self):
        """Gets the value of this QuoteDataTotalSegmentInterface.

        Total value

        :return: The value of this QuoteDataTotalSegmentInterface.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this QuoteDataTotalSegmentInterface.

        Total value

        :param value: The value of this QuoteDataTotalSegmentInterface.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
