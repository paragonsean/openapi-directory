# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.negotiable_quote_data_company_quote_config_interface import NegotiableQuoteDataCompanyQuoteConfigInterface
from openapi_server import util


class CompanyDataCompanyExtensionInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_payment_method: int=None, available_payment_methods: str=None, quote_config: NegotiableQuoteDataCompanyQuoteConfigInterface=None, use_config_settings: int=None):
        """CompanyDataCompanyExtensionInterface - a model defined in OpenAPI

        :param applicable_payment_method: The applicable_payment_method of this CompanyDataCompanyExtensionInterface.
        :param available_payment_methods: The available_payment_methods of this CompanyDataCompanyExtensionInterface.
        :param quote_config: The quote_config of this CompanyDataCompanyExtensionInterface.
        :param use_config_settings: The use_config_settings of this CompanyDataCompanyExtensionInterface.
        """
        self.openapi_types = {
            'applicable_payment_method': int,
            'available_payment_methods': str,
            'quote_config': NegotiableQuoteDataCompanyQuoteConfigInterface,
            'use_config_settings': int
        }

        self.attribute_map = {
            'applicable_payment_method': 'applicable_payment_method',
            'available_payment_methods': 'available_payment_methods',
            'quote_config': 'quote_config',
            'use_config_settings': 'use_config_settings'
        }

        self._applicable_payment_method = applicable_payment_method
        self._available_payment_methods = available_payment_methods
        self._quote_config = quote_config
        self._use_config_settings = use_config_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyDataCompanyExtensionInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The company-data-company-extension-interface of this CompanyDataCompanyExtensionInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_payment_method(self):
        """Gets the applicable_payment_method of this CompanyDataCompanyExtensionInterface.


        :return: The applicable_payment_method of this CompanyDataCompanyExtensionInterface.
        :rtype: int
        """
        return self._applicable_payment_method

    @applicable_payment_method.setter
    def applicable_payment_method(self, applicable_payment_method):
        """Sets the applicable_payment_method of this CompanyDataCompanyExtensionInterface.


        :param applicable_payment_method: The applicable_payment_method of this CompanyDataCompanyExtensionInterface.
        :type applicable_payment_method: int
        """

        self._applicable_payment_method = applicable_payment_method

    @property
    def available_payment_methods(self):
        """Gets the available_payment_methods of this CompanyDataCompanyExtensionInterface.


        :return: The available_payment_methods of this CompanyDataCompanyExtensionInterface.
        :rtype: str
        """
        return self._available_payment_methods

    @available_payment_methods.setter
    def available_payment_methods(self, available_payment_methods):
        """Sets the available_payment_methods of this CompanyDataCompanyExtensionInterface.


        :param available_payment_methods: The available_payment_methods of this CompanyDataCompanyExtensionInterface.
        :type available_payment_methods: str
        """

        self._available_payment_methods = available_payment_methods

    @property
    def quote_config(self):
        """Gets the quote_config of this CompanyDataCompanyExtensionInterface.


        :return: The quote_config of this CompanyDataCompanyExtensionInterface.
        :rtype: NegotiableQuoteDataCompanyQuoteConfigInterface
        """
        return self._quote_config

    @quote_config.setter
    def quote_config(self, quote_config):
        """Sets the quote_config of this CompanyDataCompanyExtensionInterface.


        :param quote_config: The quote_config of this CompanyDataCompanyExtensionInterface.
        :type quote_config: NegotiableQuoteDataCompanyQuoteConfigInterface
        """

        self._quote_config = quote_config

    @property
    def use_config_settings(self):
        """Gets the use_config_settings of this CompanyDataCompanyExtensionInterface.


        :return: The use_config_settings of this CompanyDataCompanyExtensionInterface.
        :rtype: int
        """
        return self._use_config_settings

    @use_config_settings.setter
    def use_config_settings(self, use_config_settings):
        """Sets the use_config_settings of this CompanyDataCompanyExtensionInterface.


        :param use_config_settings: The use_config_settings of this CompanyDataCompanyExtensionInterface.
        :type use_config_settings: int
        """

        self._use_config_settings = use_config_settings
