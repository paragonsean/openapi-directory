# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eav_data_attribute_frontend_label_interface import EavDataAttributeFrontendLabelInterface
from openapi_server.models.eav_data_attribute_option_interface import EavDataAttributeOptionInterface
from openapi_server.models.eav_data_attribute_validation_rule_interface import EavDataAttributeValidationRuleInterface
from openapi_server.models.framework_attribute_interface import FrameworkAttributeInterface
from openapi_server import util


class CatalogDataProductAttributeInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_to: List[str]=None, attribute_code: str=None, attribute_id: int=None, backend_model: str=None, backend_type: str=None, custom_attributes: List[FrameworkAttributeInterface]=None, default_frontend_label: str=None, default_value: str=None, entity_type_id: str=None, extension_attributes: object=None, frontend_class: str=None, frontend_input: str=None, frontend_labels: List[EavDataAttributeFrontendLabelInterface]=None, is_comparable: str=None, is_filterable: bool=None, is_filterable_in_grid: bool=None, is_filterable_in_search: bool=None, is_html_allowed_on_front: bool=None, is_required: bool=None, is_searchable: str=None, is_unique: str=None, is_used_for_promo_rules: str=None, is_used_in_grid: bool=None, is_user_defined: bool=None, is_visible: bool=None, is_visible_in_advanced_search: str=None, is_visible_in_grid: bool=None, is_visible_on_front: str=None, is_wysiwyg_enabled: bool=None, note: str=None, options: List[EavDataAttributeOptionInterface]=None, position: int=None, scope: str=None, source_model: str=None, used_for_sort_by: bool=None, used_in_product_listing: str=None, validation_rules: List[EavDataAttributeValidationRuleInterface]=None):
        """CatalogDataProductAttributeInterface - a model defined in OpenAPI

        :param apply_to: The apply_to of this CatalogDataProductAttributeInterface.
        :param attribute_code: The attribute_code of this CatalogDataProductAttributeInterface.
        :param attribute_id: The attribute_id of this CatalogDataProductAttributeInterface.
        :param backend_model: The backend_model of this CatalogDataProductAttributeInterface.
        :param backend_type: The backend_type of this CatalogDataProductAttributeInterface.
        :param custom_attributes: The custom_attributes of this CatalogDataProductAttributeInterface.
        :param default_frontend_label: The default_frontend_label of this CatalogDataProductAttributeInterface.
        :param default_value: The default_value of this CatalogDataProductAttributeInterface.
        :param entity_type_id: The entity_type_id of this CatalogDataProductAttributeInterface.
        :param extension_attributes: The extension_attributes of this CatalogDataProductAttributeInterface.
        :param frontend_class: The frontend_class of this CatalogDataProductAttributeInterface.
        :param frontend_input: The frontend_input of this CatalogDataProductAttributeInterface.
        :param frontend_labels: The frontend_labels of this CatalogDataProductAttributeInterface.
        :param is_comparable: The is_comparable of this CatalogDataProductAttributeInterface.
        :param is_filterable: The is_filterable of this CatalogDataProductAttributeInterface.
        :param is_filterable_in_grid: The is_filterable_in_grid of this CatalogDataProductAttributeInterface.
        :param is_filterable_in_search: The is_filterable_in_search of this CatalogDataProductAttributeInterface.
        :param is_html_allowed_on_front: The is_html_allowed_on_front of this CatalogDataProductAttributeInterface.
        :param is_required: The is_required of this CatalogDataProductAttributeInterface.
        :param is_searchable: The is_searchable of this CatalogDataProductAttributeInterface.
        :param is_unique: The is_unique of this CatalogDataProductAttributeInterface.
        :param is_used_for_promo_rules: The is_used_for_promo_rules of this CatalogDataProductAttributeInterface.
        :param is_used_in_grid: The is_used_in_grid of this CatalogDataProductAttributeInterface.
        :param is_user_defined: The is_user_defined of this CatalogDataProductAttributeInterface.
        :param is_visible: The is_visible of this CatalogDataProductAttributeInterface.
        :param is_visible_in_advanced_search: The is_visible_in_advanced_search of this CatalogDataProductAttributeInterface.
        :param is_visible_in_grid: The is_visible_in_grid of this CatalogDataProductAttributeInterface.
        :param is_visible_on_front: The is_visible_on_front of this CatalogDataProductAttributeInterface.
        :param is_wysiwyg_enabled: The is_wysiwyg_enabled of this CatalogDataProductAttributeInterface.
        :param note: The note of this CatalogDataProductAttributeInterface.
        :param options: The options of this CatalogDataProductAttributeInterface.
        :param position: The position of this CatalogDataProductAttributeInterface.
        :param scope: The scope of this CatalogDataProductAttributeInterface.
        :param source_model: The source_model of this CatalogDataProductAttributeInterface.
        :param used_for_sort_by: The used_for_sort_by of this CatalogDataProductAttributeInterface.
        :param used_in_product_listing: The used_in_product_listing of this CatalogDataProductAttributeInterface.
        :param validation_rules: The validation_rules of this CatalogDataProductAttributeInterface.
        """
        self.openapi_types = {
            'apply_to': List[str],
            'attribute_code': str,
            'attribute_id': int,
            'backend_model': str,
            'backend_type': str,
            'custom_attributes': List[FrameworkAttributeInterface],
            'default_frontend_label': str,
            'default_value': str,
            'entity_type_id': str,
            'extension_attributes': object,
            'frontend_class': str,
            'frontend_input': str,
            'frontend_labels': List[EavDataAttributeFrontendLabelInterface],
            'is_comparable': str,
            'is_filterable': bool,
            'is_filterable_in_grid': bool,
            'is_filterable_in_search': bool,
            'is_html_allowed_on_front': bool,
            'is_required': bool,
            'is_searchable': str,
            'is_unique': str,
            'is_used_for_promo_rules': str,
            'is_used_in_grid': bool,
            'is_user_defined': bool,
            'is_visible': bool,
            'is_visible_in_advanced_search': str,
            'is_visible_in_grid': bool,
            'is_visible_on_front': str,
            'is_wysiwyg_enabled': bool,
            'note': str,
            'options': List[EavDataAttributeOptionInterface],
            'position': int,
            'scope': str,
            'source_model': str,
            'used_for_sort_by': bool,
            'used_in_product_listing': str,
            'validation_rules': List[EavDataAttributeValidationRuleInterface]
        }

        self.attribute_map = {
            'apply_to': 'apply_to',
            'attribute_code': 'attribute_code',
            'attribute_id': 'attribute_id',
            'backend_model': 'backend_model',
            'backend_type': 'backend_type',
            'custom_attributes': 'custom_attributes',
            'default_frontend_label': 'default_frontend_label',
            'default_value': 'default_value',
            'entity_type_id': 'entity_type_id',
            'extension_attributes': 'extension_attributes',
            'frontend_class': 'frontend_class',
            'frontend_input': 'frontend_input',
            'frontend_labels': 'frontend_labels',
            'is_comparable': 'is_comparable',
            'is_filterable': 'is_filterable',
            'is_filterable_in_grid': 'is_filterable_in_grid',
            'is_filterable_in_search': 'is_filterable_in_search',
            'is_html_allowed_on_front': 'is_html_allowed_on_front',
            'is_required': 'is_required',
            'is_searchable': 'is_searchable',
            'is_unique': 'is_unique',
            'is_used_for_promo_rules': 'is_used_for_promo_rules',
            'is_used_in_grid': 'is_used_in_grid',
            'is_user_defined': 'is_user_defined',
            'is_visible': 'is_visible',
            'is_visible_in_advanced_search': 'is_visible_in_advanced_search',
            'is_visible_in_grid': 'is_visible_in_grid',
            'is_visible_on_front': 'is_visible_on_front',
            'is_wysiwyg_enabled': 'is_wysiwyg_enabled',
            'note': 'note',
            'options': 'options',
            'position': 'position',
            'scope': 'scope',
            'source_model': 'source_model',
            'used_for_sort_by': 'used_for_sort_by',
            'used_in_product_listing': 'used_in_product_listing',
            'validation_rules': 'validation_rules'
        }

        self._apply_to = apply_to
        self._attribute_code = attribute_code
        self._attribute_id = attribute_id
        self._backend_model = backend_model
        self._backend_type = backend_type
        self._custom_attributes = custom_attributes
        self._default_frontend_label = default_frontend_label
        self._default_value = default_value
        self._entity_type_id = entity_type_id
        self._extension_attributes = extension_attributes
        self._frontend_class = frontend_class
        self._frontend_input = frontend_input
        self._frontend_labels = frontend_labels
        self._is_comparable = is_comparable
        self._is_filterable = is_filterable
        self._is_filterable_in_grid = is_filterable_in_grid
        self._is_filterable_in_search = is_filterable_in_search
        self._is_html_allowed_on_front = is_html_allowed_on_front
        self._is_required = is_required
        self._is_searchable = is_searchable
        self._is_unique = is_unique
        self._is_used_for_promo_rules = is_used_for_promo_rules
        self._is_used_in_grid = is_used_in_grid
        self._is_user_defined = is_user_defined
        self._is_visible = is_visible
        self._is_visible_in_advanced_search = is_visible_in_advanced_search
        self._is_visible_in_grid = is_visible_in_grid
        self._is_visible_on_front = is_visible_on_front
        self._is_wysiwyg_enabled = is_wysiwyg_enabled
        self._note = note
        self._options = options
        self._position = position
        self._scope = scope
        self._source_model = source_model
        self._used_for_sort_by = used_for_sort_by
        self._used_in_product_listing = used_in_product_listing
        self._validation_rules = validation_rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataProductAttributeInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-product-attribute-interface of this CatalogDataProductAttributeInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_to(self):
        """Gets the apply_to of this CatalogDataProductAttributeInterface.

        Apply to value for the element

        :return: The apply_to of this CatalogDataProductAttributeInterface.
        :rtype: List[str]
        """
        return self._apply_to

    @apply_to.setter
    def apply_to(self, apply_to):
        """Sets the apply_to of this CatalogDataProductAttributeInterface.

        Apply to value for the element

        :param apply_to: The apply_to of this CatalogDataProductAttributeInterface.
        :type apply_to: List[str]
        """

        self._apply_to = apply_to

    @property
    def attribute_code(self):
        """Gets the attribute_code of this CatalogDataProductAttributeInterface.

        Code of the attribute.

        :return: The attribute_code of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._attribute_code

    @attribute_code.setter
    def attribute_code(self, attribute_code):
        """Sets the attribute_code of this CatalogDataProductAttributeInterface.

        Code of the attribute.

        :param attribute_code: The attribute_code of this CatalogDataProductAttributeInterface.
        :type attribute_code: str
        """
        if attribute_code is None:
            raise ValueError("Invalid value for `attribute_code`, must not be `None`")

        self._attribute_code = attribute_code

    @property
    def attribute_id(self):
        """Gets the attribute_id of this CatalogDataProductAttributeInterface.

        Id of the attribute.

        :return: The attribute_id of this CatalogDataProductAttributeInterface.
        :rtype: int
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """Sets the attribute_id of this CatalogDataProductAttributeInterface.

        Id of the attribute.

        :param attribute_id: The attribute_id of this CatalogDataProductAttributeInterface.
        :type attribute_id: int
        """

        self._attribute_id = attribute_id

    @property
    def backend_model(self):
        """Gets the backend_model of this CatalogDataProductAttributeInterface.

        Backend model

        :return: The backend_model of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._backend_model

    @backend_model.setter
    def backend_model(self, backend_model):
        """Sets the backend_model of this CatalogDataProductAttributeInterface.

        Backend model

        :param backend_model: The backend_model of this CatalogDataProductAttributeInterface.
        :type backend_model: str
        """

        self._backend_model = backend_model

    @property
    def backend_type(self):
        """Gets the backend_type of this CatalogDataProductAttributeInterface.

        Backend type.

        :return: The backend_type of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._backend_type

    @backend_type.setter
    def backend_type(self, backend_type):
        """Sets the backend_type of this CatalogDataProductAttributeInterface.

        Backend type.

        :param backend_type: The backend_type of this CatalogDataProductAttributeInterface.
        :type backend_type: str
        """

        self._backend_type = backend_type

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this CatalogDataProductAttributeInterface.

        Custom attributes values.

        :return: The custom_attributes of this CatalogDataProductAttributeInterface.
        :rtype: List[FrameworkAttributeInterface]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this CatalogDataProductAttributeInterface.

        Custom attributes values.

        :param custom_attributes: The custom_attributes of this CatalogDataProductAttributeInterface.
        :type custom_attributes: List[FrameworkAttributeInterface]
        """

        self._custom_attributes = custom_attributes

    @property
    def default_frontend_label(self):
        """Gets the default_frontend_label of this CatalogDataProductAttributeInterface.

        Frontend label for default store

        :return: The default_frontend_label of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._default_frontend_label

    @default_frontend_label.setter
    def default_frontend_label(self, default_frontend_label):
        """Sets the default_frontend_label of this CatalogDataProductAttributeInterface.

        Frontend label for default store

        :param default_frontend_label: The default_frontend_label of this CatalogDataProductAttributeInterface.
        :type default_frontend_label: str
        """

        self._default_frontend_label = default_frontend_label

    @property
    def default_value(self):
        """Gets the default_value of this CatalogDataProductAttributeInterface.

        Default value for the element.

        :return: The default_value of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this CatalogDataProductAttributeInterface.

        Default value for the element.

        :param default_value: The default_value of this CatalogDataProductAttributeInterface.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def entity_type_id(self):
        """Gets the entity_type_id of this CatalogDataProductAttributeInterface.

        Entity type id

        :return: The entity_type_id of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._entity_type_id

    @entity_type_id.setter
    def entity_type_id(self, entity_type_id):
        """Sets the entity_type_id of this CatalogDataProductAttributeInterface.

        Entity type id

        :param entity_type_id: The entity_type_id of this CatalogDataProductAttributeInterface.
        :type entity_type_id: str
        """
        if entity_type_id is None:
            raise ValueError("Invalid value for `entity_type_id`, must not be `None`")

        self._entity_type_id = entity_type_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CatalogDataProductAttributeInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\EavAttributeInterface

        :return: The extension_attributes of this CatalogDataProductAttributeInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CatalogDataProductAttributeInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\EavAttributeInterface

        :param extension_attributes: The extension_attributes of this CatalogDataProductAttributeInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def frontend_class(self):
        """Gets the frontend_class of this CatalogDataProductAttributeInterface.

        Frontend class of attribute

        :return: The frontend_class of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._frontend_class

    @frontend_class.setter
    def frontend_class(self, frontend_class):
        """Sets the frontend_class of this CatalogDataProductAttributeInterface.

        Frontend class of attribute

        :param frontend_class: The frontend_class of this CatalogDataProductAttributeInterface.
        :type frontend_class: str
        """

        self._frontend_class = frontend_class

    @property
    def frontend_input(self):
        """Gets the frontend_input of this CatalogDataProductAttributeInterface.

        HTML for input element.

        :return: The frontend_input of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._frontend_input

    @frontend_input.setter
    def frontend_input(self, frontend_input):
        """Sets the frontend_input of this CatalogDataProductAttributeInterface.

        HTML for input element.

        :param frontend_input: The frontend_input of this CatalogDataProductAttributeInterface.
        :type frontend_input: str
        """
        if frontend_input is None:
            raise ValueError("Invalid value for `frontend_input`, must not be `None`")

        self._frontend_input = frontend_input

    @property
    def frontend_labels(self):
        """Gets the frontend_labels of this CatalogDataProductAttributeInterface.

        Frontend label for each store

        :return: The frontend_labels of this CatalogDataProductAttributeInterface.
        :rtype: List[EavDataAttributeFrontendLabelInterface]
        """
        return self._frontend_labels

    @frontend_labels.setter
    def frontend_labels(self, frontend_labels):
        """Sets the frontend_labels of this CatalogDataProductAttributeInterface.

        Frontend label for each store

        :param frontend_labels: The frontend_labels of this CatalogDataProductAttributeInterface.
        :type frontend_labels: List[EavDataAttributeFrontendLabelInterface]
        """
        if frontend_labels is None:
            raise ValueError("Invalid value for `frontend_labels`, must not be `None`")

        self._frontend_labels = frontend_labels

    @property
    def is_comparable(self):
        """Gets the is_comparable of this CatalogDataProductAttributeInterface.

        The attribute can be compared on the frontend

        :return: The is_comparable of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._is_comparable

    @is_comparable.setter
    def is_comparable(self, is_comparable):
        """Sets the is_comparable of this CatalogDataProductAttributeInterface.

        The attribute can be compared on the frontend

        :param is_comparable: The is_comparable of this CatalogDataProductAttributeInterface.
        :type is_comparable: str
        """

        self._is_comparable = is_comparable

    @property
    def is_filterable(self):
        """Gets the is_filterable of this CatalogDataProductAttributeInterface.

        It used in layered navigation

        :return: The is_filterable of this CatalogDataProductAttributeInterface.
        :rtype: bool
        """
        return self._is_filterable

    @is_filterable.setter
    def is_filterable(self, is_filterable):
        """Sets the is_filterable of this CatalogDataProductAttributeInterface.

        It used in layered navigation

        :param is_filterable: The is_filterable of this CatalogDataProductAttributeInterface.
        :type is_filterable: bool
        """

        self._is_filterable = is_filterable

    @property
    def is_filterable_in_grid(self):
        """Gets the is_filterable_in_grid of this CatalogDataProductAttributeInterface.

        It is filterable in catalog product grid

        :return: The is_filterable_in_grid of this CatalogDataProductAttributeInterface.
        :rtype: bool
        """
        return self._is_filterable_in_grid

    @is_filterable_in_grid.setter
    def is_filterable_in_grid(self, is_filterable_in_grid):
        """Sets the is_filterable_in_grid of this CatalogDataProductAttributeInterface.

        It is filterable in catalog product grid

        :param is_filterable_in_grid: The is_filterable_in_grid of this CatalogDataProductAttributeInterface.
        :type is_filterable_in_grid: bool
        """

        self._is_filterable_in_grid = is_filterable_in_grid

    @property
    def is_filterable_in_search(self):
        """Gets the is_filterable_in_search of this CatalogDataProductAttributeInterface.

        It is used in search results layered navigation

        :return: The is_filterable_in_search of this CatalogDataProductAttributeInterface.
        :rtype: bool
        """
        return self._is_filterable_in_search

    @is_filterable_in_search.setter
    def is_filterable_in_search(self, is_filterable_in_search):
        """Sets the is_filterable_in_search of this CatalogDataProductAttributeInterface.

        It is used in search results layered navigation

        :param is_filterable_in_search: The is_filterable_in_search of this CatalogDataProductAttributeInterface.
        :type is_filterable_in_search: bool
        """

        self._is_filterable_in_search = is_filterable_in_search

    @property
    def is_html_allowed_on_front(self):
        """Gets the is_html_allowed_on_front of this CatalogDataProductAttributeInterface.

        The HTML tags are allowed on the frontend

        :return: The is_html_allowed_on_front of this CatalogDataProductAttributeInterface.
        :rtype: bool
        """
        return self._is_html_allowed_on_front

    @is_html_allowed_on_front.setter
    def is_html_allowed_on_front(self, is_html_allowed_on_front):
        """Sets the is_html_allowed_on_front of this CatalogDataProductAttributeInterface.

        The HTML tags are allowed on the frontend

        :param is_html_allowed_on_front: The is_html_allowed_on_front of this CatalogDataProductAttributeInterface.
        :type is_html_allowed_on_front: bool
        """

        self._is_html_allowed_on_front = is_html_allowed_on_front

    @property
    def is_required(self):
        """Gets the is_required of this CatalogDataProductAttributeInterface.

        Attribute is required.

        :return: The is_required of this CatalogDataProductAttributeInterface.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this CatalogDataProductAttributeInterface.

        Attribute is required.

        :param is_required: The is_required of this CatalogDataProductAttributeInterface.
        :type is_required: bool
        """
        if is_required is None:
            raise ValueError("Invalid value for `is_required`, must not be `None`")

        self._is_required = is_required

    @property
    def is_searchable(self):
        """Gets the is_searchable of this CatalogDataProductAttributeInterface.

        The attribute can be used in Quick Search

        :return: The is_searchable of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._is_searchable

    @is_searchable.setter
    def is_searchable(self, is_searchable):
        """Sets the is_searchable of this CatalogDataProductAttributeInterface.

        The attribute can be used in Quick Search

        :param is_searchable: The is_searchable of this CatalogDataProductAttributeInterface.
        :type is_searchable: str
        """

        self._is_searchable = is_searchable

    @property
    def is_unique(self):
        """Gets the is_unique of this CatalogDataProductAttributeInterface.

        This is a unique attribute

        :return: The is_unique of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._is_unique

    @is_unique.setter
    def is_unique(self, is_unique):
        """Sets the is_unique of this CatalogDataProductAttributeInterface.

        This is a unique attribute

        :param is_unique: The is_unique of this CatalogDataProductAttributeInterface.
        :type is_unique: str
        """

        self._is_unique = is_unique

    @property
    def is_used_for_promo_rules(self):
        """Gets the is_used_for_promo_rules of this CatalogDataProductAttributeInterface.

        The attribute can be used for promo rules

        :return: The is_used_for_promo_rules of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._is_used_for_promo_rules

    @is_used_for_promo_rules.setter
    def is_used_for_promo_rules(self, is_used_for_promo_rules):
        """Sets the is_used_for_promo_rules of this CatalogDataProductAttributeInterface.

        The attribute can be used for promo rules

        :param is_used_for_promo_rules: The is_used_for_promo_rules of this CatalogDataProductAttributeInterface.
        :type is_used_for_promo_rules: str
        """

        self._is_used_for_promo_rules = is_used_for_promo_rules

    @property
    def is_used_in_grid(self):
        """Gets the is_used_in_grid of this CatalogDataProductAttributeInterface.

        It is used in catalog product grid

        :return: The is_used_in_grid of this CatalogDataProductAttributeInterface.
        :rtype: bool
        """
        return self._is_used_in_grid

    @is_used_in_grid.setter
    def is_used_in_grid(self, is_used_in_grid):
        """Sets the is_used_in_grid of this CatalogDataProductAttributeInterface.

        It is used in catalog product grid

        :param is_used_in_grid: The is_used_in_grid of this CatalogDataProductAttributeInterface.
        :type is_used_in_grid: bool
        """

        self._is_used_in_grid = is_used_in_grid

    @property
    def is_user_defined(self):
        """Gets the is_user_defined of this CatalogDataProductAttributeInterface.

        Current attribute has been defined by a user.

        :return: The is_user_defined of this CatalogDataProductAttributeInterface.
        :rtype: bool
        """
        return self._is_user_defined

    @is_user_defined.setter
    def is_user_defined(self, is_user_defined):
        """Sets the is_user_defined of this CatalogDataProductAttributeInterface.

        Current attribute has been defined by a user.

        :param is_user_defined: The is_user_defined of this CatalogDataProductAttributeInterface.
        :type is_user_defined: bool
        """

        self._is_user_defined = is_user_defined

    @property
    def is_visible(self):
        """Gets the is_visible of this CatalogDataProductAttributeInterface.

        Attribute is visible on frontend.

        :return: The is_visible of this CatalogDataProductAttributeInterface.
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this CatalogDataProductAttributeInterface.

        Attribute is visible on frontend.

        :param is_visible: The is_visible of this CatalogDataProductAttributeInterface.
        :type is_visible: bool
        """

        self._is_visible = is_visible

    @property
    def is_visible_in_advanced_search(self):
        """Gets the is_visible_in_advanced_search of this CatalogDataProductAttributeInterface.

        The attribute can be used in Advanced Search

        :return: The is_visible_in_advanced_search of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._is_visible_in_advanced_search

    @is_visible_in_advanced_search.setter
    def is_visible_in_advanced_search(self, is_visible_in_advanced_search):
        """Sets the is_visible_in_advanced_search of this CatalogDataProductAttributeInterface.

        The attribute can be used in Advanced Search

        :param is_visible_in_advanced_search: The is_visible_in_advanced_search of this CatalogDataProductAttributeInterface.
        :type is_visible_in_advanced_search: str
        """

        self._is_visible_in_advanced_search = is_visible_in_advanced_search

    @property
    def is_visible_in_grid(self):
        """Gets the is_visible_in_grid of this CatalogDataProductAttributeInterface.

        It is visible in catalog product grid

        :return: The is_visible_in_grid of this CatalogDataProductAttributeInterface.
        :rtype: bool
        """
        return self._is_visible_in_grid

    @is_visible_in_grid.setter
    def is_visible_in_grid(self, is_visible_in_grid):
        """Sets the is_visible_in_grid of this CatalogDataProductAttributeInterface.

        It is visible in catalog product grid

        :param is_visible_in_grid: The is_visible_in_grid of this CatalogDataProductAttributeInterface.
        :type is_visible_in_grid: bool
        """

        self._is_visible_in_grid = is_visible_in_grid

    @property
    def is_visible_on_front(self):
        """Gets the is_visible_on_front of this CatalogDataProductAttributeInterface.

        The attribute is visible on the frontend

        :return: The is_visible_on_front of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._is_visible_on_front

    @is_visible_on_front.setter
    def is_visible_on_front(self, is_visible_on_front):
        """Sets the is_visible_on_front of this CatalogDataProductAttributeInterface.

        The attribute is visible on the frontend

        :param is_visible_on_front: The is_visible_on_front of this CatalogDataProductAttributeInterface.
        :type is_visible_on_front: str
        """

        self._is_visible_on_front = is_visible_on_front

    @property
    def is_wysiwyg_enabled(self):
        """Gets the is_wysiwyg_enabled of this CatalogDataProductAttributeInterface.

        WYSIWYG flag

        :return: The is_wysiwyg_enabled of this CatalogDataProductAttributeInterface.
        :rtype: bool
        """
        return self._is_wysiwyg_enabled

    @is_wysiwyg_enabled.setter
    def is_wysiwyg_enabled(self, is_wysiwyg_enabled):
        """Sets the is_wysiwyg_enabled of this CatalogDataProductAttributeInterface.

        WYSIWYG flag

        :param is_wysiwyg_enabled: The is_wysiwyg_enabled of this CatalogDataProductAttributeInterface.
        :type is_wysiwyg_enabled: bool
        """

        self._is_wysiwyg_enabled = is_wysiwyg_enabled

    @property
    def note(self):
        """Gets the note of this CatalogDataProductAttributeInterface.

        The note attribute for the element.

        :return: The note of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CatalogDataProductAttributeInterface.

        The note attribute for the element.

        :param note: The note of this CatalogDataProductAttributeInterface.
        :type note: str
        """

        self._note = note

    @property
    def options(self):
        """Gets the options of this CatalogDataProductAttributeInterface.

        Options of the attribute (key => value pairs for select)

        :return: The options of this CatalogDataProductAttributeInterface.
        :rtype: List[EavDataAttributeOptionInterface]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CatalogDataProductAttributeInterface.

        Options of the attribute (key => value pairs for select)

        :param options: The options of this CatalogDataProductAttributeInterface.
        :type options: List[EavDataAttributeOptionInterface]
        """

        self._options = options

    @property
    def position(self):
        """Gets the position of this CatalogDataProductAttributeInterface.

        Position

        :return: The position of this CatalogDataProductAttributeInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CatalogDataProductAttributeInterface.

        Position

        :param position: The position of this CatalogDataProductAttributeInterface.
        :type position: int
        """

        self._position = position

    @property
    def scope(self):
        """Gets the scope of this CatalogDataProductAttributeInterface.

        Attribute scope

        :return: The scope of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CatalogDataProductAttributeInterface.

        Attribute scope

        :param scope: The scope of this CatalogDataProductAttributeInterface.
        :type scope: str
        """

        self._scope = scope

    @property
    def source_model(self):
        """Gets the source_model of this CatalogDataProductAttributeInterface.

        Source model

        :return: The source_model of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._source_model

    @source_model.setter
    def source_model(self, source_model):
        """Sets the source_model of this CatalogDataProductAttributeInterface.

        Source model

        :param source_model: The source_model of this CatalogDataProductAttributeInterface.
        :type source_model: str
        """

        self._source_model = source_model

    @property
    def used_for_sort_by(self):
        """Gets the used_for_sort_by of this CatalogDataProductAttributeInterface.

        It is used for sorting in product listing

        :return: The used_for_sort_by of this CatalogDataProductAttributeInterface.
        :rtype: bool
        """
        return self._used_for_sort_by

    @used_for_sort_by.setter
    def used_for_sort_by(self, used_for_sort_by):
        """Sets the used_for_sort_by of this CatalogDataProductAttributeInterface.

        It is used for sorting in product listing

        :param used_for_sort_by: The used_for_sort_by of this CatalogDataProductAttributeInterface.
        :type used_for_sort_by: bool
        """

        self._used_for_sort_by = used_for_sort_by

    @property
    def used_in_product_listing(self):
        """Gets the used_in_product_listing of this CatalogDataProductAttributeInterface.

        The attribute can be used in product listing

        :return: The used_in_product_listing of this CatalogDataProductAttributeInterface.
        :rtype: str
        """
        return self._used_in_product_listing

    @used_in_product_listing.setter
    def used_in_product_listing(self, used_in_product_listing):
        """Sets the used_in_product_listing of this CatalogDataProductAttributeInterface.

        The attribute can be used in product listing

        :param used_in_product_listing: The used_in_product_listing of this CatalogDataProductAttributeInterface.
        :type used_in_product_listing: str
        """

        self._used_in_product_listing = used_in_product_listing

    @property
    def validation_rules(self):
        """Gets the validation_rules of this CatalogDataProductAttributeInterface.

        Validation rules.

        :return: The validation_rules of this CatalogDataProductAttributeInterface.
        :rtype: List[EavDataAttributeValidationRuleInterface]
        """
        return self._validation_rules

    @validation_rules.setter
    def validation_rules(self, validation_rules):
        """Sets the validation_rules of this CatalogDataProductAttributeInterface.

        Validation rules.

        :param validation_rules: The validation_rules of this CatalogDataProductAttributeInterface.
        :type validation_rules: List[EavDataAttributeValidationRuleInterface]
        """

        self._validation_rules = validation_rules
