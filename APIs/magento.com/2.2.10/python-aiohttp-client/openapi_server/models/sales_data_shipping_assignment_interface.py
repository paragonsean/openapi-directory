# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sales_data_order_item_interface import SalesDataOrderItemInterface
from openapi_server.models.sales_data_shipping_interface import SalesDataShippingInterface
from openapi_server import util


class SalesDataShippingAssignmentInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension_attributes: object=None, items: List[SalesDataOrderItemInterface]=None, shipping: SalesDataShippingInterface=None, stock_id: int=None):
        """SalesDataShippingAssignmentInterface - a model defined in OpenAPI

        :param extension_attributes: The extension_attributes of this SalesDataShippingAssignmentInterface.
        :param items: The items of this SalesDataShippingAssignmentInterface.
        :param shipping: The shipping of this SalesDataShippingAssignmentInterface.
        :param stock_id: The stock_id of this SalesDataShippingAssignmentInterface.
        """
        self.openapi_types = {
            'extension_attributes': object,
            'items': List[SalesDataOrderItemInterface],
            'shipping': SalesDataShippingInterface,
            'stock_id': int
        }

        self.attribute_map = {
            'extension_attributes': 'extension_attributes',
            'items': 'items',
            'shipping': 'shipping',
            'stock_id': 'stock_id'
        }

        self._extension_attributes = extension_attributes
        self._items = items
        self._shipping = shipping
        self._stock_id = stock_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesDataShippingAssignmentInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sales-data-shipping-assignment-interface of this SalesDataShippingAssignmentInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this SalesDataShippingAssignmentInterface.

        ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShippingAssignmentInterface

        :return: The extension_attributes of this SalesDataShippingAssignmentInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this SalesDataShippingAssignmentInterface.

        ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShippingAssignmentInterface

        :param extension_attributes: The extension_attributes of this SalesDataShippingAssignmentInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def items(self):
        """Gets the items of this SalesDataShippingAssignmentInterface.

        Order items of shipping assignment

        :return: The items of this SalesDataShippingAssignmentInterface.
        :rtype: List[SalesDataOrderItemInterface]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SalesDataShippingAssignmentInterface.

        Order items of shipping assignment

        :param items: The items of this SalesDataShippingAssignmentInterface.
        :type items: List[SalesDataOrderItemInterface]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def shipping(self):
        """Gets the shipping of this SalesDataShippingAssignmentInterface.


        :return: The shipping of this SalesDataShippingAssignmentInterface.
        :rtype: SalesDataShippingInterface
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this SalesDataShippingAssignmentInterface.


        :param shipping: The shipping of this SalesDataShippingAssignmentInterface.
        :type shipping: SalesDataShippingInterface
        """
        if shipping is None:
            raise ValueError("Invalid value for `shipping`, must not be `None`")

        self._shipping = shipping

    @property
    def stock_id(self):
        """Gets the stock_id of this SalesDataShippingAssignmentInterface.

        Stock id

        :return: The stock_id of this SalesDataShippingAssignmentInterface.
        :rtype: int
        """
        return self._stock_id

    @stock_id.setter
    def stock_id(self, stock_id):
        """Sets the stock_id of this SalesDataShippingAssignmentInterface.

        Stock id

        :param stock_id: The stock_id of this SalesDataShippingAssignmentInterface.
        :type stock_id: int
        """

        self._stock_id = stock_id
