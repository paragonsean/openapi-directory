# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NegotiableQuoteDataCommentAttachmentInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment_id: int=None, comment_id: int=None, extension_attributes: object=None, file_name: str=None, file_path: str=None, file_type: str=None):
        """NegotiableQuoteDataCommentAttachmentInterface - a model defined in OpenAPI

        :param attachment_id: The attachment_id of this NegotiableQuoteDataCommentAttachmentInterface.
        :param comment_id: The comment_id of this NegotiableQuoteDataCommentAttachmentInterface.
        :param extension_attributes: The extension_attributes of this NegotiableQuoteDataCommentAttachmentInterface.
        :param file_name: The file_name of this NegotiableQuoteDataCommentAttachmentInterface.
        :param file_path: The file_path of this NegotiableQuoteDataCommentAttachmentInterface.
        :param file_type: The file_type of this NegotiableQuoteDataCommentAttachmentInterface.
        """
        self.openapi_types = {
            'attachment_id': int,
            'comment_id': int,
            'extension_attributes': object,
            'file_name': str,
            'file_path': str,
            'file_type': str
        }

        self.attribute_map = {
            'attachment_id': 'attachment_id',
            'comment_id': 'comment_id',
            'extension_attributes': 'extension_attributes',
            'file_name': 'file_name',
            'file_path': 'file_path',
            'file_type': 'file_type'
        }

        self._attachment_id = attachment_id
        self._comment_id = comment_id
        self._extension_attributes = extension_attributes
        self._file_name = file_name
        self._file_path = file_path
        self._file_type = file_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NegotiableQuoteDataCommentAttachmentInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The negotiable-quote-data-comment-attachment-interface of this NegotiableQuoteDataCommentAttachmentInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment_id(self):
        """Gets the attachment_id of this NegotiableQuoteDataCommentAttachmentInterface.

        Attachment ID.

        :return: The attachment_id of this NegotiableQuoteDataCommentAttachmentInterface.
        :rtype: int
        """
        return self._attachment_id

    @attachment_id.setter
    def attachment_id(self, attachment_id):
        """Sets the attachment_id of this NegotiableQuoteDataCommentAttachmentInterface.

        Attachment ID.

        :param attachment_id: The attachment_id of this NegotiableQuoteDataCommentAttachmentInterface.
        :type attachment_id: int
        """
        if attachment_id is None:
            raise ValueError("Invalid value for `attachment_id`, must not be `None`")

        self._attachment_id = attachment_id

    @property
    def comment_id(self):
        """Gets the comment_id of this NegotiableQuoteDataCommentAttachmentInterface.

        Comment ID.

        :return: The comment_id of this NegotiableQuoteDataCommentAttachmentInterface.
        :rtype: int
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id):
        """Sets the comment_id of this NegotiableQuoteDataCommentAttachmentInterface.

        Comment ID.

        :param comment_id: The comment_id of this NegotiableQuoteDataCommentAttachmentInterface.
        :type comment_id: int
        """
        if comment_id is None:
            raise ValueError("Invalid value for `comment_id`, must not be `None`")

        self._comment_id = comment_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this NegotiableQuoteDataCommentAttachmentInterface.

        ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\CommentAttachmentInterface

        :return: The extension_attributes of this NegotiableQuoteDataCommentAttachmentInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this NegotiableQuoteDataCommentAttachmentInterface.

        ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\CommentAttachmentInterface

        :param extension_attributes: The extension_attributes of this NegotiableQuoteDataCommentAttachmentInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def file_name(self):
        """Gets the file_name of this NegotiableQuoteDataCommentAttachmentInterface.

        File name.

        :return: The file_name of this NegotiableQuoteDataCommentAttachmentInterface.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this NegotiableQuoteDataCommentAttachmentInterface.

        File name.

        :param file_name: The file_name of this NegotiableQuoteDataCommentAttachmentInterface.
        :type file_name: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")

        self._file_name = file_name

    @property
    def file_path(self):
        """Gets the file_path of this NegotiableQuoteDataCommentAttachmentInterface.

        File path.

        :return: The file_path of this NegotiableQuoteDataCommentAttachmentInterface.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this NegotiableQuoteDataCommentAttachmentInterface.

        File path.

        :param file_path: The file_path of this NegotiableQuoteDataCommentAttachmentInterface.
        :type file_path: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")

        self._file_path = file_path

    @property
    def file_type(self):
        """Gets the file_type of this NegotiableQuoteDataCommentAttachmentInterface.

        File type.

        :return: The file_type of this NegotiableQuoteDataCommentAttachmentInterface.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this NegotiableQuoteDataCommentAttachmentInterface.

        File type.

        :param file_type: The file_type of this NegotiableQuoteDataCommentAttachmentInterface.
        :type file_type: str
        """
        if file_type is None:
            raise ValueError("Invalid value for `file_type`, must not be `None`")

        self._file_type = file_type
