# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NegotiableQuoteDataNegotiableQuoteTotalsInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_cost_total: float=None, base_original_price_incl_tax: float=None, base_original_tax: float=None, base_original_total: float=None, base_to_quote_rate: float=None, cost_total: float=None, created_at: str=None, customer_group: int=None, items_count: int=None, negotiated_price_type: int=None, negotiated_price_value: float=None, original_price_incl_tax: float=None, original_tax: float=None, original_total: float=None, quote_status: str=None, updated_at: str=None):
        """NegotiableQuoteDataNegotiableQuoteTotalsInterface - a model defined in OpenAPI

        :param base_cost_total: The base_cost_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param base_original_price_incl_tax: The base_original_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param base_original_tax: The base_original_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param base_original_total: The base_original_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param base_to_quote_rate: The base_to_quote_rate of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param cost_total: The cost_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param created_at: The created_at of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param customer_group: The customer_group of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param items_count: The items_count of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param negotiated_price_type: The negotiated_price_type of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param negotiated_price_value: The negotiated_price_value of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param original_price_incl_tax: The original_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param original_tax: The original_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param original_total: The original_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param quote_status: The quote_status of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :param updated_at: The updated_at of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        """
        self.openapi_types = {
            'base_cost_total': float,
            'base_original_price_incl_tax': float,
            'base_original_tax': float,
            'base_original_total': float,
            'base_to_quote_rate': float,
            'cost_total': float,
            'created_at': str,
            'customer_group': int,
            'items_count': int,
            'negotiated_price_type': int,
            'negotiated_price_value': float,
            'original_price_incl_tax': float,
            'original_tax': float,
            'original_total': float,
            'quote_status': str,
            'updated_at': str
        }

        self.attribute_map = {
            'base_cost_total': 'base_cost_total',
            'base_original_price_incl_tax': 'base_original_price_incl_tax',
            'base_original_tax': 'base_original_tax',
            'base_original_total': 'base_original_total',
            'base_to_quote_rate': 'base_to_quote_rate',
            'cost_total': 'cost_total',
            'created_at': 'created_at',
            'customer_group': 'customer_group',
            'items_count': 'items_count',
            'negotiated_price_type': 'negotiated_price_type',
            'negotiated_price_value': 'negotiated_price_value',
            'original_price_incl_tax': 'original_price_incl_tax',
            'original_tax': 'original_tax',
            'original_total': 'original_total',
            'quote_status': 'quote_status',
            'updated_at': 'updated_at'
        }

        self._base_cost_total = base_cost_total
        self._base_original_price_incl_tax = base_original_price_incl_tax
        self._base_original_tax = base_original_tax
        self._base_original_total = base_original_total
        self._base_to_quote_rate = base_to_quote_rate
        self._cost_total = cost_total
        self._created_at = created_at
        self._customer_group = customer_group
        self._items_count = items_count
        self._negotiated_price_type = negotiated_price_type
        self._negotiated_price_value = negotiated_price_value
        self._original_price_incl_tax = original_price_incl_tax
        self._original_tax = original_tax
        self._original_total = original_total
        self._quote_status = quote_status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NegotiableQuoteDataNegotiableQuoteTotalsInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The negotiable-quote-data-negotiable-quote-totals-interface of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_cost_total(self):
        """Gets the base_cost_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Total cost for quote in base currency.

        :return: The base_cost_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: float
        """
        return self._base_cost_total

    @base_cost_total.setter
    def base_cost_total(self, base_cost_total):
        """Sets the base_cost_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Total cost for quote in base currency.

        :param base_cost_total: The base_cost_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type base_cost_total: float
        """
        if base_cost_total is None:
            raise ValueError("Invalid value for `base_cost_total`, must not be `None`")

        self._base_cost_total = base_cost_total

    @property
    def base_original_price_incl_tax(self):
        """Gets the base_original_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Original price with included tax for quote in base currency.

        :return: The base_original_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: float
        """
        return self._base_original_price_incl_tax

    @base_original_price_incl_tax.setter
    def base_original_price_incl_tax(self, base_original_price_incl_tax):
        """Sets the base_original_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Original price with included tax for quote in base currency.

        :param base_original_price_incl_tax: The base_original_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type base_original_price_incl_tax: float
        """
        if base_original_price_incl_tax is None:
            raise ValueError("Invalid value for `base_original_price_incl_tax`, must not be `None`")

        self._base_original_price_incl_tax = base_original_price_incl_tax

    @property
    def base_original_tax(self):
        """Gets the base_original_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Original tax amount for quote in base currency.

        :return: The base_original_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: float
        """
        return self._base_original_tax

    @base_original_tax.setter
    def base_original_tax(self, base_original_tax):
        """Sets the base_original_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Original tax amount for quote in base currency.

        :param base_original_tax: The base_original_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type base_original_tax: float
        """
        if base_original_tax is None:
            raise ValueError("Invalid value for `base_original_tax`, must not be `None`")

        self._base_original_tax = base_original_tax

    @property
    def base_original_total(self):
        """Gets the base_original_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Original quote total in base currency.

        :return: The base_original_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: float
        """
        return self._base_original_total

    @base_original_total.setter
    def base_original_total(self, base_original_total):
        """Sets the base_original_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Original quote total in base currency.

        :param base_original_total: The base_original_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type base_original_total: float
        """
        if base_original_total is None:
            raise ValueError("Invalid value for `base_original_total`, must not be `None`")

        self._base_original_total = base_original_total

    @property
    def base_to_quote_rate(self):
        """Gets the base_to_quote_rate of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Base currency to quote currency rate.

        :return: The base_to_quote_rate of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: float
        """
        return self._base_to_quote_rate

    @base_to_quote_rate.setter
    def base_to_quote_rate(self, base_to_quote_rate):
        """Sets the base_to_quote_rate of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Base currency to quote currency rate.

        :param base_to_quote_rate: The base_to_quote_rate of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type base_to_quote_rate: float
        """
        if base_to_quote_rate is None:
            raise ValueError("Invalid value for `base_to_quote_rate`, must not be `None`")

        self._base_to_quote_rate = base_to_quote_rate

    @property
    def cost_total(self):
        """Gets the cost_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Total cost for quote.

        :return: The cost_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: float
        """
        return self._cost_total

    @cost_total.setter
    def cost_total(self, cost_total):
        """Sets the cost_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Total cost for quote.

        :param cost_total: The cost_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type cost_total: float
        """
        if cost_total is None:
            raise ValueError("Invalid value for `cost_total`, must not be `None`")

        self._cost_total = cost_total

    @property
    def created_at(self):
        """Gets the created_at of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        The cart creation date and time.

        :return: The created_at of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        The cart creation date and time.

        :param created_at: The created_at of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def customer_group(self):
        """Gets the customer_group of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Customer group id.

        :return: The customer_group of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: int
        """
        return self._customer_group

    @customer_group.setter
    def customer_group(self, customer_group):
        """Sets the customer_group of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Customer group id.

        :param customer_group: The customer_group of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type customer_group: int
        """
        if customer_group is None:
            raise ValueError("Invalid value for `customer_group`, must not be `None`")

        self._customer_group = customer_group

    @property
    def items_count(self):
        """Gets the items_count of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        The number of different items or products in the cart.

        :return: The items_count of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: int
        """
        return self._items_count

    @items_count.setter
    def items_count(self, items_count):
        """Sets the items_count of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        The number of different items or products in the cart.

        :param items_count: The items_count of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type items_count: int
        """
        if items_count is None:
            raise ValueError("Invalid value for `items_count`, must not be `None`")

        self._items_count = items_count

    @property
    def negotiated_price_type(self):
        """Gets the negotiated_price_type of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Negotiable quote type.

        :return: The negotiated_price_type of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: int
        """
        return self._negotiated_price_type

    @negotiated_price_type.setter
    def negotiated_price_type(self, negotiated_price_type):
        """Sets the negotiated_price_type of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Negotiable quote type.

        :param negotiated_price_type: The negotiated_price_type of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type negotiated_price_type: int
        """
        if negotiated_price_type is None:
            raise ValueError("Invalid value for `negotiated_price_type`, must not be `None`")

        self._negotiated_price_type = negotiated_price_type

    @property
    def negotiated_price_value(self):
        """Gets the negotiated_price_value of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Negotiable price value for quote.

        :return: The negotiated_price_value of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: float
        """
        return self._negotiated_price_value

    @negotiated_price_value.setter
    def negotiated_price_value(self, negotiated_price_value):
        """Sets the negotiated_price_value of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Negotiable price value for quote.

        :param negotiated_price_value: The negotiated_price_value of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type negotiated_price_value: float
        """
        if negotiated_price_value is None:
            raise ValueError("Invalid value for `negotiated_price_value`, must not be `None`")

        self._negotiated_price_value = negotiated_price_value

    @property
    def original_price_incl_tax(self):
        """Gets the original_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Original price with included tax for quote.

        :return: The original_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: float
        """
        return self._original_price_incl_tax

    @original_price_incl_tax.setter
    def original_price_incl_tax(self, original_price_incl_tax):
        """Sets the original_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Original price with included tax for quote.

        :param original_price_incl_tax: The original_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type original_price_incl_tax: float
        """
        if original_price_incl_tax is None:
            raise ValueError("Invalid value for `original_price_incl_tax`, must not be `None`")

        self._original_price_incl_tax = original_price_incl_tax

    @property
    def original_tax(self):
        """Gets the original_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Original tax amount for quote.

        :return: The original_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: float
        """
        return self._original_tax

    @original_tax.setter
    def original_tax(self, original_tax):
        """Sets the original_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Original tax amount for quote.

        :param original_tax: The original_tax of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type original_tax: float
        """
        if original_tax is None:
            raise ValueError("Invalid value for `original_tax`, must not be `None`")

        self._original_tax = original_tax

    @property
    def original_total(self):
        """Gets the original_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Original quote total.

        :return: The original_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: float
        """
        return self._original_total

    @original_total.setter
    def original_total(self, original_total):
        """Sets the original_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Original quote total.

        :param original_total: The original_total of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type original_total: float
        """
        if original_total is None:
            raise ValueError("Invalid value for `original_total`, must not be `None`")

        self._original_total = original_total

    @property
    def quote_status(self):
        """Gets the quote_status of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Negotiable quote status.

        :return: The quote_status of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: str
        """
        return self._quote_status

    @quote_status.setter
    def quote_status(self, quote_status):
        """Sets the quote_status of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        Negotiable quote status.

        :param quote_status: The quote_status of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type quote_status: str
        """
        if quote_status is None:
            raise ValueError("Invalid value for `quote_status`, must not be `None`")

        self._quote_status = quote_status

    @property
    def updated_at(self):
        """Gets the updated_at of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        The cart last update date and time.

        :return: The updated_at of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.

        The cart last update date and time.

        :param updated_at: The updated_at of this NegotiableQuoteDataNegotiableQuoteTotalsInterface.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
