# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.quote_data_total_segment_interface import QuoteDataTotalSegmentInterface
from openapi_server.models.quote_data_totals_extension_interface import QuoteDataTotalsExtensionInterface
from openapi_server.models.quote_data_totals_item_interface import QuoteDataTotalsItemInterface
from openapi_server import util


class QuoteDataTotalsInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_currency_code: str=None, base_discount_amount: float=None, base_grand_total: float=None, base_shipping_amount: float=None, base_shipping_discount_amount: float=None, base_shipping_incl_tax: float=None, base_shipping_tax_amount: float=None, base_subtotal: float=None, base_subtotal_incl_tax: float=None, base_subtotal_with_discount: float=None, base_tax_amount: float=None, coupon_code: str=None, discount_amount: float=None, extension_attributes: QuoteDataTotalsExtensionInterface=None, grand_total: float=None, items: List[QuoteDataTotalsItemInterface]=None, items_qty: int=None, quote_currency_code: str=None, shipping_amount: float=None, shipping_discount_amount: float=None, shipping_incl_tax: float=None, shipping_tax_amount: float=None, subtotal: float=None, subtotal_incl_tax: float=None, subtotal_with_discount: float=None, tax_amount: float=None, total_segments: List[QuoteDataTotalSegmentInterface]=None, weee_tax_applied_amount: float=None):
        """QuoteDataTotalsInterface - a model defined in OpenAPI

        :param base_currency_code: The base_currency_code of this QuoteDataTotalsInterface.
        :param base_discount_amount: The base_discount_amount of this QuoteDataTotalsInterface.
        :param base_grand_total: The base_grand_total of this QuoteDataTotalsInterface.
        :param base_shipping_amount: The base_shipping_amount of this QuoteDataTotalsInterface.
        :param base_shipping_discount_amount: The base_shipping_discount_amount of this QuoteDataTotalsInterface.
        :param base_shipping_incl_tax: The base_shipping_incl_tax of this QuoteDataTotalsInterface.
        :param base_shipping_tax_amount: The base_shipping_tax_amount of this QuoteDataTotalsInterface.
        :param base_subtotal: The base_subtotal of this QuoteDataTotalsInterface.
        :param base_subtotal_incl_tax: The base_subtotal_incl_tax of this QuoteDataTotalsInterface.
        :param base_subtotal_with_discount: The base_subtotal_with_discount of this QuoteDataTotalsInterface.
        :param base_tax_amount: The base_tax_amount of this QuoteDataTotalsInterface.
        :param coupon_code: The coupon_code of this QuoteDataTotalsInterface.
        :param discount_amount: The discount_amount of this QuoteDataTotalsInterface.
        :param extension_attributes: The extension_attributes of this QuoteDataTotalsInterface.
        :param grand_total: The grand_total of this QuoteDataTotalsInterface.
        :param items: The items of this QuoteDataTotalsInterface.
        :param items_qty: The items_qty of this QuoteDataTotalsInterface.
        :param quote_currency_code: The quote_currency_code of this QuoteDataTotalsInterface.
        :param shipping_amount: The shipping_amount of this QuoteDataTotalsInterface.
        :param shipping_discount_amount: The shipping_discount_amount of this QuoteDataTotalsInterface.
        :param shipping_incl_tax: The shipping_incl_tax of this QuoteDataTotalsInterface.
        :param shipping_tax_amount: The shipping_tax_amount of this QuoteDataTotalsInterface.
        :param subtotal: The subtotal of this QuoteDataTotalsInterface.
        :param subtotal_incl_tax: The subtotal_incl_tax of this QuoteDataTotalsInterface.
        :param subtotal_with_discount: The subtotal_with_discount of this QuoteDataTotalsInterface.
        :param tax_amount: The tax_amount of this QuoteDataTotalsInterface.
        :param total_segments: The total_segments of this QuoteDataTotalsInterface.
        :param weee_tax_applied_amount: The weee_tax_applied_amount of this QuoteDataTotalsInterface.
        """
        self.openapi_types = {
            'base_currency_code': str,
            'base_discount_amount': float,
            'base_grand_total': float,
            'base_shipping_amount': float,
            'base_shipping_discount_amount': float,
            'base_shipping_incl_tax': float,
            'base_shipping_tax_amount': float,
            'base_subtotal': float,
            'base_subtotal_incl_tax': float,
            'base_subtotal_with_discount': float,
            'base_tax_amount': float,
            'coupon_code': str,
            'discount_amount': float,
            'extension_attributes': QuoteDataTotalsExtensionInterface,
            'grand_total': float,
            'items': List[QuoteDataTotalsItemInterface],
            'items_qty': int,
            'quote_currency_code': str,
            'shipping_amount': float,
            'shipping_discount_amount': float,
            'shipping_incl_tax': float,
            'shipping_tax_amount': float,
            'subtotal': float,
            'subtotal_incl_tax': float,
            'subtotal_with_discount': float,
            'tax_amount': float,
            'total_segments': List[QuoteDataTotalSegmentInterface],
            'weee_tax_applied_amount': float
        }

        self.attribute_map = {
            'base_currency_code': 'base_currency_code',
            'base_discount_amount': 'base_discount_amount',
            'base_grand_total': 'base_grand_total',
            'base_shipping_amount': 'base_shipping_amount',
            'base_shipping_discount_amount': 'base_shipping_discount_amount',
            'base_shipping_incl_tax': 'base_shipping_incl_tax',
            'base_shipping_tax_amount': 'base_shipping_tax_amount',
            'base_subtotal': 'base_subtotal',
            'base_subtotal_incl_tax': 'base_subtotal_incl_tax',
            'base_subtotal_with_discount': 'base_subtotal_with_discount',
            'base_tax_amount': 'base_tax_amount',
            'coupon_code': 'coupon_code',
            'discount_amount': 'discount_amount',
            'extension_attributes': 'extension_attributes',
            'grand_total': 'grand_total',
            'items': 'items',
            'items_qty': 'items_qty',
            'quote_currency_code': 'quote_currency_code',
            'shipping_amount': 'shipping_amount',
            'shipping_discount_amount': 'shipping_discount_amount',
            'shipping_incl_tax': 'shipping_incl_tax',
            'shipping_tax_amount': 'shipping_tax_amount',
            'subtotal': 'subtotal',
            'subtotal_incl_tax': 'subtotal_incl_tax',
            'subtotal_with_discount': 'subtotal_with_discount',
            'tax_amount': 'tax_amount',
            'total_segments': 'total_segments',
            'weee_tax_applied_amount': 'weee_tax_applied_amount'
        }

        self._base_currency_code = base_currency_code
        self._base_discount_amount = base_discount_amount
        self._base_grand_total = base_grand_total
        self._base_shipping_amount = base_shipping_amount
        self._base_shipping_discount_amount = base_shipping_discount_amount
        self._base_shipping_incl_tax = base_shipping_incl_tax
        self._base_shipping_tax_amount = base_shipping_tax_amount
        self._base_subtotal = base_subtotal
        self._base_subtotal_incl_tax = base_subtotal_incl_tax
        self._base_subtotal_with_discount = base_subtotal_with_discount
        self._base_tax_amount = base_tax_amount
        self._coupon_code = coupon_code
        self._discount_amount = discount_amount
        self._extension_attributes = extension_attributes
        self._grand_total = grand_total
        self._items = items
        self._items_qty = items_qty
        self._quote_currency_code = quote_currency_code
        self._shipping_amount = shipping_amount
        self._shipping_discount_amount = shipping_discount_amount
        self._shipping_incl_tax = shipping_incl_tax
        self._shipping_tax_amount = shipping_tax_amount
        self._subtotal = subtotal
        self._subtotal_incl_tax = subtotal_incl_tax
        self._subtotal_with_discount = subtotal_with_discount
        self._tax_amount = tax_amount
        self._total_segments = total_segments
        self._weee_tax_applied_amount = weee_tax_applied_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuoteDataTotalsInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The quote-data-totals-interface of this QuoteDataTotalsInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_currency_code(self):
        """Gets the base_currency_code of this QuoteDataTotalsInterface.

        Base currency code

        :return: The base_currency_code of this QuoteDataTotalsInterface.
        :rtype: str
        """
        return self._base_currency_code

    @base_currency_code.setter
    def base_currency_code(self, base_currency_code):
        """Sets the base_currency_code of this QuoteDataTotalsInterface.

        Base currency code

        :param base_currency_code: The base_currency_code of this QuoteDataTotalsInterface.
        :type base_currency_code: str
        """

        self._base_currency_code = base_currency_code

    @property
    def base_discount_amount(self):
        """Gets the base_discount_amount of this QuoteDataTotalsInterface.

        Discount amount in base currency

        :return: The base_discount_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_discount_amount

    @base_discount_amount.setter
    def base_discount_amount(self, base_discount_amount):
        """Sets the base_discount_amount of this QuoteDataTotalsInterface.

        Discount amount in base currency

        :param base_discount_amount: The base_discount_amount of this QuoteDataTotalsInterface.
        :type base_discount_amount: float
        """

        self._base_discount_amount = base_discount_amount

    @property
    def base_grand_total(self):
        """Gets the base_grand_total of this QuoteDataTotalsInterface.

        Grand total in base currency

        :return: The base_grand_total of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_grand_total

    @base_grand_total.setter
    def base_grand_total(self, base_grand_total):
        """Sets the base_grand_total of this QuoteDataTotalsInterface.

        Grand total in base currency

        :param base_grand_total: The base_grand_total of this QuoteDataTotalsInterface.
        :type base_grand_total: float
        """

        self._base_grand_total = base_grand_total

    @property
    def base_shipping_amount(self):
        """Gets the base_shipping_amount of this QuoteDataTotalsInterface.

        Shipping amount in base currency

        :return: The base_shipping_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_shipping_amount

    @base_shipping_amount.setter
    def base_shipping_amount(self, base_shipping_amount):
        """Sets the base_shipping_amount of this QuoteDataTotalsInterface.

        Shipping amount in base currency

        :param base_shipping_amount: The base_shipping_amount of this QuoteDataTotalsInterface.
        :type base_shipping_amount: float
        """

        self._base_shipping_amount = base_shipping_amount

    @property
    def base_shipping_discount_amount(self):
        """Gets the base_shipping_discount_amount of this QuoteDataTotalsInterface.

        Shipping discount amount in base currency

        :return: The base_shipping_discount_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_shipping_discount_amount

    @base_shipping_discount_amount.setter
    def base_shipping_discount_amount(self, base_shipping_discount_amount):
        """Sets the base_shipping_discount_amount of this QuoteDataTotalsInterface.

        Shipping discount amount in base currency

        :param base_shipping_discount_amount: The base_shipping_discount_amount of this QuoteDataTotalsInterface.
        :type base_shipping_discount_amount: float
        """

        self._base_shipping_discount_amount = base_shipping_discount_amount

    @property
    def base_shipping_incl_tax(self):
        """Gets the base_shipping_incl_tax of this QuoteDataTotalsInterface.

        Shipping including tax in base currency

        :return: The base_shipping_incl_tax of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_shipping_incl_tax

    @base_shipping_incl_tax.setter
    def base_shipping_incl_tax(self, base_shipping_incl_tax):
        """Sets the base_shipping_incl_tax of this QuoteDataTotalsInterface.

        Shipping including tax in base currency

        :param base_shipping_incl_tax: The base_shipping_incl_tax of this QuoteDataTotalsInterface.
        :type base_shipping_incl_tax: float
        """

        self._base_shipping_incl_tax = base_shipping_incl_tax

    @property
    def base_shipping_tax_amount(self):
        """Gets the base_shipping_tax_amount of this QuoteDataTotalsInterface.

        Shipping tax amount in base currency

        :return: The base_shipping_tax_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_shipping_tax_amount

    @base_shipping_tax_amount.setter
    def base_shipping_tax_amount(self, base_shipping_tax_amount):
        """Sets the base_shipping_tax_amount of this QuoteDataTotalsInterface.

        Shipping tax amount in base currency

        :param base_shipping_tax_amount: The base_shipping_tax_amount of this QuoteDataTotalsInterface.
        :type base_shipping_tax_amount: float
        """

        self._base_shipping_tax_amount = base_shipping_tax_amount

    @property
    def base_subtotal(self):
        """Gets the base_subtotal of this QuoteDataTotalsInterface.

        Subtotal in base currency

        :return: The base_subtotal of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_subtotal

    @base_subtotal.setter
    def base_subtotal(self, base_subtotal):
        """Sets the base_subtotal of this QuoteDataTotalsInterface.

        Subtotal in base currency

        :param base_subtotal: The base_subtotal of this QuoteDataTotalsInterface.
        :type base_subtotal: float
        """

        self._base_subtotal = base_subtotal

    @property
    def base_subtotal_incl_tax(self):
        """Gets the base_subtotal_incl_tax of this QuoteDataTotalsInterface.

        Subtotal including tax in base currency

        :return: The base_subtotal_incl_tax of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_subtotal_incl_tax

    @base_subtotal_incl_tax.setter
    def base_subtotal_incl_tax(self, base_subtotal_incl_tax):
        """Sets the base_subtotal_incl_tax of this QuoteDataTotalsInterface.

        Subtotal including tax in base currency

        :param base_subtotal_incl_tax: The base_subtotal_incl_tax of this QuoteDataTotalsInterface.
        :type base_subtotal_incl_tax: float
        """

        self._base_subtotal_incl_tax = base_subtotal_incl_tax

    @property
    def base_subtotal_with_discount(self):
        """Gets the base_subtotal_with_discount of this QuoteDataTotalsInterface.

        Subtotal in base currency with applied discount

        :return: The base_subtotal_with_discount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_subtotal_with_discount

    @base_subtotal_with_discount.setter
    def base_subtotal_with_discount(self, base_subtotal_with_discount):
        """Sets the base_subtotal_with_discount of this QuoteDataTotalsInterface.

        Subtotal in base currency with applied discount

        :param base_subtotal_with_discount: The base_subtotal_with_discount of this QuoteDataTotalsInterface.
        :type base_subtotal_with_discount: float
        """

        self._base_subtotal_with_discount = base_subtotal_with_discount

    @property
    def base_tax_amount(self):
        """Gets the base_tax_amount of this QuoteDataTotalsInterface.

        Tax amount in base currency

        :return: The base_tax_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._base_tax_amount

    @base_tax_amount.setter
    def base_tax_amount(self, base_tax_amount):
        """Sets the base_tax_amount of this QuoteDataTotalsInterface.

        Tax amount in base currency

        :param base_tax_amount: The base_tax_amount of this QuoteDataTotalsInterface.
        :type base_tax_amount: float
        """

        self._base_tax_amount = base_tax_amount

    @property
    def coupon_code(self):
        """Gets the coupon_code of this QuoteDataTotalsInterface.

        Applied coupon code

        :return: The coupon_code of this QuoteDataTotalsInterface.
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """Sets the coupon_code of this QuoteDataTotalsInterface.

        Applied coupon code

        :param coupon_code: The coupon_code of this QuoteDataTotalsInterface.
        :type coupon_code: str
        """

        self._coupon_code = coupon_code

    @property
    def discount_amount(self):
        """Gets the discount_amount of this QuoteDataTotalsInterface.

        Discount amount in quote currency

        :return: The discount_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this QuoteDataTotalsInterface.

        Discount amount in quote currency

        :param discount_amount: The discount_amount of this QuoteDataTotalsInterface.
        :type discount_amount: float
        """

        self._discount_amount = discount_amount

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this QuoteDataTotalsInterface.


        :return: The extension_attributes of this QuoteDataTotalsInterface.
        :rtype: QuoteDataTotalsExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this QuoteDataTotalsInterface.


        :param extension_attributes: The extension_attributes of this QuoteDataTotalsInterface.
        :type extension_attributes: QuoteDataTotalsExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def grand_total(self):
        """Gets the grand_total of this QuoteDataTotalsInterface.

        Grand total in quote currency

        :return: The grand_total of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._grand_total

    @grand_total.setter
    def grand_total(self, grand_total):
        """Sets the grand_total of this QuoteDataTotalsInterface.

        Grand total in quote currency

        :param grand_total: The grand_total of this QuoteDataTotalsInterface.
        :type grand_total: float
        """

        self._grand_total = grand_total

    @property
    def items(self):
        """Gets the items of this QuoteDataTotalsInterface.

        Totals by items

        :return: The items of this QuoteDataTotalsInterface.
        :rtype: List[QuoteDataTotalsItemInterface]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this QuoteDataTotalsInterface.

        Totals by items

        :param items: The items of this QuoteDataTotalsInterface.
        :type items: List[QuoteDataTotalsItemInterface]
        """

        self._items = items

    @property
    def items_qty(self):
        """Gets the items_qty of this QuoteDataTotalsInterface.

        Items qty

        :return: The items_qty of this QuoteDataTotalsInterface.
        :rtype: int
        """
        return self._items_qty

    @items_qty.setter
    def items_qty(self, items_qty):
        """Sets the items_qty of this QuoteDataTotalsInterface.

        Items qty

        :param items_qty: The items_qty of this QuoteDataTotalsInterface.
        :type items_qty: int
        """

        self._items_qty = items_qty

    @property
    def quote_currency_code(self):
        """Gets the quote_currency_code of this QuoteDataTotalsInterface.

        Quote currency code

        :return: The quote_currency_code of this QuoteDataTotalsInterface.
        :rtype: str
        """
        return self._quote_currency_code

    @quote_currency_code.setter
    def quote_currency_code(self, quote_currency_code):
        """Sets the quote_currency_code of this QuoteDataTotalsInterface.

        Quote currency code

        :param quote_currency_code: The quote_currency_code of this QuoteDataTotalsInterface.
        :type quote_currency_code: str
        """

        self._quote_currency_code = quote_currency_code

    @property
    def shipping_amount(self):
        """Gets the shipping_amount of this QuoteDataTotalsInterface.

        Shipping amount in quote currency

        :return: The shipping_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._shipping_amount

    @shipping_amount.setter
    def shipping_amount(self, shipping_amount):
        """Sets the shipping_amount of this QuoteDataTotalsInterface.

        Shipping amount in quote currency

        :param shipping_amount: The shipping_amount of this QuoteDataTotalsInterface.
        :type shipping_amount: float
        """

        self._shipping_amount = shipping_amount

    @property
    def shipping_discount_amount(self):
        """Gets the shipping_discount_amount of this QuoteDataTotalsInterface.

        Shipping discount amount in quote currency

        :return: The shipping_discount_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._shipping_discount_amount

    @shipping_discount_amount.setter
    def shipping_discount_amount(self, shipping_discount_amount):
        """Sets the shipping_discount_amount of this QuoteDataTotalsInterface.

        Shipping discount amount in quote currency

        :param shipping_discount_amount: The shipping_discount_amount of this QuoteDataTotalsInterface.
        :type shipping_discount_amount: float
        """

        self._shipping_discount_amount = shipping_discount_amount

    @property
    def shipping_incl_tax(self):
        """Gets the shipping_incl_tax of this QuoteDataTotalsInterface.

        Shipping including tax in quote currency

        :return: The shipping_incl_tax of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._shipping_incl_tax

    @shipping_incl_tax.setter
    def shipping_incl_tax(self, shipping_incl_tax):
        """Sets the shipping_incl_tax of this QuoteDataTotalsInterface.

        Shipping including tax in quote currency

        :param shipping_incl_tax: The shipping_incl_tax of this QuoteDataTotalsInterface.
        :type shipping_incl_tax: float
        """

        self._shipping_incl_tax = shipping_incl_tax

    @property
    def shipping_tax_amount(self):
        """Gets the shipping_tax_amount of this QuoteDataTotalsInterface.

        Shipping tax amount in quote currency

        :return: The shipping_tax_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._shipping_tax_amount

    @shipping_tax_amount.setter
    def shipping_tax_amount(self, shipping_tax_amount):
        """Sets the shipping_tax_amount of this QuoteDataTotalsInterface.

        Shipping tax amount in quote currency

        :param shipping_tax_amount: The shipping_tax_amount of this QuoteDataTotalsInterface.
        :type shipping_tax_amount: float
        """

        self._shipping_tax_amount = shipping_tax_amount

    @property
    def subtotal(self):
        """Gets the subtotal of this QuoteDataTotalsInterface.

        Subtotal in quote currency

        :return: The subtotal of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this QuoteDataTotalsInterface.

        Subtotal in quote currency

        :param subtotal: The subtotal of this QuoteDataTotalsInterface.
        :type subtotal: float
        """

        self._subtotal = subtotal

    @property
    def subtotal_incl_tax(self):
        """Gets the subtotal_incl_tax of this QuoteDataTotalsInterface.

        Subtotal including tax in quote currency

        :return: The subtotal_incl_tax of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._subtotal_incl_tax

    @subtotal_incl_tax.setter
    def subtotal_incl_tax(self, subtotal_incl_tax):
        """Sets the subtotal_incl_tax of this QuoteDataTotalsInterface.

        Subtotal including tax in quote currency

        :param subtotal_incl_tax: The subtotal_incl_tax of this QuoteDataTotalsInterface.
        :type subtotal_incl_tax: float
        """

        self._subtotal_incl_tax = subtotal_incl_tax

    @property
    def subtotal_with_discount(self):
        """Gets the subtotal_with_discount of this QuoteDataTotalsInterface.

        Subtotal in quote currency with applied discount

        :return: The subtotal_with_discount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._subtotal_with_discount

    @subtotal_with_discount.setter
    def subtotal_with_discount(self, subtotal_with_discount):
        """Sets the subtotal_with_discount of this QuoteDataTotalsInterface.

        Subtotal in quote currency with applied discount

        :param subtotal_with_discount: The subtotal_with_discount of this QuoteDataTotalsInterface.
        :type subtotal_with_discount: float
        """

        self._subtotal_with_discount = subtotal_with_discount

    @property
    def tax_amount(self):
        """Gets the tax_amount of this QuoteDataTotalsInterface.

        Tax amount in quote currency

        :return: The tax_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this QuoteDataTotalsInterface.

        Tax amount in quote currency

        :param tax_amount: The tax_amount of this QuoteDataTotalsInterface.
        :type tax_amount: float
        """

        self._tax_amount = tax_amount

    @property
    def total_segments(self):
        """Gets the total_segments of this QuoteDataTotalsInterface.

        Dynamically calculated totals

        :return: The total_segments of this QuoteDataTotalsInterface.
        :rtype: List[QuoteDataTotalSegmentInterface]
        """
        return self._total_segments

    @total_segments.setter
    def total_segments(self, total_segments):
        """Sets the total_segments of this QuoteDataTotalsInterface.

        Dynamically calculated totals

        :param total_segments: The total_segments of this QuoteDataTotalsInterface.
        :type total_segments: List[QuoteDataTotalSegmentInterface]
        """
        if total_segments is None:
            raise ValueError("Invalid value for `total_segments`, must not be `None`")

        self._total_segments = total_segments

    @property
    def weee_tax_applied_amount(self):
        """Gets the weee_tax_applied_amount of this QuoteDataTotalsInterface.

        Item weee tax applied amount in quote currency.

        :return: The weee_tax_applied_amount of this QuoteDataTotalsInterface.
        :rtype: float
        """
        return self._weee_tax_applied_amount

    @weee_tax_applied_amount.setter
    def weee_tax_applied_amount(self, weee_tax_applied_amount):
        """Sets the weee_tax_applied_amount of this QuoteDataTotalsInterface.

        Item weee tax applied amount in quote currency.

        :param weee_tax_applied_amount: The weee_tax_applied_amount of this QuoteDataTotalsInterface.
        :type weee_tax_applied_amount: float
        """
        if weee_tax_applied_amount is None:
            raise ValueError("Invalid value for `weee_tax_applied_amount`, must not be `None`")

        self._weee_tax_applied_amount = weee_tax_applied_amount
