# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckoutAgreementsDataAgreementInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agreement_id: int=None, checkbox_text: str=None, content: str=None, content_height: str=None, extension_attributes: object=None, is_active: bool=None, is_html: bool=None, mode: int=None, name: str=None):
        """CheckoutAgreementsDataAgreementInterface - a model defined in OpenAPI

        :param agreement_id: The agreement_id of this CheckoutAgreementsDataAgreementInterface.
        :param checkbox_text: The checkbox_text of this CheckoutAgreementsDataAgreementInterface.
        :param content: The content of this CheckoutAgreementsDataAgreementInterface.
        :param content_height: The content_height of this CheckoutAgreementsDataAgreementInterface.
        :param extension_attributes: The extension_attributes of this CheckoutAgreementsDataAgreementInterface.
        :param is_active: The is_active of this CheckoutAgreementsDataAgreementInterface.
        :param is_html: The is_html of this CheckoutAgreementsDataAgreementInterface.
        :param mode: The mode of this CheckoutAgreementsDataAgreementInterface.
        :param name: The name of this CheckoutAgreementsDataAgreementInterface.
        """
        self.openapi_types = {
            'agreement_id': int,
            'checkbox_text': str,
            'content': str,
            'content_height': str,
            'extension_attributes': object,
            'is_active': bool,
            'is_html': bool,
            'mode': int,
            'name': str
        }

        self.attribute_map = {
            'agreement_id': 'agreement_id',
            'checkbox_text': 'checkbox_text',
            'content': 'content',
            'content_height': 'content_height',
            'extension_attributes': 'extension_attributes',
            'is_active': 'is_active',
            'is_html': 'is_html',
            'mode': 'mode',
            'name': 'name'
        }

        self._agreement_id = agreement_id
        self._checkbox_text = checkbox_text
        self._content = content
        self._content_height = content_height
        self._extension_attributes = extension_attributes
        self._is_active = is_active
        self._is_html = is_html
        self._mode = mode
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckoutAgreementsDataAgreementInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The checkout-agreements-data-agreement-interface of this CheckoutAgreementsDataAgreementInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agreement_id(self):
        """Gets the agreement_id of this CheckoutAgreementsDataAgreementInterface.

        Agreement ID.

        :return: The agreement_id of this CheckoutAgreementsDataAgreementInterface.
        :rtype: int
        """
        return self._agreement_id

    @agreement_id.setter
    def agreement_id(self, agreement_id):
        """Sets the agreement_id of this CheckoutAgreementsDataAgreementInterface.

        Agreement ID.

        :param agreement_id: The agreement_id of this CheckoutAgreementsDataAgreementInterface.
        :type agreement_id: int
        """
        if agreement_id is None:
            raise ValueError("Invalid value for `agreement_id`, must not be `None`")

        self._agreement_id = agreement_id

    @property
    def checkbox_text(self):
        """Gets the checkbox_text of this CheckoutAgreementsDataAgreementInterface.

        Agreement checkbox text.

        :return: The checkbox_text of this CheckoutAgreementsDataAgreementInterface.
        :rtype: str
        """
        return self._checkbox_text

    @checkbox_text.setter
    def checkbox_text(self, checkbox_text):
        """Sets the checkbox_text of this CheckoutAgreementsDataAgreementInterface.

        Agreement checkbox text.

        :param checkbox_text: The checkbox_text of this CheckoutAgreementsDataAgreementInterface.
        :type checkbox_text: str
        """
        if checkbox_text is None:
            raise ValueError("Invalid value for `checkbox_text`, must not be `None`")

        self._checkbox_text = checkbox_text

    @property
    def content(self):
        """Gets the content of this CheckoutAgreementsDataAgreementInterface.

        Agreement content.

        :return: The content of this CheckoutAgreementsDataAgreementInterface.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CheckoutAgreementsDataAgreementInterface.

        Agreement content.

        :param content: The content of this CheckoutAgreementsDataAgreementInterface.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def content_height(self):
        """Gets the content_height of this CheckoutAgreementsDataAgreementInterface.

        Agreement content height. Otherwise, null.

        :return: The content_height of this CheckoutAgreementsDataAgreementInterface.
        :rtype: str
        """
        return self._content_height

    @content_height.setter
    def content_height(self, content_height):
        """Sets the content_height of this CheckoutAgreementsDataAgreementInterface.

        Agreement content height. Otherwise, null.

        :param content_height: The content_height of this CheckoutAgreementsDataAgreementInterface.
        :type content_height: str
        """

        self._content_height = content_height

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CheckoutAgreementsDataAgreementInterface.

        ExtensionInterface class for @see \\Magento\\CheckoutAgreements\\Api\\Data\\AgreementInterface

        :return: The extension_attributes of this CheckoutAgreementsDataAgreementInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CheckoutAgreementsDataAgreementInterface.

        ExtensionInterface class for @see \\Magento\\CheckoutAgreements\\Api\\Data\\AgreementInterface

        :param extension_attributes: The extension_attributes of this CheckoutAgreementsDataAgreementInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def is_active(self):
        """Gets the is_active of this CheckoutAgreementsDataAgreementInterface.

        Agreement status.

        :return: The is_active of this CheckoutAgreementsDataAgreementInterface.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this CheckoutAgreementsDataAgreementInterface.

        Agreement status.

        :param is_active: The is_active of this CheckoutAgreementsDataAgreementInterface.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_html(self):
        """Gets the is_html of this CheckoutAgreementsDataAgreementInterface.

        * true - HTML. * false - plain text.

        :return: The is_html of this CheckoutAgreementsDataAgreementInterface.
        :rtype: bool
        """
        return self._is_html

    @is_html.setter
    def is_html(self, is_html):
        """Sets the is_html of this CheckoutAgreementsDataAgreementInterface.

        * true - HTML. * false - plain text.

        :param is_html: The is_html of this CheckoutAgreementsDataAgreementInterface.
        :type is_html: bool
        """
        if is_html is None:
            raise ValueError("Invalid value for `is_html`, must not be `None`")

        self._is_html = is_html

    @property
    def mode(self):
        """Gets the mode of this CheckoutAgreementsDataAgreementInterface.

        The agreement applied mode.

        :return: The mode of this CheckoutAgreementsDataAgreementInterface.
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this CheckoutAgreementsDataAgreementInterface.

        The agreement applied mode.

        :param mode: The mode of this CheckoutAgreementsDataAgreementInterface.
        :type mode: int
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this CheckoutAgreementsDataAgreementInterface.

        Agreement name.

        :return: The name of this CheckoutAgreementsDataAgreementInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CheckoutAgreementsDataAgreementInterface.

        Agreement name.

        :param name: The name of this CheckoutAgreementsDataAgreementInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
