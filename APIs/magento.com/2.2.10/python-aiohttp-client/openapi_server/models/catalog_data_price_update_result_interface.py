# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogDataPriceUpdateResultInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension_attributes: object=None, message: str=None, parameters: List[str]=None):
        """CatalogDataPriceUpdateResultInterface - a model defined in OpenAPI

        :param extension_attributes: The extension_attributes of this CatalogDataPriceUpdateResultInterface.
        :param message: The message of this CatalogDataPriceUpdateResultInterface.
        :param parameters: The parameters of this CatalogDataPriceUpdateResultInterface.
        """
        self.openapi_types = {
            'extension_attributes': object,
            'message': str,
            'parameters': List[str]
        }

        self.attribute_map = {
            'extension_attributes': 'extension_attributes',
            'message': 'message',
            'parameters': 'parameters'
        }

        self._extension_attributes = extension_attributes
        self._message = message
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataPriceUpdateResultInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-price-update-result-interface of this CatalogDataPriceUpdateResultInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CatalogDataPriceUpdateResultInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface

        :return: The extension_attributes of this CatalogDataPriceUpdateResultInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CatalogDataPriceUpdateResultInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface

        :param extension_attributes: The extension_attributes of this CatalogDataPriceUpdateResultInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def message(self):
        """Gets the message of this CatalogDataPriceUpdateResultInterface.

        Error message, that contains description of error occurred during price update.

        :return: The message of this CatalogDataPriceUpdateResultInterface.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CatalogDataPriceUpdateResultInterface.

        Error message, that contains description of error occurred during price update.

        :param message: The message of this CatalogDataPriceUpdateResultInterface.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def parameters(self):
        """Gets the parameters of this CatalogDataPriceUpdateResultInterface.

        Parameters, that could be displayed in error message placeholders.

        :return: The parameters of this CatalogDataPriceUpdateResultInterface.
        :rtype: List[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CatalogDataPriceUpdateResultInterface.

        Parameters, that could be displayed in error message placeholders.

        :param parameters: The parameters of this CatalogDataPriceUpdateResultInterface.
        :type parameters: List[str]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters
