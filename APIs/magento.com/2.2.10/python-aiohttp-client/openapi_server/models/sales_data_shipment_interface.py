# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sales_data_shipment_comment_interface import SalesDataShipmentCommentInterface
from openapi_server.models.sales_data_shipment_extension_interface import SalesDataShipmentExtensionInterface
from openapi_server.models.sales_data_shipment_item_interface import SalesDataShipmentItemInterface
from openapi_server.models.sales_data_shipment_package_interface import SalesDataShipmentPackageInterface
from openapi_server.models.sales_data_shipment_track_interface import SalesDataShipmentTrackInterface
from openapi_server import util


class SalesDataShipmentInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address_id: int=None, comments: List[SalesDataShipmentCommentInterface]=None, created_at: str=None, customer_id: int=None, email_sent: int=None, entity_id: int=None, extension_attributes: SalesDataShipmentExtensionInterface=None, increment_id: str=None, items: List[SalesDataShipmentItemInterface]=None, order_id: int=None, packages: List[SalesDataShipmentPackageInterface]=None, shipment_status: int=None, shipping_address_id: int=None, shipping_label: str=None, store_id: int=None, total_qty: float=None, total_weight: float=None, tracks: List[SalesDataShipmentTrackInterface]=None, updated_at: str=None):
        """SalesDataShipmentInterface - a model defined in OpenAPI

        :param billing_address_id: The billing_address_id of this SalesDataShipmentInterface.
        :param comments: The comments of this SalesDataShipmentInterface.
        :param created_at: The created_at of this SalesDataShipmentInterface.
        :param customer_id: The customer_id of this SalesDataShipmentInterface.
        :param email_sent: The email_sent of this SalesDataShipmentInterface.
        :param entity_id: The entity_id of this SalesDataShipmentInterface.
        :param extension_attributes: The extension_attributes of this SalesDataShipmentInterface.
        :param increment_id: The increment_id of this SalesDataShipmentInterface.
        :param items: The items of this SalesDataShipmentInterface.
        :param order_id: The order_id of this SalesDataShipmentInterface.
        :param packages: The packages of this SalesDataShipmentInterface.
        :param shipment_status: The shipment_status of this SalesDataShipmentInterface.
        :param shipping_address_id: The shipping_address_id of this SalesDataShipmentInterface.
        :param shipping_label: The shipping_label of this SalesDataShipmentInterface.
        :param store_id: The store_id of this SalesDataShipmentInterface.
        :param total_qty: The total_qty of this SalesDataShipmentInterface.
        :param total_weight: The total_weight of this SalesDataShipmentInterface.
        :param tracks: The tracks of this SalesDataShipmentInterface.
        :param updated_at: The updated_at of this SalesDataShipmentInterface.
        """
        self.openapi_types = {
            'billing_address_id': int,
            'comments': List[SalesDataShipmentCommentInterface],
            'created_at': str,
            'customer_id': int,
            'email_sent': int,
            'entity_id': int,
            'extension_attributes': SalesDataShipmentExtensionInterface,
            'increment_id': str,
            'items': List[SalesDataShipmentItemInterface],
            'order_id': int,
            'packages': List[SalesDataShipmentPackageInterface],
            'shipment_status': int,
            'shipping_address_id': int,
            'shipping_label': str,
            'store_id': int,
            'total_qty': float,
            'total_weight': float,
            'tracks': List[SalesDataShipmentTrackInterface],
            'updated_at': str
        }

        self.attribute_map = {
            'billing_address_id': 'billing_address_id',
            'comments': 'comments',
            'created_at': 'created_at',
            'customer_id': 'customer_id',
            'email_sent': 'email_sent',
            'entity_id': 'entity_id',
            'extension_attributes': 'extension_attributes',
            'increment_id': 'increment_id',
            'items': 'items',
            'order_id': 'order_id',
            'packages': 'packages',
            'shipment_status': 'shipment_status',
            'shipping_address_id': 'shipping_address_id',
            'shipping_label': 'shipping_label',
            'store_id': 'store_id',
            'total_qty': 'total_qty',
            'total_weight': 'total_weight',
            'tracks': 'tracks',
            'updated_at': 'updated_at'
        }

        self._billing_address_id = billing_address_id
        self._comments = comments
        self._created_at = created_at
        self._customer_id = customer_id
        self._email_sent = email_sent
        self._entity_id = entity_id
        self._extension_attributes = extension_attributes
        self._increment_id = increment_id
        self._items = items
        self._order_id = order_id
        self._packages = packages
        self._shipment_status = shipment_status
        self._shipping_address_id = shipping_address_id
        self._shipping_label = shipping_label
        self._store_id = store_id
        self._total_qty = total_qty
        self._total_weight = total_weight
        self._tracks = tracks
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesDataShipmentInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sales-data-shipment-interface of this SalesDataShipmentInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address_id(self):
        """Gets the billing_address_id of this SalesDataShipmentInterface.

        Billing address ID.

        :return: The billing_address_id of this SalesDataShipmentInterface.
        :rtype: int
        """
        return self._billing_address_id

    @billing_address_id.setter
    def billing_address_id(self, billing_address_id):
        """Sets the billing_address_id of this SalesDataShipmentInterface.

        Billing address ID.

        :param billing_address_id: The billing_address_id of this SalesDataShipmentInterface.
        :type billing_address_id: int
        """

        self._billing_address_id = billing_address_id

    @property
    def comments(self):
        """Gets the comments of this SalesDataShipmentInterface.

        Array of comments.

        :return: The comments of this SalesDataShipmentInterface.
        :rtype: List[SalesDataShipmentCommentInterface]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this SalesDataShipmentInterface.

        Array of comments.

        :param comments: The comments of this SalesDataShipmentInterface.
        :type comments: List[SalesDataShipmentCommentInterface]
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")

        self._comments = comments

    @property
    def created_at(self):
        """Gets the created_at of this SalesDataShipmentInterface.

        Created-at timestamp.

        :return: The created_at of this SalesDataShipmentInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SalesDataShipmentInterface.

        Created-at timestamp.

        :param created_at: The created_at of this SalesDataShipmentInterface.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def customer_id(self):
        """Gets the customer_id of this SalesDataShipmentInterface.

        Customer ID.

        :return: The customer_id of this SalesDataShipmentInterface.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SalesDataShipmentInterface.

        Customer ID.

        :param customer_id: The customer_id of this SalesDataShipmentInterface.
        :type customer_id: int
        """

        self._customer_id = customer_id

    @property
    def email_sent(self):
        """Gets the email_sent of this SalesDataShipmentInterface.

        Email-sent flag value.

        :return: The email_sent of this SalesDataShipmentInterface.
        :rtype: int
        """
        return self._email_sent

    @email_sent.setter
    def email_sent(self, email_sent):
        """Sets the email_sent of this SalesDataShipmentInterface.

        Email-sent flag value.

        :param email_sent: The email_sent of this SalesDataShipmentInterface.
        :type email_sent: int
        """

        self._email_sent = email_sent

    @property
    def entity_id(self):
        """Gets the entity_id of this SalesDataShipmentInterface.

        Shipment ID.

        :return: The entity_id of this SalesDataShipmentInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this SalesDataShipmentInterface.

        Shipment ID.

        :param entity_id: The entity_id of this SalesDataShipmentInterface.
        :type entity_id: int
        """

        self._entity_id = entity_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this SalesDataShipmentInterface.


        :return: The extension_attributes of this SalesDataShipmentInterface.
        :rtype: SalesDataShipmentExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this SalesDataShipmentInterface.


        :param extension_attributes: The extension_attributes of this SalesDataShipmentInterface.
        :type extension_attributes: SalesDataShipmentExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def increment_id(self):
        """Gets the increment_id of this SalesDataShipmentInterface.

        Increment ID.

        :return: The increment_id of this SalesDataShipmentInterface.
        :rtype: str
        """
        return self._increment_id

    @increment_id.setter
    def increment_id(self, increment_id):
        """Sets the increment_id of this SalesDataShipmentInterface.

        Increment ID.

        :param increment_id: The increment_id of this SalesDataShipmentInterface.
        :type increment_id: str
        """

        self._increment_id = increment_id

    @property
    def items(self):
        """Gets the items of this SalesDataShipmentInterface.

        Array of items.

        :return: The items of this SalesDataShipmentInterface.
        :rtype: List[SalesDataShipmentItemInterface]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SalesDataShipmentInterface.

        Array of items.

        :param items: The items of this SalesDataShipmentInterface.
        :type items: List[SalesDataShipmentItemInterface]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def order_id(self):
        """Gets the order_id of this SalesDataShipmentInterface.

        Order ID.

        :return: The order_id of this SalesDataShipmentInterface.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this SalesDataShipmentInterface.

        Order ID.

        :param order_id: The order_id of this SalesDataShipmentInterface.
        :type order_id: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def packages(self):
        """Gets the packages of this SalesDataShipmentInterface.

        Array of packages, if any. Otherwise, null.

        :return: The packages of this SalesDataShipmentInterface.
        :rtype: List[SalesDataShipmentPackageInterface]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this SalesDataShipmentInterface.

        Array of packages, if any. Otherwise, null.

        :param packages: The packages of this SalesDataShipmentInterface.
        :type packages: List[SalesDataShipmentPackageInterface]
        """

        self._packages = packages

    @property
    def shipment_status(self):
        """Gets the shipment_status of this SalesDataShipmentInterface.

        Shipment status.

        :return: The shipment_status of this SalesDataShipmentInterface.
        :rtype: int
        """
        return self._shipment_status

    @shipment_status.setter
    def shipment_status(self, shipment_status):
        """Sets the shipment_status of this SalesDataShipmentInterface.

        Shipment status.

        :param shipment_status: The shipment_status of this SalesDataShipmentInterface.
        :type shipment_status: int
        """

        self._shipment_status = shipment_status

    @property
    def shipping_address_id(self):
        """Gets the shipping_address_id of this SalesDataShipmentInterface.

        Shipping address ID.

        :return: The shipping_address_id of this SalesDataShipmentInterface.
        :rtype: int
        """
        return self._shipping_address_id

    @shipping_address_id.setter
    def shipping_address_id(self, shipping_address_id):
        """Sets the shipping_address_id of this SalesDataShipmentInterface.

        Shipping address ID.

        :param shipping_address_id: The shipping_address_id of this SalesDataShipmentInterface.
        :type shipping_address_id: int
        """

        self._shipping_address_id = shipping_address_id

    @property
    def shipping_label(self):
        """Gets the shipping_label of this SalesDataShipmentInterface.

        Shipping label.

        :return: The shipping_label of this SalesDataShipmentInterface.
        :rtype: str
        """
        return self._shipping_label

    @shipping_label.setter
    def shipping_label(self, shipping_label):
        """Sets the shipping_label of this SalesDataShipmentInterface.

        Shipping label.

        :param shipping_label: The shipping_label of this SalesDataShipmentInterface.
        :type shipping_label: str
        """

        self._shipping_label = shipping_label

    @property
    def store_id(self):
        """Gets the store_id of this SalesDataShipmentInterface.

        Store ID.

        :return: The store_id of this SalesDataShipmentInterface.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this SalesDataShipmentInterface.

        Store ID.

        :param store_id: The store_id of this SalesDataShipmentInterface.
        :type store_id: int
        """

        self._store_id = store_id

    @property
    def total_qty(self):
        """Gets the total_qty of this SalesDataShipmentInterface.

        Total quantity.

        :return: The total_qty of this SalesDataShipmentInterface.
        :rtype: float
        """
        return self._total_qty

    @total_qty.setter
    def total_qty(self, total_qty):
        """Sets the total_qty of this SalesDataShipmentInterface.

        Total quantity.

        :param total_qty: The total_qty of this SalesDataShipmentInterface.
        :type total_qty: float
        """

        self._total_qty = total_qty

    @property
    def total_weight(self):
        """Gets the total_weight of this SalesDataShipmentInterface.

        Total weight.

        :return: The total_weight of this SalesDataShipmentInterface.
        :rtype: float
        """
        return self._total_weight

    @total_weight.setter
    def total_weight(self, total_weight):
        """Sets the total_weight of this SalesDataShipmentInterface.

        Total weight.

        :param total_weight: The total_weight of this SalesDataShipmentInterface.
        :type total_weight: float
        """

        self._total_weight = total_weight

    @property
    def tracks(self):
        """Gets the tracks of this SalesDataShipmentInterface.

        Array of tracks.

        :return: The tracks of this SalesDataShipmentInterface.
        :rtype: List[SalesDataShipmentTrackInterface]
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this SalesDataShipmentInterface.

        Array of tracks.

        :param tracks: The tracks of this SalesDataShipmentInterface.
        :type tracks: List[SalesDataShipmentTrackInterface]
        """
        if tracks is None:
            raise ValueError("Invalid value for `tracks`, must not be `None`")

        self._tracks = tracks

    @property
    def updated_at(self):
        """Gets the updated_at of this SalesDataShipmentInterface.

        Updated-at timestamp.

        :return: The updated_at of this SalesDataShipmentInterface.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SalesDataShipmentInterface.

        Updated-at timestamp.

        :param updated_at: The updated_at of this SalesDataShipmentInterface.
        :type updated_at: str
        """

        self._updated_at = updated_at
