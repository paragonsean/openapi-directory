# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.company_data_company_customer_interface import CompanyDataCompanyCustomerInterface
from openapi_server import util


class CustomerDataCustomerExtensionInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amazon_id: str=None, company_attributes: CompanyDataCompanyCustomerInterface=None, is_subscribed: bool=None, vertex_customer_code: str=None):
        """CustomerDataCustomerExtensionInterface - a model defined in OpenAPI

        :param amazon_id: The amazon_id of this CustomerDataCustomerExtensionInterface.
        :param company_attributes: The company_attributes of this CustomerDataCustomerExtensionInterface.
        :param is_subscribed: The is_subscribed of this CustomerDataCustomerExtensionInterface.
        :param vertex_customer_code: The vertex_customer_code of this CustomerDataCustomerExtensionInterface.
        """
        self.openapi_types = {
            'amazon_id': str,
            'company_attributes': CompanyDataCompanyCustomerInterface,
            'is_subscribed': bool,
            'vertex_customer_code': str
        }

        self.attribute_map = {
            'amazon_id': 'amazon_id',
            'company_attributes': 'company_attributes',
            'is_subscribed': 'is_subscribed',
            'vertex_customer_code': 'vertex_customer_code'
        }

        self._amazon_id = amazon_id
        self._company_attributes = company_attributes
        self._is_subscribed = is_subscribed
        self._vertex_customer_code = vertex_customer_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerDataCustomerExtensionInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customer-data-customer-extension-interface of this CustomerDataCustomerExtensionInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amazon_id(self):
        """Gets the amazon_id of this CustomerDataCustomerExtensionInterface.


        :return: The amazon_id of this CustomerDataCustomerExtensionInterface.
        :rtype: str
        """
        return self._amazon_id

    @amazon_id.setter
    def amazon_id(self, amazon_id):
        """Sets the amazon_id of this CustomerDataCustomerExtensionInterface.


        :param amazon_id: The amazon_id of this CustomerDataCustomerExtensionInterface.
        :type amazon_id: str
        """

        self._amazon_id = amazon_id

    @property
    def company_attributes(self):
        """Gets the company_attributes of this CustomerDataCustomerExtensionInterface.


        :return: The company_attributes of this CustomerDataCustomerExtensionInterface.
        :rtype: CompanyDataCompanyCustomerInterface
        """
        return self._company_attributes

    @company_attributes.setter
    def company_attributes(self, company_attributes):
        """Sets the company_attributes of this CustomerDataCustomerExtensionInterface.


        :param company_attributes: The company_attributes of this CustomerDataCustomerExtensionInterface.
        :type company_attributes: CompanyDataCompanyCustomerInterface
        """

        self._company_attributes = company_attributes

    @property
    def is_subscribed(self):
        """Gets the is_subscribed of this CustomerDataCustomerExtensionInterface.


        :return: The is_subscribed of this CustomerDataCustomerExtensionInterface.
        :rtype: bool
        """
        return self._is_subscribed

    @is_subscribed.setter
    def is_subscribed(self, is_subscribed):
        """Sets the is_subscribed of this CustomerDataCustomerExtensionInterface.


        :param is_subscribed: The is_subscribed of this CustomerDataCustomerExtensionInterface.
        :type is_subscribed: bool
        """

        self._is_subscribed = is_subscribed

    @property
    def vertex_customer_code(self):
        """Gets the vertex_customer_code of this CustomerDataCustomerExtensionInterface.


        :return: The vertex_customer_code of this CustomerDataCustomerExtensionInterface.
        :rtype: str
        """
        return self._vertex_customer_code

    @vertex_customer_code.setter
    def vertex_customer_code(self, vertex_customer_code):
        """Sets the vertex_customer_code of this CustomerDataCustomerExtensionInterface.


        :param vertex_customer_code: The vertex_customer_code of this CustomerDataCustomerExtensionInterface.
        :type vertex_customer_code: str
        """

        self._vertex_customer_code = vertex_customer_code
