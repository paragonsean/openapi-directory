# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogDataProductCustomOptionTypeInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, extension_attributes: object=None, group: str=None, label: str=None):
        """CatalogDataProductCustomOptionTypeInterface - a model defined in OpenAPI

        :param code: The code of this CatalogDataProductCustomOptionTypeInterface.
        :param extension_attributes: The extension_attributes of this CatalogDataProductCustomOptionTypeInterface.
        :param group: The group of this CatalogDataProductCustomOptionTypeInterface.
        :param label: The label of this CatalogDataProductCustomOptionTypeInterface.
        """
        self.openapi_types = {
            'code': str,
            'extension_attributes': object,
            'group': str,
            'label': str
        }

        self.attribute_map = {
            'code': 'code',
            'extension_attributes': 'extension_attributes',
            'group': 'group',
            'label': 'label'
        }

        self._code = code
        self._extension_attributes = extension_attributes
        self._group = group
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataProductCustomOptionTypeInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-product-custom-option-type-interface of this CatalogDataProductCustomOptionTypeInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this CatalogDataProductCustomOptionTypeInterface.

        Option type code

        :return: The code of this CatalogDataProductCustomOptionTypeInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CatalogDataProductCustomOptionTypeInterface.

        Option type code

        :param code: The code of this CatalogDataProductCustomOptionTypeInterface.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CatalogDataProductCustomOptionTypeInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductCustomOptionTypeInterface

        :return: The extension_attributes of this CatalogDataProductCustomOptionTypeInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CatalogDataProductCustomOptionTypeInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductCustomOptionTypeInterface

        :param extension_attributes: The extension_attributes of this CatalogDataProductCustomOptionTypeInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def group(self):
        """Gets the group of this CatalogDataProductCustomOptionTypeInterface.

        Option type group

        :return: The group of this CatalogDataProductCustomOptionTypeInterface.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this CatalogDataProductCustomOptionTypeInterface.

        Option type group

        :param group: The group of this CatalogDataProductCustomOptionTypeInterface.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def label(self):
        """Gets the label of this CatalogDataProductCustomOptionTypeInterface.

        Option type label

        :return: The label of this CatalogDataProductCustomOptionTypeInterface.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CatalogDataProductCustomOptionTypeInterface.

        Option type label

        :param label: The label of this CatalogDataProductCustomOptionTypeInterface.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label
