# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.framework_search_bucket_interface import FrameworkSearchBucketInterface
from openapi_server import util


class FrameworkSearchAggregationInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_names: List[str]=None, buckets: List[FrameworkSearchBucketInterface]=None):
        """FrameworkSearchAggregationInterface - a model defined in OpenAPI

        :param bucket_names: The bucket_names of this FrameworkSearchAggregationInterface.
        :param buckets: The buckets of this FrameworkSearchAggregationInterface.
        """
        self.openapi_types = {
            'bucket_names': List[str],
            'buckets': List[FrameworkSearchBucketInterface]
        }

        self.attribute_map = {
            'bucket_names': 'bucket_names',
            'buckets': 'buckets'
        }

        self._bucket_names = bucket_names
        self._buckets = buckets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrameworkSearchAggregationInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The framework-search-aggregation-interface of this FrameworkSearchAggregationInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_names(self):
        """Gets the bucket_names of this FrameworkSearchAggregationInterface.

        Document field names

        :return: The bucket_names of this FrameworkSearchAggregationInterface.
        :rtype: List[str]
        """
        return self._bucket_names

    @bucket_names.setter
    def bucket_names(self, bucket_names):
        """Sets the bucket_names of this FrameworkSearchAggregationInterface.

        Document field names

        :param bucket_names: The bucket_names of this FrameworkSearchAggregationInterface.
        :type bucket_names: List[str]
        """
        if bucket_names is None:
            raise ValueError("Invalid value for `bucket_names`, must not be `None`")

        self._bucket_names = bucket_names

    @property
    def buckets(self):
        """Gets the buckets of this FrameworkSearchAggregationInterface.

        All Document fields

        :return: The buckets of this FrameworkSearchAggregationInterface.
        :rtype: List[FrameworkSearchBucketInterface]
        """
        return self._buckets

    @buckets.setter
    def buckets(self, buckets):
        """Sets the buckets of this FrameworkSearchAggregationInterface.

        All Document fields

        :param buckets: The buckets of this FrameworkSearchAggregationInterface.
        :type buckets: List[FrameworkSearchBucketInterface]
        """
        if buckets is None:
            raise ValueError("Invalid value for `buckets`, must not be `None`")

        self._buckets = buckets
