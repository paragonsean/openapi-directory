# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompanyCreditDataHistoryDataInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, available_limit: float=None, balance: float=None, comment: str=None, company_credit_id: int=None, credit_limit: float=None, currency_credit: str=None, currency_operation: str=None, datetime: str=None, id: int=None, purchase_order: str=None, rate: float=None, rate_credit: float=None, type: int=None, user_id: int=None, user_type: int=None):
        """CompanyCreditDataHistoryDataInterface - a model defined in OpenAPI

        :param amount: The amount of this CompanyCreditDataHistoryDataInterface.
        :param available_limit: The available_limit of this CompanyCreditDataHistoryDataInterface.
        :param balance: The balance of this CompanyCreditDataHistoryDataInterface.
        :param comment: The comment of this CompanyCreditDataHistoryDataInterface.
        :param company_credit_id: The company_credit_id of this CompanyCreditDataHistoryDataInterface.
        :param credit_limit: The credit_limit of this CompanyCreditDataHistoryDataInterface.
        :param currency_credit: The currency_credit of this CompanyCreditDataHistoryDataInterface.
        :param currency_operation: The currency_operation of this CompanyCreditDataHistoryDataInterface.
        :param datetime: The datetime of this CompanyCreditDataHistoryDataInterface.
        :param id: The id of this CompanyCreditDataHistoryDataInterface.
        :param purchase_order: The purchase_order of this CompanyCreditDataHistoryDataInterface.
        :param rate: The rate of this CompanyCreditDataHistoryDataInterface.
        :param rate_credit: The rate_credit of this CompanyCreditDataHistoryDataInterface.
        :param type: The type of this CompanyCreditDataHistoryDataInterface.
        :param user_id: The user_id of this CompanyCreditDataHistoryDataInterface.
        :param user_type: The user_type of this CompanyCreditDataHistoryDataInterface.
        """
        self.openapi_types = {
            'amount': float,
            'available_limit': float,
            'balance': float,
            'comment': str,
            'company_credit_id': int,
            'credit_limit': float,
            'currency_credit': str,
            'currency_operation': str,
            'datetime': str,
            'id': int,
            'purchase_order': str,
            'rate': float,
            'rate_credit': float,
            'type': int,
            'user_id': int,
            'user_type': int
        }

        self.attribute_map = {
            'amount': 'amount',
            'available_limit': 'available_limit',
            'balance': 'balance',
            'comment': 'comment',
            'company_credit_id': 'company_credit_id',
            'credit_limit': 'credit_limit',
            'currency_credit': 'currency_credit',
            'currency_operation': 'currency_operation',
            'datetime': 'datetime',
            'id': 'id',
            'purchase_order': 'purchase_order',
            'rate': 'rate',
            'rate_credit': 'rate_credit',
            'type': 'type',
            'user_id': 'user_id',
            'user_type': 'user_type'
        }

        self._amount = amount
        self._available_limit = available_limit
        self._balance = balance
        self._comment = comment
        self._company_credit_id = company_credit_id
        self._credit_limit = credit_limit
        self._currency_credit = currency_credit
        self._currency_operation = currency_operation
        self._datetime = datetime
        self._id = id
        self._purchase_order = purchase_order
        self._rate = rate
        self._rate_credit = rate_credit
        self._type = type
        self._user_id = user_id
        self._user_type = user_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyCreditDataHistoryDataInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The company-credit-data-history-data-interface of this CompanyCreditDataHistoryDataInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CompanyCreditDataHistoryDataInterface.

        Amount.

        :return: The amount of this CompanyCreditDataHistoryDataInterface.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CompanyCreditDataHistoryDataInterface.

        Amount.

        :param amount: The amount of this CompanyCreditDataHistoryDataInterface.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def available_limit(self):
        """Gets the available_limit of this CompanyCreditDataHistoryDataInterface.

        Available limit.

        :return: The available_limit of this CompanyCreditDataHistoryDataInterface.
        :rtype: float
        """
        return self._available_limit

    @available_limit.setter
    def available_limit(self, available_limit):
        """Sets the available_limit of this CompanyCreditDataHistoryDataInterface.

        Available limit.

        :param available_limit: The available_limit of this CompanyCreditDataHistoryDataInterface.
        :type available_limit: float
        """

        self._available_limit = available_limit

    @property
    def balance(self):
        """Gets the balance of this CompanyCreditDataHistoryDataInterface.

        Outstanding balance.

        :return: The balance of this CompanyCreditDataHistoryDataInterface.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this CompanyCreditDataHistoryDataInterface.

        Outstanding balance.

        :param balance: The balance of this CompanyCreditDataHistoryDataInterface.
        :type balance: float
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")

        self._balance = balance

    @property
    def comment(self):
        """Gets the comment of this CompanyCreditDataHistoryDataInterface.

        Comment.

        :return: The comment of this CompanyCreditDataHistoryDataInterface.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CompanyCreditDataHistoryDataInterface.

        Comment.

        :param comment: The comment of this CompanyCreditDataHistoryDataInterface.
        :type comment: str
        """

        self._comment = comment

    @property
    def company_credit_id(self):
        """Gets the company_credit_id of this CompanyCreditDataHistoryDataInterface.

        Company credit id.

        :return: The company_credit_id of this CompanyCreditDataHistoryDataInterface.
        :rtype: int
        """
        return self._company_credit_id

    @company_credit_id.setter
    def company_credit_id(self, company_credit_id):
        """Sets the company_credit_id of this CompanyCreditDataHistoryDataInterface.

        Company credit id.

        :param company_credit_id: The company_credit_id of this CompanyCreditDataHistoryDataInterface.
        :type company_credit_id: int
        """

        self._company_credit_id = company_credit_id

    @property
    def credit_limit(self):
        """Gets the credit_limit of this CompanyCreditDataHistoryDataInterface.

        Credit limit.

        :return: The credit_limit of this CompanyCreditDataHistoryDataInterface.
        :rtype: float
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this CompanyCreditDataHistoryDataInterface.

        Credit limit.

        :param credit_limit: The credit_limit of this CompanyCreditDataHistoryDataInterface.
        :type credit_limit: float
        """
        if credit_limit is None:
            raise ValueError("Invalid value for `credit_limit`, must not be `None`")

        self._credit_limit = credit_limit

    @property
    def currency_credit(self):
        """Gets the currency_credit of this CompanyCreditDataHistoryDataInterface.

        Currency code of credit.

        :return: The currency_credit of this CompanyCreditDataHistoryDataInterface.
        :rtype: str
        """
        return self._currency_credit

    @currency_credit.setter
    def currency_credit(self, currency_credit):
        """Sets the currency_credit of this CompanyCreditDataHistoryDataInterface.

        Currency code of credit.

        :param currency_credit: The currency_credit of this CompanyCreditDataHistoryDataInterface.
        :type currency_credit: str
        """

        self._currency_credit = currency_credit

    @property
    def currency_operation(self):
        """Gets the currency_operation of this CompanyCreditDataHistoryDataInterface.

        Currency code of operation.

        :return: The currency_operation of this CompanyCreditDataHistoryDataInterface.
        :rtype: str
        """
        return self._currency_operation

    @currency_operation.setter
    def currency_operation(self, currency_operation):
        """Sets the currency_operation of this CompanyCreditDataHistoryDataInterface.

        Currency code of operation.

        :param currency_operation: The currency_operation of this CompanyCreditDataHistoryDataInterface.
        :type currency_operation: str
        """

        self._currency_operation = currency_operation

    @property
    def datetime(self):
        """Gets the datetime of this CompanyCreditDataHistoryDataInterface.

        Operation datetime.

        :return: The datetime of this CompanyCreditDataHistoryDataInterface.
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this CompanyCreditDataHistoryDataInterface.

        Operation datetime.

        :param datetime: The datetime of this CompanyCreditDataHistoryDataInterface.
        :type datetime: str
        """

        self._datetime = datetime

    @property
    def id(self):
        """Gets the id of this CompanyCreditDataHistoryDataInterface.

        ID.

        :return: The id of this CompanyCreditDataHistoryDataInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyCreditDataHistoryDataInterface.

        ID.

        :param id: The id of this CompanyCreditDataHistoryDataInterface.
        :type id: int
        """

        self._id = id

    @property
    def purchase_order(self):
        """Gets the purchase_order of this CompanyCreditDataHistoryDataInterface.

        Purchase Order number.

        :return: The purchase_order of this CompanyCreditDataHistoryDataInterface.
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this CompanyCreditDataHistoryDataInterface.

        Purchase Order number.

        :param purchase_order: The purchase_order of this CompanyCreditDataHistoryDataInterface.
        :type purchase_order: str
        """

        self._purchase_order = purchase_order

    @property
    def rate(self):
        """Gets the rate of this CompanyCreditDataHistoryDataInterface.

        Currency rate between credit and operation currencies.

        :return: The rate of this CompanyCreditDataHistoryDataInterface.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this CompanyCreditDataHistoryDataInterface.

        Currency rate between credit and operation currencies.

        :param rate: The rate of this CompanyCreditDataHistoryDataInterface.
        :type rate: float
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")

        self._rate = rate

    @property
    def rate_credit(self):
        """Gets the rate_credit of this CompanyCreditDataHistoryDataInterface.

        Rate between credit and base currencies.

        :return: The rate_credit of this CompanyCreditDataHistoryDataInterface.
        :rtype: float
        """
        return self._rate_credit

    @rate_credit.setter
    def rate_credit(self, rate_credit):
        """Sets the rate_credit of this CompanyCreditDataHistoryDataInterface.

        Rate between credit and base currencies.

        :param rate_credit: The rate_credit of this CompanyCreditDataHistoryDataInterface.
        :type rate_credit: float
        """

        self._rate_credit = rate_credit

    @property
    def type(self):
        """Gets the type of this CompanyCreditDataHistoryDataInterface.

        Type of operation.

        :return: The type of this CompanyCreditDataHistoryDataInterface.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CompanyCreditDataHistoryDataInterface.

        Type of operation.

        :param type: The type of this CompanyCreditDataHistoryDataInterface.
        :type type: int
        """

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this CompanyCreditDataHistoryDataInterface.

        User Id.

        :return: The user_id of this CompanyCreditDataHistoryDataInterface.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CompanyCreditDataHistoryDataInterface.

        User Id.

        :param user_id: The user_id of this CompanyCreditDataHistoryDataInterface.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def user_type(self):
        """Gets the user_type of this CompanyCreditDataHistoryDataInterface.

        User type: integration, admin, customer.

        :return: The user_type of this CompanyCreditDataHistoryDataInterface.
        :rtype: int
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this CompanyCreditDataHistoryDataInterface.

        User type: integration, admin, customer.

        :param user_type: The user_type of this CompanyCreditDataHistoryDataInterface.
        :type user_type: int
        """

        self._user_type = user_type
