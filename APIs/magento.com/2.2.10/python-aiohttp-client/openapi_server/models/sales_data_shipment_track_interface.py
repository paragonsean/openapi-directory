# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesDataShipmentTrackInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carrier_code: str=None, created_at: str=None, description: str=None, entity_id: int=None, extension_attributes: object=None, order_id: int=None, parent_id: int=None, qty: float=None, title: str=None, track_number: str=None, updated_at: str=None, weight: float=None):
        """SalesDataShipmentTrackInterface - a model defined in OpenAPI

        :param carrier_code: The carrier_code of this SalesDataShipmentTrackInterface.
        :param created_at: The created_at of this SalesDataShipmentTrackInterface.
        :param description: The description of this SalesDataShipmentTrackInterface.
        :param entity_id: The entity_id of this SalesDataShipmentTrackInterface.
        :param extension_attributes: The extension_attributes of this SalesDataShipmentTrackInterface.
        :param order_id: The order_id of this SalesDataShipmentTrackInterface.
        :param parent_id: The parent_id of this SalesDataShipmentTrackInterface.
        :param qty: The qty of this SalesDataShipmentTrackInterface.
        :param title: The title of this SalesDataShipmentTrackInterface.
        :param track_number: The track_number of this SalesDataShipmentTrackInterface.
        :param updated_at: The updated_at of this SalesDataShipmentTrackInterface.
        :param weight: The weight of this SalesDataShipmentTrackInterface.
        """
        self.openapi_types = {
            'carrier_code': str,
            'created_at': str,
            'description': str,
            'entity_id': int,
            'extension_attributes': object,
            'order_id': int,
            'parent_id': int,
            'qty': float,
            'title': str,
            'track_number': str,
            'updated_at': str,
            'weight': float
        }

        self.attribute_map = {
            'carrier_code': 'carrier_code',
            'created_at': 'created_at',
            'description': 'description',
            'entity_id': 'entity_id',
            'extension_attributes': 'extension_attributes',
            'order_id': 'order_id',
            'parent_id': 'parent_id',
            'qty': 'qty',
            'title': 'title',
            'track_number': 'track_number',
            'updated_at': 'updated_at',
            'weight': 'weight'
        }

        self._carrier_code = carrier_code
        self._created_at = created_at
        self._description = description
        self._entity_id = entity_id
        self._extension_attributes = extension_attributes
        self._order_id = order_id
        self._parent_id = parent_id
        self._qty = qty
        self._title = title
        self._track_number = track_number
        self._updated_at = updated_at
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesDataShipmentTrackInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sales-data-shipment-track-interface of this SalesDataShipmentTrackInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carrier_code(self):
        """Gets the carrier_code of this SalesDataShipmentTrackInterface.

        Carrier code.

        :return: The carrier_code of this SalesDataShipmentTrackInterface.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this SalesDataShipmentTrackInterface.

        Carrier code.

        :param carrier_code: The carrier_code of this SalesDataShipmentTrackInterface.
        :type carrier_code: str
        """
        if carrier_code is None:
            raise ValueError("Invalid value for `carrier_code`, must not be `None`")

        self._carrier_code = carrier_code

    @property
    def created_at(self):
        """Gets the created_at of this SalesDataShipmentTrackInterface.

        Created-at timestamp.

        :return: The created_at of this SalesDataShipmentTrackInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SalesDataShipmentTrackInterface.

        Created-at timestamp.

        :param created_at: The created_at of this SalesDataShipmentTrackInterface.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this SalesDataShipmentTrackInterface.

        Description.

        :return: The description of this SalesDataShipmentTrackInterface.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SalesDataShipmentTrackInterface.

        Description.

        :param description: The description of this SalesDataShipmentTrackInterface.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def entity_id(self):
        """Gets the entity_id of this SalesDataShipmentTrackInterface.

        Shipment package ID.

        :return: The entity_id of this SalesDataShipmentTrackInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this SalesDataShipmentTrackInterface.

        Shipment package ID.

        :param entity_id: The entity_id of this SalesDataShipmentTrackInterface.
        :type entity_id: int
        """

        self._entity_id = entity_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this SalesDataShipmentTrackInterface.

        ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentTrackInterface

        :return: The extension_attributes of this SalesDataShipmentTrackInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this SalesDataShipmentTrackInterface.

        ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentTrackInterface

        :param extension_attributes: The extension_attributes of this SalesDataShipmentTrackInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def order_id(self):
        """Gets the order_id of this SalesDataShipmentTrackInterface.

        The order_id for the shipment package.

        :return: The order_id of this SalesDataShipmentTrackInterface.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this SalesDataShipmentTrackInterface.

        The order_id for the shipment package.

        :param order_id: The order_id of this SalesDataShipmentTrackInterface.
        :type order_id: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def parent_id(self):
        """Gets the parent_id of this SalesDataShipmentTrackInterface.

        Parent ID.

        :return: The parent_id of this SalesDataShipmentTrackInterface.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this SalesDataShipmentTrackInterface.

        Parent ID.

        :param parent_id: The parent_id of this SalesDataShipmentTrackInterface.
        :type parent_id: int
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id

    @property
    def qty(self):
        """Gets the qty of this SalesDataShipmentTrackInterface.

        Quantity.

        :return: The qty of this SalesDataShipmentTrackInterface.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this SalesDataShipmentTrackInterface.

        Quantity.

        :param qty: The qty of this SalesDataShipmentTrackInterface.
        :type qty: float
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")

        self._qty = qty

    @property
    def title(self):
        """Gets the title of this SalesDataShipmentTrackInterface.

        Title.

        :return: The title of this SalesDataShipmentTrackInterface.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SalesDataShipmentTrackInterface.

        Title.

        :param title: The title of this SalesDataShipmentTrackInterface.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def track_number(self):
        """Gets the track_number of this SalesDataShipmentTrackInterface.

        Track number.

        :return: The track_number of this SalesDataShipmentTrackInterface.
        :rtype: str
        """
        return self._track_number

    @track_number.setter
    def track_number(self, track_number):
        """Sets the track_number of this SalesDataShipmentTrackInterface.

        Track number.

        :param track_number: The track_number of this SalesDataShipmentTrackInterface.
        :type track_number: str
        """
        if track_number is None:
            raise ValueError("Invalid value for `track_number`, must not be `None`")

        self._track_number = track_number

    @property
    def updated_at(self):
        """Gets the updated_at of this SalesDataShipmentTrackInterface.

        Updated-at timestamp.

        :return: The updated_at of this SalesDataShipmentTrackInterface.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SalesDataShipmentTrackInterface.

        Updated-at timestamp.

        :param updated_at: The updated_at of this SalesDataShipmentTrackInterface.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def weight(self):
        """Gets the weight of this SalesDataShipmentTrackInterface.

        Weight.

        :return: The weight of this SalesDataShipmentTrackInterface.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SalesDataShipmentTrackInterface.

        Weight.

        :param weight: The weight of this SalesDataShipmentTrackInterface.
        :type weight: float
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")

        self._weight = weight
