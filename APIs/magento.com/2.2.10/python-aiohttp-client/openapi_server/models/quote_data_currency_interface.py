# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QuoteDataCurrencyInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_currency_code: str=None, base_to_global_rate: float=None, base_to_quote_rate: float=None, extension_attributes: object=None, global_currency_code: str=None, quote_currency_code: str=None, store_currency_code: str=None, store_to_base_rate: float=None, store_to_quote_rate: float=None):
        """QuoteDataCurrencyInterface - a model defined in OpenAPI

        :param base_currency_code: The base_currency_code of this QuoteDataCurrencyInterface.
        :param base_to_global_rate: The base_to_global_rate of this QuoteDataCurrencyInterface.
        :param base_to_quote_rate: The base_to_quote_rate of this QuoteDataCurrencyInterface.
        :param extension_attributes: The extension_attributes of this QuoteDataCurrencyInterface.
        :param global_currency_code: The global_currency_code of this QuoteDataCurrencyInterface.
        :param quote_currency_code: The quote_currency_code of this QuoteDataCurrencyInterface.
        :param store_currency_code: The store_currency_code of this QuoteDataCurrencyInterface.
        :param store_to_base_rate: The store_to_base_rate of this QuoteDataCurrencyInterface.
        :param store_to_quote_rate: The store_to_quote_rate of this QuoteDataCurrencyInterface.
        """
        self.openapi_types = {
            'base_currency_code': str,
            'base_to_global_rate': float,
            'base_to_quote_rate': float,
            'extension_attributes': object,
            'global_currency_code': str,
            'quote_currency_code': str,
            'store_currency_code': str,
            'store_to_base_rate': float,
            'store_to_quote_rate': float
        }

        self.attribute_map = {
            'base_currency_code': 'base_currency_code',
            'base_to_global_rate': 'base_to_global_rate',
            'base_to_quote_rate': 'base_to_quote_rate',
            'extension_attributes': 'extension_attributes',
            'global_currency_code': 'global_currency_code',
            'quote_currency_code': 'quote_currency_code',
            'store_currency_code': 'store_currency_code',
            'store_to_base_rate': 'store_to_base_rate',
            'store_to_quote_rate': 'store_to_quote_rate'
        }

        self._base_currency_code = base_currency_code
        self._base_to_global_rate = base_to_global_rate
        self._base_to_quote_rate = base_to_quote_rate
        self._extension_attributes = extension_attributes
        self._global_currency_code = global_currency_code
        self._quote_currency_code = quote_currency_code
        self._store_currency_code = store_currency_code
        self._store_to_base_rate = store_to_base_rate
        self._store_to_quote_rate = store_to_quote_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuoteDataCurrencyInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The quote-data-currency-interface of this QuoteDataCurrencyInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_currency_code(self):
        """Gets the base_currency_code of this QuoteDataCurrencyInterface.

        Base currency code

        :return: The base_currency_code of this QuoteDataCurrencyInterface.
        :rtype: str
        """
        return self._base_currency_code

    @base_currency_code.setter
    def base_currency_code(self, base_currency_code):
        """Sets the base_currency_code of this QuoteDataCurrencyInterface.

        Base currency code

        :param base_currency_code: The base_currency_code of this QuoteDataCurrencyInterface.
        :type base_currency_code: str
        """

        self._base_currency_code = base_currency_code

    @property
    def base_to_global_rate(self):
        """Gets the base_to_global_rate of this QuoteDataCurrencyInterface.

        Base currency to global currency rate

        :return: The base_to_global_rate of this QuoteDataCurrencyInterface.
        :rtype: float
        """
        return self._base_to_global_rate

    @base_to_global_rate.setter
    def base_to_global_rate(self, base_to_global_rate):
        """Sets the base_to_global_rate of this QuoteDataCurrencyInterface.

        Base currency to global currency rate

        :param base_to_global_rate: The base_to_global_rate of this QuoteDataCurrencyInterface.
        :type base_to_global_rate: float
        """

        self._base_to_global_rate = base_to_global_rate

    @property
    def base_to_quote_rate(self):
        """Gets the base_to_quote_rate of this QuoteDataCurrencyInterface.

        Base currency to quote currency rate

        :return: The base_to_quote_rate of this QuoteDataCurrencyInterface.
        :rtype: float
        """
        return self._base_to_quote_rate

    @base_to_quote_rate.setter
    def base_to_quote_rate(self, base_to_quote_rate):
        """Sets the base_to_quote_rate of this QuoteDataCurrencyInterface.

        Base currency to quote currency rate

        :param base_to_quote_rate: The base_to_quote_rate of this QuoteDataCurrencyInterface.
        :type base_to_quote_rate: float
        """

        self._base_to_quote_rate = base_to_quote_rate

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this QuoteDataCurrencyInterface.

        ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CurrencyInterface

        :return: The extension_attributes of this QuoteDataCurrencyInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this QuoteDataCurrencyInterface.

        ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CurrencyInterface

        :param extension_attributes: The extension_attributes of this QuoteDataCurrencyInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def global_currency_code(self):
        """Gets the global_currency_code of this QuoteDataCurrencyInterface.

        Global currency code

        :return: The global_currency_code of this QuoteDataCurrencyInterface.
        :rtype: str
        """
        return self._global_currency_code

    @global_currency_code.setter
    def global_currency_code(self, global_currency_code):
        """Sets the global_currency_code of this QuoteDataCurrencyInterface.

        Global currency code

        :param global_currency_code: The global_currency_code of this QuoteDataCurrencyInterface.
        :type global_currency_code: str
        """

        self._global_currency_code = global_currency_code

    @property
    def quote_currency_code(self):
        """Gets the quote_currency_code of this QuoteDataCurrencyInterface.

        Quote currency code

        :return: The quote_currency_code of this QuoteDataCurrencyInterface.
        :rtype: str
        """
        return self._quote_currency_code

    @quote_currency_code.setter
    def quote_currency_code(self, quote_currency_code):
        """Sets the quote_currency_code of this QuoteDataCurrencyInterface.

        Quote currency code

        :param quote_currency_code: The quote_currency_code of this QuoteDataCurrencyInterface.
        :type quote_currency_code: str
        """

        self._quote_currency_code = quote_currency_code

    @property
    def store_currency_code(self):
        """Gets the store_currency_code of this QuoteDataCurrencyInterface.

        Store currency code

        :return: The store_currency_code of this QuoteDataCurrencyInterface.
        :rtype: str
        """
        return self._store_currency_code

    @store_currency_code.setter
    def store_currency_code(self, store_currency_code):
        """Sets the store_currency_code of this QuoteDataCurrencyInterface.

        Store currency code

        :param store_currency_code: The store_currency_code of this QuoteDataCurrencyInterface.
        :type store_currency_code: str
        """

        self._store_currency_code = store_currency_code

    @property
    def store_to_base_rate(self):
        """Gets the store_to_base_rate of this QuoteDataCurrencyInterface.

        Store currency to base currency rate

        :return: The store_to_base_rate of this QuoteDataCurrencyInterface.
        :rtype: float
        """
        return self._store_to_base_rate

    @store_to_base_rate.setter
    def store_to_base_rate(self, store_to_base_rate):
        """Sets the store_to_base_rate of this QuoteDataCurrencyInterface.

        Store currency to base currency rate

        :param store_to_base_rate: The store_to_base_rate of this QuoteDataCurrencyInterface.
        :type store_to_base_rate: float
        """

        self._store_to_base_rate = store_to_base_rate

    @property
    def store_to_quote_rate(self):
        """Gets the store_to_quote_rate of this QuoteDataCurrencyInterface.

        Store currency to quote currency rate

        :return: The store_to_quote_rate of this QuoteDataCurrencyInterface.
        :rtype: float
        """
        return self._store_to_quote_rate

    @store_to_quote_rate.setter
    def store_to_quote_rate(self, store_to_quote_rate):
        """Sets the store_to_quote_rate of this QuoteDataCurrencyInterface.

        Store currency to quote currency rate

        :param store_to_quote_rate: The store_to_quote_rate of this QuoteDataCurrencyInterface.
        :type store_to_quote_rate: float
        """

        self._store_to_quote_rate = store_to_quote_rate
