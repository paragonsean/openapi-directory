# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogDataTierPriceInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_group: str=None, extension_attributes: object=None, price: float=None, price_type: str=None, quantity: float=None, sku: str=None, website_id: int=None):
        """CatalogDataTierPriceInterface - a model defined in OpenAPI

        :param customer_group: The customer_group of this CatalogDataTierPriceInterface.
        :param extension_attributes: The extension_attributes of this CatalogDataTierPriceInterface.
        :param price: The price of this CatalogDataTierPriceInterface.
        :param price_type: The price_type of this CatalogDataTierPriceInterface.
        :param quantity: The quantity of this CatalogDataTierPriceInterface.
        :param sku: The sku of this CatalogDataTierPriceInterface.
        :param website_id: The website_id of this CatalogDataTierPriceInterface.
        """
        self.openapi_types = {
            'customer_group': str,
            'extension_attributes': object,
            'price': float,
            'price_type': str,
            'quantity': float,
            'sku': str,
            'website_id': int
        }

        self.attribute_map = {
            'customer_group': 'customer_group',
            'extension_attributes': 'extension_attributes',
            'price': 'price',
            'price_type': 'price_type',
            'quantity': 'quantity',
            'sku': 'sku',
            'website_id': 'website_id'
        }

        self._customer_group = customer_group
        self._extension_attributes = extension_attributes
        self._price = price
        self._price_type = price_type
        self._quantity = quantity
        self._sku = sku
        self._website_id = website_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataTierPriceInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-tier-price-interface of this CatalogDataTierPriceInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_group(self):
        """Gets the customer_group of this CatalogDataTierPriceInterface.

        Customer group.

        :return: The customer_group of this CatalogDataTierPriceInterface.
        :rtype: str
        """
        return self._customer_group

    @customer_group.setter
    def customer_group(self, customer_group):
        """Sets the customer_group of this CatalogDataTierPriceInterface.

        Customer group.

        :param customer_group: The customer_group of this CatalogDataTierPriceInterface.
        :type customer_group: str
        """
        if customer_group is None:
            raise ValueError("Invalid value for `customer_group`, must not be `None`")

        self._customer_group = customer_group

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CatalogDataTierPriceInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\TierPriceInterface

        :return: The extension_attributes of this CatalogDataTierPriceInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CatalogDataTierPriceInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\TierPriceInterface

        :param extension_attributes: The extension_attributes of this CatalogDataTierPriceInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def price(self):
        """Gets the price of this CatalogDataTierPriceInterface.

        Tier price.

        :return: The price of this CatalogDataTierPriceInterface.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CatalogDataTierPriceInterface.

        Tier price.

        :param price: The price of this CatalogDataTierPriceInterface.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def price_type(self):
        """Gets the price_type of this CatalogDataTierPriceInterface.

        Tier price type.

        :return: The price_type of this CatalogDataTierPriceInterface.
        :rtype: str
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this CatalogDataTierPriceInterface.

        Tier price type.

        :param price_type: The price_type of this CatalogDataTierPriceInterface.
        :type price_type: str
        """
        if price_type is None:
            raise ValueError("Invalid value for `price_type`, must not be `None`")

        self._price_type = price_type

    @property
    def quantity(self):
        """Gets the quantity of this CatalogDataTierPriceInterface.

        Quantity.

        :return: The quantity of this CatalogDataTierPriceInterface.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CatalogDataTierPriceInterface.

        Quantity.

        :param quantity: The quantity of this CatalogDataTierPriceInterface.
        :type quantity: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def sku(self):
        """Gets the sku of this CatalogDataTierPriceInterface.

        SKU.

        :return: The sku of this CatalogDataTierPriceInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this CatalogDataTierPriceInterface.

        SKU.

        :param sku: The sku of this CatalogDataTierPriceInterface.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def website_id(self):
        """Gets the website_id of this CatalogDataTierPriceInterface.

        Website id.

        :return: The website_id of this CatalogDataTierPriceInterface.
        :rtype: int
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this CatalogDataTierPriceInterface.

        Website id.

        :param website_id: The website_id of this CatalogDataTierPriceInterface.
        :type website_id: int
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")

        self._website_id = website_id
