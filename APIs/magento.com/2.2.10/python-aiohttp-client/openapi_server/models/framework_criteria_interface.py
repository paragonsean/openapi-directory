# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FrameworkCriteriaInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, criteria_list: List[FrameworkCriteriaInterface]=None, filters: List[str]=None, limit: List[str]=None, mapper_interface_name: str=None, orders: List[str]=None):
        """FrameworkCriteriaInterface - a model defined in OpenAPI

        :param criteria_list: The criteria_list of this FrameworkCriteriaInterface.
        :param filters: The filters of this FrameworkCriteriaInterface.
        :param limit: The limit of this FrameworkCriteriaInterface.
        :param mapper_interface_name: The mapper_interface_name of this FrameworkCriteriaInterface.
        :param orders: The orders of this FrameworkCriteriaInterface.
        """
        self.openapi_types = {
            'criteria_list': List[FrameworkCriteriaInterface],
            'filters': List[str],
            'limit': List[str],
            'mapper_interface_name': str,
            'orders': List[str]
        }

        self.attribute_map = {
            'criteria_list': 'criteria_list',
            'filters': 'filters',
            'limit': 'limit',
            'mapper_interface_name': 'mapper_interface_name',
            'orders': 'orders'
        }

        self._criteria_list = criteria_list
        self._filters = filters
        self._limit = limit
        self._mapper_interface_name = mapper_interface_name
        self._orders = orders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrameworkCriteriaInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The framework-criteria-interface of this FrameworkCriteriaInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def criteria_list(self):
        """Gets the criteria_list of this FrameworkCriteriaInterface.

        Criteria objects added to current Composite Criteria

        :return: The criteria_list of this FrameworkCriteriaInterface.
        :rtype: List[FrameworkCriteriaInterface]
        """
        return self._criteria_list

    @criteria_list.setter
    def criteria_list(self, criteria_list):
        """Sets the criteria_list of this FrameworkCriteriaInterface.

        Criteria objects added to current Composite Criteria

        :param criteria_list: The criteria_list of this FrameworkCriteriaInterface.
        :type criteria_list: List[FrameworkCriteriaInterface]
        """
        if criteria_list is None:
            raise ValueError("Invalid value for `criteria_list`, must not be `None`")

        self._criteria_list = criteria_list

    @property
    def filters(self):
        """Gets the filters of this FrameworkCriteriaInterface.

        List of filters

        :return: The filters of this FrameworkCriteriaInterface.
        :rtype: List[str]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this FrameworkCriteriaInterface.

        List of filters

        :param filters: The filters of this FrameworkCriteriaInterface.
        :type filters: List[str]
        """
        if filters is None:
            raise ValueError("Invalid value for `filters`, must not be `None`")

        self._filters = filters

    @property
    def limit(self):
        """Gets the limit of this FrameworkCriteriaInterface.

        Limit

        :return: The limit of this FrameworkCriteriaInterface.
        :rtype: List[str]
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this FrameworkCriteriaInterface.

        Limit

        :param limit: The limit of this FrameworkCriteriaInterface.
        :type limit: List[str]
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")

        self._limit = limit

    @property
    def mapper_interface_name(self):
        """Gets the mapper_interface_name of this FrameworkCriteriaInterface.

        Associated Mapper Interface name

        :return: The mapper_interface_name of this FrameworkCriteriaInterface.
        :rtype: str
        """
        return self._mapper_interface_name

    @mapper_interface_name.setter
    def mapper_interface_name(self, mapper_interface_name):
        """Sets the mapper_interface_name of this FrameworkCriteriaInterface.

        Associated Mapper Interface name

        :param mapper_interface_name: The mapper_interface_name of this FrameworkCriteriaInterface.
        :type mapper_interface_name: str
        """
        if mapper_interface_name is None:
            raise ValueError("Invalid value for `mapper_interface_name`, must not be `None`")

        self._mapper_interface_name = mapper_interface_name

    @property
    def orders(self):
        """Gets the orders of this FrameworkCriteriaInterface.

        Ordering criteria

        :return: The orders of this FrameworkCriteriaInterface.
        :rtype: List[str]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this FrameworkCriteriaInterface.

        Ordering criteria

        :param orders: The orders of this FrameworkCriteriaInterface.
        :type orders: List[str]
        """
        if orders is None:
            raise ValueError("Invalid value for `orders`, must not be `None`")

        self._orders = orders
