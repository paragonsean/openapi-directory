# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eav_data_attribute_set_interface import EavDataAttributeSetInterface
from openapi_server import util


class EavAttributeSetManagementV1CreatePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_set: EavDataAttributeSetInterface=None, entity_type_code: str=None, skeleton_id: int=None):
        """EavAttributeSetManagementV1CreatePostRequest - a model defined in OpenAPI

        :param attribute_set: The attribute_set of this EavAttributeSetManagementV1CreatePostRequest.
        :param entity_type_code: The entity_type_code of this EavAttributeSetManagementV1CreatePostRequest.
        :param skeleton_id: The skeleton_id of this EavAttributeSetManagementV1CreatePostRequest.
        """
        self.openapi_types = {
            'attribute_set': EavDataAttributeSetInterface,
            'entity_type_code': str,
            'skeleton_id': int
        }

        self.attribute_map = {
            'attribute_set': 'attributeSet',
            'entity_type_code': 'entityTypeCode',
            'skeleton_id': 'skeletonId'
        }

        self._attribute_set = attribute_set
        self._entity_type_code = entity_type_code
        self._skeleton_id = skeleton_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EavAttributeSetManagementV1CreatePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eavAttributeSetManagementV1CreatePost_request of this EavAttributeSetManagementV1CreatePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_set(self):
        """Gets the attribute_set of this EavAttributeSetManagementV1CreatePostRequest.


        :return: The attribute_set of this EavAttributeSetManagementV1CreatePostRequest.
        :rtype: EavDataAttributeSetInterface
        """
        return self._attribute_set

    @attribute_set.setter
    def attribute_set(self, attribute_set):
        """Sets the attribute_set of this EavAttributeSetManagementV1CreatePostRequest.


        :param attribute_set: The attribute_set of this EavAttributeSetManagementV1CreatePostRequest.
        :type attribute_set: EavDataAttributeSetInterface
        """
        if attribute_set is None:
            raise ValueError("Invalid value for `attribute_set`, must not be `None`")

        self._attribute_set = attribute_set

    @property
    def entity_type_code(self):
        """Gets the entity_type_code of this EavAttributeSetManagementV1CreatePostRequest.


        :return: The entity_type_code of this EavAttributeSetManagementV1CreatePostRequest.
        :rtype: str
        """
        return self._entity_type_code

    @entity_type_code.setter
    def entity_type_code(self, entity_type_code):
        """Sets the entity_type_code of this EavAttributeSetManagementV1CreatePostRequest.


        :param entity_type_code: The entity_type_code of this EavAttributeSetManagementV1CreatePostRequest.
        :type entity_type_code: str
        """
        if entity_type_code is None:
            raise ValueError("Invalid value for `entity_type_code`, must not be `None`")

        self._entity_type_code = entity_type_code

    @property
    def skeleton_id(self):
        """Gets the skeleton_id of this EavAttributeSetManagementV1CreatePostRequest.


        :return: The skeleton_id of this EavAttributeSetManagementV1CreatePostRequest.
        :rtype: int
        """
        return self._skeleton_id

    @skeleton_id.setter
    def skeleton_id(self, skeleton_id):
        """Sets the skeleton_id of this EavAttributeSetManagementV1CreatePostRequest.


        :param skeleton_id: The skeleton_id of this EavAttributeSetManagementV1CreatePostRequest.
        :type skeleton_id: int
        """
        if skeleton_id is None:
            raise ValueError("Invalid value for `skeleton_id`, must not be `None`")

        self._skeleton_id = skeleton_id
