# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MsrpDataProductRenderMsrpPriceInfoInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, explanation_message: str=None, extension_attributes: object=None, is_applicable: str=None, is_shown_price_on_gesture: str=None, msrp_message: str=None, msrp_price: str=None):
        """MsrpDataProductRenderMsrpPriceInfoInterface - a model defined in OpenAPI

        :param explanation_message: The explanation_message of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :param extension_attributes: The extension_attributes of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :param is_applicable: The is_applicable of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :param is_shown_price_on_gesture: The is_shown_price_on_gesture of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :param msrp_message: The msrp_message of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :param msrp_price: The msrp_price of this MsrpDataProductRenderMsrpPriceInfoInterface.
        """
        self.openapi_types = {
            'explanation_message': str,
            'extension_attributes': object,
            'is_applicable': str,
            'is_shown_price_on_gesture': str,
            'msrp_message': str,
            'msrp_price': str
        }

        self.attribute_map = {
            'explanation_message': 'explanation_message',
            'extension_attributes': 'extension_attributes',
            'is_applicable': 'is_applicable',
            'is_shown_price_on_gesture': 'is_shown_price_on_gesture',
            'msrp_message': 'msrp_message',
            'msrp_price': 'msrp_price'
        }

        self._explanation_message = explanation_message
        self._extension_attributes = extension_attributes
        self._is_applicable = is_applicable
        self._is_shown_price_on_gesture = is_shown_price_on_gesture
        self._msrp_message = msrp_message
        self._msrp_price = msrp_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MsrpDataProductRenderMsrpPriceInfoInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The msrp-data-product-render-msrp-price-info-interface of this MsrpDataProductRenderMsrpPriceInfoInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def explanation_message(self):
        """Gets the explanation_message of this MsrpDataProductRenderMsrpPriceInfoInterface.


        :return: The explanation_message of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :rtype: str
        """
        return self._explanation_message

    @explanation_message.setter
    def explanation_message(self, explanation_message):
        """Sets the explanation_message of this MsrpDataProductRenderMsrpPriceInfoInterface.


        :param explanation_message: The explanation_message of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :type explanation_message: str
        """
        if explanation_message is None:
            raise ValueError("Invalid value for `explanation_message`, must not be `None`")

        self._explanation_message = explanation_message

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this MsrpDataProductRenderMsrpPriceInfoInterface.

        ExtensionInterface class for @see \\Magento\\Msrp\\Api\\Data\\ProductRender\\MsrpPriceInfoInterface

        :return: The extension_attributes of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this MsrpDataProductRenderMsrpPriceInfoInterface.

        ExtensionInterface class for @see \\Magento\\Msrp\\Api\\Data\\ProductRender\\MsrpPriceInfoInterface

        :param extension_attributes: The extension_attributes of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def is_applicable(self):
        """Gets the is_applicable of this MsrpDataProductRenderMsrpPriceInfoInterface.


        :return: The is_applicable of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :rtype: str
        """
        return self._is_applicable

    @is_applicable.setter
    def is_applicable(self, is_applicable):
        """Sets the is_applicable of this MsrpDataProductRenderMsrpPriceInfoInterface.


        :param is_applicable: The is_applicable of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :type is_applicable: str
        """
        if is_applicable is None:
            raise ValueError("Invalid value for `is_applicable`, must not be `None`")

        self._is_applicable = is_applicable

    @property
    def is_shown_price_on_gesture(self):
        """Gets the is_shown_price_on_gesture of this MsrpDataProductRenderMsrpPriceInfoInterface.


        :return: The is_shown_price_on_gesture of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :rtype: str
        """
        return self._is_shown_price_on_gesture

    @is_shown_price_on_gesture.setter
    def is_shown_price_on_gesture(self, is_shown_price_on_gesture):
        """Sets the is_shown_price_on_gesture of this MsrpDataProductRenderMsrpPriceInfoInterface.


        :param is_shown_price_on_gesture: The is_shown_price_on_gesture of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :type is_shown_price_on_gesture: str
        """
        if is_shown_price_on_gesture is None:
            raise ValueError("Invalid value for `is_shown_price_on_gesture`, must not be `None`")

        self._is_shown_price_on_gesture = is_shown_price_on_gesture

    @property
    def msrp_message(self):
        """Gets the msrp_message of this MsrpDataProductRenderMsrpPriceInfoInterface.


        :return: The msrp_message of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :rtype: str
        """
        return self._msrp_message

    @msrp_message.setter
    def msrp_message(self, msrp_message):
        """Sets the msrp_message of this MsrpDataProductRenderMsrpPriceInfoInterface.


        :param msrp_message: The msrp_message of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :type msrp_message: str
        """
        if msrp_message is None:
            raise ValueError("Invalid value for `msrp_message`, must not be `None`")

        self._msrp_message = msrp_message

    @property
    def msrp_price(self):
        """Gets the msrp_price of this MsrpDataProductRenderMsrpPriceInfoInterface.


        :return: The msrp_price of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :rtype: str
        """
        return self._msrp_price

    @msrp_price.setter
    def msrp_price(self, msrp_price):
        """Sets the msrp_price of this MsrpDataProductRenderMsrpPriceInfoInterface.


        :param msrp_price: The msrp_price of this MsrpDataProductRenderMsrpPriceInfoInterface.
        :type msrp_price: str
        """
        if msrp_price is None:
            raise ValueError("Invalid value for `msrp_price`, must not be `None`")

        self._msrp_price = msrp_price
