# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StoreDataStoreConfigInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_currency_code: str=None, base_link_url: str=None, base_media_url: str=None, base_static_url: str=None, base_url: str=None, code: str=None, default_display_currency_code: str=None, extension_attributes: object=None, id: int=None, locale: str=None, secure_base_link_url: str=None, secure_base_media_url: str=None, secure_base_static_url: str=None, secure_base_url: str=None, timezone: str=None, website_id: int=None, weight_unit: str=None):
        """StoreDataStoreConfigInterface - a model defined in OpenAPI

        :param base_currency_code: The base_currency_code of this StoreDataStoreConfigInterface.
        :param base_link_url: The base_link_url of this StoreDataStoreConfigInterface.
        :param base_media_url: The base_media_url of this StoreDataStoreConfigInterface.
        :param base_static_url: The base_static_url of this StoreDataStoreConfigInterface.
        :param base_url: The base_url of this StoreDataStoreConfigInterface.
        :param code: The code of this StoreDataStoreConfigInterface.
        :param default_display_currency_code: The default_display_currency_code of this StoreDataStoreConfigInterface.
        :param extension_attributes: The extension_attributes of this StoreDataStoreConfigInterface.
        :param id: The id of this StoreDataStoreConfigInterface.
        :param locale: The locale of this StoreDataStoreConfigInterface.
        :param secure_base_link_url: The secure_base_link_url of this StoreDataStoreConfigInterface.
        :param secure_base_media_url: The secure_base_media_url of this StoreDataStoreConfigInterface.
        :param secure_base_static_url: The secure_base_static_url of this StoreDataStoreConfigInterface.
        :param secure_base_url: The secure_base_url of this StoreDataStoreConfigInterface.
        :param timezone: The timezone of this StoreDataStoreConfigInterface.
        :param website_id: The website_id of this StoreDataStoreConfigInterface.
        :param weight_unit: The weight_unit of this StoreDataStoreConfigInterface.
        """
        self.openapi_types = {
            'base_currency_code': str,
            'base_link_url': str,
            'base_media_url': str,
            'base_static_url': str,
            'base_url': str,
            'code': str,
            'default_display_currency_code': str,
            'extension_attributes': object,
            'id': int,
            'locale': str,
            'secure_base_link_url': str,
            'secure_base_media_url': str,
            'secure_base_static_url': str,
            'secure_base_url': str,
            'timezone': str,
            'website_id': int,
            'weight_unit': str
        }

        self.attribute_map = {
            'base_currency_code': 'base_currency_code',
            'base_link_url': 'base_link_url',
            'base_media_url': 'base_media_url',
            'base_static_url': 'base_static_url',
            'base_url': 'base_url',
            'code': 'code',
            'default_display_currency_code': 'default_display_currency_code',
            'extension_attributes': 'extension_attributes',
            'id': 'id',
            'locale': 'locale',
            'secure_base_link_url': 'secure_base_link_url',
            'secure_base_media_url': 'secure_base_media_url',
            'secure_base_static_url': 'secure_base_static_url',
            'secure_base_url': 'secure_base_url',
            'timezone': 'timezone',
            'website_id': 'website_id',
            'weight_unit': 'weight_unit'
        }

        self._base_currency_code = base_currency_code
        self._base_link_url = base_link_url
        self._base_media_url = base_media_url
        self._base_static_url = base_static_url
        self._base_url = base_url
        self._code = code
        self._default_display_currency_code = default_display_currency_code
        self._extension_attributes = extension_attributes
        self._id = id
        self._locale = locale
        self._secure_base_link_url = secure_base_link_url
        self._secure_base_media_url = secure_base_media_url
        self._secure_base_static_url = secure_base_static_url
        self._secure_base_url = secure_base_url
        self._timezone = timezone
        self._website_id = website_id
        self._weight_unit = weight_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreDataStoreConfigInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The store-data-store-config-interface of this StoreDataStoreConfigInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_currency_code(self):
        """Gets the base_currency_code of this StoreDataStoreConfigInterface.

        Base currency code

        :return: The base_currency_code of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._base_currency_code

    @base_currency_code.setter
    def base_currency_code(self, base_currency_code):
        """Sets the base_currency_code of this StoreDataStoreConfigInterface.

        Base currency code

        :param base_currency_code: The base_currency_code of this StoreDataStoreConfigInterface.
        :type base_currency_code: str
        """
        if base_currency_code is None:
            raise ValueError("Invalid value for `base_currency_code`, must not be `None`")

        self._base_currency_code = base_currency_code

    @property
    def base_link_url(self):
        """Gets the base_link_url of this StoreDataStoreConfigInterface.

        Base link URL for the store

        :return: The base_link_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._base_link_url

    @base_link_url.setter
    def base_link_url(self, base_link_url):
        """Sets the base_link_url of this StoreDataStoreConfigInterface.

        Base link URL for the store

        :param base_link_url: The base_link_url of this StoreDataStoreConfigInterface.
        :type base_link_url: str
        """
        if base_link_url is None:
            raise ValueError("Invalid value for `base_link_url`, must not be `None`")

        self._base_link_url = base_link_url

    @property
    def base_media_url(self):
        """Gets the base_media_url of this StoreDataStoreConfigInterface.

        Base media URL for the store

        :return: The base_media_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._base_media_url

    @base_media_url.setter
    def base_media_url(self, base_media_url):
        """Sets the base_media_url of this StoreDataStoreConfigInterface.

        Base media URL for the store

        :param base_media_url: The base_media_url of this StoreDataStoreConfigInterface.
        :type base_media_url: str
        """
        if base_media_url is None:
            raise ValueError("Invalid value for `base_media_url`, must not be `None`")

        self._base_media_url = base_media_url

    @property
    def base_static_url(self):
        """Gets the base_static_url of this StoreDataStoreConfigInterface.

        Base static URL for the store

        :return: The base_static_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._base_static_url

    @base_static_url.setter
    def base_static_url(self, base_static_url):
        """Sets the base_static_url of this StoreDataStoreConfigInterface.

        Base static URL for the store

        :param base_static_url: The base_static_url of this StoreDataStoreConfigInterface.
        :type base_static_url: str
        """
        if base_static_url is None:
            raise ValueError("Invalid value for `base_static_url`, must not be `None`")

        self._base_static_url = base_static_url

    @property
    def base_url(self):
        """Gets the base_url of this StoreDataStoreConfigInterface.

        Base URL for the store

        :return: The base_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this StoreDataStoreConfigInterface.

        Base URL for the store

        :param base_url: The base_url of this StoreDataStoreConfigInterface.
        :type base_url: str
        """
        if base_url is None:
            raise ValueError("Invalid value for `base_url`, must not be `None`")

        self._base_url = base_url

    @property
    def code(self):
        """Gets the code of this StoreDataStoreConfigInterface.

        Store code

        :return: The code of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this StoreDataStoreConfigInterface.

        Store code

        :param code: The code of this StoreDataStoreConfigInterface.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def default_display_currency_code(self):
        """Gets the default_display_currency_code of this StoreDataStoreConfigInterface.

        Default display currency code

        :return: The default_display_currency_code of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._default_display_currency_code

    @default_display_currency_code.setter
    def default_display_currency_code(self, default_display_currency_code):
        """Sets the default_display_currency_code of this StoreDataStoreConfigInterface.

        Default display currency code

        :param default_display_currency_code: The default_display_currency_code of this StoreDataStoreConfigInterface.
        :type default_display_currency_code: str
        """
        if default_display_currency_code is None:
            raise ValueError("Invalid value for `default_display_currency_code`, must not be `None`")

        self._default_display_currency_code = default_display_currency_code

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this StoreDataStoreConfigInterface.

        ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\StoreConfigInterface

        :return: The extension_attributes of this StoreDataStoreConfigInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this StoreDataStoreConfigInterface.

        ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\StoreConfigInterface

        :param extension_attributes: The extension_attributes of this StoreDataStoreConfigInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def id(self):
        """Gets the id of this StoreDataStoreConfigInterface.

        Store id

        :return: The id of this StoreDataStoreConfigInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoreDataStoreConfigInterface.

        Store id

        :param id: The id of this StoreDataStoreConfigInterface.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def locale(self):
        """Gets the locale of this StoreDataStoreConfigInterface.

        Store locale

        :return: The locale of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this StoreDataStoreConfigInterface.

        Store locale

        :param locale: The locale of this StoreDataStoreConfigInterface.
        :type locale: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")

        self._locale = locale

    @property
    def secure_base_link_url(self):
        """Gets the secure_base_link_url of this StoreDataStoreConfigInterface.

        Secure base link URL for the store

        :return: The secure_base_link_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._secure_base_link_url

    @secure_base_link_url.setter
    def secure_base_link_url(self, secure_base_link_url):
        """Sets the secure_base_link_url of this StoreDataStoreConfigInterface.

        Secure base link URL for the store

        :param secure_base_link_url: The secure_base_link_url of this StoreDataStoreConfigInterface.
        :type secure_base_link_url: str
        """
        if secure_base_link_url is None:
            raise ValueError("Invalid value for `secure_base_link_url`, must not be `None`")

        self._secure_base_link_url = secure_base_link_url

    @property
    def secure_base_media_url(self):
        """Gets the secure_base_media_url of this StoreDataStoreConfigInterface.

        Secure base media URL for the store

        :return: The secure_base_media_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._secure_base_media_url

    @secure_base_media_url.setter
    def secure_base_media_url(self, secure_base_media_url):
        """Sets the secure_base_media_url of this StoreDataStoreConfigInterface.

        Secure base media URL for the store

        :param secure_base_media_url: The secure_base_media_url of this StoreDataStoreConfigInterface.
        :type secure_base_media_url: str
        """
        if secure_base_media_url is None:
            raise ValueError("Invalid value for `secure_base_media_url`, must not be `None`")

        self._secure_base_media_url = secure_base_media_url

    @property
    def secure_base_static_url(self):
        """Gets the secure_base_static_url of this StoreDataStoreConfigInterface.

        Secure base static URL for the store

        :return: The secure_base_static_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._secure_base_static_url

    @secure_base_static_url.setter
    def secure_base_static_url(self, secure_base_static_url):
        """Sets the secure_base_static_url of this StoreDataStoreConfigInterface.

        Secure base static URL for the store

        :param secure_base_static_url: The secure_base_static_url of this StoreDataStoreConfigInterface.
        :type secure_base_static_url: str
        """
        if secure_base_static_url is None:
            raise ValueError("Invalid value for `secure_base_static_url`, must not be `None`")

        self._secure_base_static_url = secure_base_static_url

    @property
    def secure_base_url(self):
        """Gets the secure_base_url of this StoreDataStoreConfigInterface.

        Secure base URL for the store

        :return: The secure_base_url of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._secure_base_url

    @secure_base_url.setter
    def secure_base_url(self, secure_base_url):
        """Sets the secure_base_url of this StoreDataStoreConfigInterface.

        Secure base URL for the store

        :param secure_base_url: The secure_base_url of this StoreDataStoreConfigInterface.
        :type secure_base_url: str
        """
        if secure_base_url is None:
            raise ValueError("Invalid value for `secure_base_url`, must not be `None`")

        self._secure_base_url = secure_base_url

    @property
    def timezone(self):
        """Gets the timezone of this StoreDataStoreConfigInterface.

        Timezone of the store

        :return: The timezone of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this StoreDataStoreConfigInterface.

        Timezone of the store

        :param timezone: The timezone of this StoreDataStoreConfigInterface.
        :type timezone: str
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")

        self._timezone = timezone

    @property
    def website_id(self):
        """Gets the website_id of this StoreDataStoreConfigInterface.

        Website id of the store

        :return: The website_id of this StoreDataStoreConfigInterface.
        :rtype: int
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this StoreDataStoreConfigInterface.

        Website id of the store

        :param website_id: The website_id of this StoreDataStoreConfigInterface.
        :type website_id: int
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")

        self._website_id = website_id

    @property
    def weight_unit(self):
        """Gets the weight_unit of this StoreDataStoreConfigInterface.

        The unit of weight

        :return: The weight_unit of this StoreDataStoreConfigInterface.
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this StoreDataStoreConfigInterface.

        The unit of weight

        :param weight_unit: The weight_unit of this StoreDataStoreConfigInterface.
        :type weight_unit: str
        """
        if weight_unit is None:
            raise ValueError("Invalid value for `weight_unit`, must not be `None`")

        self._weight_unit = weight_unit
