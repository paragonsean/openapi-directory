# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asynchronous_operations_data_summary_operation_status_interface import AsynchronousOperationsDataSummaryOperationStatusInterface
from openapi_server import util


class AsynchronousOperationsDataBulkOperationsStatusInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bulk_id: str=None, description: str=None, extension_attributes: object=None, operation_count: int=None, operations_list: List[AsynchronousOperationsDataSummaryOperationStatusInterface]=None, start_time: str=None, user_id: int=None):
        """AsynchronousOperationsDataBulkOperationsStatusInterface - a model defined in OpenAPI

        :param bulk_id: The bulk_id of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :param description: The description of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :param extension_attributes: The extension_attributes of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :param operation_count: The operation_count of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :param operations_list: The operations_list of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :param start_time: The start_time of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :param user_id: The user_id of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        """
        self.openapi_types = {
            'bulk_id': str,
            'description': str,
            'extension_attributes': object,
            'operation_count': int,
            'operations_list': List[AsynchronousOperationsDataSummaryOperationStatusInterface],
            'start_time': str,
            'user_id': int
        }

        self.attribute_map = {
            'bulk_id': 'bulk_id',
            'description': 'description',
            'extension_attributes': 'extension_attributes',
            'operation_count': 'operation_count',
            'operations_list': 'operations_list',
            'start_time': 'start_time',
            'user_id': 'user_id'
        }

        self._bulk_id = bulk_id
        self._description = description
        self._extension_attributes = extension_attributes
        self._operation_count = operation_count
        self._operations_list = operations_list
        self._start_time = start_time
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AsynchronousOperationsDataBulkOperationsStatusInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The asynchronous-operations-data-bulk-operations-status-interface of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bulk_id(self):
        """Gets the bulk_id of this AsynchronousOperationsDataBulkOperationsStatusInterface.

        Bulk uuid

        :return: The bulk_id of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :rtype: str
        """
        return self._bulk_id

    @bulk_id.setter
    def bulk_id(self, bulk_id):
        """Sets the bulk_id of this AsynchronousOperationsDataBulkOperationsStatusInterface.

        Bulk uuid

        :param bulk_id: The bulk_id of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :type bulk_id: str
        """
        if bulk_id is None:
            raise ValueError("Invalid value for `bulk_id`, must not be `None`")

        self._bulk_id = bulk_id

    @property
    def description(self):
        """Gets the description of this AsynchronousOperationsDataBulkOperationsStatusInterface.

        Bulk description

        :return: The description of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AsynchronousOperationsDataBulkOperationsStatusInterface.

        Bulk description

        :param description: The description of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this AsynchronousOperationsDataBulkOperationsStatusInterface.

        ExtensionInterface class for @see \\Magento\\AsynchronousOperations\\Api\\Data\\BulkSummaryInterface

        :return: The extension_attributes of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this AsynchronousOperationsDataBulkOperationsStatusInterface.

        ExtensionInterface class for @see \\Magento\\AsynchronousOperations\\Api\\Data\\BulkSummaryInterface

        :param extension_attributes: The extension_attributes of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def operation_count(self):
        """Gets the operation_count of this AsynchronousOperationsDataBulkOperationsStatusInterface.

        Total number of operations scheduled in scope of this bulk

        :return: The operation_count of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :rtype: int
        """
        return self._operation_count

    @operation_count.setter
    def operation_count(self, operation_count):
        """Sets the operation_count of this AsynchronousOperationsDataBulkOperationsStatusInterface.

        Total number of operations scheduled in scope of this bulk

        :param operation_count: The operation_count of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :type operation_count: int
        """
        if operation_count is None:
            raise ValueError("Invalid value for `operation_count`, must not be `None`")

        self._operation_count = operation_count

    @property
    def operations_list(self):
        """Gets the operations_list of this AsynchronousOperationsDataBulkOperationsStatusInterface.

        List of operation with statuses (short data).

        :return: The operations_list of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :rtype: List[AsynchronousOperationsDataSummaryOperationStatusInterface]
        """
        return self._operations_list

    @operations_list.setter
    def operations_list(self, operations_list):
        """Sets the operations_list of this AsynchronousOperationsDataBulkOperationsStatusInterface.

        List of operation with statuses (short data).

        :param operations_list: The operations_list of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :type operations_list: List[AsynchronousOperationsDataSummaryOperationStatusInterface]
        """
        if operations_list is None:
            raise ValueError("Invalid value for `operations_list`, must not be `None`")

        self._operations_list = operations_list

    @property
    def start_time(self):
        """Gets the start_time of this AsynchronousOperationsDataBulkOperationsStatusInterface.

        Bulk scheduled time

        :return: The start_time of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AsynchronousOperationsDataBulkOperationsStatusInterface.

        Bulk scheduled time

        :param start_time: The start_time of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :type start_time: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def user_id(self):
        """Gets the user_id of this AsynchronousOperationsDataBulkOperationsStatusInterface.

        User id

        :return: The user_id of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AsynchronousOperationsDataBulkOperationsStatusInterface.

        User id

        :param user_id: The user_id of this AsynchronousOperationsDataBulkOperationsStatusInterface.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
