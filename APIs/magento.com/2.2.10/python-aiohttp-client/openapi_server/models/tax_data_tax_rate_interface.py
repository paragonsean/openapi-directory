# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tax_data_tax_rate_title_interface import TaxDataTaxRateTitleInterface
from openapi_server import util


class TaxDataTaxRateInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, extension_attributes: object=None, id: int=None, rate: float=None, region_name: str=None, tax_country_id: str=None, tax_postcode: str=None, tax_region_id: int=None, titles: List[TaxDataTaxRateTitleInterface]=None, zip_from: int=None, zip_is_range: int=None, zip_to: int=None):
        """TaxDataTaxRateInterface - a model defined in OpenAPI

        :param code: The code of this TaxDataTaxRateInterface.
        :param extension_attributes: The extension_attributes of this TaxDataTaxRateInterface.
        :param id: The id of this TaxDataTaxRateInterface.
        :param rate: The rate of this TaxDataTaxRateInterface.
        :param region_name: The region_name of this TaxDataTaxRateInterface.
        :param tax_country_id: The tax_country_id of this TaxDataTaxRateInterface.
        :param tax_postcode: The tax_postcode of this TaxDataTaxRateInterface.
        :param tax_region_id: The tax_region_id of this TaxDataTaxRateInterface.
        :param titles: The titles of this TaxDataTaxRateInterface.
        :param zip_from: The zip_from of this TaxDataTaxRateInterface.
        :param zip_is_range: The zip_is_range of this TaxDataTaxRateInterface.
        :param zip_to: The zip_to of this TaxDataTaxRateInterface.
        """
        self.openapi_types = {
            'code': str,
            'extension_attributes': object,
            'id': int,
            'rate': float,
            'region_name': str,
            'tax_country_id': str,
            'tax_postcode': str,
            'tax_region_id': int,
            'titles': List[TaxDataTaxRateTitleInterface],
            'zip_from': int,
            'zip_is_range': int,
            'zip_to': int
        }

        self.attribute_map = {
            'code': 'code',
            'extension_attributes': 'extension_attributes',
            'id': 'id',
            'rate': 'rate',
            'region_name': 'region_name',
            'tax_country_id': 'tax_country_id',
            'tax_postcode': 'tax_postcode',
            'tax_region_id': 'tax_region_id',
            'titles': 'titles',
            'zip_from': 'zip_from',
            'zip_is_range': 'zip_is_range',
            'zip_to': 'zip_to'
        }

        self._code = code
        self._extension_attributes = extension_attributes
        self._id = id
        self._rate = rate
        self._region_name = region_name
        self._tax_country_id = tax_country_id
        self._tax_postcode = tax_postcode
        self._tax_region_id = tax_region_id
        self._titles = titles
        self._zip_from = zip_from
        self._zip_is_range = zip_is_range
        self._zip_to = zip_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxDataTaxRateInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tax-data-tax-rate-interface of this TaxDataTaxRateInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this TaxDataTaxRateInterface.

        Tax rate code

        :return: The code of this TaxDataTaxRateInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TaxDataTaxRateInterface.

        Tax rate code

        :param code: The code of this TaxDataTaxRateInterface.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this TaxDataTaxRateInterface.

        ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRateInterface

        :return: The extension_attributes of this TaxDataTaxRateInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this TaxDataTaxRateInterface.

        ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRateInterface

        :param extension_attributes: The extension_attributes of this TaxDataTaxRateInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def id(self):
        """Gets the id of this TaxDataTaxRateInterface.

        Id

        :return: The id of this TaxDataTaxRateInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxDataTaxRateInterface.

        Id

        :param id: The id of this TaxDataTaxRateInterface.
        :type id: int
        """

        self._id = id

    @property
    def rate(self):
        """Gets the rate of this TaxDataTaxRateInterface.

        Tax rate in percentage

        :return: The rate of this TaxDataTaxRateInterface.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this TaxDataTaxRateInterface.

        Tax rate in percentage

        :param rate: The rate of this TaxDataTaxRateInterface.
        :type rate: float
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")

        self._rate = rate

    @property
    def region_name(self):
        """Gets the region_name of this TaxDataTaxRateInterface.

        Region name

        :return: The region_name of this TaxDataTaxRateInterface.
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this TaxDataTaxRateInterface.

        Region name

        :param region_name: The region_name of this TaxDataTaxRateInterface.
        :type region_name: str
        """

        self._region_name = region_name

    @property
    def tax_country_id(self):
        """Gets the tax_country_id of this TaxDataTaxRateInterface.

        Country id

        :return: The tax_country_id of this TaxDataTaxRateInterface.
        :rtype: str
        """
        return self._tax_country_id

    @tax_country_id.setter
    def tax_country_id(self, tax_country_id):
        """Sets the tax_country_id of this TaxDataTaxRateInterface.

        Country id

        :param tax_country_id: The tax_country_id of this TaxDataTaxRateInterface.
        :type tax_country_id: str
        """
        if tax_country_id is None:
            raise ValueError("Invalid value for `tax_country_id`, must not be `None`")

        self._tax_country_id = tax_country_id

    @property
    def tax_postcode(self):
        """Gets the tax_postcode of this TaxDataTaxRateInterface.

        Postcode

        :return: The tax_postcode of this TaxDataTaxRateInterface.
        :rtype: str
        """
        return self._tax_postcode

    @tax_postcode.setter
    def tax_postcode(self, tax_postcode):
        """Sets the tax_postcode of this TaxDataTaxRateInterface.

        Postcode

        :param tax_postcode: The tax_postcode of this TaxDataTaxRateInterface.
        :type tax_postcode: str
        """

        self._tax_postcode = tax_postcode

    @property
    def tax_region_id(self):
        """Gets the tax_region_id of this TaxDataTaxRateInterface.

        Region id

        :return: The tax_region_id of this TaxDataTaxRateInterface.
        :rtype: int
        """
        return self._tax_region_id

    @tax_region_id.setter
    def tax_region_id(self, tax_region_id):
        """Sets the tax_region_id of this TaxDataTaxRateInterface.

        Region id

        :param tax_region_id: The tax_region_id of this TaxDataTaxRateInterface.
        :type tax_region_id: int
        """

        self._tax_region_id = tax_region_id

    @property
    def titles(self):
        """Gets the titles of this TaxDataTaxRateInterface.

        Tax rate titles

        :return: The titles of this TaxDataTaxRateInterface.
        :rtype: List[TaxDataTaxRateTitleInterface]
        """
        return self._titles

    @titles.setter
    def titles(self, titles):
        """Sets the titles of this TaxDataTaxRateInterface.

        Tax rate titles

        :param titles: The titles of this TaxDataTaxRateInterface.
        :type titles: List[TaxDataTaxRateTitleInterface]
        """

        self._titles = titles

    @property
    def zip_from(self):
        """Gets the zip_from of this TaxDataTaxRateInterface.

        Zip range from

        :return: The zip_from of this TaxDataTaxRateInterface.
        :rtype: int
        """
        return self._zip_from

    @zip_from.setter
    def zip_from(self, zip_from):
        """Sets the zip_from of this TaxDataTaxRateInterface.

        Zip range from

        :param zip_from: The zip_from of this TaxDataTaxRateInterface.
        :type zip_from: int
        """

        self._zip_from = zip_from

    @property
    def zip_is_range(self):
        """Gets the zip_is_range of this TaxDataTaxRateInterface.

        Zip is range

        :return: The zip_is_range of this TaxDataTaxRateInterface.
        :rtype: int
        """
        return self._zip_is_range

    @zip_is_range.setter
    def zip_is_range(self, zip_is_range):
        """Sets the zip_is_range of this TaxDataTaxRateInterface.

        Zip is range

        :param zip_is_range: The zip_is_range of this TaxDataTaxRateInterface.
        :type zip_is_range: int
        """

        self._zip_is_range = zip_is_range

    @property
    def zip_to(self):
        """Gets the zip_to of this TaxDataTaxRateInterface.

        Zip range to

        :return: The zip_to of this TaxDataTaxRateInterface.
        :rtype: int
        """
        return self._zip_to

    @zip_to.setter
    def zip_to(self, zip_to):
        """Sets the zip_to of this TaxDataTaxRateInterface.

        Zip range to

        :param zip_to: The zip_to of this TaxDataTaxRateInterface.
        :type zip_to: int
        """

        self._zip_to = zip_to
