# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.directory_data_region_information_interface import DirectoryDataRegionInformationInterface
from openapi_server import util


class DirectoryDataCountryInformationInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_regions: List[DirectoryDataRegionInformationInterface]=None, extension_attributes: object=None, full_name_english: str=None, full_name_locale: str=None, id: str=None, three_letter_abbreviation: str=None, two_letter_abbreviation: str=None):
        """DirectoryDataCountryInformationInterface - a model defined in OpenAPI

        :param available_regions: The available_regions of this DirectoryDataCountryInformationInterface.
        :param extension_attributes: The extension_attributes of this DirectoryDataCountryInformationInterface.
        :param full_name_english: The full_name_english of this DirectoryDataCountryInformationInterface.
        :param full_name_locale: The full_name_locale of this DirectoryDataCountryInformationInterface.
        :param id: The id of this DirectoryDataCountryInformationInterface.
        :param three_letter_abbreviation: The three_letter_abbreviation of this DirectoryDataCountryInformationInterface.
        :param two_letter_abbreviation: The two_letter_abbreviation of this DirectoryDataCountryInformationInterface.
        """
        self.openapi_types = {
            'available_regions': List[DirectoryDataRegionInformationInterface],
            'extension_attributes': object,
            'full_name_english': str,
            'full_name_locale': str,
            'id': str,
            'three_letter_abbreviation': str,
            'two_letter_abbreviation': str
        }

        self.attribute_map = {
            'available_regions': 'available_regions',
            'extension_attributes': 'extension_attributes',
            'full_name_english': 'full_name_english',
            'full_name_locale': 'full_name_locale',
            'id': 'id',
            'three_letter_abbreviation': 'three_letter_abbreviation',
            'two_letter_abbreviation': 'two_letter_abbreviation'
        }

        self._available_regions = available_regions
        self._extension_attributes = extension_attributes
        self._full_name_english = full_name_english
        self._full_name_locale = full_name_locale
        self._id = id
        self._three_letter_abbreviation = three_letter_abbreviation
        self._two_letter_abbreviation = two_letter_abbreviation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DirectoryDataCountryInformationInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The directory-data-country-information-interface of this DirectoryDataCountryInformationInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_regions(self):
        """Gets the available_regions of this DirectoryDataCountryInformationInterface.

        The available regions for the store.

        :return: The available_regions of this DirectoryDataCountryInformationInterface.
        :rtype: List[DirectoryDataRegionInformationInterface]
        """
        return self._available_regions

    @available_regions.setter
    def available_regions(self, available_regions):
        """Sets the available_regions of this DirectoryDataCountryInformationInterface.

        The available regions for the store.

        :param available_regions: The available_regions of this DirectoryDataCountryInformationInterface.
        :type available_regions: List[DirectoryDataRegionInformationInterface]
        """

        self._available_regions = available_regions

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this DirectoryDataCountryInformationInterface.

        ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CountryInformationInterface

        :return: The extension_attributes of this DirectoryDataCountryInformationInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this DirectoryDataCountryInformationInterface.

        ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CountryInformationInterface

        :param extension_attributes: The extension_attributes of this DirectoryDataCountryInformationInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def full_name_english(self):
        """Gets the full_name_english of this DirectoryDataCountryInformationInterface.

        The country full name (in English) for the store.

        :return: The full_name_english of this DirectoryDataCountryInformationInterface.
        :rtype: str
        """
        return self._full_name_english

    @full_name_english.setter
    def full_name_english(self, full_name_english):
        """Sets the full_name_english of this DirectoryDataCountryInformationInterface.

        The country full name (in English) for the store.

        :param full_name_english: The full_name_english of this DirectoryDataCountryInformationInterface.
        :type full_name_english: str
        """
        if full_name_english is None:
            raise ValueError("Invalid value for `full_name_english`, must not be `None`")

        self._full_name_english = full_name_english

    @property
    def full_name_locale(self):
        """Gets the full_name_locale of this DirectoryDataCountryInformationInterface.

        The country full name (in store locale) for the store.

        :return: The full_name_locale of this DirectoryDataCountryInformationInterface.
        :rtype: str
        """
        return self._full_name_locale

    @full_name_locale.setter
    def full_name_locale(self, full_name_locale):
        """Sets the full_name_locale of this DirectoryDataCountryInformationInterface.

        The country full name (in store locale) for the store.

        :param full_name_locale: The full_name_locale of this DirectoryDataCountryInformationInterface.
        :type full_name_locale: str
        """
        if full_name_locale is None:
            raise ValueError("Invalid value for `full_name_locale`, must not be `None`")

        self._full_name_locale = full_name_locale

    @property
    def id(self):
        """Gets the id of this DirectoryDataCountryInformationInterface.

        The country id for the store.

        :return: The id of this DirectoryDataCountryInformationInterface.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DirectoryDataCountryInformationInterface.

        The country id for the store.

        :param id: The id of this DirectoryDataCountryInformationInterface.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def three_letter_abbreviation(self):
        """Gets the three_letter_abbreviation of this DirectoryDataCountryInformationInterface.

        The country 3 letter abbreviation for the store.

        :return: The three_letter_abbreviation of this DirectoryDataCountryInformationInterface.
        :rtype: str
        """
        return self._three_letter_abbreviation

    @three_letter_abbreviation.setter
    def three_letter_abbreviation(self, three_letter_abbreviation):
        """Sets the three_letter_abbreviation of this DirectoryDataCountryInformationInterface.

        The country 3 letter abbreviation for the store.

        :param three_letter_abbreviation: The three_letter_abbreviation of this DirectoryDataCountryInformationInterface.
        :type three_letter_abbreviation: str
        """
        if three_letter_abbreviation is None:
            raise ValueError("Invalid value for `three_letter_abbreviation`, must not be `None`")

        self._three_letter_abbreviation = three_letter_abbreviation

    @property
    def two_letter_abbreviation(self):
        """Gets the two_letter_abbreviation of this DirectoryDataCountryInformationInterface.

        The country 2 letter abbreviation for the store.

        :return: The two_letter_abbreviation of this DirectoryDataCountryInformationInterface.
        :rtype: str
        """
        return self._two_letter_abbreviation

    @two_letter_abbreviation.setter
    def two_letter_abbreviation(self, two_letter_abbreviation):
        """Sets the two_letter_abbreviation of this DirectoryDataCountryInformationInterface.

        The country 2 letter abbreviation for the store.

        :param two_letter_abbreviation: The two_letter_abbreviation of this DirectoryDataCountryInformationInterface.
        :type two_letter_abbreviation: str
        """
        if two_letter_abbreviation is None:
            raise ValueError("Invalid value for `two_letter_abbreviation`, must not be `None`")

        self._two_letter_abbreviation = two_letter_abbreviation
