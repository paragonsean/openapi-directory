# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxDataTaxRuleInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculate_subtotal: bool=None, code: str=None, customer_tax_class_ids: List[int]=None, extension_attributes: object=None, id: int=None, position: int=None, priority: int=None, product_tax_class_ids: List[int]=None, tax_rate_ids: List[int]=None):
        """TaxDataTaxRuleInterface - a model defined in OpenAPI

        :param calculate_subtotal: The calculate_subtotal of this TaxDataTaxRuleInterface.
        :param code: The code of this TaxDataTaxRuleInterface.
        :param customer_tax_class_ids: The customer_tax_class_ids of this TaxDataTaxRuleInterface.
        :param extension_attributes: The extension_attributes of this TaxDataTaxRuleInterface.
        :param id: The id of this TaxDataTaxRuleInterface.
        :param position: The position of this TaxDataTaxRuleInterface.
        :param priority: The priority of this TaxDataTaxRuleInterface.
        :param product_tax_class_ids: The product_tax_class_ids of this TaxDataTaxRuleInterface.
        :param tax_rate_ids: The tax_rate_ids of this TaxDataTaxRuleInterface.
        """
        self.openapi_types = {
            'calculate_subtotal': bool,
            'code': str,
            'customer_tax_class_ids': List[int],
            'extension_attributes': object,
            'id': int,
            'position': int,
            'priority': int,
            'product_tax_class_ids': List[int],
            'tax_rate_ids': List[int]
        }

        self.attribute_map = {
            'calculate_subtotal': 'calculate_subtotal',
            'code': 'code',
            'customer_tax_class_ids': 'customer_tax_class_ids',
            'extension_attributes': 'extension_attributes',
            'id': 'id',
            'position': 'position',
            'priority': 'priority',
            'product_tax_class_ids': 'product_tax_class_ids',
            'tax_rate_ids': 'tax_rate_ids'
        }

        self._calculate_subtotal = calculate_subtotal
        self._code = code
        self._customer_tax_class_ids = customer_tax_class_ids
        self._extension_attributes = extension_attributes
        self._id = id
        self._position = position
        self._priority = priority
        self._product_tax_class_ids = product_tax_class_ids
        self._tax_rate_ids = tax_rate_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxDataTaxRuleInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tax-data-tax-rule-interface of this TaxDataTaxRuleInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculate_subtotal(self):
        """Gets the calculate_subtotal of this TaxDataTaxRuleInterface.

        Calculate subtotal.

        :return: The calculate_subtotal of this TaxDataTaxRuleInterface.
        :rtype: bool
        """
        return self._calculate_subtotal

    @calculate_subtotal.setter
    def calculate_subtotal(self, calculate_subtotal):
        """Sets the calculate_subtotal of this TaxDataTaxRuleInterface.

        Calculate subtotal.

        :param calculate_subtotal: The calculate_subtotal of this TaxDataTaxRuleInterface.
        :type calculate_subtotal: bool
        """

        self._calculate_subtotal = calculate_subtotal

    @property
    def code(self):
        """Gets the code of this TaxDataTaxRuleInterface.

        Tax rule code

        :return: The code of this TaxDataTaxRuleInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TaxDataTaxRuleInterface.

        Tax rule code

        :param code: The code of this TaxDataTaxRuleInterface.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def customer_tax_class_ids(self):
        """Gets the customer_tax_class_ids of this TaxDataTaxRuleInterface.

        Customer tax class id

        :return: The customer_tax_class_ids of this TaxDataTaxRuleInterface.
        :rtype: List[int]
        """
        return self._customer_tax_class_ids

    @customer_tax_class_ids.setter
    def customer_tax_class_ids(self, customer_tax_class_ids):
        """Sets the customer_tax_class_ids of this TaxDataTaxRuleInterface.

        Customer tax class id

        :param customer_tax_class_ids: The customer_tax_class_ids of this TaxDataTaxRuleInterface.
        :type customer_tax_class_ids: List[int]
        """
        if customer_tax_class_ids is None:
            raise ValueError("Invalid value for `customer_tax_class_ids`, must not be `None`")

        self._customer_tax_class_ids = customer_tax_class_ids

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this TaxDataTaxRuleInterface.

        ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRuleInterface

        :return: The extension_attributes of this TaxDataTaxRuleInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this TaxDataTaxRuleInterface.

        ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRuleInterface

        :param extension_attributes: The extension_attributes of this TaxDataTaxRuleInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def id(self):
        """Gets the id of this TaxDataTaxRuleInterface.

        Id

        :return: The id of this TaxDataTaxRuleInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxDataTaxRuleInterface.

        Id

        :param id: The id of this TaxDataTaxRuleInterface.
        :type id: int
        """

        self._id = id

    @property
    def position(self):
        """Gets the position of this TaxDataTaxRuleInterface.

        Sort order.

        :return: The position of this TaxDataTaxRuleInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this TaxDataTaxRuleInterface.

        Sort order.

        :param position: The position of this TaxDataTaxRuleInterface.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def priority(self):
        """Gets the priority of this TaxDataTaxRuleInterface.

        Priority

        :return: The priority of this TaxDataTaxRuleInterface.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TaxDataTaxRuleInterface.

        Priority

        :param priority: The priority of this TaxDataTaxRuleInterface.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def product_tax_class_ids(self):
        """Gets the product_tax_class_ids of this TaxDataTaxRuleInterface.

        Product tax class id

        :return: The product_tax_class_ids of this TaxDataTaxRuleInterface.
        :rtype: List[int]
        """
        return self._product_tax_class_ids

    @product_tax_class_ids.setter
    def product_tax_class_ids(self, product_tax_class_ids):
        """Sets the product_tax_class_ids of this TaxDataTaxRuleInterface.

        Product tax class id

        :param product_tax_class_ids: The product_tax_class_ids of this TaxDataTaxRuleInterface.
        :type product_tax_class_ids: List[int]
        """
        if product_tax_class_ids is None:
            raise ValueError("Invalid value for `product_tax_class_ids`, must not be `None`")

        self._product_tax_class_ids = product_tax_class_ids

    @property
    def tax_rate_ids(self):
        """Gets the tax_rate_ids of this TaxDataTaxRuleInterface.

        Tax rate ids

        :return: The tax_rate_ids of this TaxDataTaxRuleInterface.
        :rtype: List[int]
        """
        return self._tax_rate_ids

    @tax_rate_ids.setter
    def tax_rate_ids(self, tax_rate_ids):
        """Sets the tax_rate_ids of this TaxDataTaxRuleInterface.

        Tax rate ids

        :param tax_rate_ids: The tax_rate_ids of this TaxDataTaxRuleInterface.
        :type tax_rate_ids: List[int]
        """
        if tax_rate_ids is None:
            raise ValueError("Invalid value for `tax_rate_ids`, must not be `None`")

        self._tax_rate_ids = tax_rate_ids
