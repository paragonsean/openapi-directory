# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DirectoryDataExchangeRateInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_to: str=None, extension_attributes: object=None, rate: float=None):
        """DirectoryDataExchangeRateInterface - a model defined in OpenAPI

        :param currency_to: The currency_to of this DirectoryDataExchangeRateInterface.
        :param extension_attributes: The extension_attributes of this DirectoryDataExchangeRateInterface.
        :param rate: The rate of this DirectoryDataExchangeRateInterface.
        """
        self.openapi_types = {
            'currency_to': str,
            'extension_attributes': object,
            'rate': float
        }

        self.attribute_map = {
            'currency_to': 'currency_to',
            'extension_attributes': 'extension_attributes',
            'rate': 'rate'
        }

        self._currency_to = currency_to
        self._extension_attributes = extension_attributes
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DirectoryDataExchangeRateInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The directory-data-exchange-rate-interface of this DirectoryDataExchangeRateInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_to(self):
        """Gets the currency_to of this DirectoryDataExchangeRateInterface.

        The currency code associated with the exchange rate.

        :return: The currency_to of this DirectoryDataExchangeRateInterface.
        :rtype: str
        """
        return self._currency_to

    @currency_to.setter
    def currency_to(self, currency_to):
        """Sets the currency_to of this DirectoryDataExchangeRateInterface.

        The currency code associated with the exchange rate.

        :param currency_to: The currency_to of this DirectoryDataExchangeRateInterface.
        :type currency_to: str
        """
        if currency_to is None:
            raise ValueError("Invalid value for `currency_to`, must not be `None`")

        self._currency_to = currency_to

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this DirectoryDataExchangeRateInterface.

        ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\ExchangeRateInterface

        :return: The extension_attributes of this DirectoryDataExchangeRateInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this DirectoryDataExchangeRateInterface.

        ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\ExchangeRateInterface

        :param extension_attributes: The extension_attributes of this DirectoryDataExchangeRateInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def rate(self):
        """Gets the rate of this DirectoryDataExchangeRateInterface.

        The exchange rate for the associated currency and the store's base currency.

        :return: The rate of this DirectoryDataExchangeRateInterface.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this DirectoryDataExchangeRateInterface.

        The exchange rate for the associated currency and the store's base currency.

        :param rate: The rate of this DirectoryDataExchangeRateInterface.
        :type rate: float
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")

        self._rate = rate
