# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_data_product_tier_price_extension_interface import CatalogDataProductTierPriceExtensionInterface
from openapi_server import util


class CatalogDataProductTierPriceInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_group_id: int=None, extension_attributes: CatalogDataProductTierPriceExtensionInterface=None, qty: float=None, value: float=None):
        """CatalogDataProductTierPriceInterface - a model defined in OpenAPI

        :param customer_group_id: The customer_group_id of this CatalogDataProductTierPriceInterface.
        :param extension_attributes: The extension_attributes of this CatalogDataProductTierPriceInterface.
        :param qty: The qty of this CatalogDataProductTierPriceInterface.
        :param value: The value of this CatalogDataProductTierPriceInterface.
        """
        self.openapi_types = {
            'customer_group_id': int,
            'extension_attributes': CatalogDataProductTierPriceExtensionInterface,
            'qty': float,
            'value': float
        }

        self.attribute_map = {
            'customer_group_id': 'customer_group_id',
            'extension_attributes': 'extension_attributes',
            'qty': 'qty',
            'value': 'value'
        }

        self._customer_group_id = customer_group_id
        self._extension_attributes = extension_attributes
        self._qty = qty
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataProductTierPriceInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-product-tier-price-interface of this CatalogDataProductTierPriceInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_group_id(self):
        """Gets the customer_group_id of this CatalogDataProductTierPriceInterface.

        Customer group id

        :return: The customer_group_id of this CatalogDataProductTierPriceInterface.
        :rtype: int
        """
        return self._customer_group_id

    @customer_group_id.setter
    def customer_group_id(self, customer_group_id):
        """Sets the customer_group_id of this CatalogDataProductTierPriceInterface.

        Customer group id

        :param customer_group_id: The customer_group_id of this CatalogDataProductTierPriceInterface.
        :type customer_group_id: int
        """
        if customer_group_id is None:
            raise ValueError("Invalid value for `customer_group_id`, must not be `None`")

        self._customer_group_id = customer_group_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CatalogDataProductTierPriceInterface.


        :return: The extension_attributes of this CatalogDataProductTierPriceInterface.
        :rtype: CatalogDataProductTierPriceExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CatalogDataProductTierPriceInterface.


        :param extension_attributes: The extension_attributes of this CatalogDataProductTierPriceInterface.
        :type extension_attributes: CatalogDataProductTierPriceExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def qty(self):
        """Gets the qty of this CatalogDataProductTierPriceInterface.

        Tier qty

        :return: The qty of this CatalogDataProductTierPriceInterface.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this CatalogDataProductTierPriceInterface.

        Tier qty

        :param qty: The qty of this CatalogDataProductTierPriceInterface.
        :type qty: float
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")

        self._qty = qty

    @property
    def value(self):
        """Gets the value of this CatalogDataProductTierPriceInterface.

        Price value

        :return: The value of this CatalogDataProductTierPriceInterface.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CatalogDataProductTierPriceInterface.

        Price value

        :param value: The value of this CatalogDataProductTierPriceInterface.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
