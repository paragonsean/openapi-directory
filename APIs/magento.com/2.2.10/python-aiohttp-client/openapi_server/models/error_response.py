# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_errors_item import ErrorErrorsItem
from openapi_server.models.error_parameters_item import ErrorParametersItem
from openapi_server import util


class ErrorResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, errors: List[ErrorErrorsItem]=None, message: str=None, parameters: List[ErrorParametersItem]=None, trace: str=None):
        """ErrorResponse - a model defined in OpenAPI

        :param code: The code of this ErrorResponse.
        :param errors: The errors of this ErrorResponse.
        :param message: The message of this ErrorResponse.
        :param parameters: The parameters of this ErrorResponse.
        :param trace: The trace of this ErrorResponse.
        """
        self.openapi_types = {
            'code': int,
            'errors': List[ErrorErrorsItem],
            'message': str,
            'parameters': List[ErrorParametersItem],
            'trace': str
        }

        self.attribute_map = {
            'code': 'code',
            'errors': 'errors',
            'message': 'message',
            'parameters': 'parameters',
            'trace': 'trace'
        }

        self._code = code
        self._errors = errors
        self._message = message
        self._parameters = parameters
        self._trace = trace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The error-response of this ErrorResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ErrorResponse.

        Error code

        :return: The code of this ErrorResponse.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorResponse.

        Error code

        :param code: The code of this ErrorResponse.
        :type code: int
        """

        self._code = code

    @property
    def errors(self):
        """Gets the errors of this ErrorResponse.

        Errors list

        :return: The errors of this ErrorResponse.
        :rtype: List[ErrorErrorsItem]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ErrorResponse.

        Errors list

        :param errors: The errors of this ErrorResponse.
        :type errors: List[ErrorErrorsItem]
        """

        self._errors = errors

    @property
    def message(self):
        """Gets the message of this ErrorResponse.

        Error message

        :return: The message of this ErrorResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorResponse.

        Error message

        :param message: The message of this ErrorResponse.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def parameters(self):
        """Gets the parameters of this ErrorResponse.

        Error parameters list

        :return: The parameters of this ErrorResponse.
        :rtype: List[ErrorParametersItem]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ErrorResponse.

        Error parameters list

        :param parameters: The parameters of this ErrorResponse.
        :type parameters: List[ErrorParametersItem]
        """

        self._parameters = parameters

    @property
    def trace(self):
        """Gets the trace of this ErrorResponse.

        Stack trace

        :return: The trace of this ErrorResponse.
        :rtype: str
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this ErrorResponse.

        Stack trace

        :param trace: The trace of this ErrorResponse.
        :type trace: str
        """

        self._trace = trace
