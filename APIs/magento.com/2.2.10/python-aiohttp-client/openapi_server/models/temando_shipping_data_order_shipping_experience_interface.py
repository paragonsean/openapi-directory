# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TemandoShippingDataOrderShippingExperienceInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, cost: float=None, label: str=None):
        """TemandoShippingDataOrderShippingExperienceInterface - a model defined in OpenAPI

        :param code: The code of this TemandoShippingDataOrderShippingExperienceInterface.
        :param cost: The cost of this TemandoShippingDataOrderShippingExperienceInterface.
        :param label: The label of this TemandoShippingDataOrderShippingExperienceInterface.
        """
        self.openapi_types = {
            'code': str,
            'cost': float,
            'label': str
        }

        self.attribute_map = {
            'code': 'code',
            'cost': 'cost',
            'label': 'label'
        }

        self._code = code
        self._cost = cost
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemandoShippingDataOrderShippingExperienceInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The temando-shipping-data-order-shipping-experience-interface of this TemandoShippingDataOrderShippingExperienceInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this TemandoShippingDataOrderShippingExperienceInterface.


        :return: The code of this TemandoShippingDataOrderShippingExperienceInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TemandoShippingDataOrderShippingExperienceInterface.


        :param code: The code of this TemandoShippingDataOrderShippingExperienceInterface.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def cost(self):
        """Gets the cost of this TemandoShippingDataOrderShippingExperienceInterface.


        :return: The cost of this TemandoShippingDataOrderShippingExperienceInterface.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this TemandoShippingDataOrderShippingExperienceInterface.


        :param cost: The cost of this TemandoShippingDataOrderShippingExperienceInterface.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def label(self):
        """Gets the label of this TemandoShippingDataOrderShippingExperienceInterface.


        :return: The label of this TemandoShippingDataOrderShippingExperienceInterface.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TemandoShippingDataOrderShippingExperienceInterface.


        :param label: The label of this TemandoShippingDataOrderShippingExperienceInterface.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label
