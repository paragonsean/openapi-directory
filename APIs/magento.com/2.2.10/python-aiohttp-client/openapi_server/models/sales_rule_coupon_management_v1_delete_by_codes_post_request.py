# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesRuleCouponManagementV1DeleteByCodesPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codes: List[str]=None, ignore_invalid_coupons: bool=None):
        """SalesRuleCouponManagementV1DeleteByCodesPostRequest - a model defined in OpenAPI

        :param codes: The codes of this SalesRuleCouponManagementV1DeleteByCodesPostRequest.
        :param ignore_invalid_coupons: The ignore_invalid_coupons of this SalesRuleCouponManagementV1DeleteByCodesPostRequest.
        """
        self.openapi_types = {
            'codes': List[str],
            'ignore_invalid_coupons': bool
        }

        self.attribute_map = {
            'codes': 'codes',
            'ignore_invalid_coupons': 'ignoreInvalidCoupons'
        }

        self._codes = codes
        self._ignore_invalid_coupons = ignore_invalid_coupons

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesRuleCouponManagementV1DeleteByCodesPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The salesRuleCouponManagementV1DeleteByCodesPost_request of this SalesRuleCouponManagementV1DeleteByCodesPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codes(self):
        """Gets the codes of this SalesRuleCouponManagementV1DeleteByCodesPostRequest.


        :return: The codes of this SalesRuleCouponManagementV1DeleteByCodesPostRequest.
        :rtype: List[str]
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this SalesRuleCouponManagementV1DeleteByCodesPostRequest.


        :param codes: The codes of this SalesRuleCouponManagementV1DeleteByCodesPostRequest.
        :type codes: List[str]
        """
        if codes is None:
            raise ValueError("Invalid value for `codes`, must not be `None`")

        self._codes = codes

    @property
    def ignore_invalid_coupons(self):
        """Gets the ignore_invalid_coupons of this SalesRuleCouponManagementV1DeleteByCodesPostRequest.


        :return: The ignore_invalid_coupons of this SalesRuleCouponManagementV1DeleteByCodesPostRequest.
        :rtype: bool
        """
        return self._ignore_invalid_coupons

    @ignore_invalid_coupons.setter
    def ignore_invalid_coupons(self, ignore_invalid_coupons):
        """Sets the ignore_invalid_coupons of this SalesRuleCouponManagementV1DeleteByCodesPostRequest.


        :param ignore_invalid_coupons: The ignore_invalid_coupons of this SalesRuleCouponManagementV1DeleteByCodesPostRequest.
        :type ignore_invalid_coupons: bool
        """

        self._ignore_invalid_coupons = ignore_invalid_coupons
