# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerDataValidationResultsInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, messages: List[str]=None, valid: bool=None):
        """CustomerDataValidationResultsInterface - a model defined in OpenAPI

        :param messages: The messages of this CustomerDataValidationResultsInterface.
        :param valid: The valid of this CustomerDataValidationResultsInterface.
        """
        self.openapi_types = {
            'messages': List[str],
            'valid': bool
        }

        self.attribute_map = {
            'messages': 'messages',
            'valid': 'valid'
        }

        self._messages = messages
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerDataValidationResultsInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customer-data-validation-results-interface of this CustomerDataValidationResultsInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def messages(self):
        """Gets the messages of this CustomerDataValidationResultsInterface.

        Error messages as array in case of validation failure, else return empty array.

        :return: The messages of this CustomerDataValidationResultsInterface.
        :rtype: List[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this CustomerDataValidationResultsInterface.

        Error messages as array in case of validation failure, else return empty array.

        :param messages: The messages of this CustomerDataValidationResultsInterface.
        :type messages: List[str]
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")

        self._messages = messages

    @property
    def valid(self):
        """Gets the valid of this CustomerDataValidationResultsInterface.

        If the provided data is valid.

        :return: The valid of this CustomerDataValidationResultsInterface.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this CustomerDataValidationResultsInterface.

        If the provided data is valid.

        :param valid: The valid of this CustomerDataValidationResultsInterface.
        :type valid: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")

        self._valid = valid
