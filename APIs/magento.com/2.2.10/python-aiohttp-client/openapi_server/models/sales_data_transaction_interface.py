# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesDataTransactionInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_information: List[str]=None, child_transactions: List[SalesDataTransactionInterface]=None, created_at: str=None, extension_attributes: object=None, is_closed: int=None, order_id: int=None, parent_id: int=None, parent_txn_id: str=None, payment_id: int=None, transaction_id: int=None, txn_id: str=None, txn_type: str=None):
        """SalesDataTransactionInterface - a model defined in OpenAPI

        :param additional_information: The additional_information of this SalesDataTransactionInterface.
        :param child_transactions: The child_transactions of this SalesDataTransactionInterface.
        :param created_at: The created_at of this SalesDataTransactionInterface.
        :param extension_attributes: The extension_attributes of this SalesDataTransactionInterface.
        :param is_closed: The is_closed of this SalesDataTransactionInterface.
        :param order_id: The order_id of this SalesDataTransactionInterface.
        :param parent_id: The parent_id of this SalesDataTransactionInterface.
        :param parent_txn_id: The parent_txn_id of this SalesDataTransactionInterface.
        :param payment_id: The payment_id of this SalesDataTransactionInterface.
        :param transaction_id: The transaction_id of this SalesDataTransactionInterface.
        :param txn_id: The txn_id of this SalesDataTransactionInterface.
        :param txn_type: The txn_type of this SalesDataTransactionInterface.
        """
        self.openapi_types = {
            'additional_information': List[str],
            'child_transactions': List[SalesDataTransactionInterface],
            'created_at': str,
            'extension_attributes': object,
            'is_closed': int,
            'order_id': int,
            'parent_id': int,
            'parent_txn_id': str,
            'payment_id': int,
            'transaction_id': int,
            'txn_id': str,
            'txn_type': str
        }

        self.attribute_map = {
            'additional_information': 'additional_information',
            'child_transactions': 'child_transactions',
            'created_at': 'created_at',
            'extension_attributes': 'extension_attributes',
            'is_closed': 'is_closed',
            'order_id': 'order_id',
            'parent_id': 'parent_id',
            'parent_txn_id': 'parent_txn_id',
            'payment_id': 'payment_id',
            'transaction_id': 'transaction_id',
            'txn_id': 'txn_id',
            'txn_type': 'txn_type'
        }

        self._additional_information = additional_information
        self._child_transactions = child_transactions
        self._created_at = created_at
        self._extension_attributes = extension_attributes
        self._is_closed = is_closed
        self._order_id = order_id
        self._parent_id = parent_id
        self._parent_txn_id = parent_txn_id
        self._payment_id = payment_id
        self._transaction_id = transaction_id
        self._txn_id = txn_id
        self._txn_type = txn_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesDataTransactionInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sales-data-transaction-interface of this SalesDataTransactionInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_information(self):
        """Gets the additional_information of this SalesDataTransactionInterface.

        Array of additional information. Otherwise, null.

        :return: The additional_information of this SalesDataTransactionInterface.
        :rtype: List[str]
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this SalesDataTransactionInterface.

        Array of additional information. Otherwise, null.

        :param additional_information: The additional_information of this SalesDataTransactionInterface.
        :type additional_information: List[str]
        """

        self._additional_information = additional_information

    @property
    def child_transactions(self):
        """Gets the child_transactions of this SalesDataTransactionInterface.

        Array of child transactions.

        :return: The child_transactions of this SalesDataTransactionInterface.
        :rtype: List[SalesDataTransactionInterface]
        """
        return self._child_transactions

    @child_transactions.setter
    def child_transactions(self, child_transactions):
        """Sets the child_transactions of this SalesDataTransactionInterface.

        Array of child transactions.

        :param child_transactions: The child_transactions of this SalesDataTransactionInterface.
        :type child_transactions: List[SalesDataTransactionInterface]
        """
        if child_transactions is None:
            raise ValueError("Invalid value for `child_transactions`, must not be `None`")

        self._child_transactions = child_transactions

    @property
    def created_at(self):
        """Gets the created_at of this SalesDataTransactionInterface.

        Created-at timestamp.

        :return: The created_at of this SalesDataTransactionInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SalesDataTransactionInterface.

        Created-at timestamp.

        :param created_at: The created_at of this SalesDataTransactionInterface.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this SalesDataTransactionInterface.

        ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\TransactionInterface

        :return: The extension_attributes of this SalesDataTransactionInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this SalesDataTransactionInterface.

        ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\TransactionInterface

        :param extension_attributes: The extension_attributes of this SalesDataTransactionInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def is_closed(self):
        """Gets the is_closed of this SalesDataTransactionInterface.

        Is-closed flag value.

        :return: The is_closed of this SalesDataTransactionInterface.
        :rtype: int
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this SalesDataTransactionInterface.

        Is-closed flag value.

        :param is_closed: The is_closed of this SalesDataTransactionInterface.
        :type is_closed: int
        """
        if is_closed is None:
            raise ValueError("Invalid value for `is_closed`, must not be `None`")

        self._is_closed = is_closed

    @property
    def order_id(self):
        """Gets the order_id of this SalesDataTransactionInterface.

        Order ID.

        :return: The order_id of this SalesDataTransactionInterface.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this SalesDataTransactionInterface.

        Order ID.

        :param order_id: The order_id of this SalesDataTransactionInterface.
        :type order_id: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def parent_id(self):
        """Gets the parent_id of this SalesDataTransactionInterface.

        The parent ID for the transaction. Otherwise, null.

        :return: The parent_id of this SalesDataTransactionInterface.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this SalesDataTransactionInterface.

        The parent ID for the transaction. Otherwise, null.

        :param parent_id: The parent_id of this SalesDataTransactionInterface.
        :type parent_id: int
        """

        self._parent_id = parent_id

    @property
    def parent_txn_id(self):
        """Gets the parent_txn_id of this SalesDataTransactionInterface.

        Parent transaction business ID.

        :return: The parent_txn_id of this SalesDataTransactionInterface.
        :rtype: str
        """
        return self._parent_txn_id

    @parent_txn_id.setter
    def parent_txn_id(self, parent_txn_id):
        """Sets the parent_txn_id of this SalesDataTransactionInterface.

        Parent transaction business ID.

        :param parent_txn_id: The parent_txn_id of this SalesDataTransactionInterface.
        :type parent_txn_id: str
        """
        if parent_txn_id is None:
            raise ValueError("Invalid value for `parent_txn_id`, must not be `None`")

        self._parent_txn_id = parent_txn_id

    @property
    def payment_id(self):
        """Gets the payment_id of this SalesDataTransactionInterface.

        Payment ID.

        :return: The payment_id of this SalesDataTransactionInterface.
        :rtype: int
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this SalesDataTransactionInterface.

        Payment ID.

        :param payment_id: The payment_id of this SalesDataTransactionInterface.
        :type payment_id: int
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")

        self._payment_id = payment_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this SalesDataTransactionInterface.

        Transaction ID.

        :return: The transaction_id of this SalesDataTransactionInterface.
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this SalesDataTransactionInterface.

        Transaction ID.

        :param transaction_id: The transaction_id of this SalesDataTransactionInterface.
        :type transaction_id: int
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def txn_id(self):
        """Gets the txn_id of this SalesDataTransactionInterface.

        Transaction business ID.

        :return: The txn_id of this SalesDataTransactionInterface.
        :rtype: str
        """
        return self._txn_id

    @txn_id.setter
    def txn_id(self, txn_id):
        """Sets the txn_id of this SalesDataTransactionInterface.

        Transaction business ID.

        :param txn_id: The txn_id of this SalesDataTransactionInterface.
        :type txn_id: str
        """
        if txn_id is None:
            raise ValueError("Invalid value for `txn_id`, must not be `None`")

        self._txn_id = txn_id

    @property
    def txn_type(self):
        """Gets the txn_type of this SalesDataTransactionInterface.

        Transaction type.

        :return: The txn_type of this SalesDataTransactionInterface.
        :rtype: str
        """
        return self._txn_type

    @txn_type.setter
    def txn_type(self, txn_type):
        """Sets the txn_type of this SalesDataTransactionInterface.

        Transaction type.

        :param txn_type: The txn_type of this SalesDataTransactionInterface.
        :type txn_type: str
        """
        if txn_type is None:
            raise ValueError("Invalid value for `txn_type`, must not be `None`")

        self._txn_type = txn_type
