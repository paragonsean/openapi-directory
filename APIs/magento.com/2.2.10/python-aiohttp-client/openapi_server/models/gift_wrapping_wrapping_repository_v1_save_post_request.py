# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gift_wrapping_data_wrapping_interface import GiftWrappingDataWrappingInterface
from openapi_server import util


class GiftWrappingWrappingRepositoryV1SavePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: GiftWrappingDataWrappingInterface=None, store_id: int=None):
        """GiftWrappingWrappingRepositoryV1SavePostRequest - a model defined in OpenAPI

        :param data: The data of this GiftWrappingWrappingRepositoryV1SavePostRequest.
        :param store_id: The store_id of this GiftWrappingWrappingRepositoryV1SavePostRequest.
        """
        self.openapi_types = {
            'data': GiftWrappingDataWrappingInterface,
            'store_id': int
        }

        self.attribute_map = {
            'data': 'data',
            'store_id': 'storeId'
        }

        self._data = data
        self._store_id = store_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GiftWrappingWrappingRepositoryV1SavePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The giftWrappingWrappingRepositoryV1SavePost_request of this GiftWrappingWrappingRepositoryV1SavePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this GiftWrappingWrappingRepositoryV1SavePostRequest.


        :return: The data of this GiftWrappingWrappingRepositoryV1SavePostRequest.
        :rtype: GiftWrappingDataWrappingInterface
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this GiftWrappingWrappingRepositoryV1SavePostRequest.


        :param data: The data of this GiftWrappingWrappingRepositoryV1SavePostRequest.
        :type data: GiftWrappingDataWrappingInterface
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def store_id(self):
        """Gets the store_id of this GiftWrappingWrappingRepositoryV1SavePostRequest.


        :return: The store_id of this GiftWrappingWrappingRepositoryV1SavePostRequest.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this GiftWrappingWrappingRepositoryV1SavePostRequest.


        :param store_id: The store_id of this GiftWrappingWrappingRepositoryV1SavePostRequest.
        :type store_id: int
        """

        self._store_id = store_id
