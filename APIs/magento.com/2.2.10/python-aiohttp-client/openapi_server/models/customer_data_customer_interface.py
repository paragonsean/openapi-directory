# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_data_address_interface import CustomerDataAddressInterface
from openapi_server.models.customer_data_customer_extension_interface import CustomerDataCustomerExtensionInterface
from openapi_server.models.framework_attribute_interface import FrameworkAttributeInterface
from openapi_server import util


class CustomerDataCustomerInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: List[CustomerDataAddressInterface]=None, confirmation: str=None, created_at: str=None, created_in: str=None, custom_attributes: List[FrameworkAttributeInterface]=None, default_billing: str=None, default_shipping: str=None, disable_auto_group_change: int=None, dob: str=None, email: str=None, extension_attributes: CustomerDataCustomerExtensionInterface=None, firstname: str=None, gender: int=None, group_id: int=None, id: int=None, lastname: str=None, middlename: str=None, prefix: str=None, store_id: int=None, suffix: str=None, taxvat: str=None, updated_at: str=None, website_id: int=None):
        """CustomerDataCustomerInterface - a model defined in OpenAPI

        :param addresses: The addresses of this CustomerDataCustomerInterface.
        :param confirmation: The confirmation of this CustomerDataCustomerInterface.
        :param created_at: The created_at of this CustomerDataCustomerInterface.
        :param created_in: The created_in of this CustomerDataCustomerInterface.
        :param custom_attributes: The custom_attributes of this CustomerDataCustomerInterface.
        :param default_billing: The default_billing of this CustomerDataCustomerInterface.
        :param default_shipping: The default_shipping of this CustomerDataCustomerInterface.
        :param disable_auto_group_change: The disable_auto_group_change of this CustomerDataCustomerInterface.
        :param dob: The dob of this CustomerDataCustomerInterface.
        :param email: The email of this CustomerDataCustomerInterface.
        :param extension_attributes: The extension_attributes of this CustomerDataCustomerInterface.
        :param firstname: The firstname of this CustomerDataCustomerInterface.
        :param gender: The gender of this CustomerDataCustomerInterface.
        :param group_id: The group_id of this CustomerDataCustomerInterface.
        :param id: The id of this CustomerDataCustomerInterface.
        :param lastname: The lastname of this CustomerDataCustomerInterface.
        :param middlename: The middlename of this CustomerDataCustomerInterface.
        :param prefix: The prefix of this CustomerDataCustomerInterface.
        :param store_id: The store_id of this CustomerDataCustomerInterface.
        :param suffix: The suffix of this CustomerDataCustomerInterface.
        :param taxvat: The taxvat of this CustomerDataCustomerInterface.
        :param updated_at: The updated_at of this CustomerDataCustomerInterface.
        :param website_id: The website_id of this CustomerDataCustomerInterface.
        """
        self.openapi_types = {
            'addresses': List[CustomerDataAddressInterface],
            'confirmation': str,
            'created_at': str,
            'created_in': str,
            'custom_attributes': List[FrameworkAttributeInterface],
            'default_billing': str,
            'default_shipping': str,
            'disable_auto_group_change': int,
            'dob': str,
            'email': str,
            'extension_attributes': CustomerDataCustomerExtensionInterface,
            'firstname': str,
            'gender': int,
            'group_id': int,
            'id': int,
            'lastname': str,
            'middlename': str,
            'prefix': str,
            'store_id': int,
            'suffix': str,
            'taxvat': str,
            'updated_at': str,
            'website_id': int
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'confirmation': 'confirmation',
            'created_at': 'created_at',
            'created_in': 'created_in',
            'custom_attributes': 'custom_attributes',
            'default_billing': 'default_billing',
            'default_shipping': 'default_shipping',
            'disable_auto_group_change': 'disable_auto_group_change',
            'dob': 'dob',
            'email': 'email',
            'extension_attributes': 'extension_attributes',
            'firstname': 'firstname',
            'gender': 'gender',
            'group_id': 'group_id',
            'id': 'id',
            'lastname': 'lastname',
            'middlename': 'middlename',
            'prefix': 'prefix',
            'store_id': 'store_id',
            'suffix': 'suffix',
            'taxvat': 'taxvat',
            'updated_at': 'updated_at',
            'website_id': 'website_id'
        }

        self._addresses = addresses
        self._confirmation = confirmation
        self._created_at = created_at
        self._created_in = created_in
        self._custom_attributes = custom_attributes
        self._default_billing = default_billing
        self._default_shipping = default_shipping
        self._disable_auto_group_change = disable_auto_group_change
        self._dob = dob
        self._email = email
        self._extension_attributes = extension_attributes
        self._firstname = firstname
        self._gender = gender
        self._group_id = group_id
        self._id = id
        self._lastname = lastname
        self._middlename = middlename
        self._prefix = prefix
        self._store_id = store_id
        self._suffix = suffix
        self._taxvat = taxvat
        self._updated_at = updated_at
        self._website_id = website_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerDataCustomerInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customer-data-customer-interface of this CustomerDataCustomerInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this CustomerDataCustomerInterface.

        Customer addresses.

        :return: The addresses of this CustomerDataCustomerInterface.
        :rtype: List[CustomerDataAddressInterface]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this CustomerDataCustomerInterface.

        Customer addresses.

        :param addresses: The addresses of this CustomerDataCustomerInterface.
        :type addresses: List[CustomerDataAddressInterface]
        """

        self._addresses = addresses

    @property
    def confirmation(self):
        """Gets the confirmation of this CustomerDataCustomerInterface.

        Confirmation

        :return: The confirmation of this CustomerDataCustomerInterface.
        :rtype: str
        """
        return self._confirmation

    @confirmation.setter
    def confirmation(self, confirmation):
        """Sets the confirmation of this CustomerDataCustomerInterface.

        Confirmation

        :param confirmation: The confirmation of this CustomerDataCustomerInterface.
        :type confirmation: str
        """

        self._confirmation = confirmation

    @property
    def created_at(self):
        """Gets the created_at of this CustomerDataCustomerInterface.

        Created at time

        :return: The created_at of this CustomerDataCustomerInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CustomerDataCustomerInterface.

        Created at time

        :param created_at: The created_at of this CustomerDataCustomerInterface.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def created_in(self):
        """Gets the created_in of this CustomerDataCustomerInterface.

        Created in area

        :return: The created_in of this CustomerDataCustomerInterface.
        :rtype: str
        """
        return self._created_in

    @created_in.setter
    def created_in(self, created_in):
        """Sets the created_in of this CustomerDataCustomerInterface.

        Created in area

        :param created_in: The created_in of this CustomerDataCustomerInterface.
        :type created_in: str
        """

        self._created_in = created_in

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this CustomerDataCustomerInterface.

        Custom attributes values.

        :return: The custom_attributes of this CustomerDataCustomerInterface.
        :rtype: List[FrameworkAttributeInterface]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this CustomerDataCustomerInterface.

        Custom attributes values.

        :param custom_attributes: The custom_attributes of this CustomerDataCustomerInterface.
        :type custom_attributes: List[FrameworkAttributeInterface]
        """

        self._custom_attributes = custom_attributes

    @property
    def default_billing(self):
        """Gets the default_billing of this CustomerDataCustomerInterface.

        Default billing address id

        :return: The default_billing of this CustomerDataCustomerInterface.
        :rtype: str
        """
        return self._default_billing

    @default_billing.setter
    def default_billing(self, default_billing):
        """Sets the default_billing of this CustomerDataCustomerInterface.

        Default billing address id

        :param default_billing: The default_billing of this CustomerDataCustomerInterface.
        :type default_billing: str
        """

        self._default_billing = default_billing

    @property
    def default_shipping(self):
        """Gets the default_shipping of this CustomerDataCustomerInterface.

        Default shipping address id

        :return: The default_shipping of this CustomerDataCustomerInterface.
        :rtype: str
        """
        return self._default_shipping

    @default_shipping.setter
    def default_shipping(self, default_shipping):
        """Sets the default_shipping of this CustomerDataCustomerInterface.

        Default shipping address id

        :param default_shipping: The default_shipping of this CustomerDataCustomerInterface.
        :type default_shipping: str
        """

        self._default_shipping = default_shipping

    @property
    def disable_auto_group_change(self):
        """Gets the disable_auto_group_change of this CustomerDataCustomerInterface.

        Disable auto group change flag.

        :return: The disable_auto_group_change of this CustomerDataCustomerInterface.
        :rtype: int
        """
        return self._disable_auto_group_change

    @disable_auto_group_change.setter
    def disable_auto_group_change(self, disable_auto_group_change):
        """Sets the disable_auto_group_change of this CustomerDataCustomerInterface.

        Disable auto group change flag.

        :param disable_auto_group_change: The disable_auto_group_change of this CustomerDataCustomerInterface.
        :type disable_auto_group_change: int
        """

        self._disable_auto_group_change = disable_auto_group_change

    @property
    def dob(self):
        """Gets the dob of this CustomerDataCustomerInterface.

        Date of birth

        :return: The dob of this CustomerDataCustomerInterface.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this CustomerDataCustomerInterface.

        Date of birth

        :param dob: The dob of this CustomerDataCustomerInterface.
        :type dob: str
        """

        self._dob = dob

    @property
    def email(self):
        """Gets the email of this CustomerDataCustomerInterface.

        Email address

        :return: The email of this CustomerDataCustomerInterface.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerDataCustomerInterface.

        Email address

        :param email: The email of this CustomerDataCustomerInterface.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CustomerDataCustomerInterface.


        :return: The extension_attributes of this CustomerDataCustomerInterface.
        :rtype: CustomerDataCustomerExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CustomerDataCustomerInterface.


        :param extension_attributes: The extension_attributes of this CustomerDataCustomerInterface.
        :type extension_attributes: CustomerDataCustomerExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def firstname(self):
        """Gets the firstname of this CustomerDataCustomerInterface.

        First name

        :return: The firstname of this CustomerDataCustomerInterface.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this CustomerDataCustomerInterface.

        First name

        :param firstname: The firstname of this CustomerDataCustomerInterface.
        :type firstname: str
        """
        if firstname is None:
            raise ValueError("Invalid value for `firstname`, must not be `None`")

        self._firstname = firstname

    @property
    def gender(self):
        """Gets the gender of this CustomerDataCustomerInterface.

        Gender

        :return: The gender of this CustomerDataCustomerInterface.
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CustomerDataCustomerInterface.

        Gender

        :param gender: The gender of this CustomerDataCustomerInterface.
        :type gender: int
        """

        self._gender = gender

    @property
    def group_id(self):
        """Gets the group_id of this CustomerDataCustomerInterface.

        Group id

        :return: The group_id of this CustomerDataCustomerInterface.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CustomerDataCustomerInterface.

        Group id

        :param group_id: The group_id of this CustomerDataCustomerInterface.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this CustomerDataCustomerInterface.

        Customer id

        :return: The id of this CustomerDataCustomerInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerDataCustomerInterface.

        Customer id

        :param id: The id of this CustomerDataCustomerInterface.
        :type id: int
        """

        self._id = id

    @property
    def lastname(self):
        """Gets the lastname of this CustomerDataCustomerInterface.

        Last name

        :return: The lastname of this CustomerDataCustomerInterface.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this CustomerDataCustomerInterface.

        Last name

        :param lastname: The lastname of this CustomerDataCustomerInterface.
        :type lastname: str
        """
        if lastname is None:
            raise ValueError("Invalid value for `lastname`, must not be `None`")

        self._lastname = lastname

    @property
    def middlename(self):
        """Gets the middlename of this CustomerDataCustomerInterface.

        Middle name

        :return: The middlename of this CustomerDataCustomerInterface.
        :rtype: str
        """
        return self._middlename

    @middlename.setter
    def middlename(self, middlename):
        """Sets the middlename of this CustomerDataCustomerInterface.

        Middle name

        :param middlename: The middlename of this CustomerDataCustomerInterface.
        :type middlename: str
        """

        self._middlename = middlename

    @property
    def prefix(self):
        """Gets the prefix of this CustomerDataCustomerInterface.

        Prefix

        :return: The prefix of this CustomerDataCustomerInterface.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this CustomerDataCustomerInterface.

        Prefix

        :param prefix: The prefix of this CustomerDataCustomerInterface.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def store_id(self):
        """Gets the store_id of this CustomerDataCustomerInterface.

        Store id

        :return: The store_id of this CustomerDataCustomerInterface.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this CustomerDataCustomerInterface.

        Store id

        :param store_id: The store_id of this CustomerDataCustomerInterface.
        :type store_id: int
        """

        self._store_id = store_id

    @property
    def suffix(self):
        """Gets the suffix of this CustomerDataCustomerInterface.

        Suffix

        :return: The suffix of this CustomerDataCustomerInterface.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this CustomerDataCustomerInterface.

        Suffix

        :param suffix: The suffix of this CustomerDataCustomerInterface.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def taxvat(self):
        """Gets the taxvat of this CustomerDataCustomerInterface.

        Tax Vat

        :return: The taxvat of this CustomerDataCustomerInterface.
        :rtype: str
        """
        return self._taxvat

    @taxvat.setter
    def taxvat(self, taxvat):
        """Sets the taxvat of this CustomerDataCustomerInterface.

        Tax Vat

        :param taxvat: The taxvat of this CustomerDataCustomerInterface.
        :type taxvat: str
        """

        self._taxvat = taxvat

    @property
    def updated_at(self):
        """Gets the updated_at of this CustomerDataCustomerInterface.

        Updated at time

        :return: The updated_at of this CustomerDataCustomerInterface.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CustomerDataCustomerInterface.

        Updated at time

        :param updated_at: The updated_at of this CustomerDataCustomerInterface.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def website_id(self):
        """Gets the website_id of this CustomerDataCustomerInterface.

        Website id

        :return: The website_id of this CustomerDataCustomerInterface.
        :rtype: int
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this CustomerDataCustomerInterface.

        Website id

        :param website_id: The website_id of this CustomerDataCustomerInterface.
        :type website_id: int
        """

        self._website_id = website_id
