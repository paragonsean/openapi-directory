# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gift_message_data_message_extension_interface import GiftMessageDataMessageExtensionInterface
from openapi_server import util


class GiftMessageDataMessageInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_id: int=None, extension_attributes: GiftMessageDataMessageExtensionInterface=None, gift_message_id: int=None, message: str=None, recipient: str=None, sender: str=None):
        """GiftMessageDataMessageInterface - a model defined in OpenAPI

        :param customer_id: The customer_id of this GiftMessageDataMessageInterface.
        :param extension_attributes: The extension_attributes of this GiftMessageDataMessageInterface.
        :param gift_message_id: The gift_message_id of this GiftMessageDataMessageInterface.
        :param message: The message of this GiftMessageDataMessageInterface.
        :param recipient: The recipient of this GiftMessageDataMessageInterface.
        :param sender: The sender of this GiftMessageDataMessageInterface.
        """
        self.openapi_types = {
            'customer_id': int,
            'extension_attributes': GiftMessageDataMessageExtensionInterface,
            'gift_message_id': int,
            'message': str,
            'recipient': str,
            'sender': str
        }

        self.attribute_map = {
            'customer_id': 'customer_id',
            'extension_attributes': 'extension_attributes',
            'gift_message_id': 'gift_message_id',
            'message': 'message',
            'recipient': 'recipient',
            'sender': 'sender'
        }

        self._customer_id = customer_id
        self._extension_attributes = extension_attributes
        self._gift_message_id = gift_message_id
        self._message = message
        self._recipient = recipient
        self._sender = sender

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GiftMessageDataMessageInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The gift-message-data-message-interface of this GiftMessageDataMessageInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self):
        """Gets the customer_id of this GiftMessageDataMessageInterface.

        Customer ID. Otherwise, null.

        :return: The customer_id of this GiftMessageDataMessageInterface.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this GiftMessageDataMessageInterface.

        Customer ID. Otherwise, null.

        :param customer_id: The customer_id of this GiftMessageDataMessageInterface.
        :type customer_id: int
        """

        self._customer_id = customer_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this GiftMessageDataMessageInterface.


        :return: The extension_attributes of this GiftMessageDataMessageInterface.
        :rtype: GiftMessageDataMessageExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this GiftMessageDataMessageInterface.


        :param extension_attributes: The extension_attributes of this GiftMessageDataMessageInterface.
        :type extension_attributes: GiftMessageDataMessageExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def gift_message_id(self):
        """Gets the gift_message_id of this GiftMessageDataMessageInterface.

        Gift message ID. Otherwise, null.

        :return: The gift_message_id of this GiftMessageDataMessageInterface.
        :rtype: int
        """
        return self._gift_message_id

    @gift_message_id.setter
    def gift_message_id(self, gift_message_id):
        """Sets the gift_message_id of this GiftMessageDataMessageInterface.

        Gift message ID. Otherwise, null.

        :param gift_message_id: The gift_message_id of this GiftMessageDataMessageInterface.
        :type gift_message_id: int
        """

        self._gift_message_id = gift_message_id

    @property
    def message(self):
        """Gets the message of this GiftMessageDataMessageInterface.

        Message text.

        :return: The message of this GiftMessageDataMessageInterface.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GiftMessageDataMessageInterface.

        Message text.

        :param message: The message of this GiftMessageDataMessageInterface.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def recipient(self):
        """Gets the recipient of this GiftMessageDataMessageInterface.

        Recipient name.

        :return: The recipient of this GiftMessageDataMessageInterface.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this GiftMessageDataMessageInterface.

        Recipient name.

        :param recipient: The recipient of this GiftMessageDataMessageInterface.
        :type recipient: str
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")

        self._recipient = recipient

    @property
    def sender(self):
        """Gets the sender of this GiftMessageDataMessageInterface.

        Sender name.

        :return: The sender of this GiftMessageDataMessageInterface.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this GiftMessageDataMessageInterface.

        Sender name.

        :param sender: The sender of this GiftMessageDataMessageInterface.
        :type sender: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")

        self._sender = sender
