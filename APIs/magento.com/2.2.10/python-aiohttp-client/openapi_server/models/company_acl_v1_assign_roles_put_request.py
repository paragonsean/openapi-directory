# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.company_data_role_interface import CompanyDataRoleInterface
from openapi_server import util


class CompanyAclV1AssignRolesPutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, roles: List[CompanyDataRoleInterface]=None, user_id: int=None):
        """CompanyAclV1AssignRolesPutRequest - a model defined in OpenAPI

        :param roles: The roles of this CompanyAclV1AssignRolesPutRequest.
        :param user_id: The user_id of this CompanyAclV1AssignRolesPutRequest.
        """
        self.openapi_types = {
            'roles': List[CompanyDataRoleInterface],
            'user_id': int
        }

        self.attribute_map = {
            'roles': 'roles',
            'user_id': 'userId'
        }

        self._roles = roles
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyAclV1AssignRolesPutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The companyAclV1AssignRolesPut_request of this CompanyAclV1AssignRolesPutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def roles(self):
        """Gets the roles of this CompanyAclV1AssignRolesPutRequest.


        :return: The roles of this CompanyAclV1AssignRolesPutRequest.
        :rtype: List[CompanyDataRoleInterface]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this CompanyAclV1AssignRolesPutRequest.


        :param roles: The roles of this CompanyAclV1AssignRolesPutRequest.
        :type roles: List[CompanyDataRoleInterface]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")

        self._roles = roles

    @property
    def user_id(self):
        """Gets the user_id of this CompanyAclV1AssignRolesPutRequest.


        :return: The user_id of this CompanyAclV1AssignRolesPutRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CompanyAclV1AssignRolesPutRequest.


        :param user_id: The user_id of this CompanyAclV1AssignRolesPutRequest.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
