# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SharedCatalogDataSharedCatalogInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, created_by: int=None, customer_group_id: int=None, description: str=None, id: int=None, name: str=None, store_id: int=None, tax_class_id: int=None, type: int=None):
        """SharedCatalogDataSharedCatalogInterface - a model defined in OpenAPI

        :param created_at: The created_at of this SharedCatalogDataSharedCatalogInterface.
        :param created_by: The created_by of this SharedCatalogDataSharedCatalogInterface.
        :param customer_group_id: The customer_group_id of this SharedCatalogDataSharedCatalogInterface.
        :param description: The description of this SharedCatalogDataSharedCatalogInterface.
        :param id: The id of this SharedCatalogDataSharedCatalogInterface.
        :param name: The name of this SharedCatalogDataSharedCatalogInterface.
        :param store_id: The store_id of this SharedCatalogDataSharedCatalogInterface.
        :param tax_class_id: The tax_class_id of this SharedCatalogDataSharedCatalogInterface.
        :param type: The type of this SharedCatalogDataSharedCatalogInterface.
        """
        self.openapi_types = {
            'created_at': str,
            'created_by': int,
            'customer_group_id': int,
            'description': str,
            'id': int,
            'name': str,
            'store_id': int,
            'tax_class_id': int,
            'type': int
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'created_by': 'created_by',
            'customer_group_id': 'customer_group_id',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'store_id': 'store_id',
            'tax_class_id': 'tax_class_id',
            'type': 'type'
        }

        self._created_at = created_at
        self._created_by = created_by
        self._customer_group_id = customer_group_id
        self._description = description
        self._id = id
        self._name = name
        self._store_id = store_id
        self._tax_class_id = tax_class_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SharedCatalogDataSharedCatalogInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The shared-catalog-data-shared-catalog-interface of this SharedCatalogDataSharedCatalogInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this SharedCatalogDataSharedCatalogInterface.

        Created time for Shared Catalog.

        :return: The created_at of this SharedCatalogDataSharedCatalogInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SharedCatalogDataSharedCatalogInterface.

        Created time for Shared Catalog.

        :param created_at: The created_at of this SharedCatalogDataSharedCatalogInterface.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this SharedCatalogDataSharedCatalogInterface.

        Admin id for Shared Catalog.

        :return: The created_by of this SharedCatalogDataSharedCatalogInterface.
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SharedCatalogDataSharedCatalogInterface.

        Admin id for Shared Catalog.

        :param created_by: The created_by of this SharedCatalogDataSharedCatalogInterface.
        :type created_by: int
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def customer_group_id(self):
        """Gets the customer_group_id of this SharedCatalogDataSharedCatalogInterface.

        Customer Group Id.

        :return: The customer_group_id of this SharedCatalogDataSharedCatalogInterface.
        :rtype: int
        """
        return self._customer_group_id

    @customer_group_id.setter
    def customer_group_id(self, customer_group_id):
        """Sets the customer_group_id of this SharedCatalogDataSharedCatalogInterface.

        Customer Group Id.

        :param customer_group_id: The customer_group_id of this SharedCatalogDataSharedCatalogInterface.
        :type customer_group_id: int
        """
        if customer_group_id is None:
            raise ValueError("Invalid value for `customer_group_id`, must not be `None`")

        self._customer_group_id = customer_group_id

    @property
    def description(self):
        """Gets the description of this SharedCatalogDataSharedCatalogInterface.

        Shared Catalog description.

        :return: The description of this SharedCatalogDataSharedCatalogInterface.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SharedCatalogDataSharedCatalogInterface.

        Shared Catalog description.

        :param description: The description of this SharedCatalogDataSharedCatalogInterface.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this SharedCatalogDataSharedCatalogInterface.

        ID.

        :return: The id of this SharedCatalogDataSharedCatalogInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedCatalogDataSharedCatalogInterface.

        ID.

        :param id: The id of this SharedCatalogDataSharedCatalogInterface.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SharedCatalogDataSharedCatalogInterface.

        Shared Catalog name.

        :return: The name of this SharedCatalogDataSharedCatalogInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharedCatalogDataSharedCatalogInterface.

        Shared Catalog name.

        :param name: The name of this SharedCatalogDataSharedCatalogInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def store_id(self):
        """Gets the store_id of this SharedCatalogDataSharedCatalogInterface.

        Store id for Shared Catalog.

        :return: The store_id of this SharedCatalogDataSharedCatalogInterface.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this SharedCatalogDataSharedCatalogInterface.

        Store id for Shared Catalog.

        :param store_id: The store_id of this SharedCatalogDataSharedCatalogInterface.
        :type store_id: int
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id

    @property
    def tax_class_id(self):
        """Gets the tax_class_id of this SharedCatalogDataSharedCatalogInterface.

        Tax class id.

        :return: The tax_class_id of this SharedCatalogDataSharedCatalogInterface.
        :rtype: int
        """
        return self._tax_class_id

    @tax_class_id.setter
    def tax_class_id(self, tax_class_id):
        """Sets the tax_class_id of this SharedCatalogDataSharedCatalogInterface.

        Tax class id.

        :param tax_class_id: The tax_class_id of this SharedCatalogDataSharedCatalogInterface.
        :type tax_class_id: int
        """
        if tax_class_id is None:
            raise ValueError("Invalid value for `tax_class_id`, must not be `None`")

        self._tax_class_id = tax_class_id

    @property
    def type(self):
        """Gets the type of this SharedCatalogDataSharedCatalogInterface.

        Shared Catalog type.

        :return: The type of this SharedCatalogDataSharedCatalogInterface.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SharedCatalogDataSharedCatalogInterface.

        Shared Catalog type.

        :param type: The type of this SharedCatalogDataSharedCatalogInterface.
        :type type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
