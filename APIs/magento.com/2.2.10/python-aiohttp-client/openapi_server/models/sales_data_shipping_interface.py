# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sales_data_order_address_interface import SalesDataOrderAddressInterface
from openapi_server.models.sales_data_shipping_extension_interface import SalesDataShippingExtensionInterface
from openapi_server.models.sales_data_total_interface import SalesDataTotalInterface
from openapi_server import util


class SalesDataShippingInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: SalesDataOrderAddressInterface=None, extension_attributes: SalesDataShippingExtensionInterface=None, method: str=None, total: SalesDataTotalInterface=None):
        """SalesDataShippingInterface - a model defined in OpenAPI

        :param address: The address of this SalesDataShippingInterface.
        :param extension_attributes: The extension_attributes of this SalesDataShippingInterface.
        :param method: The method of this SalesDataShippingInterface.
        :param total: The total of this SalesDataShippingInterface.
        """
        self.openapi_types = {
            'address': SalesDataOrderAddressInterface,
            'extension_attributes': SalesDataShippingExtensionInterface,
            'method': str,
            'total': SalesDataTotalInterface
        }

        self.attribute_map = {
            'address': 'address',
            'extension_attributes': 'extension_attributes',
            'method': 'method',
            'total': 'total'
        }

        self._address = address
        self._extension_attributes = extension_attributes
        self._method = method
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesDataShippingInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sales-data-shipping-interface of this SalesDataShippingInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this SalesDataShippingInterface.


        :return: The address of this SalesDataShippingInterface.
        :rtype: SalesDataOrderAddressInterface
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SalesDataShippingInterface.


        :param address: The address of this SalesDataShippingInterface.
        :type address: SalesDataOrderAddressInterface
        """

        self._address = address

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this SalesDataShippingInterface.


        :return: The extension_attributes of this SalesDataShippingInterface.
        :rtype: SalesDataShippingExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this SalesDataShippingInterface.


        :param extension_attributes: The extension_attributes of this SalesDataShippingInterface.
        :type extension_attributes: SalesDataShippingExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def method(self):
        """Gets the method of this SalesDataShippingInterface.

        Shipping method

        :return: The method of this SalesDataShippingInterface.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this SalesDataShippingInterface.

        Shipping method

        :param method: The method of this SalesDataShippingInterface.
        :type method: str
        """

        self._method = method

    @property
    def total(self):
        """Gets the total of this SalesDataShippingInterface.


        :return: The total of this SalesDataShippingInterface.
        :rtype: SalesDataTotalInterface
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SalesDataShippingInterface.


        :param total: The total of this SalesDataShippingInterface.
        :type total: SalesDataTotalInterface
        """

        self._total = total
