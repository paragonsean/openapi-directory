# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AsynchronousOperationsDataSummaryOperationStatusInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: int=None, id: int=None, result_message: str=None, status: int=None):
        """AsynchronousOperationsDataSummaryOperationStatusInterface - a model defined in OpenAPI

        :param error_code: The error_code of this AsynchronousOperationsDataSummaryOperationStatusInterface.
        :param id: The id of this AsynchronousOperationsDataSummaryOperationStatusInterface.
        :param result_message: The result_message of this AsynchronousOperationsDataSummaryOperationStatusInterface.
        :param status: The status of this AsynchronousOperationsDataSummaryOperationStatusInterface.
        """
        self.openapi_types = {
            'error_code': int,
            'id': int,
            'result_message': str,
            'status': int
        }

        self.attribute_map = {
            'error_code': 'error_code',
            'id': 'id',
            'result_message': 'result_message',
            'status': 'status'
        }

        self._error_code = error_code
        self._id = id
        self._result_message = result_message
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AsynchronousOperationsDataSummaryOperationStatusInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The asynchronous-operations-data-summary-operation-status-interface of this AsynchronousOperationsDataSummaryOperationStatusInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this AsynchronousOperationsDataSummaryOperationStatusInterface.

        Error code

        :return: The error_code of this AsynchronousOperationsDataSummaryOperationStatusInterface.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this AsynchronousOperationsDataSummaryOperationStatusInterface.

        Error code

        :param error_code: The error_code of this AsynchronousOperationsDataSummaryOperationStatusInterface.
        :type error_code: int
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def id(self):
        """Gets the id of this AsynchronousOperationsDataSummaryOperationStatusInterface.

        Id

        :return: The id of this AsynchronousOperationsDataSummaryOperationStatusInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AsynchronousOperationsDataSummaryOperationStatusInterface.

        Id

        :param id: The id of this AsynchronousOperationsDataSummaryOperationStatusInterface.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def result_message(self):
        """Gets the result_message of this AsynchronousOperationsDataSummaryOperationStatusInterface.

        Result message

        :return: The result_message of this AsynchronousOperationsDataSummaryOperationStatusInterface.
        :rtype: str
        """
        return self._result_message

    @result_message.setter
    def result_message(self, result_message):
        """Sets the result_message of this AsynchronousOperationsDataSummaryOperationStatusInterface.

        Result message

        :param result_message: The result_message of this AsynchronousOperationsDataSummaryOperationStatusInterface.
        :type result_message: str
        """
        if result_message is None:
            raise ValueError("Invalid value for `result_message`, must not be `None`")

        self._result_message = result_message

    @property
    def status(self):
        """Gets the status of this AsynchronousOperationsDataSummaryOperationStatusInterface.

        Operation status

        :return: The status of this AsynchronousOperationsDataSummaryOperationStatusInterface.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AsynchronousOperationsDataSummaryOperationStatusInterface.

        Operation status

        :param status: The status of this AsynchronousOperationsDataSummaryOperationStatusInterface.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
