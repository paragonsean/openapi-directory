# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NegotiableQuoteDataNegotiableQuoteItemTotalsInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_cart_price: float=None, base_cart_price_incl_tax: float=None, base_cart_tax: float=None, base_catalog_price: float=None, base_catalog_price_incl_tax: float=None, cart_price: float=None, cart_price_incl_tax: float=None, cart_tax: float=None, catalog_price: float=None, catalog_price_incl_tax: float=None, cost: float=None, extension_attributes: object=None):
        """NegotiableQuoteDataNegotiableQuoteItemTotalsInterface - a model defined in OpenAPI

        :param base_cart_price: The base_cart_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :param base_cart_price_incl_tax: The base_cart_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :param base_cart_tax: The base_cart_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :param base_catalog_price: The base_catalog_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :param base_catalog_price_incl_tax: The base_catalog_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :param cart_price: The cart_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :param cart_price_incl_tax: The cart_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :param cart_tax: The cart_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :param catalog_price: The catalog_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :param catalog_price_incl_tax: The catalog_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :param cost: The cost of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :param extension_attributes: The extension_attributes of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        """
        self.openapi_types = {
            'base_cart_price': float,
            'base_cart_price_incl_tax': float,
            'base_cart_tax': float,
            'base_catalog_price': float,
            'base_catalog_price_incl_tax': float,
            'cart_price': float,
            'cart_price_incl_tax': float,
            'cart_tax': float,
            'catalog_price': float,
            'catalog_price_incl_tax': float,
            'cost': float,
            'extension_attributes': object
        }

        self.attribute_map = {
            'base_cart_price': 'base_cart_price',
            'base_cart_price_incl_tax': 'base_cart_price_incl_tax',
            'base_cart_tax': 'base_cart_tax',
            'base_catalog_price': 'base_catalog_price',
            'base_catalog_price_incl_tax': 'base_catalog_price_incl_tax',
            'cart_price': 'cart_price',
            'cart_price_incl_tax': 'cart_price_incl_tax',
            'cart_tax': 'cart_tax',
            'catalog_price': 'catalog_price',
            'catalog_price_incl_tax': 'catalog_price_incl_tax',
            'cost': 'cost',
            'extension_attributes': 'extension_attributes'
        }

        self._base_cart_price = base_cart_price
        self._base_cart_price_incl_tax = base_cart_price_incl_tax
        self._base_cart_tax = base_cart_tax
        self._base_catalog_price = base_catalog_price
        self._base_catalog_price_incl_tax = base_catalog_price_incl_tax
        self._cart_price = cart_price
        self._cart_price_incl_tax = cart_price_incl_tax
        self._cart_tax = cart_tax
        self._catalog_price = catalog_price
        self._catalog_price_incl_tax = catalog_price_incl_tax
        self._cost = cost
        self._extension_attributes = extension_attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NegotiableQuoteDataNegotiableQuoteItemTotalsInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The negotiable-quote-data-negotiable-quote-item-totals-interface of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_cart_price(self):
        """Gets the base_cart_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Cart price for quote item in base currency.

        :return: The base_cart_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :rtype: float
        """
        return self._base_cart_price

    @base_cart_price.setter
    def base_cart_price(self, base_cart_price):
        """Sets the base_cart_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Cart price for quote item in base currency.

        :param base_cart_price: The base_cart_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :type base_cart_price: float
        """
        if base_cart_price is None:
            raise ValueError("Invalid value for `base_cart_price`, must not be `None`")

        self._base_cart_price = base_cart_price

    @property
    def base_cart_price_incl_tax(self):
        """Gets the base_cart_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Cart price with included tax for quote item in base currency.

        :return: The base_cart_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :rtype: float
        """
        return self._base_cart_price_incl_tax

    @base_cart_price_incl_tax.setter
    def base_cart_price_incl_tax(self, base_cart_price_incl_tax):
        """Sets the base_cart_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Cart price with included tax for quote item in base currency.

        :param base_cart_price_incl_tax: The base_cart_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :type base_cart_price_incl_tax: float
        """
        if base_cart_price_incl_tax is None:
            raise ValueError("Invalid value for `base_cart_price_incl_tax`, must not be `None`")

        self._base_cart_price_incl_tax = base_cart_price_incl_tax

    @property
    def base_cart_tax(self):
        """Gets the base_cart_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Tax from catalog price for quote item in base currency.

        :return: The base_cart_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :rtype: float
        """
        return self._base_cart_tax

    @base_cart_tax.setter
    def base_cart_tax(self, base_cart_tax):
        """Sets the base_cart_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Tax from catalog price for quote item in base currency.

        :param base_cart_tax: The base_cart_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :type base_cart_tax: float
        """
        if base_cart_tax is None:
            raise ValueError("Invalid value for `base_cart_tax`, must not be `None`")

        self._base_cart_tax = base_cart_tax

    @property
    def base_catalog_price(self):
        """Gets the base_catalog_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Catalog price for quote item in base currency.

        :return: The base_catalog_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :rtype: float
        """
        return self._base_catalog_price

    @base_catalog_price.setter
    def base_catalog_price(self, base_catalog_price):
        """Sets the base_catalog_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Catalog price for quote item in base currency.

        :param base_catalog_price: The base_catalog_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :type base_catalog_price: float
        """
        if base_catalog_price is None:
            raise ValueError("Invalid value for `base_catalog_price`, must not be `None`")

        self._base_catalog_price = base_catalog_price

    @property
    def base_catalog_price_incl_tax(self):
        """Gets the base_catalog_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Catalog price with included tax for quote item in base currency.

        :return: The base_catalog_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :rtype: float
        """
        return self._base_catalog_price_incl_tax

    @base_catalog_price_incl_tax.setter
    def base_catalog_price_incl_tax(self, base_catalog_price_incl_tax):
        """Sets the base_catalog_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Catalog price with included tax for quote item in base currency.

        :param base_catalog_price_incl_tax: The base_catalog_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :type base_catalog_price_incl_tax: float
        """
        if base_catalog_price_incl_tax is None:
            raise ValueError("Invalid value for `base_catalog_price_incl_tax`, must not be `None`")

        self._base_catalog_price_incl_tax = base_catalog_price_incl_tax

    @property
    def cart_price(self):
        """Gets the cart_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Cart price for quote item.

        :return: The cart_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :rtype: float
        """
        return self._cart_price

    @cart_price.setter
    def cart_price(self, cart_price):
        """Sets the cart_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Cart price for quote item.

        :param cart_price: The cart_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :type cart_price: float
        """
        if cart_price is None:
            raise ValueError("Invalid value for `cart_price`, must not be `None`")

        self._cart_price = cart_price

    @property
    def cart_price_incl_tax(self):
        """Gets the cart_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Cart price with included tax for quote item.

        :return: The cart_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :rtype: float
        """
        return self._cart_price_incl_tax

    @cart_price_incl_tax.setter
    def cart_price_incl_tax(self, cart_price_incl_tax):
        """Sets the cart_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Cart price with included tax for quote item.

        :param cart_price_incl_tax: The cart_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :type cart_price_incl_tax: float
        """
        if cart_price_incl_tax is None:
            raise ValueError("Invalid value for `cart_price_incl_tax`, must not be `None`")

        self._cart_price_incl_tax = cart_price_incl_tax

    @property
    def cart_tax(self):
        """Gets the cart_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Tax from catalog price for quote item.

        :return: The cart_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :rtype: float
        """
        return self._cart_tax

    @cart_tax.setter
    def cart_tax(self, cart_tax):
        """Sets the cart_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Tax from catalog price for quote item.

        :param cart_tax: The cart_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :type cart_tax: float
        """
        if cart_tax is None:
            raise ValueError("Invalid value for `cart_tax`, must not be `None`")

        self._cart_tax = cart_tax

    @property
    def catalog_price(self):
        """Gets the catalog_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Catalog price for quote item.

        :return: The catalog_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :rtype: float
        """
        return self._catalog_price

    @catalog_price.setter
    def catalog_price(self, catalog_price):
        """Sets the catalog_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Catalog price for quote item.

        :param catalog_price: The catalog_price of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :type catalog_price: float
        """
        if catalog_price is None:
            raise ValueError("Invalid value for `catalog_price`, must not be `None`")

        self._catalog_price = catalog_price

    @property
    def catalog_price_incl_tax(self):
        """Gets the catalog_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Catalog price with included tax for quote item.

        :return: The catalog_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :rtype: float
        """
        return self._catalog_price_incl_tax

    @catalog_price_incl_tax.setter
    def catalog_price_incl_tax(self, catalog_price_incl_tax):
        """Sets the catalog_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Catalog price with included tax for quote item.

        :param catalog_price_incl_tax: The catalog_price_incl_tax of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :type catalog_price_incl_tax: float
        """
        if catalog_price_incl_tax is None:
            raise ValueError("Invalid value for `catalog_price_incl_tax`, must not be `None`")

        self._catalog_price_incl_tax = catalog_price_incl_tax

    @property
    def cost(self):
        """Gets the cost of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Cost for quote item.

        :return: The cost of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        Cost for quote item.

        :param cost: The cost of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\NegotiableQuoteItemTotalsInterface

        :return: The extension_attributes of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.

        ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\NegotiableQuoteItemTotalsInterface

        :param extension_attributes: The extension_attributes of this NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes
