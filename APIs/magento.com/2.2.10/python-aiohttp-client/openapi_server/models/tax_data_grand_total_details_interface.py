# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tax_data_grand_total_rates_interface import TaxDataGrandTotalRatesInterface
from openapi_server import util


class TaxDataGrandTotalDetailsInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, group_id: int=None, rates: List[TaxDataGrandTotalRatesInterface]=None):
        """TaxDataGrandTotalDetailsInterface - a model defined in OpenAPI

        :param amount: The amount of this TaxDataGrandTotalDetailsInterface.
        :param group_id: The group_id of this TaxDataGrandTotalDetailsInterface.
        :param rates: The rates of this TaxDataGrandTotalDetailsInterface.
        """
        self.openapi_types = {
            'amount': float,
            'group_id': int,
            'rates': List[TaxDataGrandTotalRatesInterface]
        }

        self.attribute_map = {
            'amount': 'amount',
            'group_id': 'group_id',
            'rates': 'rates'
        }

        self._amount = amount
        self._group_id = group_id
        self._rates = rates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxDataGrandTotalDetailsInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tax-data-grand-total-details-interface of this TaxDataGrandTotalDetailsInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this TaxDataGrandTotalDetailsInterface.

        Tax amount value

        :return: The amount of this TaxDataGrandTotalDetailsInterface.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TaxDataGrandTotalDetailsInterface.

        Tax amount value

        :param amount: The amount of this TaxDataGrandTotalDetailsInterface.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def group_id(self):
        """Gets the group_id of this TaxDataGrandTotalDetailsInterface.

        Group identifier

        :return: The group_id of this TaxDataGrandTotalDetailsInterface.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this TaxDataGrandTotalDetailsInterface.

        Group identifier

        :param group_id: The group_id of this TaxDataGrandTotalDetailsInterface.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def rates(self):
        """Gets the rates of this TaxDataGrandTotalDetailsInterface.

        Tax rates info

        :return: The rates of this TaxDataGrandTotalDetailsInterface.
        :rtype: List[TaxDataGrandTotalRatesInterface]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this TaxDataGrandTotalDetailsInterface.

        Tax rates info

        :param rates: The rates of this TaxDataGrandTotalDetailsInterface.
        :type rates: List[TaxDataGrandTotalRatesInterface]
        """
        if rates is None:
            raise ValueError("Invalid value for `rates`, must not be `None`")

        self._rates = rates
