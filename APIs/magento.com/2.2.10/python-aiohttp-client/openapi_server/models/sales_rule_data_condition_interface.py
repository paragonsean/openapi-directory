# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesRuleDataConditionInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregator_type: str=None, attribute_name: str=None, condition_type: str=None, conditions: List[SalesRuleDataConditionInterface]=None, extension_attributes: object=None, operator: str=None, value: str=None):
        """SalesRuleDataConditionInterface - a model defined in OpenAPI

        :param aggregator_type: The aggregator_type of this SalesRuleDataConditionInterface.
        :param attribute_name: The attribute_name of this SalesRuleDataConditionInterface.
        :param condition_type: The condition_type of this SalesRuleDataConditionInterface.
        :param conditions: The conditions of this SalesRuleDataConditionInterface.
        :param extension_attributes: The extension_attributes of this SalesRuleDataConditionInterface.
        :param operator: The operator of this SalesRuleDataConditionInterface.
        :param value: The value of this SalesRuleDataConditionInterface.
        """
        self.openapi_types = {
            'aggregator_type': str,
            'attribute_name': str,
            'condition_type': str,
            'conditions': List[SalesRuleDataConditionInterface],
            'extension_attributes': object,
            'operator': str,
            'value': str
        }

        self.attribute_map = {
            'aggregator_type': 'aggregator_type',
            'attribute_name': 'attribute_name',
            'condition_type': 'condition_type',
            'conditions': 'conditions',
            'extension_attributes': 'extension_attributes',
            'operator': 'operator',
            'value': 'value'
        }

        self._aggregator_type = aggregator_type
        self._attribute_name = attribute_name
        self._condition_type = condition_type
        self._conditions = conditions
        self._extension_attributes = extension_attributes
        self._operator = operator
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesRuleDataConditionInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sales-rule-data-condition-interface of this SalesRuleDataConditionInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregator_type(self):
        """Gets the aggregator_type of this SalesRuleDataConditionInterface.

        The aggregator type

        :return: The aggregator_type of this SalesRuleDataConditionInterface.
        :rtype: str
        """
        return self._aggregator_type

    @aggregator_type.setter
    def aggregator_type(self, aggregator_type):
        """Sets the aggregator_type of this SalesRuleDataConditionInterface.

        The aggregator type

        :param aggregator_type: The aggregator_type of this SalesRuleDataConditionInterface.
        :type aggregator_type: str
        """

        self._aggregator_type = aggregator_type

    @property
    def attribute_name(self):
        """Gets the attribute_name of this SalesRuleDataConditionInterface.

        The attribute name of the condition

        :return: The attribute_name of this SalesRuleDataConditionInterface.
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this SalesRuleDataConditionInterface.

        The attribute name of the condition

        :param attribute_name: The attribute_name of this SalesRuleDataConditionInterface.
        :type attribute_name: str
        """

        self._attribute_name = attribute_name

    @property
    def condition_type(self):
        """Gets the condition_type of this SalesRuleDataConditionInterface.

        Condition type

        :return: The condition_type of this SalesRuleDataConditionInterface.
        :rtype: str
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type):
        """Sets the condition_type of this SalesRuleDataConditionInterface.

        Condition type

        :param condition_type: The condition_type of this SalesRuleDataConditionInterface.
        :type condition_type: str
        """
        if condition_type is None:
            raise ValueError("Invalid value for `condition_type`, must not be `None`")

        self._condition_type = condition_type

    @property
    def conditions(self):
        """Gets the conditions of this SalesRuleDataConditionInterface.

        List of conditions

        :return: The conditions of this SalesRuleDataConditionInterface.
        :rtype: List[SalesRuleDataConditionInterface]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this SalesRuleDataConditionInterface.

        List of conditions

        :param conditions: The conditions of this SalesRuleDataConditionInterface.
        :type conditions: List[SalesRuleDataConditionInterface]
        """

        self._conditions = conditions

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this SalesRuleDataConditionInterface.

        ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\ConditionInterface

        :return: The extension_attributes of this SalesRuleDataConditionInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this SalesRuleDataConditionInterface.

        ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\ConditionInterface

        :param extension_attributes: The extension_attributes of this SalesRuleDataConditionInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def operator(self):
        """Gets the operator of this SalesRuleDataConditionInterface.

        The operator of the condition

        :return: The operator of this SalesRuleDataConditionInterface.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this SalesRuleDataConditionInterface.

        The operator of the condition

        :param operator: The operator of this SalesRuleDataConditionInterface.
        :type operator: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")

        self._operator = operator

    @property
    def value(self):
        """Gets the value of this SalesRuleDataConditionInterface.

        The value of the condition

        :return: The value of this SalesRuleDataConditionInterface.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SalesRuleDataConditionInterface.

        The value of the condition

        :param value: The value of this SalesRuleDataConditionInterface.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
