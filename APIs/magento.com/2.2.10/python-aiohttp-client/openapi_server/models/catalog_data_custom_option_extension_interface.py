# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.framework_data_image_content_interface import FrameworkDataImageContentInterface
from openapi_server import util


class CatalogDataCustomOptionExtensionInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_info: FrameworkDataImageContentInterface=None):
        """CatalogDataCustomOptionExtensionInterface - a model defined in OpenAPI

        :param file_info: The file_info of this CatalogDataCustomOptionExtensionInterface.
        """
        self.openapi_types = {
            'file_info': FrameworkDataImageContentInterface
        }

        self.attribute_map = {
            'file_info': 'file_info'
        }

        self._file_info = file_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataCustomOptionExtensionInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-custom-option-extension-interface of this CatalogDataCustomOptionExtensionInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_info(self):
        """Gets the file_info of this CatalogDataCustomOptionExtensionInterface.


        :return: The file_info of this CatalogDataCustomOptionExtensionInterface.
        :rtype: FrameworkDataImageContentInterface
        """
        return self._file_info

    @file_info.setter
    def file_info(self, file_info):
        """Sets the file_info of this CatalogDataCustomOptionExtensionInterface.


        :param file_info: The file_info of this CatalogDataCustomOptionExtensionInterface.
        :type file_info: FrameworkDataImageContentInterface
        """

        self._file_info = file_info
