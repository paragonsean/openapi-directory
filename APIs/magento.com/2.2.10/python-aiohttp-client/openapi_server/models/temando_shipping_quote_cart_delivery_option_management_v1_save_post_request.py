# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, selected_option: str=None):
        """TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest - a model defined in OpenAPI

        :param selected_option: The selected_option of this TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest.
        """
        self.openapi_types = {
            'selected_option': str
        }

        self.attribute_map = {
            'selected_option': 'selectedOption'
        }

        self._selected_option = selected_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The temandoShippingQuoteCartDeliveryOptionManagementV1SavePost_request of this TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def selected_option(self):
        """Gets the selected_option of this TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest.


        :return: The selected_option of this TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest.
        :rtype: str
        """
        return self._selected_option

    @selected_option.setter
    def selected_option(self, selected_option):
        """Sets the selected_option of this TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest.


        :param selected_option: The selected_option of this TemandoShippingQuoteCartDeliveryOptionManagementV1SavePostRequest.
        :type selected_option: str
        """
        if selected_option is None:
            raise ValueError("Invalid value for `selected_option`, must not be `None`")

        self._selected_option = selected_option
