# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FrameworkFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition_type: str=None, _field: str=None, value: str=None):
        """FrameworkFilter - a model defined in OpenAPI

        :param condition_type: The condition_type of this FrameworkFilter.
        :param _field: The _field of this FrameworkFilter.
        :param value: The value of this FrameworkFilter.
        """
        self.openapi_types = {
            'condition_type': str,
            '_field': str,
            'value': str
        }

        self.attribute_map = {
            'condition_type': 'condition_type',
            '_field': 'field',
            'value': 'value'
        }

        self._condition_type = condition_type
        self.__field = _field
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrameworkFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The framework-filter of this FrameworkFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition_type(self):
        """Gets the condition_type of this FrameworkFilter.

        Condition type

        :return: The condition_type of this FrameworkFilter.
        :rtype: str
        """
        return self._condition_type

    @condition_type.setter
    def condition_type(self, condition_type):
        """Sets the condition_type of this FrameworkFilter.

        Condition type

        :param condition_type: The condition_type of this FrameworkFilter.
        :type condition_type: str
        """

        self._condition_type = condition_type

    @property
    def _field(self):
        """Gets the _field of this FrameworkFilter.

        Field

        :return: The _field of this FrameworkFilter.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this FrameworkFilter.

        Field

        :param _field: The _field of this FrameworkFilter.
        :type _field: str
        """
        if _field is None:
            raise ValueError("Invalid value for `_field`, must not be `None`")

        self.__field = _field

    @property
    def value(self):
        """Gets the value of this FrameworkFilter.

        Value

        :return: The value of this FrameworkFilter.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FrameworkFilter.

        Value

        :param value: The value of this FrameworkFilter.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
