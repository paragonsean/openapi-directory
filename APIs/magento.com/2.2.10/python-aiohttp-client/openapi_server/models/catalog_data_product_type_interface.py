# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogDataProductTypeInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension_attributes: object=None, label: str=None, name: str=None):
        """CatalogDataProductTypeInterface - a model defined in OpenAPI

        :param extension_attributes: The extension_attributes of this CatalogDataProductTypeInterface.
        :param label: The label of this CatalogDataProductTypeInterface.
        :param name: The name of this CatalogDataProductTypeInterface.
        """
        self.openapi_types = {
            'extension_attributes': object,
            'label': str,
            'name': str
        }

        self.attribute_map = {
            'extension_attributes': 'extension_attributes',
            'label': 'label',
            'name': 'name'
        }

        self._extension_attributes = extension_attributes
        self._label = label
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataProductTypeInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-product-type-interface of this CatalogDataProductTypeInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CatalogDataProductTypeInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductTypeInterface

        :return: The extension_attributes of this CatalogDataProductTypeInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CatalogDataProductTypeInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductTypeInterface

        :param extension_attributes: The extension_attributes of this CatalogDataProductTypeInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def label(self):
        """Gets the label of this CatalogDataProductTypeInterface.

        Product type label

        :return: The label of this CatalogDataProductTypeInterface.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CatalogDataProductTypeInterface.

        Product type label

        :param label: The label of this CatalogDataProductTypeInterface.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def name(self):
        """Gets the name of this CatalogDataProductTypeInterface.

        Product type code

        :return: The name of this CatalogDataProductTypeInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogDataProductTypeInterface.

        Product type code

        :param name: The name of this CatalogDataProductTypeInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
