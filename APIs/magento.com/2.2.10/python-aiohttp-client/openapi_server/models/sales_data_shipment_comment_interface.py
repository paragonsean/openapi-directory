# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesDataShipmentCommentInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, created_at: str=None, entity_id: int=None, extension_attributes: object=None, is_customer_notified: int=None, is_visible_on_front: int=None, parent_id: int=None):
        """SalesDataShipmentCommentInterface - a model defined in OpenAPI

        :param comment: The comment of this SalesDataShipmentCommentInterface.
        :param created_at: The created_at of this SalesDataShipmentCommentInterface.
        :param entity_id: The entity_id of this SalesDataShipmentCommentInterface.
        :param extension_attributes: The extension_attributes of this SalesDataShipmentCommentInterface.
        :param is_customer_notified: The is_customer_notified of this SalesDataShipmentCommentInterface.
        :param is_visible_on_front: The is_visible_on_front of this SalesDataShipmentCommentInterface.
        :param parent_id: The parent_id of this SalesDataShipmentCommentInterface.
        """
        self.openapi_types = {
            'comment': str,
            'created_at': str,
            'entity_id': int,
            'extension_attributes': object,
            'is_customer_notified': int,
            'is_visible_on_front': int,
            'parent_id': int
        }

        self.attribute_map = {
            'comment': 'comment',
            'created_at': 'created_at',
            'entity_id': 'entity_id',
            'extension_attributes': 'extension_attributes',
            'is_customer_notified': 'is_customer_notified',
            'is_visible_on_front': 'is_visible_on_front',
            'parent_id': 'parent_id'
        }

        self._comment = comment
        self._created_at = created_at
        self._entity_id = entity_id
        self._extension_attributes = extension_attributes
        self._is_customer_notified = is_customer_notified
        self._is_visible_on_front = is_visible_on_front
        self._parent_id = parent_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesDataShipmentCommentInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sales-data-shipment-comment-interface of this SalesDataShipmentCommentInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this SalesDataShipmentCommentInterface.

        Comment.

        :return: The comment of this SalesDataShipmentCommentInterface.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SalesDataShipmentCommentInterface.

        Comment.

        :param comment: The comment of this SalesDataShipmentCommentInterface.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this SalesDataShipmentCommentInterface.

        Created-at timestamp.

        :return: The created_at of this SalesDataShipmentCommentInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SalesDataShipmentCommentInterface.

        Created-at timestamp.

        :param created_at: The created_at of this SalesDataShipmentCommentInterface.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def entity_id(self):
        """Gets the entity_id of this SalesDataShipmentCommentInterface.

        Invoice ID.

        :return: The entity_id of this SalesDataShipmentCommentInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this SalesDataShipmentCommentInterface.

        Invoice ID.

        :param entity_id: The entity_id of this SalesDataShipmentCommentInterface.
        :type entity_id: int
        """

        self._entity_id = entity_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this SalesDataShipmentCommentInterface.

        ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentCommentInterface

        :return: The extension_attributes of this SalesDataShipmentCommentInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this SalesDataShipmentCommentInterface.

        ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentCommentInterface

        :param extension_attributes: The extension_attributes of this SalesDataShipmentCommentInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def is_customer_notified(self):
        """Gets the is_customer_notified of this SalesDataShipmentCommentInterface.

        Is-customer-notified flag value.

        :return: The is_customer_notified of this SalesDataShipmentCommentInterface.
        :rtype: int
        """
        return self._is_customer_notified

    @is_customer_notified.setter
    def is_customer_notified(self, is_customer_notified):
        """Sets the is_customer_notified of this SalesDataShipmentCommentInterface.

        Is-customer-notified flag value.

        :param is_customer_notified: The is_customer_notified of this SalesDataShipmentCommentInterface.
        :type is_customer_notified: int
        """
        if is_customer_notified is None:
            raise ValueError("Invalid value for `is_customer_notified`, must not be `None`")

        self._is_customer_notified = is_customer_notified

    @property
    def is_visible_on_front(self):
        """Gets the is_visible_on_front of this SalesDataShipmentCommentInterface.

        Is-visible-on-storefront flag value.

        :return: The is_visible_on_front of this SalesDataShipmentCommentInterface.
        :rtype: int
        """
        return self._is_visible_on_front

    @is_visible_on_front.setter
    def is_visible_on_front(self, is_visible_on_front):
        """Sets the is_visible_on_front of this SalesDataShipmentCommentInterface.

        Is-visible-on-storefront flag value.

        :param is_visible_on_front: The is_visible_on_front of this SalesDataShipmentCommentInterface.
        :type is_visible_on_front: int
        """
        if is_visible_on_front is None:
            raise ValueError("Invalid value for `is_visible_on_front`, must not be `None`")

        self._is_visible_on_front = is_visible_on_front

    @property
    def parent_id(self):
        """Gets the parent_id of this SalesDataShipmentCommentInterface.

        Parent ID.

        :return: The parent_id of this SalesDataShipmentCommentInterface.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this SalesDataShipmentCommentInterface.

        Parent ID.

        :param parent_id: The parent_id of this SalesDataShipmentCommentInterface.
        :type parent_id: int
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id
