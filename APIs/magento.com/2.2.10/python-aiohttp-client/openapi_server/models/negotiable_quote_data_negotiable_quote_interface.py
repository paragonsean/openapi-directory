# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NegotiableQuoteDataNegotiableQuoteInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_rule_ids: str=None, base_negotiated_total_price: float=None, base_original_total_price: float=None, creator_id: int=None, creator_type: int=None, deleted_sku: str=None, email_notification_status: int=None, expiration_period: str=None, extension_attributes: object=None, has_unconfirmed_changes: bool=None, is_address_draft: bool=None, is_customer_price_changed: bool=None, is_regular_quote: bool=None, is_shipping_tax_changed: bool=None, negotiated_price_type: int=None, negotiated_price_value: float=None, negotiated_total_price: float=None, notifications: int=None, original_total_price: float=None, quote_id: int=None, quote_name: str=None, shipping_price: float=None, status: str=None):
        """NegotiableQuoteDataNegotiableQuoteInterface - a model defined in OpenAPI

        :param applied_rule_ids: The applied_rule_ids of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param base_negotiated_total_price: The base_negotiated_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param base_original_total_price: The base_original_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param creator_id: The creator_id of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param creator_type: The creator_type of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param deleted_sku: The deleted_sku of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param email_notification_status: The email_notification_status of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param expiration_period: The expiration_period of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param extension_attributes: The extension_attributes of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param has_unconfirmed_changes: The has_unconfirmed_changes of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param is_address_draft: The is_address_draft of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param is_customer_price_changed: The is_customer_price_changed of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param is_regular_quote: The is_regular_quote of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param is_shipping_tax_changed: The is_shipping_tax_changed of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param negotiated_price_type: The negotiated_price_type of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param negotiated_price_value: The negotiated_price_value of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param negotiated_total_price: The negotiated_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param notifications: The notifications of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param original_total_price: The original_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param quote_id: The quote_id of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param quote_name: The quote_name of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param shipping_price: The shipping_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :param status: The status of this NegotiableQuoteDataNegotiableQuoteInterface.
        """
        self.openapi_types = {
            'applied_rule_ids': str,
            'base_negotiated_total_price': float,
            'base_original_total_price': float,
            'creator_id': int,
            'creator_type': int,
            'deleted_sku': str,
            'email_notification_status': int,
            'expiration_period': str,
            'extension_attributes': object,
            'has_unconfirmed_changes': bool,
            'is_address_draft': bool,
            'is_customer_price_changed': bool,
            'is_regular_quote': bool,
            'is_shipping_tax_changed': bool,
            'negotiated_price_type': int,
            'negotiated_price_value': float,
            'negotiated_total_price': float,
            'notifications': int,
            'original_total_price': float,
            'quote_id': int,
            'quote_name': str,
            'shipping_price': float,
            'status': str
        }

        self.attribute_map = {
            'applied_rule_ids': 'applied_rule_ids',
            'base_negotiated_total_price': 'base_negotiated_total_price',
            'base_original_total_price': 'base_original_total_price',
            'creator_id': 'creator_id',
            'creator_type': 'creator_type',
            'deleted_sku': 'deleted_sku',
            'email_notification_status': 'email_notification_status',
            'expiration_period': 'expiration_period',
            'extension_attributes': 'extension_attributes',
            'has_unconfirmed_changes': 'has_unconfirmed_changes',
            'is_address_draft': 'is_address_draft',
            'is_customer_price_changed': 'is_customer_price_changed',
            'is_regular_quote': 'is_regular_quote',
            'is_shipping_tax_changed': 'is_shipping_tax_changed',
            'negotiated_price_type': 'negotiated_price_type',
            'negotiated_price_value': 'negotiated_price_value',
            'negotiated_total_price': 'negotiated_total_price',
            'notifications': 'notifications',
            'original_total_price': 'original_total_price',
            'quote_id': 'quote_id',
            'quote_name': 'quote_name',
            'shipping_price': 'shipping_price',
            'status': 'status'
        }

        self._applied_rule_ids = applied_rule_ids
        self._base_negotiated_total_price = base_negotiated_total_price
        self._base_original_total_price = base_original_total_price
        self._creator_id = creator_id
        self._creator_type = creator_type
        self._deleted_sku = deleted_sku
        self._email_notification_status = email_notification_status
        self._expiration_period = expiration_period
        self._extension_attributes = extension_attributes
        self._has_unconfirmed_changes = has_unconfirmed_changes
        self._is_address_draft = is_address_draft
        self._is_customer_price_changed = is_customer_price_changed
        self._is_regular_quote = is_regular_quote
        self._is_shipping_tax_changed = is_shipping_tax_changed
        self._negotiated_price_type = negotiated_price_type
        self._negotiated_price_value = negotiated_price_value
        self._negotiated_total_price = negotiated_total_price
        self._notifications = notifications
        self._original_total_price = original_total_price
        self._quote_id = quote_id
        self._quote_name = quote_name
        self._shipping_price = shipping_price
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NegotiableQuoteDataNegotiableQuoteInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The negotiable-quote-data-negotiable-quote-interface of this NegotiableQuoteDataNegotiableQuoteInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_rule_ids(self):
        """Gets the applied_rule_ids of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote rules.

        :return: The applied_rule_ids of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: str
        """
        return self._applied_rule_ids

    @applied_rule_ids.setter
    def applied_rule_ids(self, applied_rule_ids):
        """Sets the applied_rule_ids of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote rules.

        :param applied_rule_ids: The applied_rule_ids of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type applied_rule_ids: str
        """
        if applied_rule_ids is None:
            raise ValueError("Invalid value for `applied_rule_ids`, must not be `None`")

        self._applied_rule_ids = applied_rule_ids

    @property
    def base_negotiated_total_price(self):
        """Gets the base_negotiated_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote negotiated total price in base currency.

        :return: The base_negotiated_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: float
        """
        return self._base_negotiated_total_price

    @base_negotiated_total_price.setter
    def base_negotiated_total_price(self, base_negotiated_total_price):
        """Sets the base_negotiated_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote negotiated total price in base currency.

        :param base_negotiated_total_price: The base_negotiated_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type base_negotiated_total_price: float
        """

        self._base_negotiated_total_price = base_negotiated_total_price

    @property
    def base_original_total_price(self):
        """Gets the base_original_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote original total price in base currency.

        :return: The base_original_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: float
        """
        return self._base_original_total_price

    @base_original_total_price.setter
    def base_original_total_price(self, base_original_total_price):
        """Sets the base_original_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote original total price in base currency.

        :param base_original_total_price: The base_original_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type base_original_total_price: float
        """

        self._base_original_total_price = base_original_total_price

    @property
    def creator_id(self):
        """Gets the creator_id of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote creator id.

        :return: The creator_id of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote creator id.

        :param creator_id: The creator_id of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type creator_id: int
        """
        if creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")

        self._creator_id = creator_id

    @property
    def creator_type(self):
        """Gets the creator_type of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote creator type.

        :return: The creator_type of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: int
        """
        return self._creator_type

    @creator_type.setter
    def creator_type(self, creator_type):
        """Sets the creator_type of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote creator type.

        :param creator_type: The creator_type of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type creator_type: int
        """
        if creator_type is None:
            raise ValueError("Invalid value for `creator_type`, must not be `None`")

        self._creator_type = creator_type

    @property
    def deleted_sku(self):
        """Gets the deleted_sku of this NegotiableQuoteDataNegotiableQuoteInterface.

        Deleted products sku.

        :return: The deleted_sku of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: str
        """
        return self._deleted_sku

    @deleted_sku.setter
    def deleted_sku(self, deleted_sku):
        """Sets the deleted_sku of this NegotiableQuoteDataNegotiableQuoteInterface.

        Deleted products sku.

        :param deleted_sku: The deleted_sku of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type deleted_sku: str
        """
        if deleted_sku is None:
            raise ValueError("Invalid value for `deleted_sku`, must not be `None`")

        self._deleted_sku = deleted_sku

    @property
    def email_notification_status(self):
        """Gets the email_notification_status of this NegotiableQuoteDataNegotiableQuoteInterface.

        Email notification status.

        :return: The email_notification_status of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: int
        """
        return self._email_notification_status

    @email_notification_status.setter
    def email_notification_status(self, email_notification_status):
        """Sets the email_notification_status of this NegotiableQuoteDataNegotiableQuoteInterface.

        Email notification status.

        :param email_notification_status: The email_notification_status of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type email_notification_status: int
        """
        if email_notification_status is None:
            raise ValueError("Invalid value for `email_notification_status`, must not be `None`")

        self._email_notification_status = email_notification_status

    @property
    def expiration_period(self):
        """Gets the expiration_period of this NegotiableQuoteDataNegotiableQuoteInterface.

        Expiration period.

        :return: The expiration_period of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: str
        """
        return self._expiration_period

    @expiration_period.setter
    def expiration_period(self, expiration_period):
        """Sets the expiration_period of this NegotiableQuoteDataNegotiableQuoteInterface.

        Expiration period.

        :param expiration_period: The expiration_period of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type expiration_period: str
        """
        if expiration_period is None:
            raise ValueError("Invalid value for `expiration_period`, must not be `None`")

        self._expiration_period = expiration_period

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this NegotiableQuoteDataNegotiableQuoteInterface.

        ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\NegotiableQuoteInterface

        :return: The extension_attributes of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this NegotiableQuoteDataNegotiableQuoteInterface.

        ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\NegotiableQuoteInterface

        :param extension_attributes: The extension_attributes of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def has_unconfirmed_changes(self):
        """Gets the has_unconfirmed_changes of this NegotiableQuoteDataNegotiableQuoteInterface.

        Has unconfirmed changes.

        :return: The has_unconfirmed_changes of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: bool
        """
        return self._has_unconfirmed_changes

    @has_unconfirmed_changes.setter
    def has_unconfirmed_changes(self, has_unconfirmed_changes):
        """Sets the has_unconfirmed_changes of this NegotiableQuoteDataNegotiableQuoteInterface.

        Has unconfirmed changes.

        :param has_unconfirmed_changes: The has_unconfirmed_changes of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type has_unconfirmed_changes: bool
        """
        if has_unconfirmed_changes is None:
            raise ValueError("Invalid value for `has_unconfirmed_changes`, must not be `None`")

        self._has_unconfirmed_changes = has_unconfirmed_changes

    @property
    def is_address_draft(self):
        """Gets the is_address_draft of this NegotiableQuoteDataNegotiableQuoteInterface.

        Is address draft.

        :return: The is_address_draft of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: bool
        """
        return self._is_address_draft

    @is_address_draft.setter
    def is_address_draft(self, is_address_draft):
        """Sets the is_address_draft of this NegotiableQuoteDataNegotiableQuoteInterface.

        Is address draft.

        :param is_address_draft: The is_address_draft of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type is_address_draft: bool
        """
        if is_address_draft is None:
            raise ValueError("Invalid value for `is_address_draft`, must not be `None`")

        self._is_address_draft = is_address_draft

    @property
    def is_customer_price_changed(self):
        """Gets the is_customer_price_changed of this NegotiableQuoteDataNegotiableQuoteInterface.

        Customer price changes.

        :return: The is_customer_price_changed of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: bool
        """
        return self._is_customer_price_changed

    @is_customer_price_changed.setter
    def is_customer_price_changed(self, is_customer_price_changed):
        """Sets the is_customer_price_changed of this NegotiableQuoteDataNegotiableQuoteInterface.

        Customer price changes.

        :param is_customer_price_changed: The is_customer_price_changed of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type is_customer_price_changed: bool
        """
        if is_customer_price_changed is None:
            raise ValueError("Invalid value for `is_customer_price_changed`, must not be `None`")

        self._is_customer_price_changed = is_customer_price_changed

    @property
    def is_regular_quote(self):
        """Gets the is_regular_quote of this NegotiableQuoteDataNegotiableQuoteInterface.

        Is regular quote.

        :return: The is_regular_quote of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: bool
        """
        return self._is_regular_quote

    @is_regular_quote.setter
    def is_regular_quote(self, is_regular_quote):
        """Sets the is_regular_quote of this NegotiableQuoteDataNegotiableQuoteInterface.

        Is regular quote.

        :param is_regular_quote: The is_regular_quote of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type is_regular_quote: bool
        """
        if is_regular_quote is None:
            raise ValueError("Invalid value for `is_regular_quote`, must not be `None`")

        self._is_regular_quote = is_regular_quote

    @property
    def is_shipping_tax_changed(self):
        """Gets the is_shipping_tax_changed of this NegotiableQuoteDataNegotiableQuoteInterface.

        Shipping tax changes.

        :return: The is_shipping_tax_changed of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: bool
        """
        return self._is_shipping_tax_changed

    @is_shipping_tax_changed.setter
    def is_shipping_tax_changed(self, is_shipping_tax_changed):
        """Sets the is_shipping_tax_changed of this NegotiableQuoteDataNegotiableQuoteInterface.

        Shipping tax changes.

        :param is_shipping_tax_changed: The is_shipping_tax_changed of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type is_shipping_tax_changed: bool
        """
        if is_shipping_tax_changed is None:
            raise ValueError("Invalid value for `is_shipping_tax_changed`, must not be `None`")

        self._is_shipping_tax_changed = is_shipping_tax_changed

    @property
    def negotiated_price_type(self):
        """Gets the negotiated_price_type of this NegotiableQuoteDataNegotiableQuoteInterface.

        Negotiated price type.

        :return: The negotiated_price_type of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: int
        """
        return self._negotiated_price_type

    @negotiated_price_type.setter
    def negotiated_price_type(self, negotiated_price_type):
        """Sets the negotiated_price_type of this NegotiableQuoteDataNegotiableQuoteInterface.

        Negotiated price type.

        :param negotiated_price_type: The negotiated_price_type of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type negotiated_price_type: int
        """
        if negotiated_price_type is None:
            raise ValueError("Invalid value for `negotiated_price_type`, must not be `None`")

        self._negotiated_price_type = negotiated_price_type

    @property
    def negotiated_price_value(self):
        """Gets the negotiated_price_value of this NegotiableQuoteDataNegotiableQuoteInterface.

        Negotiated price value.

        :return: The negotiated_price_value of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: float
        """
        return self._negotiated_price_value

    @negotiated_price_value.setter
    def negotiated_price_value(self, negotiated_price_value):
        """Sets the negotiated_price_value of this NegotiableQuoteDataNegotiableQuoteInterface.

        Negotiated price value.

        :param negotiated_price_value: The negotiated_price_value of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type negotiated_price_value: float
        """
        if negotiated_price_value is None:
            raise ValueError("Invalid value for `negotiated_price_value`, must not be `None`")

        self._negotiated_price_value = negotiated_price_value

    @property
    def negotiated_total_price(self):
        """Gets the negotiated_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote negotiated total price.

        :return: The negotiated_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: float
        """
        return self._negotiated_total_price

    @negotiated_total_price.setter
    def negotiated_total_price(self, negotiated_total_price):
        """Sets the negotiated_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote negotiated total price.

        :param negotiated_total_price: The negotiated_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type negotiated_total_price: float
        """

        self._negotiated_total_price = negotiated_total_price

    @property
    def notifications(self):
        """Gets the notifications of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote notifications.

        :return: The notifications of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: int
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote notifications.

        :param notifications: The notifications of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type notifications: int
        """
        if notifications is None:
            raise ValueError("Invalid value for `notifications`, must not be `None`")

        self._notifications = notifications

    @property
    def original_total_price(self):
        """Gets the original_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote original total price.

        :return: The original_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: float
        """
        return self._original_total_price

    @original_total_price.setter
    def original_total_price(self, original_total_price):
        """Sets the original_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.

        Quote original total price.

        :param original_total_price: The original_total_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type original_total_price: float
        """

        self._original_total_price = original_total_price

    @property
    def quote_id(self):
        """Gets the quote_id of this NegotiableQuoteDataNegotiableQuoteInterface.

        Negotiable quote ID.

        :return: The quote_id of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: int
        """
        return self._quote_id

    @quote_id.setter
    def quote_id(self, quote_id):
        """Sets the quote_id of this NegotiableQuoteDataNegotiableQuoteInterface.

        Negotiable quote ID.

        :param quote_id: The quote_id of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type quote_id: int
        """
        if quote_id is None:
            raise ValueError("Invalid value for `quote_id`, must not be `None`")

        self._quote_id = quote_id

    @property
    def quote_name(self):
        """Gets the quote_name of this NegotiableQuoteDataNegotiableQuoteInterface.

        Negotiable quote name.

        :return: The quote_name of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: str
        """
        return self._quote_name

    @quote_name.setter
    def quote_name(self, quote_name):
        """Sets the quote_name of this NegotiableQuoteDataNegotiableQuoteInterface.

        Negotiable quote name.

        :param quote_name: The quote_name of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type quote_name: str
        """
        if quote_name is None:
            raise ValueError("Invalid value for `quote_name`, must not be `None`")

        self._quote_name = quote_name

    @property
    def shipping_price(self):
        """Gets the shipping_price of this NegotiableQuoteDataNegotiableQuoteInterface.

        Proposed shipping price.

        :return: The shipping_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: float
        """
        return self._shipping_price

    @shipping_price.setter
    def shipping_price(self, shipping_price):
        """Sets the shipping_price of this NegotiableQuoteDataNegotiableQuoteInterface.

        Proposed shipping price.

        :param shipping_price: The shipping_price of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type shipping_price: float
        """
        if shipping_price is None:
            raise ValueError("Invalid value for `shipping_price`, must not be `None`")

        self._shipping_price = shipping_price

    @property
    def status(self):
        """Gets the status of this NegotiableQuoteDataNegotiableQuoteInterface.

        Negotiable quote status.

        :return: The status of this NegotiableQuoteDataNegotiableQuoteInterface.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NegotiableQuoteDataNegotiableQuoteInterface.

        Negotiable quote status.

        :param status: The status of this NegotiableQuoteDataNegotiableQuoteInterface.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
