# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_inventory_data_stock_item_interface import CatalogInventoryDataStockItemInterface
from openapi_server import util


class CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stock_item: CatalogInventoryDataStockItemInterface=None):
        """CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest - a model defined in OpenAPI

        :param stock_item: The stock_item of this CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest.
        """
        self.openapi_types = {
            'stock_item': CatalogInventoryDataStockItemInterface
        }

        self.attribute_map = {
            'stock_item': 'stockItem'
        }

        self._stock_item = stock_item

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalogInventoryStockRegistryV1UpdateStockItemBySkuPut_request of this CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stock_item(self):
        """Gets the stock_item of this CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest.


        :return: The stock_item of this CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest.
        :rtype: CatalogInventoryDataStockItemInterface
        """
        return self._stock_item

    @stock_item.setter
    def stock_item(self, stock_item):
        """Sets the stock_item of this CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest.


        :param stock_item: The stock_item of this CatalogInventoryStockRegistryV1UpdateStockItemBySkuPutRequest.
        :type stock_item: CatalogInventoryDataStockItemInterface
        """
        if stock_item is None:
            raise ValueError("Invalid value for `stock_item`, must not be `None`")

        self._stock_item = stock_item
