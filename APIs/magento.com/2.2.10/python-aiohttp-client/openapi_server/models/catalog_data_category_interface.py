# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.framework_attribute_interface import FrameworkAttributeInterface
from openapi_server import util


class CatalogDataCategoryInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_sort_by: List[str]=None, children: str=None, created_at: str=None, custom_attributes: List[FrameworkAttributeInterface]=None, extension_attributes: object=None, id: int=None, include_in_menu: bool=None, is_active: bool=None, level: int=None, name: str=None, parent_id: int=None, path: str=None, position: int=None, updated_at: str=None):
        """CatalogDataCategoryInterface - a model defined in OpenAPI

        :param available_sort_by: The available_sort_by of this CatalogDataCategoryInterface.
        :param children: The children of this CatalogDataCategoryInterface.
        :param created_at: The created_at of this CatalogDataCategoryInterface.
        :param custom_attributes: The custom_attributes of this CatalogDataCategoryInterface.
        :param extension_attributes: The extension_attributes of this CatalogDataCategoryInterface.
        :param id: The id of this CatalogDataCategoryInterface.
        :param include_in_menu: The include_in_menu of this CatalogDataCategoryInterface.
        :param is_active: The is_active of this CatalogDataCategoryInterface.
        :param level: The level of this CatalogDataCategoryInterface.
        :param name: The name of this CatalogDataCategoryInterface.
        :param parent_id: The parent_id of this CatalogDataCategoryInterface.
        :param path: The path of this CatalogDataCategoryInterface.
        :param position: The position of this CatalogDataCategoryInterface.
        :param updated_at: The updated_at of this CatalogDataCategoryInterface.
        """
        self.openapi_types = {
            'available_sort_by': List[str],
            'children': str,
            'created_at': str,
            'custom_attributes': List[FrameworkAttributeInterface],
            'extension_attributes': object,
            'id': int,
            'include_in_menu': bool,
            'is_active': bool,
            'level': int,
            'name': str,
            'parent_id': int,
            'path': str,
            'position': int,
            'updated_at': str
        }

        self.attribute_map = {
            'available_sort_by': 'available_sort_by',
            'children': 'children',
            'created_at': 'created_at',
            'custom_attributes': 'custom_attributes',
            'extension_attributes': 'extension_attributes',
            'id': 'id',
            'include_in_menu': 'include_in_menu',
            'is_active': 'is_active',
            'level': 'level',
            'name': 'name',
            'parent_id': 'parent_id',
            'path': 'path',
            'position': 'position',
            'updated_at': 'updated_at'
        }

        self._available_sort_by = available_sort_by
        self._children = children
        self._created_at = created_at
        self._custom_attributes = custom_attributes
        self._extension_attributes = extension_attributes
        self._id = id
        self._include_in_menu = include_in_menu
        self._is_active = is_active
        self._level = level
        self._name = name
        self._parent_id = parent_id
        self._path = path
        self._position = position
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataCategoryInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-category-interface of this CatalogDataCategoryInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_sort_by(self):
        """Gets the available_sort_by of this CatalogDataCategoryInterface.


        :return: The available_sort_by of this CatalogDataCategoryInterface.
        :rtype: List[str]
        """
        return self._available_sort_by

    @available_sort_by.setter
    def available_sort_by(self, available_sort_by):
        """Sets the available_sort_by of this CatalogDataCategoryInterface.


        :param available_sort_by: The available_sort_by of this CatalogDataCategoryInterface.
        :type available_sort_by: List[str]
        """

        self._available_sort_by = available_sort_by

    @property
    def children(self):
        """Gets the children of this CatalogDataCategoryInterface.


        :return: The children of this CatalogDataCategoryInterface.
        :rtype: str
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this CatalogDataCategoryInterface.


        :param children: The children of this CatalogDataCategoryInterface.
        :type children: str
        """

        self._children = children

    @property
    def created_at(self):
        """Gets the created_at of this CatalogDataCategoryInterface.


        :return: The created_at of this CatalogDataCategoryInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CatalogDataCategoryInterface.


        :param created_at: The created_at of this CatalogDataCategoryInterface.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this CatalogDataCategoryInterface.

        Custom attributes values.

        :return: The custom_attributes of this CatalogDataCategoryInterface.
        :rtype: List[FrameworkAttributeInterface]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this CatalogDataCategoryInterface.

        Custom attributes values.

        :param custom_attributes: The custom_attributes of this CatalogDataCategoryInterface.
        :type custom_attributes: List[FrameworkAttributeInterface]
        """

        self._custom_attributes = custom_attributes

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CatalogDataCategoryInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CategoryInterface

        :return: The extension_attributes of this CatalogDataCategoryInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CatalogDataCategoryInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CategoryInterface

        :param extension_attributes: The extension_attributes of this CatalogDataCategoryInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def id(self):
        """Gets the id of this CatalogDataCategoryInterface.


        :return: The id of this CatalogDataCategoryInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogDataCategoryInterface.


        :param id: The id of this CatalogDataCategoryInterface.
        :type id: int
        """

        self._id = id

    @property
    def include_in_menu(self):
        """Gets the include_in_menu of this CatalogDataCategoryInterface.


        :return: The include_in_menu of this CatalogDataCategoryInterface.
        :rtype: bool
        """
        return self._include_in_menu

    @include_in_menu.setter
    def include_in_menu(self, include_in_menu):
        """Sets the include_in_menu of this CatalogDataCategoryInterface.


        :param include_in_menu: The include_in_menu of this CatalogDataCategoryInterface.
        :type include_in_menu: bool
        """

        self._include_in_menu = include_in_menu

    @property
    def is_active(self):
        """Gets the is_active of this CatalogDataCategoryInterface.

        Whether category is active

        :return: The is_active of this CatalogDataCategoryInterface.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this CatalogDataCategoryInterface.

        Whether category is active

        :param is_active: The is_active of this CatalogDataCategoryInterface.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def level(self):
        """Gets the level of this CatalogDataCategoryInterface.

        Category level

        :return: The level of this CatalogDataCategoryInterface.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CatalogDataCategoryInterface.

        Category level

        :param level: The level of this CatalogDataCategoryInterface.
        :type level: int
        """

        self._level = level

    @property
    def name(self):
        """Gets the name of this CatalogDataCategoryInterface.

        Category name

        :return: The name of this CatalogDataCategoryInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogDataCategoryInterface.

        Category name

        :param name: The name of this CatalogDataCategoryInterface.
        :type name: str
        """

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this CatalogDataCategoryInterface.

        Parent category ID

        :return: The parent_id of this CatalogDataCategoryInterface.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CatalogDataCategoryInterface.

        Parent category ID

        :param parent_id: The parent_id of this CatalogDataCategoryInterface.
        :type parent_id: int
        """

        self._parent_id = parent_id

    @property
    def path(self):
        """Gets the path of this CatalogDataCategoryInterface.


        :return: The path of this CatalogDataCategoryInterface.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CatalogDataCategoryInterface.


        :param path: The path of this CatalogDataCategoryInterface.
        :type path: str
        """

        self._path = path

    @property
    def position(self):
        """Gets the position of this CatalogDataCategoryInterface.

        Category position

        :return: The position of this CatalogDataCategoryInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CatalogDataCategoryInterface.

        Category position

        :param position: The position of this CatalogDataCategoryInterface.
        :type position: int
        """

        self._position = position

    @property
    def updated_at(self):
        """Gets the updated_at of this CatalogDataCategoryInterface.


        :return: The updated_at of this CatalogDataCategoryInterface.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CatalogDataCategoryInterface.


        :param updated_at: The updated_at of this CatalogDataCategoryInterface.
        :type updated_at: str
        """

        self._updated_at = updated_at
