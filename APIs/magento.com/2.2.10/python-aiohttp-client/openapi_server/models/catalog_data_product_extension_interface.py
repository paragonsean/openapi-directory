# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bundle_data_option_interface import BundleDataOptionInterface
from openapi_server.models.catalog_data_category_link_interface import CatalogDataCategoryLinkInterface
from openapi_server.models.catalog_inventory_data_stock_item_interface import CatalogInventoryDataStockItemInterface
from openapi_server.models.configurable_product_data_option_interface import ConfigurableProductDataOptionInterface
from openapi_server.models.downloadable_data_link_interface import DownloadableDataLinkInterface
from openapi_server.models.downloadable_data_sample_interface import DownloadableDataSampleInterface
from openapi_server.models.gift_card_data_giftcard_amount_interface import GiftCardDataGiftcardAmountInterface
from openapi_server import util


class CatalogDataProductExtensionInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bundle_product_options: List[BundleDataOptionInterface]=None, category_links: List[CatalogDataCategoryLinkInterface]=None, configurable_product_links: List[int]=None, configurable_product_options: List[ConfigurableProductDataOptionInterface]=None, downloadable_product_links: List[DownloadableDataLinkInterface]=None, downloadable_product_samples: List[DownloadableDataSampleInterface]=None, giftcard_amounts: List[GiftCardDataGiftcardAmountInterface]=None, stock_item: CatalogInventoryDataStockItemInterface=None, website_ids: List[int]=None):
        """CatalogDataProductExtensionInterface - a model defined in OpenAPI

        :param bundle_product_options: The bundle_product_options of this CatalogDataProductExtensionInterface.
        :param category_links: The category_links of this CatalogDataProductExtensionInterface.
        :param configurable_product_links: The configurable_product_links of this CatalogDataProductExtensionInterface.
        :param configurable_product_options: The configurable_product_options of this CatalogDataProductExtensionInterface.
        :param downloadable_product_links: The downloadable_product_links of this CatalogDataProductExtensionInterface.
        :param downloadable_product_samples: The downloadable_product_samples of this CatalogDataProductExtensionInterface.
        :param giftcard_amounts: The giftcard_amounts of this CatalogDataProductExtensionInterface.
        :param stock_item: The stock_item of this CatalogDataProductExtensionInterface.
        :param website_ids: The website_ids of this CatalogDataProductExtensionInterface.
        """
        self.openapi_types = {
            'bundle_product_options': List[BundleDataOptionInterface],
            'category_links': List[CatalogDataCategoryLinkInterface],
            'configurable_product_links': List[int],
            'configurable_product_options': List[ConfigurableProductDataOptionInterface],
            'downloadable_product_links': List[DownloadableDataLinkInterface],
            'downloadable_product_samples': List[DownloadableDataSampleInterface],
            'giftcard_amounts': List[GiftCardDataGiftcardAmountInterface],
            'stock_item': CatalogInventoryDataStockItemInterface,
            'website_ids': List[int]
        }

        self.attribute_map = {
            'bundle_product_options': 'bundle_product_options',
            'category_links': 'category_links',
            'configurable_product_links': 'configurable_product_links',
            'configurable_product_options': 'configurable_product_options',
            'downloadable_product_links': 'downloadable_product_links',
            'downloadable_product_samples': 'downloadable_product_samples',
            'giftcard_amounts': 'giftcard_amounts',
            'stock_item': 'stock_item',
            'website_ids': 'website_ids'
        }

        self._bundle_product_options = bundle_product_options
        self._category_links = category_links
        self._configurable_product_links = configurable_product_links
        self._configurable_product_options = configurable_product_options
        self._downloadable_product_links = downloadable_product_links
        self._downloadable_product_samples = downloadable_product_samples
        self._giftcard_amounts = giftcard_amounts
        self._stock_item = stock_item
        self._website_ids = website_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataProductExtensionInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-product-extension-interface of this CatalogDataProductExtensionInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bundle_product_options(self):
        """Gets the bundle_product_options of this CatalogDataProductExtensionInterface.


        :return: The bundle_product_options of this CatalogDataProductExtensionInterface.
        :rtype: List[BundleDataOptionInterface]
        """
        return self._bundle_product_options

    @bundle_product_options.setter
    def bundle_product_options(self, bundle_product_options):
        """Sets the bundle_product_options of this CatalogDataProductExtensionInterface.


        :param bundle_product_options: The bundle_product_options of this CatalogDataProductExtensionInterface.
        :type bundle_product_options: List[BundleDataOptionInterface]
        """

        self._bundle_product_options = bundle_product_options

    @property
    def category_links(self):
        """Gets the category_links of this CatalogDataProductExtensionInterface.


        :return: The category_links of this CatalogDataProductExtensionInterface.
        :rtype: List[CatalogDataCategoryLinkInterface]
        """
        return self._category_links

    @category_links.setter
    def category_links(self, category_links):
        """Sets the category_links of this CatalogDataProductExtensionInterface.


        :param category_links: The category_links of this CatalogDataProductExtensionInterface.
        :type category_links: List[CatalogDataCategoryLinkInterface]
        """

        self._category_links = category_links

    @property
    def configurable_product_links(self):
        """Gets the configurable_product_links of this CatalogDataProductExtensionInterface.


        :return: The configurable_product_links of this CatalogDataProductExtensionInterface.
        :rtype: List[int]
        """
        return self._configurable_product_links

    @configurable_product_links.setter
    def configurable_product_links(self, configurable_product_links):
        """Sets the configurable_product_links of this CatalogDataProductExtensionInterface.


        :param configurable_product_links: The configurable_product_links of this CatalogDataProductExtensionInterface.
        :type configurable_product_links: List[int]
        """

        self._configurable_product_links = configurable_product_links

    @property
    def configurable_product_options(self):
        """Gets the configurable_product_options of this CatalogDataProductExtensionInterface.


        :return: The configurable_product_options of this CatalogDataProductExtensionInterface.
        :rtype: List[ConfigurableProductDataOptionInterface]
        """
        return self._configurable_product_options

    @configurable_product_options.setter
    def configurable_product_options(self, configurable_product_options):
        """Sets the configurable_product_options of this CatalogDataProductExtensionInterface.


        :param configurable_product_options: The configurable_product_options of this CatalogDataProductExtensionInterface.
        :type configurable_product_options: List[ConfigurableProductDataOptionInterface]
        """

        self._configurable_product_options = configurable_product_options

    @property
    def downloadable_product_links(self):
        """Gets the downloadable_product_links of this CatalogDataProductExtensionInterface.


        :return: The downloadable_product_links of this CatalogDataProductExtensionInterface.
        :rtype: List[DownloadableDataLinkInterface]
        """
        return self._downloadable_product_links

    @downloadable_product_links.setter
    def downloadable_product_links(self, downloadable_product_links):
        """Sets the downloadable_product_links of this CatalogDataProductExtensionInterface.


        :param downloadable_product_links: The downloadable_product_links of this CatalogDataProductExtensionInterface.
        :type downloadable_product_links: List[DownloadableDataLinkInterface]
        """

        self._downloadable_product_links = downloadable_product_links

    @property
    def downloadable_product_samples(self):
        """Gets the downloadable_product_samples of this CatalogDataProductExtensionInterface.


        :return: The downloadable_product_samples of this CatalogDataProductExtensionInterface.
        :rtype: List[DownloadableDataSampleInterface]
        """
        return self._downloadable_product_samples

    @downloadable_product_samples.setter
    def downloadable_product_samples(self, downloadable_product_samples):
        """Sets the downloadable_product_samples of this CatalogDataProductExtensionInterface.


        :param downloadable_product_samples: The downloadable_product_samples of this CatalogDataProductExtensionInterface.
        :type downloadable_product_samples: List[DownloadableDataSampleInterface]
        """

        self._downloadable_product_samples = downloadable_product_samples

    @property
    def giftcard_amounts(self):
        """Gets the giftcard_amounts of this CatalogDataProductExtensionInterface.


        :return: The giftcard_amounts of this CatalogDataProductExtensionInterface.
        :rtype: List[GiftCardDataGiftcardAmountInterface]
        """
        return self._giftcard_amounts

    @giftcard_amounts.setter
    def giftcard_amounts(self, giftcard_amounts):
        """Sets the giftcard_amounts of this CatalogDataProductExtensionInterface.


        :param giftcard_amounts: The giftcard_amounts of this CatalogDataProductExtensionInterface.
        :type giftcard_amounts: List[GiftCardDataGiftcardAmountInterface]
        """

        self._giftcard_amounts = giftcard_amounts

    @property
    def stock_item(self):
        """Gets the stock_item of this CatalogDataProductExtensionInterface.


        :return: The stock_item of this CatalogDataProductExtensionInterface.
        :rtype: CatalogInventoryDataStockItemInterface
        """
        return self._stock_item

    @stock_item.setter
    def stock_item(self, stock_item):
        """Sets the stock_item of this CatalogDataProductExtensionInterface.


        :param stock_item: The stock_item of this CatalogDataProductExtensionInterface.
        :type stock_item: CatalogInventoryDataStockItemInterface
        """

        self._stock_item = stock_item

    @property
    def website_ids(self):
        """Gets the website_ids of this CatalogDataProductExtensionInterface.


        :return: The website_ids of this CatalogDataProductExtensionInterface.
        :rtype: List[int]
        """
        return self._website_ids

    @website_ids.setter
    def website_ids(self, website_ids):
        """Sets the website_ids of this CatalogDataProductExtensionInterface.


        :param website_ids: The website_ids of this CatalogDataProductExtensionInterface.
        :type website_ids: List[int]
        """

        self._website_ids = website_ids
