# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DownloadableDataFileContentInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension_attributes: object=None, file_data: str=None, name: str=None):
        """DownloadableDataFileContentInterface - a model defined in OpenAPI

        :param extension_attributes: The extension_attributes of this DownloadableDataFileContentInterface.
        :param file_data: The file_data of this DownloadableDataFileContentInterface.
        :param name: The name of this DownloadableDataFileContentInterface.
        """
        self.openapi_types = {
            'extension_attributes': object,
            'file_data': str,
            'name': str
        }

        self.attribute_map = {
            'extension_attributes': 'extension_attributes',
            'file_data': 'file_data',
            'name': 'name'
        }

        self._extension_attributes = extension_attributes
        self._file_data = file_data
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DownloadableDataFileContentInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The downloadable-data-file-content-interface of this DownloadableDataFileContentInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this DownloadableDataFileContentInterface.

        ExtensionInterface class for @see \\Magento\\Downloadable\\Api\\Data\\File\\ContentInterface

        :return: The extension_attributes of this DownloadableDataFileContentInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this DownloadableDataFileContentInterface.

        ExtensionInterface class for @see \\Magento\\Downloadable\\Api\\Data\\File\\ContentInterface

        :param extension_attributes: The extension_attributes of this DownloadableDataFileContentInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def file_data(self):
        """Gets the file_data of this DownloadableDataFileContentInterface.

        Data (base64 encoded content)

        :return: The file_data of this DownloadableDataFileContentInterface.
        :rtype: str
        """
        return self._file_data

    @file_data.setter
    def file_data(self, file_data):
        """Sets the file_data of this DownloadableDataFileContentInterface.

        Data (base64 encoded content)

        :param file_data: The file_data of this DownloadableDataFileContentInterface.
        :type file_data: str
        """
        if file_data is None:
            raise ValueError("Invalid value for `file_data`, must not be `None`")

        self._file_data = file_data

    @property
    def name(self):
        """Gets the name of this DownloadableDataFileContentInterface.

        File name

        :return: The name of this DownloadableDataFileContentInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DownloadableDataFileContentInterface.

        File name

        :param name: The name of this DownloadableDataFileContentInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
