# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_data_customer_interface import CustomerDataCustomerInterface
from openapi_server import util


class CustomerCustomerRepositoryV1SavePutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer: CustomerDataCustomerInterface=None, password_hash: str=None):
        """CustomerCustomerRepositoryV1SavePutRequest - a model defined in OpenAPI

        :param customer: The customer of this CustomerCustomerRepositoryV1SavePutRequest.
        :param password_hash: The password_hash of this CustomerCustomerRepositoryV1SavePutRequest.
        """
        self.openapi_types = {
            'customer': CustomerDataCustomerInterface,
            'password_hash': str
        }

        self.attribute_map = {
            'customer': 'customer',
            'password_hash': 'passwordHash'
        }

        self._customer = customer
        self._password_hash = password_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerCustomerRepositoryV1SavePutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customerCustomerRepositoryV1SavePut_request of this CustomerCustomerRepositoryV1SavePutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer(self):
        """Gets the customer of this CustomerCustomerRepositoryV1SavePutRequest.


        :return: The customer of this CustomerCustomerRepositoryV1SavePutRequest.
        :rtype: CustomerDataCustomerInterface
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this CustomerCustomerRepositoryV1SavePutRequest.


        :param customer: The customer of this CustomerCustomerRepositoryV1SavePutRequest.
        :type customer: CustomerDataCustomerInterface
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")

        self._customer = customer

    @property
    def password_hash(self):
        """Gets the password_hash of this CustomerCustomerRepositoryV1SavePutRequest.


        :return: The password_hash of this CustomerCustomerRepositoryV1SavePutRequest.
        :rtype: str
        """
        return self._password_hash

    @password_hash.setter
    def password_hash(self, password_hash):
        """Sets the password_hash of this CustomerCustomerRepositoryV1SavePutRequest.


        :param password_hash: The password_hash of this CustomerCustomerRepositoryV1SavePutRequest.
        :type password_hash: str
        """

        self._password_hash = password_hash
