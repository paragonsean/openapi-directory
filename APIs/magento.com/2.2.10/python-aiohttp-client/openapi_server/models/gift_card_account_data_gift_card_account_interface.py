# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GiftCardAccountDataGiftCardAccountInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_gift_cards_amount: float=None, base_gift_cards_amount_used: float=None, extension_attributes: object=None, gift_cards: List[str]=None, gift_cards_amount: float=None, gift_cards_amount_used: float=None):
        """GiftCardAccountDataGiftCardAccountInterface - a model defined in OpenAPI

        :param base_gift_cards_amount: The base_gift_cards_amount of this GiftCardAccountDataGiftCardAccountInterface.
        :param base_gift_cards_amount_used: The base_gift_cards_amount_used of this GiftCardAccountDataGiftCardAccountInterface.
        :param extension_attributes: The extension_attributes of this GiftCardAccountDataGiftCardAccountInterface.
        :param gift_cards: The gift_cards of this GiftCardAccountDataGiftCardAccountInterface.
        :param gift_cards_amount: The gift_cards_amount of this GiftCardAccountDataGiftCardAccountInterface.
        :param gift_cards_amount_used: The gift_cards_amount_used of this GiftCardAccountDataGiftCardAccountInterface.
        """
        self.openapi_types = {
            'base_gift_cards_amount': float,
            'base_gift_cards_amount_used': float,
            'extension_attributes': object,
            'gift_cards': List[str],
            'gift_cards_amount': float,
            'gift_cards_amount_used': float
        }

        self.attribute_map = {
            'base_gift_cards_amount': 'base_gift_cards_amount',
            'base_gift_cards_amount_used': 'base_gift_cards_amount_used',
            'extension_attributes': 'extension_attributes',
            'gift_cards': 'gift_cards',
            'gift_cards_amount': 'gift_cards_amount',
            'gift_cards_amount_used': 'gift_cards_amount_used'
        }

        self._base_gift_cards_amount = base_gift_cards_amount
        self._base_gift_cards_amount_used = base_gift_cards_amount_used
        self._extension_attributes = extension_attributes
        self._gift_cards = gift_cards
        self._gift_cards_amount = gift_cards_amount
        self._gift_cards_amount_used = gift_cards_amount_used

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GiftCardAccountDataGiftCardAccountInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The gift-card-account-data-gift-card-account-interface of this GiftCardAccountDataGiftCardAccountInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_gift_cards_amount(self):
        """Gets the base_gift_cards_amount of this GiftCardAccountDataGiftCardAccountInterface.

        Cards amount in base currency

        :return: The base_gift_cards_amount of this GiftCardAccountDataGiftCardAccountInterface.
        :rtype: float
        """
        return self._base_gift_cards_amount

    @base_gift_cards_amount.setter
    def base_gift_cards_amount(self, base_gift_cards_amount):
        """Sets the base_gift_cards_amount of this GiftCardAccountDataGiftCardAccountInterface.

        Cards amount in base currency

        :param base_gift_cards_amount: The base_gift_cards_amount of this GiftCardAccountDataGiftCardAccountInterface.
        :type base_gift_cards_amount: float
        """
        if base_gift_cards_amount is None:
            raise ValueError("Invalid value for `base_gift_cards_amount`, must not be `None`")

        self._base_gift_cards_amount = base_gift_cards_amount

    @property
    def base_gift_cards_amount_used(self):
        """Gets the base_gift_cards_amount_used of this GiftCardAccountDataGiftCardAccountInterface.

        Cards amount used in base currency

        :return: The base_gift_cards_amount_used of this GiftCardAccountDataGiftCardAccountInterface.
        :rtype: float
        """
        return self._base_gift_cards_amount_used

    @base_gift_cards_amount_used.setter
    def base_gift_cards_amount_used(self, base_gift_cards_amount_used):
        """Sets the base_gift_cards_amount_used of this GiftCardAccountDataGiftCardAccountInterface.

        Cards amount used in base currency

        :param base_gift_cards_amount_used: The base_gift_cards_amount_used of this GiftCardAccountDataGiftCardAccountInterface.
        :type base_gift_cards_amount_used: float
        """
        if base_gift_cards_amount_used is None:
            raise ValueError("Invalid value for `base_gift_cards_amount_used`, must not be `None`")

        self._base_gift_cards_amount_used = base_gift_cards_amount_used

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this GiftCardAccountDataGiftCardAccountInterface.

        ExtensionInterface class for @see \\Magento\\GiftCardAccount\\Api\\Data\\GiftCardAccountInterface

        :return: The extension_attributes of this GiftCardAccountDataGiftCardAccountInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this GiftCardAccountDataGiftCardAccountInterface.

        ExtensionInterface class for @see \\Magento\\GiftCardAccount\\Api\\Data\\GiftCardAccountInterface

        :param extension_attributes: The extension_attributes of this GiftCardAccountDataGiftCardAccountInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def gift_cards(self):
        """Gets the gift_cards of this GiftCardAccountDataGiftCardAccountInterface.

        Cards codes

        :return: The gift_cards of this GiftCardAccountDataGiftCardAccountInterface.
        :rtype: List[str]
        """
        return self._gift_cards

    @gift_cards.setter
    def gift_cards(self, gift_cards):
        """Sets the gift_cards of this GiftCardAccountDataGiftCardAccountInterface.

        Cards codes

        :param gift_cards: The gift_cards of this GiftCardAccountDataGiftCardAccountInterface.
        :type gift_cards: List[str]
        """
        if gift_cards is None:
            raise ValueError("Invalid value for `gift_cards`, must not be `None`")

        self._gift_cards = gift_cards

    @property
    def gift_cards_amount(self):
        """Gets the gift_cards_amount of this GiftCardAccountDataGiftCardAccountInterface.

        Cards amount in quote currency

        :return: The gift_cards_amount of this GiftCardAccountDataGiftCardAccountInterface.
        :rtype: float
        """
        return self._gift_cards_amount

    @gift_cards_amount.setter
    def gift_cards_amount(self, gift_cards_amount):
        """Sets the gift_cards_amount of this GiftCardAccountDataGiftCardAccountInterface.

        Cards amount in quote currency

        :param gift_cards_amount: The gift_cards_amount of this GiftCardAccountDataGiftCardAccountInterface.
        :type gift_cards_amount: float
        """
        if gift_cards_amount is None:
            raise ValueError("Invalid value for `gift_cards_amount`, must not be `None`")

        self._gift_cards_amount = gift_cards_amount

    @property
    def gift_cards_amount_used(self):
        """Gets the gift_cards_amount_used of this GiftCardAccountDataGiftCardAccountInterface.

        Cards amount used in quote currency

        :return: The gift_cards_amount_used of this GiftCardAccountDataGiftCardAccountInterface.
        :rtype: float
        """
        return self._gift_cards_amount_used

    @gift_cards_amount_used.setter
    def gift_cards_amount_used(self, gift_cards_amount_used):
        """Sets the gift_cards_amount_used of this GiftCardAccountDataGiftCardAccountInterface.

        Cards amount used in quote currency

        :param gift_cards_amount_used: The gift_cards_amount_used of this GiftCardAccountDataGiftCardAccountInterface.
        :type gift_cards_amount_used: float
        """
        if gift_cards_amount_used is None:
            raise ValueError("Invalid value for `gift_cards_amount_used`, must not be `None`")

        self._gift_cards_amount_used = gift_cards_amount_used
