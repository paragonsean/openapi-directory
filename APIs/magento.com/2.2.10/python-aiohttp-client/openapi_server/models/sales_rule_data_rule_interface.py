# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sales_rule_data_condition_interface import SalesRuleDataConditionInterface
from openapi_server.models.sales_rule_data_rule_extension_interface import SalesRuleDataRuleExtensionInterface
from openapi_server.models.sales_rule_data_rule_label_interface import SalesRuleDataRuleLabelInterface
from openapi_server import util


class SalesRuleDataRuleInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_condition: SalesRuleDataConditionInterface=None, apply_to_shipping: bool=None, condition: SalesRuleDataConditionInterface=None, coupon_type: str=None, customer_group_ids: List[int]=None, description: str=None, discount_amount: float=None, discount_qty: float=None, discount_step: int=None, extension_attributes: SalesRuleDataRuleExtensionInterface=None, from_date: str=None, is_active: bool=None, is_advanced: bool=None, is_rss: bool=None, name: str=None, product_ids: List[int]=None, rule_id: int=None, simple_action: str=None, simple_free_shipping: str=None, sort_order: int=None, stop_rules_processing: bool=None, store_labels: List[SalesRuleDataRuleLabelInterface]=None, times_used: int=None, to_date: str=None, use_auto_generation: bool=None, uses_per_coupon: int=None, uses_per_customer: int=None, website_ids: List[int]=None):
        """SalesRuleDataRuleInterface - a model defined in OpenAPI

        :param action_condition: The action_condition of this SalesRuleDataRuleInterface.
        :param apply_to_shipping: The apply_to_shipping of this SalesRuleDataRuleInterface.
        :param condition: The condition of this SalesRuleDataRuleInterface.
        :param coupon_type: The coupon_type of this SalesRuleDataRuleInterface.
        :param customer_group_ids: The customer_group_ids of this SalesRuleDataRuleInterface.
        :param description: The description of this SalesRuleDataRuleInterface.
        :param discount_amount: The discount_amount of this SalesRuleDataRuleInterface.
        :param discount_qty: The discount_qty of this SalesRuleDataRuleInterface.
        :param discount_step: The discount_step of this SalesRuleDataRuleInterface.
        :param extension_attributes: The extension_attributes of this SalesRuleDataRuleInterface.
        :param from_date: The from_date of this SalesRuleDataRuleInterface.
        :param is_active: The is_active of this SalesRuleDataRuleInterface.
        :param is_advanced: The is_advanced of this SalesRuleDataRuleInterface.
        :param is_rss: The is_rss of this SalesRuleDataRuleInterface.
        :param name: The name of this SalesRuleDataRuleInterface.
        :param product_ids: The product_ids of this SalesRuleDataRuleInterface.
        :param rule_id: The rule_id of this SalesRuleDataRuleInterface.
        :param simple_action: The simple_action of this SalesRuleDataRuleInterface.
        :param simple_free_shipping: The simple_free_shipping of this SalesRuleDataRuleInterface.
        :param sort_order: The sort_order of this SalesRuleDataRuleInterface.
        :param stop_rules_processing: The stop_rules_processing of this SalesRuleDataRuleInterface.
        :param store_labels: The store_labels of this SalesRuleDataRuleInterface.
        :param times_used: The times_used of this SalesRuleDataRuleInterface.
        :param to_date: The to_date of this SalesRuleDataRuleInterface.
        :param use_auto_generation: The use_auto_generation of this SalesRuleDataRuleInterface.
        :param uses_per_coupon: The uses_per_coupon of this SalesRuleDataRuleInterface.
        :param uses_per_customer: The uses_per_customer of this SalesRuleDataRuleInterface.
        :param website_ids: The website_ids of this SalesRuleDataRuleInterface.
        """
        self.openapi_types = {
            'action_condition': SalesRuleDataConditionInterface,
            'apply_to_shipping': bool,
            'condition': SalesRuleDataConditionInterface,
            'coupon_type': str,
            'customer_group_ids': List[int],
            'description': str,
            'discount_amount': float,
            'discount_qty': float,
            'discount_step': int,
            'extension_attributes': SalesRuleDataRuleExtensionInterface,
            'from_date': str,
            'is_active': bool,
            'is_advanced': bool,
            'is_rss': bool,
            'name': str,
            'product_ids': List[int],
            'rule_id': int,
            'simple_action': str,
            'simple_free_shipping': str,
            'sort_order': int,
            'stop_rules_processing': bool,
            'store_labels': List[SalesRuleDataRuleLabelInterface],
            'times_used': int,
            'to_date': str,
            'use_auto_generation': bool,
            'uses_per_coupon': int,
            'uses_per_customer': int,
            'website_ids': List[int]
        }

        self.attribute_map = {
            'action_condition': 'action_condition',
            'apply_to_shipping': 'apply_to_shipping',
            'condition': 'condition',
            'coupon_type': 'coupon_type',
            'customer_group_ids': 'customer_group_ids',
            'description': 'description',
            'discount_amount': 'discount_amount',
            'discount_qty': 'discount_qty',
            'discount_step': 'discount_step',
            'extension_attributes': 'extension_attributes',
            'from_date': 'from_date',
            'is_active': 'is_active',
            'is_advanced': 'is_advanced',
            'is_rss': 'is_rss',
            'name': 'name',
            'product_ids': 'product_ids',
            'rule_id': 'rule_id',
            'simple_action': 'simple_action',
            'simple_free_shipping': 'simple_free_shipping',
            'sort_order': 'sort_order',
            'stop_rules_processing': 'stop_rules_processing',
            'store_labels': 'store_labels',
            'times_used': 'times_used',
            'to_date': 'to_date',
            'use_auto_generation': 'use_auto_generation',
            'uses_per_coupon': 'uses_per_coupon',
            'uses_per_customer': 'uses_per_customer',
            'website_ids': 'website_ids'
        }

        self._action_condition = action_condition
        self._apply_to_shipping = apply_to_shipping
        self._condition = condition
        self._coupon_type = coupon_type
        self._customer_group_ids = customer_group_ids
        self._description = description
        self._discount_amount = discount_amount
        self._discount_qty = discount_qty
        self._discount_step = discount_step
        self._extension_attributes = extension_attributes
        self._from_date = from_date
        self._is_active = is_active
        self._is_advanced = is_advanced
        self._is_rss = is_rss
        self._name = name
        self._product_ids = product_ids
        self._rule_id = rule_id
        self._simple_action = simple_action
        self._simple_free_shipping = simple_free_shipping
        self._sort_order = sort_order
        self._stop_rules_processing = stop_rules_processing
        self._store_labels = store_labels
        self._times_used = times_used
        self._to_date = to_date
        self._use_auto_generation = use_auto_generation
        self._uses_per_coupon = uses_per_coupon
        self._uses_per_customer = uses_per_customer
        self._website_ids = website_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesRuleDataRuleInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sales-rule-data-rule-interface of this SalesRuleDataRuleInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_condition(self):
        """Gets the action_condition of this SalesRuleDataRuleInterface.


        :return: The action_condition of this SalesRuleDataRuleInterface.
        :rtype: SalesRuleDataConditionInterface
        """
        return self._action_condition

    @action_condition.setter
    def action_condition(self, action_condition):
        """Sets the action_condition of this SalesRuleDataRuleInterface.


        :param action_condition: The action_condition of this SalesRuleDataRuleInterface.
        :type action_condition: SalesRuleDataConditionInterface
        """

        self._action_condition = action_condition

    @property
    def apply_to_shipping(self):
        """Gets the apply_to_shipping of this SalesRuleDataRuleInterface.

        The rule applies to shipping

        :return: The apply_to_shipping of this SalesRuleDataRuleInterface.
        :rtype: bool
        """
        return self._apply_to_shipping

    @apply_to_shipping.setter
    def apply_to_shipping(self, apply_to_shipping):
        """Sets the apply_to_shipping of this SalesRuleDataRuleInterface.

        The rule applies to shipping

        :param apply_to_shipping: The apply_to_shipping of this SalesRuleDataRuleInterface.
        :type apply_to_shipping: bool
        """
        if apply_to_shipping is None:
            raise ValueError("Invalid value for `apply_to_shipping`, must not be `None`")

        self._apply_to_shipping = apply_to_shipping

    @property
    def condition(self):
        """Gets the condition of this SalesRuleDataRuleInterface.


        :return: The condition of this SalesRuleDataRuleInterface.
        :rtype: SalesRuleDataConditionInterface
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this SalesRuleDataRuleInterface.


        :param condition: The condition of this SalesRuleDataRuleInterface.
        :type condition: SalesRuleDataConditionInterface
        """

        self._condition = condition

    @property
    def coupon_type(self):
        """Gets the coupon_type of this SalesRuleDataRuleInterface.

        Coupon type

        :return: The coupon_type of this SalesRuleDataRuleInterface.
        :rtype: str
        """
        return self._coupon_type

    @coupon_type.setter
    def coupon_type(self, coupon_type):
        """Sets the coupon_type of this SalesRuleDataRuleInterface.

        Coupon type

        :param coupon_type: The coupon_type of this SalesRuleDataRuleInterface.
        :type coupon_type: str
        """
        if coupon_type is None:
            raise ValueError("Invalid value for `coupon_type`, must not be `None`")

        self._coupon_type = coupon_type

    @property
    def customer_group_ids(self):
        """Gets the customer_group_ids of this SalesRuleDataRuleInterface.

        Ids of customer groups that the rule applies to

        :return: The customer_group_ids of this SalesRuleDataRuleInterface.
        :rtype: List[int]
        """
        return self._customer_group_ids

    @customer_group_ids.setter
    def customer_group_ids(self, customer_group_ids):
        """Sets the customer_group_ids of this SalesRuleDataRuleInterface.

        Ids of customer groups that the rule applies to

        :param customer_group_ids: The customer_group_ids of this SalesRuleDataRuleInterface.
        :type customer_group_ids: List[int]
        """
        if customer_group_ids is None:
            raise ValueError("Invalid value for `customer_group_ids`, must not be `None`")

        self._customer_group_ids = customer_group_ids

    @property
    def description(self):
        """Gets the description of this SalesRuleDataRuleInterface.

        Description

        :return: The description of this SalesRuleDataRuleInterface.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SalesRuleDataRuleInterface.

        Description

        :param description: The description of this SalesRuleDataRuleInterface.
        :type description: str
        """

        self._description = description

    @property
    def discount_amount(self):
        """Gets the discount_amount of this SalesRuleDataRuleInterface.

        Discount amount

        :return: The discount_amount of this SalesRuleDataRuleInterface.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this SalesRuleDataRuleInterface.

        Discount amount

        :param discount_amount: The discount_amount of this SalesRuleDataRuleInterface.
        :type discount_amount: float
        """
        if discount_amount is None:
            raise ValueError("Invalid value for `discount_amount`, must not be `None`")

        self._discount_amount = discount_amount

    @property
    def discount_qty(self):
        """Gets the discount_qty of this SalesRuleDataRuleInterface.

        Maximum qty discount is applied

        :return: The discount_qty of this SalesRuleDataRuleInterface.
        :rtype: float
        """
        return self._discount_qty

    @discount_qty.setter
    def discount_qty(self, discount_qty):
        """Sets the discount_qty of this SalesRuleDataRuleInterface.

        Maximum qty discount is applied

        :param discount_qty: The discount_qty of this SalesRuleDataRuleInterface.
        :type discount_qty: float
        """

        self._discount_qty = discount_qty

    @property
    def discount_step(self):
        """Gets the discount_step of this SalesRuleDataRuleInterface.

        Discount step

        :return: The discount_step of this SalesRuleDataRuleInterface.
        :rtype: int
        """
        return self._discount_step

    @discount_step.setter
    def discount_step(self, discount_step):
        """Sets the discount_step of this SalesRuleDataRuleInterface.

        Discount step

        :param discount_step: The discount_step of this SalesRuleDataRuleInterface.
        :type discount_step: int
        """
        if discount_step is None:
            raise ValueError("Invalid value for `discount_step`, must not be `None`")

        self._discount_step = discount_step

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this SalesRuleDataRuleInterface.


        :return: The extension_attributes of this SalesRuleDataRuleInterface.
        :rtype: SalesRuleDataRuleExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this SalesRuleDataRuleInterface.


        :param extension_attributes: The extension_attributes of this SalesRuleDataRuleInterface.
        :type extension_attributes: SalesRuleDataRuleExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def from_date(self):
        """Gets the from_date of this SalesRuleDataRuleInterface.

        The start date when the coupon is active

        :return: The from_date of this SalesRuleDataRuleInterface.
        :rtype: str
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this SalesRuleDataRuleInterface.

        The start date when the coupon is active

        :param from_date: The from_date of this SalesRuleDataRuleInterface.
        :type from_date: str
        """

        self._from_date = from_date

    @property
    def is_active(self):
        """Gets the is_active of this SalesRuleDataRuleInterface.

        The coupon is active

        :return: The is_active of this SalesRuleDataRuleInterface.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SalesRuleDataRuleInterface.

        The coupon is active

        :param is_active: The is_active of this SalesRuleDataRuleInterface.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_advanced(self):
        """Gets the is_advanced of this SalesRuleDataRuleInterface.

        Is this field needed

        :return: The is_advanced of this SalesRuleDataRuleInterface.
        :rtype: bool
        """
        return self._is_advanced

    @is_advanced.setter
    def is_advanced(self, is_advanced):
        """Sets the is_advanced of this SalesRuleDataRuleInterface.

        Is this field needed

        :param is_advanced: The is_advanced of this SalesRuleDataRuleInterface.
        :type is_advanced: bool
        """
        if is_advanced is None:
            raise ValueError("Invalid value for `is_advanced`, must not be `None`")

        self._is_advanced = is_advanced

    @property
    def is_rss(self):
        """Gets the is_rss of this SalesRuleDataRuleInterface.

        Whether the rule is in RSS

        :return: The is_rss of this SalesRuleDataRuleInterface.
        :rtype: bool
        """
        return self._is_rss

    @is_rss.setter
    def is_rss(self, is_rss):
        """Sets the is_rss of this SalesRuleDataRuleInterface.

        Whether the rule is in RSS

        :param is_rss: The is_rss of this SalesRuleDataRuleInterface.
        :type is_rss: bool
        """
        if is_rss is None:
            raise ValueError("Invalid value for `is_rss`, must not be `None`")

        self._is_rss = is_rss

    @property
    def name(self):
        """Gets the name of this SalesRuleDataRuleInterface.

        Rule name

        :return: The name of this SalesRuleDataRuleInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SalesRuleDataRuleInterface.

        Rule name

        :param name: The name of this SalesRuleDataRuleInterface.
        :type name: str
        """

        self._name = name

    @property
    def product_ids(self):
        """Gets the product_ids of this SalesRuleDataRuleInterface.

        Product ids

        :return: The product_ids of this SalesRuleDataRuleInterface.
        :rtype: List[int]
        """
        return self._product_ids

    @product_ids.setter
    def product_ids(self, product_ids):
        """Sets the product_ids of this SalesRuleDataRuleInterface.

        Product ids

        :param product_ids: The product_ids of this SalesRuleDataRuleInterface.
        :type product_ids: List[int]
        """

        self._product_ids = product_ids

    @property
    def rule_id(self):
        """Gets the rule_id of this SalesRuleDataRuleInterface.

        Rule id

        :return: The rule_id of this SalesRuleDataRuleInterface.
        :rtype: int
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this SalesRuleDataRuleInterface.

        Rule id

        :param rule_id: The rule_id of this SalesRuleDataRuleInterface.
        :type rule_id: int
        """

        self._rule_id = rule_id

    @property
    def simple_action(self):
        """Gets the simple_action of this SalesRuleDataRuleInterface.

        Simple action of the rule

        :return: The simple_action of this SalesRuleDataRuleInterface.
        :rtype: str
        """
        return self._simple_action

    @simple_action.setter
    def simple_action(self, simple_action):
        """Sets the simple_action of this SalesRuleDataRuleInterface.

        Simple action of the rule

        :param simple_action: The simple_action of this SalesRuleDataRuleInterface.
        :type simple_action: str
        """

        self._simple_action = simple_action

    @property
    def simple_free_shipping(self):
        """Gets the simple_free_shipping of this SalesRuleDataRuleInterface.

        To grant free shipping

        :return: The simple_free_shipping of this SalesRuleDataRuleInterface.
        :rtype: str
        """
        return self._simple_free_shipping

    @simple_free_shipping.setter
    def simple_free_shipping(self, simple_free_shipping):
        """Sets the simple_free_shipping of this SalesRuleDataRuleInterface.

        To grant free shipping

        :param simple_free_shipping: The simple_free_shipping of this SalesRuleDataRuleInterface.
        :type simple_free_shipping: str
        """

        self._simple_free_shipping = simple_free_shipping

    @property
    def sort_order(self):
        """Gets the sort_order of this SalesRuleDataRuleInterface.

        Sort order

        :return: The sort_order of this SalesRuleDataRuleInterface.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SalesRuleDataRuleInterface.

        Sort order

        :param sort_order: The sort_order of this SalesRuleDataRuleInterface.
        :type sort_order: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")

        self._sort_order = sort_order

    @property
    def stop_rules_processing(self):
        """Gets the stop_rules_processing of this SalesRuleDataRuleInterface.

        To stop rule processing

        :return: The stop_rules_processing of this SalesRuleDataRuleInterface.
        :rtype: bool
        """
        return self._stop_rules_processing

    @stop_rules_processing.setter
    def stop_rules_processing(self, stop_rules_processing):
        """Sets the stop_rules_processing of this SalesRuleDataRuleInterface.

        To stop rule processing

        :param stop_rules_processing: The stop_rules_processing of this SalesRuleDataRuleInterface.
        :type stop_rules_processing: bool
        """
        if stop_rules_processing is None:
            raise ValueError("Invalid value for `stop_rules_processing`, must not be `None`")

        self._stop_rules_processing = stop_rules_processing

    @property
    def store_labels(self):
        """Gets the store_labels of this SalesRuleDataRuleInterface.

        Display label

        :return: The store_labels of this SalesRuleDataRuleInterface.
        :rtype: List[SalesRuleDataRuleLabelInterface]
        """
        return self._store_labels

    @store_labels.setter
    def store_labels(self, store_labels):
        """Sets the store_labels of this SalesRuleDataRuleInterface.

        Display label

        :param store_labels: The store_labels of this SalesRuleDataRuleInterface.
        :type store_labels: List[SalesRuleDataRuleLabelInterface]
        """

        self._store_labels = store_labels

    @property
    def times_used(self):
        """Gets the times_used of this SalesRuleDataRuleInterface.

        How many times the rule has been used

        :return: The times_used of this SalesRuleDataRuleInterface.
        :rtype: int
        """
        return self._times_used

    @times_used.setter
    def times_used(self, times_used):
        """Sets the times_used of this SalesRuleDataRuleInterface.

        How many times the rule has been used

        :param times_used: The times_used of this SalesRuleDataRuleInterface.
        :type times_used: int
        """
        if times_used is None:
            raise ValueError("Invalid value for `times_used`, must not be `None`")

        self._times_used = times_used

    @property
    def to_date(self):
        """Gets the to_date of this SalesRuleDataRuleInterface.

        The end date when the coupon is active

        :return: The to_date of this SalesRuleDataRuleInterface.
        :rtype: str
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this SalesRuleDataRuleInterface.

        The end date when the coupon is active

        :param to_date: The to_date of this SalesRuleDataRuleInterface.
        :type to_date: str
        """

        self._to_date = to_date

    @property
    def use_auto_generation(self):
        """Gets the use_auto_generation of this SalesRuleDataRuleInterface.

        To auto generate coupon

        :return: The use_auto_generation of this SalesRuleDataRuleInterface.
        :rtype: bool
        """
        return self._use_auto_generation

    @use_auto_generation.setter
    def use_auto_generation(self, use_auto_generation):
        """Sets the use_auto_generation of this SalesRuleDataRuleInterface.

        To auto generate coupon

        :param use_auto_generation: The use_auto_generation of this SalesRuleDataRuleInterface.
        :type use_auto_generation: bool
        """
        if use_auto_generation is None:
            raise ValueError("Invalid value for `use_auto_generation`, must not be `None`")

        self._use_auto_generation = use_auto_generation

    @property
    def uses_per_coupon(self):
        """Gets the uses_per_coupon of this SalesRuleDataRuleInterface.

        Limit of uses per coupon

        :return: The uses_per_coupon of this SalesRuleDataRuleInterface.
        :rtype: int
        """
        return self._uses_per_coupon

    @uses_per_coupon.setter
    def uses_per_coupon(self, uses_per_coupon):
        """Sets the uses_per_coupon of this SalesRuleDataRuleInterface.

        Limit of uses per coupon

        :param uses_per_coupon: The uses_per_coupon of this SalesRuleDataRuleInterface.
        :type uses_per_coupon: int
        """
        if uses_per_coupon is None:
            raise ValueError("Invalid value for `uses_per_coupon`, must not be `None`")

        self._uses_per_coupon = uses_per_coupon

    @property
    def uses_per_customer(self):
        """Gets the uses_per_customer of this SalesRuleDataRuleInterface.

        Number of uses per customer

        :return: The uses_per_customer of this SalesRuleDataRuleInterface.
        :rtype: int
        """
        return self._uses_per_customer

    @uses_per_customer.setter
    def uses_per_customer(self, uses_per_customer):
        """Sets the uses_per_customer of this SalesRuleDataRuleInterface.

        Number of uses per customer

        :param uses_per_customer: The uses_per_customer of this SalesRuleDataRuleInterface.
        :type uses_per_customer: int
        """
        if uses_per_customer is None:
            raise ValueError("Invalid value for `uses_per_customer`, must not be `None`")

        self._uses_per_customer = uses_per_customer

    @property
    def website_ids(self):
        """Gets the website_ids of this SalesRuleDataRuleInterface.

        A list of websites the rule applies to

        :return: The website_ids of this SalesRuleDataRuleInterface.
        :rtype: List[int]
        """
        return self._website_ids

    @website_ids.setter
    def website_ids(self, website_ids):
        """Sets the website_ids of this SalesRuleDataRuleInterface.

        A list of websites the rule applies to

        :param website_ids: The website_ids of this SalesRuleDataRuleInterface.
        :type website_ids: List[int]
        """
        if website_ids is None:
            raise ValueError("Invalid value for `website_ids`, must not be `None`")

        self._website_ids = website_ids
