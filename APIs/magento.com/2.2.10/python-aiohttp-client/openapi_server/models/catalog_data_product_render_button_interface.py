# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogDataProductRenderButtonInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension_attributes: object=None, post_data: str=None, required_options: bool=None, url: str=None):
        """CatalogDataProductRenderButtonInterface - a model defined in OpenAPI

        :param extension_attributes: The extension_attributes of this CatalogDataProductRenderButtonInterface.
        :param post_data: The post_data of this CatalogDataProductRenderButtonInterface.
        :param required_options: The required_options of this CatalogDataProductRenderButtonInterface.
        :param url: The url of this CatalogDataProductRenderButtonInterface.
        """
        self.openapi_types = {
            'extension_attributes': object,
            'post_data': str,
            'required_options': bool,
            'url': str
        }

        self.attribute_map = {
            'extension_attributes': 'extension_attributes',
            'post_data': 'post_data',
            'required_options': 'required_options',
            'url': 'url'
        }

        self._extension_attributes = extension_attributes
        self._post_data = post_data
        self._required_options = required_options
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataProductRenderButtonInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-product-render-button-interface of this CatalogDataProductRenderButtonInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CatalogDataProductRenderButtonInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\ButtonInterface

        :return: The extension_attributes of this CatalogDataProductRenderButtonInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CatalogDataProductRenderButtonInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\ButtonInterface

        :param extension_attributes: The extension_attributes of this CatalogDataProductRenderButtonInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def post_data(self):
        """Gets the post_data of this CatalogDataProductRenderButtonInterface.

        Post data

        :return: The post_data of this CatalogDataProductRenderButtonInterface.
        :rtype: str
        """
        return self._post_data

    @post_data.setter
    def post_data(self, post_data):
        """Sets the post_data of this CatalogDataProductRenderButtonInterface.

        Post data

        :param post_data: The post_data of this CatalogDataProductRenderButtonInterface.
        :type post_data: str
        """
        if post_data is None:
            raise ValueError("Invalid value for `post_data`, must not be `None`")

        self._post_data = post_data

    @property
    def required_options(self):
        """Gets the required_options of this CatalogDataProductRenderButtonInterface.

        Flag whether a product has options or not

        :return: The required_options of this CatalogDataProductRenderButtonInterface.
        :rtype: bool
        """
        return self._required_options

    @required_options.setter
    def required_options(self, required_options):
        """Sets the required_options of this CatalogDataProductRenderButtonInterface.

        Flag whether a product has options or not

        :param required_options: The required_options of this CatalogDataProductRenderButtonInterface.
        :type required_options: bool
        """
        if required_options is None:
            raise ValueError("Invalid value for `required_options`, must not be `None`")

        self._required_options = required_options

    @property
    def url(self):
        """Gets the url of this CatalogDataProductRenderButtonInterface.

        Url, needed to add product to cart

        :return: The url of this CatalogDataProductRenderButtonInterface.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CatalogDataProductRenderButtonInterface.

        Url, needed to add product to cart

        :param url: The url of this CatalogDataProductRenderButtonInterface.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
