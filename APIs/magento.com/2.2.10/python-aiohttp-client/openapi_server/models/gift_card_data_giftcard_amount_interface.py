# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GiftCardDataGiftcardAmountInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_id: int=None, extension_attributes: object=None, value: float=None, website_id: int=None, website_value: float=None):
        """GiftCardDataGiftcardAmountInterface - a model defined in OpenAPI

        :param attribute_id: The attribute_id of this GiftCardDataGiftcardAmountInterface.
        :param extension_attributes: The extension_attributes of this GiftCardDataGiftcardAmountInterface.
        :param value: The value of this GiftCardDataGiftcardAmountInterface.
        :param website_id: The website_id of this GiftCardDataGiftcardAmountInterface.
        :param website_value: The website_value of this GiftCardDataGiftcardAmountInterface.
        """
        self.openapi_types = {
            'attribute_id': int,
            'extension_attributes': object,
            'value': float,
            'website_id': int,
            'website_value': float
        }

        self.attribute_map = {
            'attribute_id': 'attribute_id',
            'extension_attributes': 'extension_attributes',
            'value': 'value',
            'website_id': 'website_id',
            'website_value': 'website_value'
        }

        self._attribute_id = attribute_id
        self._extension_attributes = extension_attributes
        self._value = value
        self._website_id = website_id
        self._website_value = website_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GiftCardDataGiftcardAmountInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The gift-card-data-giftcard-amount-interface of this GiftCardDataGiftcardAmountInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_id(self):
        """Gets the attribute_id of this GiftCardDataGiftcardAmountInterface.


        :return: The attribute_id of this GiftCardDataGiftcardAmountInterface.
        :rtype: int
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """Sets the attribute_id of this GiftCardDataGiftcardAmountInterface.


        :param attribute_id: The attribute_id of this GiftCardDataGiftcardAmountInterface.
        :type attribute_id: int
        """
        if attribute_id is None:
            raise ValueError("Invalid value for `attribute_id`, must not be `None`")

        self._attribute_id = attribute_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this GiftCardDataGiftcardAmountInterface.

        ExtensionInterface class for @see \\Magento\\GiftCard\\Api\\Data\\GiftcardAmountInterface

        :return: The extension_attributes of this GiftCardDataGiftcardAmountInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this GiftCardDataGiftcardAmountInterface.

        ExtensionInterface class for @see \\Magento\\GiftCard\\Api\\Data\\GiftcardAmountInterface

        :param extension_attributes: The extension_attributes of this GiftCardDataGiftcardAmountInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def value(self):
        """Gets the value of this GiftCardDataGiftcardAmountInterface.


        :return: The value of this GiftCardDataGiftcardAmountInterface.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GiftCardDataGiftcardAmountInterface.


        :param value: The value of this GiftCardDataGiftcardAmountInterface.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def website_id(self):
        """Gets the website_id of this GiftCardDataGiftcardAmountInterface.


        :return: The website_id of this GiftCardDataGiftcardAmountInterface.
        :rtype: int
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this GiftCardDataGiftcardAmountInterface.


        :param website_id: The website_id of this GiftCardDataGiftcardAmountInterface.
        :type website_id: int
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")

        self._website_id = website_id

    @property
    def website_value(self):
        """Gets the website_value of this GiftCardDataGiftcardAmountInterface.


        :return: The website_value of this GiftCardDataGiftcardAmountInterface.
        :rtype: float
        """
        return self._website_value

    @website_value.setter
    def website_value(self, website_value):
        """Sets the website_value of this GiftCardDataGiftcardAmountInterface.


        :param website_value: The website_value of this GiftCardDataGiftcardAmountInterface.
        :type website_value: float
        """
        if website_value is None:
            raise ValueError("Invalid value for `website_value`, must not be `None`")

        self._website_value = website_value
