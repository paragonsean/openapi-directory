# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StoreDataWebsiteInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, default_group_id: int=None, extension_attributes: object=None, id: int=None, name: str=None):
        """StoreDataWebsiteInterface - a model defined in OpenAPI

        :param code: The code of this StoreDataWebsiteInterface.
        :param default_group_id: The default_group_id of this StoreDataWebsiteInterface.
        :param extension_attributes: The extension_attributes of this StoreDataWebsiteInterface.
        :param id: The id of this StoreDataWebsiteInterface.
        :param name: The name of this StoreDataWebsiteInterface.
        """
        self.openapi_types = {
            'code': str,
            'default_group_id': int,
            'extension_attributes': object,
            'id': int,
            'name': str
        }

        self.attribute_map = {
            'code': 'code',
            'default_group_id': 'default_group_id',
            'extension_attributes': 'extension_attributes',
            'id': 'id',
            'name': 'name'
        }

        self._code = code
        self._default_group_id = default_group_id
        self._extension_attributes = extension_attributes
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreDataWebsiteInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The store-data-website-interface of this StoreDataWebsiteInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this StoreDataWebsiteInterface.


        :return: The code of this StoreDataWebsiteInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this StoreDataWebsiteInterface.


        :param code: The code of this StoreDataWebsiteInterface.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def default_group_id(self):
        """Gets the default_group_id of this StoreDataWebsiteInterface.


        :return: The default_group_id of this StoreDataWebsiteInterface.
        :rtype: int
        """
        return self._default_group_id

    @default_group_id.setter
    def default_group_id(self, default_group_id):
        """Sets the default_group_id of this StoreDataWebsiteInterface.


        :param default_group_id: The default_group_id of this StoreDataWebsiteInterface.
        :type default_group_id: int
        """
        if default_group_id is None:
            raise ValueError("Invalid value for `default_group_id`, must not be `None`")

        self._default_group_id = default_group_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this StoreDataWebsiteInterface.

        ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\WebsiteInterface

        :return: The extension_attributes of this StoreDataWebsiteInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this StoreDataWebsiteInterface.

        ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\WebsiteInterface

        :param extension_attributes: The extension_attributes of this StoreDataWebsiteInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def id(self):
        """Gets the id of this StoreDataWebsiteInterface.


        :return: The id of this StoreDataWebsiteInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoreDataWebsiteInterface.


        :param id: The id of this StoreDataWebsiteInterface.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this StoreDataWebsiteInterface.

        Website name

        :return: The name of this StoreDataWebsiteInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StoreDataWebsiteInterface.

        Website name

        :param name: The name of this StoreDataWebsiteInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
