# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_data_product_interface import CatalogDataProductInterface
from openapi_server import util


class CatalogProductRepositoryV1SavePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product: CatalogDataProductInterface=None, save_options: bool=None):
        """CatalogProductRepositoryV1SavePostRequest - a model defined in OpenAPI

        :param product: The product of this CatalogProductRepositoryV1SavePostRequest.
        :param save_options: The save_options of this CatalogProductRepositoryV1SavePostRequest.
        """
        self.openapi_types = {
            'product': CatalogDataProductInterface,
            'save_options': bool
        }

        self.attribute_map = {
            'product': 'product',
            'save_options': 'saveOptions'
        }

        self._product = product
        self._save_options = save_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogProductRepositoryV1SavePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalogProductRepositoryV1SavePost_request of this CatalogProductRepositoryV1SavePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product(self):
        """Gets the product of this CatalogProductRepositoryV1SavePostRequest.


        :return: The product of this CatalogProductRepositoryV1SavePostRequest.
        :rtype: CatalogDataProductInterface
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this CatalogProductRepositoryV1SavePostRequest.


        :param product: The product of this CatalogProductRepositoryV1SavePostRequest.
        :type product: CatalogDataProductInterface
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def save_options(self):
        """Gets the save_options of this CatalogProductRepositoryV1SavePostRequest.


        :return: The save_options of this CatalogProductRepositoryV1SavePostRequest.
        :rtype: bool
        """
        return self._save_options

    @save_options.setter
    def save_options(self, save_options):
        """Sets the save_options of this CatalogProductRepositoryV1SavePostRequest.


        :param save_options: The save_options of this CatalogProductRepositoryV1SavePostRequest.
        :type save_options: bool
        """

        self._save_options = save_options
