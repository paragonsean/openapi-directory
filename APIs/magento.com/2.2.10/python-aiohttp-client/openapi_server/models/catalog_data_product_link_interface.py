# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_data_product_link_extension_interface import CatalogDataProductLinkExtensionInterface
from openapi_server import util


class CatalogDataProductLinkInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension_attributes: CatalogDataProductLinkExtensionInterface=None, link_type: str=None, linked_product_sku: str=None, linked_product_type: str=None, position: int=None, sku: str=None):
        """CatalogDataProductLinkInterface - a model defined in OpenAPI

        :param extension_attributes: The extension_attributes of this CatalogDataProductLinkInterface.
        :param link_type: The link_type of this CatalogDataProductLinkInterface.
        :param linked_product_sku: The linked_product_sku of this CatalogDataProductLinkInterface.
        :param linked_product_type: The linked_product_type of this CatalogDataProductLinkInterface.
        :param position: The position of this CatalogDataProductLinkInterface.
        :param sku: The sku of this CatalogDataProductLinkInterface.
        """
        self.openapi_types = {
            'extension_attributes': CatalogDataProductLinkExtensionInterface,
            'link_type': str,
            'linked_product_sku': str,
            'linked_product_type': str,
            'position': int,
            'sku': str
        }

        self.attribute_map = {
            'extension_attributes': 'extension_attributes',
            'link_type': 'link_type',
            'linked_product_sku': 'linked_product_sku',
            'linked_product_type': 'linked_product_type',
            'position': 'position',
            'sku': 'sku'
        }

        self._extension_attributes = extension_attributes
        self._link_type = link_type
        self._linked_product_sku = linked_product_sku
        self._linked_product_type = linked_product_type
        self._position = position
        self._sku = sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataProductLinkInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-product-link-interface of this CatalogDataProductLinkInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CatalogDataProductLinkInterface.


        :return: The extension_attributes of this CatalogDataProductLinkInterface.
        :rtype: CatalogDataProductLinkExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CatalogDataProductLinkInterface.


        :param extension_attributes: The extension_attributes of this CatalogDataProductLinkInterface.
        :type extension_attributes: CatalogDataProductLinkExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def link_type(self):
        """Gets the link_type of this CatalogDataProductLinkInterface.

        Link type

        :return: The link_type of this CatalogDataProductLinkInterface.
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this CatalogDataProductLinkInterface.

        Link type

        :param link_type: The link_type of this CatalogDataProductLinkInterface.
        :type link_type: str
        """
        if link_type is None:
            raise ValueError("Invalid value for `link_type`, must not be `None`")

        self._link_type = link_type

    @property
    def linked_product_sku(self):
        """Gets the linked_product_sku of this CatalogDataProductLinkInterface.

        Linked product sku

        :return: The linked_product_sku of this CatalogDataProductLinkInterface.
        :rtype: str
        """
        return self._linked_product_sku

    @linked_product_sku.setter
    def linked_product_sku(self, linked_product_sku):
        """Sets the linked_product_sku of this CatalogDataProductLinkInterface.

        Linked product sku

        :param linked_product_sku: The linked_product_sku of this CatalogDataProductLinkInterface.
        :type linked_product_sku: str
        """
        if linked_product_sku is None:
            raise ValueError("Invalid value for `linked_product_sku`, must not be `None`")

        self._linked_product_sku = linked_product_sku

    @property
    def linked_product_type(self):
        """Gets the linked_product_type of this CatalogDataProductLinkInterface.

        Linked product type (simple, virtual, etc)

        :return: The linked_product_type of this CatalogDataProductLinkInterface.
        :rtype: str
        """
        return self._linked_product_type

    @linked_product_type.setter
    def linked_product_type(self, linked_product_type):
        """Sets the linked_product_type of this CatalogDataProductLinkInterface.

        Linked product type (simple, virtual, etc)

        :param linked_product_type: The linked_product_type of this CatalogDataProductLinkInterface.
        :type linked_product_type: str
        """
        if linked_product_type is None:
            raise ValueError("Invalid value for `linked_product_type`, must not be `None`")

        self._linked_product_type = linked_product_type

    @property
    def position(self):
        """Gets the position of this CatalogDataProductLinkInterface.

        Linked item position

        :return: The position of this CatalogDataProductLinkInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CatalogDataProductLinkInterface.

        Linked item position

        :param position: The position of this CatalogDataProductLinkInterface.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def sku(self):
        """Gets the sku of this CatalogDataProductLinkInterface.

        SKU

        :return: The sku of this CatalogDataProductLinkInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this CatalogDataProductLinkInterface.

        SKU

        :param sku: The sku of this CatalogDataProductLinkInterface.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku
