# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sales_data_order_interface import SalesDataOrderInterface
from openapi_server import util


class SalesOrderRepositoryV1SavePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity: SalesDataOrderInterface=None):
        """SalesOrderRepositoryV1SavePostRequest - a model defined in OpenAPI

        :param entity: The entity of this SalesOrderRepositoryV1SavePostRequest.
        """
        self.openapi_types = {
            'entity': SalesDataOrderInterface
        }

        self.attribute_map = {
            'entity': 'entity'
        }

        self._entity = entity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesOrderRepositoryV1SavePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The salesOrderRepositoryV1SavePost_request of this SalesOrderRepositoryV1SavePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity(self):
        """Gets the entity of this SalesOrderRepositoryV1SavePostRequest.


        :return: The entity of this SalesOrderRepositoryV1SavePostRequest.
        :rtype: SalesDataOrderInterface
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this SalesOrderRepositoryV1SavePostRequest.


        :param entity: The entity of this SalesOrderRepositoryV1SavePostRequest.
        :type entity: SalesDataOrderInterface
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")

        self._entity = entity
