# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_data_cost_interface import CatalogDataCostInterface
from openapi_server import util


class CatalogCostStorageV1UpdatePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, prices: List[CatalogDataCostInterface]=None):
        """CatalogCostStorageV1UpdatePostRequest - a model defined in OpenAPI

        :param prices: The prices of this CatalogCostStorageV1UpdatePostRequest.
        """
        self.openapi_types = {
            'prices': List[CatalogDataCostInterface]
        }

        self.attribute_map = {
            'prices': 'prices'
        }

        self._prices = prices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogCostStorageV1UpdatePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalogCostStorageV1UpdatePost_request of this CatalogCostStorageV1UpdatePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prices(self):
        """Gets the prices of this CatalogCostStorageV1UpdatePostRequest.


        :return: The prices of this CatalogCostStorageV1UpdatePostRequest.
        :rtype: List[CatalogDataCostInterface]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this CatalogCostStorageV1UpdatePostRequest.


        :param prices: The prices of this CatalogCostStorageV1UpdatePostRequest.
        :type prices: List[CatalogDataCostInterface]
        """
        if prices is None:
            raise ValueError("Invalid value for `prices`, must not be `None`")

        self._prices = prices
