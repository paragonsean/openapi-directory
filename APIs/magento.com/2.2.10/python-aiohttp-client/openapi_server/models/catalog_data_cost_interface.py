# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogDataCostInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: float=None, extension_attributes: object=None, sku: str=None, store_id: int=None):
        """CatalogDataCostInterface - a model defined in OpenAPI

        :param cost: The cost of this CatalogDataCostInterface.
        :param extension_attributes: The extension_attributes of this CatalogDataCostInterface.
        :param sku: The sku of this CatalogDataCostInterface.
        :param store_id: The store_id of this CatalogDataCostInterface.
        """
        self.openapi_types = {
            'cost': float,
            'extension_attributes': object,
            'sku': str,
            'store_id': int
        }

        self.attribute_map = {
            'cost': 'cost',
            'extension_attributes': 'extension_attributes',
            'sku': 'sku',
            'store_id': 'store_id'
        }

        self._cost = cost
        self._extension_attributes = extension_attributes
        self._sku = sku
        self._store_id = store_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataCostInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-cost-interface of this CatalogDataCostInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this CatalogDataCostInterface.

        Cost value.

        :return: The cost of this CatalogDataCostInterface.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this CatalogDataCostInterface.

        Cost value.

        :param cost: The cost of this CatalogDataCostInterface.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CatalogDataCostInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CostInterface

        :return: The extension_attributes of this CatalogDataCostInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CatalogDataCostInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CostInterface

        :param extension_attributes: The extension_attributes of this CatalogDataCostInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def sku(self):
        """Gets the sku of this CatalogDataCostInterface.

        SKU.

        :return: The sku of this CatalogDataCostInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this CatalogDataCostInterface.

        SKU.

        :param sku: The sku of this CatalogDataCostInterface.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def store_id(self):
        """Gets the store_id of this CatalogDataCostInterface.

        Store id.

        :return: The store_id of this CatalogDataCostInterface.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this CatalogDataCostInterface.

        Store id.

        :param store_id: The store_id of this CatalogDataCostInterface.
        :type store_id: int
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id
