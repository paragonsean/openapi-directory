# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BundleDataLinkInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_change_quantity: int=None, extension_attributes: object=None, id: str=None, is_default: bool=None, option_id: int=None, position: int=None, price: float=None, price_type: int=None, qty: float=None, sku: str=None):
        """BundleDataLinkInterface - a model defined in OpenAPI

        :param can_change_quantity: The can_change_quantity of this BundleDataLinkInterface.
        :param extension_attributes: The extension_attributes of this BundleDataLinkInterface.
        :param id: The id of this BundleDataLinkInterface.
        :param is_default: The is_default of this BundleDataLinkInterface.
        :param option_id: The option_id of this BundleDataLinkInterface.
        :param position: The position of this BundleDataLinkInterface.
        :param price: The price of this BundleDataLinkInterface.
        :param price_type: The price_type of this BundleDataLinkInterface.
        :param qty: The qty of this BundleDataLinkInterface.
        :param sku: The sku of this BundleDataLinkInterface.
        """
        self.openapi_types = {
            'can_change_quantity': int,
            'extension_attributes': object,
            'id': str,
            'is_default': bool,
            'option_id': int,
            'position': int,
            'price': float,
            'price_type': int,
            'qty': float,
            'sku': str
        }

        self.attribute_map = {
            'can_change_quantity': 'can_change_quantity',
            'extension_attributes': 'extension_attributes',
            'id': 'id',
            'is_default': 'is_default',
            'option_id': 'option_id',
            'position': 'position',
            'price': 'price',
            'price_type': 'price_type',
            'qty': 'qty',
            'sku': 'sku'
        }

        self._can_change_quantity = can_change_quantity
        self._extension_attributes = extension_attributes
        self._id = id
        self._is_default = is_default
        self._option_id = option_id
        self._position = position
        self._price = price
        self._price_type = price_type
        self._qty = qty
        self._sku = sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BundleDataLinkInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bundle-data-link-interface of this BundleDataLinkInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_change_quantity(self):
        """Gets the can_change_quantity of this BundleDataLinkInterface.

        Whether quantity could be changed

        :return: The can_change_quantity of this BundleDataLinkInterface.
        :rtype: int
        """
        return self._can_change_quantity

    @can_change_quantity.setter
    def can_change_quantity(self, can_change_quantity):
        """Sets the can_change_quantity of this BundleDataLinkInterface.

        Whether quantity could be changed

        :param can_change_quantity: The can_change_quantity of this BundleDataLinkInterface.
        :type can_change_quantity: int
        """

        self._can_change_quantity = can_change_quantity

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this BundleDataLinkInterface.

        ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\LinkInterface

        :return: The extension_attributes of this BundleDataLinkInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this BundleDataLinkInterface.

        ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\LinkInterface

        :param extension_attributes: The extension_attributes of this BundleDataLinkInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def id(self):
        """Gets the id of this BundleDataLinkInterface.

        The identifier

        :return: The id of this BundleDataLinkInterface.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BundleDataLinkInterface.

        The identifier

        :param id: The id of this BundleDataLinkInterface.
        :type id: str
        """

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this BundleDataLinkInterface.

        Is default

        :return: The is_default of this BundleDataLinkInterface.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this BundleDataLinkInterface.

        Is default

        :param is_default: The is_default of this BundleDataLinkInterface.
        :type is_default: bool
        """
        if is_default is None:
            raise ValueError("Invalid value for `is_default`, must not be `None`")

        self._is_default = is_default

    @property
    def option_id(self):
        """Gets the option_id of this BundleDataLinkInterface.

        Option id

        :return: The option_id of this BundleDataLinkInterface.
        :rtype: int
        """
        return self._option_id

    @option_id.setter
    def option_id(self, option_id):
        """Sets the option_id of this BundleDataLinkInterface.

        Option id

        :param option_id: The option_id of this BundleDataLinkInterface.
        :type option_id: int
        """

        self._option_id = option_id

    @property
    def position(self):
        """Gets the position of this BundleDataLinkInterface.

        Position

        :return: The position of this BundleDataLinkInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this BundleDataLinkInterface.

        Position

        :param position: The position of this BundleDataLinkInterface.
        :type position: int
        """

        self._position = position

    @property
    def price(self):
        """Gets the price of this BundleDataLinkInterface.

        Price

        :return: The price of this BundleDataLinkInterface.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BundleDataLinkInterface.

        Price

        :param price: The price of this BundleDataLinkInterface.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def price_type(self):
        """Gets the price_type of this BundleDataLinkInterface.

        Price type

        :return: The price_type of this BundleDataLinkInterface.
        :rtype: int
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this BundleDataLinkInterface.

        Price type

        :param price_type: The price_type of this BundleDataLinkInterface.
        :type price_type: int
        """
        if price_type is None:
            raise ValueError("Invalid value for `price_type`, must not be `None`")

        self._price_type = price_type

    @property
    def qty(self):
        """Gets the qty of this BundleDataLinkInterface.

        Qty

        :return: The qty of this BundleDataLinkInterface.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this BundleDataLinkInterface.

        Qty

        :param qty: The qty of this BundleDataLinkInterface.
        :type qty: float
        """

        self._qty = qty

    @property
    def sku(self):
        """Gets the sku of this BundleDataLinkInterface.

        Linked product sku

        :return: The sku of this BundleDataLinkInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this BundleDataLinkInterface.

        Linked product sku

        :param sku: The sku of this BundleDataLinkInterface.
        :type sku: str
        """

        self._sku = sku
