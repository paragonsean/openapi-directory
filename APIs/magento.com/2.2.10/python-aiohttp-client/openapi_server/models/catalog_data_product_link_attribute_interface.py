# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogDataProductLinkAttributeInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, extension_attributes: object=None, type: str=None):
        """CatalogDataProductLinkAttributeInterface - a model defined in OpenAPI

        :param code: The code of this CatalogDataProductLinkAttributeInterface.
        :param extension_attributes: The extension_attributes of this CatalogDataProductLinkAttributeInterface.
        :param type: The type of this CatalogDataProductLinkAttributeInterface.
        """
        self.openapi_types = {
            'code': str,
            'extension_attributes': object,
            'type': str
        }

        self.attribute_map = {
            'code': 'code',
            'extension_attributes': 'extension_attributes',
            'type': 'type'
        }

        self._code = code
        self._extension_attributes = extension_attributes
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataProductLinkAttributeInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-product-link-attribute-interface of this CatalogDataProductLinkAttributeInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this CatalogDataProductLinkAttributeInterface.

        Attribute code

        :return: The code of this CatalogDataProductLinkAttributeInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CatalogDataProductLinkAttributeInterface.

        Attribute code

        :param code: The code of this CatalogDataProductLinkAttributeInterface.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CatalogDataProductLinkAttributeInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductLinkAttributeInterface

        :return: The extension_attributes of this CatalogDataProductLinkAttributeInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CatalogDataProductLinkAttributeInterface.

        ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductLinkAttributeInterface

        :param extension_attributes: The extension_attributes of this CatalogDataProductLinkAttributeInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def type(self):
        """Gets the type of this CatalogDataProductLinkAttributeInterface.

        Attribute type

        :return: The type of this CatalogDataProductLinkAttributeInterface.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CatalogDataProductLinkAttributeInterface.

        Attribute type

        :param type: The type of this CatalogDataProductLinkAttributeInterface.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
