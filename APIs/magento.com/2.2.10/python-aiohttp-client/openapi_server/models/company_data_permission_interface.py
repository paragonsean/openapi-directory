# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompanyDataPermissionInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, permission: str=None, resource_id: str=None, role_id: int=None):
        """CompanyDataPermissionInterface - a model defined in OpenAPI

        :param id: The id of this CompanyDataPermissionInterface.
        :param permission: The permission of this CompanyDataPermissionInterface.
        :param resource_id: The resource_id of this CompanyDataPermissionInterface.
        :param role_id: The role_id of this CompanyDataPermissionInterface.
        """
        self.openapi_types = {
            'id': int,
            'permission': str,
            'resource_id': str,
            'role_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'permission': 'permission',
            'resource_id': 'resource_id',
            'role_id': 'role_id'
        }

        self._id = id
        self._permission = permission
        self._resource_id = resource_id
        self._role_id = role_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyDataPermissionInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The company-data-permission-interface of this CompanyDataPermissionInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CompanyDataPermissionInterface.

        Id.

        :return: The id of this CompanyDataPermissionInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyDataPermissionInterface.

        Id.

        :param id: The id of this CompanyDataPermissionInterface.
        :type id: int
        """

        self._id = id

    @property
    def permission(self):
        """Gets the permission of this CompanyDataPermissionInterface.

        Permission.

        :return: The permission of this CompanyDataPermissionInterface.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this CompanyDataPermissionInterface.

        Permission.

        :param permission: The permission of this CompanyDataPermissionInterface.
        :type permission: str
        """
        if permission is None:
            raise ValueError("Invalid value for `permission`, must not be `None`")

        self._permission = permission

    @property
    def resource_id(self):
        """Gets the resource_id of this CompanyDataPermissionInterface.

        Resource id.

        :return: The resource_id of this CompanyDataPermissionInterface.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this CompanyDataPermissionInterface.

        Resource id.

        :param resource_id: The resource_id of this CompanyDataPermissionInterface.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def role_id(self):
        """Gets the role_id of this CompanyDataPermissionInterface.

        Role id.

        :return: The role_id of this CompanyDataPermissionInterface.
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this CompanyDataPermissionInterface.

        Role id.

        :param role_id: The role_id of this CompanyDataPermissionInterface.
        :type role_id: int
        """

        self._role_id = role_id
