# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerAccountManagementV1IsEmailAvailablePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_email: str=None, website_id: int=None):
        """CustomerAccountManagementV1IsEmailAvailablePostRequest - a model defined in OpenAPI

        :param customer_email: The customer_email of this CustomerAccountManagementV1IsEmailAvailablePostRequest.
        :param website_id: The website_id of this CustomerAccountManagementV1IsEmailAvailablePostRequest.
        """
        self.openapi_types = {
            'customer_email': str,
            'website_id': int
        }

        self.attribute_map = {
            'customer_email': 'customerEmail',
            'website_id': 'websiteId'
        }

        self._customer_email = customer_email
        self._website_id = website_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerAccountManagementV1IsEmailAvailablePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customerAccountManagementV1IsEmailAvailablePost_request of this CustomerAccountManagementV1IsEmailAvailablePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_email(self):
        """Gets the customer_email of this CustomerAccountManagementV1IsEmailAvailablePostRequest.


        :return: The customer_email of this CustomerAccountManagementV1IsEmailAvailablePostRequest.
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this CustomerAccountManagementV1IsEmailAvailablePostRequest.


        :param customer_email: The customer_email of this CustomerAccountManagementV1IsEmailAvailablePostRequest.
        :type customer_email: str
        """
        if customer_email is None:
            raise ValueError("Invalid value for `customer_email`, must not be `None`")

        self._customer_email = customer_email

    @property
    def website_id(self):
        """Gets the website_id of this CustomerAccountManagementV1IsEmailAvailablePostRequest.

        If not set, will use the current websiteId

        :return: The website_id of this CustomerAccountManagementV1IsEmailAvailablePostRequest.
        :rtype: int
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this CustomerAccountManagementV1IsEmailAvailablePostRequest.

        If not set, will use the current websiteId

        :param website_id: The website_id of this CustomerAccountManagementV1IsEmailAvailablePostRequest.
        :type website_id: int
        """

        self._website_id = website_id
