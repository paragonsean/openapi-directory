# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QuoteDataShippingMethodInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, available: bool=None, base_amount: float=None, carrier_code: str=None, carrier_title: str=None, error_message: str=None, extension_attributes: object=None, method_code: str=None, method_title: str=None, price_excl_tax: float=None, price_incl_tax: float=None):
        """QuoteDataShippingMethodInterface - a model defined in OpenAPI

        :param amount: The amount of this QuoteDataShippingMethodInterface.
        :param available: The available of this QuoteDataShippingMethodInterface.
        :param base_amount: The base_amount of this QuoteDataShippingMethodInterface.
        :param carrier_code: The carrier_code of this QuoteDataShippingMethodInterface.
        :param carrier_title: The carrier_title of this QuoteDataShippingMethodInterface.
        :param error_message: The error_message of this QuoteDataShippingMethodInterface.
        :param extension_attributes: The extension_attributes of this QuoteDataShippingMethodInterface.
        :param method_code: The method_code of this QuoteDataShippingMethodInterface.
        :param method_title: The method_title of this QuoteDataShippingMethodInterface.
        :param price_excl_tax: The price_excl_tax of this QuoteDataShippingMethodInterface.
        :param price_incl_tax: The price_incl_tax of this QuoteDataShippingMethodInterface.
        """
        self.openapi_types = {
            'amount': float,
            'available': bool,
            'base_amount': float,
            'carrier_code': str,
            'carrier_title': str,
            'error_message': str,
            'extension_attributes': object,
            'method_code': str,
            'method_title': str,
            'price_excl_tax': float,
            'price_incl_tax': float
        }

        self.attribute_map = {
            'amount': 'amount',
            'available': 'available',
            'base_amount': 'base_amount',
            'carrier_code': 'carrier_code',
            'carrier_title': 'carrier_title',
            'error_message': 'error_message',
            'extension_attributes': 'extension_attributes',
            'method_code': 'method_code',
            'method_title': 'method_title',
            'price_excl_tax': 'price_excl_tax',
            'price_incl_tax': 'price_incl_tax'
        }

        self._amount = amount
        self._available = available
        self._base_amount = base_amount
        self._carrier_code = carrier_code
        self._carrier_title = carrier_title
        self._error_message = error_message
        self._extension_attributes = extension_attributes
        self._method_code = method_code
        self._method_title = method_title
        self._price_excl_tax = price_excl_tax
        self._price_incl_tax = price_incl_tax

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuoteDataShippingMethodInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The quote-data-shipping-method-interface of this QuoteDataShippingMethodInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this QuoteDataShippingMethodInterface.

        Shipping amount in store currency.

        :return: The amount of this QuoteDataShippingMethodInterface.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this QuoteDataShippingMethodInterface.

        Shipping amount in store currency.

        :param amount: The amount of this QuoteDataShippingMethodInterface.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def available(self):
        """Gets the available of this QuoteDataShippingMethodInterface.

        The value of the availability flag for the current shipping method.

        :return: The available of this QuoteDataShippingMethodInterface.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this QuoteDataShippingMethodInterface.

        The value of the availability flag for the current shipping method.

        :param available: The available of this QuoteDataShippingMethodInterface.
        :type available: bool
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")

        self._available = available

    @property
    def base_amount(self):
        """Gets the base_amount of this QuoteDataShippingMethodInterface.

        Shipping amount in base currency.

        :return: The base_amount of this QuoteDataShippingMethodInterface.
        :rtype: float
        """
        return self._base_amount

    @base_amount.setter
    def base_amount(self, base_amount):
        """Sets the base_amount of this QuoteDataShippingMethodInterface.

        Shipping amount in base currency.

        :param base_amount: The base_amount of this QuoteDataShippingMethodInterface.
        :type base_amount: float
        """
        if base_amount is None:
            raise ValueError("Invalid value for `base_amount`, must not be `None`")

        self._base_amount = base_amount

    @property
    def carrier_code(self):
        """Gets the carrier_code of this QuoteDataShippingMethodInterface.

        Shipping carrier code.

        :return: The carrier_code of this QuoteDataShippingMethodInterface.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this QuoteDataShippingMethodInterface.

        Shipping carrier code.

        :param carrier_code: The carrier_code of this QuoteDataShippingMethodInterface.
        :type carrier_code: str
        """
        if carrier_code is None:
            raise ValueError("Invalid value for `carrier_code`, must not be `None`")

        self._carrier_code = carrier_code

    @property
    def carrier_title(self):
        """Gets the carrier_title of this QuoteDataShippingMethodInterface.

        Shipping carrier title. Otherwise, null.

        :return: The carrier_title of this QuoteDataShippingMethodInterface.
        :rtype: str
        """
        return self._carrier_title

    @carrier_title.setter
    def carrier_title(self, carrier_title):
        """Sets the carrier_title of this QuoteDataShippingMethodInterface.

        Shipping carrier title. Otherwise, null.

        :param carrier_title: The carrier_title of this QuoteDataShippingMethodInterface.
        :type carrier_title: str
        """

        self._carrier_title = carrier_title

    @property
    def error_message(self):
        """Gets the error_message of this QuoteDataShippingMethodInterface.

        Shipping Error message.

        :return: The error_message of this QuoteDataShippingMethodInterface.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this QuoteDataShippingMethodInterface.

        Shipping Error message.

        :param error_message: The error_message of this QuoteDataShippingMethodInterface.
        :type error_message: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")

        self._error_message = error_message

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this QuoteDataShippingMethodInterface.

        ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingMethodInterface

        :return: The extension_attributes of this QuoteDataShippingMethodInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this QuoteDataShippingMethodInterface.

        ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingMethodInterface

        :param extension_attributes: The extension_attributes of this QuoteDataShippingMethodInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def method_code(self):
        """Gets the method_code of this QuoteDataShippingMethodInterface.

        Shipping method code.

        :return: The method_code of this QuoteDataShippingMethodInterface.
        :rtype: str
        """
        return self._method_code

    @method_code.setter
    def method_code(self, method_code):
        """Sets the method_code of this QuoteDataShippingMethodInterface.

        Shipping method code.

        :param method_code: The method_code of this QuoteDataShippingMethodInterface.
        :type method_code: str
        """
        if method_code is None:
            raise ValueError("Invalid value for `method_code`, must not be `None`")

        self._method_code = method_code

    @property
    def method_title(self):
        """Gets the method_title of this QuoteDataShippingMethodInterface.

        Shipping method title. Otherwise, null.

        :return: The method_title of this QuoteDataShippingMethodInterface.
        :rtype: str
        """
        return self._method_title

    @method_title.setter
    def method_title(self, method_title):
        """Sets the method_title of this QuoteDataShippingMethodInterface.

        Shipping method title. Otherwise, null.

        :param method_title: The method_title of this QuoteDataShippingMethodInterface.
        :type method_title: str
        """

        self._method_title = method_title

    @property
    def price_excl_tax(self):
        """Gets the price_excl_tax of this QuoteDataShippingMethodInterface.

        Shipping price excl tax.

        :return: The price_excl_tax of this QuoteDataShippingMethodInterface.
        :rtype: float
        """
        return self._price_excl_tax

    @price_excl_tax.setter
    def price_excl_tax(self, price_excl_tax):
        """Sets the price_excl_tax of this QuoteDataShippingMethodInterface.

        Shipping price excl tax.

        :param price_excl_tax: The price_excl_tax of this QuoteDataShippingMethodInterface.
        :type price_excl_tax: float
        """
        if price_excl_tax is None:
            raise ValueError("Invalid value for `price_excl_tax`, must not be `None`")

        self._price_excl_tax = price_excl_tax

    @property
    def price_incl_tax(self):
        """Gets the price_incl_tax of this QuoteDataShippingMethodInterface.

        Shipping price incl tax.

        :return: The price_incl_tax of this QuoteDataShippingMethodInterface.
        :rtype: float
        """
        return self._price_incl_tax

    @price_incl_tax.setter
    def price_incl_tax(self, price_incl_tax):
        """Sets the price_incl_tax of this QuoteDataShippingMethodInterface.

        Shipping price incl tax.

        :param price_incl_tax: The price_incl_tax of this QuoteDataShippingMethodInterface.
        :type price_incl_tax: float
        """
        if price_incl_tax is None:
            raise ValueError("Invalid value for `price_incl_tax`, must not be `None`")

        self._price_incl_tax = price_incl_tax
