# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerDataRegionInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension_attributes: object=None, region: str=None, region_code: str=None, region_id: int=None):
        """CustomerDataRegionInterface - a model defined in OpenAPI

        :param extension_attributes: The extension_attributes of this CustomerDataRegionInterface.
        :param region: The region of this CustomerDataRegionInterface.
        :param region_code: The region_code of this CustomerDataRegionInterface.
        :param region_id: The region_id of this CustomerDataRegionInterface.
        """
        self.openapi_types = {
            'extension_attributes': object,
            'region': str,
            'region_code': str,
            'region_id': int
        }

        self.attribute_map = {
            'extension_attributes': 'extension_attributes',
            'region': 'region',
            'region_code': 'region_code',
            'region_id': 'region_id'
        }

        self._extension_attributes = extension_attributes
        self._region = region
        self._region_code = region_code
        self._region_id = region_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerDataRegionInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customer-data-region-interface of this CustomerDataRegionInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CustomerDataRegionInterface.

        ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\RegionInterface

        :return: The extension_attributes of this CustomerDataRegionInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CustomerDataRegionInterface.

        ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\RegionInterface

        :param extension_attributes: The extension_attributes of this CustomerDataRegionInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def region(self):
        """Gets the region of this CustomerDataRegionInterface.

        Region

        :return: The region of this CustomerDataRegionInterface.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CustomerDataRegionInterface.

        Region

        :param region: The region of this CustomerDataRegionInterface.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def region_code(self):
        """Gets the region_code of this CustomerDataRegionInterface.

        Region code

        :return: The region_code of this CustomerDataRegionInterface.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this CustomerDataRegionInterface.

        Region code

        :param region_code: The region_code of this CustomerDataRegionInterface.
        :type region_code: str
        """
        if region_code is None:
            raise ValueError("Invalid value for `region_code`, must not be `None`")

        self._region_code = region_code

    @property
    def region_id(self):
        """Gets the region_id of this CustomerDataRegionInterface.

        Region id

        :return: The region_id of this CustomerDataRegionInterface.
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this CustomerDataRegionInterface.

        Region id

        :param region_id: The region_id of this CustomerDataRegionInterface.
        :type region_id: int
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")

        self._region_id = region_id
