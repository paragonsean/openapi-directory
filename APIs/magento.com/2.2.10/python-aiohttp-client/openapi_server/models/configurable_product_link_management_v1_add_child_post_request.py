# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigurableProductLinkManagementV1AddChildPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_sku: str=None):
        """ConfigurableProductLinkManagementV1AddChildPostRequest - a model defined in OpenAPI

        :param child_sku: The child_sku of this ConfigurableProductLinkManagementV1AddChildPostRequest.
        """
        self.openapi_types = {
            'child_sku': str
        }

        self.attribute_map = {
            'child_sku': 'childSku'
        }

        self._child_sku = child_sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigurableProductLinkManagementV1AddChildPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The configurableProductLinkManagementV1AddChildPost_request of this ConfigurableProductLinkManagementV1AddChildPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_sku(self):
        """Gets the child_sku of this ConfigurableProductLinkManagementV1AddChildPostRequest.


        :return: The child_sku of this ConfigurableProductLinkManagementV1AddChildPostRequest.
        :rtype: str
        """
        return self._child_sku

    @child_sku.setter
    def child_sku(self, child_sku):
        """Sets the child_sku of this ConfigurableProductLinkManagementV1AddChildPostRequest.


        :param child_sku: The child_sku of this ConfigurableProductLinkManagementV1AddChildPostRequest.
        :type child_sku: str
        """
        if child_sku is None:
            raise ValueError("Invalid value for `child_sku`, must not be `None`")

        self._child_sku = child_sku
