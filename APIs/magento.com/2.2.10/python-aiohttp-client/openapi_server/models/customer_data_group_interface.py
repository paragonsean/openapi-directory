# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerDataGroupInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, extension_attributes: object=None, id: int=None, tax_class_id: int=None, tax_class_name: str=None):
        """CustomerDataGroupInterface - a model defined in OpenAPI

        :param code: The code of this CustomerDataGroupInterface.
        :param extension_attributes: The extension_attributes of this CustomerDataGroupInterface.
        :param id: The id of this CustomerDataGroupInterface.
        :param tax_class_id: The tax_class_id of this CustomerDataGroupInterface.
        :param tax_class_name: The tax_class_name of this CustomerDataGroupInterface.
        """
        self.openapi_types = {
            'code': str,
            'extension_attributes': object,
            'id': int,
            'tax_class_id': int,
            'tax_class_name': str
        }

        self.attribute_map = {
            'code': 'code',
            'extension_attributes': 'extension_attributes',
            'id': 'id',
            'tax_class_id': 'tax_class_id',
            'tax_class_name': 'tax_class_name'
        }

        self._code = code
        self._extension_attributes = extension_attributes
        self._id = id
        self._tax_class_id = tax_class_id
        self._tax_class_name = tax_class_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerDataGroupInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customer-data-group-interface of this CustomerDataGroupInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this CustomerDataGroupInterface.

        Code

        :return: The code of this CustomerDataGroupInterface.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CustomerDataGroupInterface.

        Code

        :param code: The code of this CustomerDataGroupInterface.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CustomerDataGroupInterface.

        ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\GroupInterface

        :return: The extension_attributes of this CustomerDataGroupInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CustomerDataGroupInterface.

        ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\GroupInterface

        :param extension_attributes: The extension_attributes of this CustomerDataGroupInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def id(self):
        """Gets the id of this CustomerDataGroupInterface.

        Id

        :return: The id of this CustomerDataGroupInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerDataGroupInterface.

        Id

        :param id: The id of this CustomerDataGroupInterface.
        :type id: int
        """

        self._id = id

    @property
    def tax_class_id(self):
        """Gets the tax_class_id of this CustomerDataGroupInterface.

        Tax class id

        :return: The tax_class_id of this CustomerDataGroupInterface.
        :rtype: int
        """
        return self._tax_class_id

    @tax_class_id.setter
    def tax_class_id(self, tax_class_id):
        """Sets the tax_class_id of this CustomerDataGroupInterface.

        Tax class id

        :param tax_class_id: The tax_class_id of this CustomerDataGroupInterface.
        :type tax_class_id: int
        """
        if tax_class_id is None:
            raise ValueError("Invalid value for `tax_class_id`, must not be `None`")

        self._tax_class_id = tax_class_id

    @property
    def tax_class_name(self):
        """Gets the tax_class_name of this CustomerDataGroupInterface.

        Tax class name

        :return: The tax_class_name of this CustomerDataGroupInterface.
        :rtype: str
        """
        return self._tax_class_name

    @tax_class_name.setter
    def tax_class_name(self, tax_class_name):
        """Sets the tax_class_name of this CustomerDataGroupInterface.

        Tax class name

        :param tax_class_name: The tax_class_name of this CustomerDataGroupInterface.
        :type tax_class_name: str
        """

        self._tax_class_name = tax_class_name
