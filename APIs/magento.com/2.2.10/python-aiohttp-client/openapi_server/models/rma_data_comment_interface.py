# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.framework_attribute_interface import FrameworkAttributeInterface
from openapi_server import util


class RmaDataCommentInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin: bool=None, comment: str=None, created_at: str=None, custom_attributes: List[FrameworkAttributeInterface]=None, customer_notified: bool=None, entity_id: int=None, extension_attributes: object=None, rma_entity_id: int=None, status: str=None, visible_on_front: bool=None):
        """RmaDataCommentInterface - a model defined in OpenAPI

        :param admin: The admin of this RmaDataCommentInterface.
        :param comment: The comment of this RmaDataCommentInterface.
        :param created_at: The created_at of this RmaDataCommentInterface.
        :param custom_attributes: The custom_attributes of this RmaDataCommentInterface.
        :param customer_notified: The customer_notified of this RmaDataCommentInterface.
        :param entity_id: The entity_id of this RmaDataCommentInterface.
        :param extension_attributes: The extension_attributes of this RmaDataCommentInterface.
        :param rma_entity_id: The rma_entity_id of this RmaDataCommentInterface.
        :param status: The status of this RmaDataCommentInterface.
        :param visible_on_front: The visible_on_front of this RmaDataCommentInterface.
        """
        self.openapi_types = {
            'admin': bool,
            'comment': str,
            'created_at': str,
            'custom_attributes': List[FrameworkAttributeInterface],
            'customer_notified': bool,
            'entity_id': int,
            'extension_attributes': object,
            'rma_entity_id': int,
            'status': str,
            'visible_on_front': bool
        }

        self.attribute_map = {
            'admin': 'admin',
            'comment': 'comment',
            'created_at': 'created_at',
            'custom_attributes': 'custom_attributes',
            'customer_notified': 'customer_notified',
            'entity_id': 'entity_id',
            'extension_attributes': 'extension_attributes',
            'rma_entity_id': 'rma_entity_id',
            'status': 'status',
            'visible_on_front': 'visible_on_front'
        }

        self._admin = admin
        self._comment = comment
        self._created_at = created_at
        self._custom_attributes = custom_attributes
        self._customer_notified = customer_notified
        self._entity_id = entity_id
        self._extension_attributes = extension_attributes
        self._rma_entity_id = rma_entity_id
        self._status = status
        self._visible_on_front = visible_on_front

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RmaDataCommentInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rma-data-comment-interface of this RmaDataCommentInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin(self):
        """Gets the admin of this RmaDataCommentInterface.

        Is_admin

        :return: The admin of this RmaDataCommentInterface.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this RmaDataCommentInterface.

        Is_admin

        :param admin: The admin of this RmaDataCommentInterface.
        :type admin: bool
        """
        if admin is None:
            raise ValueError("Invalid value for `admin`, must not be `None`")

        self._admin = admin

    @property
    def comment(self):
        """Gets the comment of this RmaDataCommentInterface.

        Comment

        :return: The comment of this RmaDataCommentInterface.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this RmaDataCommentInterface.

        Comment

        :param comment: The comment of this RmaDataCommentInterface.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this RmaDataCommentInterface.

        Created_at

        :return: The created_at of this RmaDataCommentInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RmaDataCommentInterface.

        Created_at

        :param created_at: The created_at of this RmaDataCommentInterface.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this RmaDataCommentInterface.

        Custom attributes values.

        :return: The custom_attributes of this RmaDataCommentInterface.
        :rtype: List[FrameworkAttributeInterface]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this RmaDataCommentInterface.

        Custom attributes values.

        :param custom_attributes: The custom_attributes of this RmaDataCommentInterface.
        :type custom_attributes: List[FrameworkAttributeInterface]
        """

        self._custom_attributes = custom_attributes

    @property
    def customer_notified(self):
        """Gets the customer_notified of this RmaDataCommentInterface.

        Is_customer_notified

        :return: The customer_notified of this RmaDataCommentInterface.
        :rtype: bool
        """
        return self._customer_notified

    @customer_notified.setter
    def customer_notified(self, customer_notified):
        """Sets the customer_notified of this RmaDataCommentInterface.

        Is_customer_notified

        :param customer_notified: The customer_notified of this RmaDataCommentInterface.
        :type customer_notified: bool
        """
        if customer_notified is None:
            raise ValueError("Invalid value for `customer_notified`, must not be `None`")

        self._customer_notified = customer_notified

    @property
    def entity_id(self):
        """Gets the entity_id of this RmaDataCommentInterface.

        Entity_id

        :return: The entity_id of this RmaDataCommentInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this RmaDataCommentInterface.

        Entity_id

        :param entity_id: The entity_id of this RmaDataCommentInterface.
        :type entity_id: int
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this RmaDataCommentInterface.

        ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\CommentInterface

        :return: The extension_attributes of this RmaDataCommentInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this RmaDataCommentInterface.

        ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\CommentInterface

        :param extension_attributes: The extension_attributes of this RmaDataCommentInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def rma_entity_id(self):
        """Gets the rma_entity_id of this RmaDataCommentInterface.

        Rma Id

        :return: The rma_entity_id of this RmaDataCommentInterface.
        :rtype: int
        """
        return self._rma_entity_id

    @rma_entity_id.setter
    def rma_entity_id(self, rma_entity_id):
        """Sets the rma_entity_id of this RmaDataCommentInterface.

        Rma Id

        :param rma_entity_id: The rma_entity_id of this RmaDataCommentInterface.
        :type rma_entity_id: int
        """
        if rma_entity_id is None:
            raise ValueError("Invalid value for `rma_entity_id`, must not be `None`")

        self._rma_entity_id = rma_entity_id

    @property
    def status(self):
        """Gets the status of this RmaDataCommentInterface.

        Status

        :return: The status of this RmaDataCommentInterface.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RmaDataCommentInterface.

        Status

        :param status: The status of this RmaDataCommentInterface.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def visible_on_front(self):
        """Gets the visible_on_front of this RmaDataCommentInterface.

        Is_visible_on_front

        :return: The visible_on_front of this RmaDataCommentInterface.
        :rtype: bool
        """
        return self._visible_on_front

    @visible_on_front.setter
    def visible_on_front(self, visible_on_front):
        """Sets the visible_on_front of this RmaDataCommentInterface.

        Is_visible_on_front

        :param visible_on_front: The visible_on_front of this RmaDataCommentInterface.
        :type visible_on_front: bool
        """
        if visible_on_front is None:
            raise ValueError("Invalid value for `visible_on_front`, must not be `None`")

        self._visible_on_front = visible_on_front
