# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QuoteCartManagementV1AssignCustomerPutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_id: int=None, store_id: int=None):
        """QuoteCartManagementV1AssignCustomerPutRequest - a model defined in OpenAPI

        :param customer_id: The customer_id of this QuoteCartManagementV1AssignCustomerPutRequest.
        :param store_id: The store_id of this QuoteCartManagementV1AssignCustomerPutRequest.
        """
        self.openapi_types = {
            'customer_id': int,
            'store_id': int
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'store_id': 'storeId'
        }

        self._customer_id = customer_id
        self._store_id = store_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuoteCartManagementV1AssignCustomerPutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The quoteCartManagementV1AssignCustomerPut_request of this QuoteCartManagementV1AssignCustomerPutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self):
        """Gets the customer_id of this QuoteCartManagementV1AssignCustomerPutRequest.

        The customer ID.

        :return: The customer_id of this QuoteCartManagementV1AssignCustomerPutRequest.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this QuoteCartManagementV1AssignCustomerPutRequest.

        The customer ID.

        :param customer_id: The customer_id of this QuoteCartManagementV1AssignCustomerPutRequest.
        :type customer_id: int
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")

        self._customer_id = customer_id

    @property
    def store_id(self):
        """Gets the store_id of this QuoteCartManagementV1AssignCustomerPutRequest.


        :return: The store_id of this QuoteCartManagementV1AssignCustomerPutRequest.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this QuoteCartManagementV1AssignCustomerPutRequest.


        :param store_id: The store_id of this QuoteCartManagementV1AssignCustomerPutRequest.
        :type store_id: int
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id
