# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogCategoryManagementV1MovePutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after_id: int=None, parent_id: int=None):
        """CatalogCategoryManagementV1MovePutRequest - a model defined in OpenAPI

        :param after_id: The after_id of this CatalogCategoryManagementV1MovePutRequest.
        :param parent_id: The parent_id of this CatalogCategoryManagementV1MovePutRequest.
        """
        self.openapi_types = {
            'after_id': int,
            'parent_id': int
        }

        self.attribute_map = {
            'after_id': 'afterId',
            'parent_id': 'parentId'
        }

        self._after_id = after_id
        self._parent_id = parent_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogCategoryManagementV1MovePutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalogCategoryManagementV1MovePut_request of this CatalogCategoryManagementV1MovePutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after_id(self):
        """Gets the after_id of this CatalogCategoryManagementV1MovePutRequest.


        :return: The after_id of this CatalogCategoryManagementV1MovePutRequest.
        :rtype: int
        """
        return self._after_id

    @after_id.setter
    def after_id(self, after_id):
        """Sets the after_id of this CatalogCategoryManagementV1MovePutRequest.


        :param after_id: The after_id of this CatalogCategoryManagementV1MovePutRequest.
        :type after_id: int
        """

        self._after_id = after_id

    @property
    def parent_id(self):
        """Gets the parent_id of this CatalogCategoryManagementV1MovePutRequest.


        :return: The parent_id of this CatalogCategoryManagementV1MovePutRequest.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CatalogCategoryManagementV1MovePutRequest.


        :param parent_id: The parent_id of this CatalogCategoryManagementV1MovePutRequest.
        :type parent_id: int
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id
