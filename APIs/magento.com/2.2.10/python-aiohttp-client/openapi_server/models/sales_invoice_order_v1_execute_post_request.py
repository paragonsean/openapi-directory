# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sales_data_invoice_comment_creation_interface import SalesDataInvoiceCommentCreationInterface
from openapi_server.models.sales_data_invoice_creation_arguments_interface import SalesDataInvoiceCreationArgumentsInterface
from openapi_server.models.sales_data_invoice_item_creation_interface import SalesDataInvoiceItemCreationInterface
from openapi_server import util


class SalesInvoiceOrderV1ExecutePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, append_comment: bool=None, arguments: SalesDataInvoiceCreationArgumentsInterface=None, capture: bool=None, comment: SalesDataInvoiceCommentCreationInterface=None, items: List[SalesDataInvoiceItemCreationInterface]=None, notify: bool=None):
        """SalesInvoiceOrderV1ExecutePostRequest - a model defined in OpenAPI

        :param append_comment: The append_comment of this SalesInvoiceOrderV1ExecutePostRequest.
        :param arguments: The arguments of this SalesInvoiceOrderV1ExecutePostRequest.
        :param capture: The capture of this SalesInvoiceOrderV1ExecutePostRequest.
        :param comment: The comment of this SalesInvoiceOrderV1ExecutePostRequest.
        :param items: The items of this SalesInvoiceOrderV1ExecutePostRequest.
        :param notify: The notify of this SalesInvoiceOrderV1ExecutePostRequest.
        """
        self.openapi_types = {
            'append_comment': bool,
            'arguments': SalesDataInvoiceCreationArgumentsInterface,
            'capture': bool,
            'comment': SalesDataInvoiceCommentCreationInterface,
            'items': List[SalesDataInvoiceItemCreationInterface],
            'notify': bool
        }

        self.attribute_map = {
            'append_comment': 'appendComment',
            'arguments': 'arguments',
            'capture': 'capture',
            'comment': 'comment',
            'items': 'items',
            'notify': 'notify'
        }

        self._append_comment = append_comment
        self._arguments = arguments
        self._capture = capture
        self._comment = comment
        self._items = items
        self._notify = notify

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesInvoiceOrderV1ExecutePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The salesInvoiceOrderV1ExecutePost_request of this SalesInvoiceOrderV1ExecutePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def append_comment(self):
        """Gets the append_comment of this SalesInvoiceOrderV1ExecutePostRequest.


        :return: The append_comment of this SalesInvoiceOrderV1ExecutePostRequest.
        :rtype: bool
        """
        return self._append_comment

    @append_comment.setter
    def append_comment(self, append_comment):
        """Sets the append_comment of this SalesInvoiceOrderV1ExecutePostRequest.


        :param append_comment: The append_comment of this SalesInvoiceOrderV1ExecutePostRequest.
        :type append_comment: bool
        """

        self._append_comment = append_comment

    @property
    def arguments(self):
        """Gets the arguments of this SalesInvoiceOrderV1ExecutePostRequest.


        :return: The arguments of this SalesInvoiceOrderV1ExecutePostRequest.
        :rtype: SalesDataInvoiceCreationArgumentsInterface
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this SalesInvoiceOrderV1ExecutePostRequest.


        :param arguments: The arguments of this SalesInvoiceOrderV1ExecutePostRequest.
        :type arguments: SalesDataInvoiceCreationArgumentsInterface
        """

        self._arguments = arguments

    @property
    def capture(self):
        """Gets the capture of this SalesInvoiceOrderV1ExecutePostRequest.


        :return: The capture of this SalesInvoiceOrderV1ExecutePostRequest.
        :rtype: bool
        """
        return self._capture

    @capture.setter
    def capture(self, capture):
        """Sets the capture of this SalesInvoiceOrderV1ExecutePostRequest.


        :param capture: The capture of this SalesInvoiceOrderV1ExecutePostRequest.
        :type capture: bool
        """

        self._capture = capture

    @property
    def comment(self):
        """Gets the comment of this SalesInvoiceOrderV1ExecutePostRequest.


        :return: The comment of this SalesInvoiceOrderV1ExecutePostRequest.
        :rtype: SalesDataInvoiceCommentCreationInterface
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SalesInvoiceOrderV1ExecutePostRequest.


        :param comment: The comment of this SalesInvoiceOrderV1ExecutePostRequest.
        :type comment: SalesDataInvoiceCommentCreationInterface
        """

        self._comment = comment

    @property
    def items(self):
        """Gets the items of this SalesInvoiceOrderV1ExecutePostRequest.


        :return: The items of this SalesInvoiceOrderV1ExecutePostRequest.
        :rtype: List[SalesDataInvoiceItemCreationInterface]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SalesInvoiceOrderV1ExecutePostRequest.


        :param items: The items of this SalesInvoiceOrderV1ExecutePostRequest.
        :type items: List[SalesDataInvoiceItemCreationInterface]
        """

        self._items = items

    @property
    def notify(self):
        """Gets the notify of this SalesInvoiceOrderV1ExecutePostRequest.


        :return: The notify of this SalesInvoiceOrderV1ExecutePostRequest.
        :rtype: bool
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this SalesInvoiceOrderV1ExecutePostRequest.


        :param notify: The notify of this SalesInvoiceOrderV1ExecutePostRequest.
        :type notify: bool
        """

        self._notify = notify
