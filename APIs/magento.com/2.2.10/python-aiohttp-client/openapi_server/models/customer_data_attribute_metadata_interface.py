# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_data_option_interface import CustomerDataOptionInterface
from openapi_server.models.customer_data_validation_rule_interface import CustomerDataValidationRuleInterface
from openapi_server import util


class CustomerDataAttributeMetadataInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_code: str=None, backend_type: str=None, data_model: str=None, frontend_class: str=None, frontend_input: str=None, frontend_label: str=None, input_filter: str=None, is_filterable_in_grid: bool=None, is_searchable_in_grid: bool=None, is_used_in_grid: bool=None, is_visible_in_grid: bool=None, multiline_count: int=None, note: str=None, options: List[CustomerDataOptionInterface]=None, required: bool=None, sort_order: int=None, store_label: str=None, system: bool=None, user_defined: bool=None, validation_rules: List[CustomerDataValidationRuleInterface]=None, visible: bool=None):
        """CustomerDataAttributeMetadataInterface - a model defined in OpenAPI

        :param attribute_code: The attribute_code of this CustomerDataAttributeMetadataInterface.
        :param backend_type: The backend_type of this CustomerDataAttributeMetadataInterface.
        :param data_model: The data_model of this CustomerDataAttributeMetadataInterface.
        :param frontend_class: The frontend_class of this CustomerDataAttributeMetadataInterface.
        :param frontend_input: The frontend_input of this CustomerDataAttributeMetadataInterface.
        :param frontend_label: The frontend_label of this CustomerDataAttributeMetadataInterface.
        :param input_filter: The input_filter of this CustomerDataAttributeMetadataInterface.
        :param is_filterable_in_grid: The is_filterable_in_grid of this CustomerDataAttributeMetadataInterface.
        :param is_searchable_in_grid: The is_searchable_in_grid of this CustomerDataAttributeMetadataInterface.
        :param is_used_in_grid: The is_used_in_grid of this CustomerDataAttributeMetadataInterface.
        :param is_visible_in_grid: The is_visible_in_grid of this CustomerDataAttributeMetadataInterface.
        :param multiline_count: The multiline_count of this CustomerDataAttributeMetadataInterface.
        :param note: The note of this CustomerDataAttributeMetadataInterface.
        :param options: The options of this CustomerDataAttributeMetadataInterface.
        :param required: The required of this CustomerDataAttributeMetadataInterface.
        :param sort_order: The sort_order of this CustomerDataAttributeMetadataInterface.
        :param store_label: The store_label of this CustomerDataAttributeMetadataInterface.
        :param system: The system of this CustomerDataAttributeMetadataInterface.
        :param user_defined: The user_defined of this CustomerDataAttributeMetadataInterface.
        :param validation_rules: The validation_rules of this CustomerDataAttributeMetadataInterface.
        :param visible: The visible of this CustomerDataAttributeMetadataInterface.
        """
        self.openapi_types = {
            'attribute_code': str,
            'backend_type': str,
            'data_model': str,
            'frontend_class': str,
            'frontend_input': str,
            'frontend_label': str,
            'input_filter': str,
            'is_filterable_in_grid': bool,
            'is_searchable_in_grid': bool,
            'is_used_in_grid': bool,
            'is_visible_in_grid': bool,
            'multiline_count': int,
            'note': str,
            'options': List[CustomerDataOptionInterface],
            'required': bool,
            'sort_order': int,
            'store_label': str,
            'system': bool,
            'user_defined': bool,
            'validation_rules': List[CustomerDataValidationRuleInterface],
            'visible': bool
        }

        self.attribute_map = {
            'attribute_code': 'attribute_code',
            'backend_type': 'backend_type',
            'data_model': 'data_model',
            'frontend_class': 'frontend_class',
            'frontend_input': 'frontend_input',
            'frontend_label': 'frontend_label',
            'input_filter': 'input_filter',
            'is_filterable_in_grid': 'is_filterable_in_grid',
            'is_searchable_in_grid': 'is_searchable_in_grid',
            'is_used_in_grid': 'is_used_in_grid',
            'is_visible_in_grid': 'is_visible_in_grid',
            'multiline_count': 'multiline_count',
            'note': 'note',
            'options': 'options',
            'required': 'required',
            'sort_order': 'sort_order',
            'store_label': 'store_label',
            'system': 'system',
            'user_defined': 'user_defined',
            'validation_rules': 'validation_rules',
            'visible': 'visible'
        }

        self._attribute_code = attribute_code
        self._backend_type = backend_type
        self._data_model = data_model
        self._frontend_class = frontend_class
        self._frontend_input = frontend_input
        self._frontend_label = frontend_label
        self._input_filter = input_filter
        self._is_filterable_in_grid = is_filterable_in_grid
        self._is_searchable_in_grid = is_searchable_in_grid
        self._is_used_in_grid = is_used_in_grid
        self._is_visible_in_grid = is_visible_in_grid
        self._multiline_count = multiline_count
        self._note = note
        self._options = options
        self._required = required
        self._sort_order = sort_order
        self._store_label = store_label
        self._system = system
        self._user_defined = user_defined
        self._validation_rules = validation_rules
        self._visible = visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerDataAttributeMetadataInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customer-data-attribute-metadata-interface of this CustomerDataAttributeMetadataInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_code(self):
        """Gets the attribute_code of this CustomerDataAttributeMetadataInterface.

        Code of the attribute.

        :return: The attribute_code of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._attribute_code

    @attribute_code.setter
    def attribute_code(self, attribute_code):
        """Sets the attribute_code of this CustomerDataAttributeMetadataInterface.

        Code of the attribute.

        :param attribute_code: The attribute_code of this CustomerDataAttributeMetadataInterface.
        :type attribute_code: str
        """
        if attribute_code is None:
            raise ValueError("Invalid value for `attribute_code`, must not be `None`")

        self._attribute_code = attribute_code

    @property
    def backend_type(self):
        """Gets the backend_type of this CustomerDataAttributeMetadataInterface.

        Backend type.

        :return: The backend_type of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._backend_type

    @backend_type.setter
    def backend_type(self, backend_type):
        """Sets the backend_type of this CustomerDataAttributeMetadataInterface.

        Backend type.

        :param backend_type: The backend_type of this CustomerDataAttributeMetadataInterface.
        :type backend_type: str
        """
        if backend_type is None:
            raise ValueError("Invalid value for `backend_type`, must not be `None`")

        self._backend_type = backend_type

    @property
    def data_model(self):
        """Gets the data_model of this CustomerDataAttributeMetadataInterface.

        Data model for attribute.

        :return: The data_model of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._data_model

    @data_model.setter
    def data_model(self, data_model):
        """Sets the data_model of this CustomerDataAttributeMetadataInterface.

        Data model for attribute.

        :param data_model: The data_model of this CustomerDataAttributeMetadataInterface.
        :type data_model: str
        """
        if data_model is None:
            raise ValueError("Invalid value for `data_model`, must not be `None`")

        self._data_model = data_model

    @property
    def frontend_class(self):
        """Gets the frontend_class of this CustomerDataAttributeMetadataInterface.

        Class which is used to display the attribute on frontend.

        :return: The frontend_class of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._frontend_class

    @frontend_class.setter
    def frontend_class(self, frontend_class):
        """Sets the frontend_class of this CustomerDataAttributeMetadataInterface.

        Class which is used to display the attribute on frontend.

        :param frontend_class: The frontend_class of this CustomerDataAttributeMetadataInterface.
        :type frontend_class: str
        """
        if frontend_class is None:
            raise ValueError("Invalid value for `frontend_class`, must not be `None`")

        self._frontend_class = frontend_class

    @property
    def frontend_input(self):
        """Gets the frontend_input of this CustomerDataAttributeMetadataInterface.

        HTML for input element.

        :return: The frontend_input of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._frontend_input

    @frontend_input.setter
    def frontend_input(self, frontend_input):
        """Sets the frontend_input of this CustomerDataAttributeMetadataInterface.

        HTML for input element.

        :param frontend_input: The frontend_input of this CustomerDataAttributeMetadataInterface.
        :type frontend_input: str
        """
        if frontend_input is None:
            raise ValueError("Invalid value for `frontend_input`, must not be `None`")

        self._frontend_input = frontend_input

    @property
    def frontend_label(self):
        """Gets the frontend_label of this CustomerDataAttributeMetadataInterface.

        Label which supposed to be displayed on frontend.

        :return: The frontend_label of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._frontend_label

    @frontend_label.setter
    def frontend_label(self, frontend_label):
        """Sets the frontend_label of this CustomerDataAttributeMetadataInterface.

        Label which supposed to be displayed on frontend.

        :param frontend_label: The frontend_label of this CustomerDataAttributeMetadataInterface.
        :type frontend_label: str
        """
        if frontend_label is None:
            raise ValueError("Invalid value for `frontend_label`, must not be `None`")

        self._frontend_label = frontend_label

    @property
    def input_filter(self):
        """Gets the input_filter of this CustomerDataAttributeMetadataInterface.

        Template used for input (e.g. \"date\")

        :return: The input_filter of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._input_filter

    @input_filter.setter
    def input_filter(self, input_filter):
        """Sets the input_filter of this CustomerDataAttributeMetadataInterface.

        Template used for input (e.g. \"date\")

        :param input_filter: The input_filter of this CustomerDataAttributeMetadataInterface.
        :type input_filter: str
        """
        if input_filter is None:
            raise ValueError("Invalid value for `input_filter`, must not be `None`")

        self._input_filter = input_filter

    @property
    def is_filterable_in_grid(self):
        """Gets the is_filterable_in_grid of this CustomerDataAttributeMetadataInterface.

        It is filterable in customer grid

        :return: The is_filterable_in_grid of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._is_filterable_in_grid

    @is_filterable_in_grid.setter
    def is_filterable_in_grid(self, is_filterable_in_grid):
        """Sets the is_filterable_in_grid of this CustomerDataAttributeMetadataInterface.

        It is filterable in customer grid

        :param is_filterable_in_grid: The is_filterable_in_grid of this CustomerDataAttributeMetadataInterface.
        :type is_filterable_in_grid: bool
        """

        self._is_filterable_in_grid = is_filterable_in_grid

    @property
    def is_searchable_in_grid(self):
        """Gets the is_searchable_in_grid of this CustomerDataAttributeMetadataInterface.

        It is searchable in customer grid

        :return: The is_searchable_in_grid of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._is_searchable_in_grid

    @is_searchable_in_grid.setter
    def is_searchable_in_grid(self, is_searchable_in_grid):
        """Sets the is_searchable_in_grid of this CustomerDataAttributeMetadataInterface.

        It is searchable in customer grid

        :param is_searchable_in_grid: The is_searchable_in_grid of this CustomerDataAttributeMetadataInterface.
        :type is_searchable_in_grid: bool
        """

        self._is_searchable_in_grid = is_searchable_in_grid

    @property
    def is_used_in_grid(self):
        """Gets the is_used_in_grid of this CustomerDataAttributeMetadataInterface.

        It is used in customer grid

        :return: The is_used_in_grid of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._is_used_in_grid

    @is_used_in_grid.setter
    def is_used_in_grid(self, is_used_in_grid):
        """Sets the is_used_in_grid of this CustomerDataAttributeMetadataInterface.

        It is used in customer grid

        :param is_used_in_grid: The is_used_in_grid of this CustomerDataAttributeMetadataInterface.
        :type is_used_in_grid: bool
        """

        self._is_used_in_grid = is_used_in_grid

    @property
    def is_visible_in_grid(self):
        """Gets the is_visible_in_grid of this CustomerDataAttributeMetadataInterface.

        It is visible in customer grid

        :return: The is_visible_in_grid of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._is_visible_in_grid

    @is_visible_in_grid.setter
    def is_visible_in_grid(self, is_visible_in_grid):
        """Sets the is_visible_in_grid of this CustomerDataAttributeMetadataInterface.

        It is visible in customer grid

        :param is_visible_in_grid: The is_visible_in_grid of this CustomerDataAttributeMetadataInterface.
        :type is_visible_in_grid: bool
        """

        self._is_visible_in_grid = is_visible_in_grid

    @property
    def multiline_count(self):
        """Gets the multiline_count of this CustomerDataAttributeMetadataInterface.

        Of lines of the attribute value.

        :return: The multiline_count of this CustomerDataAttributeMetadataInterface.
        :rtype: int
        """
        return self._multiline_count

    @multiline_count.setter
    def multiline_count(self, multiline_count):
        """Sets the multiline_count of this CustomerDataAttributeMetadataInterface.

        Of lines of the attribute value.

        :param multiline_count: The multiline_count of this CustomerDataAttributeMetadataInterface.
        :type multiline_count: int
        """
        if multiline_count is None:
            raise ValueError("Invalid value for `multiline_count`, must not be `None`")

        self._multiline_count = multiline_count

    @property
    def note(self):
        """Gets the note of this CustomerDataAttributeMetadataInterface.

        The note attribute for the element.

        :return: The note of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CustomerDataAttributeMetadataInterface.

        The note attribute for the element.

        :param note: The note of this CustomerDataAttributeMetadataInterface.
        :type note: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")

        self._note = note

    @property
    def options(self):
        """Gets the options of this CustomerDataAttributeMetadataInterface.

        Options of the attribute (key => value pairs for select)

        :return: The options of this CustomerDataAttributeMetadataInterface.
        :rtype: List[CustomerDataOptionInterface]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CustomerDataAttributeMetadataInterface.

        Options of the attribute (key => value pairs for select)

        :param options: The options of this CustomerDataAttributeMetadataInterface.
        :type options: List[CustomerDataOptionInterface]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def required(self):
        """Gets the required of this CustomerDataAttributeMetadataInterface.

        Attribute is required.

        :return: The required of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this CustomerDataAttributeMetadataInterface.

        Attribute is required.

        :param required: The required of this CustomerDataAttributeMetadataInterface.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def sort_order(self):
        """Gets the sort_order of this CustomerDataAttributeMetadataInterface.

        Attributes sort order.

        :return: The sort_order of this CustomerDataAttributeMetadataInterface.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this CustomerDataAttributeMetadataInterface.

        Attributes sort order.

        :param sort_order: The sort_order of this CustomerDataAttributeMetadataInterface.
        :type sort_order: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")

        self._sort_order = sort_order

    @property
    def store_label(self):
        """Gets the store_label of this CustomerDataAttributeMetadataInterface.

        Label of the store.

        :return: The store_label of this CustomerDataAttributeMetadataInterface.
        :rtype: str
        """
        return self._store_label

    @store_label.setter
    def store_label(self, store_label):
        """Sets the store_label of this CustomerDataAttributeMetadataInterface.

        Label of the store.

        :param store_label: The store_label of this CustomerDataAttributeMetadataInterface.
        :type store_label: str
        """
        if store_label is None:
            raise ValueError("Invalid value for `store_label`, must not be `None`")

        self._store_label = store_label

    @property
    def system(self):
        """Gets the system of this CustomerDataAttributeMetadataInterface.

        This is a system attribute.

        :return: The system of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this CustomerDataAttributeMetadataInterface.

        This is a system attribute.

        :param system: The system of this CustomerDataAttributeMetadataInterface.
        :type system: bool
        """
        if system is None:
            raise ValueError("Invalid value for `system`, must not be `None`")

        self._system = system

    @property
    def user_defined(self):
        """Gets the user_defined of this CustomerDataAttributeMetadataInterface.

        Current attribute has been defined by a user.

        :return: The user_defined of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._user_defined

    @user_defined.setter
    def user_defined(self, user_defined):
        """Sets the user_defined of this CustomerDataAttributeMetadataInterface.

        Current attribute has been defined by a user.

        :param user_defined: The user_defined of this CustomerDataAttributeMetadataInterface.
        :type user_defined: bool
        """
        if user_defined is None:
            raise ValueError("Invalid value for `user_defined`, must not be `None`")

        self._user_defined = user_defined

    @property
    def validation_rules(self):
        """Gets the validation_rules of this CustomerDataAttributeMetadataInterface.

        Validation rules.

        :return: The validation_rules of this CustomerDataAttributeMetadataInterface.
        :rtype: List[CustomerDataValidationRuleInterface]
        """
        return self._validation_rules

    @validation_rules.setter
    def validation_rules(self, validation_rules):
        """Sets the validation_rules of this CustomerDataAttributeMetadataInterface.

        Validation rules.

        :param validation_rules: The validation_rules of this CustomerDataAttributeMetadataInterface.
        :type validation_rules: List[CustomerDataValidationRuleInterface]
        """
        if validation_rules is None:
            raise ValueError("Invalid value for `validation_rules`, must not be `None`")

        self._validation_rules = validation_rules

    @property
    def visible(self):
        """Gets the visible of this CustomerDataAttributeMetadataInterface.

        Attribute is visible on frontend.

        :return: The visible of this CustomerDataAttributeMetadataInterface.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this CustomerDataAttributeMetadataInterface.

        Attribute is visible on frontend.

        :param visible: The visible of this CustomerDataAttributeMetadataInterface.
        :type visible: bool
        """
        if visible is None:
            raise ValueError("Invalid value for `visible`, must not be `None`")

        self._visible = visible
