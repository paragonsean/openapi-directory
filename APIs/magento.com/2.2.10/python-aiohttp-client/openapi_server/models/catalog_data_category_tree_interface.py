# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogDataCategoryTreeInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children_data: List[CatalogDataCategoryTreeInterface]=None, id: int=None, is_active: bool=None, level: int=None, name: str=None, parent_id: int=None, position: int=None, product_count: int=None):
        """CatalogDataCategoryTreeInterface - a model defined in OpenAPI

        :param children_data: The children_data of this CatalogDataCategoryTreeInterface.
        :param id: The id of this CatalogDataCategoryTreeInterface.
        :param is_active: The is_active of this CatalogDataCategoryTreeInterface.
        :param level: The level of this CatalogDataCategoryTreeInterface.
        :param name: The name of this CatalogDataCategoryTreeInterface.
        :param parent_id: The parent_id of this CatalogDataCategoryTreeInterface.
        :param position: The position of this CatalogDataCategoryTreeInterface.
        :param product_count: The product_count of this CatalogDataCategoryTreeInterface.
        """
        self.openapi_types = {
            'children_data': List[CatalogDataCategoryTreeInterface],
            'id': int,
            'is_active': bool,
            'level': int,
            'name': str,
            'parent_id': int,
            'position': int,
            'product_count': int
        }

        self.attribute_map = {
            'children_data': 'children_data',
            'id': 'id',
            'is_active': 'is_active',
            'level': 'level',
            'name': 'name',
            'parent_id': 'parent_id',
            'position': 'position',
            'product_count': 'product_count'
        }

        self._children_data = children_data
        self._id = id
        self._is_active = is_active
        self._level = level
        self._name = name
        self._parent_id = parent_id
        self._position = position
        self._product_count = product_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataCategoryTreeInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-category-tree-interface of this CatalogDataCategoryTreeInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children_data(self):
        """Gets the children_data of this CatalogDataCategoryTreeInterface.


        :return: The children_data of this CatalogDataCategoryTreeInterface.
        :rtype: List[CatalogDataCategoryTreeInterface]
        """
        return self._children_data

    @children_data.setter
    def children_data(self, children_data):
        """Sets the children_data of this CatalogDataCategoryTreeInterface.


        :param children_data: The children_data of this CatalogDataCategoryTreeInterface.
        :type children_data: List[CatalogDataCategoryTreeInterface]
        """
        if children_data is None:
            raise ValueError("Invalid value for `children_data`, must not be `None`")

        self._children_data = children_data

    @property
    def id(self):
        """Gets the id of this CatalogDataCategoryTreeInterface.


        :return: The id of this CatalogDataCategoryTreeInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogDataCategoryTreeInterface.


        :param id: The id of this CatalogDataCategoryTreeInterface.
        :type id: int
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this CatalogDataCategoryTreeInterface.

        Whether category is active

        :return: The is_active of this CatalogDataCategoryTreeInterface.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this CatalogDataCategoryTreeInterface.

        Whether category is active

        :param is_active: The is_active of this CatalogDataCategoryTreeInterface.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def level(self):
        """Gets the level of this CatalogDataCategoryTreeInterface.

        Category level

        :return: The level of this CatalogDataCategoryTreeInterface.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CatalogDataCategoryTreeInterface.

        Category level

        :param level: The level of this CatalogDataCategoryTreeInterface.
        :type level: int
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")

        self._level = level

    @property
    def name(self):
        """Gets the name of this CatalogDataCategoryTreeInterface.

        Category name

        :return: The name of this CatalogDataCategoryTreeInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogDataCategoryTreeInterface.

        Category name

        :param name: The name of this CatalogDataCategoryTreeInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this CatalogDataCategoryTreeInterface.

        Parent category ID

        :return: The parent_id of this CatalogDataCategoryTreeInterface.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CatalogDataCategoryTreeInterface.

        Parent category ID

        :param parent_id: The parent_id of this CatalogDataCategoryTreeInterface.
        :type parent_id: int
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id

    @property
    def position(self):
        """Gets the position of this CatalogDataCategoryTreeInterface.

        Category position

        :return: The position of this CatalogDataCategoryTreeInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CatalogDataCategoryTreeInterface.

        Category position

        :param position: The position of this CatalogDataCategoryTreeInterface.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def product_count(self):
        """Gets the product_count of this CatalogDataCategoryTreeInterface.

        Product count

        :return: The product_count of this CatalogDataCategoryTreeInterface.
        :rtype: int
        """
        return self._product_count

    @product_count.setter
    def product_count(self, product_count):
        """Sets the product_count of this CatalogDataCategoryTreeInterface.

        Product count

        :param product_count: The product_count of this CatalogDataCategoryTreeInterface.
        :type product_count: int
        """
        if product_count is None:
            raise ValueError("Invalid value for `product_count`, must not be `None`")

        self._product_count = product_count
