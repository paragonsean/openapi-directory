# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.negotiable_quote_data_comment_attachment_interface import NegotiableQuoteDataCommentAttachmentInterface
from openapi_server import util


class NegotiableQuoteDataCommentInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[NegotiableQuoteDataCommentAttachmentInterface]=None, comment: str=None, created_at: str=None, creator_id: int=None, creator_type: int=None, entity_id: int=None, extension_attributes: object=None, is_decline: int=None, is_draft: int=None, parent_id: int=None):
        """NegotiableQuoteDataCommentInterface - a model defined in OpenAPI

        :param attachments: The attachments of this NegotiableQuoteDataCommentInterface.
        :param comment: The comment of this NegotiableQuoteDataCommentInterface.
        :param created_at: The created_at of this NegotiableQuoteDataCommentInterface.
        :param creator_id: The creator_id of this NegotiableQuoteDataCommentInterface.
        :param creator_type: The creator_type of this NegotiableQuoteDataCommentInterface.
        :param entity_id: The entity_id of this NegotiableQuoteDataCommentInterface.
        :param extension_attributes: The extension_attributes of this NegotiableQuoteDataCommentInterface.
        :param is_decline: The is_decline of this NegotiableQuoteDataCommentInterface.
        :param is_draft: The is_draft of this NegotiableQuoteDataCommentInterface.
        :param parent_id: The parent_id of this NegotiableQuoteDataCommentInterface.
        """
        self.openapi_types = {
            'attachments': List[NegotiableQuoteDataCommentAttachmentInterface],
            'comment': str,
            'created_at': str,
            'creator_id': int,
            'creator_type': int,
            'entity_id': int,
            'extension_attributes': object,
            'is_decline': int,
            'is_draft': int,
            'parent_id': int
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'comment': 'comment',
            'created_at': 'created_at',
            'creator_id': 'creator_id',
            'creator_type': 'creator_type',
            'entity_id': 'entity_id',
            'extension_attributes': 'extension_attributes',
            'is_decline': 'is_decline',
            'is_draft': 'is_draft',
            'parent_id': 'parent_id'
        }

        self._attachments = attachments
        self._comment = comment
        self._created_at = created_at
        self._creator_id = creator_id
        self._creator_type = creator_type
        self._entity_id = entity_id
        self._extension_attributes = extension_attributes
        self._is_decline = is_decline
        self._is_draft = is_draft
        self._parent_id = parent_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NegotiableQuoteDataCommentInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The negotiable-quote-data-comment-interface of this NegotiableQuoteDataCommentInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this NegotiableQuoteDataCommentInterface.

        Existing attachments.

        :return: The attachments of this NegotiableQuoteDataCommentInterface.
        :rtype: List[NegotiableQuoteDataCommentAttachmentInterface]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this NegotiableQuoteDataCommentInterface.

        Existing attachments.

        :param attachments: The attachments of this NegotiableQuoteDataCommentInterface.
        :type attachments: List[NegotiableQuoteDataCommentAttachmentInterface]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")

        self._attachments = attachments

    @property
    def comment(self):
        """Gets the comment of this NegotiableQuoteDataCommentInterface.

        Comment.

        :return: The comment of this NegotiableQuoteDataCommentInterface.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this NegotiableQuoteDataCommentInterface.

        Comment.

        :param comment: The comment of this NegotiableQuoteDataCommentInterface.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this NegotiableQuoteDataCommentInterface.

        Comment created at.

        :return: The created_at of this NegotiableQuoteDataCommentInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NegotiableQuoteDataCommentInterface.

        Comment created at.

        :param created_at: The created_at of this NegotiableQuoteDataCommentInterface.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def creator_id(self):
        """Gets the creator_id of this NegotiableQuoteDataCommentInterface.

        Comment creator ID.

        :return: The creator_id of this NegotiableQuoteDataCommentInterface.
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this NegotiableQuoteDataCommentInterface.

        Comment creator ID.

        :param creator_id: The creator_id of this NegotiableQuoteDataCommentInterface.
        :type creator_id: int
        """
        if creator_id is None:
            raise ValueError("Invalid value for `creator_id`, must not be `None`")

        self._creator_id = creator_id

    @property
    def creator_type(self):
        """Gets the creator_type of this NegotiableQuoteDataCommentInterface.

        The comment creator type.

        :return: The creator_type of this NegotiableQuoteDataCommentInterface.
        :rtype: int
        """
        return self._creator_type

    @creator_type.setter
    def creator_type(self, creator_type):
        """Sets the creator_type of this NegotiableQuoteDataCommentInterface.

        The comment creator type.

        :param creator_type: The creator_type of this NegotiableQuoteDataCommentInterface.
        :type creator_type: int
        """
        if creator_type is None:
            raise ValueError("Invalid value for `creator_type`, must not be `None`")

        self._creator_type = creator_type

    @property
    def entity_id(self):
        """Gets the entity_id of this NegotiableQuoteDataCommentInterface.

        Comment ID.

        :return: The entity_id of this NegotiableQuoteDataCommentInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this NegotiableQuoteDataCommentInterface.

        Comment ID.

        :param entity_id: The entity_id of this NegotiableQuoteDataCommentInterface.
        :type entity_id: int
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this NegotiableQuoteDataCommentInterface.

        ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\CommentInterface

        :return: The extension_attributes of this NegotiableQuoteDataCommentInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this NegotiableQuoteDataCommentInterface.

        ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\CommentInterface

        :param extension_attributes: The extension_attributes of this NegotiableQuoteDataCommentInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def is_decline(self):
        """Gets the is_decline of this NegotiableQuoteDataCommentInterface.

        Is quote was declined by seller.

        :return: The is_decline of this NegotiableQuoteDataCommentInterface.
        :rtype: int
        """
        return self._is_decline

    @is_decline.setter
    def is_decline(self, is_decline):
        """Sets the is_decline of this NegotiableQuoteDataCommentInterface.

        Is quote was declined by seller.

        :param is_decline: The is_decline of this NegotiableQuoteDataCommentInterface.
        :type is_decline: int
        """
        if is_decline is None:
            raise ValueError("Invalid value for `is_decline`, must not be `None`")

        self._is_decline = is_decline

    @property
    def is_draft(self):
        """Gets the is_draft of this NegotiableQuoteDataCommentInterface.

        Is quote draft flag.

        :return: The is_draft of this NegotiableQuoteDataCommentInterface.
        :rtype: int
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this NegotiableQuoteDataCommentInterface.

        Is quote draft flag.

        :param is_draft: The is_draft of this NegotiableQuoteDataCommentInterface.
        :type is_draft: int
        """
        if is_draft is None:
            raise ValueError("Invalid value for `is_draft`, must not be `None`")

        self._is_draft = is_draft

    @property
    def parent_id(self):
        """Gets the parent_id of this NegotiableQuoteDataCommentInterface.

        Negotiable quote ID, that this comment belongs to.

        :return: The parent_id of this NegotiableQuoteDataCommentInterface.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this NegotiableQuoteDataCommentInterface.

        Negotiable quote ID, that this comment belongs to.

        :param parent_id: The parent_id of this NegotiableQuoteDataCommentInterface.
        :type parent_id: int
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id
