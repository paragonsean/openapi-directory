# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.company_data_company_extension_interface import CompanyDataCompanyExtensionInterface
from openapi_server import util


class CompanyDataCompanyInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, comment: str=None, company_email: str=None, company_name: str=None, country_id: str=None, customer_group_id: int=None, extension_attributes: CompanyDataCompanyExtensionInterface=None, id: int=None, legal_name: str=None, postcode: str=None, region: str=None, region_id: str=None, reject_reason: str=None, rejected_at: str=None, reseller_id: str=None, sales_representative_id: int=None, status: int=None, street: List[str]=None, super_user_id: int=None, telephone: str=None, vat_tax_id: str=None):
        """CompanyDataCompanyInterface - a model defined in OpenAPI

        :param city: The city of this CompanyDataCompanyInterface.
        :param comment: The comment of this CompanyDataCompanyInterface.
        :param company_email: The company_email of this CompanyDataCompanyInterface.
        :param company_name: The company_name of this CompanyDataCompanyInterface.
        :param country_id: The country_id of this CompanyDataCompanyInterface.
        :param customer_group_id: The customer_group_id of this CompanyDataCompanyInterface.
        :param extension_attributes: The extension_attributes of this CompanyDataCompanyInterface.
        :param id: The id of this CompanyDataCompanyInterface.
        :param legal_name: The legal_name of this CompanyDataCompanyInterface.
        :param postcode: The postcode of this CompanyDataCompanyInterface.
        :param region: The region of this CompanyDataCompanyInterface.
        :param region_id: The region_id of this CompanyDataCompanyInterface.
        :param reject_reason: The reject_reason of this CompanyDataCompanyInterface.
        :param rejected_at: The rejected_at of this CompanyDataCompanyInterface.
        :param reseller_id: The reseller_id of this CompanyDataCompanyInterface.
        :param sales_representative_id: The sales_representative_id of this CompanyDataCompanyInterface.
        :param status: The status of this CompanyDataCompanyInterface.
        :param street: The street of this CompanyDataCompanyInterface.
        :param super_user_id: The super_user_id of this CompanyDataCompanyInterface.
        :param telephone: The telephone of this CompanyDataCompanyInterface.
        :param vat_tax_id: The vat_tax_id of this CompanyDataCompanyInterface.
        """
        self.openapi_types = {
            'city': str,
            'comment': str,
            'company_email': str,
            'company_name': str,
            'country_id': str,
            'customer_group_id': int,
            'extension_attributes': CompanyDataCompanyExtensionInterface,
            'id': int,
            'legal_name': str,
            'postcode': str,
            'region': str,
            'region_id': str,
            'reject_reason': str,
            'rejected_at': str,
            'reseller_id': str,
            'sales_representative_id': int,
            'status': int,
            'street': List[str],
            'super_user_id': int,
            'telephone': str,
            'vat_tax_id': str
        }

        self.attribute_map = {
            'city': 'city',
            'comment': 'comment',
            'company_email': 'company_email',
            'company_name': 'company_name',
            'country_id': 'country_id',
            'customer_group_id': 'customer_group_id',
            'extension_attributes': 'extension_attributes',
            'id': 'id',
            'legal_name': 'legal_name',
            'postcode': 'postcode',
            'region': 'region',
            'region_id': 'region_id',
            'reject_reason': 'reject_reason',
            'rejected_at': 'rejected_at',
            'reseller_id': 'reseller_id',
            'sales_representative_id': 'sales_representative_id',
            'status': 'status',
            'street': 'street',
            'super_user_id': 'super_user_id',
            'telephone': 'telephone',
            'vat_tax_id': 'vat_tax_id'
        }

        self._city = city
        self._comment = comment
        self._company_email = company_email
        self._company_name = company_name
        self._country_id = country_id
        self._customer_group_id = customer_group_id
        self._extension_attributes = extension_attributes
        self._id = id
        self._legal_name = legal_name
        self._postcode = postcode
        self._region = region
        self._region_id = region_id
        self._reject_reason = reject_reason
        self._rejected_at = rejected_at
        self._reseller_id = reseller_id
        self._sales_representative_id = sales_representative_id
        self._status = status
        self._street = street
        self._super_user_id = super_user_id
        self._telephone = telephone
        self._vat_tax_id = vat_tax_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyDataCompanyInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The company-data-company-interface of this CompanyDataCompanyInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this CompanyDataCompanyInterface.

        City.

        :return: The city of this CompanyDataCompanyInterface.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CompanyDataCompanyInterface.

        City.

        :param city: The city of this CompanyDataCompanyInterface.
        :type city: str
        """

        self._city = city

    @property
    def comment(self):
        """Gets the comment of this CompanyDataCompanyInterface.

        Comment.

        :return: The comment of this CompanyDataCompanyInterface.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CompanyDataCompanyInterface.

        Comment.

        :param comment: The comment of this CompanyDataCompanyInterface.
        :type comment: str
        """

        self._comment = comment

    @property
    def company_email(self):
        """Gets the company_email of this CompanyDataCompanyInterface.

        Company email.

        :return: The company_email of this CompanyDataCompanyInterface.
        :rtype: str
        """
        return self._company_email

    @company_email.setter
    def company_email(self, company_email):
        """Sets the company_email of this CompanyDataCompanyInterface.

        Company email.

        :param company_email: The company_email of this CompanyDataCompanyInterface.
        :type company_email: str
        """

        self._company_email = company_email

    @property
    def company_name(self):
        """Gets the company_name of this CompanyDataCompanyInterface.

        Company name.

        :return: The company_name of this CompanyDataCompanyInterface.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CompanyDataCompanyInterface.

        Company name.

        :param company_name: The company_name of this CompanyDataCompanyInterface.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def country_id(self):
        """Gets the country_id of this CompanyDataCompanyInterface.

        Country.

        :return: The country_id of this CompanyDataCompanyInterface.
        :rtype: str
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this CompanyDataCompanyInterface.

        Country.

        :param country_id: The country_id of this CompanyDataCompanyInterface.
        :type country_id: str
        """

        self._country_id = country_id

    @property
    def customer_group_id(self):
        """Gets the customer_group_id of this CompanyDataCompanyInterface.

        Customer Group Id.

        :return: The customer_group_id of this CompanyDataCompanyInterface.
        :rtype: int
        """
        return self._customer_group_id

    @customer_group_id.setter
    def customer_group_id(self, customer_group_id):
        """Sets the customer_group_id of this CompanyDataCompanyInterface.

        Customer Group Id.

        :param customer_group_id: The customer_group_id of this CompanyDataCompanyInterface.
        :type customer_group_id: int
        """
        if customer_group_id is None:
            raise ValueError("Invalid value for `customer_group_id`, must not be `None`")

        self._customer_group_id = customer_group_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CompanyDataCompanyInterface.


        :return: The extension_attributes of this CompanyDataCompanyInterface.
        :rtype: CompanyDataCompanyExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CompanyDataCompanyInterface.


        :param extension_attributes: The extension_attributes of this CompanyDataCompanyInterface.
        :type extension_attributes: CompanyDataCompanyExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def id(self):
        """Gets the id of this CompanyDataCompanyInterface.

        Id.

        :return: The id of this CompanyDataCompanyInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyDataCompanyInterface.

        Id.

        :param id: The id of this CompanyDataCompanyInterface.
        :type id: int
        """

        self._id = id

    @property
    def legal_name(self):
        """Gets the legal_name of this CompanyDataCompanyInterface.

        Legal name.

        :return: The legal_name of this CompanyDataCompanyInterface.
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this CompanyDataCompanyInterface.

        Legal name.

        :param legal_name: The legal_name of this CompanyDataCompanyInterface.
        :type legal_name: str
        """

        self._legal_name = legal_name

    @property
    def postcode(self):
        """Gets the postcode of this CompanyDataCompanyInterface.

        Postcode.

        :return: The postcode of this CompanyDataCompanyInterface.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this CompanyDataCompanyInterface.

        Postcode.

        :param postcode: The postcode of this CompanyDataCompanyInterface.
        :type postcode: str
        """

        self._postcode = postcode

    @property
    def region(self):
        """Gets the region of this CompanyDataCompanyInterface.

        Region.

        :return: The region of this CompanyDataCompanyInterface.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CompanyDataCompanyInterface.

        Region.

        :param region: The region of this CompanyDataCompanyInterface.
        :type region: str
        """

        self._region = region

    @property
    def region_id(self):
        """Gets the region_id of this CompanyDataCompanyInterface.

        Region Id.

        :return: The region_id of this CompanyDataCompanyInterface.
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this CompanyDataCompanyInterface.

        Region Id.

        :param region_id: The region_id of this CompanyDataCompanyInterface.
        :type region_id: str
        """

        self._region_id = region_id

    @property
    def reject_reason(self):
        """Gets the reject_reason of this CompanyDataCompanyInterface.

        Reject Reason.

        :return: The reject_reason of this CompanyDataCompanyInterface.
        :rtype: str
        """
        return self._reject_reason

    @reject_reason.setter
    def reject_reason(self, reject_reason):
        """Sets the reject_reason of this CompanyDataCompanyInterface.

        Reject Reason.

        :param reject_reason: The reject_reason of this CompanyDataCompanyInterface.
        :type reject_reason: str
        """
        if reject_reason is None:
            raise ValueError("Invalid value for `reject_reason`, must not be `None`")

        self._reject_reason = reject_reason

    @property
    def rejected_at(self):
        """Gets the rejected_at of this CompanyDataCompanyInterface.

        Rejected at time.

        :return: The rejected_at of this CompanyDataCompanyInterface.
        :rtype: str
        """
        return self._rejected_at

    @rejected_at.setter
    def rejected_at(self, rejected_at):
        """Sets the rejected_at of this CompanyDataCompanyInterface.

        Rejected at time.

        :param rejected_at: The rejected_at of this CompanyDataCompanyInterface.
        :type rejected_at: str
        """
        if rejected_at is None:
            raise ValueError("Invalid value for `rejected_at`, must not be `None`")

        self._rejected_at = rejected_at

    @property
    def reseller_id(self):
        """Gets the reseller_id of this CompanyDataCompanyInterface.

        Reseller Id.

        :return: The reseller_id of this CompanyDataCompanyInterface.
        :rtype: str
        """
        return self._reseller_id

    @reseller_id.setter
    def reseller_id(self, reseller_id):
        """Sets the reseller_id of this CompanyDataCompanyInterface.

        Reseller Id.

        :param reseller_id: The reseller_id of this CompanyDataCompanyInterface.
        :type reseller_id: str
        """

        self._reseller_id = reseller_id

    @property
    def sales_representative_id(self):
        """Gets the sales_representative_id of this CompanyDataCompanyInterface.

        Sales Representative Id.

        :return: The sales_representative_id of this CompanyDataCompanyInterface.
        :rtype: int
        """
        return self._sales_representative_id

    @sales_representative_id.setter
    def sales_representative_id(self, sales_representative_id):
        """Sets the sales_representative_id of this CompanyDataCompanyInterface.

        Sales Representative Id.

        :param sales_representative_id: The sales_representative_id of this CompanyDataCompanyInterface.
        :type sales_representative_id: int
        """
        if sales_representative_id is None:
            raise ValueError("Invalid value for `sales_representative_id`, must not be `None`")

        self._sales_representative_id = sales_representative_id

    @property
    def status(self):
        """Gets the status of this CompanyDataCompanyInterface.

        Status.

        :return: The status of this CompanyDataCompanyInterface.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CompanyDataCompanyInterface.

        Status.

        :param status: The status of this CompanyDataCompanyInterface.
        :type status: int
        """

        self._status = status

    @property
    def street(self):
        """Gets the street of this CompanyDataCompanyInterface.

        Street.

        :return: The street of this CompanyDataCompanyInterface.
        :rtype: List[str]
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this CompanyDataCompanyInterface.

        Street.

        :param street: The street of this CompanyDataCompanyInterface.
        :type street: List[str]
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")

        self._street = street

    @property
    def super_user_id(self):
        """Gets the super_user_id of this CompanyDataCompanyInterface.

        Company admin customer id.

        :return: The super_user_id of this CompanyDataCompanyInterface.
        :rtype: int
        """
        return self._super_user_id

    @super_user_id.setter
    def super_user_id(self, super_user_id):
        """Sets the super_user_id of this CompanyDataCompanyInterface.

        Company admin customer id.

        :param super_user_id: The super_user_id of this CompanyDataCompanyInterface.
        :type super_user_id: int
        """
        if super_user_id is None:
            raise ValueError("Invalid value for `super_user_id`, must not be `None`")

        self._super_user_id = super_user_id

    @property
    def telephone(self):
        """Gets the telephone of this CompanyDataCompanyInterface.

        Telephone.

        :return: The telephone of this CompanyDataCompanyInterface.
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this CompanyDataCompanyInterface.

        Telephone.

        :param telephone: The telephone of this CompanyDataCompanyInterface.
        :type telephone: str
        """

        self._telephone = telephone

    @property
    def vat_tax_id(self):
        """Gets the vat_tax_id of this CompanyDataCompanyInterface.

        Vat tax id.

        :return: The vat_tax_id of this CompanyDataCompanyInterface.
        :rtype: str
        """
        return self._vat_tax_id

    @vat_tax_id.setter
    def vat_tax_id(self, vat_tax_id):
        """Sets the vat_tax_id of this CompanyDataCompanyInterface.

        Vat tax id.

        :param vat_tax_id: The vat_tax_id of this CompanyDataCompanyInterface.
        :type vat_tax_id: str
        """

        self._vat_tax_id = vat_tax_id
