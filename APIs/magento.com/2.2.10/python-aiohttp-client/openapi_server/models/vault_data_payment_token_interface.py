# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VaultDataPaymentTokenInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, customer_id: int=None, entity_id: int=None, expires_at: str=None, gateway_token: str=None, is_active: bool=None, is_visible: bool=None, payment_method_code: str=None, public_hash: str=None, token_details: str=None, type: str=None):
        """VaultDataPaymentTokenInterface - a model defined in OpenAPI

        :param created_at: The created_at of this VaultDataPaymentTokenInterface.
        :param customer_id: The customer_id of this VaultDataPaymentTokenInterface.
        :param entity_id: The entity_id of this VaultDataPaymentTokenInterface.
        :param expires_at: The expires_at of this VaultDataPaymentTokenInterface.
        :param gateway_token: The gateway_token of this VaultDataPaymentTokenInterface.
        :param is_active: The is_active of this VaultDataPaymentTokenInterface.
        :param is_visible: The is_visible of this VaultDataPaymentTokenInterface.
        :param payment_method_code: The payment_method_code of this VaultDataPaymentTokenInterface.
        :param public_hash: The public_hash of this VaultDataPaymentTokenInterface.
        :param token_details: The token_details of this VaultDataPaymentTokenInterface.
        :param type: The type of this VaultDataPaymentTokenInterface.
        """
        self.openapi_types = {
            'created_at': str,
            'customer_id': int,
            'entity_id': int,
            'expires_at': str,
            'gateway_token': str,
            'is_active': bool,
            'is_visible': bool,
            'payment_method_code': str,
            'public_hash': str,
            'token_details': str,
            'type': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'customer_id': 'customer_id',
            'entity_id': 'entity_id',
            'expires_at': 'expires_at',
            'gateway_token': 'gateway_token',
            'is_active': 'is_active',
            'is_visible': 'is_visible',
            'payment_method_code': 'payment_method_code',
            'public_hash': 'public_hash',
            'token_details': 'token_details',
            'type': 'type'
        }

        self._created_at = created_at
        self._customer_id = customer_id
        self._entity_id = entity_id
        self._expires_at = expires_at
        self._gateway_token = gateway_token
        self._is_active = is_active
        self._is_visible = is_visible
        self._payment_method_code = payment_method_code
        self._public_hash = public_hash
        self._token_details = token_details
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VaultDataPaymentTokenInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The vault-data-payment-token-interface of this VaultDataPaymentTokenInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this VaultDataPaymentTokenInterface.

        Token creation timestamp

        :return: The created_at of this VaultDataPaymentTokenInterface.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VaultDataPaymentTokenInterface.

        Token creation timestamp

        :param created_at: The created_at of this VaultDataPaymentTokenInterface.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def customer_id(self):
        """Gets the customer_id of this VaultDataPaymentTokenInterface.

        Customer ID.

        :return: The customer_id of this VaultDataPaymentTokenInterface.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this VaultDataPaymentTokenInterface.

        Customer ID.

        :param customer_id: The customer_id of this VaultDataPaymentTokenInterface.
        :type customer_id: int
        """

        self._customer_id = customer_id

    @property
    def entity_id(self):
        """Gets the entity_id of this VaultDataPaymentTokenInterface.

        Entity ID.

        :return: The entity_id of this VaultDataPaymentTokenInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this VaultDataPaymentTokenInterface.

        Entity ID.

        :param entity_id: The entity_id of this VaultDataPaymentTokenInterface.
        :type entity_id: int
        """

        self._entity_id = entity_id

    @property
    def expires_at(self):
        """Gets the expires_at of this VaultDataPaymentTokenInterface.

        Token expiration timestamp

        :return: The expires_at of this VaultDataPaymentTokenInterface.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this VaultDataPaymentTokenInterface.

        Token expiration timestamp

        :param expires_at: The expires_at of this VaultDataPaymentTokenInterface.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def gateway_token(self):
        """Gets the gateway_token of this VaultDataPaymentTokenInterface.

        Gateway token ID

        :return: The gateway_token of this VaultDataPaymentTokenInterface.
        :rtype: str
        """
        return self._gateway_token

    @gateway_token.setter
    def gateway_token(self, gateway_token):
        """Sets the gateway_token of this VaultDataPaymentTokenInterface.

        Gateway token ID

        :param gateway_token: The gateway_token of this VaultDataPaymentTokenInterface.
        :type gateway_token: str
        """
        if gateway_token is None:
            raise ValueError("Invalid value for `gateway_token`, must not be `None`")

        self._gateway_token = gateway_token

    @property
    def is_active(self):
        """Gets the is_active of this VaultDataPaymentTokenInterface.

        Is active.

        :return: The is_active of this VaultDataPaymentTokenInterface.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this VaultDataPaymentTokenInterface.

        Is active.

        :param is_active: The is_active of this VaultDataPaymentTokenInterface.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_visible(self):
        """Gets the is_visible of this VaultDataPaymentTokenInterface.

        Is visible.

        :return: The is_visible of this VaultDataPaymentTokenInterface.
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this VaultDataPaymentTokenInterface.

        Is visible.

        :param is_visible: The is_visible of this VaultDataPaymentTokenInterface.
        :type is_visible: bool
        """
        if is_visible is None:
            raise ValueError("Invalid value for `is_visible`, must not be `None`")

        self._is_visible = is_visible

    @property
    def payment_method_code(self):
        """Gets the payment_method_code of this VaultDataPaymentTokenInterface.

        Payment method code

        :return: The payment_method_code of this VaultDataPaymentTokenInterface.
        :rtype: str
        """
        return self._payment_method_code

    @payment_method_code.setter
    def payment_method_code(self, payment_method_code):
        """Sets the payment_method_code of this VaultDataPaymentTokenInterface.

        Payment method code

        :param payment_method_code: The payment_method_code of this VaultDataPaymentTokenInterface.
        :type payment_method_code: str
        """
        if payment_method_code is None:
            raise ValueError("Invalid value for `payment_method_code`, must not be `None`")

        self._payment_method_code = payment_method_code

    @property
    def public_hash(self):
        """Gets the public_hash of this VaultDataPaymentTokenInterface.

        Public hash

        :return: The public_hash of this VaultDataPaymentTokenInterface.
        :rtype: str
        """
        return self._public_hash

    @public_hash.setter
    def public_hash(self, public_hash):
        """Sets the public_hash of this VaultDataPaymentTokenInterface.

        Public hash

        :param public_hash: The public_hash of this VaultDataPaymentTokenInterface.
        :type public_hash: str
        """
        if public_hash is None:
            raise ValueError("Invalid value for `public_hash`, must not be `None`")

        self._public_hash = public_hash

    @property
    def token_details(self):
        """Gets the token_details of this VaultDataPaymentTokenInterface.

        Token details

        :return: The token_details of this VaultDataPaymentTokenInterface.
        :rtype: str
        """
        return self._token_details

    @token_details.setter
    def token_details(self, token_details):
        """Sets the token_details of this VaultDataPaymentTokenInterface.

        Token details

        :param token_details: The token_details of this VaultDataPaymentTokenInterface.
        :type token_details: str
        """
        if token_details is None:
            raise ValueError("Invalid value for `token_details`, must not be `None`")

        self._token_details = token_details

    @property
    def type(self):
        """Gets the type of this VaultDataPaymentTokenInterface.

        Type

        :return: The type of this VaultDataPaymentTokenInterface.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VaultDataPaymentTokenInterface.

        Type

        :param type: The type of this VaultDataPaymentTokenInterface.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
