# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sales_data_creditmemo_creation_arguments_extension_interface import SalesDataCreditmemoCreationArgumentsExtensionInterface
from openapi_server import util


class SalesDataCreditmemoCreationArgumentsInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustment_negative: float=None, adjustment_positive: float=None, extension_attributes: SalesDataCreditmemoCreationArgumentsExtensionInterface=None, shipping_amount: float=None):
        """SalesDataCreditmemoCreationArgumentsInterface - a model defined in OpenAPI

        :param adjustment_negative: The adjustment_negative of this SalesDataCreditmemoCreationArgumentsInterface.
        :param adjustment_positive: The adjustment_positive of this SalesDataCreditmemoCreationArgumentsInterface.
        :param extension_attributes: The extension_attributes of this SalesDataCreditmemoCreationArgumentsInterface.
        :param shipping_amount: The shipping_amount of this SalesDataCreditmemoCreationArgumentsInterface.
        """
        self.openapi_types = {
            'adjustment_negative': float,
            'adjustment_positive': float,
            'extension_attributes': SalesDataCreditmemoCreationArgumentsExtensionInterface,
            'shipping_amount': float
        }

        self.attribute_map = {
            'adjustment_negative': 'adjustment_negative',
            'adjustment_positive': 'adjustment_positive',
            'extension_attributes': 'extension_attributes',
            'shipping_amount': 'shipping_amount'
        }

        self._adjustment_negative = adjustment_negative
        self._adjustment_positive = adjustment_positive
        self._extension_attributes = extension_attributes
        self._shipping_amount = shipping_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesDataCreditmemoCreationArgumentsInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sales-data-creditmemo-creation-arguments-interface of this SalesDataCreditmemoCreationArgumentsInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment_negative(self):
        """Gets the adjustment_negative of this SalesDataCreditmemoCreationArgumentsInterface.

        Credit memo negative adjustment.

        :return: The adjustment_negative of this SalesDataCreditmemoCreationArgumentsInterface.
        :rtype: float
        """
        return self._adjustment_negative

    @adjustment_negative.setter
    def adjustment_negative(self, adjustment_negative):
        """Sets the adjustment_negative of this SalesDataCreditmemoCreationArgumentsInterface.

        Credit memo negative adjustment.

        :param adjustment_negative: The adjustment_negative of this SalesDataCreditmemoCreationArgumentsInterface.
        :type adjustment_negative: float
        """

        self._adjustment_negative = adjustment_negative

    @property
    def adjustment_positive(self):
        """Gets the adjustment_positive of this SalesDataCreditmemoCreationArgumentsInterface.

        Credit memo positive adjustment.

        :return: The adjustment_positive of this SalesDataCreditmemoCreationArgumentsInterface.
        :rtype: float
        """
        return self._adjustment_positive

    @adjustment_positive.setter
    def adjustment_positive(self, adjustment_positive):
        """Sets the adjustment_positive of this SalesDataCreditmemoCreationArgumentsInterface.

        Credit memo positive adjustment.

        :param adjustment_positive: The adjustment_positive of this SalesDataCreditmemoCreationArgumentsInterface.
        :type adjustment_positive: float
        """

        self._adjustment_positive = adjustment_positive

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this SalesDataCreditmemoCreationArgumentsInterface.


        :return: The extension_attributes of this SalesDataCreditmemoCreationArgumentsInterface.
        :rtype: SalesDataCreditmemoCreationArgumentsExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this SalesDataCreditmemoCreationArgumentsInterface.


        :param extension_attributes: The extension_attributes of this SalesDataCreditmemoCreationArgumentsInterface.
        :type extension_attributes: SalesDataCreditmemoCreationArgumentsExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def shipping_amount(self):
        """Gets the shipping_amount of this SalesDataCreditmemoCreationArgumentsInterface.

        Credit memo shipping amount.

        :return: The shipping_amount of this SalesDataCreditmemoCreationArgumentsInterface.
        :rtype: float
        """
        return self._shipping_amount

    @shipping_amount.setter
    def shipping_amount(self, shipping_amount):
        """Sets the shipping_amount of this SalesDataCreditmemoCreationArgumentsInterface.

        Credit memo shipping amount.

        :param shipping_amount: The shipping_amount of this SalesDataCreditmemoCreationArgumentsInterface.
        :type shipping_amount: float
        """

        self._shipping_amount = shipping_amount
