# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RmaDataTrackInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carrier_code: str=None, carrier_title: str=None, entity_id: int=None, extension_attributes: object=None, rma_entity_id: int=None, track_number: str=None):
        """RmaDataTrackInterface - a model defined in OpenAPI

        :param carrier_code: The carrier_code of this RmaDataTrackInterface.
        :param carrier_title: The carrier_title of this RmaDataTrackInterface.
        :param entity_id: The entity_id of this RmaDataTrackInterface.
        :param extension_attributes: The extension_attributes of this RmaDataTrackInterface.
        :param rma_entity_id: The rma_entity_id of this RmaDataTrackInterface.
        :param track_number: The track_number of this RmaDataTrackInterface.
        """
        self.openapi_types = {
            'carrier_code': str,
            'carrier_title': str,
            'entity_id': int,
            'extension_attributes': object,
            'rma_entity_id': int,
            'track_number': str
        }

        self.attribute_map = {
            'carrier_code': 'carrier_code',
            'carrier_title': 'carrier_title',
            'entity_id': 'entity_id',
            'extension_attributes': 'extension_attributes',
            'rma_entity_id': 'rma_entity_id',
            'track_number': 'track_number'
        }

        self._carrier_code = carrier_code
        self._carrier_title = carrier_title
        self._entity_id = entity_id
        self._extension_attributes = extension_attributes
        self._rma_entity_id = rma_entity_id
        self._track_number = track_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RmaDataTrackInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rma-data-track-interface of this RmaDataTrackInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carrier_code(self):
        """Gets the carrier_code of this RmaDataTrackInterface.

        Carrier code

        :return: The carrier_code of this RmaDataTrackInterface.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this RmaDataTrackInterface.

        Carrier code

        :param carrier_code: The carrier_code of this RmaDataTrackInterface.
        :type carrier_code: str
        """
        if carrier_code is None:
            raise ValueError("Invalid value for `carrier_code`, must not be `None`")

        self._carrier_code = carrier_code

    @property
    def carrier_title(self):
        """Gets the carrier_title of this RmaDataTrackInterface.

        Carrier title

        :return: The carrier_title of this RmaDataTrackInterface.
        :rtype: str
        """
        return self._carrier_title

    @carrier_title.setter
    def carrier_title(self, carrier_title):
        """Sets the carrier_title of this RmaDataTrackInterface.

        Carrier title

        :param carrier_title: The carrier_title of this RmaDataTrackInterface.
        :type carrier_title: str
        """
        if carrier_title is None:
            raise ValueError("Invalid value for `carrier_title`, must not be `None`")

        self._carrier_title = carrier_title

    @property
    def entity_id(self):
        """Gets the entity_id of this RmaDataTrackInterface.

        Entity id

        :return: The entity_id of this RmaDataTrackInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this RmaDataTrackInterface.

        Entity id

        :param entity_id: The entity_id of this RmaDataTrackInterface.
        :type entity_id: int
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this RmaDataTrackInterface.

        ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\TrackInterface

        :return: The extension_attributes of this RmaDataTrackInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this RmaDataTrackInterface.

        ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\TrackInterface

        :param extension_attributes: The extension_attributes of this RmaDataTrackInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def rma_entity_id(self):
        """Gets the rma_entity_id of this RmaDataTrackInterface.

        Rma entity id

        :return: The rma_entity_id of this RmaDataTrackInterface.
        :rtype: int
        """
        return self._rma_entity_id

    @rma_entity_id.setter
    def rma_entity_id(self, rma_entity_id):
        """Sets the rma_entity_id of this RmaDataTrackInterface.

        Rma entity id

        :param rma_entity_id: The rma_entity_id of this RmaDataTrackInterface.
        :type rma_entity_id: int
        """
        if rma_entity_id is None:
            raise ValueError("Invalid value for `rma_entity_id`, must not be `None`")

        self._rma_entity_id = rma_entity_id

    @property
    def track_number(self):
        """Gets the track_number of this RmaDataTrackInterface.

        Track number

        :return: The track_number of this RmaDataTrackInterface.
        :rtype: str
        """
        return self._track_number

    @track_number.setter
    def track_number(self, track_number):
        """Sets the track_number of this RmaDataTrackInterface.

        Track number

        :param track_number: The track_number of this RmaDataTrackInterface.
        :type track_number: str
        """
        if track_number is None:
            raise ValueError("Invalid value for `track_number`, must not be `None`")

        self._track_number = track_number
