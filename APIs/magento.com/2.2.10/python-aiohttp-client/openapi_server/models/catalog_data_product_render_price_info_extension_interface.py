# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_data_product_render_price_info_interface import CatalogDataProductRenderPriceInfoInterface
from openapi_server.models.msrp_data_product_render_msrp_price_info_interface import MsrpDataProductRenderMsrpPriceInfoInterface
from openapi_server.models.weee_data_product_render_weee_adjustment_attribute_interface import WeeeDataProductRenderWeeeAdjustmentAttributeInterface
from openapi_server import util


class CatalogDataProductRenderPriceInfoExtensionInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, msrp: MsrpDataProductRenderMsrpPriceInfoInterface=None, tax_adjustments: CatalogDataProductRenderPriceInfoInterface=None, weee_adjustment: str=None, weee_attributes: List[WeeeDataProductRenderWeeeAdjustmentAttributeInterface]=None):
        """CatalogDataProductRenderPriceInfoExtensionInterface - a model defined in OpenAPI

        :param msrp: The msrp of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :param tax_adjustments: The tax_adjustments of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :param weee_adjustment: The weee_adjustment of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :param weee_attributes: The weee_attributes of this CatalogDataProductRenderPriceInfoExtensionInterface.
        """
        self.openapi_types = {
            'msrp': MsrpDataProductRenderMsrpPriceInfoInterface,
            'tax_adjustments': CatalogDataProductRenderPriceInfoInterface,
            'weee_adjustment': str,
            'weee_attributes': List[WeeeDataProductRenderWeeeAdjustmentAttributeInterface]
        }

        self.attribute_map = {
            'msrp': 'msrp',
            'tax_adjustments': 'tax_adjustments',
            'weee_adjustment': 'weee_adjustment',
            'weee_attributes': 'weee_attributes'
        }

        self._msrp = msrp
        self._tax_adjustments = tax_adjustments
        self._weee_adjustment = weee_adjustment
        self._weee_attributes = weee_attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataProductRenderPriceInfoExtensionInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-product-render-price-info-extension-interface of this CatalogDataProductRenderPriceInfoExtensionInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def msrp(self):
        """Gets the msrp of this CatalogDataProductRenderPriceInfoExtensionInterface.


        :return: The msrp of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :rtype: MsrpDataProductRenderMsrpPriceInfoInterface
        """
        return self._msrp

    @msrp.setter
    def msrp(self, msrp):
        """Sets the msrp of this CatalogDataProductRenderPriceInfoExtensionInterface.


        :param msrp: The msrp of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :type msrp: MsrpDataProductRenderMsrpPriceInfoInterface
        """

        self._msrp = msrp

    @property
    def tax_adjustments(self):
        """Gets the tax_adjustments of this CatalogDataProductRenderPriceInfoExtensionInterface.


        :return: The tax_adjustments of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :rtype: CatalogDataProductRenderPriceInfoInterface
        """
        return self._tax_adjustments

    @tax_adjustments.setter
    def tax_adjustments(self, tax_adjustments):
        """Sets the tax_adjustments of this CatalogDataProductRenderPriceInfoExtensionInterface.


        :param tax_adjustments: The tax_adjustments of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :type tax_adjustments: CatalogDataProductRenderPriceInfoInterface
        """

        self._tax_adjustments = tax_adjustments

    @property
    def weee_adjustment(self):
        """Gets the weee_adjustment of this CatalogDataProductRenderPriceInfoExtensionInterface.


        :return: The weee_adjustment of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :rtype: str
        """
        return self._weee_adjustment

    @weee_adjustment.setter
    def weee_adjustment(self, weee_adjustment):
        """Sets the weee_adjustment of this CatalogDataProductRenderPriceInfoExtensionInterface.


        :param weee_adjustment: The weee_adjustment of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :type weee_adjustment: str
        """

        self._weee_adjustment = weee_adjustment

    @property
    def weee_attributes(self):
        """Gets the weee_attributes of this CatalogDataProductRenderPriceInfoExtensionInterface.


        :return: The weee_attributes of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :rtype: List[WeeeDataProductRenderWeeeAdjustmentAttributeInterface]
        """
        return self._weee_attributes

    @weee_attributes.setter
    def weee_attributes(self, weee_attributes):
        """Sets the weee_attributes of this CatalogDataProductRenderPriceInfoExtensionInterface.


        :param weee_attributes: The weee_attributes of this CatalogDataProductRenderPriceInfoExtensionInterface.
        :type weee_attributes: List[WeeeDataProductRenderWeeeAdjustmentAttributeInterface]
        """

        self._weee_attributes = weee_attributes
