# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cms_data_block_interface import CmsDataBlockInterface
from openapi_server.models.framework_search_criteria_interface import FrameworkSearchCriteriaInterface
from openapi_server import util


class CmsDataBlockSearchResultsInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[CmsDataBlockInterface]=None, search_criteria: FrameworkSearchCriteriaInterface=None, total_count: int=None):
        """CmsDataBlockSearchResultsInterface - a model defined in OpenAPI

        :param items: The items of this CmsDataBlockSearchResultsInterface.
        :param search_criteria: The search_criteria of this CmsDataBlockSearchResultsInterface.
        :param total_count: The total_count of this CmsDataBlockSearchResultsInterface.
        """
        self.openapi_types = {
            'items': List[CmsDataBlockInterface],
            'search_criteria': FrameworkSearchCriteriaInterface,
            'total_count': int
        }

        self.attribute_map = {
            'items': 'items',
            'search_criteria': 'search_criteria',
            'total_count': 'total_count'
        }

        self._items = items
        self._search_criteria = search_criteria
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CmsDataBlockSearchResultsInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cms-data-block-search-results-interface of this CmsDataBlockSearchResultsInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this CmsDataBlockSearchResultsInterface.

        Blocks list.

        :return: The items of this CmsDataBlockSearchResultsInterface.
        :rtype: List[CmsDataBlockInterface]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CmsDataBlockSearchResultsInterface.

        Blocks list.

        :param items: The items of this CmsDataBlockSearchResultsInterface.
        :type items: List[CmsDataBlockInterface]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def search_criteria(self):
        """Gets the search_criteria of this CmsDataBlockSearchResultsInterface.


        :return: The search_criteria of this CmsDataBlockSearchResultsInterface.
        :rtype: FrameworkSearchCriteriaInterface
        """
        return self._search_criteria

    @search_criteria.setter
    def search_criteria(self, search_criteria):
        """Sets the search_criteria of this CmsDataBlockSearchResultsInterface.


        :param search_criteria: The search_criteria of this CmsDataBlockSearchResultsInterface.
        :type search_criteria: FrameworkSearchCriteriaInterface
        """
        if search_criteria is None:
            raise ValueError("Invalid value for `search_criteria`, must not be `None`")

        self._search_criteria = search_criteria

    @property
    def total_count(self):
        """Gets the total_count of this CmsDataBlockSearchResultsInterface.

        Total count.

        :return: The total_count of this CmsDataBlockSearchResultsInterface.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this CmsDataBlockSearchResultsInterface.

        Total count.

        :param total_count: The total_count of this CmsDataBlockSearchResultsInterface.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count
