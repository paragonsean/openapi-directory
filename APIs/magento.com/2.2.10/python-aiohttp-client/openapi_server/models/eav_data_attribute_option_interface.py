# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.eav_data_attribute_option_label_interface import EavDataAttributeOptionLabelInterface
from openapi_server import util


class EavDataAttributeOptionInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_default: bool=None, label: str=None, sort_order: int=None, store_labels: List[EavDataAttributeOptionLabelInterface]=None, value: str=None):
        """EavDataAttributeOptionInterface - a model defined in OpenAPI

        :param is_default: The is_default of this EavDataAttributeOptionInterface.
        :param label: The label of this EavDataAttributeOptionInterface.
        :param sort_order: The sort_order of this EavDataAttributeOptionInterface.
        :param store_labels: The store_labels of this EavDataAttributeOptionInterface.
        :param value: The value of this EavDataAttributeOptionInterface.
        """
        self.openapi_types = {
            'is_default': bool,
            'label': str,
            'sort_order': int,
            'store_labels': List[EavDataAttributeOptionLabelInterface],
            'value': str
        }

        self.attribute_map = {
            'is_default': 'is_default',
            'label': 'label',
            'sort_order': 'sort_order',
            'store_labels': 'store_labels',
            'value': 'value'
        }

        self._is_default = is_default
        self._label = label
        self._sort_order = sort_order
        self._store_labels = store_labels
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EavDataAttributeOptionInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eav-data-attribute-option-interface of this EavDataAttributeOptionInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_default(self):
        """Gets the is_default of this EavDataAttributeOptionInterface.

        Default

        :return: The is_default of this EavDataAttributeOptionInterface.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this EavDataAttributeOptionInterface.

        Default

        :param is_default: The is_default of this EavDataAttributeOptionInterface.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def label(self):
        """Gets the label of this EavDataAttributeOptionInterface.

        Option label

        :return: The label of this EavDataAttributeOptionInterface.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this EavDataAttributeOptionInterface.

        Option label

        :param label: The label of this EavDataAttributeOptionInterface.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def sort_order(self):
        """Gets the sort_order of this EavDataAttributeOptionInterface.

        Option order

        :return: The sort_order of this EavDataAttributeOptionInterface.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this EavDataAttributeOptionInterface.

        Option order

        :param sort_order: The sort_order of this EavDataAttributeOptionInterface.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def store_labels(self):
        """Gets the store_labels of this EavDataAttributeOptionInterface.

        Option label for store scopes

        :return: The store_labels of this EavDataAttributeOptionInterface.
        :rtype: List[EavDataAttributeOptionLabelInterface]
        """
        return self._store_labels

    @store_labels.setter
    def store_labels(self, store_labels):
        """Sets the store_labels of this EavDataAttributeOptionInterface.

        Option label for store scopes

        :param store_labels: The store_labels of this EavDataAttributeOptionInterface.
        :type store_labels: List[EavDataAttributeOptionLabelInterface]
        """

        self._store_labels = store_labels

    @property
    def value(self):
        """Gets the value of this EavDataAttributeOptionInterface.

        Option value

        :return: The value of this EavDataAttributeOptionInterface.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EavDataAttributeOptionInterface.

        Option value

        :param value: The value of this EavDataAttributeOptionInterface.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
