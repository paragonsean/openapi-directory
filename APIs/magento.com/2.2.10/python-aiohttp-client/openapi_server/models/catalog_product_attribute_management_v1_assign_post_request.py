# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CatalogProductAttributeManagementV1AssignPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_code: str=None, attribute_group_id: int=None, attribute_set_id: int=None, sort_order: int=None):
        """CatalogProductAttributeManagementV1AssignPostRequest - a model defined in OpenAPI

        :param attribute_code: The attribute_code of this CatalogProductAttributeManagementV1AssignPostRequest.
        :param attribute_group_id: The attribute_group_id of this CatalogProductAttributeManagementV1AssignPostRequest.
        :param attribute_set_id: The attribute_set_id of this CatalogProductAttributeManagementV1AssignPostRequest.
        :param sort_order: The sort_order of this CatalogProductAttributeManagementV1AssignPostRequest.
        """
        self.openapi_types = {
            'attribute_code': str,
            'attribute_group_id': int,
            'attribute_set_id': int,
            'sort_order': int
        }

        self.attribute_map = {
            'attribute_code': 'attributeCode',
            'attribute_group_id': 'attributeGroupId',
            'attribute_set_id': 'attributeSetId',
            'sort_order': 'sortOrder'
        }

        self._attribute_code = attribute_code
        self._attribute_group_id = attribute_group_id
        self._attribute_set_id = attribute_set_id
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogProductAttributeManagementV1AssignPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalogProductAttributeManagementV1AssignPost_request of this CatalogProductAttributeManagementV1AssignPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_code(self):
        """Gets the attribute_code of this CatalogProductAttributeManagementV1AssignPostRequest.


        :return: The attribute_code of this CatalogProductAttributeManagementV1AssignPostRequest.
        :rtype: str
        """
        return self._attribute_code

    @attribute_code.setter
    def attribute_code(self, attribute_code):
        """Sets the attribute_code of this CatalogProductAttributeManagementV1AssignPostRequest.


        :param attribute_code: The attribute_code of this CatalogProductAttributeManagementV1AssignPostRequest.
        :type attribute_code: str
        """
        if attribute_code is None:
            raise ValueError("Invalid value for `attribute_code`, must not be `None`")

        self._attribute_code = attribute_code

    @property
    def attribute_group_id(self):
        """Gets the attribute_group_id of this CatalogProductAttributeManagementV1AssignPostRequest.


        :return: The attribute_group_id of this CatalogProductAttributeManagementV1AssignPostRequest.
        :rtype: int
        """
        return self._attribute_group_id

    @attribute_group_id.setter
    def attribute_group_id(self, attribute_group_id):
        """Sets the attribute_group_id of this CatalogProductAttributeManagementV1AssignPostRequest.


        :param attribute_group_id: The attribute_group_id of this CatalogProductAttributeManagementV1AssignPostRequest.
        :type attribute_group_id: int
        """
        if attribute_group_id is None:
            raise ValueError("Invalid value for `attribute_group_id`, must not be `None`")

        self._attribute_group_id = attribute_group_id

    @property
    def attribute_set_id(self):
        """Gets the attribute_set_id of this CatalogProductAttributeManagementV1AssignPostRequest.


        :return: The attribute_set_id of this CatalogProductAttributeManagementV1AssignPostRequest.
        :rtype: int
        """
        return self._attribute_set_id

    @attribute_set_id.setter
    def attribute_set_id(self, attribute_set_id):
        """Sets the attribute_set_id of this CatalogProductAttributeManagementV1AssignPostRequest.


        :param attribute_set_id: The attribute_set_id of this CatalogProductAttributeManagementV1AssignPostRequest.
        :type attribute_set_id: int
        """
        if attribute_set_id is None:
            raise ValueError("Invalid value for `attribute_set_id`, must not be `None`")

        self._attribute_set_id = attribute_set_id

    @property
    def sort_order(self):
        """Gets the sort_order of this CatalogProductAttributeManagementV1AssignPostRequest.


        :return: The sort_order of this CatalogProductAttributeManagementV1AssignPostRequest.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this CatalogProductAttributeManagementV1AssignPostRequest.


        :param sort_order: The sort_order of this CatalogProductAttributeManagementV1AssignPostRequest.
        :type sort_order: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")

        self._sort_order = sort_order
