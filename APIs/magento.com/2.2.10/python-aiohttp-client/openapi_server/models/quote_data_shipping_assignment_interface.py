# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.quote_data_cart_item_interface import QuoteDataCartItemInterface
from openapi_server.models.quote_data_shipping_interface import QuoteDataShippingInterface
from openapi_server import util


class QuoteDataShippingAssignmentInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension_attributes: object=None, items: List[QuoteDataCartItemInterface]=None, shipping: QuoteDataShippingInterface=None):
        """QuoteDataShippingAssignmentInterface - a model defined in OpenAPI

        :param extension_attributes: The extension_attributes of this QuoteDataShippingAssignmentInterface.
        :param items: The items of this QuoteDataShippingAssignmentInterface.
        :param shipping: The shipping of this QuoteDataShippingAssignmentInterface.
        """
        self.openapi_types = {
            'extension_attributes': object,
            'items': List[QuoteDataCartItemInterface],
            'shipping': QuoteDataShippingInterface
        }

        self.attribute_map = {
            'extension_attributes': 'extension_attributes',
            'items': 'items',
            'shipping': 'shipping'
        }

        self._extension_attributes = extension_attributes
        self._items = items
        self._shipping = shipping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuoteDataShippingAssignmentInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The quote-data-shipping-assignment-interface of this QuoteDataShippingAssignmentInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this QuoteDataShippingAssignmentInterface.

        ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingAssignmentInterface

        :return: The extension_attributes of this QuoteDataShippingAssignmentInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this QuoteDataShippingAssignmentInterface.

        ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingAssignmentInterface

        :param extension_attributes: The extension_attributes of this QuoteDataShippingAssignmentInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def items(self):
        """Gets the items of this QuoteDataShippingAssignmentInterface.


        :return: The items of this QuoteDataShippingAssignmentInterface.
        :rtype: List[QuoteDataCartItemInterface]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this QuoteDataShippingAssignmentInterface.


        :param items: The items of this QuoteDataShippingAssignmentInterface.
        :type items: List[QuoteDataCartItemInterface]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def shipping(self):
        """Gets the shipping of this QuoteDataShippingAssignmentInterface.


        :return: The shipping of this QuoteDataShippingAssignmentInterface.
        :rtype: QuoteDataShippingInterface
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this QuoteDataShippingAssignmentInterface.


        :param shipping: The shipping of this QuoteDataShippingAssignmentInterface.
        :type shipping: QuoteDataShippingInterface
        """
        if shipping is None:
            raise ValueError("Invalid value for `shipping`, must not be `None`")

        self._shipping = shipping
