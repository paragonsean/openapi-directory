# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_data_product_attribute_media_gallery_entry_extension_interface import CatalogDataProductAttributeMediaGalleryEntryExtensionInterface
from openapi_server.models.framework_data_image_content_interface import FrameworkDataImageContentInterface
from openapi_server import util


class CatalogDataProductAttributeMediaGalleryEntryInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: FrameworkDataImageContentInterface=None, disabled: bool=None, extension_attributes: CatalogDataProductAttributeMediaGalleryEntryExtensionInterface=None, file: str=None, id: int=None, label: str=None, media_type: str=None, position: int=None, types: List[str]=None):
        """CatalogDataProductAttributeMediaGalleryEntryInterface - a model defined in OpenAPI

        :param content: The content of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :param disabled: The disabled of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :param extension_attributes: The extension_attributes of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :param file: The file of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :param id: The id of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :param label: The label of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :param media_type: The media_type of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :param position: The position of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :param types: The types of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        """
        self.openapi_types = {
            'content': FrameworkDataImageContentInterface,
            'disabled': bool,
            'extension_attributes': CatalogDataProductAttributeMediaGalleryEntryExtensionInterface,
            'file': str,
            'id': int,
            'label': str,
            'media_type': str,
            'position': int,
            'types': List[str]
        }

        self.attribute_map = {
            'content': 'content',
            'disabled': 'disabled',
            'extension_attributes': 'extension_attributes',
            'file': 'file',
            'id': 'id',
            'label': 'label',
            'media_type': 'media_type',
            'position': 'position',
            'types': 'types'
        }

        self._content = content
        self._disabled = disabled
        self._extension_attributes = extension_attributes
        self._file = file
        self._id = id
        self._label = label
        self._media_type = media_type
        self._position = position
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataProductAttributeMediaGalleryEntryInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-product-attribute-media-gallery-entry-interface of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this CatalogDataProductAttributeMediaGalleryEntryInterface.


        :return: The content of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: FrameworkDataImageContentInterface
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CatalogDataProductAttributeMediaGalleryEntryInterface.


        :param content: The content of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type content: FrameworkDataImageContentInterface
        """

        self._content = content

    @property
    def disabled(self):
        """Gets the disabled of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        If gallery entry is hidden from product page

        :return: The disabled of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        If gallery entry is hidden from product page

        :param disabled: The disabled of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type disabled: bool
        """
        if disabled is None:
            raise ValueError("Invalid value for `disabled`, must not be `None`")

        self._disabled = disabled

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CatalogDataProductAttributeMediaGalleryEntryInterface.


        :return: The extension_attributes of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: CatalogDataProductAttributeMediaGalleryEntryExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CatalogDataProductAttributeMediaGalleryEntryInterface.


        :param extension_attributes: The extension_attributes of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type extension_attributes: CatalogDataProductAttributeMediaGalleryEntryExtensionInterface
        """

        self._extension_attributes = extension_attributes

    @property
    def file(self):
        """Gets the file of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        File path

        :return: The file of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        File path

        :param file: The file of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type file: str
        """

        self._file = file

    @property
    def id(self):
        """Gets the id of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        Gallery entry ID

        :return: The id of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        Gallery entry ID

        :param id: The id of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type id: int
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        Gallery entry alternative text

        :return: The label of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        Gallery entry alternative text

        :param label: The label of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def media_type(self):
        """Gets the media_type of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        Media type

        :return: The media_type of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        Media type

        :param media_type: The media_type of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type media_type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")

        self._media_type = media_type

    @property
    def position(self):
        """Gets the position of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        Gallery entry position (sort order)

        :return: The position of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        Gallery entry position (sort order)

        :param position: The position of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def types(self):
        """Gets the types of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        Gallery entry image types (thumbnail, image, small_image etc)

        :return: The types of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        Gallery entry image types (thumbnail, image, small_image etc)

        :param types: The types of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type types: List[str]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")

        self._types = types
