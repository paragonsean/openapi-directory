# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerAccountManagementV1ResendConfirmationPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, redirect_url: str=None, website_id: int=None):
        """CustomerAccountManagementV1ResendConfirmationPostRequest - a model defined in OpenAPI

        :param email: The email of this CustomerAccountManagementV1ResendConfirmationPostRequest.
        :param redirect_url: The redirect_url of this CustomerAccountManagementV1ResendConfirmationPostRequest.
        :param website_id: The website_id of this CustomerAccountManagementV1ResendConfirmationPostRequest.
        """
        self.openapi_types = {
            'email': str,
            'redirect_url': str,
            'website_id': int
        }

        self.attribute_map = {
            'email': 'email',
            'redirect_url': 'redirectUrl',
            'website_id': 'websiteId'
        }

        self._email = email
        self._redirect_url = redirect_url
        self._website_id = website_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerAccountManagementV1ResendConfirmationPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customerAccountManagementV1ResendConfirmationPost_request of this CustomerAccountManagementV1ResendConfirmationPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this CustomerAccountManagementV1ResendConfirmationPostRequest.


        :return: The email of this CustomerAccountManagementV1ResendConfirmationPostRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerAccountManagementV1ResendConfirmationPostRequest.


        :param email: The email of this CustomerAccountManagementV1ResendConfirmationPostRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def redirect_url(self):
        """Gets the redirect_url of this CustomerAccountManagementV1ResendConfirmationPostRequest.


        :return: The redirect_url of this CustomerAccountManagementV1ResendConfirmationPostRequest.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this CustomerAccountManagementV1ResendConfirmationPostRequest.


        :param redirect_url: The redirect_url of this CustomerAccountManagementV1ResendConfirmationPostRequest.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def website_id(self):
        """Gets the website_id of this CustomerAccountManagementV1ResendConfirmationPostRequest.


        :return: The website_id of this CustomerAccountManagementV1ResendConfirmationPostRequest.
        :rtype: int
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this CustomerAccountManagementV1ResendConfirmationPostRequest.


        :param website_id: The website_id of this CustomerAccountManagementV1ResendConfirmationPostRequest.
        :type website_id: int
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")

        self._website_id = website_id
