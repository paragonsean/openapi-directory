# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FrameworkDataVideoContentInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, media_type: str=None, video_description: str=None, video_metadata: str=None, video_provider: str=None, video_title: str=None, video_url: str=None):
        """FrameworkDataVideoContentInterface - a model defined in OpenAPI

        :param media_type: The media_type of this FrameworkDataVideoContentInterface.
        :param video_description: The video_description of this FrameworkDataVideoContentInterface.
        :param video_metadata: The video_metadata of this FrameworkDataVideoContentInterface.
        :param video_provider: The video_provider of this FrameworkDataVideoContentInterface.
        :param video_title: The video_title of this FrameworkDataVideoContentInterface.
        :param video_url: The video_url of this FrameworkDataVideoContentInterface.
        """
        self.openapi_types = {
            'media_type': str,
            'video_description': str,
            'video_metadata': str,
            'video_provider': str,
            'video_title': str,
            'video_url': str
        }

        self.attribute_map = {
            'media_type': 'media_type',
            'video_description': 'video_description',
            'video_metadata': 'video_metadata',
            'video_provider': 'video_provider',
            'video_title': 'video_title',
            'video_url': 'video_url'
        }

        self._media_type = media_type
        self._video_description = video_description
        self._video_metadata = video_metadata
        self._video_provider = video_provider
        self._video_title = video_title
        self._video_url = video_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrameworkDataVideoContentInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The framework-data-video-content-interface of this FrameworkDataVideoContentInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def media_type(self):
        """Gets the media_type of this FrameworkDataVideoContentInterface.

        MIME type

        :return: The media_type of this FrameworkDataVideoContentInterface.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this FrameworkDataVideoContentInterface.

        MIME type

        :param media_type: The media_type of this FrameworkDataVideoContentInterface.
        :type media_type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")

        self._media_type = media_type

    @property
    def video_description(self):
        """Gets the video_description of this FrameworkDataVideoContentInterface.

        Video Description

        :return: The video_description of this FrameworkDataVideoContentInterface.
        :rtype: str
        """
        return self._video_description

    @video_description.setter
    def video_description(self, video_description):
        """Sets the video_description of this FrameworkDataVideoContentInterface.

        Video Description

        :param video_description: The video_description of this FrameworkDataVideoContentInterface.
        :type video_description: str
        """
        if video_description is None:
            raise ValueError("Invalid value for `video_description`, must not be `None`")

        self._video_description = video_description

    @property
    def video_metadata(self):
        """Gets the video_metadata of this FrameworkDataVideoContentInterface.

        Metadata

        :return: The video_metadata of this FrameworkDataVideoContentInterface.
        :rtype: str
        """
        return self._video_metadata

    @video_metadata.setter
    def video_metadata(self, video_metadata):
        """Sets the video_metadata of this FrameworkDataVideoContentInterface.

        Metadata

        :param video_metadata: The video_metadata of this FrameworkDataVideoContentInterface.
        :type video_metadata: str
        """
        if video_metadata is None:
            raise ValueError("Invalid value for `video_metadata`, must not be `None`")

        self._video_metadata = video_metadata

    @property
    def video_provider(self):
        """Gets the video_provider of this FrameworkDataVideoContentInterface.

        Provider

        :return: The video_provider of this FrameworkDataVideoContentInterface.
        :rtype: str
        """
        return self._video_provider

    @video_provider.setter
    def video_provider(self, video_provider):
        """Sets the video_provider of this FrameworkDataVideoContentInterface.

        Provider

        :param video_provider: The video_provider of this FrameworkDataVideoContentInterface.
        :type video_provider: str
        """
        if video_provider is None:
            raise ValueError("Invalid value for `video_provider`, must not be `None`")

        self._video_provider = video_provider

    @property
    def video_title(self):
        """Gets the video_title of this FrameworkDataVideoContentInterface.

        Title

        :return: The video_title of this FrameworkDataVideoContentInterface.
        :rtype: str
        """
        return self._video_title

    @video_title.setter
    def video_title(self, video_title):
        """Sets the video_title of this FrameworkDataVideoContentInterface.

        Title

        :param video_title: The video_title of this FrameworkDataVideoContentInterface.
        :type video_title: str
        """
        if video_title is None:
            raise ValueError("Invalid value for `video_title`, must not be `None`")

        self._video_title = video_title

    @property
    def video_url(self):
        """Gets the video_url of this FrameworkDataVideoContentInterface.

        Video URL

        :return: The video_url of this FrameworkDataVideoContentInterface.
        :rtype: str
        """
        return self._video_url

    @video_url.setter
    def video_url(self, video_url):
        """Sets the video_url of this FrameworkDataVideoContentInterface.

        Video URL

        :param video_url: The video_url of this FrameworkDataVideoContentInterface.
        :type video_url: str
        """
        if video_url is None:
            raise ValueError("Invalid value for `video_url`, must not be `None`")

        self._video_url = video_url
