# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesRuleDataCouponGenerationSpecInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delimiter: str=None, delimiter_at_every: int=None, extension_attributes: object=None, format: str=None, length: int=None, prefix: str=None, quantity: int=None, rule_id: int=None, suffix: str=None):
        """SalesRuleDataCouponGenerationSpecInterface - a model defined in OpenAPI

        :param delimiter: The delimiter of this SalesRuleDataCouponGenerationSpecInterface.
        :param delimiter_at_every: The delimiter_at_every of this SalesRuleDataCouponGenerationSpecInterface.
        :param extension_attributes: The extension_attributes of this SalesRuleDataCouponGenerationSpecInterface.
        :param format: The format of this SalesRuleDataCouponGenerationSpecInterface.
        :param length: The length of this SalesRuleDataCouponGenerationSpecInterface.
        :param prefix: The prefix of this SalesRuleDataCouponGenerationSpecInterface.
        :param quantity: The quantity of this SalesRuleDataCouponGenerationSpecInterface.
        :param rule_id: The rule_id of this SalesRuleDataCouponGenerationSpecInterface.
        :param suffix: The suffix of this SalesRuleDataCouponGenerationSpecInterface.
        """
        self.openapi_types = {
            'delimiter': str,
            'delimiter_at_every': int,
            'extension_attributes': object,
            'format': str,
            'length': int,
            'prefix': str,
            'quantity': int,
            'rule_id': int,
            'suffix': str
        }

        self.attribute_map = {
            'delimiter': 'delimiter',
            'delimiter_at_every': 'delimiter_at_every',
            'extension_attributes': 'extension_attributes',
            'format': 'format',
            'length': 'length',
            'prefix': 'prefix',
            'quantity': 'quantity',
            'rule_id': 'rule_id',
            'suffix': 'suffix'
        }

        self._delimiter = delimiter
        self._delimiter_at_every = delimiter_at_every
        self._extension_attributes = extension_attributes
        self._format = format
        self._length = length
        self._prefix = prefix
        self._quantity = quantity
        self._rule_id = rule_id
        self._suffix = suffix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesRuleDataCouponGenerationSpecInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sales-rule-data-coupon-generation-spec-interface of this SalesRuleDataCouponGenerationSpecInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delimiter(self):
        """Gets the delimiter of this SalesRuleDataCouponGenerationSpecInterface.

        The delimiter

        :return: The delimiter of this SalesRuleDataCouponGenerationSpecInterface.
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this SalesRuleDataCouponGenerationSpecInterface.

        The delimiter

        :param delimiter: The delimiter of this SalesRuleDataCouponGenerationSpecInterface.
        :type delimiter: str
        """

        self._delimiter = delimiter

    @property
    def delimiter_at_every(self):
        """Gets the delimiter_at_every of this SalesRuleDataCouponGenerationSpecInterface.

        The spacing where the delimiter should exist

        :return: The delimiter_at_every of this SalesRuleDataCouponGenerationSpecInterface.
        :rtype: int
        """
        return self._delimiter_at_every

    @delimiter_at_every.setter
    def delimiter_at_every(self, delimiter_at_every):
        """Sets the delimiter_at_every of this SalesRuleDataCouponGenerationSpecInterface.

        The spacing where the delimiter should exist

        :param delimiter_at_every: The delimiter_at_every of this SalesRuleDataCouponGenerationSpecInterface.
        :type delimiter_at_every: int
        """

        self._delimiter_at_every = delimiter_at_every

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this SalesRuleDataCouponGenerationSpecInterface.

        ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\CouponGenerationSpecInterface

        :return: The extension_attributes of this SalesRuleDataCouponGenerationSpecInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this SalesRuleDataCouponGenerationSpecInterface.

        ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\CouponGenerationSpecInterface

        :param extension_attributes: The extension_attributes of this SalesRuleDataCouponGenerationSpecInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def format(self):
        """Gets the format of this SalesRuleDataCouponGenerationSpecInterface.

        Format of generated coupon code

        :return: The format of this SalesRuleDataCouponGenerationSpecInterface.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this SalesRuleDataCouponGenerationSpecInterface.

        Format of generated coupon code

        :param format: The format of this SalesRuleDataCouponGenerationSpecInterface.
        :type format: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def length(self):
        """Gets the length of this SalesRuleDataCouponGenerationSpecInterface.

        Length of coupon code

        :return: The length of this SalesRuleDataCouponGenerationSpecInterface.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this SalesRuleDataCouponGenerationSpecInterface.

        Length of coupon code

        :param length: The length of this SalesRuleDataCouponGenerationSpecInterface.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def prefix(self):
        """Gets the prefix of this SalesRuleDataCouponGenerationSpecInterface.

        The prefix

        :return: The prefix of this SalesRuleDataCouponGenerationSpecInterface.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this SalesRuleDataCouponGenerationSpecInterface.

        The prefix

        :param prefix: The prefix of this SalesRuleDataCouponGenerationSpecInterface.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def quantity(self):
        """Gets the quantity of this SalesRuleDataCouponGenerationSpecInterface.

        Of coupons to generate

        :return: The quantity of this SalesRuleDataCouponGenerationSpecInterface.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SalesRuleDataCouponGenerationSpecInterface.

        Of coupons to generate

        :param quantity: The quantity of this SalesRuleDataCouponGenerationSpecInterface.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def rule_id(self):
        """Gets the rule_id of this SalesRuleDataCouponGenerationSpecInterface.

        The id of the rule associated with the coupon

        :return: The rule_id of this SalesRuleDataCouponGenerationSpecInterface.
        :rtype: int
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this SalesRuleDataCouponGenerationSpecInterface.

        The id of the rule associated with the coupon

        :param rule_id: The rule_id of this SalesRuleDataCouponGenerationSpecInterface.
        :type rule_id: int
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id

    @property
    def suffix(self):
        """Gets the suffix of this SalesRuleDataCouponGenerationSpecInterface.

        The suffix

        :return: The suffix of this SalesRuleDataCouponGenerationSpecInterface.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this SalesRuleDataCouponGenerationSpecInterface.

        The suffix

        :param suffix: The suffix of this SalesRuleDataCouponGenerationSpecInterface.
        :type suffix: str
        """

        self._suffix = suffix
