# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RmaDataItemInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: str=None, entity_id: int=None, extension_attributes: object=None, order_item_id: int=None, qty_approved: int=None, qty_authorized: int=None, qty_requested: int=None, qty_returned: int=None, reason: str=None, resolution: str=None, rma_entity_id: int=None, status: str=None):
        """RmaDataItemInterface - a model defined in OpenAPI

        :param condition: The condition of this RmaDataItemInterface.
        :param entity_id: The entity_id of this RmaDataItemInterface.
        :param extension_attributes: The extension_attributes of this RmaDataItemInterface.
        :param order_item_id: The order_item_id of this RmaDataItemInterface.
        :param qty_approved: The qty_approved of this RmaDataItemInterface.
        :param qty_authorized: The qty_authorized of this RmaDataItemInterface.
        :param qty_requested: The qty_requested of this RmaDataItemInterface.
        :param qty_returned: The qty_returned of this RmaDataItemInterface.
        :param reason: The reason of this RmaDataItemInterface.
        :param resolution: The resolution of this RmaDataItemInterface.
        :param rma_entity_id: The rma_entity_id of this RmaDataItemInterface.
        :param status: The status of this RmaDataItemInterface.
        """
        self.openapi_types = {
            'condition': str,
            'entity_id': int,
            'extension_attributes': object,
            'order_item_id': int,
            'qty_approved': int,
            'qty_authorized': int,
            'qty_requested': int,
            'qty_returned': int,
            'reason': str,
            'resolution': str,
            'rma_entity_id': int,
            'status': str
        }

        self.attribute_map = {
            'condition': 'condition',
            'entity_id': 'entity_id',
            'extension_attributes': 'extension_attributes',
            'order_item_id': 'order_item_id',
            'qty_approved': 'qty_approved',
            'qty_authorized': 'qty_authorized',
            'qty_requested': 'qty_requested',
            'qty_returned': 'qty_returned',
            'reason': 'reason',
            'resolution': 'resolution',
            'rma_entity_id': 'rma_entity_id',
            'status': 'status'
        }

        self._condition = condition
        self._entity_id = entity_id
        self._extension_attributes = extension_attributes
        self._order_item_id = order_item_id
        self._qty_approved = qty_approved
        self._qty_authorized = qty_authorized
        self._qty_requested = qty_requested
        self._qty_returned = qty_returned
        self._reason = reason
        self._resolution = resolution
        self._rma_entity_id = rma_entity_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RmaDataItemInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rma-data-item-interface of this RmaDataItemInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this RmaDataItemInterface.

        Condition

        :return: The condition of this RmaDataItemInterface.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this RmaDataItemInterface.

        Condition

        :param condition: The condition of this RmaDataItemInterface.
        :type condition: str
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")

        self._condition = condition

    @property
    def entity_id(self):
        """Gets the entity_id of this RmaDataItemInterface.

        Id

        :return: The entity_id of this RmaDataItemInterface.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this RmaDataItemInterface.

        Id

        :param entity_id: The entity_id of this RmaDataItemInterface.
        :type entity_id: int
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this RmaDataItemInterface.

        ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\ItemInterface

        :return: The extension_attributes of this RmaDataItemInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this RmaDataItemInterface.

        ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\ItemInterface

        :param extension_attributes: The extension_attributes of this RmaDataItemInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def order_item_id(self):
        """Gets the order_item_id of this RmaDataItemInterface.

        Order_item_id

        :return: The order_item_id of this RmaDataItemInterface.
        :rtype: int
        """
        return self._order_item_id

    @order_item_id.setter
    def order_item_id(self, order_item_id):
        """Sets the order_item_id of this RmaDataItemInterface.

        Order_item_id

        :param order_item_id: The order_item_id of this RmaDataItemInterface.
        :type order_item_id: int
        """
        if order_item_id is None:
            raise ValueError("Invalid value for `order_item_id`, must not be `None`")

        self._order_item_id = order_item_id

    @property
    def qty_approved(self):
        """Gets the qty_approved of this RmaDataItemInterface.

        Qty_approved

        :return: The qty_approved of this RmaDataItemInterface.
        :rtype: int
        """
        return self._qty_approved

    @qty_approved.setter
    def qty_approved(self, qty_approved):
        """Sets the qty_approved of this RmaDataItemInterface.

        Qty_approved

        :param qty_approved: The qty_approved of this RmaDataItemInterface.
        :type qty_approved: int
        """
        if qty_approved is None:
            raise ValueError("Invalid value for `qty_approved`, must not be `None`")

        self._qty_approved = qty_approved

    @property
    def qty_authorized(self):
        """Gets the qty_authorized of this RmaDataItemInterface.

        Qty_authorized

        :return: The qty_authorized of this RmaDataItemInterface.
        :rtype: int
        """
        return self._qty_authorized

    @qty_authorized.setter
    def qty_authorized(self, qty_authorized):
        """Sets the qty_authorized of this RmaDataItemInterface.

        Qty_authorized

        :param qty_authorized: The qty_authorized of this RmaDataItemInterface.
        :type qty_authorized: int
        """
        if qty_authorized is None:
            raise ValueError("Invalid value for `qty_authorized`, must not be `None`")

        self._qty_authorized = qty_authorized

    @property
    def qty_requested(self):
        """Gets the qty_requested of this RmaDataItemInterface.

        Qty_requested

        :return: The qty_requested of this RmaDataItemInterface.
        :rtype: int
        """
        return self._qty_requested

    @qty_requested.setter
    def qty_requested(self, qty_requested):
        """Sets the qty_requested of this RmaDataItemInterface.

        Qty_requested

        :param qty_requested: The qty_requested of this RmaDataItemInterface.
        :type qty_requested: int
        """
        if qty_requested is None:
            raise ValueError("Invalid value for `qty_requested`, must not be `None`")

        self._qty_requested = qty_requested

    @property
    def qty_returned(self):
        """Gets the qty_returned of this RmaDataItemInterface.

        Qty_returned

        :return: The qty_returned of this RmaDataItemInterface.
        :rtype: int
        """
        return self._qty_returned

    @qty_returned.setter
    def qty_returned(self, qty_returned):
        """Sets the qty_returned of this RmaDataItemInterface.

        Qty_returned

        :param qty_returned: The qty_returned of this RmaDataItemInterface.
        :type qty_returned: int
        """
        if qty_returned is None:
            raise ValueError("Invalid value for `qty_returned`, must not be `None`")

        self._qty_returned = qty_returned

    @property
    def reason(self):
        """Gets the reason of this RmaDataItemInterface.

        Reason

        :return: The reason of this RmaDataItemInterface.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this RmaDataItemInterface.

        Reason

        :param reason: The reason of this RmaDataItemInterface.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def resolution(self):
        """Gets the resolution of this RmaDataItemInterface.

        Resolution

        :return: The resolution of this RmaDataItemInterface.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this RmaDataItemInterface.

        Resolution

        :param resolution: The resolution of this RmaDataItemInterface.
        :type resolution: str
        """
        if resolution is None:
            raise ValueError("Invalid value for `resolution`, must not be `None`")

        self._resolution = resolution

    @property
    def rma_entity_id(self):
        """Gets the rma_entity_id of this RmaDataItemInterface.

        RMA id

        :return: The rma_entity_id of this RmaDataItemInterface.
        :rtype: int
        """
        return self._rma_entity_id

    @rma_entity_id.setter
    def rma_entity_id(self, rma_entity_id):
        """Sets the rma_entity_id of this RmaDataItemInterface.

        RMA id

        :param rma_entity_id: The rma_entity_id of this RmaDataItemInterface.
        :type rma_entity_id: int
        """
        if rma_entity_id is None:
            raise ValueError("Invalid value for `rma_entity_id`, must not be `None`")

        self._rma_entity_id = rma_entity_id

    @property
    def status(self):
        """Gets the status of this RmaDataItemInterface.

        Status

        :return: The status of this RmaDataItemInterface.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RmaDataItemInterface.

        Status

        :param status: The status of this RmaDataItemInterface.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
