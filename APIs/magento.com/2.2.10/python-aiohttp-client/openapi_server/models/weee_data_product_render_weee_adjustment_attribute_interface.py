# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WeeeDataProductRenderWeeeAdjustmentAttributeInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: str=None, amount_excl_tax: str=None, attribute_code: str=None, extension_attributes: object=None, tax_amount: str=None, tax_amount_incl_tax: str=None):
        """WeeeDataProductRenderWeeeAdjustmentAttributeInterface - a model defined in OpenAPI

        :param amount: The amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :param amount_excl_tax: The amount_excl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :param attribute_code: The attribute_code of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :param extension_attributes: The extension_attributes of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :param tax_amount: The tax_amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :param tax_amount_incl_tax: The tax_amount_incl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        """
        self.openapi_types = {
            'amount': str,
            'amount_excl_tax': str,
            'attribute_code': str,
            'extension_attributes': object,
            'tax_amount': str,
            'tax_amount_incl_tax': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'amount_excl_tax': 'amount_excl_tax',
            'attribute_code': 'attribute_code',
            'extension_attributes': 'extension_attributes',
            'tax_amount': 'tax_amount',
            'tax_amount_incl_tax': 'tax_amount_incl_tax'
        }

        self._amount = amount
        self._amount_excl_tax = amount_excl_tax
        self._attribute_code = attribute_code
        self._extension_attributes = extension_attributes
        self._tax_amount = tax_amount
        self._tax_amount_incl_tax = tax_amount_incl_tax

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WeeeDataProductRenderWeeeAdjustmentAttributeInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The weee-data-product-render-weee-adjustment-attribute-interface of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.

        Weee attribute amount

        :return: The amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.

        Weee attribute amount

        :param amount: The amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :type amount: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def amount_excl_tax(self):
        """Gets the amount_excl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.

        Product amount exclude tax

        :return: The amount_excl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :rtype: str
        """
        return self._amount_excl_tax

    @amount_excl_tax.setter
    def amount_excl_tax(self, amount_excl_tax):
        """Sets the amount_excl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.

        Product amount exclude tax

        :param amount_excl_tax: The amount_excl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :type amount_excl_tax: str
        """
        if amount_excl_tax is None:
            raise ValueError("Invalid value for `amount_excl_tax`, must not be `None`")

        self._amount_excl_tax = amount_excl_tax

    @property
    def attribute_code(self):
        """Gets the attribute_code of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.

        Weee attribute code

        :return: The attribute_code of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :rtype: str
        """
        return self._attribute_code

    @attribute_code.setter
    def attribute_code(self, attribute_code):
        """Sets the attribute_code of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.

        Weee attribute code

        :param attribute_code: The attribute_code of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :type attribute_code: str
        """
        if attribute_code is None:
            raise ValueError("Invalid value for `attribute_code`, must not be `None`")

        self._attribute_code = attribute_code

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.

        ExtensionInterface class for @see \\Magento\\Weee\\Api\\Data\\ProductRender\\WeeeAdjustmentAttributeInterface

        :return: The extension_attributes of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.

        ExtensionInterface class for @see \\Magento\\Weee\\Api\\Data\\ProductRender\\WeeeAdjustmentAttributeInterface

        :param extension_attributes: The extension_attributes of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :type extension_attributes: object
        """
        if extension_attributes is None:
            raise ValueError("Invalid value for `extension_attributes`, must not be `None`")

        self._extension_attributes = extension_attributes

    @property
    def tax_amount(self):
        """Gets the tax_amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.

        Tax which is calculated to fixed product tax attribute

        :return: The tax_amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :rtype: str
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.

        Tax which is calculated to fixed product tax attribute

        :param tax_amount: The tax_amount of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :type tax_amount: str
        """
        if tax_amount is None:
            raise ValueError("Invalid value for `tax_amount`, must not be `None`")

        self._tax_amount = tax_amount

    @property
    def tax_amount_incl_tax(self):
        """Gets the tax_amount_incl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.

        Tax amount of weee attribute

        :return: The tax_amount_incl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :rtype: str
        """
        return self._tax_amount_incl_tax

    @tax_amount_incl_tax.setter
    def tax_amount_incl_tax(self, tax_amount_incl_tax):
        """Sets the tax_amount_incl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.

        Tax amount of weee attribute

        :param tax_amount_incl_tax: The tax_amount_incl_tax of this WeeeDataProductRenderWeeeAdjustmentAttributeInterface.
        :type tax_amount_incl_tax: str
        """
        if tax_amount_incl_tax is None:
            raise ValueError("Invalid value for `tax_amount_incl_tax`, must not be `None`")

        self._tax_amount_incl_tax = tax_amount_incl_tax
