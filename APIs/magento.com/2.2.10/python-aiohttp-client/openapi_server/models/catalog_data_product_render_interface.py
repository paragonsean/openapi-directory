# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_data_product_render_button_interface import CatalogDataProductRenderButtonInterface
from openapi_server.models.catalog_data_product_render_extension_interface import CatalogDataProductRenderExtensionInterface
from openapi_server.models.catalog_data_product_render_image_interface import CatalogDataProductRenderImageInterface
from openapi_server.models.catalog_data_product_render_price_info_interface import CatalogDataProductRenderPriceInfoInterface
from openapi_server import util


class CatalogDataProductRenderInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_to_cart_button: CatalogDataProductRenderButtonInterface=None, add_to_compare_button: CatalogDataProductRenderButtonInterface=None, currency_code: str=None, extension_attributes: CatalogDataProductRenderExtensionInterface=None, id: int=None, images: List[CatalogDataProductRenderImageInterface]=None, is_salable: str=None, name: str=None, price_info: CatalogDataProductRenderPriceInfoInterface=None, store_id: int=None, type: str=None, url: str=None):
        """CatalogDataProductRenderInterface - a model defined in OpenAPI

        :param add_to_cart_button: The add_to_cart_button of this CatalogDataProductRenderInterface.
        :param add_to_compare_button: The add_to_compare_button of this CatalogDataProductRenderInterface.
        :param currency_code: The currency_code of this CatalogDataProductRenderInterface.
        :param extension_attributes: The extension_attributes of this CatalogDataProductRenderInterface.
        :param id: The id of this CatalogDataProductRenderInterface.
        :param images: The images of this CatalogDataProductRenderInterface.
        :param is_salable: The is_salable of this CatalogDataProductRenderInterface.
        :param name: The name of this CatalogDataProductRenderInterface.
        :param price_info: The price_info of this CatalogDataProductRenderInterface.
        :param store_id: The store_id of this CatalogDataProductRenderInterface.
        :param type: The type of this CatalogDataProductRenderInterface.
        :param url: The url of this CatalogDataProductRenderInterface.
        """
        self.openapi_types = {
            'add_to_cart_button': CatalogDataProductRenderButtonInterface,
            'add_to_compare_button': CatalogDataProductRenderButtonInterface,
            'currency_code': str,
            'extension_attributes': CatalogDataProductRenderExtensionInterface,
            'id': int,
            'images': List[CatalogDataProductRenderImageInterface],
            'is_salable': str,
            'name': str,
            'price_info': CatalogDataProductRenderPriceInfoInterface,
            'store_id': int,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'add_to_cart_button': 'add_to_cart_button',
            'add_to_compare_button': 'add_to_compare_button',
            'currency_code': 'currency_code',
            'extension_attributes': 'extension_attributes',
            'id': 'id',
            'images': 'images',
            'is_salable': 'is_salable',
            'name': 'name',
            'price_info': 'price_info',
            'store_id': 'store_id',
            'type': 'type',
            'url': 'url'
        }

        self._add_to_cart_button = add_to_cart_button
        self._add_to_compare_button = add_to_compare_button
        self._currency_code = currency_code
        self._extension_attributes = extension_attributes
        self._id = id
        self._images = images
        self._is_salable = is_salable
        self._name = name
        self._price_info = price_info
        self._store_id = store_id
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogDataProductRenderInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The catalog-data-product-render-interface of this CatalogDataProductRenderInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_to_cart_button(self):
        """Gets the add_to_cart_button of this CatalogDataProductRenderInterface.


        :return: The add_to_cart_button of this CatalogDataProductRenderInterface.
        :rtype: CatalogDataProductRenderButtonInterface
        """
        return self._add_to_cart_button

    @add_to_cart_button.setter
    def add_to_cart_button(self, add_to_cart_button):
        """Sets the add_to_cart_button of this CatalogDataProductRenderInterface.


        :param add_to_cart_button: The add_to_cart_button of this CatalogDataProductRenderInterface.
        :type add_to_cart_button: CatalogDataProductRenderButtonInterface
        """
        if add_to_cart_button is None:
            raise ValueError("Invalid value for `add_to_cart_button`, must not be `None`")

        self._add_to_cart_button = add_to_cart_button

    @property
    def add_to_compare_button(self):
        """Gets the add_to_compare_button of this CatalogDataProductRenderInterface.


        :return: The add_to_compare_button of this CatalogDataProductRenderInterface.
        :rtype: CatalogDataProductRenderButtonInterface
        """
        return self._add_to_compare_button

    @add_to_compare_button.setter
    def add_to_compare_button(self, add_to_compare_button):
        """Sets the add_to_compare_button of this CatalogDataProductRenderInterface.


        :param add_to_compare_button: The add_to_compare_button of this CatalogDataProductRenderInterface.
        :type add_to_compare_button: CatalogDataProductRenderButtonInterface
        """
        if add_to_compare_button is None:
            raise ValueError("Invalid value for `add_to_compare_button`, must not be `None`")

        self._add_to_compare_button = add_to_compare_button

    @property
    def currency_code(self):
        """Gets the currency_code of this CatalogDataProductRenderInterface.

        Current or desired currency code to product

        :return: The currency_code of this CatalogDataProductRenderInterface.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CatalogDataProductRenderInterface.

        Current or desired currency code to product

        :param currency_code: The currency_code of this CatalogDataProductRenderInterface.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this CatalogDataProductRenderInterface.


        :return: The extension_attributes of this CatalogDataProductRenderInterface.
        :rtype: CatalogDataProductRenderExtensionInterface
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this CatalogDataProductRenderInterface.


        :param extension_attributes: The extension_attributes of this CatalogDataProductRenderInterface.
        :type extension_attributes: CatalogDataProductRenderExtensionInterface
        """
        if extension_attributes is None:
            raise ValueError("Invalid value for `extension_attributes`, must not be `None`")

        self._extension_attributes = extension_attributes

    @property
    def id(self):
        """Gets the id of this CatalogDataProductRenderInterface.

        Product identifier

        :return: The id of this CatalogDataProductRenderInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogDataProductRenderInterface.

        Product identifier

        :param id: The id of this CatalogDataProductRenderInterface.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this CatalogDataProductRenderInterface.

        Enough information, that needed to render image on front

        :return: The images of this CatalogDataProductRenderInterface.
        :rtype: List[CatalogDataProductRenderImageInterface]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this CatalogDataProductRenderInterface.

        Enough information, that needed to render image on front

        :param images: The images of this CatalogDataProductRenderInterface.
        :type images: List[CatalogDataProductRenderImageInterface]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def is_salable(self):
        """Gets the is_salable of this CatalogDataProductRenderInterface.

        Information about product saleability (In Stock)

        :return: The is_salable of this CatalogDataProductRenderInterface.
        :rtype: str
        """
        return self._is_salable

    @is_salable.setter
    def is_salable(self, is_salable):
        """Sets the is_salable of this CatalogDataProductRenderInterface.

        Information about product saleability (In Stock)

        :param is_salable: The is_salable of this CatalogDataProductRenderInterface.
        :type is_salable: str
        """
        if is_salable is None:
            raise ValueError("Invalid value for `is_salable`, must not be `None`")

        self._is_salable = is_salable

    @property
    def name(self):
        """Gets the name of this CatalogDataProductRenderInterface.

        Product name

        :return: The name of this CatalogDataProductRenderInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogDataProductRenderInterface.

        Product name

        :param name: The name of this CatalogDataProductRenderInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def price_info(self):
        """Gets the price_info of this CatalogDataProductRenderInterface.


        :return: The price_info of this CatalogDataProductRenderInterface.
        :rtype: CatalogDataProductRenderPriceInfoInterface
        """
        return self._price_info

    @price_info.setter
    def price_info(self, price_info):
        """Sets the price_info of this CatalogDataProductRenderInterface.


        :param price_info: The price_info of this CatalogDataProductRenderInterface.
        :type price_info: CatalogDataProductRenderPriceInfoInterface
        """
        if price_info is None:
            raise ValueError("Invalid value for `price_info`, must not be `None`")

        self._price_info = price_info

    @property
    def store_id(self):
        """Gets the store_id of this CatalogDataProductRenderInterface.

        Information about current store id or requested store id

        :return: The store_id of this CatalogDataProductRenderInterface.
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this CatalogDataProductRenderInterface.

        Information about current store id or requested store id

        :param store_id: The store_id of this CatalogDataProductRenderInterface.
        :type store_id: int
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id

    @property
    def type(self):
        """Gets the type of this CatalogDataProductRenderInterface.

        Product type. Such as bundle, grouped, simple, etc...

        :return: The type of this CatalogDataProductRenderInterface.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CatalogDataProductRenderInterface.

        Product type. Such as bundle, grouped, simple, etc...

        :param type: The type of this CatalogDataProductRenderInterface.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def url(self):
        """Gets the url of this CatalogDataProductRenderInterface.

        Product url

        :return: The url of this CatalogDataProductRenderInterface.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CatalogDataProductRenderInterface.

        Product url

        :param url: The url of this CatalogDataProductRenderInterface.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
