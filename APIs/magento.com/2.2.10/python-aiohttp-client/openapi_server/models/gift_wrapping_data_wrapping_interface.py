# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GiftWrappingDataWrappingInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_currency_code: str=None, base_price: float=None, design: str=None, extension_attributes: object=None, image_base64_content: str=None, image_name: str=None, image_url: str=None, status: int=None, website_ids: List[int]=None, wrapping_id: int=None):
        """GiftWrappingDataWrappingInterface - a model defined in OpenAPI

        :param base_currency_code: The base_currency_code of this GiftWrappingDataWrappingInterface.
        :param base_price: The base_price of this GiftWrappingDataWrappingInterface.
        :param design: The design of this GiftWrappingDataWrappingInterface.
        :param extension_attributes: The extension_attributes of this GiftWrappingDataWrappingInterface.
        :param image_base64_content: The image_base64_content of this GiftWrappingDataWrappingInterface.
        :param image_name: The image_name of this GiftWrappingDataWrappingInterface.
        :param image_url: The image_url of this GiftWrappingDataWrappingInterface.
        :param status: The status of this GiftWrappingDataWrappingInterface.
        :param website_ids: The website_ids of this GiftWrappingDataWrappingInterface.
        :param wrapping_id: The wrapping_id of this GiftWrappingDataWrappingInterface.
        """
        self.openapi_types = {
            'base_currency_code': str,
            'base_price': float,
            'design': str,
            'extension_attributes': object,
            'image_base64_content': str,
            'image_name': str,
            'image_url': str,
            'status': int,
            'website_ids': List[int],
            'wrapping_id': int
        }

        self.attribute_map = {
            'base_currency_code': 'base_currency_code',
            'base_price': 'base_price',
            'design': 'design',
            'extension_attributes': 'extension_attributes',
            'image_base64_content': 'image_base64_content',
            'image_name': 'image_name',
            'image_url': 'image_url',
            'status': 'status',
            'website_ids': 'website_ids',
            'wrapping_id': 'wrapping_id'
        }

        self._base_currency_code = base_currency_code
        self._base_price = base_price
        self._design = design
        self._extension_attributes = extension_attributes
        self._image_base64_content = image_base64_content
        self._image_name = image_name
        self._image_url = image_url
        self._status = status
        self._website_ids = website_ids
        self._wrapping_id = wrapping_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GiftWrappingDataWrappingInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The gift-wrapping-data-wrapping-interface of this GiftWrappingDataWrappingInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_currency_code(self):
        """Gets the base_currency_code of this GiftWrappingDataWrappingInterface.


        :return: The base_currency_code of this GiftWrappingDataWrappingInterface.
        :rtype: str
        """
        return self._base_currency_code

    @base_currency_code.setter
    def base_currency_code(self, base_currency_code):
        """Sets the base_currency_code of this GiftWrappingDataWrappingInterface.


        :param base_currency_code: The base_currency_code of this GiftWrappingDataWrappingInterface.
        :type base_currency_code: str
        """

        self._base_currency_code = base_currency_code

    @property
    def base_price(self):
        """Gets the base_price of this GiftWrappingDataWrappingInterface.


        :return: The base_price of this GiftWrappingDataWrappingInterface.
        :rtype: float
        """
        return self._base_price

    @base_price.setter
    def base_price(self, base_price):
        """Sets the base_price of this GiftWrappingDataWrappingInterface.


        :param base_price: The base_price of this GiftWrappingDataWrappingInterface.
        :type base_price: float
        """
        if base_price is None:
            raise ValueError("Invalid value for `base_price`, must not be `None`")

        self._base_price = base_price

    @property
    def design(self):
        """Gets the design of this GiftWrappingDataWrappingInterface.


        :return: The design of this GiftWrappingDataWrappingInterface.
        :rtype: str
        """
        return self._design

    @design.setter
    def design(self, design):
        """Sets the design of this GiftWrappingDataWrappingInterface.


        :param design: The design of this GiftWrappingDataWrappingInterface.
        :type design: str
        """
        if design is None:
            raise ValueError("Invalid value for `design`, must not be `None`")

        self._design = design

    @property
    def extension_attributes(self):
        """Gets the extension_attributes of this GiftWrappingDataWrappingInterface.

        ExtensionInterface class for @see \\Magento\\GiftWrapping\\Api\\Data\\WrappingInterface

        :return: The extension_attributes of this GiftWrappingDataWrappingInterface.
        :rtype: object
        """
        return self._extension_attributes

    @extension_attributes.setter
    def extension_attributes(self, extension_attributes):
        """Sets the extension_attributes of this GiftWrappingDataWrappingInterface.

        ExtensionInterface class for @see \\Magento\\GiftWrapping\\Api\\Data\\WrappingInterface

        :param extension_attributes: The extension_attributes of this GiftWrappingDataWrappingInterface.
        :type extension_attributes: object
        """

        self._extension_attributes = extension_attributes

    @property
    def image_base64_content(self):
        """Gets the image_base64_content of this GiftWrappingDataWrappingInterface.


        :return: The image_base64_content of this GiftWrappingDataWrappingInterface.
        :rtype: str
        """
        return self._image_base64_content

    @image_base64_content.setter
    def image_base64_content(self, image_base64_content):
        """Sets the image_base64_content of this GiftWrappingDataWrappingInterface.


        :param image_base64_content: The image_base64_content of this GiftWrappingDataWrappingInterface.
        :type image_base64_content: str
        """

        self._image_base64_content = image_base64_content

    @property
    def image_name(self):
        """Gets the image_name of this GiftWrappingDataWrappingInterface.


        :return: The image_name of this GiftWrappingDataWrappingInterface.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this GiftWrappingDataWrappingInterface.


        :param image_name: The image_name of this GiftWrappingDataWrappingInterface.
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def image_url(self):
        """Gets the image_url of this GiftWrappingDataWrappingInterface.

        Wrapping image URL.

        :return: The image_url of this GiftWrappingDataWrappingInterface.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this GiftWrappingDataWrappingInterface.

        Wrapping image URL.

        :param image_url: The image_url of this GiftWrappingDataWrappingInterface.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def status(self):
        """Gets the status of this GiftWrappingDataWrappingInterface.


        :return: The status of this GiftWrappingDataWrappingInterface.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GiftWrappingDataWrappingInterface.


        :param status: The status of this GiftWrappingDataWrappingInterface.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def website_ids(self):
        """Gets the website_ids of this GiftWrappingDataWrappingInterface.


        :return: The website_ids of this GiftWrappingDataWrappingInterface.
        :rtype: List[int]
        """
        return self._website_ids

    @website_ids.setter
    def website_ids(self, website_ids):
        """Sets the website_ids of this GiftWrappingDataWrappingInterface.


        :param website_ids: The website_ids of this GiftWrappingDataWrappingInterface.
        :type website_ids: List[int]
        """

        self._website_ids = website_ids

    @property
    def wrapping_id(self):
        """Gets the wrapping_id of this GiftWrappingDataWrappingInterface.


        :return: The wrapping_id of this GiftWrappingDataWrappingInterface.
        :rtype: int
        """
        return self._wrapping_id

    @wrapping_id.setter
    def wrapping_id(self, wrapping_id):
        """Sets the wrapping_id of this GiftWrappingDataWrappingInterface.


        :param wrapping_id: The wrapping_id of this GiftWrappingDataWrappingInterface.
        :type wrapping_id: int
        """

        self._wrapping_id = wrapping_id
