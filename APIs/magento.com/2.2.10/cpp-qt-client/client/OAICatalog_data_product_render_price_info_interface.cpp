/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog_data_product_render_price_info_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog_data_product_render_price_info_interface::OAICatalog_data_product_render_price_info_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog_data_product_render_price_info_interface::OAICatalog_data_product_render_price_info_interface() {
    this->initializeModel();
}

OAICatalog_data_product_render_price_info_interface::~OAICatalog_data_product_render_price_info_interface() {}

void OAICatalog_data_product_render_price_info_interface::initializeModel() {

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_final_price_isSet = false;
    m_final_price_isValid = false;

    m_formatted_prices_isSet = false;
    m_formatted_prices_isValid = false;

    m_max_price_isSet = false;
    m_max_price_isValid = false;

    m_max_regular_price_isSet = false;
    m_max_regular_price_isValid = false;

    m_minimal_price_isSet = false;
    m_minimal_price_isValid = false;

    m_minimal_regular_price_isSet = false;
    m_minimal_regular_price_isValid = false;

    m_regular_price_isSet = false;
    m_regular_price_isValid = false;

    m_special_price_isSet = false;
    m_special_price_isValid = false;
}

void OAICatalog_data_product_render_price_info_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog_data_product_render_price_info_interface::fromJsonObject(QJsonObject json) {

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_final_price_isValid = ::OpenAPI::fromJsonValue(m_final_price, json[QString("final_price")]);
    m_final_price_isSet = !json[QString("final_price")].isNull() && m_final_price_isValid;

    m_formatted_prices_isValid = ::OpenAPI::fromJsonValue(m_formatted_prices, json[QString("formatted_prices")]);
    m_formatted_prices_isSet = !json[QString("formatted_prices")].isNull() && m_formatted_prices_isValid;

    m_max_price_isValid = ::OpenAPI::fromJsonValue(m_max_price, json[QString("max_price")]);
    m_max_price_isSet = !json[QString("max_price")].isNull() && m_max_price_isValid;

    m_max_regular_price_isValid = ::OpenAPI::fromJsonValue(m_max_regular_price, json[QString("max_regular_price")]);
    m_max_regular_price_isSet = !json[QString("max_regular_price")].isNull() && m_max_regular_price_isValid;

    m_minimal_price_isValid = ::OpenAPI::fromJsonValue(m_minimal_price, json[QString("minimal_price")]);
    m_minimal_price_isSet = !json[QString("minimal_price")].isNull() && m_minimal_price_isValid;

    m_minimal_regular_price_isValid = ::OpenAPI::fromJsonValue(m_minimal_regular_price, json[QString("minimal_regular_price")]);
    m_minimal_regular_price_isSet = !json[QString("minimal_regular_price")].isNull() && m_minimal_regular_price_isValid;

    m_regular_price_isValid = ::OpenAPI::fromJsonValue(m_regular_price, json[QString("regular_price")]);
    m_regular_price_isSet = !json[QString("regular_price")].isNull() && m_regular_price_isValid;

    m_special_price_isValid = ::OpenAPI::fromJsonValue(m_special_price, json[QString("special_price")]);
    m_special_price_isSet = !json[QString("special_price")].isNull() && m_special_price_isValid;
}

QString OAICatalog_data_product_render_price_info_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog_data_product_render_price_info_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_final_price_isSet) {
        obj.insert(QString("final_price"), ::OpenAPI::toJsonValue(m_final_price));
    }
    if (m_formatted_prices.isSet()) {
        obj.insert(QString("formatted_prices"), ::OpenAPI::toJsonValue(m_formatted_prices));
    }
    if (m_max_price_isSet) {
        obj.insert(QString("max_price"), ::OpenAPI::toJsonValue(m_max_price));
    }
    if (m_max_regular_price_isSet) {
        obj.insert(QString("max_regular_price"), ::OpenAPI::toJsonValue(m_max_regular_price));
    }
    if (m_minimal_price_isSet) {
        obj.insert(QString("minimal_price"), ::OpenAPI::toJsonValue(m_minimal_price));
    }
    if (m_minimal_regular_price_isSet) {
        obj.insert(QString("minimal_regular_price"), ::OpenAPI::toJsonValue(m_minimal_regular_price));
    }
    if (m_regular_price_isSet) {
        obj.insert(QString("regular_price"), ::OpenAPI::toJsonValue(m_regular_price));
    }
    if (m_special_price_isSet) {
        obj.insert(QString("special_price"), ::OpenAPI::toJsonValue(m_special_price));
    }
    return obj;
}

OAICatalog_data_product_render_price_info_extension_interface OAICatalog_data_product_render_price_info_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAICatalog_data_product_render_price_info_interface::setExtensionAttributes(const OAICatalog_data_product_render_price_info_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAICatalog_data_product_render_price_info_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAICatalog_data_product_render_price_info_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

double OAICatalog_data_product_render_price_info_interface::getFinalPrice() const {
    return m_final_price;
}
void OAICatalog_data_product_render_price_info_interface::setFinalPrice(const double &final_price) {
    m_final_price = final_price;
    m_final_price_isSet = true;
}

bool OAICatalog_data_product_render_price_info_interface::is_final_price_Set() const{
    return m_final_price_isSet;
}

bool OAICatalog_data_product_render_price_info_interface::is_final_price_Valid() const{
    return m_final_price_isValid;
}

OAICatalog_data_product_render_formatted_price_info_interface OAICatalog_data_product_render_price_info_interface::getFormattedPrices() const {
    return m_formatted_prices;
}
void OAICatalog_data_product_render_price_info_interface::setFormattedPrices(const OAICatalog_data_product_render_formatted_price_info_interface &formatted_prices) {
    m_formatted_prices = formatted_prices;
    m_formatted_prices_isSet = true;
}

bool OAICatalog_data_product_render_price_info_interface::is_formatted_prices_Set() const{
    return m_formatted_prices_isSet;
}

bool OAICatalog_data_product_render_price_info_interface::is_formatted_prices_Valid() const{
    return m_formatted_prices_isValid;
}

double OAICatalog_data_product_render_price_info_interface::getMaxPrice() const {
    return m_max_price;
}
void OAICatalog_data_product_render_price_info_interface::setMaxPrice(const double &max_price) {
    m_max_price = max_price;
    m_max_price_isSet = true;
}

bool OAICatalog_data_product_render_price_info_interface::is_max_price_Set() const{
    return m_max_price_isSet;
}

bool OAICatalog_data_product_render_price_info_interface::is_max_price_Valid() const{
    return m_max_price_isValid;
}

double OAICatalog_data_product_render_price_info_interface::getMaxRegularPrice() const {
    return m_max_regular_price;
}
void OAICatalog_data_product_render_price_info_interface::setMaxRegularPrice(const double &max_regular_price) {
    m_max_regular_price = max_regular_price;
    m_max_regular_price_isSet = true;
}

bool OAICatalog_data_product_render_price_info_interface::is_max_regular_price_Set() const{
    return m_max_regular_price_isSet;
}

bool OAICatalog_data_product_render_price_info_interface::is_max_regular_price_Valid() const{
    return m_max_regular_price_isValid;
}

double OAICatalog_data_product_render_price_info_interface::getMinimalPrice() const {
    return m_minimal_price;
}
void OAICatalog_data_product_render_price_info_interface::setMinimalPrice(const double &minimal_price) {
    m_minimal_price = minimal_price;
    m_minimal_price_isSet = true;
}

bool OAICatalog_data_product_render_price_info_interface::is_minimal_price_Set() const{
    return m_minimal_price_isSet;
}

bool OAICatalog_data_product_render_price_info_interface::is_minimal_price_Valid() const{
    return m_minimal_price_isValid;
}

double OAICatalog_data_product_render_price_info_interface::getMinimalRegularPrice() const {
    return m_minimal_regular_price;
}
void OAICatalog_data_product_render_price_info_interface::setMinimalRegularPrice(const double &minimal_regular_price) {
    m_minimal_regular_price = minimal_regular_price;
    m_minimal_regular_price_isSet = true;
}

bool OAICatalog_data_product_render_price_info_interface::is_minimal_regular_price_Set() const{
    return m_minimal_regular_price_isSet;
}

bool OAICatalog_data_product_render_price_info_interface::is_minimal_regular_price_Valid() const{
    return m_minimal_regular_price_isValid;
}

double OAICatalog_data_product_render_price_info_interface::getRegularPrice() const {
    return m_regular_price;
}
void OAICatalog_data_product_render_price_info_interface::setRegularPrice(const double &regular_price) {
    m_regular_price = regular_price;
    m_regular_price_isSet = true;
}

bool OAICatalog_data_product_render_price_info_interface::is_regular_price_Set() const{
    return m_regular_price_isSet;
}

bool OAICatalog_data_product_render_price_info_interface::is_regular_price_Valid() const{
    return m_regular_price_isValid;
}

double OAICatalog_data_product_render_price_info_interface::getSpecialPrice() const {
    return m_special_price;
}
void OAICatalog_data_product_render_price_info_interface::setSpecialPrice(const double &special_price) {
    m_special_price = special_price;
    m_special_price_isSet = true;
}

bool OAICatalog_data_product_render_price_info_interface::is_special_price_Set() const{
    return m_special_price_isSet;
}

bool OAICatalog_data_product_render_price_info_interface::is_special_price_Valid() const{
    return m_special_price_isValid;
}

bool OAICatalog_data_product_render_price_info_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_prices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_regular_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimal_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimal_regular_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regular_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog_data_product_render_price_info_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_final_price_isValid && m_formatted_prices_isValid && m_max_price_isValid && m_max_regular_price_isValid && m_minimal_price_isValid && m_minimal_regular_price_isValid && m_regular_price_isValid && m_special_price_isValid && true;
}

} // namespace OpenAPI
