/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesRefundInvoiceV1ExecutePost_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesRefundInvoiceV1ExecutePost_request::OAISalesRefundInvoiceV1ExecutePost_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesRefundInvoiceV1ExecutePost_request::OAISalesRefundInvoiceV1ExecutePost_request() {
    this->initializeModel();
}

OAISalesRefundInvoiceV1ExecutePost_request::~OAISalesRefundInvoiceV1ExecutePost_request() {}

void OAISalesRefundInvoiceV1ExecutePost_request::initializeModel() {

    m_append_comment_isSet = false;
    m_append_comment_isValid = false;

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_is_online_isSet = false;
    m_is_online_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_notify_isSet = false;
    m_notify_isValid = false;
}

void OAISalesRefundInvoiceV1ExecutePost_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesRefundInvoiceV1ExecutePost_request::fromJsonObject(QJsonObject json) {

    m_append_comment_isValid = ::OpenAPI::fromJsonValue(m_append_comment, json[QString("appendComment")]);
    m_append_comment_isSet = !json[QString("appendComment")].isNull() && m_append_comment_isValid;

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_is_online_isValid = ::OpenAPI::fromJsonValue(m_is_online, json[QString("isOnline")]);
    m_is_online_isSet = !json[QString("isOnline")].isNull() && m_is_online_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_notify_isValid = ::OpenAPI::fromJsonValue(m_notify, json[QString("notify")]);
    m_notify_isSet = !json[QString("notify")].isNull() && m_notify_isValid;
}

QString OAISalesRefundInvoiceV1ExecutePost_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesRefundInvoiceV1ExecutePost_request::asJsonObject() const {
    QJsonObject obj;
    if (m_append_comment_isSet) {
        obj.insert(QString("appendComment"), ::OpenAPI::toJsonValue(m_append_comment));
    }
    if (m_arguments.isSet()) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_comment.isSet()) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_is_online_isSet) {
        obj.insert(QString("isOnline"), ::OpenAPI::toJsonValue(m_is_online));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_notify_isSet) {
        obj.insert(QString("notify"), ::OpenAPI::toJsonValue(m_notify));
    }
    return obj;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::isAppendComment() const {
    return m_append_comment;
}
void OAISalesRefundInvoiceV1ExecutePost_request::setAppendComment(const bool &append_comment) {
    m_append_comment = append_comment;
    m_append_comment_isSet = true;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::is_append_comment_Set() const{
    return m_append_comment_isSet;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::is_append_comment_Valid() const{
    return m_append_comment_isValid;
}

OAISales_data_creditmemo_creation_arguments_interface OAISalesRefundInvoiceV1ExecutePost_request::getArguments() const {
    return m_arguments;
}
void OAISalesRefundInvoiceV1ExecutePost_request::setArguments(const OAISales_data_creditmemo_creation_arguments_interface &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::is_arguments_Valid() const{
    return m_arguments_isValid;
}

OAISales_data_creditmemo_comment_creation_interface OAISalesRefundInvoiceV1ExecutePost_request::getComment() const {
    return m_comment;
}
void OAISalesRefundInvoiceV1ExecutePost_request::setComment(const OAISales_data_creditmemo_comment_creation_interface &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::is_comment_Valid() const{
    return m_comment_isValid;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::isIsOnline() const {
    return m_is_online;
}
void OAISalesRefundInvoiceV1ExecutePost_request::setIsOnline(const bool &is_online) {
    m_is_online = is_online;
    m_is_online_isSet = true;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::is_is_online_Set() const{
    return m_is_online_isSet;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::is_is_online_Valid() const{
    return m_is_online_isValid;
}

QList<OAISales_data_creditmemo_item_creation_interface> OAISalesRefundInvoiceV1ExecutePost_request::getItems() const {
    return m_items;
}
void OAISalesRefundInvoiceV1ExecutePost_request::setItems(const QList<OAISales_data_creditmemo_item_creation_interface> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::is_items_Set() const{
    return m_items_isSet;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::is_items_Valid() const{
    return m_items_isValid;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::isNotify() const {
    return m_notify;
}
void OAISalesRefundInvoiceV1ExecutePost_request::setNotify(const bool &notify) {
    m_notify = notify;
    m_notify_isSet = true;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::is_notify_Set() const{
    return m_notify_isSet;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::is_notify_Valid() const{
    return m_notify_isValid;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_append_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arguments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesRefundInvoiceV1ExecutePost_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
