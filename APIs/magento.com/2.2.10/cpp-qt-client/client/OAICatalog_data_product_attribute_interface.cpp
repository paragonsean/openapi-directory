/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog_data_product_attribute_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog_data_product_attribute_interface::OAICatalog_data_product_attribute_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog_data_product_attribute_interface::OAICatalog_data_product_attribute_interface() {
    this->initializeModel();
}

OAICatalog_data_product_attribute_interface::~OAICatalog_data_product_attribute_interface() {}

void OAICatalog_data_product_attribute_interface::initializeModel() {

    m_apply_to_isSet = false;
    m_apply_to_isValid = false;

    m_attribute_code_isSet = false;
    m_attribute_code_isValid = false;

    m_attribute_id_isSet = false;
    m_attribute_id_isValid = false;

    m_backend_model_isSet = false;
    m_backend_model_isValid = false;

    m_backend_type_isSet = false;
    m_backend_type_isValid = false;

    m_custom_attributes_isSet = false;
    m_custom_attributes_isValid = false;

    m_default_frontend_label_isSet = false;
    m_default_frontend_label_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_entity_type_id_isSet = false;
    m_entity_type_id_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_frontend_class_isSet = false;
    m_frontend_class_isValid = false;

    m_frontend_input_isSet = false;
    m_frontend_input_isValid = false;

    m_frontend_labels_isSet = false;
    m_frontend_labels_isValid = false;

    m_is_comparable_isSet = false;
    m_is_comparable_isValid = false;

    m_is_filterable_isSet = false;
    m_is_filterable_isValid = false;

    m_is_filterable_in_grid_isSet = false;
    m_is_filterable_in_grid_isValid = false;

    m_is_filterable_in_search_isSet = false;
    m_is_filterable_in_search_isValid = false;

    m_is_html_allowed_on_front_isSet = false;
    m_is_html_allowed_on_front_isValid = false;

    m_is_required_isSet = false;
    m_is_required_isValid = false;

    m_is_searchable_isSet = false;
    m_is_searchable_isValid = false;

    m_is_unique_isSet = false;
    m_is_unique_isValid = false;

    m_is_used_for_promo_rules_isSet = false;
    m_is_used_for_promo_rules_isValid = false;

    m_is_used_in_grid_isSet = false;
    m_is_used_in_grid_isValid = false;

    m_is_user_defined_isSet = false;
    m_is_user_defined_isValid = false;

    m_is_visible_isSet = false;
    m_is_visible_isValid = false;

    m_is_visible_in_advanced_search_isSet = false;
    m_is_visible_in_advanced_search_isValid = false;

    m_is_visible_in_grid_isSet = false;
    m_is_visible_in_grid_isValid = false;

    m_is_visible_on_front_isSet = false;
    m_is_visible_on_front_isValid = false;

    m_is_wysiwyg_enabled_isSet = false;
    m_is_wysiwyg_enabled_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_source_model_isSet = false;
    m_source_model_isValid = false;

    m_used_for_sort_by_isSet = false;
    m_used_for_sort_by_isValid = false;

    m_used_in_product_listing_isSet = false;
    m_used_in_product_listing_isValid = false;

    m_validation_rules_isSet = false;
    m_validation_rules_isValid = false;
}

void OAICatalog_data_product_attribute_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog_data_product_attribute_interface::fromJsonObject(QJsonObject json) {

    m_apply_to_isValid = ::OpenAPI::fromJsonValue(m_apply_to, json[QString("apply_to")]);
    m_apply_to_isSet = !json[QString("apply_to")].isNull() && m_apply_to_isValid;

    m_attribute_code_isValid = ::OpenAPI::fromJsonValue(m_attribute_code, json[QString("attribute_code")]);
    m_attribute_code_isSet = !json[QString("attribute_code")].isNull() && m_attribute_code_isValid;

    m_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_attribute_id, json[QString("attribute_id")]);
    m_attribute_id_isSet = !json[QString("attribute_id")].isNull() && m_attribute_id_isValid;

    m_backend_model_isValid = ::OpenAPI::fromJsonValue(m_backend_model, json[QString("backend_model")]);
    m_backend_model_isSet = !json[QString("backend_model")].isNull() && m_backend_model_isValid;

    m_backend_type_isValid = ::OpenAPI::fromJsonValue(m_backend_type, json[QString("backend_type")]);
    m_backend_type_isSet = !json[QString("backend_type")].isNull() && m_backend_type_isValid;

    m_custom_attributes_isValid = ::OpenAPI::fromJsonValue(m_custom_attributes, json[QString("custom_attributes")]);
    m_custom_attributes_isSet = !json[QString("custom_attributes")].isNull() && m_custom_attributes_isValid;

    m_default_frontend_label_isValid = ::OpenAPI::fromJsonValue(m_default_frontend_label, json[QString("default_frontend_label")]);
    m_default_frontend_label_isSet = !json[QString("default_frontend_label")].isNull() && m_default_frontend_label_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("default_value")]);
    m_default_value_isSet = !json[QString("default_value")].isNull() && m_default_value_isValid;

    m_entity_type_id_isValid = ::OpenAPI::fromJsonValue(m_entity_type_id, json[QString("entity_type_id")]);
    m_entity_type_id_isSet = !json[QString("entity_type_id")].isNull() && m_entity_type_id_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_frontend_class_isValid = ::OpenAPI::fromJsonValue(m_frontend_class, json[QString("frontend_class")]);
    m_frontend_class_isSet = !json[QString("frontend_class")].isNull() && m_frontend_class_isValid;

    m_frontend_input_isValid = ::OpenAPI::fromJsonValue(m_frontend_input, json[QString("frontend_input")]);
    m_frontend_input_isSet = !json[QString("frontend_input")].isNull() && m_frontend_input_isValid;

    m_frontend_labels_isValid = ::OpenAPI::fromJsonValue(m_frontend_labels, json[QString("frontend_labels")]);
    m_frontend_labels_isSet = !json[QString("frontend_labels")].isNull() && m_frontend_labels_isValid;

    m_is_comparable_isValid = ::OpenAPI::fromJsonValue(m_is_comparable, json[QString("is_comparable")]);
    m_is_comparable_isSet = !json[QString("is_comparable")].isNull() && m_is_comparable_isValid;

    m_is_filterable_isValid = ::OpenAPI::fromJsonValue(m_is_filterable, json[QString("is_filterable")]);
    m_is_filterable_isSet = !json[QString("is_filterable")].isNull() && m_is_filterable_isValid;

    m_is_filterable_in_grid_isValid = ::OpenAPI::fromJsonValue(m_is_filterable_in_grid, json[QString("is_filterable_in_grid")]);
    m_is_filterable_in_grid_isSet = !json[QString("is_filterable_in_grid")].isNull() && m_is_filterable_in_grid_isValid;

    m_is_filterable_in_search_isValid = ::OpenAPI::fromJsonValue(m_is_filterable_in_search, json[QString("is_filterable_in_search")]);
    m_is_filterable_in_search_isSet = !json[QString("is_filterable_in_search")].isNull() && m_is_filterable_in_search_isValid;

    m_is_html_allowed_on_front_isValid = ::OpenAPI::fromJsonValue(m_is_html_allowed_on_front, json[QString("is_html_allowed_on_front")]);
    m_is_html_allowed_on_front_isSet = !json[QString("is_html_allowed_on_front")].isNull() && m_is_html_allowed_on_front_isValid;

    m_is_required_isValid = ::OpenAPI::fromJsonValue(m_is_required, json[QString("is_required")]);
    m_is_required_isSet = !json[QString("is_required")].isNull() && m_is_required_isValid;

    m_is_searchable_isValid = ::OpenAPI::fromJsonValue(m_is_searchable, json[QString("is_searchable")]);
    m_is_searchable_isSet = !json[QString("is_searchable")].isNull() && m_is_searchable_isValid;

    m_is_unique_isValid = ::OpenAPI::fromJsonValue(m_is_unique, json[QString("is_unique")]);
    m_is_unique_isSet = !json[QString("is_unique")].isNull() && m_is_unique_isValid;

    m_is_used_for_promo_rules_isValid = ::OpenAPI::fromJsonValue(m_is_used_for_promo_rules, json[QString("is_used_for_promo_rules")]);
    m_is_used_for_promo_rules_isSet = !json[QString("is_used_for_promo_rules")].isNull() && m_is_used_for_promo_rules_isValid;

    m_is_used_in_grid_isValid = ::OpenAPI::fromJsonValue(m_is_used_in_grid, json[QString("is_used_in_grid")]);
    m_is_used_in_grid_isSet = !json[QString("is_used_in_grid")].isNull() && m_is_used_in_grid_isValid;

    m_is_user_defined_isValid = ::OpenAPI::fromJsonValue(m_is_user_defined, json[QString("is_user_defined")]);
    m_is_user_defined_isSet = !json[QString("is_user_defined")].isNull() && m_is_user_defined_isValid;

    m_is_visible_isValid = ::OpenAPI::fromJsonValue(m_is_visible, json[QString("is_visible")]);
    m_is_visible_isSet = !json[QString("is_visible")].isNull() && m_is_visible_isValid;

    m_is_visible_in_advanced_search_isValid = ::OpenAPI::fromJsonValue(m_is_visible_in_advanced_search, json[QString("is_visible_in_advanced_search")]);
    m_is_visible_in_advanced_search_isSet = !json[QString("is_visible_in_advanced_search")].isNull() && m_is_visible_in_advanced_search_isValid;

    m_is_visible_in_grid_isValid = ::OpenAPI::fromJsonValue(m_is_visible_in_grid, json[QString("is_visible_in_grid")]);
    m_is_visible_in_grid_isSet = !json[QString("is_visible_in_grid")].isNull() && m_is_visible_in_grid_isValid;

    m_is_visible_on_front_isValid = ::OpenAPI::fromJsonValue(m_is_visible_on_front, json[QString("is_visible_on_front")]);
    m_is_visible_on_front_isSet = !json[QString("is_visible_on_front")].isNull() && m_is_visible_on_front_isValid;

    m_is_wysiwyg_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_wysiwyg_enabled, json[QString("is_wysiwyg_enabled")]);
    m_is_wysiwyg_enabled_isSet = !json[QString("is_wysiwyg_enabled")].isNull() && m_is_wysiwyg_enabled_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_source_model_isValid = ::OpenAPI::fromJsonValue(m_source_model, json[QString("source_model")]);
    m_source_model_isSet = !json[QString("source_model")].isNull() && m_source_model_isValid;

    m_used_for_sort_by_isValid = ::OpenAPI::fromJsonValue(m_used_for_sort_by, json[QString("used_for_sort_by")]);
    m_used_for_sort_by_isSet = !json[QString("used_for_sort_by")].isNull() && m_used_for_sort_by_isValid;

    m_used_in_product_listing_isValid = ::OpenAPI::fromJsonValue(m_used_in_product_listing, json[QString("used_in_product_listing")]);
    m_used_in_product_listing_isSet = !json[QString("used_in_product_listing")].isNull() && m_used_in_product_listing_isValid;

    m_validation_rules_isValid = ::OpenAPI::fromJsonValue(m_validation_rules, json[QString("validation_rules")]);
    m_validation_rules_isSet = !json[QString("validation_rules")].isNull() && m_validation_rules_isValid;
}

QString OAICatalog_data_product_attribute_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog_data_product_attribute_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_apply_to.size() > 0) {
        obj.insert(QString("apply_to"), ::OpenAPI::toJsonValue(m_apply_to));
    }
    if (m_attribute_code_isSet) {
        obj.insert(QString("attribute_code"), ::OpenAPI::toJsonValue(m_attribute_code));
    }
    if (m_attribute_id_isSet) {
        obj.insert(QString("attribute_id"), ::OpenAPI::toJsonValue(m_attribute_id));
    }
    if (m_backend_model_isSet) {
        obj.insert(QString("backend_model"), ::OpenAPI::toJsonValue(m_backend_model));
    }
    if (m_backend_type_isSet) {
        obj.insert(QString("backend_type"), ::OpenAPI::toJsonValue(m_backend_type));
    }
    if (m_custom_attributes.size() > 0) {
        obj.insert(QString("custom_attributes"), ::OpenAPI::toJsonValue(m_custom_attributes));
    }
    if (m_default_frontend_label_isSet) {
        obj.insert(QString("default_frontend_label"), ::OpenAPI::toJsonValue(m_default_frontend_label));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("default_value"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_entity_type_id_isSet) {
        obj.insert(QString("entity_type_id"), ::OpenAPI::toJsonValue(m_entity_type_id));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_frontend_class_isSet) {
        obj.insert(QString("frontend_class"), ::OpenAPI::toJsonValue(m_frontend_class));
    }
    if (m_frontend_input_isSet) {
        obj.insert(QString("frontend_input"), ::OpenAPI::toJsonValue(m_frontend_input));
    }
    if (m_frontend_labels.size() > 0) {
        obj.insert(QString("frontend_labels"), ::OpenAPI::toJsonValue(m_frontend_labels));
    }
    if (m_is_comparable_isSet) {
        obj.insert(QString("is_comparable"), ::OpenAPI::toJsonValue(m_is_comparable));
    }
    if (m_is_filterable_isSet) {
        obj.insert(QString("is_filterable"), ::OpenAPI::toJsonValue(m_is_filterable));
    }
    if (m_is_filterable_in_grid_isSet) {
        obj.insert(QString("is_filterable_in_grid"), ::OpenAPI::toJsonValue(m_is_filterable_in_grid));
    }
    if (m_is_filterable_in_search_isSet) {
        obj.insert(QString("is_filterable_in_search"), ::OpenAPI::toJsonValue(m_is_filterable_in_search));
    }
    if (m_is_html_allowed_on_front_isSet) {
        obj.insert(QString("is_html_allowed_on_front"), ::OpenAPI::toJsonValue(m_is_html_allowed_on_front));
    }
    if (m_is_required_isSet) {
        obj.insert(QString("is_required"), ::OpenAPI::toJsonValue(m_is_required));
    }
    if (m_is_searchable_isSet) {
        obj.insert(QString("is_searchable"), ::OpenAPI::toJsonValue(m_is_searchable));
    }
    if (m_is_unique_isSet) {
        obj.insert(QString("is_unique"), ::OpenAPI::toJsonValue(m_is_unique));
    }
    if (m_is_used_for_promo_rules_isSet) {
        obj.insert(QString("is_used_for_promo_rules"), ::OpenAPI::toJsonValue(m_is_used_for_promo_rules));
    }
    if (m_is_used_in_grid_isSet) {
        obj.insert(QString("is_used_in_grid"), ::OpenAPI::toJsonValue(m_is_used_in_grid));
    }
    if (m_is_user_defined_isSet) {
        obj.insert(QString("is_user_defined"), ::OpenAPI::toJsonValue(m_is_user_defined));
    }
    if (m_is_visible_isSet) {
        obj.insert(QString("is_visible"), ::OpenAPI::toJsonValue(m_is_visible));
    }
    if (m_is_visible_in_advanced_search_isSet) {
        obj.insert(QString("is_visible_in_advanced_search"), ::OpenAPI::toJsonValue(m_is_visible_in_advanced_search));
    }
    if (m_is_visible_in_grid_isSet) {
        obj.insert(QString("is_visible_in_grid"), ::OpenAPI::toJsonValue(m_is_visible_in_grid));
    }
    if (m_is_visible_on_front_isSet) {
        obj.insert(QString("is_visible_on_front"), ::OpenAPI::toJsonValue(m_is_visible_on_front));
    }
    if (m_is_wysiwyg_enabled_isSet) {
        obj.insert(QString("is_wysiwyg_enabled"), ::OpenAPI::toJsonValue(m_is_wysiwyg_enabled));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_source_model_isSet) {
        obj.insert(QString("source_model"), ::OpenAPI::toJsonValue(m_source_model));
    }
    if (m_used_for_sort_by_isSet) {
        obj.insert(QString("used_for_sort_by"), ::OpenAPI::toJsonValue(m_used_for_sort_by));
    }
    if (m_used_in_product_listing_isSet) {
        obj.insert(QString("used_in_product_listing"), ::OpenAPI::toJsonValue(m_used_in_product_listing));
    }
    if (m_validation_rules.size() > 0) {
        obj.insert(QString("validation_rules"), ::OpenAPI::toJsonValue(m_validation_rules));
    }
    return obj;
}

QList<QString> OAICatalog_data_product_attribute_interface::getApplyTo() const {
    return m_apply_to;
}
void OAICatalog_data_product_attribute_interface::setApplyTo(const QList<QString> &apply_to) {
    m_apply_to = apply_to;
    m_apply_to_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_apply_to_Set() const{
    return m_apply_to_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_apply_to_Valid() const{
    return m_apply_to_isValid;
}

QString OAICatalog_data_product_attribute_interface::getAttributeCode() const {
    return m_attribute_code;
}
void OAICatalog_data_product_attribute_interface::setAttributeCode(const QString &attribute_code) {
    m_attribute_code = attribute_code;
    m_attribute_code_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_attribute_code_Set() const{
    return m_attribute_code_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_attribute_code_Valid() const{
    return m_attribute_code_isValid;
}

qint32 OAICatalog_data_product_attribute_interface::getAttributeId() const {
    return m_attribute_id;
}
void OAICatalog_data_product_attribute_interface::setAttributeId(const qint32 &attribute_id) {
    m_attribute_id = attribute_id;
    m_attribute_id_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_attribute_id_Set() const{
    return m_attribute_id_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_attribute_id_Valid() const{
    return m_attribute_id_isValid;
}

QString OAICatalog_data_product_attribute_interface::getBackendModel() const {
    return m_backend_model;
}
void OAICatalog_data_product_attribute_interface::setBackendModel(const QString &backend_model) {
    m_backend_model = backend_model;
    m_backend_model_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_backend_model_Set() const{
    return m_backend_model_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_backend_model_Valid() const{
    return m_backend_model_isValid;
}

QString OAICatalog_data_product_attribute_interface::getBackendType() const {
    return m_backend_type;
}
void OAICatalog_data_product_attribute_interface::setBackendType(const QString &backend_type) {
    m_backend_type = backend_type;
    m_backend_type_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_backend_type_Set() const{
    return m_backend_type_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_backend_type_Valid() const{
    return m_backend_type_isValid;
}

QList<OAIFramework_attribute_interface> OAICatalog_data_product_attribute_interface::getCustomAttributes() const {
    return m_custom_attributes;
}
void OAICatalog_data_product_attribute_interface::setCustomAttributes(const QList<OAIFramework_attribute_interface> &custom_attributes) {
    m_custom_attributes = custom_attributes;
    m_custom_attributes_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_custom_attributes_Set() const{
    return m_custom_attributes_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_custom_attributes_Valid() const{
    return m_custom_attributes_isValid;
}

QString OAICatalog_data_product_attribute_interface::getDefaultFrontendLabel() const {
    return m_default_frontend_label;
}
void OAICatalog_data_product_attribute_interface::setDefaultFrontendLabel(const QString &default_frontend_label) {
    m_default_frontend_label = default_frontend_label;
    m_default_frontend_label_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_default_frontend_label_Set() const{
    return m_default_frontend_label_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_default_frontend_label_Valid() const{
    return m_default_frontend_label_isValid;
}

QString OAICatalog_data_product_attribute_interface::getDefaultValue() const {
    return m_default_value;
}
void OAICatalog_data_product_attribute_interface::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAICatalog_data_product_attribute_interface::getEntityTypeId() const {
    return m_entity_type_id;
}
void OAICatalog_data_product_attribute_interface::setEntityTypeId(const QString &entity_type_id) {
    m_entity_type_id = entity_type_id;
    m_entity_type_id_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_entity_type_id_Set() const{
    return m_entity_type_id_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_entity_type_id_Valid() const{
    return m_entity_type_id_isValid;
}

OAIObject OAICatalog_data_product_attribute_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAICatalog_data_product_attribute_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAICatalog_data_product_attribute_interface::getFrontendClass() const {
    return m_frontend_class;
}
void OAICatalog_data_product_attribute_interface::setFrontendClass(const QString &frontend_class) {
    m_frontend_class = frontend_class;
    m_frontend_class_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_frontend_class_Set() const{
    return m_frontend_class_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_frontend_class_Valid() const{
    return m_frontend_class_isValid;
}

QString OAICatalog_data_product_attribute_interface::getFrontendInput() const {
    return m_frontend_input;
}
void OAICatalog_data_product_attribute_interface::setFrontendInput(const QString &frontend_input) {
    m_frontend_input = frontend_input;
    m_frontend_input_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_frontend_input_Set() const{
    return m_frontend_input_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_frontend_input_Valid() const{
    return m_frontend_input_isValid;
}

QList<OAIEav_data_attribute_frontend_label_interface> OAICatalog_data_product_attribute_interface::getFrontendLabels() const {
    return m_frontend_labels;
}
void OAICatalog_data_product_attribute_interface::setFrontendLabels(const QList<OAIEav_data_attribute_frontend_label_interface> &frontend_labels) {
    m_frontend_labels = frontend_labels;
    m_frontend_labels_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_frontend_labels_Set() const{
    return m_frontend_labels_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_frontend_labels_Valid() const{
    return m_frontend_labels_isValid;
}

QString OAICatalog_data_product_attribute_interface::getIsComparable() const {
    return m_is_comparable;
}
void OAICatalog_data_product_attribute_interface::setIsComparable(const QString &is_comparable) {
    m_is_comparable = is_comparable;
    m_is_comparable_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_comparable_Set() const{
    return m_is_comparable_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_comparable_Valid() const{
    return m_is_comparable_isValid;
}

bool OAICatalog_data_product_attribute_interface::isIsFilterable() const {
    return m_is_filterable;
}
void OAICatalog_data_product_attribute_interface::setIsFilterable(const bool &is_filterable) {
    m_is_filterable = is_filterable;
    m_is_filterable_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_filterable_Set() const{
    return m_is_filterable_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_filterable_Valid() const{
    return m_is_filterable_isValid;
}

bool OAICatalog_data_product_attribute_interface::isIsFilterableInGrid() const {
    return m_is_filterable_in_grid;
}
void OAICatalog_data_product_attribute_interface::setIsFilterableInGrid(const bool &is_filterable_in_grid) {
    m_is_filterable_in_grid = is_filterable_in_grid;
    m_is_filterable_in_grid_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_filterable_in_grid_Set() const{
    return m_is_filterable_in_grid_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_filterable_in_grid_Valid() const{
    return m_is_filterable_in_grid_isValid;
}

bool OAICatalog_data_product_attribute_interface::isIsFilterableInSearch() const {
    return m_is_filterable_in_search;
}
void OAICatalog_data_product_attribute_interface::setIsFilterableInSearch(const bool &is_filterable_in_search) {
    m_is_filterable_in_search = is_filterable_in_search;
    m_is_filterable_in_search_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_filterable_in_search_Set() const{
    return m_is_filterable_in_search_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_filterable_in_search_Valid() const{
    return m_is_filterable_in_search_isValid;
}

bool OAICatalog_data_product_attribute_interface::isIsHtmlAllowedOnFront() const {
    return m_is_html_allowed_on_front;
}
void OAICatalog_data_product_attribute_interface::setIsHtmlAllowedOnFront(const bool &is_html_allowed_on_front) {
    m_is_html_allowed_on_front = is_html_allowed_on_front;
    m_is_html_allowed_on_front_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_html_allowed_on_front_Set() const{
    return m_is_html_allowed_on_front_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_html_allowed_on_front_Valid() const{
    return m_is_html_allowed_on_front_isValid;
}

bool OAICatalog_data_product_attribute_interface::isIsRequired() const {
    return m_is_required;
}
void OAICatalog_data_product_attribute_interface::setIsRequired(const bool &is_required) {
    m_is_required = is_required;
    m_is_required_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_required_Set() const{
    return m_is_required_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_required_Valid() const{
    return m_is_required_isValid;
}

QString OAICatalog_data_product_attribute_interface::getIsSearchable() const {
    return m_is_searchable;
}
void OAICatalog_data_product_attribute_interface::setIsSearchable(const QString &is_searchable) {
    m_is_searchable = is_searchable;
    m_is_searchable_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_searchable_Set() const{
    return m_is_searchable_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_searchable_Valid() const{
    return m_is_searchable_isValid;
}

QString OAICatalog_data_product_attribute_interface::getIsUnique() const {
    return m_is_unique;
}
void OAICatalog_data_product_attribute_interface::setIsUnique(const QString &is_unique) {
    m_is_unique = is_unique;
    m_is_unique_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_unique_Set() const{
    return m_is_unique_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_unique_Valid() const{
    return m_is_unique_isValid;
}

QString OAICatalog_data_product_attribute_interface::getIsUsedForPromoRules() const {
    return m_is_used_for_promo_rules;
}
void OAICatalog_data_product_attribute_interface::setIsUsedForPromoRules(const QString &is_used_for_promo_rules) {
    m_is_used_for_promo_rules = is_used_for_promo_rules;
    m_is_used_for_promo_rules_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_used_for_promo_rules_Set() const{
    return m_is_used_for_promo_rules_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_used_for_promo_rules_Valid() const{
    return m_is_used_for_promo_rules_isValid;
}

bool OAICatalog_data_product_attribute_interface::isIsUsedInGrid() const {
    return m_is_used_in_grid;
}
void OAICatalog_data_product_attribute_interface::setIsUsedInGrid(const bool &is_used_in_grid) {
    m_is_used_in_grid = is_used_in_grid;
    m_is_used_in_grid_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_used_in_grid_Set() const{
    return m_is_used_in_grid_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_used_in_grid_Valid() const{
    return m_is_used_in_grid_isValid;
}

bool OAICatalog_data_product_attribute_interface::isIsUserDefined() const {
    return m_is_user_defined;
}
void OAICatalog_data_product_attribute_interface::setIsUserDefined(const bool &is_user_defined) {
    m_is_user_defined = is_user_defined;
    m_is_user_defined_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_user_defined_Set() const{
    return m_is_user_defined_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_user_defined_Valid() const{
    return m_is_user_defined_isValid;
}

bool OAICatalog_data_product_attribute_interface::isIsVisible() const {
    return m_is_visible;
}
void OAICatalog_data_product_attribute_interface::setIsVisible(const bool &is_visible) {
    m_is_visible = is_visible;
    m_is_visible_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_visible_Set() const{
    return m_is_visible_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_visible_Valid() const{
    return m_is_visible_isValid;
}

QString OAICatalog_data_product_attribute_interface::getIsVisibleInAdvancedSearch() const {
    return m_is_visible_in_advanced_search;
}
void OAICatalog_data_product_attribute_interface::setIsVisibleInAdvancedSearch(const QString &is_visible_in_advanced_search) {
    m_is_visible_in_advanced_search = is_visible_in_advanced_search;
    m_is_visible_in_advanced_search_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_visible_in_advanced_search_Set() const{
    return m_is_visible_in_advanced_search_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_visible_in_advanced_search_Valid() const{
    return m_is_visible_in_advanced_search_isValid;
}

bool OAICatalog_data_product_attribute_interface::isIsVisibleInGrid() const {
    return m_is_visible_in_grid;
}
void OAICatalog_data_product_attribute_interface::setIsVisibleInGrid(const bool &is_visible_in_grid) {
    m_is_visible_in_grid = is_visible_in_grid;
    m_is_visible_in_grid_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_visible_in_grid_Set() const{
    return m_is_visible_in_grid_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_visible_in_grid_Valid() const{
    return m_is_visible_in_grid_isValid;
}

QString OAICatalog_data_product_attribute_interface::getIsVisibleOnFront() const {
    return m_is_visible_on_front;
}
void OAICatalog_data_product_attribute_interface::setIsVisibleOnFront(const QString &is_visible_on_front) {
    m_is_visible_on_front = is_visible_on_front;
    m_is_visible_on_front_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_visible_on_front_Set() const{
    return m_is_visible_on_front_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_visible_on_front_Valid() const{
    return m_is_visible_on_front_isValid;
}

bool OAICatalog_data_product_attribute_interface::isIsWysiwygEnabled() const {
    return m_is_wysiwyg_enabled;
}
void OAICatalog_data_product_attribute_interface::setIsWysiwygEnabled(const bool &is_wysiwyg_enabled) {
    m_is_wysiwyg_enabled = is_wysiwyg_enabled;
    m_is_wysiwyg_enabled_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_is_wysiwyg_enabled_Set() const{
    return m_is_wysiwyg_enabled_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_is_wysiwyg_enabled_Valid() const{
    return m_is_wysiwyg_enabled_isValid;
}

QString OAICatalog_data_product_attribute_interface::getNote() const {
    return m_note;
}
void OAICatalog_data_product_attribute_interface::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_note_Set() const{
    return m_note_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_note_Valid() const{
    return m_note_isValid;
}

QList<OAIEav_data_attribute_option_interface> OAICatalog_data_product_attribute_interface::getOptions() const {
    return m_options;
}
void OAICatalog_data_product_attribute_interface::setOptions(const QList<OAIEav_data_attribute_option_interface> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_options_Set() const{
    return m_options_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_options_Valid() const{
    return m_options_isValid;
}

qint32 OAICatalog_data_product_attribute_interface::getPosition() const {
    return m_position;
}
void OAICatalog_data_product_attribute_interface::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_position_Set() const{
    return m_position_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_position_Valid() const{
    return m_position_isValid;
}

QString OAICatalog_data_product_attribute_interface::getScope() const {
    return m_scope;
}
void OAICatalog_data_product_attribute_interface::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAICatalog_data_product_attribute_interface::getSourceModel() const {
    return m_source_model;
}
void OAICatalog_data_product_attribute_interface::setSourceModel(const QString &source_model) {
    m_source_model = source_model;
    m_source_model_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_source_model_Set() const{
    return m_source_model_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_source_model_Valid() const{
    return m_source_model_isValid;
}

bool OAICatalog_data_product_attribute_interface::isUsedForSortBy() const {
    return m_used_for_sort_by;
}
void OAICatalog_data_product_attribute_interface::setUsedForSortBy(const bool &used_for_sort_by) {
    m_used_for_sort_by = used_for_sort_by;
    m_used_for_sort_by_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_used_for_sort_by_Set() const{
    return m_used_for_sort_by_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_used_for_sort_by_Valid() const{
    return m_used_for_sort_by_isValid;
}

QString OAICatalog_data_product_attribute_interface::getUsedInProductListing() const {
    return m_used_in_product_listing;
}
void OAICatalog_data_product_attribute_interface::setUsedInProductListing(const QString &used_in_product_listing) {
    m_used_in_product_listing = used_in_product_listing;
    m_used_in_product_listing_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_used_in_product_listing_Set() const{
    return m_used_in_product_listing_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_used_in_product_listing_Valid() const{
    return m_used_in_product_listing_isValid;
}

QList<OAIEav_data_attribute_validation_rule_interface> OAICatalog_data_product_attribute_interface::getValidationRules() const {
    return m_validation_rules;
}
void OAICatalog_data_product_attribute_interface::setValidationRules(const QList<OAIEav_data_attribute_validation_rule_interface> &validation_rules) {
    m_validation_rules = validation_rules;
    m_validation_rules_isSet = true;
}

bool OAICatalog_data_product_attribute_interface::is_validation_rules_Set() const{
    return m_validation_rules_isSet;
}

bool OAICatalog_data_product_attribute_interface::is_validation_rules_Valid() const{
    return m_validation_rules_isValid;
}

bool OAICatalog_data_product_attribute_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apply_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_frontend_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_comparable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_filterable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_filterable_in_grid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_filterable_in_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_html_allowed_on_front_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_searchable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_unique_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_used_for_promo_rules_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_used_in_grid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_user_defined_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_visible_in_advanced_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_visible_in_grid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_visible_on_front_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_wysiwyg_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_for_sort_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_in_product_listing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog_data_product_attribute_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attribute_code_isValid && m_entity_type_id_isValid && m_frontend_input_isValid && m_frontend_labels_isValid && m_is_required_isValid && true;
}

} // namespace OpenAPI
