/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog_data_product_render_image_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog_data_product_render_image_interface::OAICatalog_data_product_render_image_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog_data_product_render_image_interface::OAICatalog_data_product_render_image_interface() {
    this->initializeModel();
}

OAICatalog_data_product_render_image_interface::~OAICatalog_data_product_render_image_interface() {}

void OAICatalog_data_product_render_image_interface::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_resized_height_isSet = false;
    m_resized_height_isValid = false;

    m_resized_width_isSet = false;
    m_resized_width_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAICatalog_data_product_render_image_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog_data_product_render_image_interface::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_resized_height_isValid = ::OpenAPI::fromJsonValue(m_resized_height, json[QString("resized_height")]);
    m_resized_height_isSet = !json[QString("resized_height")].isNull() && m_resized_height_isValid;

    m_resized_width_isValid = ::OpenAPI::fromJsonValue(m_resized_width, json[QString("resized_width")]);
    m_resized_width_isSet = !json[QString("resized_width")].isNull() && m_resized_width_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAICatalog_data_product_render_image_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog_data_product_render_image_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_resized_height_isSet) {
        obj.insert(QString("resized_height"), ::OpenAPI::toJsonValue(m_resized_height));
    }
    if (m_resized_width_isSet) {
        obj.insert(QString("resized_width"), ::OpenAPI::toJsonValue(m_resized_width));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAICatalog_data_product_render_image_interface::getCode() const {
    return m_code;
}
void OAICatalog_data_product_render_image_interface::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICatalog_data_product_render_image_interface::is_code_Set() const{
    return m_code_isSet;
}

bool OAICatalog_data_product_render_image_interface::is_code_Valid() const{
    return m_code_isValid;
}

OAIObject OAICatalog_data_product_render_image_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAICatalog_data_product_render_image_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAICatalog_data_product_render_image_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAICatalog_data_product_render_image_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

double OAICatalog_data_product_render_image_interface::getHeight() const {
    return m_height;
}
void OAICatalog_data_product_render_image_interface::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAICatalog_data_product_render_image_interface::is_height_Set() const{
    return m_height_isSet;
}

bool OAICatalog_data_product_render_image_interface::is_height_Valid() const{
    return m_height_isValid;
}

QString OAICatalog_data_product_render_image_interface::getLabel() const {
    return m_label;
}
void OAICatalog_data_product_render_image_interface::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAICatalog_data_product_render_image_interface::is_label_Set() const{
    return m_label_isSet;
}

bool OAICatalog_data_product_render_image_interface::is_label_Valid() const{
    return m_label_isValid;
}

double OAICatalog_data_product_render_image_interface::getResizedHeight() const {
    return m_resized_height;
}
void OAICatalog_data_product_render_image_interface::setResizedHeight(const double &resized_height) {
    m_resized_height = resized_height;
    m_resized_height_isSet = true;
}

bool OAICatalog_data_product_render_image_interface::is_resized_height_Set() const{
    return m_resized_height_isSet;
}

bool OAICatalog_data_product_render_image_interface::is_resized_height_Valid() const{
    return m_resized_height_isValid;
}

double OAICatalog_data_product_render_image_interface::getResizedWidth() const {
    return m_resized_width;
}
void OAICatalog_data_product_render_image_interface::setResizedWidth(const double &resized_width) {
    m_resized_width = resized_width;
    m_resized_width_isSet = true;
}

bool OAICatalog_data_product_render_image_interface::is_resized_width_Set() const{
    return m_resized_width_isSet;
}

bool OAICatalog_data_product_render_image_interface::is_resized_width_Valid() const{
    return m_resized_width_isValid;
}

QString OAICatalog_data_product_render_image_interface::getUrl() const {
    return m_url;
}
void OAICatalog_data_product_render_image_interface::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICatalog_data_product_render_image_interface::is_url_Set() const{
    return m_url_isSet;
}

bool OAICatalog_data_product_render_image_interface::is_url_Valid() const{
    return m_url_isValid;
}

double OAICatalog_data_product_render_image_interface::getWidth() const {
    return m_width;
}
void OAICatalog_data_product_render_image_interface::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAICatalog_data_product_render_image_interface::is_width_Set() const{
    return m_width_isSet;
}

bool OAICatalog_data_product_render_image_interface::is_width_Valid() const{
    return m_width_isValid;
}

bool OAICatalog_data_product_render_image_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resized_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resized_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog_data_product_render_image_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_height_isValid && m_label_isValid && m_resized_height_isValid && m_resized_width_isValid && m_url_isValid && m_width_isValid && true;
}

} // namespace OpenAPI
