/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemando_shipping_data_collection_point_quote_collection_point_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemando_shipping_data_collection_point_quote_collection_point_interface::OAITemando_shipping_data_collection_point_quote_collection_point_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemando_shipping_data_collection_point_quote_collection_point_interface::OAITemando_shipping_data_collection_point_quote_collection_point_interface() {
    this->initializeModel();
}

OAITemando_shipping_data_collection_point_quote_collection_point_interface::~OAITemando_shipping_data_collection_point_quote_collection_point_interface() {}

void OAITemando_shipping_data_collection_point_quote_collection_point_interface::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_collection_point_id_isSet = false;
    m_collection_point_id_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_opening_hours_isSet = false;
    m_opening_hours_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;

    m_recipient_address_id_isSet = false;
    m_recipient_address_id_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_selected_isSet = false;
    m_selected_isValid = false;

    m_shipping_experiences_isSet = false;
    m_shipping_experiences_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;
}

void OAITemando_shipping_data_collection_point_quote_collection_point_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemando_shipping_data_collection_point_quote_collection_point_interface::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_collection_point_id_isValid = ::OpenAPI::fromJsonValue(m_collection_point_id, json[QString("collection_point_id")]);
    m_collection_point_id_isSet = !json[QString("collection_point_id")].isNull() && m_collection_point_id_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_opening_hours_isValid = ::OpenAPI::fromJsonValue(m_opening_hours, json[QString("opening_hours")]);
    m_opening_hours_isSet = !json[QString("opening_hours")].isNull() && m_opening_hours_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("postcode")]);
    m_postcode_isSet = !json[QString("postcode")].isNull() && m_postcode_isValid;

    m_recipient_address_id_isValid = ::OpenAPI::fromJsonValue(m_recipient_address_id, json[QString("recipient_address_id")]);
    m_recipient_address_id_isSet = !json[QString("recipient_address_id")].isNull() && m_recipient_address_id_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_selected_isValid = ::OpenAPI::fromJsonValue(m_selected, json[QString("selected")]);
    m_selected_isSet = !json[QString("selected")].isNull() && m_selected_isValid;

    m_shipping_experiences_isValid = ::OpenAPI::fromJsonValue(m_shipping_experiences, json[QString("shipping_experiences")]);
    m_shipping_experiences_isSet = !json[QString("shipping_experiences")].isNull() && m_shipping_experiences_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;
}

QString OAITemando_shipping_data_collection_point_quote_collection_point_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemando_shipping_data_collection_point_quote_collection_point_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_collection_point_id_isSet) {
        obj.insert(QString("collection_point_id"), ::OpenAPI::toJsonValue(m_collection_point_id));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_opening_hours.size() > 0) {
        obj.insert(QString("opening_hours"), ::OpenAPI::toJsonValue(m_opening_hours));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    if (m_recipient_address_id_isSet) {
        obj.insert(QString("recipient_address_id"), ::OpenAPI::toJsonValue(m_recipient_address_id));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_selected_isSet) {
        obj.insert(QString("selected"), ::OpenAPI::toJsonValue(m_selected));
    }
    if (m_shipping_experiences.size() > 0) {
        obj.insert(QString("shipping_experiences"), ::OpenAPI::toJsonValue(m_shipping_experiences));
    }
    if (m_street.size() > 0) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    return obj;
}

QString OAITemando_shipping_data_collection_point_quote_collection_point_interface::getCity() const {
    return m_city;
}
void OAITemando_shipping_data_collection_point_quote_collection_point_interface::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_city_Set() const{
    return m_city_isSet;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_city_Valid() const{
    return m_city_isValid;
}

QString OAITemando_shipping_data_collection_point_quote_collection_point_interface::getCollectionPointId() const {
    return m_collection_point_id;
}
void OAITemando_shipping_data_collection_point_quote_collection_point_interface::setCollectionPointId(const QString &collection_point_id) {
    m_collection_point_id = collection_point_id;
    m_collection_point_id_isSet = true;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_collection_point_id_Set() const{
    return m_collection_point_id_isSet;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_collection_point_id_Valid() const{
    return m_collection_point_id_isValid;
}

QString OAITemando_shipping_data_collection_point_quote_collection_point_interface::getCountry() const {
    return m_country;
}
void OAITemando_shipping_data_collection_point_quote_collection_point_interface::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_country_Set() const{
    return m_country_isSet;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_country_Valid() const{
    return m_country_isValid;
}

qint32 OAITemando_shipping_data_collection_point_quote_collection_point_interface::getEntityId() const {
    return m_entity_id;
}
void OAITemando_shipping_data_collection_point_quote_collection_point_interface::setEntityId(const qint32 &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAITemando_shipping_data_collection_point_quote_collection_point_interface::getName() const {
    return m_name;
}
void OAITemando_shipping_data_collection_point_quote_collection_point_interface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_name_Set() const{
    return m_name_isSet;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAITemando_shipping_data_collection_point_quote_collection_point_interface::getOpeningHours() const {
    return m_opening_hours;
}
void OAITemando_shipping_data_collection_point_quote_collection_point_interface::setOpeningHours(const QList<QString> &opening_hours) {
    m_opening_hours = opening_hours;
    m_opening_hours_isSet = true;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_opening_hours_Set() const{
    return m_opening_hours_isSet;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_opening_hours_Valid() const{
    return m_opening_hours_isValid;
}

QString OAITemando_shipping_data_collection_point_quote_collection_point_interface::getPostcode() const {
    return m_postcode;
}
void OAITemando_shipping_data_collection_point_quote_collection_point_interface::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_postcode_Valid() const{
    return m_postcode_isValid;
}

qint32 OAITemando_shipping_data_collection_point_quote_collection_point_interface::getRecipientAddressId() const {
    return m_recipient_address_id;
}
void OAITemando_shipping_data_collection_point_quote_collection_point_interface::setRecipientAddressId(const qint32 &recipient_address_id) {
    m_recipient_address_id = recipient_address_id;
    m_recipient_address_id_isSet = true;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_recipient_address_id_Set() const{
    return m_recipient_address_id_isSet;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_recipient_address_id_Valid() const{
    return m_recipient_address_id_isValid;
}

QString OAITemando_shipping_data_collection_point_quote_collection_point_interface::getRegion() const {
    return m_region;
}
void OAITemando_shipping_data_collection_point_quote_collection_point_interface::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_region_Set() const{
    return m_region_isSet;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_region_Valid() const{
    return m_region_isValid;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::isSelected() const {
    return m_selected;
}
void OAITemando_shipping_data_collection_point_quote_collection_point_interface::setSelected(const bool &selected) {
    m_selected = selected;
    m_selected_isSet = true;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_selected_Set() const{
    return m_selected_isSet;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_selected_Valid() const{
    return m_selected_isValid;
}

QList<QString> OAITemando_shipping_data_collection_point_quote_collection_point_interface::getShippingExperiences() const {
    return m_shipping_experiences;
}
void OAITemando_shipping_data_collection_point_quote_collection_point_interface::setShippingExperiences(const QList<QString> &shipping_experiences) {
    m_shipping_experiences = shipping_experiences;
    m_shipping_experiences_isSet = true;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_shipping_experiences_Set() const{
    return m_shipping_experiences_isSet;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_shipping_experiences_Valid() const{
    return m_shipping_experiences_isValid;
}

QList<QString> OAITemando_shipping_data_collection_point_quote_collection_point_interface::getStreet() const {
    return m_street;
}
void OAITemando_shipping_data_collection_point_quote_collection_point_interface::setStreet(const QList<QString> &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_street_Set() const{
    return m_street_isSet;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::is_street_Valid() const{
    return m_street_isValid;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opening_hours.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_experiences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_street.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemando_shipping_data_collection_point_quote_collection_point_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_city_isValid && m_collection_point_id_isValid && m_country_isValid && m_entity_id_isValid && m_name_isValid && m_opening_hours_isValid && m_postcode_isValid && m_recipient_address_id_isValid && m_region_isValid && m_selected_isValid && m_shipping_experiences_isValid && m_street_isValid && true;
}

} // namespace OpenAPI
