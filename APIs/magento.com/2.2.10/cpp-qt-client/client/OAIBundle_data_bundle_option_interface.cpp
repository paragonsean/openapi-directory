/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBundle_data_bundle_option_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBundle_data_bundle_option_interface::OAIBundle_data_bundle_option_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBundle_data_bundle_option_interface::OAIBundle_data_bundle_option_interface() {
    this->initializeModel();
}

OAIBundle_data_bundle_option_interface::~OAIBundle_data_bundle_option_interface() {}

void OAIBundle_data_bundle_option_interface::initializeModel() {

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_option_id_isSet = false;
    m_option_id_isValid = false;

    m_option_qty_isSet = false;
    m_option_qty_isValid = false;

    m_option_selections_isSet = false;
    m_option_selections_isValid = false;
}

void OAIBundle_data_bundle_option_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBundle_data_bundle_option_interface::fromJsonObject(QJsonObject json) {

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_option_id_isValid = ::OpenAPI::fromJsonValue(m_option_id, json[QString("option_id")]);
    m_option_id_isSet = !json[QString("option_id")].isNull() && m_option_id_isValid;

    m_option_qty_isValid = ::OpenAPI::fromJsonValue(m_option_qty, json[QString("option_qty")]);
    m_option_qty_isSet = !json[QString("option_qty")].isNull() && m_option_qty_isValid;

    m_option_selections_isValid = ::OpenAPI::fromJsonValue(m_option_selections, json[QString("option_selections")]);
    m_option_selections_isSet = !json[QString("option_selections")].isNull() && m_option_selections_isValid;
}

QString OAIBundle_data_bundle_option_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBundle_data_bundle_option_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_option_id_isSet) {
        obj.insert(QString("option_id"), ::OpenAPI::toJsonValue(m_option_id));
    }
    if (m_option_qty_isSet) {
        obj.insert(QString("option_qty"), ::OpenAPI::toJsonValue(m_option_qty));
    }
    if (m_option_selections.size() > 0) {
        obj.insert(QString("option_selections"), ::OpenAPI::toJsonValue(m_option_selections));
    }
    return obj;
}

OAIObject OAIBundle_data_bundle_option_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIBundle_data_bundle_option_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIBundle_data_bundle_option_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIBundle_data_bundle_option_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAIBundle_data_bundle_option_interface::getOptionId() const {
    return m_option_id;
}
void OAIBundle_data_bundle_option_interface::setOptionId(const qint32 &option_id) {
    m_option_id = option_id;
    m_option_id_isSet = true;
}

bool OAIBundle_data_bundle_option_interface::is_option_id_Set() const{
    return m_option_id_isSet;
}

bool OAIBundle_data_bundle_option_interface::is_option_id_Valid() const{
    return m_option_id_isValid;
}

qint32 OAIBundle_data_bundle_option_interface::getOptionQty() const {
    return m_option_qty;
}
void OAIBundle_data_bundle_option_interface::setOptionQty(const qint32 &option_qty) {
    m_option_qty = option_qty;
    m_option_qty_isSet = true;
}

bool OAIBundle_data_bundle_option_interface::is_option_qty_Set() const{
    return m_option_qty_isSet;
}

bool OAIBundle_data_bundle_option_interface::is_option_qty_Valid() const{
    return m_option_qty_isValid;
}

QList<qint32> OAIBundle_data_bundle_option_interface::getOptionSelections() const {
    return m_option_selections;
}
void OAIBundle_data_bundle_option_interface::setOptionSelections(const QList<qint32> &option_selections) {
    m_option_selections = option_selections;
    m_option_selections_isSet = true;
}

bool OAIBundle_data_bundle_option_interface::is_option_selections_Set() const{
    return m_option_selections_isSet;
}

bool OAIBundle_data_bundle_option_interface::is_option_selections_Valid() const{
    return m_option_selections_isValid;
}

bool OAIBundle_data_bundle_option_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_selections.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBundle_data_bundle_option_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_option_id_isValid && m_option_qty_isValid && m_option_selections_isValid && true;
}

} // namespace OpenAPI
