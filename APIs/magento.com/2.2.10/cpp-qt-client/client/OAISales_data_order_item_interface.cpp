/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISales_data_order_item_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISales_data_order_item_interface::OAISales_data_order_item_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISales_data_order_item_interface::OAISales_data_order_item_interface() {
    this->initializeModel();
}

OAISales_data_order_item_interface::~OAISales_data_order_item_interface() {}

void OAISales_data_order_item_interface::initializeModel() {

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_amount_refunded_isSet = false;
    m_amount_refunded_isValid = false;

    m_applied_rule_ids_isSet = false;
    m_applied_rule_ids_isValid = false;

    m_base_amount_refunded_isSet = false;
    m_base_amount_refunded_isValid = false;

    m_base_cost_isSet = false;
    m_base_cost_isValid = false;

    m_base_discount_amount_isSet = false;
    m_base_discount_amount_isValid = false;

    m_base_discount_invoiced_isSet = false;
    m_base_discount_invoiced_isValid = false;

    m_base_discount_refunded_isSet = false;
    m_base_discount_refunded_isValid = false;

    m_base_discount_tax_compensation_amount_isSet = false;
    m_base_discount_tax_compensation_amount_isValid = false;

    m_base_discount_tax_compensation_invoiced_isSet = false;
    m_base_discount_tax_compensation_invoiced_isValid = false;

    m_base_discount_tax_compensation_refunded_isSet = false;
    m_base_discount_tax_compensation_refunded_isValid = false;

    m_base_original_price_isSet = false;
    m_base_original_price_isValid = false;

    m_base_price_isSet = false;
    m_base_price_isValid = false;

    m_base_price_incl_tax_isSet = false;
    m_base_price_incl_tax_isValid = false;

    m_base_row_invoiced_isSet = false;
    m_base_row_invoiced_isValid = false;

    m_base_row_total_isSet = false;
    m_base_row_total_isValid = false;

    m_base_row_total_incl_tax_isSet = false;
    m_base_row_total_incl_tax_isValid = false;

    m_base_tax_amount_isSet = false;
    m_base_tax_amount_isValid = false;

    m_base_tax_before_discount_isSet = false;
    m_base_tax_before_discount_isValid = false;

    m_base_tax_invoiced_isSet = false;
    m_base_tax_invoiced_isValid = false;

    m_base_tax_refunded_isSet = false;
    m_base_tax_refunded_isValid = false;

    m_base_weee_tax_applied_amount_isSet = false;
    m_base_weee_tax_applied_amount_isValid = false;

    m_base_weee_tax_applied_row_amnt_isSet = false;
    m_base_weee_tax_applied_row_amnt_isValid = false;

    m_base_weee_tax_disposition_isSet = false;
    m_base_weee_tax_disposition_isValid = false;

    m_base_weee_tax_row_disposition_isSet = false;
    m_base_weee_tax_row_disposition_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_invoiced_isSet = false;
    m_discount_invoiced_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_discount_refunded_isSet = false;
    m_discount_refunded_isValid = false;

    m_discount_tax_compensation_amount_isSet = false;
    m_discount_tax_compensation_amount_isValid = false;

    m_discount_tax_compensation_canceled_isSet = false;
    m_discount_tax_compensation_canceled_isValid = false;

    m_discount_tax_compensation_invoiced_isSet = false;
    m_discount_tax_compensation_invoiced_isValid = false;

    m_discount_tax_compensation_refunded_isSet = false;
    m_discount_tax_compensation_refunded_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_ext_order_item_id_isSet = false;
    m_ext_order_item_id_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_free_shipping_isSet = false;
    m_free_shipping_isValid = false;

    m_gw_base_price_isSet = false;
    m_gw_base_price_isValid = false;

    m_gw_base_price_invoiced_isSet = false;
    m_gw_base_price_invoiced_isValid = false;

    m_gw_base_price_refunded_isSet = false;
    m_gw_base_price_refunded_isValid = false;

    m_gw_base_tax_amount_isSet = false;
    m_gw_base_tax_amount_isValid = false;

    m_gw_base_tax_amount_invoiced_isSet = false;
    m_gw_base_tax_amount_invoiced_isValid = false;

    m_gw_base_tax_amount_refunded_isSet = false;
    m_gw_base_tax_amount_refunded_isValid = false;

    m_gw_id_isSet = false;
    m_gw_id_isValid = false;

    m_gw_price_isSet = false;
    m_gw_price_isValid = false;

    m_gw_price_invoiced_isSet = false;
    m_gw_price_invoiced_isValid = false;

    m_gw_price_refunded_isSet = false;
    m_gw_price_refunded_isValid = false;

    m_gw_tax_amount_isSet = false;
    m_gw_tax_amount_isValid = false;

    m_gw_tax_amount_invoiced_isSet = false;
    m_gw_tax_amount_invoiced_isValid = false;

    m_gw_tax_amount_refunded_isSet = false;
    m_gw_tax_amount_refunded_isValid = false;

    m_is_qty_decimal_isSet = false;
    m_is_qty_decimal_isValid = false;

    m_is_virtual_isSet = false;
    m_is_virtual_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_locked_do_invoice_isSet = false;
    m_locked_do_invoice_isValid = false;

    m_locked_do_ship_isSet = false;
    m_locked_do_ship_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_no_discount_isSet = false;
    m_no_discount_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_original_price_isSet = false;
    m_original_price_isValid = false;

    m_parent_item_isSet = false;
    m_parent_item_isValid = false;

    m_parent_item_id_isSet = false;
    m_parent_item_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_incl_tax_isSet = false;
    m_price_incl_tax_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_option_isSet = false;
    m_product_option_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_qty_backordered_isSet = false;
    m_qty_backordered_isValid = false;

    m_qty_canceled_isSet = false;
    m_qty_canceled_isValid = false;

    m_qty_invoiced_isSet = false;
    m_qty_invoiced_isValid = false;

    m_qty_ordered_isSet = false;
    m_qty_ordered_isValid = false;

    m_qty_refunded_isSet = false;
    m_qty_refunded_isValid = false;

    m_qty_returned_isSet = false;
    m_qty_returned_isValid = false;

    m_qty_shipped_isSet = false;
    m_qty_shipped_isValid = false;

    m_quote_item_id_isSet = false;
    m_quote_item_id_isValid = false;

    m_row_invoiced_isSet = false;
    m_row_invoiced_isValid = false;

    m_row_total_isSet = false;
    m_row_total_isValid = false;

    m_row_total_incl_tax_isSet = false;
    m_row_total_incl_tax_isValid = false;

    m_row_weight_isSet = false;
    m_row_weight_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_before_discount_isSet = false;
    m_tax_before_discount_isValid = false;

    m_tax_canceled_isSet = false;
    m_tax_canceled_isValid = false;

    m_tax_invoiced_isSet = false;
    m_tax_invoiced_isValid = false;

    m_tax_percent_isSet = false;
    m_tax_percent_isValid = false;

    m_tax_refunded_isSet = false;
    m_tax_refunded_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_weee_tax_applied_isSet = false;
    m_weee_tax_applied_isValid = false;

    m_weee_tax_applied_amount_isSet = false;
    m_weee_tax_applied_amount_isValid = false;

    m_weee_tax_applied_row_amount_isSet = false;
    m_weee_tax_applied_row_amount_isValid = false;

    m_weee_tax_disposition_isSet = false;
    m_weee_tax_disposition_isValid = false;

    m_weee_tax_row_disposition_isSet = false;
    m_weee_tax_row_disposition_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAISales_data_order_item_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISales_data_order_item_interface::fromJsonObject(QJsonObject json) {

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additional_data")]);
    m_additional_data_isSet = !json[QString("additional_data")].isNull() && m_additional_data_isValid;

    m_amount_refunded_isValid = ::OpenAPI::fromJsonValue(m_amount_refunded, json[QString("amount_refunded")]);
    m_amount_refunded_isSet = !json[QString("amount_refunded")].isNull() && m_amount_refunded_isValid;

    m_applied_rule_ids_isValid = ::OpenAPI::fromJsonValue(m_applied_rule_ids, json[QString("applied_rule_ids")]);
    m_applied_rule_ids_isSet = !json[QString("applied_rule_ids")].isNull() && m_applied_rule_ids_isValid;

    m_base_amount_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_amount_refunded, json[QString("base_amount_refunded")]);
    m_base_amount_refunded_isSet = !json[QString("base_amount_refunded")].isNull() && m_base_amount_refunded_isValid;

    m_base_cost_isValid = ::OpenAPI::fromJsonValue(m_base_cost, json[QString("base_cost")]);
    m_base_cost_isSet = !json[QString("base_cost")].isNull() && m_base_cost_isValid;

    m_base_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_base_discount_amount, json[QString("base_discount_amount")]);
    m_base_discount_amount_isSet = !json[QString("base_discount_amount")].isNull() && m_base_discount_amount_isValid;

    m_base_discount_invoiced_isValid = ::OpenAPI::fromJsonValue(m_base_discount_invoiced, json[QString("base_discount_invoiced")]);
    m_base_discount_invoiced_isSet = !json[QString("base_discount_invoiced")].isNull() && m_base_discount_invoiced_isValid;

    m_base_discount_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_discount_refunded, json[QString("base_discount_refunded")]);
    m_base_discount_refunded_isSet = !json[QString("base_discount_refunded")].isNull() && m_base_discount_refunded_isValid;

    m_base_discount_tax_compensation_amount_isValid = ::OpenAPI::fromJsonValue(m_base_discount_tax_compensation_amount, json[QString("base_discount_tax_compensation_amount")]);
    m_base_discount_tax_compensation_amount_isSet = !json[QString("base_discount_tax_compensation_amount")].isNull() && m_base_discount_tax_compensation_amount_isValid;

    m_base_discount_tax_compensation_invoiced_isValid = ::OpenAPI::fromJsonValue(m_base_discount_tax_compensation_invoiced, json[QString("base_discount_tax_compensation_invoiced")]);
    m_base_discount_tax_compensation_invoiced_isSet = !json[QString("base_discount_tax_compensation_invoiced")].isNull() && m_base_discount_tax_compensation_invoiced_isValid;

    m_base_discount_tax_compensation_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_discount_tax_compensation_refunded, json[QString("base_discount_tax_compensation_refunded")]);
    m_base_discount_tax_compensation_refunded_isSet = !json[QString("base_discount_tax_compensation_refunded")].isNull() && m_base_discount_tax_compensation_refunded_isValid;

    m_base_original_price_isValid = ::OpenAPI::fromJsonValue(m_base_original_price, json[QString("base_original_price")]);
    m_base_original_price_isSet = !json[QString("base_original_price")].isNull() && m_base_original_price_isValid;

    m_base_price_isValid = ::OpenAPI::fromJsonValue(m_base_price, json[QString("base_price")]);
    m_base_price_isSet = !json[QString("base_price")].isNull() && m_base_price_isValid;

    m_base_price_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_base_price_incl_tax, json[QString("base_price_incl_tax")]);
    m_base_price_incl_tax_isSet = !json[QString("base_price_incl_tax")].isNull() && m_base_price_incl_tax_isValid;

    m_base_row_invoiced_isValid = ::OpenAPI::fromJsonValue(m_base_row_invoiced, json[QString("base_row_invoiced")]);
    m_base_row_invoiced_isSet = !json[QString("base_row_invoiced")].isNull() && m_base_row_invoiced_isValid;

    m_base_row_total_isValid = ::OpenAPI::fromJsonValue(m_base_row_total, json[QString("base_row_total")]);
    m_base_row_total_isSet = !json[QString("base_row_total")].isNull() && m_base_row_total_isValid;

    m_base_row_total_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_base_row_total_incl_tax, json[QString("base_row_total_incl_tax")]);
    m_base_row_total_incl_tax_isSet = !json[QString("base_row_total_incl_tax")].isNull() && m_base_row_total_incl_tax_isValid;

    m_base_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_base_tax_amount, json[QString("base_tax_amount")]);
    m_base_tax_amount_isSet = !json[QString("base_tax_amount")].isNull() && m_base_tax_amount_isValid;

    m_base_tax_before_discount_isValid = ::OpenAPI::fromJsonValue(m_base_tax_before_discount, json[QString("base_tax_before_discount")]);
    m_base_tax_before_discount_isSet = !json[QString("base_tax_before_discount")].isNull() && m_base_tax_before_discount_isValid;

    m_base_tax_invoiced_isValid = ::OpenAPI::fromJsonValue(m_base_tax_invoiced, json[QString("base_tax_invoiced")]);
    m_base_tax_invoiced_isSet = !json[QString("base_tax_invoiced")].isNull() && m_base_tax_invoiced_isValid;

    m_base_tax_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_tax_refunded, json[QString("base_tax_refunded")]);
    m_base_tax_refunded_isSet = !json[QString("base_tax_refunded")].isNull() && m_base_tax_refunded_isValid;

    m_base_weee_tax_applied_amount_isValid = ::OpenAPI::fromJsonValue(m_base_weee_tax_applied_amount, json[QString("base_weee_tax_applied_amount")]);
    m_base_weee_tax_applied_amount_isSet = !json[QString("base_weee_tax_applied_amount")].isNull() && m_base_weee_tax_applied_amount_isValid;

    m_base_weee_tax_applied_row_amnt_isValid = ::OpenAPI::fromJsonValue(m_base_weee_tax_applied_row_amnt, json[QString("base_weee_tax_applied_row_amnt")]);
    m_base_weee_tax_applied_row_amnt_isSet = !json[QString("base_weee_tax_applied_row_amnt")].isNull() && m_base_weee_tax_applied_row_amnt_isValid;

    m_base_weee_tax_disposition_isValid = ::OpenAPI::fromJsonValue(m_base_weee_tax_disposition, json[QString("base_weee_tax_disposition")]);
    m_base_weee_tax_disposition_isSet = !json[QString("base_weee_tax_disposition")].isNull() && m_base_weee_tax_disposition_isValid;

    m_base_weee_tax_row_disposition_isValid = ::OpenAPI::fromJsonValue(m_base_weee_tax_row_disposition, json[QString("base_weee_tax_row_disposition")]);
    m_base_weee_tax_row_disposition_isSet = !json[QString("base_weee_tax_row_disposition")].isNull() && m_base_weee_tax_row_disposition_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discount_amount")]);
    m_discount_amount_isSet = !json[QString("discount_amount")].isNull() && m_discount_amount_isValid;

    m_discount_invoiced_isValid = ::OpenAPI::fromJsonValue(m_discount_invoiced, json[QString("discount_invoiced")]);
    m_discount_invoiced_isSet = !json[QString("discount_invoiced")].isNull() && m_discount_invoiced_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discount_percent")]);
    m_discount_percent_isSet = !json[QString("discount_percent")].isNull() && m_discount_percent_isValid;

    m_discount_refunded_isValid = ::OpenAPI::fromJsonValue(m_discount_refunded, json[QString("discount_refunded")]);
    m_discount_refunded_isSet = !json[QString("discount_refunded")].isNull() && m_discount_refunded_isValid;

    m_discount_tax_compensation_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_tax_compensation_amount, json[QString("discount_tax_compensation_amount")]);
    m_discount_tax_compensation_amount_isSet = !json[QString("discount_tax_compensation_amount")].isNull() && m_discount_tax_compensation_amount_isValid;

    m_discount_tax_compensation_canceled_isValid = ::OpenAPI::fromJsonValue(m_discount_tax_compensation_canceled, json[QString("discount_tax_compensation_canceled")]);
    m_discount_tax_compensation_canceled_isSet = !json[QString("discount_tax_compensation_canceled")].isNull() && m_discount_tax_compensation_canceled_isValid;

    m_discount_tax_compensation_invoiced_isValid = ::OpenAPI::fromJsonValue(m_discount_tax_compensation_invoiced, json[QString("discount_tax_compensation_invoiced")]);
    m_discount_tax_compensation_invoiced_isSet = !json[QString("discount_tax_compensation_invoiced")].isNull() && m_discount_tax_compensation_invoiced_isValid;

    m_discount_tax_compensation_refunded_isValid = ::OpenAPI::fromJsonValue(m_discount_tax_compensation_refunded, json[QString("discount_tax_compensation_refunded")]);
    m_discount_tax_compensation_refunded_isSet = !json[QString("discount_tax_compensation_refunded")].isNull() && m_discount_tax_compensation_refunded_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("event_id")]);
    m_event_id_isSet = !json[QString("event_id")].isNull() && m_event_id_isValid;

    m_ext_order_item_id_isValid = ::OpenAPI::fromJsonValue(m_ext_order_item_id, json[QString("ext_order_item_id")]);
    m_ext_order_item_id_isSet = !json[QString("ext_order_item_id")].isNull() && m_ext_order_item_id_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_free_shipping_isValid = ::OpenAPI::fromJsonValue(m_free_shipping, json[QString("free_shipping")]);
    m_free_shipping_isSet = !json[QString("free_shipping")].isNull() && m_free_shipping_isValid;

    m_gw_base_price_isValid = ::OpenAPI::fromJsonValue(m_gw_base_price, json[QString("gw_base_price")]);
    m_gw_base_price_isSet = !json[QString("gw_base_price")].isNull() && m_gw_base_price_isValid;

    m_gw_base_price_invoiced_isValid = ::OpenAPI::fromJsonValue(m_gw_base_price_invoiced, json[QString("gw_base_price_invoiced")]);
    m_gw_base_price_invoiced_isSet = !json[QString("gw_base_price_invoiced")].isNull() && m_gw_base_price_invoiced_isValid;

    m_gw_base_price_refunded_isValid = ::OpenAPI::fromJsonValue(m_gw_base_price_refunded, json[QString("gw_base_price_refunded")]);
    m_gw_base_price_refunded_isSet = !json[QString("gw_base_price_refunded")].isNull() && m_gw_base_price_refunded_isValid;

    m_gw_base_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_gw_base_tax_amount, json[QString("gw_base_tax_amount")]);
    m_gw_base_tax_amount_isSet = !json[QString("gw_base_tax_amount")].isNull() && m_gw_base_tax_amount_isValid;

    m_gw_base_tax_amount_invoiced_isValid = ::OpenAPI::fromJsonValue(m_gw_base_tax_amount_invoiced, json[QString("gw_base_tax_amount_invoiced")]);
    m_gw_base_tax_amount_invoiced_isSet = !json[QString("gw_base_tax_amount_invoiced")].isNull() && m_gw_base_tax_amount_invoiced_isValid;

    m_gw_base_tax_amount_refunded_isValid = ::OpenAPI::fromJsonValue(m_gw_base_tax_amount_refunded, json[QString("gw_base_tax_amount_refunded")]);
    m_gw_base_tax_amount_refunded_isSet = !json[QString("gw_base_tax_amount_refunded")].isNull() && m_gw_base_tax_amount_refunded_isValid;

    m_gw_id_isValid = ::OpenAPI::fromJsonValue(m_gw_id, json[QString("gw_id")]);
    m_gw_id_isSet = !json[QString("gw_id")].isNull() && m_gw_id_isValid;

    m_gw_price_isValid = ::OpenAPI::fromJsonValue(m_gw_price, json[QString("gw_price")]);
    m_gw_price_isSet = !json[QString("gw_price")].isNull() && m_gw_price_isValid;

    m_gw_price_invoiced_isValid = ::OpenAPI::fromJsonValue(m_gw_price_invoiced, json[QString("gw_price_invoiced")]);
    m_gw_price_invoiced_isSet = !json[QString("gw_price_invoiced")].isNull() && m_gw_price_invoiced_isValid;

    m_gw_price_refunded_isValid = ::OpenAPI::fromJsonValue(m_gw_price_refunded, json[QString("gw_price_refunded")]);
    m_gw_price_refunded_isSet = !json[QString("gw_price_refunded")].isNull() && m_gw_price_refunded_isValid;

    m_gw_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_gw_tax_amount, json[QString("gw_tax_amount")]);
    m_gw_tax_amount_isSet = !json[QString("gw_tax_amount")].isNull() && m_gw_tax_amount_isValid;

    m_gw_tax_amount_invoiced_isValid = ::OpenAPI::fromJsonValue(m_gw_tax_amount_invoiced, json[QString("gw_tax_amount_invoiced")]);
    m_gw_tax_amount_invoiced_isSet = !json[QString("gw_tax_amount_invoiced")].isNull() && m_gw_tax_amount_invoiced_isValid;

    m_gw_tax_amount_refunded_isValid = ::OpenAPI::fromJsonValue(m_gw_tax_amount_refunded, json[QString("gw_tax_amount_refunded")]);
    m_gw_tax_amount_refunded_isSet = !json[QString("gw_tax_amount_refunded")].isNull() && m_gw_tax_amount_refunded_isValid;

    m_is_qty_decimal_isValid = ::OpenAPI::fromJsonValue(m_is_qty_decimal, json[QString("is_qty_decimal")]);
    m_is_qty_decimal_isSet = !json[QString("is_qty_decimal")].isNull() && m_is_qty_decimal_isValid;

    m_is_virtual_isValid = ::OpenAPI::fromJsonValue(m_is_virtual, json[QString("is_virtual")]);
    m_is_virtual_isSet = !json[QString("is_virtual")].isNull() && m_is_virtual_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("item_id")]);
    m_item_id_isSet = !json[QString("item_id")].isNull() && m_item_id_isValid;

    m_locked_do_invoice_isValid = ::OpenAPI::fromJsonValue(m_locked_do_invoice, json[QString("locked_do_invoice")]);
    m_locked_do_invoice_isSet = !json[QString("locked_do_invoice")].isNull() && m_locked_do_invoice_isValid;

    m_locked_do_ship_isValid = ::OpenAPI::fromJsonValue(m_locked_do_ship, json[QString("locked_do_ship")]);
    m_locked_do_ship_isSet = !json[QString("locked_do_ship")].isNull() && m_locked_do_ship_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_no_discount_isValid = ::OpenAPI::fromJsonValue(m_no_discount, json[QString("no_discount")]);
    m_no_discount_isSet = !json[QString("no_discount")].isNull() && m_no_discount_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_original_price_isValid = ::OpenAPI::fromJsonValue(m_original_price, json[QString("original_price")]);
    m_original_price_isSet = !json[QString("original_price")].isNull() && m_original_price_isValid;

    m_parent_item_isValid = ::OpenAPI::fromJsonValue(m_parent_item, json[QString("parent_item")]);
    m_parent_item_isSet = !json[QString("parent_item")].isNull() && m_parent_item_isValid;

    m_parent_item_id_isValid = ::OpenAPI::fromJsonValue(m_parent_item_id, json[QString("parent_item_id")]);
    m_parent_item_id_isSet = !json[QString("parent_item_id")].isNull() && m_parent_item_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_price_incl_tax, json[QString("price_incl_tax")]);
    m_price_incl_tax_isSet = !json[QString("price_incl_tax")].isNull() && m_price_incl_tax_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("product_id")]);
    m_product_id_isSet = !json[QString("product_id")].isNull() && m_product_id_isValid;

    m_product_option_isValid = ::OpenAPI::fromJsonValue(m_product_option, json[QString("product_option")]);
    m_product_option_isSet = !json[QString("product_option")].isNull() && m_product_option_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("product_type")]);
    m_product_type_isSet = !json[QString("product_type")].isNull() && m_product_type_isValid;

    m_qty_backordered_isValid = ::OpenAPI::fromJsonValue(m_qty_backordered, json[QString("qty_backordered")]);
    m_qty_backordered_isSet = !json[QString("qty_backordered")].isNull() && m_qty_backordered_isValid;

    m_qty_canceled_isValid = ::OpenAPI::fromJsonValue(m_qty_canceled, json[QString("qty_canceled")]);
    m_qty_canceled_isSet = !json[QString("qty_canceled")].isNull() && m_qty_canceled_isValid;

    m_qty_invoiced_isValid = ::OpenAPI::fromJsonValue(m_qty_invoiced, json[QString("qty_invoiced")]);
    m_qty_invoiced_isSet = !json[QString("qty_invoiced")].isNull() && m_qty_invoiced_isValid;

    m_qty_ordered_isValid = ::OpenAPI::fromJsonValue(m_qty_ordered, json[QString("qty_ordered")]);
    m_qty_ordered_isSet = !json[QString("qty_ordered")].isNull() && m_qty_ordered_isValid;

    m_qty_refunded_isValid = ::OpenAPI::fromJsonValue(m_qty_refunded, json[QString("qty_refunded")]);
    m_qty_refunded_isSet = !json[QString("qty_refunded")].isNull() && m_qty_refunded_isValid;

    m_qty_returned_isValid = ::OpenAPI::fromJsonValue(m_qty_returned, json[QString("qty_returned")]);
    m_qty_returned_isSet = !json[QString("qty_returned")].isNull() && m_qty_returned_isValid;

    m_qty_shipped_isValid = ::OpenAPI::fromJsonValue(m_qty_shipped, json[QString("qty_shipped")]);
    m_qty_shipped_isSet = !json[QString("qty_shipped")].isNull() && m_qty_shipped_isValid;

    m_quote_item_id_isValid = ::OpenAPI::fromJsonValue(m_quote_item_id, json[QString("quote_item_id")]);
    m_quote_item_id_isSet = !json[QString("quote_item_id")].isNull() && m_quote_item_id_isValid;

    m_row_invoiced_isValid = ::OpenAPI::fromJsonValue(m_row_invoiced, json[QString("row_invoiced")]);
    m_row_invoiced_isSet = !json[QString("row_invoiced")].isNull() && m_row_invoiced_isValid;

    m_row_total_isValid = ::OpenAPI::fromJsonValue(m_row_total, json[QString("row_total")]);
    m_row_total_isSet = !json[QString("row_total")].isNull() && m_row_total_isValid;

    m_row_total_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_row_total_incl_tax, json[QString("row_total_incl_tax")]);
    m_row_total_incl_tax_isSet = !json[QString("row_total_incl_tax")].isNull() && m_row_total_incl_tax_isValid;

    m_row_weight_isValid = ::OpenAPI::fromJsonValue(m_row_weight, json[QString("row_weight")]);
    m_row_weight_isSet = !json[QString("row_weight")].isNull() && m_row_weight_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("tax_amount")]);
    m_tax_amount_isSet = !json[QString("tax_amount")].isNull() && m_tax_amount_isValid;

    m_tax_before_discount_isValid = ::OpenAPI::fromJsonValue(m_tax_before_discount, json[QString("tax_before_discount")]);
    m_tax_before_discount_isSet = !json[QString("tax_before_discount")].isNull() && m_tax_before_discount_isValid;

    m_tax_canceled_isValid = ::OpenAPI::fromJsonValue(m_tax_canceled, json[QString("tax_canceled")]);
    m_tax_canceled_isSet = !json[QString("tax_canceled")].isNull() && m_tax_canceled_isValid;

    m_tax_invoiced_isValid = ::OpenAPI::fromJsonValue(m_tax_invoiced, json[QString("tax_invoiced")]);
    m_tax_invoiced_isSet = !json[QString("tax_invoiced")].isNull() && m_tax_invoiced_isValid;

    m_tax_percent_isValid = ::OpenAPI::fromJsonValue(m_tax_percent, json[QString("tax_percent")]);
    m_tax_percent_isSet = !json[QString("tax_percent")].isNull() && m_tax_percent_isValid;

    m_tax_refunded_isValid = ::OpenAPI::fromJsonValue(m_tax_refunded, json[QString("tax_refunded")]);
    m_tax_refunded_isSet = !json[QString("tax_refunded")].isNull() && m_tax_refunded_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_weee_tax_applied_isValid = ::OpenAPI::fromJsonValue(m_weee_tax_applied, json[QString("weee_tax_applied")]);
    m_weee_tax_applied_isSet = !json[QString("weee_tax_applied")].isNull() && m_weee_tax_applied_isValid;

    m_weee_tax_applied_amount_isValid = ::OpenAPI::fromJsonValue(m_weee_tax_applied_amount, json[QString("weee_tax_applied_amount")]);
    m_weee_tax_applied_amount_isSet = !json[QString("weee_tax_applied_amount")].isNull() && m_weee_tax_applied_amount_isValid;

    m_weee_tax_applied_row_amount_isValid = ::OpenAPI::fromJsonValue(m_weee_tax_applied_row_amount, json[QString("weee_tax_applied_row_amount")]);
    m_weee_tax_applied_row_amount_isSet = !json[QString("weee_tax_applied_row_amount")].isNull() && m_weee_tax_applied_row_amount_isValid;

    m_weee_tax_disposition_isValid = ::OpenAPI::fromJsonValue(m_weee_tax_disposition, json[QString("weee_tax_disposition")]);
    m_weee_tax_disposition_isSet = !json[QString("weee_tax_disposition")].isNull() && m_weee_tax_disposition_isValid;

    m_weee_tax_row_disposition_isValid = ::OpenAPI::fromJsonValue(m_weee_tax_row_disposition, json[QString("weee_tax_row_disposition")]);
    m_weee_tax_row_disposition_isSet = !json[QString("weee_tax_row_disposition")].isNull() && m_weee_tax_row_disposition_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAISales_data_order_item_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISales_data_order_item_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_data_isSet) {
        obj.insert(QString("additional_data"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_amount_refunded_isSet) {
        obj.insert(QString("amount_refunded"), ::OpenAPI::toJsonValue(m_amount_refunded));
    }
    if (m_applied_rule_ids_isSet) {
        obj.insert(QString("applied_rule_ids"), ::OpenAPI::toJsonValue(m_applied_rule_ids));
    }
    if (m_base_amount_refunded_isSet) {
        obj.insert(QString("base_amount_refunded"), ::OpenAPI::toJsonValue(m_base_amount_refunded));
    }
    if (m_base_cost_isSet) {
        obj.insert(QString("base_cost"), ::OpenAPI::toJsonValue(m_base_cost));
    }
    if (m_base_discount_amount_isSet) {
        obj.insert(QString("base_discount_amount"), ::OpenAPI::toJsonValue(m_base_discount_amount));
    }
    if (m_base_discount_invoiced_isSet) {
        obj.insert(QString("base_discount_invoiced"), ::OpenAPI::toJsonValue(m_base_discount_invoiced));
    }
    if (m_base_discount_refunded_isSet) {
        obj.insert(QString("base_discount_refunded"), ::OpenAPI::toJsonValue(m_base_discount_refunded));
    }
    if (m_base_discount_tax_compensation_amount_isSet) {
        obj.insert(QString("base_discount_tax_compensation_amount"), ::OpenAPI::toJsonValue(m_base_discount_tax_compensation_amount));
    }
    if (m_base_discount_tax_compensation_invoiced_isSet) {
        obj.insert(QString("base_discount_tax_compensation_invoiced"), ::OpenAPI::toJsonValue(m_base_discount_tax_compensation_invoiced));
    }
    if (m_base_discount_tax_compensation_refunded_isSet) {
        obj.insert(QString("base_discount_tax_compensation_refunded"), ::OpenAPI::toJsonValue(m_base_discount_tax_compensation_refunded));
    }
    if (m_base_original_price_isSet) {
        obj.insert(QString("base_original_price"), ::OpenAPI::toJsonValue(m_base_original_price));
    }
    if (m_base_price_isSet) {
        obj.insert(QString("base_price"), ::OpenAPI::toJsonValue(m_base_price));
    }
    if (m_base_price_incl_tax_isSet) {
        obj.insert(QString("base_price_incl_tax"), ::OpenAPI::toJsonValue(m_base_price_incl_tax));
    }
    if (m_base_row_invoiced_isSet) {
        obj.insert(QString("base_row_invoiced"), ::OpenAPI::toJsonValue(m_base_row_invoiced));
    }
    if (m_base_row_total_isSet) {
        obj.insert(QString("base_row_total"), ::OpenAPI::toJsonValue(m_base_row_total));
    }
    if (m_base_row_total_incl_tax_isSet) {
        obj.insert(QString("base_row_total_incl_tax"), ::OpenAPI::toJsonValue(m_base_row_total_incl_tax));
    }
    if (m_base_tax_amount_isSet) {
        obj.insert(QString("base_tax_amount"), ::OpenAPI::toJsonValue(m_base_tax_amount));
    }
    if (m_base_tax_before_discount_isSet) {
        obj.insert(QString("base_tax_before_discount"), ::OpenAPI::toJsonValue(m_base_tax_before_discount));
    }
    if (m_base_tax_invoiced_isSet) {
        obj.insert(QString("base_tax_invoiced"), ::OpenAPI::toJsonValue(m_base_tax_invoiced));
    }
    if (m_base_tax_refunded_isSet) {
        obj.insert(QString("base_tax_refunded"), ::OpenAPI::toJsonValue(m_base_tax_refunded));
    }
    if (m_base_weee_tax_applied_amount_isSet) {
        obj.insert(QString("base_weee_tax_applied_amount"), ::OpenAPI::toJsonValue(m_base_weee_tax_applied_amount));
    }
    if (m_base_weee_tax_applied_row_amnt_isSet) {
        obj.insert(QString("base_weee_tax_applied_row_amnt"), ::OpenAPI::toJsonValue(m_base_weee_tax_applied_row_amnt));
    }
    if (m_base_weee_tax_disposition_isSet) {
        obj.insert(QString("base_weee_tax_disposition"), ::OpenAPI::toJsonValue(m_base_weee_tax_disposition));
    }
    if (m_base_weee_tax_row_disposition_isSet) {
        obj.insert(QString("base_weee_tax_row_disposition"), ::OpenAPI::toJsonValue(m_base_weee_tax_row_disposition));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("discount_amount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_invoiced_isSet) {
        obj.insert(QString("discount_invoiced"), ::OpenAPI::toJsonValue(m_discount_invoiced));
    }
    if (m_discount_percent_isSet) {
        obj.insert(QString("discount_percent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_discount_refunded_isSet) {
        obj.insert(QString("discount_refunded"), ::OpenAPI::toJsonValue(m_discount_refunded));
    }
    if (m_discount_tax_compensation_amount_isSet) {
        obj.insert(QString("discount_tax_compensation_amount"), ::OpenAPI::toJsonValue(m_discount_tax_compensation_amount));
    }
    if (m_discount_tax_compensation_canceled_isSet) {
        obj.insert(QString("discount_tax_compensation_canceled"), ::OpenAPI::toJsonValue(m_discount_tax_compensation_canceled));
    }
    if (m_discount_tax_compensation_invoiced_isSet) {
        obj.insert(QString("discount_tax_compensation_invoiced"), ::OpenAPI::toJsonValue(m_discount_tax_compensation_invoiced));
    }
    if (m_discount_tax_compensation_refunded_isSet) {
        obj.insert(QString("discount_tax_compensation_refunded"), ::OpenAPI::toJsonValue(m_discount_tax_compensation_refunded));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("event_id"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_ext_order_item_id_isSet) {
        obj.insert(QString("ext_order_item_id"), ::OpenAPI::toJsonValue(m_ext_order_item_id));
    }
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_free_shipping_isSet) {
        obj.insert(QString("free_shipping"), ::OpenAPI::toJsonValue(m_free_shipping));
    }
    if (m_gw_base_price_isSet) {
        obj.insert(QString("gw_base_price"), ::OpenAPI::toJsonValue(m_gw_base_price));
    }
    if (m_gw_base_price_invoiced_isSet) {
        obj.insert(QString("gw_base_price_invoiced"), ::OpenAPI::toJsonValue(m_gw_base_price_invoiced));
    }
    if (m_gw_base_price_refunded_isSet) {
        obj.insert(QString("gw_base_price_refunded"), ::OpenAPI::toJsonValue(m_gw_base_price_refunded));
    }
    if (m_gw_base_tax_amount_isSet) {
        obj.insert(QString("gw_base_tax_amount"), ::OpenAPI::toJsonValue(m_gw_base_tax_amount));
    }
    if (m_gw_base_tax_amount_invoiced_isSet) {
        obj.insert(QString("gw_base_tax_amount_invoiced"), ::OpenAPI::toJsonValue(m_gw_base_tax_amount_invoiced));
    }
    if (m_gw_base_tax_amount_refunded_isSet) {
        obj.insert(QString("gw_base_tax_amount_refunded"), ::OpenAPI::toJsonValue(m_gw_base_tax_amount_refunded));
    }
    if (m_gw_id_isSet) {
        obj.insert(QString("gw_id"), ::OpenAPI::toJsonValue(m_gw_id));
    }
    if (m_gw_price_isSet) {
        obj.insert(QString("gw_price"), ::OpenAPI::toJsonValue(m_gw_price));
    }
    if (m_gw_price_invoiced_isSet) {
        obj.insert(QString("gw_price_invoiced"), ::OpenAPI::toJsonValue(m_gw_price_invoiced));
    }
    if (m_gw_price_refunded_isSet) {
        obj.insert(QString("gw_price_refunded"), ::OpenAPI::toJsonValue(m_gw_price_refunded));
    }
    if (m_gw_tax_amount_isSet) {
        obj.insert(QString("gw_tax_amount"), ::OpenAPI::toJsonValue(m_gw_tax_amount));
    }
    if (m_gw_tax_amount_invoiced_isSet) {
        obj.insert(QString("gw_tax_amount_invoiced"), ::OpenAPI::toJsonValue(m_gw_tax_amount_invoiced));
    }
    if (m_gw_tax_amount_refunded_isSet) {
        obj.insert(QString("gw_tax_amount_refunded"), ::OpenAPI::toJsonValue(m_gw_tax_amount_refunded));
    }
    if (m_is_qty_decimal_isSet) {
        obj.insert(QString("is_qty_decimal"), ::OpenAPI::toJsonValue(m_is_qty_decimal));
    }
    if (m_is_virtual_isSet) {
        obj.insert(QString("is_virtual"), ::OpenAPI::toJsonValue(m_is_virtual));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("item_id"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_locked_do_invoice_isSet) {
        obj.insert(QString("locked_do_invoice"), ::OpenAPI::toJsonValue(m_locked_do_invoice));
    }
    if (m_locked_do_ship_isSet) {
        obj.insert(QString("locked_do_ship"), ::OpenAPI::toJsonValue(m_locked_do_ship));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_no_discount_isSet) {
        obj.insert(QString("no_discount"), ::OpenAPI::toJsonValue(m_no_discount));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_original_price_isSet) {
        obj.insert(QString("original_price"), ::OpenAPI::toJsonValue(m_original_price));
    }
    if (m_parent_item.isSet()) {
        obj.insert(QString("parent_item"), ::OpenAPI::toJsonValue(m_parent_item));
    }
    if (m_parent_item_id_isSet) {
        obj.insert(QString("parent_item_id"), ::OpenAPI::toJsonValue(m_parent_item_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_incl_tax_isSet) {
        obj.insert(QString("price_incl_tax"), ::OpenAPI::toJsonValue(m_price_incl_tax));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("product_id"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_option.isSet()) {
        obj.insert(QString("product_option"), ::OpenAPI::toJsonValue(m_product_option));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("product_type"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_qty_backordered_isSet) {
        obj.insert(QString("qty_backordered"), ::OpenAPI::toJsonValue(m_qty_backordered));
    }
    if (m_qty_canceled_isSet) {
        obj.insert(QString("qty_canceled"), ::OpenAPI::toJsonValue(m_qty_canceled));
    }
    if (m_qty_invoiced_isSet) {
        obj.insert(QString("qty_invoiced"), ::OpenAPI::toJsonValue(m_qty_invoiced));
    }
    if (m_qty_ordered_isSet) {
        obj.insert(QString("qty_ordered"), ::OpenAPI::toJsonValue(m_qty_ordered));
    }
    if (m_qty_refunded_isSet) {
        obj.insert(QString("qty_refunded"), ::OpenAPI::toJsonValue(m_qty_refunded));
    }
    if (m_qty_returned_isSet) {
        obj.insert(QString("qty_returned"), ::OpenAPI::toJsonValue(m_qty_returned));
    }
    if (m_qty_shipped_isSet) {
        obj.insert(QString("qty_shipped"), ::OpenAPI::toJsonValue(m_qty_shipped));
    }
    if (m_quote_item_id_isSet) {
        obj.insert(QString("quote_item_id"), ::OpenAPI::toJsonValue(m_quote_item_id));
    }
    if (m_row_invoiced_isSet) {
        obj.insert(QString("row_invoiced"), ::OpenAPI::toJsonValue(m_row_invoiced));
    }
    if (m_row_total_isSet) {
        obj.insert(QString("row_total"), ::OpenAPI::toJsonValue(m_row_total));
    }
    if (m_row_total_incl_tax_isSet) {
        obj.insert(QString("row_total_incl_tax"), ::OpenAPI::toJsonValue(m_row_total_incl_tax));
    }
    if (m_row_weight_isSet) {
        obj.insert(QString("row_weight"), ::OpenAPI::toJsonValue(m_row_weight));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("tax_amount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_before_discount_isSet) {
        obj.insert(QString("tax_before_discount"), ::OpenAPI::toJsonValue(m_tax_before_discount));
    }
    if (m_tax_canceled_isSet) {
        obj.insert(QString("tax_canceled"), ::OpenAPI::toJsonValue(m_tax_canceled));
    }
    if (m_tax_invoiced_isSet) {
        obj.insert(QString("tax_invoiced"), ::OpenAPI::toJsonValue(m_tax_invoiced));
    }
    if (m_tax_percent_isSet) {
        obj.insert(QString("tax_percent"), ::OpenAPI::toJsonValue(m_tax_percent));
    }
    if (m_tax_refunded_isSet) {
        obj.insert(QString("tax_refunded"), ::OpenAPI::toJsonValue(m_tax_refunded));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_weee_tax_applied_isSet) {
        obj.insert(QString("weee_tax_applied"), ::OpenAPI::toJsonValue(m_weee_tax_applied));
    }
    if (m_weee_tax_applied_amount_isSet) {
        obj.insert(QString("weee_tax_applied_amount"), ::OpenAPI::toJsonValue(m_weee_tax_applied_amount));
    }
    if (m_weee_tax_applied_row_amount_isSet) {
        obj.insert(QString("weee_tax_applied_row_amount"), ::OpenAPI::toJsonValue(m_weee_tax_applied_row_amount));
    }
    if (m_weee_tax_disposition_isSet) {
        obj.insert(QString("weee_tax_disposition"), ::OpenAPI::toJsonValue(m_weee_tax_disposition));
    }
    if (m_weee_tax_row_disposition_isSet) {
        obj.insert(QString("weee_tax_row_disposition"), ::OpenAPI::toJsonValue(m_weee_tax_row_disposition));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAISales_data_order_item_interface::getAdditionalData() const {
    return m_additional_data;
}
void OAISales_data_order_item_interface::setAdditionalData(const QString &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAISales_data_order_item_interface::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAISales_data_order_item_interface::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

double OAISales_data_order_item_interface::getAmountRefunded() const {
    return m_amount_refunded;
}
void OAISales_data_order_item_interface::setAmountRefunded(const double &amount_refunded) {
    m_amount_refunded = amount_refunded;
    m_amount_refunded_isSet = true;
}

bool OAISales_data_order_item_interface::is_amount_refunded_Set() const{
    return m_amount_refunded_isSet;
}

bool OAISales_data_order_item_interface::is_amount_refunded_Valid() const{
    return m_amount_refunded_isValid;
}

QString OAISales_data_order_item_interface::getAppliedRuleIds() const {
    return m_applied_rule_ids;
}
void OAISales_data_order_item_interface::setAppliedRuleIds(const QString &applied_rule_ids) {
    m_applied_rule_ids = applied_rule_ids;
    m_applied_rule_ids_isSet = true;
}

bool OAISales_data_order_item_interface::is_applied_rule_ids_Set() const{
    return m_applied_rule_ids_isSet;
}

bool OAISales_data_order_item_interface::is_applied_rule_ids_Valid() const{
    return m_applied_rule_ids_isValid;
}

double OAISales_data_order_item_interface::getBaseAmountRefunded() const {
    return m_base_amount_refunded;
}
void OAISales_data_order_item_interface::setBaseAmountRefunded(const double &base_amount_refunded) {
    m_base_amount_refunded = base_amount_refunded;
    m_base_amount_refunded_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_amount_refunded_Set() const{
    return m_base_amount_refunded_isSet;
}

bool OAISales_data_order_item_interface::is_base_amount_refunded_Valid() const{
    return m_base_amount_refunded_isValid;
}

double OAISales_data_order_item_interface::getBaseCost() const {
    return m_base_cost;
}
void OAISales_data_order_item_interface::setBaseCost(const double &base_cost) {
    m_base_cost = base_cost;
    m_base_cost_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_cost_Set() const{
    return m_base_cost_isSet;
}

bool OAISales_data_order_item_interface::is_base_cost_Valid() const{
    return m_base_cost_isValid;
}

double OAISales_data_order_item_interface::getBaseDiscountAmount() const {
    return m_base_discount_amount;
}
void OAISales_data_order_item_interface::setBaseDiscountAmount(const double &base_discount_amount) {
    m_base_discount_amount = base_discount_amount;
    m_base_discount_amount_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_discount_amount_Set() const{
    return m_base_discount_amount_isSet;
}

bool OAISales_data_order_item_interface::is_base_discount_amount_Valid() const{
    return m_base_discount_amount_isValid;
}

double OAISales_data_order_item_interface::getBaseDiscountInvoiced() const {
    return m_base_discount_invoiced;
}
void OAISales_data_order_item_interface::setBaseDiscountInvoiced(const double &base_discount_invoiced) {
    m_base_discount_invoiced = base_discount_invoiced;
    m_base_discount_invoiced_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_discount_invoiced_Set() const{
    return m_base_discount_invoiced_isSet;
}

bool OAISales_data_order_item_interface::is_base_discount_invoiced_Valid() const{
    return m_base_discount_invoiced_isValid;
}

double OAISales_data_order_item_interface::getBaseDiscountRefunded() const {
    return m_base_discount_refunded;
}
void OAISales_data_order_item_interface::setBaseDiscountRefunded(const double &base_discount_refunded) {
    m_base_discount_refunded = base_discount_refunded;
    m_base_discount_refunded_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_discount_refunded_Set() const{
    return m_base_discount_refunded_isSet;
}

bool OAISales_data_order_item_interface::is_base_discount_refunded_Valid() const{
    return m_base_discount_refunded_isValid;
}

double OAISales_data_order_item_interface::getBaseDiscountTaxCompensationAmount() const {
    return m_base_discount_tax_compensation_amount;
}
void OAISales_data_order_item_interface::setBaseDiscountTaxCompensationAmount(const double &base_discount_tax_compensation_amount) {
    m_base_discount_tax_compensation_amount = base_discount_tax_compensation_amount;
    m_base_discount_tax_compensation_amount_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_discount_tax_compensation_amount_Set() const{
    return m_base_discount_tax_compensation_amount_isSet;
}

bool OAISales_data_order_item_interface::is_base_discount_tax_compensation_amount_Valid() const{
    return m_base_discount_tax_compensation_amount_isValid;
}

double OAISales_data_order_item_interface::getBaseDiscountTaxCompensationInvoiced() const {
    return m_base_discount_tax_compensation_invoiced;
}
void OAISales_data_order_item_interface::setBaseDiscountTaxCompensationInvoiced(const double &base_discount_tax_compensation_invoiced) {
    m_base_discount_tax_compensation_invoiced = base_discount_tax_compensation_invoiced;
    m_base_discount_tax_compensation_invoiced_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_discount_tax_compensation_invoiced_Set() const{
    return m_base_discount_tax_compensation_invoiced_isSet;
}

bool OAISales_data_order_item_interface::is_base_discount_tax_compensation_invoiced_Valid() const{
    return m_base_discount_tax_compensation_invoiced_isValid;
}

double OAISales_data_order_item_interface::getBaseDiscountTaxCompensationRefunded() const {
    return m_base_discount_tax_compensation_refunded;
}
void OAISales_data_order_item_interface::setBaseDiscountTaxCompensationRefunded(const double &base_discount_tax_compensation_refunded) {
    m_base_discount_tax_compensation_refunded = base_discount_tax_compensation_refunded;
    m_base_discount_tax_compensation_refunded_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_discount_tax_compensation_refunded_Set() const{
    return m_base_discount_tax_compensation_refunded_isSet;
}

bool OAISales_data_order_item_interface::is_base_discount_tax_compensation_refunded_Valid() const{
    return m_base_discount_tax_compensation_refunded_isValid;
}

double OAISales_data_order_item_interface::getBaseOriginalPrice() const {
    return m_base_original_price;
}
void OAISales_data_order_item_interface::setBaseOriginalPrice(const double &base_original_price) {
    m_base_original_price = base_original_price;
    m_base_original_price_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_original_price_Set() const{
    return m_base_original_price_isSet;
}

bool OAISales_data_order_item_interface::is_base_original_price_Valid() const{
    return m_base_original_price_isValid;
}

double OAISales_data_order_item_interface::getBasePrice() const {
    return m_base_price;
}
void OAISales_data_order_item_interface::setBasePrice(const double &base_price) {
    m_base_price = base_price;
    m_base_price_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_price_Set() const{
    return m_base_price_isSet;
}

bool OAISales_data_order_item_interface::is_base_price_Valid() const{
    return m_base_price_isValid;
}

double OAISales_data_order_item_interface::getBasePriceInclTax() const {
    return m_base_price_incl_tax;
}
void OAISales_data_order_item_interface::setBasePriceInclTax(const double &base_price_incl_tax) {
    m_base_price_incl_tax = base_price_incl_tax;
    m_base_price_incl_tax_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_price_incl_tax_Set() const{
    return m_base_price_incl_tax_isSet;
}

bool OAISales_data_order_item_interface::is_base_price_incl_tax_Valid() const{
    return m_base_price_incl_tax_isValid;
}

double OAISales_data_order_item_interface::getBaseRowInvoiced() const {
    return m_base_row_invoiced;
}
void OAISales_data_order_item_interface::setBaseRowInvoiced(const double &base_row_invoiced) {
    m_base_row_invoiced = base_row_invoiced;
    m_base_row_invoiced_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_row_invoiced_Set() const{
    return m_base_row_invoiced_isSet;
}

bool OAISales_data_order_item_interface::is_base_row_invoiced_Valid() const{
    return m_base_row_invoiced_isValid;
}

double OAISales_data_order_item_interface::getBaseRowTotal() const {
    return m_base_row_total;
}
void OAISales_data_order_item_interface::setBaseRowTotal(const double &base_row_total) {
    m_base_row_total = base_row_total;
    m_base_row_total_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_row_total_Set() const{
    return m_base_row_total_isSet;
}

bool OAISales_data_order_item_interface::is_base_row_total_Valid() const{
    return m_base_row_total_isValid;
}

double OAISales_data_order_item_interface::getBaseRowTotalInclTax() const {
    return m_base_row_total_incl_tax;
}
void OAISales_data_order_item_interface::setBaseRowTotalInclTax(const double &base_row_total_incl_tax) {
    m_base_row_total_incl_tax = base_row_total_incl_tax;
    m_base_row_total_incl_tax_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_row_total_incl_tax_Set() const{
    return m_base_row_total_incl_tax_isSet;
}

bool OAISales_data_order_item_interface::is_base_row_total_incl_tax_Valid() const{
    return m_base_row_total_incl_tax_isValid;
}

double OAISales_data_order_item_interface::getBaseTaxAmount() const {
    return m_base_tax_amount;
}
void OAISales_data_order_item_interface::setBaseTaxAmount(const double &base_tax_amount) {
    m_base_tax_amount = base_tax_amount;
    m_base_tax_amount_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_tax_amount_Set() const{
    return m_base_tax_amount_isSet;
}

bool OAISales_data_order_item_interface::is_base_tax_amount_Valid() const{
    return m_base_tax_amount_isValid;
}

double OAISales_data_order_item_interface::getBaseTaxBeforeDiscount() const {
    return m_base_tax_before_discount;
}
void OAISales_data_order_item_interface::setBaseTaxBeforeDiscount(const double &base_tax_before_discount) {
    m_base_tax_before_discount = base_tax_before_discount;
    m_base_tax_before_discount_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_tax_before_discount_Set() const{
    return m_base_tax_before_discount_isSet;
}

bool OAISales_data_order_item_interface::is_base_tax_before_discount_Valid() const{
    return m_base_tax_before_discount_isValid;
}

double OAISales_data_order_item_interface::getBaseTaxInvoiced() const {
    return m_base_tax_invoiced;
}
void OAISales_data_order_item_interface::setBaseTaxInvoiced(const double &base_tax_invoiced) {
    m_base_tax_invoiced = base_tax_invoiced;
    m_base_tax_invoiced_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_tax_invoiced_Set() const{
    return m_base_tax_invoiced_isSet;
}

bool OAISales_data_order_item_interface::is_base_tax_invoiced_Valid() const{
    return m_base_tax_invoiced_isValid;
}

double OAISales_data_order_item_interface::getBaseTaxRefunded() const {
    return m_base_tax_refunded;
}
void OAISales_data_order_item_interface::setBaseTaxRefunded(const double &base_tax_refunded) {
    m_base_tax_refunded = base_tax_refunded;
    m_base_tax_refunded_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_tax_refunded_Set() const{
    return m_base_tax_refunded_isSet;
}

bool OAISales_data_order_item_interface::is_base_tax_refunded_Valid() const{
    return m_base_tax_refunded_isValid;
}

double OAISales_data_order_item_interface::getBaseWeeeTaxAppliedAmount() const {
    return m_base_weee_tax_applied_amount;
}
void OAISales_data_order_item_interface::setBaseWeeeTaxAppliedAmount(const double &base_weee_tax_applied_amount) {
    m_base_weee_tax_applied_amount = base_weee_tax_applied_amount;
    m_base_weee_tax_applied_amount_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_weee_tax_applied_amount_Set() const{
    return m_base_weee_tax_applied_amount_isSet;
}

bool OAISales_data_order_item_interface::is_base_weee_tax_applied_amount_Valid() const{
    return m_base_weee_tax_applied_amount_isValid;
}

double OAISales_data_order_item_interface::getBaseWeeeTaxAppliedRowAmnt() const {
    return m_base_weee_tax_applied_row_amnt;
}
void OAISales_data_order_item_interface::setBaseWeeeTaxAppliedRowAmnt(const double &base_weee_tax_applied_row_amnt) {
    m_base_weee_tax_applied_row_amnt = base_weee_tax_applied_row_amnt;
    m_base_weee_tax_applied_row_amnt_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_weee_tax_applied_row_amnt_Set() const{
    return m_base_weee_tax_applied_row_amnt_isSet;
}

bool OAISales_data_order_item_interface::is_base_weee_tax_applied_row_amnt_Valid() const{
    return m_base_weee_tax_applied_row_amnt_isValid;
}

double OAISales_data_order_item_interface::getBaseWeeeTaxDisposition() const {
    return m_base_weee_tax_disposition;
}
void OAISales_data_order_item_interface::setBaseWeeeTaxDisposition(const double &base_weee_tax_disposition) {
    m_base_weee_tax_disposition = base_weee_tax_disposition;
    m_base_weee_tax_disposition_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_weee_tax_disposition_Set() const{
    return m_base_weee_tax_disposition_isSet;
}

bool OAISales_data_order_item_interface::is_base_weee_tax_disposition_Valid() const{
    return m_base_weee_tax_disposition_isValid;
}

double OAISales_data_order_item_interface::getBaseWeeeTaxRowDisposition() const {
    return m_base_weee_tax_row_disposition;
}
void OAISales_data_order_item_interface::setBaseWeeeTaxRowDisposition(const double &base_weee_tax_row_disposition) {
    m_base_weee_tax_row_disposition = base_weee_tax_row_disposition;
    m_base_weee_tax_row_disposition_isSet = true;
}

bool OAISales_data_order_item_interface::is_base_weee_tax_row_disposition_Set() const{
    return m_base_weee_tax_row_disposition_isSet;
}

bool OAISales_data_order_item_interface::is_base_weee_tax_row_disposition_Valid() const{
    return m_base_weee_tax_row_disposition_isValid;
}

QString OAISales_data_order_item_interface::getCreatedAt() const {
    return m_created_at;
}
void OAISales_data_order_item_interface::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISales_data_order_item_interface::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISales_data_order_item_interface::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISales_data_order_item_interface::getDescription() const {
    return m_description;
}
void OAISales_data_order_item_interface::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISales_data_order_item_interface::is_description_Set() const{
    return m_description_isSet;
}

bool OAISales_data_order_item_interface::is_description_Valid() const{
    return m_description_isValid;
}

double OAISales_data_order_item_interface::getDiscountAmount() const {
    return m_discount_amount;
}
void OAISales_data_order_item_interface::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAISales_data_order_item_interface::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAISales_data_order_item_interface::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

double OAISales_data_order_item_interface::getDiscountInvoiced() const {
    return m_discount_invoiced;
}
void OAISales_data_order_item_interface::setDiscountInvoiced(const double &discount_invoiced) {
    m_discount_invoiced = discount_invoiced;
    m_discount_invoiced_isSet = true;
}

bool OAISales_data_order_item_interface::is_discount_invoiced_Set() const{
    return m_discount_invoiced_isSet;
}

bool OAISales_data_order_item_interface::is_discount_invoiced_Valid() const{
    return m_discount_invoiced_isValid;
}

double OAISales_data_order_item_interface::getDiscountPercent() const {
    return m_discount_percent;
}
void OAISales_data_order_item_interface::setDiscountPercent(const double &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAISales_data_order_item_interface::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAISales_data_order_item_interface::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

double OAISales_data_order_item_interface::getDiscountRefunded() const {
    return m_discount_refunded;
}
void OAISales_data_order_item_interface::setDiscountRefunded(const double &discount_refunded) {
    m_discount_refunded = discount_refunded;
    m_discount_refunded_isSet = true;
}

bool OAISales_data_order_item_interface::is_discount_refunded_Set() const{
    return m_discount_refunded_isSet;
}

bool OAISales_data_order_item_interface::is_discount_refunded_Valid() const{
    return m_discount_refunded_isValid;
}

double OAISales_data_order_item_interface::getDiscountTaxCompensationAmount() const {
    return m_discount_tax_compensation_amount;
}
void OAISales_data_order_item_interface::setDiscountTaxCompensationAmount(const double &discount_tax_compensation_amount) {
    m_discount_tax_compensation_amount = discount_tax_compensation_amount;
    m_discount_tax_compensation_amount_isSet = true;
}

bool OAISales_data_order_item_interface::is_discount_tax_compensation_amount_Set() const{
    return m_discount_tax_compensation_amount_isSet;
}

bool OAISales_data_order_item_interface::is_discount_tax_compensation_amount_Valid() const{
    return m_discount_tax_compensation_amount_isValid;
}

double OAISales_data_order_item_interface::getDiscountTaxCompensationCanceled() const {
    return m_discount_tax_compensation_canceled;
}
void OAISales_data_order_item_interface::setDiscountTaxCompensationCanceled(const double &discount_tax_compensation_canceled) {
    m_discount_tax_compensation_canceled = discount_tax_compensation_canceled;
    m_discount_tax_compensation_canceled_isSet = true;
}

bool OAISales_data_order_item_interface::is_discount_tax_compensation_canceled_Set() const{
    return m_discount_tax_compensation_canceled_isSet;
}

bool OAISales_data_order_item_interface::is_discount_tax_compensation_canceled_Valid() const{
    return m_discount_tax_compensation_canceled_isValid;
}

double OAISales_data_order_item_interface::getDiscountTaxCompensationInvoiced() const {
    return m_discount_tax_compensation_invoiced;
}
void OAISales_data_order_item_interface::setDiscountTaxCompensationInvoiced(const double &discount_tax_compensation_invoiced) {
    m_discount_tax_compensation_invoiced = discount_tax_compensation_invoiced;
    m_discount_tax_compensation_invoiced_isSet = true;
}

bool OAISales_data_order_item_interface::is_discount_tax_compensation_invoiced_Set() const{
    return m_discount_tax_compensation_invoiced_isSet;
}

bool OAISales_data_order_item_interface::is_discount_tax_compensation_invoiced_Valid() const{
    return m_discount_tax_compensation_invoiced_isValid;
}

double OAISales_data_order_item_interface::getDiscountTaxCompensationRefunded() const {
    return m_discount_tax_compensation_refunded;
}
void OAISales_data_order_item_interface::setDiscountTaxCompensationRefunded(const double &discount_tax_compensation_refunded) {
    m_discount_tax_compensation_refunded = discount_tax_compensation_refunded;
    m_discount_tax_compensation_refunded_isSet = true;
}

bool OAISales_data_order_item_interface::is_discount_tax_compensation_refunded_Set() const{
    return m_discount_tax_compensation_refunded_isSet;
}

bool OAISales_data_order_item_interface::is_discount_tax_compensation_refunded_Valid() const{
    return m_discount_tax_compensation_refunded_isValid;
}

qint32 OAISales_data_order_item_interface::getEventId() const {
    return m_event_id;
}
void OAISales_data_order_item_interface::setEventId(const qint32 &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAISales_data_order_item_interface::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAISales_data_order_item_interface::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAISales_data_order_item_interface::getExtOrderItemId() const {
    return m_ext_order_item_id;
}
void OAISales_data_order_item_interface::setExtOrderItemId(const QString &ext_order_item_id) {
    m_ext_order_item_id = ext_order_item_id;
    m_ext_order_item_id_isSet = true;
}

bool OAISales_data_order_item_interface::is_ext_order_item_id_Set() const{
    return m_ext_order_item_id_isSet;
}

bool OAISales_data_order_item_interface::is_ext_order_item_id_Valid() const{
    return m_ext_order_item_id_isValid;
}

OAISales_data_order_item_extension_interface OAISales_data_order_item_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAISales_data_order_item_interface::setExtensionAttributes(const OAISales_data_order_item_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAISales_data_order_item_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAISales_data_order_item_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAISales_data_order_item_interface::getFreeShipping() const {
    return m_free_shipping;
}
void OAISales_data_order_item_interface::setFreeShipping(const qint32 &free_shipping) {
    m_free_shipping = free_shipping;
    m_free_shipping_isSet = true;
}

bool OAISales_data_order_item_interface::is_free_shipping_Set() const{
    return m_free_shipping_isSet;
}

bool OAISales_data_order_item_interface::is_free_shipping_Valid() const{
    return m_free_shipping_isValid;
}

double OAISales_data_order_item_interface::getGwBasePrice() const {
    return m_gw_base_price;
}
void OAISales_data_order_item_interface::setGwBasePrice(const double &gw_base_price) {
    m_gw_base_price = gw_base_price;
    m_gw_base_price_isSet = true;
}

bool OAISales_data_order_item_interface::is_gw_base_price_Set() const{
    return m_gw_base_price_isSet;
}

bool OAISales_data_order_item_interface::is_gw_base_price_Valid() const{
    return m_gw_base_price_isValid;
}

double OAISales_data_order_item_interface::getGwBasePriceInvoiced() const {
    return m_gw_base_price_invoiced;
}
void OAISales_data_order_item_interface::setGwBasePriceInvoiced(const double &gw_base_price_invoiced) {
    m_gw_base_price_invoiced = gw_base_price_invoiced;
    m_gw_base_price_invoiced_isSet = true;
}

bool OAISales_data_order_item_interface::is_gw_base_price_invoiced_Set() const{
    return m_gw_base_price_invoiced_isSet;
}

bool OAISales_data_order_item_interface::is_gw_base_price_invoiced_Valid() const{
    return m_gw_base_price_invoiced_isValid;
}

double OAISales_data_order_item_interface::getGwBasePriceRefunded() const {
    return m_gw_base_price_refunded;
}
void OAISales_data_order_item_interface::setGwBasePriceRefunded(const double &gw_base_price_refunded) {
    m_gw_base_price_refunded = gw_base_price_refunded;
    m_gw_base_price_refunded_isSet = true;
}

bool OAISales_data_order_item_interface::is_gw_base_price_refunded_Set() const{
    return m_gw_base_price_refunded_isSet;
}

bool OAISales_data_order_item_interface::is_gw_base_price_refunded_Valid() const{
    return m_gw_base_price_refunded_isValid;
}

double OAISales_data_order_item_interface::getGwBaseTaxAmount() const {
    return m_gw_base_tax_amount;
}
void OAISales_data_order_item_interface::setGwBaseTaxAmount(const double &gw_base_tax_amount) {
    m_gw_base_tax_amount = gw_base_tax_amount;
    m_gw_base_tax_amount_isSet = true;
}

bool OAISales_data_order_item_interface::is_gw_base_tax_amount_Set() const{
    return m_gw_base_tax_amount_isSet;
}

bool OAISales_data_order_item_interface::is_gw_base_tax_amount_Valid() const{
    return m_gw_base_tax_amount_isValid;
}

double OAISales_data_order_item_interface::getGwBaseTaxAmountInvoiced() const {
    return m_gw_base_tax_amount_invoiced;
}
void OAISales_data_order_item_interface::setGwBaseTaxAmountInvoiced(const double &gw_base_tax_amount_invoiced) {
    m_gw_base_tax_amount_invoiced = gw_base_tax_amount_invoiced;
    m_gw_base_tax_amount_invoiced_isSet = true;
}

bool OAISales_data_order_item_interface::is_gw_base_tax_amount_invoiced_Set() const{
    return m_gw_base_tax_amount_invoiced_isSet;
}

bool OAISales_data_order_item_interface::is_gw_base_tax_amount_invoiced_Valid() const{
    return m_gw_base_tax_amount_invoiced_isValid;
}

double OAISales_data_order_item_interface::getGwBaseTaxAmountRefunded() const {
    return m_gw_base_tax_amount_refunded;
}
void OAISales_data_order_item_interface::setGwBaseTaxAmountRefunded(const double &gw_base_tax_amount_refunded) {
    m_gw_base_tax_amount_refunded = gw_base_tax_amount_refunded;
    m_gw_base_tax_amount_refunded_isSet = true;
}

bool OAISales_data_order_item_interface::is_gw_base_tax_amount_refunded_Set() const{
    return m_gw_base_tax_amount_refunded_isSet;
}

bool OAISales_data_order_item_interface::is_gw_base_tax_amount_refunded_Valid() const{
    return m_gw_base_tax_amount_refunded_isValid;
}

qint32 OAISales_data_order_item_interface::getGwId() const {
    return m_gw_id;
}
void OAISales_data_order_item_interface::setGwId(const qint32 &gw_id) {
    m_gw_id = gw_id;
    m_gw_id_isSet = true;
}

bool OAISales_data_order_item_interface::is_gw_id_Set() const{
    return m_gw_id_isSet;
}

bool OAISales_data_order_item_interface::is_gw_id_Valid() const{
    return m_gw_id_isValid;
}

double OAISales_data_order_item_interface::getGwPrice() const {
    return m_gw_price;
}
void OAISales_data_order_item_interface::setGwPrice(const double &gw_price) {
    m_gw_price = gw_price;
    m_gw_price_isSet = true;
}

bool OAISales_data_order_item_interface::is_gw_price_Set() const{
    return m_gw_price_isSet;
}

bool OAISales_data_order_item_interface::is_gw_price_Valid() const{
    return m_gw_price_isValid;
}

double OAISales_data_order_item_interface::getGwPriceInvoiced() const {
    return m_gw_price_invoiced;
}
void OAISales_data_order_item_interface::setGwPriceInvoiced(const double &gw_price_invoiced) {
    m_gw_price_invoiced = gw_price_invoiced;
    m_gw_price_invoiced_isSet = true;
}

bool OAISales_data_order_item_interface::is_gw_price_invoiced_Set() const{
    return m_gw_price_invoiced_isSet;
}

bool OAISales_data_order_item_interface::is_gw_price_invoiced_Valid() const{
    return m_gw_price_invoiced_isValid;
}

double OAISales_data_order_item_interface::getGwPriceRefunded() const {
    return m_gw_price_refunded;
}
void OAISales_data_order_item_interface::setGwPriceRefunded(const double &gw_price_refunded) {
    m_gw_price_refunded = gw_price_refunded;
    m_gw_price_refunded_isSet = true;
}

bool OAISales_data_order_item_interface::is_gw_price_refunded_Set() const{
    return m_gw_price_refunded_isSet;
}

bool OAISales_data_order_item_interface::is_gw_price_refunded_Valid() const{
    return m_gw_price_refunded_isValid;
}

double OAISales_data_order_item_interface::getGwTaxAmount() const {
    return m_gw_tax_amount;
}
void OAISales_data_order_item_interface::setGwTaxAmount(const double &gw_tax_amount) {
    m_gw_tax_amount = gw_tax_amount;
    m_gw_tax_amount_isSet = true;
}

bool OAISales_data_order_item_interface::is_gw_tax_amount_Set() const{
    return m_gw_tax_amount_isSet;
}

bool OAISales_data_order_item_interface::is_gw_tax_amount_Valid() const{
    return m_gw_tax_amount_isValid;
}

double OAISales_data_order_item_interface::getGwTaxAmountInvoiced() const {
    return m_gw_tax_amount_invoiced;
}
void OAISales_data_order_item_interface::setGwTaxAmountInvoiced(const double &gw_tax_amount_invoiced) {
    m_gw_tax_amount_invoiced = gw_tax_amount_invoiced;
    m_gw_tax_amount_invoiced_isSet = true;
}

bool OAISales_data_order_item_interface::is_gw_tax_amount_invoiced_Set() const{
    return m_gw_tax_amount_invoiced_isSet;
}

bool OAISales_data_order_item_interface::is_gw_tax_amount_invoiced_Valid() const{
    return m_gw_tax_amount_invoiced_isValid;
}

double OAISales_data_order_item_interface::getGwTaxAmountRefunded() const {
    return m_gw_tax_amount_refunded;
}
void OAISales_data_order_item_interface::setGwTaxAmountRefunded(const double &gw_tax_amount_refunded) {
    m_gw_tax_amount_refunded = gw_tax_amount_refunded;
    m_gw_tax_amount_refunded_isSet = true;
}

bool OAISales_data_order_item_interface::is_gw_tax_amount_refunded_Set() const{
    return m_gw_tax_amount_refunded_isSet;
}

bool OAISales_data_order_item_interface::is_gw_tax_amount_refunded_Valid() const{
    return m_gw_tax_amount_refunded_isValid;
}

qint32 OAISales_data_order_item_interface::getIsQtyDecimal() const {
    return m_is_qty_decimal;
}
void OAISales_data_order_item_interface::setIsQtyDecimal(const qint32 &is_qty_decimal) {
    m_is_qty_decimal = is_qty_decimal;
    m_is_qty_decimal_isSet = true;
}

bool OAISales_data_order_item_interface::is_is_qty_decimal_Set() const{
    return m_is_qty_decimal_isSet;
}

bool OAISales_data_order_item_interface::is_is_qty_decimal_Valid() const{
    return m_is_qty_decimal_isValid;
}

qint32 OAISales_data_order_item_interface::getIsVirtual() const {
    return m_is_virtual;
}
void OAISales_data_order_item_interface::setIsVirtual(const qint32 &is_virtual) {
    m_is_virtual = is_virtual;
    m_is_virtual_isSet = true;
}

bool OAISales_data_order_item_interface::is_is_virtual_Set() const{
    return m_is_virtual_isSet;
}

bool OAISales_data_order_item_interface::is_is_virtual_Valid() const{
    return m_is_virtual_isValid;
}

qint32 OAISales_data_order_item_interface::getItemId() const {
    return m_item_id;
}
void OAISales_data_order_item_interface::setItemId(const qint32 &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAISales_data_order_item_interface::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAISales_data_order_item_interface::is_item_id_Valid() const{
    return m_item_id_isValid;
}

qint32 OAISales_data_order_item_interface::getLockedDoInvoice() const {
    return m_locked_do_invoice;
}
void OAISales_data_order_item_interface::setLockedDoInvoice(const qint32 &locked_do_invoice) {
    m_locked_do_invoice = locked_do_invoice;
    m_locked_do_invoice_isSet = true;
}

bool OAISales_data_order_item_interface::is_locked_do_invoice_Set() const{
    return m_locked_do_invoice_isSet;
}

bool OAISales_data_order_item_interface::is_locked_do_invoice_Valid() const{
    return m_locked_do_invoice_isValid;
}

qint32 OAISales_data_order_item_interface::getLockedDoShip() const {
    return m_locked_do_ship;
}
void OAISales_data_order_item_interface::setLockedDoShip(const qint32 &locked_do_ship) {
    m_locked_do_ship = locked_do_ship;
    m_locked_do_ship_isSet = true;
}

bool OAISales_data_order_item_interface::is_locked_do_ship_Set() const{
    return m_locked_do_ship_isSet;
}

bool OAISales_data_order_item_interface::is_locked_do_ship_Valid() const{
    return m_locked_do_ship_isValid;
}

QString OAISales_data_order_item_interface::getName() const {
    return m_name;
}
void OAISales_data_order_item_interface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISales_data_order_item_interface::is_name_Set() const{
    return m_name_isSet;
}

bool OAISales_data_order_item_interface::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISales_data_order_item_interface::getNoDiscount() const {
    return m_no_discount;
}
void OAISales_data_order_item_interface::setNoDiscount(const qint32 &no_discount) {
    m_no_discount = no_discount;
    m_no_discount_isSet = true;
}

bool OAISales_data_order_item_interface::is_no_discount_Set() const{
    return m_no_discount_isSet;
}

bool OAISales_data_order_item_interface::is_no_discount_Valid() const{
    return m_no_discount_isValid;
}

qint32 OAISales_data_order_item_interface::getOrderId() const {
    return m_order_id;
}
void OAISales_data_order_item_interface::setOrderId(const qint32 &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAISales_data_order_item_interface::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAISales_data_order_item_interface::is_order_id_Valid() const{
    return m_order_id_isValid;
}

double OAISales_data_order_item_interface::getOriginalPrice() const {
    return m_original_price;
}
void OAISales_data_order_item_interface::setOriginalPrice(const double &original_price) {
    m_original_price = original_price;
    m_original_price_isSet = true;
}

bool OAISales_data_order_item_interface::is_original_price_Set() const{
    return m_original_price_isSet;
}

bool OAISales_data_order_item_interface::is_original_price_Valid() const{
    return m_original_price_isValid;
}

OAISales_data_order_item_interface OAISales_data_order_item_interface::getParentItem() const {
    return m_parent_item;
}
void OAISales_data_order_item_interface::setParentItem(const OAISales_data_order_item_interface &parent_item) {
    m_parent_item = parent_item;
    m_parent_item_isSet = true;
}

bool OAISales_data_order_item_interface::is_parent_item_Set() const{
    return m_parent_item_isSet;
}

bool OAISales_data_order_item_interface::is_parent_item_Valid() const{
    return m_parent_item_isValid;
}

qint32 OAISales_data_order_item_interface::getParentItemId() const {
    return m_parent_item_id;
}
void OAISales_data_order_item_interface::setParentItemId(const qint32 &parent_item_id) {
    m_parent_item_id = parent_item_id;
    m_parent_item_id_isSet = true;
}

bool OAISales_data_order_item_interface::is_parent_item_id_Set() const{
    return m_parent_item_id_isSet;
}

bool OAISales_data_order_item_interface::is_parent_item_id_Valid() const{
    return m_parent_item_id_isValid;
}

double OAISales_data_order_item_interface::getPrice() const {
    return m_price;
}
void OAISales_data_order_item_interface::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAISales_data_order_item_interface::is_price_Set() const{
    return m_price_isSet;
}

bool OAISales_data_order_item_interface::is_price_Valid() const{
    return m_price_isValid;
}

double OAISales_data_order_item_interface::getPriceInclTax() const {
    return m_price_incl_tax;
}
void OAISales_data_order_item_interface::setPriceInclTax(const double &price_incl_tax) {
    m_price_incl_tax = price_incl_tax;
    m_price_incl_tax_isSet = true;
}

bool OAISales_data_order_item_interface::is_price_incl_tax_Set() const{
    return m_price_incl_tax_isSet;
}

bool OAISales_data_order_item_interface::is_price_incl_tax_Valid() const{
    return m_price_incl_tax_isValid;
}

qint32 OAISales_data_order_item_interface::getProductId() const {
    return m_product_id;
}
void OAISales_data_order_item_interface::setProductId(const qint32 &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAISales_data_order_item_interface::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAISales_data_order_item_interface::is_product_id_Valid() const{
    return m_product_id_isValid;
}

OAICatalog_data_product_option_interface OAISales_data_order_item_interface::getProductOption() const {
    return m_product_option;
}
void OAISales_data_order_item_interface::setProductOption(const OAICatalog_data_product_option_interface &product_option) {
    m_product_option = product_option;
    m_product_option_isSet = true;
}

bool OAISales_data_order_item_interface::is_product_option_Set() const{
    return m_product_option_isSet;
}

bool OAISales_data_order_item_interface::is_product_option_Valid() const{
    return m_product_option_isValid;
}

QString OAISales_data_order_item_interface::getProductType() const {
    return m_product_type;
}
void OAISales_data_order_item_interface::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAISales_data_order_item_interface::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAISales_data_order_item_interface::is_product_type_Valid() const{
    return m_product_type_isValid;
}

double OAISales_data_order_item_interface::getQtyBackordered() const {
    return m_qty_backordered;
}
void OAISales_data_order_item_interface::setQtyBackordered(const double &qty_backordered) {
    m_qty_backordered = qty_backordered;
    m_qty_backordered_isSet = true;
}

bool OAISales_data_order_item_interface::is_qty_backordered_Set() const{
    return m_qty_backordered_isSet;
}

bool OAISales_data_order_item_interface::is_qty_backordered_Valid() const{
    return m_qty_backordered_isValid;
}

double OAISales_data_order_item_interface::getQtyCanceled() const {
    return m_qty_canceled;
}
void OAISales_data_order_item_interface::setQtyCanceled(const double &qty_canceled) {
    m_qty_canceled = qty_canceled;
    m_qty_canceled_isSet = true;
}

bool OAISales_data_order_item_interface::is_qty_canceled_Set() const{
    return m_qty_canceled_isSet;
}

bool OAISales_data_order_item_interface::is_qty_canceled_Valid() const{
    return m_qty_canceled_isValid;
}

double OAISales_data_order_item_interface::getQtyInvoiced() const {
    return m_qty_invoiced;
}
void OAISales_data_order_item_interface::setQtyInvoiced(const double &qty_invoiced) {
    m_qty_invoiced = qty_invoiced;
    m_qty_invoiced_isSet = true;
}

bool OAISales_data_order_item_interface::is_qty_invoiced_Set() const{
    return m_qty_invoiced_isSet;
}

bool OAISales_data_order_item_interface::is_qty_invoiced_Valid() const{
    return m_qty_invoiced_isValid;
}

double OAISales_data_order_item_interface::getQtyOrdered() const {
    return m_qty_ordered;
}
void OAISales_data_order_item_interface::setQtyOrdered(const double &qty_ordered) {
    m_qty_ordered = qty_ordered;
    m_qty_ordered_isSet = true;
}

bool OAISales_data_order_item_interface::is_qty_ordered_Set() const{
    return m_qty_ordered_isSet;
}

bool OAISales_data_order_item_interface::is_qty_ordered_Valid() const{
    return m_qty_ordered_isValid;
}

double OAISales_data_order_item_interface::getQtyRefunded() const {
    return m_qty_refunded;
}
void OAISales_data_order_item_interface::setQtyRefunded(const double &qty_refunded) {
    m_qty_refunded = qty_refunded;
    m_qty_refunded_isSet = true;
}

bool OAISales_data_order_item_interface::is_qty_refunded_Set() const{
    return m_qty_refunded_isSet;
}

bool OAISales_data_order_item_interface::is_qty_refunded_Valid() const{
    return m_qty_refunded_isValid;
}

double OAISales_data_order_item_interface::getQtyReturned() const {
    return m_qty_returned;
}
void OAISales_data_order_item_interface::setQtyReturned(const double &qty_returned) {
    m_qty_returned = qty_returned;
    m_qty_returned_isSet = true;
}

bool OAISales_data_order_item_interface::is_qty_returned_Set() const{
    return m_qty_returned_isSet;
}

bool OAISales_data_order_item_interface::is_qty_returned_Valid() const{
    return m_qty_returned_isValid;
}

double OAISales_data_order_item_interface::getQtyShipped() const {
    return m_qty_shipped;
}
void OAISales_data_order_item_interface::setQtyShipped(const double &qty_shipped) {
    m_qty_shipped = qty_shipped;
    m_qty_shipped_isSet = true;
}

bool OAISales_data_order_item_interface::is_qty_shipped_Set() const{
    return m_qty_shipped_isSet;
}

bool OAISales_data_order_item_interface::is_qty_shipped_Valid() const{
    return m_qty_shipped_isValid;
}

qint32 OAISales_data_order_item_interface::getQuoteItemId() const {
    return m_quote_item_id;
}
void OAISales_data_order_item_interface::setQuoteItemId(const qint32 &quote_item_id) {
    m_quote_item_id = quote_item_id;
    m_quote_item_id_isSet = true;
}

bool OAISales_data_order_item_interface::is_quote_item_id_Set() const{
    return m_quote_item_id_isSet;
}

bool OAISales_data_order_item_interface::is_quote_item_id_Valid() const{
    return m_quote_item_id_isValid;
}

double OAISales_data_order_item_interface::getRowInvoiced() const {
    return m_row_invoiced;
}
void OAISales_data_order_item_interface::setRowInvoiced(const double &row_invoiced) {
    m_row_invoiced = row_invoiced;
    m_row_invoiced_isSet = true;
}

bool OAISales_data_order_item_interface::is_row_invoiced_Set() const{
    return m_row_invoiced_isSet;
}

bool OAISales_data_order_item_interface::is_row_invoiced_Valid() const{
    return m_row_invoiced_isValid;
}

double OAISales_data_order_item_interface::getRowTotal() const {
    return m_row_total;
}
void OAISales_data_order_item_interface::setRowTotal(const double &row_total) {
    m_row_total = row_total;
    m_row_total_isSet = true;
}

bool OAISales_data_order_item_interface::is_row_total_Set() const{
    return m_row_total_isSet;
}

bool OAISales_data_order_item_interface::is_row_total_Valid() const{
    return m_row_total_isValid;
}

double OAISales_data_order_item_interface::getRowTotalInclTax() const {
    return m_row_total_incl_tax;
}
void OAISales_data_order_item_interface::setRowTotalInclTax(const double &row_total_incl_tax) {
    m_row_total_incl_tax = row_total_incl_tax;
    m_row_total_incl_tax_isSet = true;
}

bool OAISales_data_order_item_interface::is_row_total_incl_tax_Set() const{
    return m_row_total_incl_tax_isSet;
}

bool OAISales_data_order_item_interface::is_row_total_incl_tax_Valid() const{
    return m_row_total_incl_tax_isValid;
}

double OAISales_data_order_item_interface::getRowWeight() const {
    return m_row_weight;
}
void OAISales_data_order_item_interface::setRowWeight(const double &row_weight) {
    m_row_weight = row_weight;
    m_row_weight_isSet = true;
}

bool OAISales_data_order_item_interface::is_row_weight_Set() const{
    return m_row_weight_isSet;
}

bool OAISales_data_order_item_interface::is_row_weight_Valid() const{
    return m_row_weight_isValid;
}

QString OAISales_data_order_item_interface::getSku() const {
    return m_sku;
}
void OAISales_data_order_item_interface::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAISales_data_order_item_interface::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAISales_data_order_item_interface::is_sku_Valid() const{
    return m_sku_isValid;
}

qint32 OAISales_data_order_item_interface::getStoreId() const {
    return m_store_id;
}
void OAISales_data_order_item_interface::setStoreId(const qint32 &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAISales_data_order_item_interface::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAISales_data_order_item_interface::is_store_id_Valid() const{
    return m_store_id_isValid;
}

double OAISales_data_order_item_interface::getTaxAmount() const {
    return m_tax_amount;
}
void OAISales_data_order_item_interface::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAISales_data_order_item_interface::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAISales_data_order_item_interface::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

double OAISales_data_order_item_interface::getTaxBeforeDiscount() const {
    return m_tax_before_discount;
}
void OAISales_data_order_item_interface::setTaxBeforeDiscount(const double &tax_before_discount) {
    m_tax_before_discount = tax_before_discount;
    m_tax_before_discount_isSet = true;
}

bool OAISales_data_order_item_interface::is_tax_before_discount_Set() const{
    return m_tax_before_discount_isSet;
}

bool OAISales_data_order_item_interface::is_tax_before_discount_Valid() const{
    return m_tax_before_discount_isValid;
}

double OAISales_data_order_item_interface::getTaxCanceled() const {
    return m_tax_canceled;
}
void OAISales_data_order_item_interface::setTaxCanceled(const double &tax_canceled) {
    m_tax_canceled = tax_canceled;
    m_tax_canceled_isSet = true;
}

bool OAISales_data_order_item_interface::is_tax_canceled_Set() const{
    return m_tax_canceled_isSet;
}

bool OAISales_data_order_item_interface::is_tax_canceled_Valid() const{
    return m_tax_canceled_isValid;
}

double OAISales_data_order_item_interface::getTaxInvoiced() const {
    return m_tax_invoiced;
}
void OAISales_data_order_item_interface::setTaxInvoiced(const double &tax_invoiced) {
    m_tax_invoiced = tax_invoiced;
    m_tax_invoiced_isSet = true;
}

bool OAISales_data_order_item_interface::is_tax_invoiced_Set() const{
    return m_tax_invoiced_isSet;
}

bool OAISales_data_order_item_interface::is_tax_invoiced_Valid() const{
    return m_tax_invoiced_isValid;
}

double OAISales_data_order_item_interface::getTaxPercent() const {
    return m_tax_percent;
}
void OAISales_data_order_item_interface::setTaxPercent(const double &tax_percent) {
    m_tax_percent = tax_percent;
    m_tax_percent_isSet = true;
}

bool OAISales_data_order_item_interface::is_tax_percent_Set() const{
    return m_tax_percent_isSet;
}

bool OAISales_data_order_item_interface::is_tax_percent_Valid() const{
    return m_tax_percent_isValid;
}

double OAISales_data_order_item_interface::getTaxRefunded() const {
    return m_tax_refunded;
}
void OAISales_data_order_item_interface::setTaxRefunded(const double &tax_refunded) {
    m_tax_refunded = tax_refunded;
    m_tax_refunded_isSet = true;
}

bool OAISales_data_order_item_interface::is_tax_refunded_Set() const{
    return m_tax_refunded_isSet;
}

bool OAISales_data_order_item_interface::is_tax_refunded_Valid() const{
    return m_tax_refunded_isValid;
}

QString OAISales_data_order_item_interface::getUpdatedAt() const {
    return m_updated_at;
}
void OAISales_data_order_item_interface::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISales_data_order_item_interface::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISales_data_order_item_interface::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAISales_data_order_item_interface::getWeeeTaxApplied() const {
    return m_weee_tax_applied;
}
void OAISales_data_order_item_interface::setWeeeTaxApplied(const QString &weee_tax_applied) {
    m_weee_tax_applied = weee_tax_applied;
    m_weee_tax_applied_isSet = true;
}

bool OAISales_data_order_item_interface::is_weee_tax_applied_Set() const{
    return m_weee_tax_applied_isSet;
}

bool OAISales_data_order_item_interface::is_weee_tax_applied_Valid() const{
    return m_weee_tax_applied_isValid;
}

double OAISales_data_order_item_interface::getWeeeTaxAppliedAmount() const {
    return m_weee_tax_applied_amount;
}
void OAISales_data_order_item_interface::setWeeeTaxAppliedAmount(const double &weee_tax_applied_amount) {
    m_weee_tax_applied_amount = weee_tax_applied_amount;
    m_weee_tax_applied_amount_isSet = true;
}

bool OAISales_data_order_item_interface::is_weee_tax_applied_amount_Set() const{
    return m_weee_tax_applied_amount_isSet;
}

bool OAISales_data_order_item_interface::is_weee_tax_applied_amount_Valid() const{
    return m_weee_tax_applied_amount_isValid;
}

double OAISales_data_order_item_interface::getWeeeTaxAppliedRowAmount() const {
    return m_weee_tax_applied_row_amount;
}
void OAISales_data_order_item_interface::setWeeeTaxAppliedRowAmount(const double &weee_tax_applied_row_amount) {
    m_weee_tax_applied_row_amount = weee_tax_applied_row_amount;
    m_weee_tax_applied_row_amount_isSet = true;
}

bool OAISales_data_order_item_interface::is_weee_tax_applied_row_amount_Set() const{
    return m_weee_tax_applied_row_amount_isSet;
}

bool OAISales_data_order_item_interface::is_weee_tax_applied_row_amount_Valid() const{
    return m_weee_tax_applied_row_amount_isValid;
}

double OAISales_data_order_item_interface::getWeeeTaxDisposition() const {
    return m_weee_tax_disposition;
}
void OAISales_data_order_item_interface::setWeeeTaxDisposition(const double &weee_tax_disposition) {
    m_weee_tax_disposition = weee_tax_disposition;
    m_weee_tax_disposition_isSet = true;
}

bool OAISales_data_order_item_interface::is_weee_tax_disposition_Set() const{
    return m_weee_tax_disposition_isSet;
}

bool OAISales_data_order_item_interface::is_weee_tax_disposition_Valid() const{
    return m_weee_tax_disposition_isValid;
}

double OAISales_data_order_item_interface::getWeeeTaxRowDisposition() const {
    return m_weee_tax_row_disposition;
}
void OAISales_data_order_item_interface::setWeeeTaxRowDisposition(const double &weee_tax_row_disposition) {
    m_weee_tax_row_disposition = weee_tax_row_disposition;
    m_weee_tax_row_disposition_isSet = true;
}

bool OAISales_data_order_item_interface::is_weee_tax_row_disposition_Set() const{
    return m_weee_tax_row_disposition_isSet;
}

bool OAISales_data_order_item_interface::is_weee_tax_row_disposition_Valid() const{
    return m_weee_tax_row_disposition_isValid;
}

double OAISales_data_order_item_interface::getWeight() const {
    return m_weight;
}
void OAISales_data_order_item_interface::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAISales_data_order_item_interface::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAISales_data_order_item_interface::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAISales_data_order_item_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_rule_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_amount_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_tax_compensation_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_tax_compensation_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_tax_compensation_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_original_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_price_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_row_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_row_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_row_total_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_tax_before_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_tax_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_tax_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_weee_tax_applied_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_weee_tax_applied_row_amnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_weee_tax_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_weee_tax_row_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_tax_compensation_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_tax_compensation_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_tax_compensation_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_tax_compensation_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_order_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_base_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_base_price_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_base_price_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_base_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_base_tax_amount_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_base_tax_amount_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_price_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_price_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_tax_amount_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_tax_amount_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_qty_decimal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_virtual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_do_invoice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_do_ship_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_backordered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_ordered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_returned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_shipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_total_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_before_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weee_tax_applied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weee_tax_applied_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weee_tax_applied_row_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weee_tax_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weee_tax_row_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISales_data_order_item_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sku_isValid && true;
}

} // namespace OpenAPI
