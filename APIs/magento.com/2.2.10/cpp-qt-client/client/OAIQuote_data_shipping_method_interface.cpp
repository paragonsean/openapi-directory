/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuote_data_shipping_method_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuote_data_shipping_method_interface::OAIQuote_data_shipping_method_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuote_data_shipping_method_interface::OAIQuote_data_shipping_method_interface() {
    this->initializeModel();
}

OAIQuote_data_shipping_method_interface::~OAIQuote_data_shipping_method_interface() {}

void OAIQuote_data_shipping_method_interface::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_available_isSet = false;
    m_available_isValid = false;

    m_base_amount_isSet = false;
    m_base_amount_isValid = false;

    m_carrier_code_isSet = false;
    m_carrier_code_isValid = false;

    m_carrier_title_isSet = false;
    m_carrier_title_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_method_code_isSet = false;
    m_method_code_isValid = false;

    m_method_title_isSet = false;
    m_method_title_isValid = false;

    m_price_excl_tax_isSet = false;
    m_price_excl_tax_isValid = false;

    m_price_incl_tax_isSet = false;
    m_price_incl_tax_isValid = false;
}

void OAIQuote_data_shipping_method_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuote_data_shipping_method_interface::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_base_amount_isValid = ::OpenAPI::fromJsonValue(m_base_amount, json[QString("base_amount")]);
    m_base_amount_isSet = !json[QString("base_amount")].isNull() && m_base_amount_isValid;

    m_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_carrier_code, json[QString("carrier_code")]);
    m_carrier_code_isSet = !json[QString("carrier_code")].isNull() && m_carrier_code_isValid;

    m_carrier_title_isValid = ::OpenAPI::fromJsonValue(m_carrier_title, json[QString("carrier_title")]);
    m_carrier_title_isSet = !json[QString("carrier_title")].isNull() && m_carrier_title_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_method_code_isValid = ::OpenAPI::fromJsonValue(m_method_code, json[QString("method_code")]);
    m_method_code_isSet = !json[QString("method_code")].isNull() && m_method_code_isValid;

    m_method_title_isValid = ::OpenAPI::fromJsonValue(m_method_title, json[QString("method_title")]);
    m_method_title_isSet = !json[QString("method_title")].isNull() && m_method_title_isValid;

    m_price_excl_tax_isValid = ::OpenAPI::fromJsonValue(m_price_excl_tax, json[QString("price_excl_tax")]);
    m_price_excl_tax_isSet = !json[QString("price_excl_tax")].isNull() && m_price_excl_tax_isValid;

    m_price_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_price_incl_tax, json[QString("price_incl_tax")]);
    m_price_incl_tax_isSet = !json[QString("price_incl_tax")].isNull() && m_price_incl_tax_isValid;
}

QString OAIQuote_data_shipping_method_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuote_data_shipping_method_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_base_amount_isSet) {
        obj.insert(QString("base_amount"), ::OpenAPI::toJsonValue(m_base_amount));
    }
    if (m_carrier_code_isSet) {
        obj.insert(QString("carrier_code"), ::OpenAPI::toJsonValue(m_carrier_code));
    }
    if (m_carrier_title_isSet) {
        obj.insert(QString("carrier_title"), ::OpenAPI::toJsonValue(m_carrier_title));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_method_code_isSet) {
        obj.insert(QString("method_code"), ::OpenAPI::toJsonValue(m_method_code));
    }
    if (m_method_title_isSet) {
        obj.insert(QString("method_title"), ::OpenAPI::toJsonValue(m_method_title));
    }
    if (m_price_excl_tax_isSet) {
        obj.insert(QString("price_excl_tax"), ::OpenAPI::toJsonValue(m_price_excl_tax));
    }
    if (m_price_incl_tax_isSet) {
        obj.insert(QString("price_incl_tax"), ::OpenAPI::toJsonValue(m_price_incl_tax));
    }
    return obj;
}

double OAIQuote_data_shipping_method_interface::getAmount() const {
    return m_amount;
}
void OAIQuote_data_shipping_method_interface::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIQuote_data_shipping_method_interface::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIQuote_data_shipping_method_interface::is_amount_Valid() const{
    return m_amount_isValid;
}

bool OAIQuote_data_shipping_method_interface::isAvailable() const {
    return m_available;
}
void OAIQuote_data_shipping_method_interface::setAvailable(const bool &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIQuote_data_shipping_method_interface::is_available_Set() const{
    return m_available_isSet;
}

bool OAIQuote_data_shipping_method_interface::is_available_Valid() const{
    return m_available_isValid;
}

double OAIQuote_data_shipping_method_interface::getBaseAmount() const {
    return m_base_amount;
}
void OAIQuote_data_shipping_method_interface::setBaseAmount(const double &base_amount) {
    m_base_amount = base_amount;
    m_base_amount_isSet = true;
}

bool OAIQuote_data_shipping_method_interface::is_base_amount_Set() const{
    return m_base_amount_isSet;
}

bool OAIQuote_data_shipping_method_interface::is_base_amount_Valid() const{
    return m_base_amount_isValid;
}

QString OAIQuote_data_shipping_method_interface::getCarrierCode() const {
    return m_carrier_code;
}
void OAIQuote_data_shipping_method_interface::setCarrierCode(const QString &carrier_code) {
    m_carrier_code = carrier_code;
    m_carrier_code_isSet = true;
}

bool OAIQuote_data_shipping_method_interface::is_carrier_code_Set() const{
    return m_carrier_code_isSet;
}

bool OAIQuote_data_shipping_method_interface::is_carrier_code_Valid() const{
    return m_carrier_code_isValid;
}

QString OAIQuote_data_shipping_method_interface::getCarrierTitle() const {
    return m_carrier_title;
}
void OAIQuote_data_shipping_method_interface::setCarrierTitle(const QString &carrier_title) {
    m_carrier_title = carrier_title;
    m_carrier_title_isSet = true;
}

bool OAIQuote_data_shipping_method_interface::is_carrier_title_Set() const{
    return m_carrier_title_isSet;
}

bool OAIQuote_data_shipping_method_interface::is_carrier_title_Valid() const{
    return m_carrier_title_isValid;
}

QString OAIQuote_data_shipping_method_interface::getErrorMessage() const {
    return m_error_message;
}
void OAIQuote_data_shipping_method_interface::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIQuote_data_shipping_method_interface::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIQuote_data_shipping_method_interface::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIObject OAIQuote_data_shipping_method_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIQuote_data_shipping_method_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIQuote_data_shipping_method_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIQuote_data_shipping_method_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAIQuote_data_shipping_method_interface::getMethodCode() const {
    return m_method_code;
}
void OAIQuote_data_shipping_method_interface::setMethodCode(const QString &method_code) {
    m_method_code = method_code;
    m_method_code_isSet = true;
}

bool OAIQuote_data_shipping_method_interface::is_method_code_Set() const{
    return m_method_code_isSet;
}

bool OAIQuote_data_shipping_method_interface::is_method_code_Valid() const{
    return m_method_code_isValid;
}

QString OAIQuote_data_shipping_method_interface::getMethodTitle() const {
    return m_method_title;
}
void OAIQuote_data_shipping_method_interface::setMethodTitle(const QString &method_title) {
    m_method_title = method_title;
    m_method_title_isSet = true;
}

bool OAIQuote_data_shipping_method_interface::is_method_title_Set() const{
    return m_method_title_isSet;
}

bool OAIQuote_data_shipping_method_interface::is_method_title_Valid() const{
    return m_method_title_isValid;
}

double OAIQuote_data_shipping_method_interface::getPriceExclTax() const {
    return m_price_excl_tax;
}
void OAIQuote_data_shipping_method_interface::setPriceExclTax(const double &price_excl_tax) {
    m_price_excl_tax = price_excl_tax;
    m_price_excl_tax_isSet = true;
}

bool OAIQuote_data_shipping_method_interface::is_price_excl_tax_Set() const{
    return m_price_excl_tax_isSet;
}

bool OAIQuote_data_shipping_method_interface::is_price_excl_tax_Valid() const{
    return m_price_excl_tax_isValid;
}

double OAIQuote_data_shipping_method_interface::getPriceInclTax() const {
    return m_price_incl_tax;
}
void OAIQuote_data_shipping_method_interface::setPriceInclTax(const double &price_incl_tax) {
    m_price_incl_tax = price_incl_tax;
    m_price_incl_tax_isSet = true;
}

bool OAIQuote_data_shipping_method_interface::is_price_incl_tax_Set() const{
    return m_price_incl_tax_isSet;
}

bool OAIQuote_data_shipping_method_interface::is_price_incl_tax_Valid() const{
    return m_price_incl_tax_isValid;
}

bool OAIQuote_data_shipping_method_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_excl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuote_data_shipping_method_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_available_isValid && m_base_amount_isValid && m_carrier_code_isValid && m_error_message_isValid && m_method_code_isValid && m_price_excl_tax_isValid && m_price_incl_tax_isValid && true;
}

} // namespace OpenAPI
