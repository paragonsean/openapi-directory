/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckout_agreements_data_agreement_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckout_agreements_data_agreement_interface::OAICheckout_agreements_data_agreement_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckout_agreements_data_agreement_interface::OAICheckout_agreements_data_agreement_interface() {
    this->initializeModel();
}

OAICheckout_agreements_data_agreement_interface::~OAICheckout_agreements_data_agreement_interface() {}

void OAICheckout_agreements_data_agreement_interface::initializeModel() {

    m_agreement_id_isSet = false;
    m_agreement_id_isValid = false;

    m_checkbox_text_isSet = false;
    m_checkbox_text_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_height_isSet = false;
    m_content_height_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_html_isSet = false;
    m_is_html_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICheckout_agreements_data_agreement_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckout_agreements_data_agreement_interface::fromJsonObject(QJsonObject json) {

    m_agreement_id_isValid = ::OpenAPI::fromJsonValue(m_agreement_id, json[QString("agreement_id")]);
    m_agreement_id_isSet = !json[QString("agreement_id")].isNull() && m_agreement_id_isValid;

    m_checkbox_text_isValid = ::OpenAPI::fromJsonValue(m_checkbox_text, json[QString("checkbox_text")]);
    m_checkbox_text_isSet = !json[QString("checkbox_text")].isNull() && m_checkbox_text_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_content_height_isValid = ::OpenAPI::fromJsonValue(m_content_height, json[QString("content_height")]);
    m_content_height_isSet = !json[QString("content_height")].isNull() && m_content_height_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_is_html_isValid = ::OpenAPI::fromJsonValue(m_is_html, json[QString("is_html")]);
    m_is_html_isSet = !json[QString("is_html")].isNull() && m_is_html_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICheckout_agreements_data_agreement_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckout_agreements_data_agreement_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_agreement_id_isSet) {
        obj.insert(QString("agreement_id"), ::OpenAPI::toJsonValue(m_agreement_id));
    }
    if (m_checkbox_text_isSet) {
        obj.insert(QString("checkbox_text"), ::OpenAPI::toJsonValue(m_checkbox_text));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_height_isSet) {
        obj.insert(QString("content_height"), ::OpenAPI::toJsonValue(m_content_height));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_html_isSet) {
        obj.insert(QString("is_html"), ::OpenAPI::toJsonValue(m_is_html));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

qint32 OAICheckout_agreements_data_agreement_interface::getAgreementId() const {
    return m_agreement_id;
}
void OAICheckout_agreements_data_agreement_interface::setAgreementId(const qint32 &agreement_id) {
    m_agreement_id = agreement_id;
    m_agreement_id_isSet = true;
}

bool OAICheckout_agreements_data_agreement_interface::is_agreement_id_Set() const{
    return m_agreement_id_isSet;
}

bool OAICheckout_agreements_data_agreement_interface::is_agreement_id_Valid() const{
    return m_agreement_id_isValid;
}

QString OAICheckout_agreements_data_agreement_interface::getCheckboxText() const {
    return m_checkbox_text;
}
void OAICheckout_agreements_data_agreement_interface::setCheckboxText(const QString &checkbox_text) {
    m_checkbox_text = checkbox_text;
    m_checkbox_text_isSet = true;
}

bool OAICheckout_agreements_data_agreement_interface::is_checkbox_text_Set() const{
    return m_checkbox_text_isSet;
}

bool OAICheckout_agreements_data_agreement_interface::is_checkbox_text_Valid() const{
    return m_checkbox_text_isValid;
}

QString OAICheckout_agreements_data_agreement_interface::getContent() const {
    return m_content;
}
void OAICheckout_agreements_data_agreement_interface::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAICheckout_agreements_data_agreement_interface::is_content_Set() const{
    return m_content_isSet;
}

bool OAICheckout_agreements_data_agreement_interface::is_content_Valid() const{
    return m_content_isValid;
}

QString OAICheckout_agreements_data_agreement_interface::getContentHeight() const {
    return m_content_height;
}
void OAICheckout_agreements_data_agreement_interface::setContentHeight(const QString &content_height) {
    m_content_height = content_height;
    m_content_height_isSet = true;
}

bool OAICheckout_agreements_data_agreement_interface::is_content_height_Set() const{
    return m_content_height_isSet;
}

bool OAICheckout_agreements_data_agreement_interface::is_content_height_Valid() const{
    return m_content_height_isValid;
}

OAIObject OAICheckout_agreements_data_agreement_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAICheckout_agreements_data_agreement_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAICheckout_agreements_data_agreement_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAICheckout_agreements_data_agreement_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

bool OAICheckout_agreements_data_agreement_interface::isIsActive() const {
    return m_is_active;
}
void OAICheckout_agreements_data_agreement_interface::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAICheckout_agreements_data_agreement_interface::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAICheckout_agreements_data_agreement_interface::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAICheckout_agreements_data_agreement_interface::isIsHtml() const {
    return m_is_html;
}
void OAICheckout_agreements_data_agreement_interface::setIsHtml(const bool &is_html) {
    m_is_html = is_html;
    m_is_html_isSet = true;
}

bool OAICheckout_agreements_data_agreement_interface::is_is_html_Set() const{
    return m_is_html_isSet;
}

bool OAICheckout_agreements_data_agreement_interface::is_is_html_Valid() const{
    return m_is_html_isValid;
}

qint32 OAICheckout_agreements_data_agreement_interface::getMode() const {
    return m_mode;
}
void OAICheckout_agreements_data_agreement_interface::setMode(const qint32 &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAICheckout_agreements_data_agreement_interface::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAICheckout_agreements_data_agreement_interface::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAICheckout_agreements_data_agreement_interface::getName() const {
    return m_name;
}
void OAICheckout_agreements_data_agreement_interface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICheckout_agreements_data_agreement_interface::is_name_Set() const{
    return m_name_isSet;
}

bool OAICheckout_agreements_data_agreement_interface::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICheckout_agreements_data_agreement_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agreement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkbox_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckout_agreements_data_agreement_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agreement_id_isValid && m_checkbox_text_isValid && m_content_isValid && m_is_active_isValid && m_is_html_isValid && m_mode_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
