/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISales_rule_data_rule_label_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISales_rule_data_rule_label_interface::OAISales_rule_data_rule_label_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISales_rule_data_rule_label_interface::OAISales_rule_data_rule_label_interface() {
    this->initializeModel();
}

OAISales_rule_data_rule_label_interface::~OAISales_rule_data_rule_label_interface() {}

void OAISales_rule_data_rule_label_interface::initializeModel() {

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_store_label_isSet = false;
    m_store_label_isValid = false;
}

void OAISales_rule_data_rule_label_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISales_rule_data_rule_label_interface::fromJsonObject(QJsonObject json) {

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_store_label_isValid = ::OpenAPI::fromJsonValue(m_store_label, json[QString("store_label")]);
    m_store_label_isSet = !json[QString("store_label")].isNull() && m_store_label_isValid;
}

QString OAISales_rule_data_rule_label_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISales_rule_data_rule_label_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_store_label_isSet) {
        obj.insert(QString("store_label"), ::OpenAPI::toJsonValue(m_store_label));
    }
    return obj;
}

OAIObject OAISales_rule_data_rule_label_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAISales_rule_data_rule_label_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAISales_rule_data_rule_label_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAISales_rule_data_rule_label_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAISales_rule_data_rule_label_interface::getStoreId() const {
    return m_store_id;
}
void OAISales_rule_data_rule_label_interface::setStoreId(const qint32 &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAISales_rule_data_rule_label_interface::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAISales_rule_data_rule_label_interface::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QString OAISales_rule_data_rule_label_interface::getStoreLabel() const {
    return m_store_label;
}
void OAISales_rule_data_rule_label_interface::setStoreLabel(const QString &store_label) {
    m_store_label = store_label;
    m_store_label_isSet = true;
}

bool OAISales_rule_data_rule_label_interface::is_store_label_Set() const{
    return m_store_label_isSet;
}

bool OAISales_rule_data_rule_label_interface::is_store_label_Valid() const{
    return m_store_label_isValid;
}

bool OAISales_rule_data_rule_label_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISales_rule_data_rule_label_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_store_id_isValid && m_store_label_isValid && true;
}

} // namespace OpenAPI
