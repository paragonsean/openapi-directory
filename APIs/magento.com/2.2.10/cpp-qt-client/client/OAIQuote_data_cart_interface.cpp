/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuote_data_cart_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuote_data_cart_interface::OAIQuote_data_cart_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuote_data_cart_interface::OAIQuote_data_cart_interface() {
    this->initializeModel();
}

OAIQuote_data_cart_interface::~OAIQuote_data_cart_interface() {}

void OAIQuote_data_cart_interface::initializeModel() {

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_converted_at_isSet = false;
    m_converted_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_customer_is_guest_isSet = false;
    m_customer_is_guest_isValid = false;

    m_customer_note_isSet = false;
    m_customer_note_isValid = false;

    m_customer_note_notify_isSet = false;
    m_customer_note_notify_isValid = false;

    m_customer_tax_class_id_isSet = false;
    m_customer_tax_class_id_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_virtual_isSet = false;
    m_is_virtual_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_items_count_isSet = false;
    m_items_count_isValid = false;

    m_items_qty_isSet = false;
    m_items_qty_isValid = false;

    m_orig_order_id_isSet = false;
    m_orig_order_id_isValid = false;

    m_reserved_order_id_isSet = false;
    m_reserved_order_id_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIQuote_data_cart_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuote_data_cart_interface::fromJsonObject(QJsonObject json) {

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billing_address")]);
    m_billing_address_isSet = !json[QString("billing_address")].isNull() && m_billing_address_isValid;

    m_converted_at_isValid = ::OpenAPI::fromJsonValue(m_converted_at, json[QString("converted_at")]);
    m_converted_at_isSet = !json[QString("converted_at")].isNull() && m_converted_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_customer_is_guest_isValid = ::OpenAPI::fromJsonValue(m_customer_is_guest, json[QString("customer_is_guest")]);
    m_customer_is_guest_isSet = !json[QString("customer_is_guest")].isNull() && m_customer_is_guest_isValid;

    m_customer_note_isValid = ::OpenAPI::fromJsonValue(m_customer_note, json[QString("customer_note")]);
    m_customer_note_isSet = !json[QString("customer_note")].isNull() && m_customer_note_isValid;

    m_customer_note_notify_isValid = ::OpenAPI::fromJsonValue(m_customer_note_notify, json[QString("customer_note_notify")]);
    m_customer_note_notify_isSet = !json[QString("customer_note_notify")].isNull() && m_customer_note_notify_isValid;

    m_customer_tax_class_id_isValid = ::OpenAPI::fromJsonValue(m_customer_tax_class_id, json[QString("customer_tax_class_id")]);
    m_customer_tax_class_id_isSet = !json[QString("customer_tax_class_id")].isNull() && m_customer_tax_class_id_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_is_virtual_isValid = ::OpenAPI::fromJsonValue(m_is_virtual, json[QString("is_virtual")]);
    m_is_virtual_isSet = !json[QString("is_virtual")].isNull() && m_is_virtual_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_items_count_isValid = ::OpenAPI::fromJsonValue(m_items_count, json[QString("items_count")]);
    m_items_count_isSet = !json[QString("items_count")].isNull() && m_items_count_isValid;

    m_items_qty_isValid = ::OpenAPI::fromJsonValue(m_items_qty, json[QString("items_qty")]);
    m_items_qty_isSet = !json[QString("items_qty")].isNull() && m_items_qty_isValid;

    m_orig_order_id_isValid = ::OpenAPI::fromJsonValue(m_orig_order_id, json[QString("orig_order_id")]);
    m_orig_order_id_isSet = !json[QString("orig_order_id")].isNull() && m_orig_order_id_isValid;

    m_reserved_order_id_isValid = ::OpenAPI::fromJsonValue(m_reserved_order_id, json[QString("reserved_order_id")]);
    m_reserved_order_id_isSet = !json[QString("reserved_order_id")].isNull() && m_reserved_order_id_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIQuote_data_cart_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuote_data_cart_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_address.isSet()) {
        obj.insert(QString("billing_address"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_converted_at_isSet) {
        obj.insert(QString("converted_at"), ::OpenAPI::toJsonValue(m_converted_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_customer_is_guest_isSet) {
        obj.insert(QString("customer_is_guest"), ::OpenAPI::toJsonValue(m_customer_is_guest));
    }
    if (m_customer_note_isSet) {
        obj.insert(QString("customer_note"), ::OpenAPI::toJsonValue(m_customer_note));
    }
    if (m_customer_note_notify_isSet) {
        obj.insert(QString("customer_note_notify"), ::OpenAPI::toJsonValue(m_customer_note_notify));
    }
    if (m_customer_tax_class_id_isSet) {
        obj.insert(QString("customer_tax_class_id"), ::OpenAPI::toJsonValue(m_customer_tax_class_id));
    }
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_virtual_isSet) {
        obj.insert(QString("is_virtual"), ::OpenAPI::toJsonValue(m_is_virtual));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_items_count_isSet) {
        obj.insert(QString("items_count"), ::OpenAPI::toJsonValue(m_items_count));
    }
    if (m_items_qty_isSet) {
        obj.insert(QString("items_qty"), ::OpenAPI::toJsonValue(m_items_qty));
    }
    if (m_orig_order_id_isSet) {
        obj.insert(QString("orig_order_id"), ::OpenAPI::toJsonValue(m_orig_order_id));
    }
    if (m_reserved_order_id_isSet) {
        obj.insert(QString("reserved_order_id"), ::OpenAPI::toJsonValue(m_reserved_order_id));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIQuote_data_address_interface OAIQuote_data_cart_interface::getBillingAddress() const {
    return m_billing_address;
}
void OAIQuote_data_cart_interface::setBillingAddress(const OAIQuote_data_address_interface &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIQuote_data_cart_interface::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIQuote_data_cart_interface::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

QString OAIQuote_data_cart_interface::getConvertedAt() const {
    return m_converted_at;
}
void OAIQuote_data_cart_interface::setConvertedAt(const QString &converted_at) {
    m_converted_at = converted_at;
    m_converted_at_isSet = true;
}

bool OAIQuote_data_cart_interface::is_converted_at_Set() const{
    return m_converted_at_isSet;
}

bool OAIQuote_data_cart_interface::is_converted_at_Valid() const{
    return m_converted_at_isValid;
}

QString OAIQuote_data_cart_interface::getCreatedAt() const {
    return m_created_at;
}
void OAIQuote_data_cart_interface::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIQuote_data_cart_interface::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIQuote_data_cart_interface::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIQuote_data_currency_interface OAIQuote_data_cart_interface::getCurrency() const {
    return m_currency;
}
void OAIQuote_data_cart_interface::setCurrency(const OAIQuote_data_currency_interface &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIQuote_data_cart_interface::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIQuote_data_cart_interface::is_currency_Valid() const{
    return m_currency_isValid;
}

OAICustomer_data_customer_interface OAIQuote_data_cart_interface::getCustomer() const {
    return m_customer;
}
void OAIQuote_data_cart_interface::setCustomer(const OAICustomer_data_customer_interface &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIQuote_data_cart_interface::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIQuote_data_cart_interface::is_customer_Valid() const{
    return m_customer_isValid;
}

bool OAIQuote_data_cart_interface::isCustomerIsGuest() const {
    return m_customer_is_guest;
}
void OAIQuote_data_cart_interface::setCustomerIsGuest(const bool &customer_is_guest) {
    m_customer_is_guest = customer_is_guest;
    m_customer_is_guest_isSet = true;
}

bool OAIQuote_data_cart_interface::is_customer_is_guest_Set() const{
    return m_customer_is_guest_isSet;
}

bool OAIQuote_data_cart_interface::is_customer_is_guest_Valid() const{
    return m_customer_is_guest_isValid;
}

QString OAIQuote_data_cart_interface::getCustomerNote() const {
    return m_customer_note;
}
void OAIQuote_data_cart_interface::setCustomerNote(const QString &customer_note) {
    m_customer_note = customer_note;
    m_customer_note_isSet = true;
}

bool OAIQuote_data_cart_interface::is_customer_note_Set() const{
    return m_customer_note_isSet;
}

bool OAIQuote_data_cart_interface::is_customer_note_Valid() const{
    return m_customer_note_isValid;
}

bool OAIQuote_data_cart_interface::isCustomerNoteNotify() const {
    return m_customer_note_notify;
}
void OAIQuote_data_cart_interface::setCustomerNoteNotify(const bool &customer_note_notify) {
    m_customer_note_notify = customer_note_notify;
    m_customer_note_notify_isSet = true;
}

bool OAIQuote_data_cart_interface::is_customer_note_notify_Set() const{
    return m_customer_note_notify_isSet;
}

bool OAIQuote_data_cart_interface::is_customer_note_notify_Valid() const{
    return m_customer_note_notify_isValid;
}

qint32 OAIQuote_data_cart_interface::getCustomerTaxClassId() const {
    return m_customer_tax_class_id;
}
void OAIQuote_data_cart_interface::setCustomerTaxClassId(const qint32 &customer_tax_class_id) {
    m_customer_tax_class_id = customer_tax_class_id;
    m_customer_tax_class_id_isSet = true;
}

bool OAIQuote_data_cart_interface::is_customer_tax_class_id_Set() const{
    return m_customer_tax_class_id_isSet;
}

bool OAIQuote_data_cart_interface::is_customer_tax_class_id_Valid() const{
    return m_customer_tax_class_id_isValid;
}

OAIQuote_data_cart_extension_interface OAIQuote_data_cart_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIQuote_data_cart_interface::setExtensionAttributes(const OAIQuote_data_cart_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIQuote_data_cart_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIQuote_data_cart_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAIQuote_data_cart_interface::getId() const {
    return m_id;
}
void OAIQuote_data_cart_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIQuote_data_cart_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAIQuote_data_cart_interface::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIQuote_data_cart_interface::isIsActive() const {
    return m_is_active;
}
void OAIQuote_data_cart_interface::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIQuote_data_cart_interface::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIQuote_data_cart_interface::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIQuote_data_cart_interface::isIsVirtual() const {
    return m_is_virtual;
}
void OAIQuote_data_cart_interface::setIsVirtual(const bool &is_virtual) {
    m_is_virtual = is_virtual;
    m_is_virtual_isSet = true;
}

bool OAIQuote_data_cart_interface::is_is_virtual_Set() const{
    return m_is_virtual_isSet;
}

bool OAIQuote_data_cart_interface::is_is_virtual_Valid() const{
    return m_is_virtual_isValid;
}

QList<OAIQuote_data_cart_item_interface> OAIQuote_data_cart_interface::getItems() const {
    return m_items;
}
void OAIQuote_data_cart_interface::setItems(const QList<OAIQuote_data_cart_item_interface> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIQuote_data_cart_interface::is_items_Set() const{
    return m_items_isSet;
}

bool OAIQuote_data_cart_interface::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAIQuote_data_cart_interface::getItemsCount() const {
    return m_items_count;
}
void OAIQuote_data_cart_interface::setItemsCount(const qint32 &items_count) {
    m_items_count = items_count;
    m_items_count_isSet = true;
}

bool OAIQuote_data_cart_interface::is_items_count_Set() const{
    return m_items_count_isSet;
}

bool OAIQuote_data_cart_interface::is_items_count_Valid() const{
    return m_items_count_isValid;
}

double OAIQuote_data_cart_interface::getItemsQty() const {
    return m_items_qty;
}
void OAIQuote_data_cart_interface::setItemsQty(const double &items_qty) {
    m_items_qty = items_qty;
    m_items_qty_isSet = true;
}

bool OAIQuote_data_cart_interface::is_items_qty_Set() const{
    return m_items_qty_isSet;
}

bool OAIQuote_data_cart_interface::is_items_qty_Valid() const{
    return m_items_qty_isValid;
}

qint32 OAIQuote_data_cart_interface::getOrigOrderId() const {
    return m_orig_order_id;
}
void OAIQuote_data_cart_interface::setOrigOrderId(const qint32 &orig_order_id) {
    m_orig_order_id = orig_order_id;
    m_orig_order_id_isSet = true;
}

bool OAIQuote_data_cart_interface::is_orig_order_id_Set() const{
    return m_orig_order_id_isSet;
}

bool OAIQuote_data_cart_interface::is_orig_order_id_Valid() const{
    return m_orig_order_id_isValid;
}

QString OAIQuote_data_cart_interface::getReservedOrderId() const {
    return m_reserved_order_id;
}
void OAIQuote_data_cart_interface::setReservedOrderId(const QString &reserved_order_id) {
    m_reserved_order_id = reserved_order_id;
    m_reserved_order_id_isSet = true;
}

bool OAIQuote_data_cart_interface::is_reserved_order_id_Set() const{
    return m_reserved_order_id_isSet;
}

bool OAIQuote_data_cart_interface::is_reserved_order_id_Valid() const{
    return m_reserved_order_id_isValid;
}

qint32 OAIQuote_data_cart_interface::getStoreId() const {
    return m_store_id;
}
void OAIQuote_data_cart_interface::setStoreId(const qint32 &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIQuote_data_cart_interface::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIQuote_data_cart_interface::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QString OAIQuote_data_cart_interface::getUpdatedAt() const {
    return m_updated_at;
}
void OAIQuote_data_cart_interface::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIQuote_data_cart_interface::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIQuote_data_cart_interface::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIQuote_data_cart_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_converted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_is_guest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_note_notify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_tax_class_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_virtual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orig_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuote_data_cart_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_customer_isValid && m_id_isValid && m_store_id_isValid && true;
}

} // namespace OpenAPI
