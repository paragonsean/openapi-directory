/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINegotiable_quote_data_negotiable_quote_totals_interface.h
 *
 * Extension attribute for quote totals model.
 */

#ifndef OAINegotiable_quote_data_negotiable_quote_totals_interface_H
#define OAINegotiable_quote_data_negotiable_quote_totals_interface_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINegotiable_quote_data_negotiable_quote_totals_interface : public OAIObject {
public:
    OAINegotiable_quote_data_negotiable_quote_totals_interface();
    OAINegotiable_quote_data_negotiable_quote_totals_interface(QString json);
    ~OAINegotiable_quote_data_negotiable_quote_totals_interface() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getBaseCostTotal() const;
    void setBaseCostTotal(const double &base_cost_total);
    bool is_base_cost_total_Set() const;
    bool is_base_cost_total_Valid() const;

    double getBaseOriginalPriceInclTax() const;
    void setBaseOriginalPriceInclTax(const double &base_original_price_incl_tax);
    bool is_base_original_price_incl_tax_Set() const;
    bool is_base_original_price_incl_tax_Valid() const;

    double getBaseOriginalTax() const;
    void setBaseOriginalTax(const double &base_original_tax);
    bool is_base_original_tax_Set() const;
    bool is_base_original_tax_Valid() const;

    double getBaseOriginalTotal() const;
    void setBaseOriginalTotal(const double &base_original_total);
    bool is_base_original_total_Set() const;
    bool is_base_original_total_Valid() const;

    double getBaseToQuoteRate() const;
    void setBaseToQuoteRate(const double &base_to_quote_rate);
    bool is_base_to_quote_rate_Set() const;
    bool is_base_to_quote_rate_Valid() const;

    double getCostTotal() const;
    void setCostTotal(const double &cost_total);
    bool is_cost_total_Set() const;
    bool is_cost_total_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    qint32 getCustomerGroup() const;
    void setCustomerGroup(const qint32 &customer_group);
    bool is_customer_group_Set() const;
    bool is_customer_group_Valid() const;

    qint32 getItemsCount() const;
    void setItemsCount(const qint32 &items_count);
    bool is_items_count_Set() const;
    bool is_items_count_Valid() const;

    qint32 getNegotiatedPriceType() const;
    void setNegotiatedPriceType(const qint32 &negotiated_price_type);
    bool is_negotiated_price_type_Set() const;
    bool is_negotiated_price_type_Valid() const;

    double getNegotiatedPriceValue() const;
    void setNegotiatedPriceValue(const double &negotiated_price_value);
    bool is_negotiated_price_value_Set() const;
    bool is_negotiated_price_value_Valid() const;

    double getOriginalPriceInclTax() const;
    void setOriginalPriceInclTax(const double &original_price_incl_tax);
    bool is_original_price_incl_tax_Set() const;
    bool is_original_price_incl_tax_Valid() const;

    double getOriginalTax() const;
    void setOriginalTax(const double &original_tax);
    bool is_original_tax_Set() const;
    bool is_original_tax_Valid() const;

    double getOriginalTotal() const;
    void setOriginalTotal(const double &original_total);
    bool is_original_total_Set() const;
    bool is_original_total_Valid() const;

    QString getQuoteStatus() const;
    void setQuoteStatus(const QString &quote_status);
    bool is_quote_status_Set() const;
    bool is_quote_status_Valid() const;

    QString getUpdatedAt() const;
    void setUpdatedAt(const QString &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_base_cost_total;
    bool m_base_cost_total_isSet;
    bool m_base_cost_total_isValid;

    double m_base_original_price_incl_tax;
    bool m_base_original_price_incl_tax_isSet;
    bool m_base_original_price_incl_tax_isValid;

    double m_base_original_tax;
    bool m_base_original_tax_isSet;
    bool m_base_original_tax_isValid;

    double m_base_original_total;
    bool m_base_original_total_isSet;
    bool m_base_original_total_isValid;

    double m_base_to_quote_rate;
    bool m_base_to_quote_rate_isSet;
    bool m_base_to_quote_rate_isValid;

    double m_cost_total;
    bool m_cost_total_isSet;
    bool m_cost_total_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    qint32 m_customer_group;
    bool m_customer_group_isSet;
    bool m_customer_group_isValid;

    qint32 m_items_count;
    bool m_items_count_isSet;
    bool m_items_count_isValid;

    qint32 m_negotiated_price_type;
    bool m_negotiated_price_type_isSet;
    bool m_negotiated_price_type_isValid;

    double m_negotiated_price_value;
    bool m_negotiated_price_value_isSet;
    bool m_negotiated_price_value_isValid;

    double m_original_price_incl_tax;
    bool m_original_price_incl_tax_isSet;
    bool m_original_price_incl_tax_isValid;

    double m_original_tax;
    bool m_original_tax_isSet;
    bool m_original_tax_isValid;

    double m_original_total;
    bool m_original_total_isSet;
    bool m_original_total_isValid;

    QString m_quote_status;
    bool m_quote_status_isSet;
    bool m_quote_status_isValid;

    QString m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINegotiable_quote_data_negotiable_quote_totals_interface)

#endif // OAINegotiable_quote_data_negotiable_quote_totals_interface_H
