/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBundle_data_option_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBundle_data_option_interface::OAIBundle_data_option_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBundle_data_option_interface::OAIBundle_data_option_interface() {
    this->initializeModel();
}

OAIBundle_data_option_interface::~OAIBundle_data_option_interface() {}

void OAIBundle_data_option_interface::initializeModel() {

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_option_id_isSet = false;
    m_option_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_product_links_isSet = false;
    m_product_links_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIBundle_data_option_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBundle_data_option_interface::fromJsonObject(QJsonObject json) {

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_option_id_isValid = ::OpenAPI::fromJsonValue(m_option_id, json[QString("option_id")]);
    m_option_id_isSet = !json[QString("option_id")].isNull() && m_option_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_product_links_isValid = ::OpenAPI::fromJsonValue(m_product_links, json[QString("product_links")]);
    m_product_links_isSet = !json[QString("product_links")].isNull() && m_product_links_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIBundle_data_option_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBundle_data_option_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_option_id_isSet) {
        obj.insert(QString("option_id"), ::OpenAPI::toJsonValue(m_option_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_product_links.size() > 0) {
        obj.insert(QString("product_links"), ::OpenAPI::toJsonValue(m_product_links));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIObject OAIBundle_data_option_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIBundle_data_option_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIBundle_data_option_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIBundle_data_option_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAIBundle_data_option_interface::getOptionId() const {
    return m_option_id;
}
void OAIBundle_data_option_interface::setOptionId(const qint32 &option_id) {
    m_option_id = option_id;
    m_option_id_isSet = true;
}

bool OAIBundle_data_option_interface::is_option_id_Set() const{
    return m_option_id_isSet;
}

bool OAIBundle_data_option_interface::is_option_id_Valid() const{
    return m_option_id_isValid;
}

qint32 OAIBundle_data_option_interface::getPosition() const {
    return m_position;
}
void OAIBundle_data_option_interface::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIBundle_data_option_interface::is_position_Set() const{
    return m_position_isSet;
}

bool OAIBundle_data_option_interface::is_position_Valid() const{
    return m_position_isValid;
}

QList<OAIBundle_data_link_interface> OAIBundle_data_option_interface::getProductLinks() const {
    return m_product_links;
}
void OAIBundle_data_option_interface::setProductLinks(const QList<OAIBundle_data_link_interface> &product_links) {
    m_product_links = product_links;
    m_product_links_isSet = true;
}

bool OAIBundle_data_option_interface::is_product_links_Set() const{
    return m_product_links_isSet;
}

bool OAIBundle_data_option_interface::is_product_links_Valid() const{
    return m_product_links_isValid;
}

bool OAIBundle_data_option_interface::isRequired() const {
    return m_required;
}
void OAIBundle_data_option_interface::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIBundle_data_option_interface::is_required_Set() const{
    return m_required_isSet;
}

bool OAIBundle_data_option_interface::is_required_Valid() const{
    return m_required_isValid;
}

QString OAIBundle_data_option_interface::getSku() const {
    return m_sku;
}
void OAIBundle_data_option_interface::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIBundle_data_option_interface::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIBundle_data_option_interface::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIBundle_data_option_interface::getTitle() const {
    return m_title;
}
void OAIBundle_data_option_interface::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBundle_data_option_interface::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBundle_data_option_interface::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIBundle_data_option_interface::getType() const {
    return m_type;
}
void OAIBundle_data_option_interface::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBundle_data_option_interface::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBundle_data_option_interface::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBundle_data_option_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBundle_data_option_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
