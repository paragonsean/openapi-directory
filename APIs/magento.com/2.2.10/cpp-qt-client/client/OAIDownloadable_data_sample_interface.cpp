/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDownloadable_data_sample_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDownloadable_data_sample_interface::OAIDownloadable_data_sample_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDownloadable_data_sample_interface::OAIDownloadable_data_sample_interface() {
    this->initializeModel();
}

OAIDownloadable_data_sample_interface::~OAIDownloadable_data_sample_interface() {}

void OAIDownloadable_data_sample_interface::initializeModel() {

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_sample_file_isSet = false;
    m_sample_file_isValid = false;

    m_sample_file_content_isSet = false;
    m_sample_file_content_isValid = false;

    m_sample_type_isSet = false;
    m_sample_type_isValid = false;

    m_sample_url_isSet = false;
    m_sample_url_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIDownloadable_data_sample_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDownloadable_data_sample_interface::fromJsonObject(QJsonObject json) {

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_sample_file_isValid = ::OpenAPI::fromJsonValue(m_sample_file, json[QString("sample_file")]);
    m_sample_file_isSet = !json[QString("sample_file")].isNull() && m_sample_file_isValid;

    m_sample_file_content_isValid = ::OpenAPI::fromJsonValue(m_sample_file_content, json[QString("sample_file_content")]);
    m_sample_file_content_isSet = !json[QString("sample_file_content")].isNull() && m_sample_file_content_isValid;

    m_sample_type_isValid = ::OpenAPI::fromJsonValue(m_sample_type, json[QString("sample_type")]);
    m_sample_type_isSet = !json[QString("sample_type")].isNull() && m_sample_type_isValid;

    m_sample_url_isValid = ::OpenAPI::fromJsonValue(m_sample_url, json[QString("sample_url")]);
    m_sample_url_isSet = !json[QString("sample_url")].isNull() && m_sample_url_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIDownloadable_data_sample_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDownloadable_data_sample_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_sample_file_isSet) {
        obj.insert(QString("sample_file"), ::OpenAPI::toJsonValue(m_sample_file));
    }
    if (m_sample_file_content.isSet()) {
        obj.insert(QString("sample_file_content"), ::OpenAPI::toJsonValue(m_sample_file_content));
    }
    if (m_sample_type_isSet) {
        obj.insert(QString("sample_type"), ::OpenAPI::toJsonValue(m_sample_type));
    }
    if (m_sample_url_isSet) {
        obj.insert(QString("sample_url"), ::OpenAPI::toJsonValue(m_sample_url));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIObject OAIDownloadable_data_sample_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIDownloadable_data_sample_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIDownloadable_data_sample_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIDownloadable_data_sample_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAIDownloadable_data_sample_interface::getId() const {
    return m_id;
}
void OAIDownloadable_data_sample_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDownloadable_data_sample_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDownloadable_data_sample_interface::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDownloadable_data_sample_interface::getSampleFile() const {
    return m_sample_file;
}
void OAIDownloadable_data_sample_interface::setSampleFile(const QString &sample_file) {
    m_sample_file = sample_file;
    m_sample_file_isSet = true;
}

bool OAIDownloadable_data_sample_interface::is_sample_file_Set() const{
    return m_sample_file_isSet;
}

bool OAIDownloadable_data_sample_interface::is_sample_file_Valid() const{
    return m_sample_file_isValid;
}

OAIDownloadable_data_file_content_interface OAIDownloadable_data_sample_interface::getSampleFileContent() const {
    return m_sample_file_content;
}
void OAIDownloadable_data_sample_interface::setSampleFileContent(const OAIDownloadable_data_file_content_interface &sample_file_content) {
    m_sample_file_content = sample_file_content;
    m_sample_file_content_isSet = true;
}

bool OAIDownloadable_data_sample_interface::is_sample_file_content_Set() const{
    return m_sample_file_content_isSet;
}

bool OAIDownloadable_data_sample_interface::is_sample_file_content_Valid() const{
    return m_sample_file_content_isValid;
}

QString OAIDownloadable_data_sample_interface::getSampleType() const {
    return m_sample_type;
}
void OAIDownloadable_data_sample_interface::setSampleType(const QString &sample_type) {
    m_sample_type = sample_type;
    m_sample_type_isSet = true;
}

bool OAIDownloadable_data_sample_interface::is_sample_type_Set() const{
    return m_sample_type_isSet;
}

bool OAIDownloadable_data_sample_interface::is_sample_type_Valid() const{
    return m_sample_type_isValid;
}

QString OAIDownloadable_data_sample_interface::getSampleUrl() const {
    return m_sample_url;
}
void OAIDownloadable_data_sample_interface::setSampleUrl(const QString &sample_url) {
    m_sample_url = sample_url;
    m_sample_url_isSet = true;
}

bool OAIDownloadable_data_sample_interface::is_sample_url_Set() const{
    return m_sample_url_isSet;
}

bool OAIDownloadable_data_sample_interface::is_sample_url_Valid() const{
    return m_sample_url_isValid;
}

qint32 OAIDownloadable_data_sample_interface::getSortOrder() const {
    return m_sort_order;
}
void OAIDownloadable_data_sample_interface::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIDownloadable_data_sample_interface::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIDownloadable_data_sample_interface::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAIDownloadable_data_sample_interface::getTitle() const {
    return m_title;
}
void OAIDownloadable_data_sample_interface::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDownloadable_data_sample_interface::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDownloadable_data_sample_interface::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIDownloadable_data_sample_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_file_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDownloadable_data_sample_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sample_type_isValid && m_sort_order_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
