/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFramework_criteria_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFramework_criteria_interface::OAIFramework_criteria_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFramework_criteria_interface::OAIFramework_criteria_interface() {
    this->initializeModel();
}

OAIFramework_criteria_interface::~OAIFramework_criteria_interface() {}

void OAIFramework_criteria_interface::initializeModel() {

    m_criteria_list_isSet = false;
    m_criteria_list_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_mapper_interface_name_isSet = false;
    m_mapper_interface_name_isValid = false;

    m_orders_isSet = false;
    m_orders_isValid = false;
}

void OAIFramework_criteria_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFramework_criteria_interface::fromJsonObject(QJsonObject json) {

    m_criteria_list_isValid = ::OpenAPI::fromJsonValue(m_criteria_list, json[QString("criteria_list")]);
    m_criteria_list_isSet = !json[QString("criteria_list")].isNull() && m_criteria_list_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_mapper_interface_name_isValid = ::OpenAPI::fromJsonValue(m_mapper_interface_name, json[QString("mapper_interface_name")]);
    m_mapper_interface_name_isSet = !json[QString("mapper_interface_name")].isNull() && m_mapper_interface_name_isValid;

    m_orders_isValid = ::OpenAPI::fromJsonValue(m_orders, json[QString("orders")]);
    m_orders_isSet = !json[QString("orders")].isNull() && m_orders_isValid;
}

QString OAIFramework_criteria_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFramework_criteria_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_criteria_list.size() > 0) {
        obj.insert(QString("criteria_list"), ::OpenAPI::toJsonValue(m_criteria_list));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_limit.size() > 0) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_mapper_interface_name_isSet) {
        obj.insert(QString("mapper_interface_name"), ::OpenAPI::toJsonValue(m_mapper_interface_name));
    }
    if (m_orders.size() > 0) {
        obj.insert(QString("orders"), ::OpenAPI::toJsonValue(m_orders));
    }
    return obj;
}

QList<OAIFramework_criteria_interface> OAIFramework_criteria_interface::getCriteriaList() const {
    return m_criteria_list;
}
void OAIFramework_criteria_interface::setCriteriaList(const QList<OAIFramework_criteria_interface> &criteria_list) {
    m_criteria_list = criteria_list;
    m_criteria_list_isSet = true;
}

bool OAIFramework_criteria_interface::is_criteria_list_Set() const{
    return m_criteria_list_isSet;
}

bool OAIFramework_criteria_interface::is_criteria_list_Valid() const{
    return m_criteria_list_isValid;
}

QList<QString> OAIFramework_criteria_interface::getFilters() const {
    return m_filters;
}
void OAIFramework_criteria_interface::setFilters(const QList<QString> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIFramework_criteria_interface::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIFramework_criteria_interface::is_filters_Valid() const{
    return m_filters_isValid;
}

QList<QString> OAIFramework_criteria_interface::getLimit() const {
    return m_limit;
}
void OAIFramework_criteria_interface::setLimit(const QList<QString> &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIFramework_criteria_interface::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIFramework_criteria_interface::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIFramework_criteria_interface::getMapperInterfaceName() const {
    return m_mapper_interface_name;
}
void OAIFramework_criteria_interface::setMapperInterfaceName(const QString &mapper_interface_name) {
    m_mapper_interface_name = mapper_interface_name;
    m_mapper_interface_name_isSet = true;
}

bool OAIFramework_criteria_interface::is_mapper_interface_name_Set() const{
    return m_mapper_interface_name_isSet;
}

bool OAIFramework_criteria_interface::is_mapper_interface_name_Valid() const{
    return m_mapper_interface_name_isValid;
}

QList<QString> OAIFramework_criteria_interface::getOrders() const {
    return m_orders;
}
void OAIFramework_criteria_interface::setOrders(const QList<QString> &orders) {
    m_orders = orders;
    m_orders_isSet = true;
}

bool OAIFramework_criteria_interface::is_orders_Set() const{
    return m_orders_isSet;
}

bool OAIFramework_criteria_interface::is_orders_Valid() const{
    return m_orders_isValid;
}

bool OAIFramework_criteria_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_criteria_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapper_interface_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orders.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFramework_criteria_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_criteria_list_isValid && m_filters_isValid && m_limit_isValid && m_mapper_interface_name_isValid && m_orders_isValid && true;
}

} // namespace OpenAPI
