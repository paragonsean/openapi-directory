/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRma_data_comment_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRma_data_comment_interface::OAIRma_data_comment_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRma_data_comment_interface::OAIRma_data_comment_interface() {
    this->initializeModel();
}

OAIRma_data_comment_interface::~OAIRma_data_comment_interface() {}

void OAIRma_data_comment_interface::initializeModel() {

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_attributes_isSet = false;
    m_custom_attributes_isValid = false;

    m_customer_notified_isSet = false;
    m_customer_notified_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_rma_entity_id_isSet = false;
    m_rma_entity_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_visible_on_front_isSet = false;
    m_visible_on_front_isValid = false;
}

void OAIRma_data_comment_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRma_data_comment_interface::fromJsonObject(QJsonObject json) {

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_custom_attributes_isValid = ::OpenAPI::fromJsonValue(m_custom_attributes, json[QString("custom_attributes")]);
    m_custom_attributes_isSet = !json[QString("custom_attributes")].isNull() && m_custom_attributes_isValid;

    m_customer_notified_isValid = ::OpenAPI::fromJsonValue(m_customer_notified, json[QString("customer_notified")]);
    m_customer_notified_isSet = !json[QString("customer_notified")].isNull() && m_customer_notified_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_rma_entity_id_isValid = ::OpenAPI::fromJsonValue(m_rma_entity_id, json[QString("rma_entity_id")]);
    m_rma_entity_id_isSet = !json[QString("rma_entity_id")].isNull() && m_rma_entity_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_visible_on_front_isValid = ::OpenAPI::fromJsonValue(m_visible_on_front, json[QString("visible_on_front")]);
    m_visible_on_front_isSet = !json[QString("visible_on_front")].isNull() && m_visible_on_front_isValid;
}

QString OAIRma_data_comment_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRma_data_comment_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_attributes.size() > 0) {
        obj.insert(QString("custom_attributes"), ::OpenAPI::toJsonValue(m_custom_attributes));
    }
    if (m_customer_notified_isSet) {
        obj.insert(QString("customer_notified"), ::OpenAPI::toJsonValue(m_customer_notified));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_rma_entity_id_isSet) {
        obj.insert(QString("rma_entity_id"), ::OpenAPI::toJsonValue(m_rma_entity_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_visible_on_front_isSet) {
        obj.insert(QString("visible_on_front"), ::OpenAPI::toJsonValue(m_visible_on_front));
    }
    return obj;
}

bool OAIRma_data_comment_interface::isAdmin() const {
    return m_admin;
}
void OAIRma_data_comment_interface::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIRma_data_comment_interface::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIRma_data_comment_interface::is_admin_Valid() const{
    return m_admin_isValid;
}

QString OAIRma_data_comment_interface::getComment() const {
    return m_comment;
}
void OAIRma_data_comment_interface::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIRma_data_comment_interface::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIRma_data_comment_interface::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIRma_data_comment_interface::getCreatedAt() const {
    return m_created_at;
}
void OAIRma_data_comment_interface::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRma_data_comment_interface::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRma_data_comment_interface::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIFramework_attribute_interface> OAIRma_data_comment_interface::getCustomAttributes() const {
    return m_custom_attributes;
}
void OAIRma_data_comment_interface::setCustomAttributes(const QList<OAIFramework_attribute_interface> &custom_attributes) {
    m_custom_attributes = custom_attributes;
    m_custom_attributes_isSet = true;
}

bool OAIRma_data_comment_interface::is_custom_attributes_Set() const{
    return m_custom_attributes_isSet;
}

bool OAIRma_data_comment_interface::is_custom_attributes_Valid() const{
    return m_custom_attributes_isValid;
}

bool OAIRma_data_comment_interface::isCustomerNotified() const {
    return m_customer_notified;
}
void OAIRma_data_comment_interface::setCustomerNotified(const bool &customer_notified) {
    m_customer_notified = customer_notified;
    m_customer_notified_isSet = true;
}

bool OAIRma_data_comment_interface::is_customer_notified_Set() const{
    return m_customer_notified_isSet;
}

bool OAIRma_data_comment_interface::is_customer_notified_Valid() const{
    return m_customer_notified_isValid;
}

qint32 OAIRma_data_comment_interface::getEntityId() const {
    return m_entity_id;
}
void OAIRma_data_comment_interface::setEntityId(const qint32 &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIRma_data_comment_interface::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIRma_data_comment_interface::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIObject OAIRma_data_comment_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIRma_data_comment_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIRma_data_comment_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIRma_data_comment_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAIRma_data_comment_interface::getRmaEntityId() const {
    return m_rma_entity_id;
}
void OAIRma_data_comment_interface::setRmaEntityId(const qint32 &rma_entity_id) {
    m_rma_entity_id = rma_entity_id;
    m_rma_entity_id_isSet = true;
}

bool OAIRma_data_comment_interface::is_rma_entity_id_Set() const{
    return m_rma_entity_id_isSet;
}

bool OAIRma_data_comment_interface::is_rma_entity_id_Valid() const{
    return m_rma_entity_id_isValid;
}

QString OAIRma_data_comment_interface::getStatus() const {
    return m_status;
}
void OAIRma_data_comment_interface::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRma_data_comment_interface::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRma_data_comment_interface::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRma_data_comment_interface::isVisibleOnFront() const {
    return m_visible_on_front;
}
void OAIRma_data_comment_interface::setVisibleOnFront(const bool &visible_on_front) {
    m_visible_on_front = visible_on_front;
    m_visible_on_front_isSet = true;
}

bool OAIRma_data_comment_interface::is_visible_on_front_Set() const{
    return m_visible_on_front_isSet;
}

bool OAIRma_data_comment_interface::is_visible_on_front_Valid() const{
    return m_visible_on_front_isValid;
}

bool OAIRma_data_comment_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_notified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rma_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_on_front_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRma_data_comment_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_admin_isValid && m_comment_isValid && m_created_at_isValid && m_customer_notified_isValid && m_entity_id_isValid && m_rma_entity_id_isValid && m_status_isValid && m_visible_on_front_isValid && true;
}

} // namespace OpenAPI
