/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGift_wrapping_data_wrapping_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGift_wrapping_data_wrapping_interface::OAIGift_wrapping_data_wrapping_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGift_wrapping_data_wrapping_interface::OAIGift_wrapping_data_wrapping_interface() {
    this->initializeModel();
}

OAIGift_wrapping_data_wrapping_interface::~OAIGift_wrapping_data_wrapping_interface() {}

void OAIGift_wrapping_data_wrapping_interface::initializeModel() {

    m_base_currency_code_isSet = false;
    m_base_currency_code_isValid = false;

    m_base_price_isSet = false;
    m_base_price_isValid = false;

    m_design_isSet = false;
    m_design_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_image_base64_content_isSet = false;
    m_image_base64_content_isValid = false;

    m_image_name_isSet = false;
    m_image_name_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_website_ids_isSet = false;
    m_website_ids_isValid = false;

    m_wrapping_id_isSet = false;
    m_wrapping_id_isValid = false;
}

void OAIGift_wrapping_data_wrapping_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGift_wrapping_data_wrapping_interface::fromJsonObject(QJsonObject json) {

    m_base_currency_code_isValid = ::OpenAPI::fromJsonValue(m_base_currency_code, json[QString("base_currency_code")]);
    m_base_currency_code_isSet = !json[QString("base_currency_code")].isNull() && m_base_currency_code_isValid;

    m_base_price_isValid = ::OpenAPI::fromJsonValue(m_base_price, json[QString("base_price")]);
    m_base_price_isSet = !json[QString("base_price")].isNull() && m_base_price_isValid;

    m_design_isValid = ::OpenAPI::fromJsonValue(m_design, json[QString("design")]);
    m_design_isSet = !json[QString("design")].isNull() && m_design_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_image_base64_content_isValid = ::OpenAPI::fromJsonValue(m_image_base64_content, json[QString("image_base64_content")]);
    m_image_base64_content_isSet = !json[QString("image_base64_content")].isNull() && m_image_base64_content_isValid;

    m_image_name_isValid = ::OpenAPI::fromJsonValue(m_image_name, json[QString("image_name")]);
    m_image_name_isSet = !json[QString("image_name")].isNull() && m_image_name_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_website_ids_isValid = ::OpenAPI::fromJsonValue(m_website_ids, json[QString("website_ids")]);
    m_website_ids_isSet = !json[QString("website_ids")].isNull() && m_website_ids_isValid;

    m_wrapping_id_isValid = ::OpenAPI::fromJsonValue(m_wrapping_id, json[QString("wrapping_id")]);
    m_wrapping_id_isSet = !json[QString("wrapping_id")].isNull() && m_wrapping_id_isValid;
}

QString OAIGift_wrapping_data_wrapping_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGift_wrapping_data_wrapping_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_base_currency_code_isSet) {
        obj.insert(QString("base_currency_code"), ::OpenAPI::toJsonValue(m_base_currency_code));
    }
    if (m_base_price_isSet) {
        obj.insert(QString("base_price"), ::OpenAPI::toJsonValue(m_base_price));
    }
    if (m_design_isSet) {
        obj.insert(QString("design"), ::OpenAPI::toJsonValue(m_design));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_image_base64_content_isSet) {
        obj.insert(QString("image_base64_content"), ::OpenAPI::toJsonValue(m_image_base64_content));
    }
    if (m_image_name_isSet) {
        obj.insert(QString("image_name"), ::OpenAPI::toJsonValue(m_image_name));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_website_ids.size() > 0) {
        obj.insert(QString("website_ids"), ::OpenAPI::toJsonValue(m_website_ids));
    }
    if (m_wrapping_id_isSet) {
        obj.insert(QString("wrapping_id"), ::OpenAPI::toJsonValue(m_wrapping_id));
    }
    return obj;
}

QString OAIGift_wrapping_data_wrapping_interface::getBaseCurrencyCode() const {
    return m_base_currency_code;
}
void OAIGift_wrapping_data_wrapping_interface::setBaseCurrencyCode(const QString &base_currency_code) {
    m_base_currency_code = base_currency_code;
    m_base_currency_code_isSet = true;
}

bool OAIGift_wrapping_data_wrapping_interface::is_base_currency_code_Set() const{
    return m_base_currency_code_isSet;
}

bool OAIGift_wrapping_data_wrapping_interface::is_base_currency_code_Valid() const{
    return m_base_currency_code_isValid;
}

double OAIGift_wrapping_data_wrapping_interface::getBasePrice() const {
    return m_base_price;
}
void OAIGift_wrapping_data_wrapping_interface::setBasePrice(const double &base_price) {
    m_base_price = base_price;
    m_base_price_isSet = true;
}

bool OAIGift_wrapping_data_wrapping_interface::is_base_price_Set() const{
    return m_base_price_isSet;
}

bool OAIGift_wrapping_data_wrapping_interface::is_base_price_Valid() const{
    return m_base_price_isValid;
}

QString OAIGift_wrapping_data_wrapping_interface::getDesign() const {
    return m_design;
}
void OAIGift_wrapping_data_wrapping_interface::setDesign(const QString &design) {
    m_design = design;
    m_design_isSet = true;
}

bool OAIGift_wrapping_data_wrapping_interface::is_design_Set() const{
    return m_design_isSet;
}

bool OAIGift_wrapping_data_wrapping_interface::is_design_Valid() const{
    return m_design_isValid;
}

OAIObject OAIGift_wrapping_data_wrapping_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIGift_wrapping_data_wrapping_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIGift_wrapping_data_wrapping_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIGift_wrapping_data_wrapping_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAIGift_wrapping_data_wrapping_interface::getImageBase64Content() const {
    return m_image_base64_content;
}
void OAIGift_wrapping_data_wrapping_interface::setImageBase64Content(const QString &image_base64_content) {
    m_image_base64_content = image_base64_content;
    m_image_base64_content_isSet = true;
}

bool OAIGift_wrapping_data_wrapping_interface::is_image_base64_content_Set() const{
    return m_image_base64_content_isSet;
}

bool OAIGift_wrapping_data_wrapping_interface::is_image_base64_content_Valid() const{
    return m_image_base64_content_isValid;
}

QString OAIGift_wrapping_data_wrapping_interface::getImageName() const {
    return m_image_name;
}
void OAIGift_wrapping_data_wrapping_interface::setImageName(const QString &image_name) {
    m_image_name = image_name;
    m_image_name_isSet = true;
}

bool OAIGift_wrapping_data_wrapping_interface::is_image_name_Set() const{
    return m_image_name_isSet;
}

bool OAIGift_wrapping_data_wrapping_interface::is_image_name_Valid() const{
    return m_image_name_isValid;
}

QString OAIGift_wrapping_data_wrapping_interface::getImageUrl() const {
    return m_image_url;
}
void OAIGift_wrapping_data_wrapping_interface::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIGift_wrapping_data_wrapping_interface::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIGift_wrapping_data_wrapping_interface::is_image_url_Valid() const{
    return m_image_url_isValid;
}

qint32 OAIGift_wrapping_data_wrapping_interface::getStatus() const {
    return m_status;
}
void OAIGift_wrapping_data_wrapping_interface::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGift_wrapping_data_wrapping_interface::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGift_wrapping_data_wrapping_interface::is_status_Valid() const{
    return m_status_isValid;
}

QList<qint32> OAIGift_wrapping_data_wrapping_interface::getWebsiteIds() const {
    return m_website_ids;
}
void OAIGift_wrapping_data_wrapping_interface::setWebsiteIds(const QList<qint32> &website_ids) {
    m_website_ids = website_ids;
    m_website_ids_isSet = true;
}

bool OAIGift_wrapping_data_wrapping_interface::is_website_ids_Set() const{
    return m_website_ids_isSet;
}

bool OAIGift_wrapping_data_wrapping_interface::is_website_ids_Valid() const{
    return m_website_ids_isValid;
}

qint32 OAIGift_wrapping_data_wrapping_interface::getWrappingId() const {
    return m_wrapping_id;
}
void OAIGift_wrapping_data_wrapping_interface::setWrappingId(const qint32 &wrapping_id) {
    m_wrapping_id = wrapping_id;
    m_wrapping_id_isSet = true;
}

bool OAIGift_wrapping_data_wrapping_interface::is_wrapping_id_Set() const{
    return m_wrapping_id_isSet;
}

bool OAIGift_wrapping_data_wrapping_interface::is_wrapping_id_Valid() const{
    return m_wrapping_id_isValid;
}

bool OAIGift_wrapping_data_wrapping_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_design_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_base64_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wrapping_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGift_wrapping_data_wrapping_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_price_isValid && m_design_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
