/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog_data_product_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog_data_product_interface::OAICatalog_data_product_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog_data_product_interface::OAICatalog_data_product_interface() {
    this->initializeModel();
}

OAICatalog_data_product_interface::~OAICatalog_data_product_interface() {}

void OAICatalog_data_product_interface::initializeModel() {

    m_attribute_set_id_isSet = false;
    m_attribute_set_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_attributes_isSet = false;
    m_custom_attributes_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_media_gallery_entries_isSet = false;
    m_media_gallery_entries_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_product_links_isSet = false;
    m_product_links_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tier_prices_isSet = false;
    m_tier_prices_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAICatalog_data_product_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog_data_product_interface::fromJsonObject(QJsonObject json) {

    m_attribute_set_id_isValid = ::OpenAPI::fromJsonValue(m_attribute_set_id, json[QString("attribute_set_id")]);
    m_attribute_set_id_isSet = !json[QString("attribute_set_id")].isNull() && m_attribute_set_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_custom_attributes_isValid = ::OpenAPI::fromJsonValue(m_custom_attributes, json[QString("custom_attributes")]);
    m_custom_attributes_isSet = !json[QString("custom_attributes")].isNull() && m_custom_attributes_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_media_gallery_entries_isValid = ::OpenAPI::fromJsonValue(m_media_gallery_entries, json[QString("media_gallery_entries")]);
    m_media_gallery_entries_isSet = !json[QString("media_gallery_entries")].isNull() && m_media_gallery_entries_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_product_links_isValid = ::OpenAPI::fromJsonValue(m_product_links, json[QString("product_links")]);
    m_product_links_isSet = !json[QString("product_links")].isNull() && m_product_links_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tier_prices_isValid = ::OpenAPI::fromJsonValue(m_tier_prices, json[QString("tier_prices")]);
    m_tier_prices_isSet = !json[QString("tier_prices")].isNull() && m_tier_prices_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAICatalog_data_product_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog_data_product_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_set_id_isSet) {
        obj.insert(QString("attribute_set_id"), ::OpenAPI::toJsonValue(m_attribute_set_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_attributes.size() > 0) {
        obj.insert(QString("custom_attributes"), ::OpenAPI::toJsonValue(m_custom_attributes));
    }
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_media_gallery_entries.size() > 0) {
        obj.insert(QString("media_gallery_entries"), ::OpenAPI::toJsonValue(m_media_gallery_entries));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_product_links.size() > 0) {
        obj.insert(QString("product_links"), ::OpenAPI::toJsonValue(m_product_links));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tier_prices.size() > 0) {
        obj.insert(QString("tier_prices"), ::OpenAPI::toJsonValue(m_tier_prices));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

qint32 OAICatalog_data_product_interface::getAttributeSetId() const {
    return m_attribute_set_id;
}
void OAICatalog_data_product_interface::setAttributeSetId(const qint32 &attribute_set_id) {
    m_attribute_set_id = attribute_set_id;
    m_attribute_set_id_isSet = true;
}

bool OAICatalog_data_product_interface::is_attribute_set_id_Set() const{
    return m_attribute_set_id_isSet;
}

bool OAICatalog_data_product_interface::is_attribute_set_id_Valid() const{
    return m_attribute_set_id_isValid;
}

QString OAICatalog_data_product_interface::getCreatedAt() const {
    return m_created_at;
}
void OAICatalog_data_product_interface::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICatalog_data_product_interface::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICatalog_data_product_interface::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIFramework_attribute_interface> OAICatalog_data_product_interface::getCustomAttributes() const {
    return m_custom_attributes;
}
void OAICatalog_data_product_interface::setCustomAttributes(const QList<OAIFramework_attribute_interface> &custom_attributes) {
    m_custom_attributes = custom_attributes;
    m_custom_attributes_isSet = true;
}

bool OAICatalog_data_product_interface::is_custom_attributes_Set() const{
    return m_custom_attributes_isSet;
}

bool OAICatalog_data_product_interface::is_custom_attributes_Valid() const{
    return m_custom_attributes_isValid;
}

OAICatalog_data_product_extension_interface OAICatalog_data_product_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAICatalog_data_product_interface::setExtensionAttributes(const OAICatalog_data_product_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAICatalog_data_product_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAICatalog_data_product_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAICatalog_data_product_interface::getId() const {
    return m_id;
}
void OAICatalog_data_product_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICatalog_data_product_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAICatalog_data_product_interface::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAICatalog_data_product_attribute_media_gallery_entry_interface> OAICatalog_data_product_interface::getMediaGalleryEntries() const {
    return m_media_gallery_entries;
}
void OAICatalog_data_product_interface::setMediaGalleryEntries(const QList<OAICatalog_data_product_attribute_media_gallery_entry_interface> &media_gallery_entries) {
    m_media_gallery_entries = media_gallery_entries;
    m_media_gallery_entries_isSet = true;
}

bool OAICatalog_data_product_interface::is_media_gallery_entries_Set() const{
    return m_media_gallery_entries_isSet;
}

bool OAICatalog_data_product_interface::is_media_gallery_entries_Valid() const{
    return m_media_gallery_entries_isValid;
}

QString OAICatalog_data_product_interface::getName() const {
    return m_name;
}
void OAICatalog_data_product_interface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalog_data_product_interface::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalog_data_product_interface::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAICatalog_data_product_custom_option_interface> OAICatalog_data_product_interface::getOptions() const {
    return m_options;
}
void OAICatalog_data_product_interface::setOptions(const QList<OAICatalog_data_product_custom_option_interface> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAICatalog_data_product_interface::is_options_Set() const{
    return m_options_isSet;
}

bool OAICatalog_data_product_interface::is_options_Valid() const{
    return m_options_isValid;
}

double OAICatalog_data_product_interface::getPrice() const {
    return m_price;
}
void OAICatalog_data_product_interface::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICatalog_data_product_interface::is_price_Set() const{
    return m_price_isSet;
}

bool OAICatalog_data_product_interface::is_price_Valid() const{
    return m_price_isValid;
}

QList<OAICatalog_data_product_link_interface> OAICatalog_data_product_interface::getProductLinks() const {
    return m_product_links;
}
void OAICatalog_data_product_interface::setProductLinks(const QList<OAICatalog_data_product_link_interface> &product_links) {
    m_product_links = product_links;
    m_product_links_isSet = true;
}

bool OAICatalog_data_product_interface::is_product_links_Set() const{
    return m_product_links_isSet;
}

bool OAICatalog_data_product_interface::is_product_links_Valid() const{
    return m_product_links_isValid;
}

QString OAICatalog_data_product_interface::getSku() const {
    return m_sku;
}
void OAICatalog_data_product_interface::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAICatalog_data_product_interface::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAICatalog_data_product_interface::is_sku_Valid() const{
    return m_sku_isValid;
}

qint32 OAICatalog_data_product_interface::getStatus() const {
    return m_status;
}
void OAICatalog_data_product_interface::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICatalog_data_product_interface::is_status_Set() const{
    return m_status_isSet;
}

bool OAICatalog_data_product_interface::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAICatalog_data_product_tier_price_interface> OAICatalog_data_product_interface::getTierPrices() const {
    return m_tier_prices;
}
void OAICatalog_data_product_interface::setTierPrices(const QList<OAICatalog_data_product_tier_price_interface> &tier_prices) {
    m_tier_prices = tier_prices;
    m_tier_prices_isSet = true;
}

bool OAICatalog_data_product_interface::is_tier_prices_Set() const{
    return m_tier_prices_isSet;
}

bool OAICatalog_data_product_interface::is_tier_prices_Valid() const{
    return m_tier_prices_isValid;
}

QString OAICatalog_data_product_interface::getTypeId() const {
    return m_type_id;
}
void OAICatalog_data_product_interface::setTypeId(const QString &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAICatalog_data_product_interface::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAICatalog_data_product_interface::is_type_id_Valid() const{
    return m_type_id_isValid;
}

QString OAICatalog_data_product_interface::getUpdatedAt() const {
    return m_updated_at;
}
void OAICatalog_data_product_interface::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICatalog_data_product_interface::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICatalog_data_product_interface::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

qint32 OAICatalog_data_product_interface::getVisibility() const {
    return m_visibility;
}
void OAICatalog_data_product_interface::setVisibility(const qint32 &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAICatalog_data_product_interface::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAICatalog_data_product_interface::is_visibility_Valid() const{
    return m_visibility_isValid;
}

double OAICatalog_data_product_interface::getWeight() const {
    return m_weight;
}
void OAICatalog_data_product_interface::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAICatalog_data_product_interface::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAICatalog_data_product_interface::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAICatalog_data_product_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_gallery_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_prices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog_data_product_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sku_isValid && true;
}

} // namespace OpenAPI
