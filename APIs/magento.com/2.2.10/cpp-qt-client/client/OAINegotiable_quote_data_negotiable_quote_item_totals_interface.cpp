/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINegotiable_quote_data_negotiable_quote_item_totals_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINegotiable_quote_data_negotiable_quote_item_totals_interface::OAINegotiable_quote_data_negotiable_quote_item_totals_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINegotiable_quote_data_negotiable_quote_item_totals_interface::OAINegotiable_quote_data_negotiable_quote_item_totals_interface() {
    this->initializeModel();
}

OAINegotiable_quote_data_negotiable_quote_item_totals_interface::~OAINegotiable_quote_data_negotiable_quote_item_totals_interface() {}

void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::initializeModel() {

    m_base_cart_price_isSet = false;
    m_base_cart_price_isValid = false;

    m_base_cart_price_incl_tax_isSet = false;
    m_base_cart_price_incl_tax_isValid = false;

    m_base_cart_tax_isSet = false;
    m_base_cart_tax_isValid = false;

    m_base_catalog_price_isSet = false;
    m_base_catalog_price_isValid = false;

    m_base_catalog_price_incl_tax_isSet = false;
    m_base_catalog_price_incl_tax_isValid = false;

    m_cart_price_isSet = false;
    m_cart_price_isValid = false;

    m_cart_price_incl_tax_isSet = false;
    m_cart_price_incl_tax_isValid = false;

    m_cart_tax_isSet = false;
    m_cart_tax_isValid = false;

    m_catalog_price_isSet = false;
    m_catalog_price_isValid = false;

    m_catalog_price_incl_tax_isSet = false;
    m_catalog_price_incl_tax_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;
}

void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::fromJsonObject(QJsonObject json) {

    m_base_cart_price_isValid = ::OpenAPI::fromJsonValue(m_base_cart_price, json[QString("base_cart_price")]);
    m_base_cart_price_isSet = !json[QString("base_cart_price")].isNull() && m_base_cart_price_isValid;

    m_base_cart_price_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_base_cart_price_incl_tax, json[QString("base_cart_price_incl_tax")]);
    m_base_cart_price_incl_tax_isSet = !json[QString("base_cart_price_incl_tax")].isNull() && m_base_cart_price_incl_tax_isValid;

    m_base_cart_tax_isValid = ::OpenAPI::fromJsonValue(m_base_cart_tax, json[QString("base_cart_tax")]);
    m_base_cart_tax_isSet = !json[QString("base_cart_tax")].isNull() && m_base_cart_tax_isValid;

    m_base_catalog_price_isValid = ::OpenAPI::fromJsonValue(m_base_catalog_price, json[QString("base_catalog_price")]);
    m_base_catalog_price_isSet = !json[QString("base_catalog_price")].isNull() && m_base_catalog_price_isValid;

    m_base_catalog_price_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_base_catalog_price_incl_tax, json[QString("base_catalog_price_incl_tax")]);
    m_base_catalog_price_incl_tax_isSet = !json[QString("base_catalog_price_incl_tax")].isNull() && m_base_catalog_price_incl_tax_isValid;

    m_cart_price_isValid = ::OpenAPI::fromJsonValue(m_cart_price, json[QString("cart_price")]);
    m_cart_price_isSet = !json[QString("cart_price")].isNull() && m_cart_price_isValid;

    m_cart_price_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_cart_price_incl_tax, json[QString("cart_price_incl_tax")]);
    m_cart_price_incl_tax_isSet = !json[QString("cart_price_incl_tax")].isNull() && m_cart_price_incl_tax_isValid;

    m_cart_tax_isValid = ::OpenAPI::fromJsonValue(m_cart_tax, json[QString("cart_tax")]);
    m_cart_tax_isSet = !json[QString("cart_tax")].isNull() && m_cart_tax_isValid;

    m_catalog_price_isValid = ::OpenAPI::fromJsonValue(m_catalog_price, json[QString("catalog_price")]);
    m_catalog_price_isSet = !json[QString("catalog_price")].isNull() && m_catalog_price_isValid;

    m_catalog_price_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_catalog_price_incl_tax, json[QString("catalog_price_incl_tax")]);
    m_catalog_price_incl_tax_isSet = !json[QString("catalog_price_incl_tax")].isNull() && m_catalog_price_incl_tax_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;
}

QString OAINegotiable_quote_data_negotiable_quote_item_totals_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINegotiable_quote_data_negotiable_quote_item_totals_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_base_cart_price_isSet) {
        obj.insert(QString("base_cart_price"), ::OpenAPI::toJsonValue(m_base_cart_price));
    }
    if (m_base_cart_price_incl_tax_isSet) {
        obj.insert(QString("base_cart_price_incl_tax"), ::OpenAPI::toJsonValue(m_base_cart_price_incl_tax));
    }
    if (m_base_cart_tax_isSet) {
        obj.insert(QString("base_cart_tax"), ::OpenAPI::toJsonValue(m_base_cart_tax));
    }
    if (m_base_catalog_price_isSet) {
        obj.insert(QString("base_catalog_price"), ::OpenAPI::toJsonValue(m_base_catalog_price));
    }
    if (m_base_catalog_price_incl_tax_isSet) {
        obj.insert(QString("base_catalog_price_incl_tax"), ::OpenAPI::toJsonValue(m_base_catalog_price_incl_tax));
    }
    if (m_cart_price_isSet) {
        obj.insert(QString("cart_price"), ::OpenAPI::toJsonValue(m_cart_price));
    }
    if (m_cart_price_incl_tax_isSet) {
        obj.insert(QString("cart_price_incl_tax"), ::OpenAPI::toJsonValue(m_cart_price_incl_tax));
    }
    if (m_cart_tax_isSet) {
        obj.insert(QString("cart_tax"), ::OpenAPI::toJsonValue(m_cart_tax));
    }
    if (m_catalog_price_isSet) {
        obj.insert(QString("catalog_price"), ::OpenAPI::toJsonValue(m_catalog_price));
    }
    if (m_catalog_price_incl_tax_isSet) {
        obj.insert(QString("catalog_price_incl_tax"), ::OpenAPI::toJsonValue(m_catalog_price_incl_tax));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    return obj;
}

double OAINegotiable_quote_data_negotiable_quote_item_totals_interface::getBaseCartPrice() const {
    return m_base_cart_price;
}
void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::setBaseCartPrice(const double &base_cart_price) {
    m_base_cart_price = base_cart_price;
    m_base_cart_price_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_base_cart_price_Set() const{
    return m_base_cart_price_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_base_cart_price_Valid() const{
    return m_base_cart_price_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_item_totals_interface::getBaseCartPriceInclTax() const {
    return m_base_cart_price_incl_tax;
}
void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::setBaseCartPriceInclTax(const double &base_cart_price_incl_tax) {
    m_base_cart_price_incl_tax = base_cart_price_incl_tax;
    m_base_cart_price_incl_tax_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_base_cart_price_incl_tax_Set() const{
    return m_base_cart_price_incl_tax_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_base_cart_price_incl_tax_Valid() const{
    return m_base_cart_price_incl_tax_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_item_totals_interface::getBaseCartTax() const {
    return m_base_cart_tax;
}
void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::setBaseCartTax(const double &base_cart_tax) {
    m_base_cart_tax = base_cart_tax;
    m_base_cart_tax_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_base_cart_tax_Set() const{
    return m_base_cart_tax_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_base_cart_tax_Valid() const{
    return m_base_cart_tax_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_item_totals_interface::getBaseCatalogPrice() const {
    return m_base_catalog_price;
}
void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::setBaseCatalogPrice(const double &base_catalog_price) {
    m_base_catalog_price = base_catalog_price;
    m_base_catalog_price_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_base_catalog_price_Set() const{
    return m_base_catalog_price_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_base_catalog_price_Valid() const{
    return m_base_catalog_price_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_item_totals_interface::getBaseCatalogPriceInclTax() const {
    return m_base_catalog_price_incl_tax;
}
void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::setBaseCatalogPriceInclTax(const double &base_catalog_price_incl_tax) {
    m_base_catalog_price_incl_tax = base_catalog_price_incl_tax;
    m_base_catalog_price_incl_tax_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_base_catalog_price_incl_tax_Set() const{
    return m_base_catalog_price_incl_tax_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_base_catalog_price_incl_tax_Valid() const{
    return m_base_catalog_price_incl_tax_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_item_totals_interface::getCartPrice() const {
    return m_cart_price;
}
void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::setCartPrice(const double &cart_price) {
    m_cart_price = cart_price;
    m_cart_price_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_cart_price_Set() const{
    return m_cart_price_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_cart_price_Valid() const{
    return m_cart_price_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_item_totals_interface::getCartPriceInclTax() const {
    return m_cart_price_incl_tax;
}
void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::setCartPriceInclTax(const double &cart_price_incl_tax) {
    m_cart_price_incl_tax = cart_price_incl_tax;
    m_cart_price_incl_tax_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_cart_price_incl_tax_Set() const{
    return m_cart_price_incl_tax_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_cart_price_incl_tax_Valid() const{
    return m_cart_price_incl_tax_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_item_totals_interface::getCartTax() const {
    return m_cart_tax;
}
void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::setCartTax(const double &cart_tax) {
    m_cart_tax = cart_tax;
    m_cart_tax_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_cart_tax_Set() const{
    return m_cart_tax_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_cart_tax_Valid() const{
    return m_cart_tax_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_item_totals_interface::getCatalogPrice() const {
    return m_catalog_price;
}
void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::setCatalogPrice(const double &catalog_price) {
    m_catalog_price = catalog_price;
    m_catalog_price_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_catalog_price_Set() const{
    return m_catalog_price_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_catalog_price_Valid() const{
    return m_catalog_price_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_item_totals_interface::getCatalogPriceInclTax() const {
    return m_catalog_price_incl_tax;
}
void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::setCatalogPriceInclTax(const double &catalog_price_incl_tax) {
    m_catalog_price_incl_tax = catalog_price_incl_tax;
    m_catalog_price_incl_tax_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_catalog_price_incl_tax_Set() const{
    return m_catalog_price_incl_tax_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_catalog_price_incl_tax_Valid() const{
    return m_catalog_price_incl_tax_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_item_totals_interface::getCost() const {
    return m_cost;
}
void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_cost_Valid() const{
    return m_cost_isValid;
}

OAIObject OAINegotiable_quote_data_negotiable_quote_item_totals_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAINegotiable_quote_data_negotiable_quote_item_totals_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_cart_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_cart_price_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_cart_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_catalog_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_catalog_price_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cart_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cart_price_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cart_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_price_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINegotiable_quote_data_negotiable_quote_item_totals_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_cart_price_isValid && m_base_cart_price_incl_tax_isValid && m_base_cart_tax_isValid && m_base_catalog_price_isValid && m_base_catalog_price_incl_tax_isValid && m_cart_price_isValid && m_cart_price_incl_tax_isValid && m_cart_tax_isValid && m_catalog_price_isValid && m_catalog_price_incl_tax_isValid && m_cost_isValid && true;
}

} // namespace OpenAPI
