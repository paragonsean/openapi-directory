/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICatalog_data_product_custom_option_interface.h
 *
 * 
 */

#ifndef OAICatalog_data_product_custom_option_interface_H
#define OAICatalog_data_product_custom_option_interface_H

#include <QJsonObject>

#include "OAICatalog_data_product_custom_option_extension_interface.h"
#include "OAICatalog_data_product_custom_option_values_interface.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICatalog_data_product_custom_option_extension_interface;
class OAICatalog_data_product_custom_option_values_interface;

class OAICatalog_data_product_custom_option_interface : public OAIObject {
public:
    OAICatalog_data_product_custom_option_interface();
    OAICatalog_data_product_custom_option_interface(QString json);
    ~OAICatalog_data_product_custom_option_interface() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICatalog_data_product_custom_option_extension_interface getExtensionAttributes() const;
    void setExtensionAttributes(const OAICatalog_data_product_custom_option_extension_interface &extension_attributes);
    bool is_extension_attributes_Set() const;
    bool is_extension_attributes_Valid() const;

    QString getFileExtension() const;
    void setFileExtension(const QString &file_extension);
    bool is_file_extension_Set() const;
    bool is_file_extension_Valid() const;

    qint32 getImageSizeX() const;
    void setImageSizeX(const qint32 &image_size_x);
    bool is_image_size_x_Set() const;
    bool is_image_size_x_Valid() const;

    qint32 getImageSizeY() const;
    void setImageSizeY(const qint32 &image_size_y);
    bool is_image_size_y_Set() const;
    bool is_image_size_y_Valid() const;

    bool isIsRequire() const;
    void setIsRequire(const bool &is_require);
    bool is_is_require_Set() const;
    bool is_is_require_Valid() const;

    qint32 getMaxCharacters() const;
    void setMaxCharacters(const qint32 &max_characters);
    bool is_max_characters_Set() const;
    bool is_max_characters_Valid() const;

    qint32 getOptionId() const;
    void setOptionId(const qint32 &option_id);
    bool is_option_id_Set() const;
    bool is_option_id_Valid() const;

    double getPrice() const;
    void setPrice(const double &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    QString getPriceType() const;
    void setPriceType(const QString &price_type);
    bool is_price_type_Set() const;
    bool is_price_type_Valid() const;

    QString getProductSku() const;
    void setProductSku(const QString &product_sku);
    bool is_product_sku_Set() const;
    bool is_product_sku_Valid() const;

    QString getSku() const;
    void setSku(const QString &sku);
    bool is_sku_Set() const;
    bool is_sku_Valid() const;

    qint32 getSortOrder() const;
    void setSortOrder(const qint32 &sort_order);
    bool is_sort_order_Set() const;
    bool is_sort_order_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QList<OAICatalog_data_product_custom_option_values_interface> getValues() const;
    void setValues(const QList<OAICatalog_data_product_custom_option_values_interface> &values);
    bool is_values_Set() const;
    bool is_values_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICatalog_data_product_custom_option_extension_interface m_extension_attributes;
    bool m_extension_attributes_isSet;
    bool m_extension_attributes_isValid;

    QString m_file_extension;
    bool m_file_extension_isSet;
    bool m_file_extension_isValid;

    qint32 m_image_size_x;
    bool m_image_size_x_isSet;
    bool m_image_size_x_isValid;

    qint32 m_image_size_y;
    bool m_image_size_y_isSet;
    bool m_image_size_y_isValid;

    bool m_is_require;
    bool m_is_require_isSet;
    bool m_is_require_isValid;

    qint32 m_max_characters;
    bool m_max_characters_isSet;
    bool m_max_characters_isValid;

    qint32 m_option_id;
    bool m_option_id_isSet;
    bool m_option_id_isValid;

    double m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    QString m_price_type;
    bool m_price_type_isSet;
    bool m_price_type_isValid;

    QString m_product_sku;
    bool m_product_sku_isSet;
    bool m_product_sku_isValid;

    QString m_sku;
    bool m_sku_isSet;
    bool m_sku_isValid;

    qint32 m_sort_order;
    bool m_sort_order_isSet;
    bool m_sort_order_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QList<OAICatalog_data_product_custom_option_values_interface> m_values;
    bool m_values_isSet;
    bool m_values_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICatalog_data_product_custom_option_interface)

#endif // OAICatalog_data_product_custom_option_interface_H
