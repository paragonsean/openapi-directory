/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISales_data_order_item_extension_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISales_data_order_item_extension_interface::OAISales_data_order_item_extension_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISales_data_order_item_extension_interface::OAISales_data_order_item_extension_interface() {
    this->initializeModel();
}

OAISales_data_order_item_extension_interface::~OAISales_data_order_item_extension_interface() {}

void OAISales_data_order_item_extension_interface::initializeModel() {

    m_gift_message_isSet = false;
    m_gift_message_isValid = false;

    m_gw_base_price_isSet = false;
    m_gw_base_price_isValid = false;

    m_gw_base_price_invoiced_isSet = false;
    m_gw_base_price_invoiced_isValid = false;

    m_gw_base_price_refunded_isSet = false;
    m_gw_base_price_refunded_isValid = false;

    m_gw_base_tax_amount_isSet = false;
    m_gw_base_tax_amount_isValid = false;

    m_gw_base_tax_amount_invoiced_isSet = false;
    m_gw_base_tax_amount_invoiced_isValid = false;

    m_gw_base_tax_amount_refunded_isSet = false;
    m_gw_base_tax_amount_refunded_isValid = false;

    m_gw_id_isSet = false;
    m_gw_id_isValid = false;

    m_gw_price_isSet = false;
    m_gw_price_isValid = false;

    m_gw_price_invoiced_isSet = false;
    m_gw_price_invoiced_isValid = false;

    m_gw_price_refunded_isSet = false;
    m_gw_price_refunded_isValid = false;

    m_gw_tax_amount_isSet = false;
    m_gw_tax_amount_isValid = false;

    m_gw_tax_amount_invoiced_isSet = false;
    m_gw_tax_amount_invoiced_isValid = false;

    m_gw_tax_amount_refunded_isSet = false;
    m_gw_tax_amount_refunded_isValid = false;

    m_invoice_text_codes_isSet = false;
    m_invoice_text_codes_isValid = false;

    m_tax_codes_isSet = false;
    m_tax_codes_isValid = false;

    m_vertex_tax_codes_isSet = false;
    m_vertex_tax_codes_isValid = false;
}

void OAISales_data_order_item_extension_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISales_data_order_item_extension_interface::fromJsonObject(QJsonObject json) {

    m_gift_message_isValid = ::OpenAPI::fromJsonValue(m_gift_message, json[QString("gift_message")]);
    m_gift_message_isSet = !json[QString("gift_message")].isNull() && m_gift_message_isValid;

    m_gw_base_price_isValid = ::OpenAPI::fromJsonValue(m_gw_base_price, json[QString("gw_base_price")]);
    m_gw_base_price_isSet = !json[QString("gw_base_price")].isNull() && m_gw_base_price_isValid;

    m_gw_base_price_invoiced_isValid = ::OpenAPI::fromJsonValue(m_gw_base_price_invoiced, json[QString("gw_base_price_invoiced")]);
    m_gw_base_price_invoiced_isSet = !json[QString("gw_base_price_invoiced")].isNull() && m_gw_base_price_invoiced_isValid;

    m_gw_base_price_refunded_isValid = ::OpenAPI::fromJsonValue(m_gw_base_price_refunded, json[QString("gw_base_price_refunded")]);
    m_gw_base_price_refunded_isSet = !json[QString("gw_base_price_refunded")].isNull() && m_gw_base_price_refunded_isValid;

    m_gw_base_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_gw_base_tax_amount, json[QString("gw_base_tax_amount")]);
    m_gw_base_tax_amount_isSet = !json[QString("gw_base_tax_amount")].isNull() && m_gw_base_tax_amount_isValid;

    m_gw_base_tax_amount_invoiced_isValid = ::OpenAPI::fromJsonValue(m_gw_base_tax_amount_invoiced, json[QString("gw_base_tax_amount_invoiced")]);
    m_gw_base_tax_amount_invoiced_isSet = !json[QString("gw_base_tax_amount_invoiced")].isNull() && m_gw_base_tax_amount_invoiced_isValid;

    m_gw_base_tax_amount_refunded_isValid = ::OpenAPI::fromJsonValue(m_gw_base_tax_amount_refunded, json[QString("gw_base_tax_amount_refunded")]);
    m_gw_base_tax_amount_refunded_isSet = !json[QString("gw_base_tax_amount_refunded")].isNull() && m_gw_base_tax_amount_refunded_isValid;

    m_gw_id_isValid = ::OpenAPI::fromJsonValue(m_gw_id, json[QString("gw_id")]);
    m_gw_id_isSet = !json[QString("gw_id")].isNull() && m_gw_id_isValid;

    m_gw_price_isValid = ::OpenAPI::fromJsonValue(m_gw_price, json[QString("gw_price")]);
    m_gw_price_isSet = !json[QString("gw_price")].isNull() && m_gw_price_isValid;

    m_gw_price_invoiced_isValid = ::OpenAPI::fromJsonValue(m_gw_price_invoiced, json[QString("gw_price_invoiced")]);
    m_gw_price_invoiced_isSet = !json[QString("gw_price_invoiced")].isNull() && m_gw_price_invoiced_isValid;

    m_gw_price_refunded_isValid = ::OpenAPI::fromJsonValue(m_gw_price_refunded, json[QString("gw_price_refunded")]);
    m_gw_price_refunded_isSet = !json[QString("gw_price_refunded")].isNull() && m_gw_price_refunded_isValid;

    m_gw_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_gw_tax_amount, json[QString("gw_tax_amount")]);
    m_gw_tax_amount_isSet = !json[QString("gw_tax_amount")].isNull() && m_gw_tax_amount_isValid;

    m_gw_tax_amount_invoiced_isValid = ::OpenAPI::fromJsonValue(m_gw_tax_amount_invoiced, json[QString("gw_tax_amount_invoiced")]);
    m_gw_tax_amount_invoiced_isSet = !json[QString("gw_tax_amount_invoiced")].isNull() && m_gw_tax_amount_invoiced_isValid;

    m_gw_tax_amount_refunded_isValid = ::OpenAPI::fromJsonValue(m_gw_tax_amount_refunded, json[QString("gw_tax_amount_refunded")]);
    m_gw_tax_amount_refunded_isSet = !json[QString("gw_tax_amount_refunded")].isNull() && m_gw_tax_amount_refunded_isValid;

    m_invoice_text_codes_isValid = ::OpenAPI::fromJsonValue(m_invoice_text_codes, json[QString("invoice_text_codes")]);
    m_invoice_text_codes_isSet = !json[QString("invoice_text_codes")].isNull() && m_invoice_text_codes_isValid;

    m_tax_codes_isValid = ::OpenAPI::fromJsonValue(m_tax_codes, json[QString("tax_codes")]);
    m_tax_codes_isSet = !json[QString("tax_codes")].isNull() && m_tax_codes_isValid;

    m_vertex_tax_codes_isValid = ::OpenAPI::fromJsonValue(m_vertex_tax_codes, json[QString("vertex_tax_codes")]);
    m_vertex_tax_codes_isSet = !json[QString("vertex_tax_codes")].isNull() && m_vertex_tax_codes_isValid;
}

QString OAISales_data_order_item_extension_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISales_data_order_item_extension_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_gift_message.isSet()) {
        obj.insert(QString("gift_message"), ::OpenAPI::toJsonValue(m_gift_message));
    }
    if (m_gw_base_price_isSet) {
        obj.insert(QString("gw_base_price"), ::OpenAPI::toJsonValue(m_gw_base_price));
    }
    if (m_gw_base_price_invoiced_isSet) {
        obj.insert(QString("gw_base_price_invoiced"), ::OpenAPI::toJsonValue(m_gw_base_price_invoiced));
    }
    if (m_gw_base_price_refunded_isSet) {
        obj.insert(QString("gw_base_price_refunded"), ::OpenAPI::toJsonValue(m_gw_base_price_refunded));
    }
    if (m_gw_base_tax_amount_isSet) {
        obj.insert(QString("gw_base_tax_amount"), ::OpenAPI::toJsonValue(m_gw_base_tax_amount));
    }
    if (m_gw_base_tax_amount_invoiced_isSet) {
        obj.insert(QString("gw_base_tax_amount_invoiced"), ::OpenAPI::toJsonValue(m_gw_base_tax_amount_invoiced));
    }
    if (m_gw_base_tax_amount_refunded_isSet) {
        obj.insert(QString("gw_base_tax_amount_refunded"), ::OpenAPI::toJsonValue(m_gw_base_tax_amount_refunded));
    }
    if (m_gw_id_isSet) {
        obj.insert(QString("gw_id"), ::OpenAPI::toJsonValue(m_gw_id));
    }
    if (m_gw_price_isSet) {
        obj.insert(QString("gw_price"), ::OpenAPI::toJsonValue(m_gw_price));
    }
    if (m_gw_price_invoiced_isSet) {
        obj.insert(QString("gw_price_invoiced"), ::OpenAPI::toJsonValue(m_gw_price_invoiced));
    }
    if (m_gw_price_refunded_isSet) {
        obj.insert(QString("gw_price_refunded"), ::OpenAPI::toJsonValue(m_gw_price_refunded));
    }
    if (m_gw_tax_amount_isSet) {
        obj.insert(QString("gw_tax_amount"), ::OpenAPI::toJsonValue(m_gw_tax_amount));
    }
    if (m_gw_tax_amount_invoiced_isSet) {
        obj.insert(QString("gw_tax_amount_invoiced"), ::OpenAPI::toJsonValue(m_gw_tax_amount_invoiced));
    }
    if (m_gw_tax_amount_refunded_isSet) {
        obj.insert(QString("gw_tax_amount_refunded"), ::OpenAPI::toJsonValue(m_gw_tax_amount_refunded));
    }
    if (m_invoice_text_codes.size() > 0) {
        obj.insert(QString("invoice_text_codes"), ::OpenAPI::toJsonValue(m_invoice_text_codes));
    }
    if (m_tax_codes.size() > 0) {
        obj.insert(QString("tax_codes"), ::OpenAPI::toJsonValue(m_tax_codes));
    }
    if (m_vertex_tax_codes.size() > 0) {
        obj.insert(QString("vertex_tax_codes"), ::OpenAPI::toJsonValue(m_vertex_tax_codes));
    }
    return obj;
}

OAIGift_message_data_message_interface OAISales_data_order_item_extension_interface::getGiftMessage() const {
    return m_gift_message;
}
void OAISales_data_order_item_extension_interface::setGiftMessage(const OAIGift_message_data_message_interface &gift_message) {
    m_gift_message = gift_message;
    m_gift_message_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_gift_message_Set() const{
    return m_gift_message_isSet;
}

bool OAISales_data_order_item_extension_interface::is_gift_message_Valid() const{
    return m_gift_message_isValid;
}

QString OAISales_data_order_item_extension_interface::getGwBasePrice() const {
    return m_gw_base_price;
}
void OAISales_data_order_item_extension_interface::setGwBasePrice(const QString &gw_base_price) {
    m_gw_base_price = gw_base_price;
    m_gw_base_price_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_gw_base_price_Set() const{
    return m_gw_base_price_isSet;
}

bool OAISales_data_order_item_extension_interface::is_gw_base_price_Valid() const{
    return m_gw_base_price_isValid;
}

QString OAISales_data_order_item_extension_interface::getGwBasePriceInvoiced() const {
    return m_gw_base_price_invoiced;
}
void OAISales_data_order_item_extension_interface::setGwBasePriceInvoiced(const QString &gw_base_price_invoiced) {
    m_gw_base_price_invoiced = gw_base_price_invoiced;
    m_gw_base_price_invoiced_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_gw_base_price_invoiced_Set() const{
    return m_gw_base_price_invoiced_isSet;
}

bool OAISales_data_order_item_extension_interface::is_gw_base_price_invoiced_Valid() const{
    return m_gw_base_price_invoiced_isValid;
}

QString OAISales_data_order_item_extension_interface::getGwBasePriceRefunded() const {
    return m_gw_base_price_refunded;
}
void OAISales_data_order_item_extension_interface::setGwBasePriceRefunded(const QString &gw_base_price_refunded) {
    m_gw_base_price_refunded = gw_base_price_refunded;
    m_gw_base_price_refunded_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_gw_base_price_refunded_Set() const{
    return m_gw_base_price_refunded_isSet;
}

bool OAISales_data_order_item_extension_interface::is_gw_base_price_refunded_Valid() const{
    return m_gw_base_price_refunded_isValid;
}

QString OAISales_data_order_item_extension_interface::getGwBaseTaxAmount() const {
    return m_gw_base_tax_amount;
}
void OAISales_data_order_item_extension_interface::setGwBaseTaxAmount(const QString &gw_base_tax_amount) {
    m_gw_base_tax_amount = gw_base_tax_amount;
    m_gw_base_tax_amount_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_gw_base_tax_amount_Set() const{
    return m_gw_base_tax_amount_isSet;
}

bool OAISales_data_order_item_extension_interface::is_gw_base_tax_amount_Valid() const{
    return m_gw_base_tax_amount_isValid;
}

QString OAISales_data_order_item_extension_interface::getGwBaseTaxAmountInvoiced() const {
    return m_gw_base_tax_amount_invoiced;
}
void OAISales_data_order_item_extension_interface::setGwBaseTaxAmountInvoiced(const QString &gw_base_tax_amount_invoiced) {
    m_gw_base_tax_amount_invoiced = gw_base_tax_amount_invoiced;
    m_gw_base_tax_amount_invoiced_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_gw_base_tax_amount_invoiced_Set() const{
    return m_gw_base_tax_amount_invoiced_isSet;
}

bool OAISales_data_order_item_extension_interface::is_gw_base_tax_amount_invoiced_Valid() const{
    return m_gw_base_tax_amount_invoiced_isValid;
}

QString OAISales_data_order_item_extension_interface::getGwBaseTaxAmountRefunded() const {
    return m_gw_base_tax_amount_refunded;
}
void OAISales_data_order_item_extension_interface::setGwBaseTaxAmountRefunded(const QString &gw_base_tax_amount_refunded) {
    m_gw_base_tax_amount_refunded = gw_base_tax_amount_refunded;
    m_gw_base_tax_amount_refunded_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_gw_base_tax_amount_refunded_Set() const{
    return m_gw_base_tax_amount_refunded_isSet;
}

bool OAISales_data_order_item_extension_interface::is_gw_base_tax_amount_refunded_Valid() const{
    return m_gw_base_tax_amount_refunded_isValid;
}

QString OAISales_data_order_item_extension_interface::getGwId() const {
    return m_gw_id;
}
void OAISales_data_order_item_extension_interface::setGwId(const QString &gw_id) {
    m_gw_id = gw_id;
    m_gw_id_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_gw_id_Set() const{
    return m_gw_id_isSet;
}

bool OAISales_data_order_item_extension_interface::is_gw_id_Valid() const{
    return m_gw_id_isValid;
}

QString OAISales_data_order_item_extension_interface::getGwPrice() const {
    return m_gw_price;
}
void OAISales_data_order_item_extension_interface::setGwPrice(const QString &gw_price) {
    m_gw_price = gw_price;
    m_gw_price_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_gw_price_Set() const{
    return m_gw_price_isSet;
}

bool OAISales_data_order_item_extension_interface::is_gw_price_Valid() const{
    return m_gw_price_isValid;
}

QString OAISales_data_order_item_extension_interface::getGwPriceInvoiced() const {
    return m_gw_price_invoiced;
}
void OAISales_data_order_item_extension_interface::setGwPriceInvoiced(const QString &gw_price_invoiced) {
    m_gw_price_invoiced = gw_price_invoiced;
    m_gw_price_invoiced_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_gw_price_invoiced_Set() const{
    return m_gw_price_invoiced_isSet;
}

bool OAISales_data_order_item_extension_interface::is_gw_price_invoiced_Valid() const{
    return m_gw_price_invoiced_isValid;
}

QString OAISales_data_order_item_extension_interface::getGwPriceRefunded() const {
    return m_gw_price_refunded;
}
void OAISales_data_order_item_extension_interface::setGwPriceRefunded(const QString &gw_price_refunded) {
    m_gw_price_refunded = gw_price_refunded;
    m_gw_price_refunded_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_gw_price_refunded_Set() const{
    return m_gw_price_refunded_isSet;
}

bool OAISales_data_order_item_extension_interface::is_gw_price_refunded_Valid() const{
    return m_gw_price_refunded_isValid;
}

QString OAISales_data_order_item_extension_interface::getGwTaxAmount() const {
    return m_gw_tax_amount;
}
void OAISales_data_order_item_extension_interface::setGwTaxAmount(const QString &gw_tax_amount) {
    m_gw_tax_amount = gw_tax_amount;
    m_gw_tax_amount_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_gw_tax_amount_Set() const{
    return m_gw_tax_amount_isSet;
}

bool OAISales_data_order_item_extension_interface::is_gw_tax_amount_Valid() const{
    return m_gw_tax_amount_isValid;
}

QString OAISales_data_order_item_extension_interface::getGwTaxAmountInvoiced() const {
    return m_gw_tax_amount_invoiced;
}
void OAISales_data_order_item_extension_interface::setGwTaxAmountInvoiced(const QString &gw_tax_amount_invoiced) {
    m_gw_tax_amount_invoiced = gw_tax_amount_invoiced;
    m_gw_tax_amount_invoiced_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_gw_tax_amount_invoiced_Set() const{
    return m_gw_tax_amount_invoiced_isSet;
}

bool OAISales_data_order_item_extension_interface::is_gw_tax_amount_invoiced_Valid() const{
    return m_gw_tax_amount_invoiced_isValid;
}

QString OAISales_data_order_item_extension_interface::getGwTaxAmountRefunded() const {
    return m_gw_tax_amount_refunded;
}
void OAISales_data_order_item_extension_interface::setGwTaxAmountRefunded(const QString &gw_tax_amount_refunded) {
    m_gw_tax_amount_refunded = gw_tax_amount_refunded;
    m_gw_tax_amount_refunded_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_gw_tax_amount_refunded_Set() const{
    return m_gw_tax_amount_refunded_isSet;
}

bool OAISales_data_order_item_extension_interface::is_gw_tax_amount_refunded_Valid() const{
    return m_gw_tax_amount_refunded_isValid;
}

QList<QString> OAISales_data_order_item_extension_interface::getInvoiceTextCodes() const {
    return m_invoice_text_codes;
}
void OAISales_data_order_item_extension_interface::setInvoiceTextCodes(const QList<QString> &invoice_text_codes) {
    m_invoice_text_codes = invoice_text_codes;
    m_invoice_text_codes_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_invoice_text_codes_Set() const{
    return m_invoice_text_codes_isSet;
}

bool OAISales_data_order_item_extension_interface::is_invoice_text_codes_Valid() const{
    return m_invoice_text_codes_isValid;
}

QList<QString> OAISales_data_order_item_extension_interface::getTaxCodes() const {
    return m_tax_codes;
}
void OAISales_data_order_item_extension_interface::setTaxCodes(const QList<QString> &tax_codes) {
    m_tax_codes = tax_codes;
    m_tax_codes_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_tax_codes_Set() const{
    return m_tax_codes_isSet;
}

bool OAISales_data_order_item_extension_interface::is_tax_codes_Valid() const{
    return m_tax_codes_isValid;
}

QList<QString> OAISales_data_order_item_extension_interface::getVertexTaxCodes() const {
    return m_vertex_tax_codes;
}
void OAISales_data_order_item_extension_interface::setVertexTaxCodes(const QList<QString> &vertex_tax_codes) {
    m_vertex_tax_codes = vertex_tax_codes;
    m_vertex_tax_codes_isSet = true;
}

bool OAISales_data_order_item_extension_interface::is_vertex_tax_codes_Set() const{
    return m_vertex_tax_codes_isSet;
}

bool OAISales_data_order_item_extension_interface::is_vertex_tax_codes_Valid() const{
    return m_vertex_tax_codes_isValid;
}

bool OAISales_data_order_item_extension_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gift_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_base_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_base_price_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_base_price_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_base_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_base_tax_amount_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_base_tax_amount_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_price_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_price_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_tax_amount_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gw_tax_amount_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_text_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertex_tax_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISales_data_order_item_extension_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
