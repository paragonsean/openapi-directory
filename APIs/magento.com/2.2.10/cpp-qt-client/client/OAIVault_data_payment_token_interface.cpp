/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVault_data_payment_token_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVault_data_payment_token_interface::OAIVault_data_payment_token_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVault_data_payment_token_interface::OAIVault_data_payment_token_interface() {
    this->initializeModel();
}

OAIVault_data_payment_token_interface::~OAIVault_data_payment_token_interface() {}

void OAIVault_data_payment_token_interface::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_gateway_token_isSet = false;
    m_gateway_token_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_visible_isSet = false;
    m_is_visible_isValid = false;

    m_payment_method_code_isSet = false;
    m_payment_method_code_isValid = false;

    m_public_hash_isSet = false;
    m_public_hash_isValid = false;

    m_token_details_isSet = false;
    m_token_details_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIVault_data_payment_token_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVault_data_payment_token_interface::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_gateway_token_isValid = ::OpenAPI::fromJsonValue(m_gateway_token, json[QString("gateway_token")]);
    m_gateway_token_isSet = !json[QString("gateway_token")].isNull() && m_gateway_token_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_is_visible_isValid = ::OpenAPI::fromJsonValue(m_is_visible, json[QString("is_visible")]);
    m_is_visible_isSet = !json[QString("is_visible")].isNull() && m_is_visible_isValid;

    m_payment_method_code_isValid = ::OpenAPI::fromJsonValue(m_payment_method_code, json[QString("payment_method_code")]);
    m_payment_method_code_isSet = !json[QString("payment_method_code")].isNull() && m_payment_method_code_isValid;

    m_public_hash_isValid = ::OpenAPI::fromJsonValue(m_public_hash, json[QString("public_hash")]);
    m_public_hash_isSet = !json[QString("public_hash")].isNull() && m_public_hash_isValid;

    m_token_details_isValid = ::OpenAPI::fromJsonValue(m_token_details, json[QString("token_details")]);
    m_token_details_isSet = !json[QString("token_details")].isNull() && m_token_details_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIVault_data_payment_token_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVault_data_payment_token_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_gateway_token_isSet) {
        obj.insert(QString("gateway_token"), ::OpenAPI::toJsonValue(m_gateway_token));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_visible_isSet) {
        obj.insert(QString("is_visible"), ::OpenAPI::toJsonValue(m_is_visible));
    }
    if (m_payment_method_code_isSet) {
        obj.insert(QString("payment_method_code"), ::OpenAPI::toJsonValue(m_payment_method_code));
    }
    if (m_public_hash_isSet) {
        obj.insert(QString("public_hash"), ::OpenAPI::toJsonValue(m_public_hash));
    }
    if (m_token_details_isSet) {
        obj.insert(QString("token_details"), ::OpenAPI::toJsonValue(m_token_details));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIVault_data_payment_token_interface::getCreatedAt() const {
    return m_created_at;
}
void OAIVault_data_payment_token_interface::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIVault_data_payment_token_interface::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIVault_data_payment_token_interface::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIVault_data_payment_token_interface::getCustomerId() const {
    return m_customer_id;
}
void OAIVault_data_payment_token_interface::setCustomerId(const qint32 &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIVault_data_payment_token_interface::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIVault_data_payment_token_interface::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

qint32 OAIVault_data_payment_token_interface::getEntityId() const {
    return m_entity_id;
}
void OAIVault_data_payment_token_interface::setEntityId(const qint32 &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIVault_data_payment_token_interface::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIVault_data_payment_token_interface::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIVault_data_payment_token_interface::getExpiresAt() const {
    return m_expires_at;
}
void OAIVault_data_payment_token_interface::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIVault_data_payment_token_interface::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIVault_data_payment_token_interface::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIVault_data_payment_token_interface::getGatewayToken() const {
    return m_gateway_token;
}
void OAIVault_data_payment_token_interface::setGatewayToken(const QString &gateway_token) {
    m_gateway_token = gateway_token;
    m_gateway_token_isSet = true;
}

bool OAIVault_data_payment_token_interface::is_gateway_token_Set() const{
    return m_gateway_token_isSet;
}

bool OAIVault_data_payment_token_interface::is_gateway_token_Valid() const{
    return m_gateway_token_isValid;
}

bool OAIVault_data_payment_token_interface::isIsActive() const {
    return m_is_active;
}
void OAIVault_data_payment_token_interface::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIVault_data_payment_token_interface::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIVault_data_payment_token_interface::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIVault_data_payment_token_interface::isIsVisible() const {
    return m_is_visible;
}
void OAIVault_data_payment_token_interface::setIsVisible(const bool &is_visible) {
    m_is_visible = is_visible;
    m_is_visible_isSet = true;
}

bool OAIVault_data_payment_token_interface::is_is_visible_Set() const{
    return m_is_visible_isSet;
}

bool OAIVault_data_payment_token_interface::is_is_visible_Valid() const{
    return m_is_visible_isValid;
}

QString OAIVault_data_payment_token_interface::getPaymentMethodCode() const {
    return m_payment_method_code;
}
void OAIVault_data_payment_token_interface::setPaymentMethodCode(const QString &payment_method_code) {
    m_payment_method_code = payment_method_code;
    m_payment_method_code_isSet = true;
}

bool OAIVault_data_payment_token_interface::is_payment_method_code_Set() const{
    return m_payment_method_code_isSet;
}

bool OAIVault_data_payment_token_interface::is_payment_method_code_Valid() const{
    return m_payment_method_code_isValid;
}

QString OAIVault_data_payment_token_interface::getPublicHash() const {
    return m_public_hash;
}
void OAIVault_data_payment_token_interface::setPublicHash(const QString &public_hash) {
    m_public_hash = public_hash;
    m_public_hash_isSet = true;
}

bool OAIVault_data_payment_token_interface::is_public_hash_Set() const{
    return m_public_hash_isSet;
}

bool OAIVault_data_payment_token_interface::is_public_hash_Valid() const{
    return m_public_hash_isValid;
}

QString OAIVault_data_payment_token_interface::getTokenDetails() const {
    return m_token_details;
}
void OAIVault_data_payment_token_interface::setTokenDetails(const QString &token_details) {
    m_token_details = token_details;
    m_token_details_isSet = true;
}

bool OAIVault_data_payment_token_interface::is_token_details_Set() const{
    return m_token_details_isSet;
}

bool OAIVault_data_payment_token_interface::is_token_details_Valid() const{
    return m_token_details_isValid;
}

QString OAIVault_data_payment_token_interface::getType() const {
    return m_type;
}
void OAIVault_data_payment_token_interface::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVault_data_payment_token_interface::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVault_data_payment_token_interface::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIVault_data_payment_token_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVault_data_payment_token_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gateway_token_isValid && m_is_active_isValid && m_is_visible_isValid && m_payment_method_code_isValid && m_public_hash_isValid && m_token_details_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
