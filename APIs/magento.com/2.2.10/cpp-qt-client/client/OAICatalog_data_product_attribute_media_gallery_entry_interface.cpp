/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog_data_product_attribute_media_gallery_entry_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog_data_product_attribute_media_gallery_entry_interface::OAICatalog_data_product_attribute_media_gallery_entry_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog_data_product_attribute_media_gallery_entry_interface::OAICatalog_data_product_attribute_media_gallery_entry_interface() {
    this->initializeModel();
}

OAICatalog_data_product_attribute_media_gallery_entry_interface::~OAICatalog_data_product_attribute_media_gallery_entry_interface() {}

void OAICatalog_data_product_attribute_media_gallery_entry_interface::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAICatalog_data_product_attribute_media_gallery_entry_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog_data_product_attribute_media_gallery_entry_interface::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAICatalog_data_product_attribute_media_gallery_entry_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog_data_product_attribute_media_gallery_entry_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

OAIFramework_data_image_content_interface OAICatalog_data_product_attribute_media_gallery_entry_interface::getContent() const {
    return m_content;
}
void OAICatalog_data_product_attribute_media_gallery_entry_interface::setContent(const OAIFramework_data_image_content_interface &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_content_Set() const{
    return m_content_isSet;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_content_Valid() const{
    return m_content_isValid;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::isDisabled() const {
    return m_disabled;
}
void OAICatalog_data_product_attribute_media_gallery_entry_interface::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_disabled_Valid() const{
    return m_disabled_isValid;
}

OAICatalog_data_product_attribute_media_gallery_entry_extension_interface OAICatalog_data_product_attribute_media_gallery_entry_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAICatalog_data_product_attribute_media_gallery_entry_interface::setExtensionAttributes(const OAICatalog_data_product_attribute_media_gallery_entry_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAICatalog_data_product_attribute_media_gallery_entry_interface::getFile() const {
    return m_file;
}
void OAICatalog_data_product_attribute_media_gallery_entry_interface::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_file_Set() const{
    return m_file_isSet;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_file_Valid() const{
    return m_file_isValid;
}

qint32 OAICatalog_data_product_attribute_media_gallery_entry_interface::getId() const {
    return m_id;
}
void OAICatalog_data_product_attribute_media_gallery_entry_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICatalog_data_product_attribute_media_gallery_entry_interface::getLabel() const {
    return m_label;
}
void OAICatalog_data_product_attribute_media_gallery_entry_interface::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_label_Set() const{
    return m_label_isSet;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_label_Valid() const{
    return m_label_isValid;
}

QString OAICatalog_data_product_attribute_media_gallery_entry_interface::getMediaType() const {
    return m_media_type;
}
void OAICatalog_data_product_attribute_media_gallery_entry_interface::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_media_type_Valid() const{
    return m_media_type_isValid;
}

qint32 OAICatalog_data_product_attribute_media_gallery_entry_interface::getPosition() const {
    return m_position;
}
void OAICatalog_data_product_attribute_media_gallery_entry_interface::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_position_Set() const{
    return m_position_isSet;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_position_Valid() const{
    return m_position_isValid;
}

QList<QString> OAICatalog_data_product_attribute_media_gallery_entry_interface::getTypes() const {
    return m_types;
}
void OAICatalog_data_product_attribute_media_gallery_entry_interface::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_types_Set() const{
    return m_types_isSet;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::is_types_Valid() const{
    return m_types_isValid;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog_data_product_attribute_media_gallery_entry_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_disabled_isValid && m_label_isValid && m_media_type_isValid && m_position_isValid && m_types_isValid && true;
}

} // namespace OpenAPI
