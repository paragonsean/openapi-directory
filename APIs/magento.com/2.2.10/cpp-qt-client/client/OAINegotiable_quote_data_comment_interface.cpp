/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINegotiable_quote_data_comment_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINegotiable_quote_data_comment_interface::OAINegotiable_quote_data_comment_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINegotiable_quote_data_comment_interface::OAINegotiable_quote_data_comment_interface() {
    this->initializeModel();
}

OAINegotiable_quote_data_comment_interface::~OAINegotiable_quote_data_comment_interface() {}

void OAINegotiable_quote_data_comment_interface::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_creator_type_isSet = false;
    m_creator_type_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_is_decline_isSet = false;
    m_is_decline_isValid = false;

    m_is_draft_isSet = false;
    m_is_draft_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;
}

void OAINegotiable_quote_data_comment_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINegotiable_quote_data_comment_interface::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creator_id")]);
    m_creator_id_isSet = !json[QString("creator_id")].isNull() && m_creator_id_isValid;

    m_creator_type_isValid = ::OpenAPI::fromJsonValue(m_creator_type, json[QString("creator_type")]);
    m_creator_type_isSet = !json[QString("creator_type")].isNull() && m_creator_type_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_is_decline_isValid = ::OpenAPI::fromJsonValue(m_is_decline, json[QString("is_decline")]);
    m_is_decline_isSet = !json[QString("is_decline")].isNull() && m_is_decline_isValid;

    m_is_draft_isValid = ::OpenAPI::fromJsonValue(m_is_draft, json[QString("is_draft")]);
    m_is_draft_isSet = !json[QString("is_draft")].isNull() && m_is_draft_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;
}

QString OAINegotiable_quote_data_comment_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINegotiable_quote_data_comment_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creator_id"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_creator_type_isSet) {
        obj.insert(QString("creator_type"), ::OpenAPI::toJsonValue(m_creator_type));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_is_decline_isSet) {
        obj.insert(QString("is_decline"), ::OpenAPI::toJsonValue(m_is_decline));
    }
    if (m_is_draft_isSet) {
        obj.insert(QString("is_draft"), ::OpenAPI::toJsonValue(m_is_draft));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    return obj;
}

QList<OAINegotiable_quote_data_comment_attachment_interface> OAINegotiable_quote_data_comment_interface::getAttachments() const {
    return m_attachments;
}
void OAINegotiable_quote_data_comment_interface::setAttachments(const QList<OAINegotiable_quote_data_comment_attachment_interface> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAINegotiable_quote_data_comment_interface::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAINegotiable_quote_data_comment_interface::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAINegotiable_quote_data_comment_interface::getComment() const {
    return m_comment;
}
void OAINegotiable_quote_data_comment_interface::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAINegotiable_quote_data_comment_interface::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAINegotiable_quote_data_comment_interface::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAINegotiable_quote_data_comment_interface::getCreatedAt() const {
    return m_created_at;
}
void OAINegotiable_quote_data_comment_interface::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAINegotiable_quote_data_comment_interface::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAINegotiable_quote_data_comment_interface::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAINegotiable_quote_data_comment_interface::getCreatorId() const {
    return m_creator_id;
}
void OAINegotiable_quote_data_comment_interface::setCreatorId(const qint32 &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAINegotiable_quote_data_comment_interface::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAINegotiable_quote_data_comment_interface::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

qint32 OAINegotiable_quote_data_comment_interface::getCreatorType() const {
    return m_creator_type;
}
void OAINegotiable_quote_data_comment_interface::setCreatorType(const qint32 &creator_type) {
    m_creator_type = creator_type;
    m_creator_type_isSet = true;
}

bool OAINegotiable_quote_data_comment_interface::is_creator_type_Set() const{
    return m_creator_type_isSet;
}

bool OAINegotiable_quote_data_comment_interface::is_creator_type_Valid() const{
    return m_creator_type_isValid;
}

qint32 OAINegotiable_quote_data_comment_interface::getEntityId() const {
    return m_entity_id;
}
void OAINegotiable_quote_data_comment_interface::setEntityId(const qint32 &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAINegotiable_quote_data_comment_interface::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAINegotiable_quote_data_comment_interface::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIObject OAINegotiable_quote_data_comment_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAINegotiable_quote_data_comment_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAINegotiable_quote_data_comment_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAINegotiable_quote_data_comment_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAINegotiable_quote_data_comment_interface::getIsDecline() const {
    return m_is_decline;
}
void OAINegotiable_quote_data_comment_interface::setIsDecline(const qint32 &is_decline) {
    m_is_decline = is_decline;
    m_is_decline_isSet = true;
}

bool OAINegotiable_quote_data_comment_interface::is_is_decline_Set() const{
    return m_is_decline_isSet;
}

bool OAINegotiable_quote_data_comment_interface::is_is_decline_Valid() const{
    return m_is_decline_isValid;
}

qint32 OAINegotiable_quote_data_comment_interface::getIsDraft() const {
    return m_is_draft;
}
void OAINegotiable_quote_data_comment_interface::setIsDraft(const qint32 &is_draft) {
    m_is_draft = is_draft;
    m_is_draft_isSet = true;
}

bool OAINegotiable_quote_data_comment_interface::is_is_draft_Set() const{
    return m_is_draft_isSet;
}

bool OAINegotiable_quote_data_comment_interface::is_is_draft_Valid() const{
    return m_is_draft_isValid;
}

qint32 OAINegotiable_quote_data_comment_interface::getParentId() const {
    return m_parent_id;
}
void OAINegotiable_quote_data_comment_interface::setParentId(const qint32 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAINegotiable_quote_data_comment_interface::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAINegotiable_quote_data_comment_interface::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

bool OAINegotiable_quote_data_comment_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_decline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINegotiable_quote_data_comment_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attachments_isValid && m_comment_isValid && m_created_at_isValid && m_creator_id_isValid && m_creator_type_isValid && m_entity_id_isValid && m_is_decline_isValid && m_is_draft_isValid && m_parent_id_isValid && true;
}

} // namespace OpenAPI
