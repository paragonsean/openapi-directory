/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog_data_product_option_extension_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog_data_product_option_extension_interface::OAICatalog_data_product_option_extension_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog_data_product_option_extension_interface::OAICatalog_data_product_option_extension_interface() {
    this->initializeModel();
}

OAICatalog_data_product_option_extension_interface::~OAICatalog_data_product_option_extension_interface() {}

void OAICatalog_data_product_option_extension_interface::initializeModel() {

    m_bundle_options_isSet = false;
    m_bundle_options_isValid = false;

    m_configurable_item_options_isSet = false;
    m_configurable_item_options_isValid = false;

    m_custom_options_isSet = false;
    m_custom_options_isValid = false;

    m_downloadable_option_isSet = false;
    m_downloadable_option_isValid = false;

    m_giftcard_item_option_isSet = false;
    m_giftcard_item_option_isValid = false;
}

void OAICatalog_data_product_option_extension_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog_data_product_option_extension_interface::fromJsonObject(QJsonObject json) {

    m_bundle_options_isValid = ::OpenAPI::fromJsonValue(m_bundle_options, json[QString("bundle_options")]);
    m_bundle_options_isSet = !json[QString("bundle_options")].isNull() && m_bundle_options_isValid;

    m_configurable_item_options_isValid = ::OpenAPI::fromJsonValue(m_configurable_item_options, json[QString("configurable_item_options")]);
    m_configurable_item_options_isSet = !json[QString("configurable_item_options")].isNull() && m_configurable_item_options_isValid;

    m_custom_options_isValid = ::OpenAPI::fromJsonValue(m_custom_options, json[QString("custom_options")]);
    m_custom_options_isSet = !json[QString("custom_options")].isNull() && m_custom_options_isValid;

    m_downloadable_option_isValid = ::OpenAPI::fromJsonValue(m_downloadable_option, json[QString("downloadable_option")]);
    m_downloadable_option_isSet = !json[QString("downloadable_option")].isNull() && m_downloadable_option_isValid;

    m_giftcard_item_option_isValid = ::OpenAPI::fromJsonValue(m_giftcard_item_option, json[QString("giftcard_item_option")]);
    m_giftcard_item_option_isSet = !json[QString("giftcard_item_option")].isNull() && m_giftcard_item_option_isValid;
}

QString OAICatalog_data_product_option_extension_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog_data_product_option_extension_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_bundle_options.size() > 0) {
        obj.insert(QString("bundle_options"), ::OpenAPI::toJsonValue(m_bundle_options));
    }
    if (m_configurable_item_options.size() > 0) {
        obj.insert(QString("configurable_item_options"), ::OpenAPI::toJsonValue(m_configurable_item_options));
    }
    if (m_custom_options.size() > 0) {
        obj.insert(QString("custom_options"), ::OpenAPI::toJsonValue(m_custom_options));
    }
    if (m_downloadable_option.isSet()) {
        obj.insert(QString("downloadable_option"), ::OpenAPI::toJsonValue(m_downloadable_option));
    }
    if (m_giftcard_item_option.isSet()) {
        obj.insert(QString("giftcard_item_option"), ::OpenAPI::toJsonValue(m_giftcard_item_option));
    }
    return obj;
}

QList<OAIBundle_data_bundle_option_interface> OAICatalog_data_product_option_extension_interface::getBundleOptions() const {
    return m_bundle_options;
}
void OAICatalog_data_product_option_extension_interface::setBundleOptions(const QList<OAIBundle_data_bundle_option_interface> &bundle_options) {
    m_bundle_options = bundle_options;
    m_bundle_options_isSet = true;
}

bool OAICatalog_data_product_option_extension_interface::is_bundle_options_Set() const{
    return m_bundle_options_isSet;
}

bool OAICatalog_data_product_option_extension_interface::is_bundle_options_Valid() const{
    return m_bundle_options_isValid;
}

QList<OAIConfigurable_product_data_configurable_item_option_value_interface> OAICatalog_data_product_option_extension_interface::getConfigurableItemOptions() const {
    return m_configurable_item_options;
}
void OAICatalog_data_product_option_extension_interface::setConfigurableItemOptions(const QList<OAIConfigurable_product_data_configurable_item_option_value_interface> &configurable_item_options) {
    m_configurable_item_options = configurable_item_options;
    m_configurable_item_options_isSet = true;
}

bool OAICatalog_data_product_option_extension_interface::is_configurable_item_options_Set() const{
    return m_configurable_item_options_isSet;
}

bool OAICatalog_data_product_option_extension_interface::is_configurable_item_options_Valid() const{
    return m_configurable_item_options_isValid;
}

QList<OAICatalog_data_custom_option_interface> OAICatalog_data_product_option_extension_interface::getCustomOptions() const {
    return m_custom_options;
}
void OAICatalog_data_product_option_extension_interface::setCustomOptions(const QList<OAICatalog_data_custom_option_interface> &custom_options) {
    m_custom_options = custom_options;
    m_custom_options_isSet = true;
}

bool OAICatalog_data_product_option_extension_interface::is_custom_options_Set() const{
    return m_custom_options_isSet;
}

bool OAICatalog_data_product_option_extension_interface::is_custom_options_Valid() const{
    return m_custom_options_isValid;
}

OAIDownloadable_data_downloadable_option_interface OAICatalog_data_product_option_extension_interface::getDownloadableOption() const {
    return m_downloadable_option;
}
void OAICatalog_data_product_option_extension_interface::setDownloadableOption(const OAIDownloadable_data_downloadable_option_interface &downloadable_option) {
    m_downloadable_option = downloadable_option;
    m_downloadable_option_isSet = true;
}

bool OAICatalog_data_product_option_extension_interface::is_downloadable_option_Set() const{
    return m_downloadable_option_isSet;
}

bool OAICatalog_data_product_option_extension_interface::is_downloadable_option_Valid() const{
    return m_downloadable_option_isValid;
}

OAIGift_card_data_gift_card_option_interface OAICatalog_data_product_option_extension_interface::getGiftcardItemOption() const {
    return m_giftcard_item_option;
}
void OAICatalog_data_product_option_extension_interface::setGiftcardItemOption(const OAIGift_card_data_gift_card_option_interface &giftcard_item_option) {
    m_giftcard_item_option = giftcard_item_option;
    m_giftcard_item_option_isSet = true;
}

bool OAICatalog_data_product_option_extension_interface::is_giftcard_item_option_Set() const{
    return m_giftcard_item_option_isSet;
}

bool OAICatalog_data_product_option_extension_interface::is_giftcard_item_option_Valid() const{
    return m_giftcard_item_option_isValid;
}

bool OAICatalog_data_product_option_extension_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundle_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_configurable_item_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_downloadable_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_giftcard_item_option.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog_data_product_option_extension_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
