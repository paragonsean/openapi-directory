/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRma_data_item_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRma_data_item_interface::OAIRma_data_item_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRma_data_item_interface::OAIRma_data_item_interface() {
    this->initializeModel();
}

OAIRma_data_item_interface::~OAIRma_data_item_interface() {}

void OAIRma_data_item_interface::initializeModel() {

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_order_item_id_isSet = false;
    m_order_item_id_isValid = false;

    m_qty_approved_isSet = false;
    m_qty_approved_isValid = false;

    m_qty_authorized_isSet = false;
    m_qty_authorized_isValid = false;

    m_qty_requested_isSet = false;
    m_qty_requested_isValid = false;

    m_qty_returned_isSet = false;
    m_qty_returned_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_rma_entity_id_isSet = false;
    m_rma_entity_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIRma_data_item_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRma_data_item_interface::fromJsonObject(QJsonObject json) {

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_order_item_id_isValid = ::OpenAPI::fromJsonValue(m_order_item_id, json[QString("order_item_id")]);
    m_order_item_id_isSet = !json[QString("order_item_id")].isNull() && m_order_item_id_isValid;

    m_qty_approved_isValid = ::OpenAPI::fromJsonValue(m_qty_approved, json[QString("qty_approved")]);
    m_qty_approved_isSet = !json[QString("qty_approved")].isNull() && m_qty_approved_isValid;

    m_qty_authorized_isValid = ::OpenAPI::fromJsonValue(m_qty_authorized, json[QString("qty_authorized")]);
    m_qty_authorized_isSet = !json[QString("qty_authorized")].isNull() && m_qty_authorized_isValid;

    m_qty_requested_isValid = ::OpenAPI::fromJsonValue(m_qty_requested, json[QString("qty_requested")]);
    m_qty_requested_isSet = !json[QString("qty_requested")].isNull() && m_qty_requested_isValid;

    m_qty_returned_isValid = ::OpenAPI::fromJsonValue(m_qty_returned, json[QString("qty_returned")]);
    m_qty_returned_isSet = !json[QString("qty_returned")].isNull() && m_qty_returned_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_rma_entity_id_isValid = ::OpenAPI::fromJsonValue(m_rma_entity_id, json[QString("rma_entity_id")]);
    m_rma_entity_id_isSet = !json[QString("rma_entity_id")].isNull() && m_rma_entity_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIRma_data_item_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRma_data_item_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_order_item_id_isSet) {
        obj.insert(QString("order_item_id"), ::OpenAPI::toJsonValue(m_order_item_id));
    }
    if (m_qty_approved_isSet) {
        obj.insert(QString("qty_approved"), ::OpenAPI::toJsonValue(m_qty_approved));
    }
    if (m_qty_authorized_isSet) {
        obj.insert(QString("qty_authorized"), ::OpenAPI::toJsonValue(m_qty_authorized));
    }
    if (m_qty_requested_isSet) {
        obj.insert(QString("qty_requested"), ::OpenAPI::toJsonValue(m_qty_requested));
    }
    if (m_qty_returned_isSet) {
        obj.insert(QString("qty_returned"), ::OpenAPI::toJsonValue(m_qty_returned));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_rma_entity_id_isSet) {
        obj.insert(QString("rma_entity_id"), ::OpenAPI::toJsonValue(m_rma_entity_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIRma_data_item_interface::getCondition() const {
    return m_condition;
}
void OAIRma_data_item_interface::setCondition(const QString &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIRma_data_item_interface::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIRma_data_item_interface::is_condition_Valid() const{
    return m_condition_isValid;
}

qint32 OAIRma_data_item_interface::getEntityId() const {
    return m_entity_id;
}
void OAIRma_data_item_interface::setEntityId(const qint32 &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIRma_data_item_interface::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIRma_data_item_interface::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIObject OAIRma_data_item_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIRma_data_item_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIRma_data_item_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIRma_data_item_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAIRma_data_item_interface::getOrderItemId() const {
    return m_order_item_id;
}
void OAIRma_data_item_interface::setOrderItemId(const qint32 &order_item_id) {
    m_order_item_id = order_item_id;
    m_order_item_id_isSet = true;
}

bool OAIRma_data_item_interface::is_order_item_id_Set() const{
    return m_order_item_id_isSet;
}

bool OAIRma_data_item_interface::is_order_item_id_Valid() const{
    return m_order_item_id_isValid;
}

qint32 OAIRma_data_item_interface::getQtyApproved() const {
    return m_qty_approved;
}
void OAIRma_data_item_interface::setQtyApproved(const qint32 &qty_approved) {
    m_qty_approved = qty_approved;
    m_qty_approved_isSet = true;
}

bool OAIRma_data_item_interface::is_qty_approved_Set() const{
    return m_qty_approved_isSet;
}

bool OAIRma_data_item_interface::is_qty_approved_Valid() const{
    return m_qty_approved_isValid;
}

qint32 OAIRma_data_item_interface::getQtyAuthorized() const {
    return m_qty_authorized;
}
void OAIRma_data_item_interface::setQtyAuthorized(const qint32 &qty_authorized) {
    m_qty_authorized = qty_authorized;
    m_qty_authorized_isSet = true;
}

bool OAIRma_data_item_interface::is_qty_authorized_Set() const{
    return m_qty_authorized_isSet;
}

bool OAIRma_data_item_interface::is_qty_authorized_Valid() const{
    return m_qty_authorized_isValid;
}

qint32 OAIRma_data_item_interface::getQtyRequested() const {
    return m_qty_requested;
}
void OAIRma_data_item_interface::setQtyRequested(const qint32 &qty_requested) {
    m_qty_requested = qty_requested;
    m_qty_requested_isSet = true;
}

bool OAIRma_data_item_interface::is_qty_requested_Set() const{
    return m_qty_requested_isSet;
}

bool OAIRma_data_item_interface::is_qty_requested_Valid() const{
    return m_qty_requested_isValid;
}

qint32 OAIRma_data_item_interface::getQtyReturned() const {
    return m_qty_returned;
}
void OAIRma_data_item_interface::setQtyReturned(const qint32 &qty_returned) {
    m_qty_returned = qty_returned;
    m_qty_returned_isSet = true;
}

bool OAIRma_data_item_interface::is_qty_returned_Set() const{
    return m_qty_returned_isSet;
}

bool OAIRma_data_item_interface::is_qty_returned_Valid() const{
    return m_qty_returned_isValid;
}

QString OAIRma_data_item_interface::getReason() const {
    return m_reason;
}
void OAIRma_data_item_interface::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIRma_data_item_interface::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIRma_data_item_interface::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIRma_data_item_interface::getResolution() const {
    return m_resolution;
}
void OAIRma_data_item_interface::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIRma_data_item_interface::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIRma_data_item_interface::is_resolution_Valid() const{
    return m_resolution_isValid;
}

qint32 OAIRma_data_item_interface::getRmaEntityId() const {
    return m_rma_entity_id;
}
void OAIRma_data_item_interface::setRmaEntityId(const qint32 &rma_entity_id) {
    m_rma_entity_id = rma_entity_id;
    m_rma_entity_id_isSet = true;
}

bool OAIRma_data_item_interface::is_rma_entity_id_Set() const{
    return m_rma_entity_id_isSet;
}

bool OAIRma_data_item_interface::is_rma_entity_id_Valid() const{
    return m_rma_entity_id_isValid;
}

QString OAIRma_data_item_interface::getStatus() const {
    return m_status;
}
void OAIRma_data_item_interface::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRma_data_item_interface::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRma_data_item_interface::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRma_data_item_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_returned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rma_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRma_data_item_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_condition_isValid && m_entity_id_isValid && m_order_item_id_isValid && m_qty_approved_isValid && m_qty_authorized_isValid && m_qty_requested_isValid && m_qty_returned_isValid && m_reason_isValid && m_resolution_isValid && m_rma_entity_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
