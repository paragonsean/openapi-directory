/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISales_rule_data_condition_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISales_rule_data_condition_interface::OAISales_rule_data_condition_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISales_rule_data_condition_interface::OAISales_rule_data_condition_interface() {
    this->initializeModel();
}

OAISales_rule_data_condition_interface::~OAISales_rule_data_condition_interface() {}

void OAISales_rule_data_condition_interface::initializeModel() {

    m_aggregator_type_isSet = false;
    m_aggregator_type_isValid = false;

    m_attribute_name_isSet = false;
    m_attribute_name_isValid = false;

    m_condition_type_isSet = false;
    m_condition_type_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAISales_rule_data_condition_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISales_rule_data_condition_interface::fromJsonObject(QJsonObject json) {

    m_aggregator_type_isValid = ::OpenAPI::fromJsonValue(m_aggregator_type, json[QString("aggregator_type")]);
    m_aggregator_type_isSet = !json[QString("aggregator_type")].isNull() && m_aggregator_type_isValid;

    m_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_attribute_name, json[QString("attribute_name")]);
    m_attribute_name_isSet = !json[QString("attribute_name")].isNull() && m_attribute_name_isValid;

    m_condition_type_isValid = ::OpenAPI::fromJsonValue(m_condition_type, json[QString("condition_type")]);
    m_condition_type_isSet = !json[QString("condition_type")].isNull() && m_condition_type_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAISales_rule_data_condition_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISales_rule_data_condition_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregator_type_isSet) {
        obj.insert(QString("aggregator_type"), ::OpenAPI::toJsonValue(m_aggregator_type));
    }
    if (m_attribute_name_isSet) {
        obj.insert(QString("attribute_name"), ::OpenAPI::toJsonValue(m_attribute_name));
    }
    if (m_condition_type_isSet) {
        obj.insert(QString("condition_type"), ::OpenAPI::toJsonValue(m_condition_type));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAISales_rule_data_condition_interface::getAggregatorType() const {
    return m_aggregator_type;
}
void OAISales_rule_data_condition_interface::setAggregatorType(const QString &aggregator_type) {
    m_aggregator_type = aggregator_type;
    m_aggregator_type_isSet = true;
}

bool OAISales_rule_data_condition_interface::is_aggregator_type_Set() const{
    return m_aggregator_type_isSet;
}

bool OAISales_rule_data_condition_interface::is_aggregator_type_Valid() const{
    return m_aggregator_type_isValid;
}

QString OAISales_rule_data_condition_interface::getAttributeName() const {
    return m_attribute_name;
}
void OAISales_rule_data_condition_interface::setAttributeName(const QString &attribute_name) {
    m_attribute_name = attribute_name;
    m_attribute_name_isSet = true;
}

bool OAISales_rule_data_condition_interface::is_attribute_name_Set() const{
    return m_attribute_name_isSet;
}

bool OAISales_rule_data_condition_interface::is_attribute_name_Valid() const{
    return m_attribute_name_isValid;
}

QString OAISales_rule_data_condition_interface::getConditionType() const {
    return m_condition_type;
}
void OAISales_rule_data_condition_interface::setConditionType(const QString &condition_type) {
    m_condition_type = condition_type;
    m_condition_type_isSet = true;
}

bool OAISales_rule_data_condition_interface::is_condition_type_Set() const{
    return m_condition_type_isSet;
}

bool OAISales_rule_data_condition_interface::is_condition_type_Valid() const{
    return m_condition_type_isValid;
}

QList<OAISales_rule_data_condition_interface> OAISales_rule_data_condition_interface::getConditions() const {
    return m_conditions;
}
void OAISales_rule_data_condition_interface::setConditions(const QList<OAISales_rule_data_condition_interface> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAISales_rule_data_condition_interface::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAISales_rule_data_condition_interface::is_conditions_Valid() const{
    return m_conditions_isValid;
}

OAIObject OAISales_rule_data_condition_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAISales_rule_data_condition_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAISales_rule_data_condition_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAISales_rule_data_condition_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAISales_rule_data_condition_interface::getROperator() const {
    return m_r_operator;
}
void OAISales_rule_data_condition_interface::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAISales_rule_data_condition_interface::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAISales_rule_data_condition_interface::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAISales_rule_data_condition_interface::getValue() const {
    return m_value;
}
void OAISales_rule_data_condition_interface::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISales_rule_data_condition_interface::is_value_Set() const{
    return m_value_isSet;
}

bool OAISales_rule_data_condition_interface::is_value_Valid() const{
    return m_value_isValid;
}

bool OAISales_rule_data_condition_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISales_rule_data_condition_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_condition_type_isValid && m_r_operator_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
