/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog_data_product_extension_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog_data_product_extension_interface::OAICatalog_data_product_extension_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog_data_product_extension_interface::OAICatalog_data_product_extension_interface() {
    this->initializeModel();
}

OAICatalog_data_product_extension_interface::~OAICatalog_data_product_extension_interface() {}

void OAICatalog_data_product_extension_interface::initializeModel() {

    m_bundle_product_options_isSet = false;
    m_bundle_product_options_isValid = false;

    m_category_links_isSet = false;
    m_category_links_isValid = false;

    m_configurable_product_links_isSet = false;
    m_configurable_product_links_isValid = false;

    m_configurable_product_options_isSet = false;
    m_configurable_product_options_isValid = false;

    m_downloadable_product_links_isSet = false;
    m_downloadable_product_links_isValid = false;

    m_downloadable_product_samples_isSet = false;
    m_downloadable_product_samples_isValid = false;

    m_giftcard_amounts_isSet = false;
    m_giftcard_amounts_isValid = false;

    m_stock_item_isSet = false;
    m_stock_item_isValid = false;

    m_website_ids_isSet = false;
    m_website_ids_isValid = false;
}

void OAICatalog_data_product_extension_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog_data_product_extension_interface::fromJsonObject(QJsonObject json) {

    m_bundle_product_options_isValid = ::OpenAPI::fromJsonValue(m_bundle_product_options, json[QString("bundle_product_options")]);
    m_bundle_product_options_isSet = !json[QString("bundle_product_options")].isNull() && m_bundle_product_options_isValid;

    m_category_links_isValid = ::OpenAPI::fromJsonValue(m_category_links, json[QString("category_links")]);
    m_category_links_isSet = !json[QString("category_links")].isNull() && m_category_links_isValid;

    m_configurable_product_links_isValid = ::OpenAPI::fromJsonValue(m_configurable_product_links, json[QString("configurable_product_links")]);
    m_configurable_product_links_isSet = !json[QString("configurable_product_links")].isNull() && m_configurable_product_links_isValid;

    m_configurable_product_options_isValid = ::OpenAPI::fromJsonValue(m_configurable_product_options, json[QString("configurable_product_options")]);
    m_configurable_product_options_isSet = !json[QString("configurable_product_options")].isNull() && m_configurable_product_options_isValid;

    m_downloadable_product_links_isValid = ::OpenAPI::fromJsonValue(m_downloadable_product_links, json[QString("downloadable_product_links")]);
    m_downloadable_product_links_isSet = !json[QString("downloadable_product_links")].isNull() && m_downloadable_product_links_isValid;

    m_downloadable_product_samples_isValid = ::OpenAPI::fromJsonValue(m_downloadable_product_samples, json[QString("downloadable_product_samples")]);
    m_downloadable_product_samples_isSet = !json[QString("downloadable_product_samples")].isNull() && m_downloadable_product_samples_isValid;

    m_giftcard_amounts_isValid = ::OpenAPI::fromJsonValue(m_giftcard_amounts, json[QString("giftcard_amounts")]);
    m_giftcard_amounts_isSet = !json[QString("giftcard_amounts")].isNull() && m_giftcard_amounts_isValid;

    m_stock_item_isValid = ::OpenAPI::fromJsonValue(m_stock_item, json[QString("stock_item")]);
    m_stock_item_isSet = !json[QString("stock_item")].isNull() && m_stock_item_isValid;

    m_website_ids_isValid = ::OpenAPI::fromJsonValue(m_website_ids, json[QString("website_ids")]);
    m_website_ids_isSet = !json[QString("website_ids")].isNull() && m_website_ids_isValid;
}

QString OAICatalog_data_product_extension_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog_data_product_extension_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_bundle_product_options.size() > 0) {
        obj.insert(QString("bundle_product_options"), ::OpenAPI::toJsonValue(m_bundle_product_options));
    }
    if (m_category_links.size() > 0) {
        obj.insert(QString("category_links"), ::OpenAPI::toJsonValue(m_category_links));
    }
    if (m_configurable_product_links.size() > 0) {
        obj.insert(QString("configurable_product_links"), ::OpenAPI::toJsonValue(m_configurable_product_links));
    }
    if (m_configurable_product_options.size() > 0) {
        obj.insert(QString("configurable_product_options"), ::OpenAPI::toJsonValue(m_configurable_product_options));
    }
    if (m_downloadable_product_links.size() > 0) {
        obj.insert(QString("downloadable_product_links"), ::OpenAPI::toJsonValue(m_downloadable_product_links));
    }
    if (m_downloadable_product_samples.size() > 0) {
        obj.insert(QString("downloadable_product_samples"), ::OpenAPI::toJsonValue(m_downloadable_product_samples));
    }
    if (m_giftcard_amounts.size() > 0) {
        obj.insert(QString("giftcard_amounts"), ::OpenAPI::toJsonValue(m_giftcard_amounts));
    }
    if (m_stock_item.isSet()) {
        obj.insert(QString("stock_item"), ::OpenAPI::toJsonValue(m_stock_item));
    }
    if (m_website_ids.size() > 0) {
        obj.insert(QString("website_ids"), ::OpenAPI::toJsonValue(m_website_ids));
    }
    return obj;
}

QList<OAIBundle_data_option_interface> OAICatalog_data_product_extension_interface::getBundleProductOptions() const {
    return m_bundle_product_options;
}
void OAICatalog_data_product_extension_interface::setBundleProductOptions(const QList<OAIBundle_data_option_interface> &bundle_product_options) {
    m_bundle_product_options = bundle_product_options;
    m_bundle_product_options_isSet = true;
}

bool OAICatalog_data_product_extension_interface::is_bundle_product_options_Set() const{
    return m_bundle_product_options_isSet;
}

bool OAICatalog_data_product_extension_interface::is_bundle_product_options_Valid() const{
    return m_bundle_product_options_isValid;
}

QList<OAICatalog_data_category_link_interface> OAICatalog_data_product_extension_interface::getCategoryLinks() const {
    return m_category_links;
}
void OAICatalog_data_product_extension_interface::setCategoryLinks(const QList<OAICatalog_data_category_link_interface> &category_links) {
    m_category_links = category_links;
    m_category_links_isSet = true;
}

bool OAICatalog_data_product_extension_interface::is_category_links_Set() const{
    return m_category_links_isSet;
}

bool OAICatalog_data_product_extension_interface::is_category_links_Valid() const{
    return m_category_links_isValid;
}

QList<qint32> OAICatalog_data_product_extension_interface::getConfigurableProductLinks() const {
    return m_configurable_product_links;
}
void OAICatalog_data_product_extension_interface::setConfigurableProductLinks(const QList<qint32> &configurable_product_links) {
    m_configurable_product_links = configurable_product_links;
    m_configurable_product_links_isSet = true;
}

bool OAICatalog_data_product_extension_interface::is_configurable_product_links_Set() const{
    return m_configurable_product_links_isSet;
}

bool OAICatalog_data_product_extension_interface::is_configurable_product_links_Valid() const{
    return m_configurable_product_links_isValid;
}

QList<OAIConfigurable_product_data_option_interface> OAICatalog_data_product_extension_interface::getConfigurableProductOptions() const {
    return m_configurable_product_options;
}
void OAICatalog_data_product_extension_interface::setConfigurableProductOptions(const QList<OAIConfigurable_product_data_option_interface> &configurable_product_options) {
    m_configurable_product_options = configurable_product_options;
    m_configurable_product_options_isSet = true;
}

bool OAICatalog_data_product_extension_interface::is_configurable_product_options_Set() const{
    return m_configurable_product_options_isSet;
}

bool OAICatalog_data_product_extension_interface::is_configurable_product_options_Valid() const{
    return m_configurable_product_options_isValid;
}

QList<OAIDownloadable_data_link_interface> OAICatalog_data_product_extension_interface::getDownloadableProductLinks() const {
    return m_downloadable_product_links;
}
void OAICatalog_data_product_extension_interface::setDownloadableProductLinks(const QList<OAIDownloadable_data_link_interface> &downloadable_product_links) {
    m_downloadable_product_links = downloadable_product_links;
    m_downloadable_product_links_isSet = true;
}

bool OAICatalog_data_product_extension_interface::is_downloadable_product_links_Set() const{
    return m_downloadable_product_links_isSet;
}

bool OAICatalog_data_product_extension_interface::is_downloadable_product_links_Valid() const{
    return m_downloadable_product_links_isValid;
}

QList<OAIDownloadable_data_sample_interface> OAICatalog_data_product_extension_interface::getDownloadableProductSamples() const {
    return m_downloadable_product_samples;
}
void OAICatalog_data_product_extension_interface::setDownloadableProductSamples(const QList<OAIDownloadable_data_sample_interface> &downloadable_product_samples) {
    m_downloadable_product_samples = downloadable_product_samples;
    m_downloadable_product_samples_isSet = true;
}

bool OAICatalog_data_product_extension_interface::is_downloadable_product_samples_Set() const{
    return m_downloadable_product_samples_isSet;
}

bool OAICatalog_data_product_extension_interface::is_downloadable_product_samples_Valid() const{
    return m_downloadable_product_samples_isValid;
}

QList<OAIGift_card_data_giftcard_amount_interface> OAICatalog_data_product_extension_interface::getGiftcardAmounts() const {
    return m_giftcard_amounts;
}
void OAICatalog_data_product_extension_interface::setGiftcardAmounts(const QList<OAIGift_card_data_giftcard_amount_interface> &giftcard_amounts) {
    m_giftcard_amounts = giftcard_amounts;
    m_giftcard_amounts_isSet = true;
}

bool OAICatalog_data_product_extension_interface::is_giftcard_amounts_Set() const{
    return m_giftcard_amounts_isSet;
}

bool OAICatalog_data_product_extension_interface::is_giftcard_amounts_Valid() const{
    return m_giftcard_amounts_isValid;
}

OAICatalog_inventory_data_stock_item_interface OAICatalog_data_product_extension_interface::getStockItem() const {
    return m_stock_item;
}
void OAICatalog_data_product_extension_interface::setStockItem(const OAICatalog_inventory_data_stock_item_interface &stock_item) {
    m_stock_item = stock_item;
    m_stock_item_isSet = true;
}

bool OAICatalog_data_product_extension_interface::is_stock_item_Set() const{
    return m_stock_item_isSet;
}

bool OAICatalog_data_product_extension_interface::is_stock_item_Valid() const{
    return m_stock_item_isValid;
}

QList<qint32> OAICatalog_data_product_extension_interface::getWebsiteIds() const {
    return m_website_ids;
}
void OAICatalog_data_product_extension_interface::setWebsiteIds(const QList<qint32> &website_ids) {
    m_website_ids = website_ids;
    m_website_ids_isSet = true;
}

bool OAICatalog_data_product_extension_interface::is_website_ids_Set() const{
    return m_website_ids_isSet;
}

bool OAICatalog_data_product_extension_interface::is_website_ids_Valid() const{
    return m_website_ids_isValid;
}

bool OAICatalog_data_product_extension_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundle_product_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_configurable_product_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_configurable_product_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_downloadable_product_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_downloadable_product_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_giftcard_amounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog_data_product_extension_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
