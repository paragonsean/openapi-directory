/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISales_data_total_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISales_data_total_interface::OAISales_data_total_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISales_data_total_interface::OAISales_data_total_interface() {
    this->initializeModel();
}

OAISales_data_total_interface::~OAISales_data_total_interface() {}

void OAISales_data_total_interface::initializeModel() {

    m_base_shipping_amount_isSet = false;
    m_base_shipping_amount_isValid = false;

    m_base_shipping_canceled_isSet = false;
    m_base_shipping_canceled_isValid = false;

    m_base_shipping_discount_amount_isSet = false;
    m_base_shipping_discount_amount_isValid = false;

    m_base_shipping_discount_tax_compensation_amnt_isSet = false;
    m_base_shipping_discount_tax_compensation_amnt_isValid = false;

    m_base_shipping_incl_tax_isSet = false;
    m_base_shipping_incl_tax_isValid = false;

    m_base_shipping_invoiced_isSet = false;
    m_base_shipping_invoiced_isValid = false;

    m_base_shipping_refunded_isSet = false;
    m_base_shipping_refunded_isValid = false;

    m_base_shipping_tax_amount_isSet = false;
    m_base_shipping_tax_amount_isValid = false;

    m_base_shipping_tax_refunded_isSet = false;
    m_base_shipping_tax_refunded_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_shipping_amount_isSet = false;
    m_shipping_amount_isValid = false;

    m_shipping_canceled_isSet = false;
    m_shipping_canceled_isValid = false;

    m_shipping_discount_amount_isSet = false;
    m_shipping_discount_amount_isValid = false;

    m_shipping_discount_tax_compensation_amount_isSet = false;
    m_shipping_discount_tax_compensation_amount_isValid = false;

    m_shipping_incl_tax_isSet = false;
    m_shipping_incl_tax_isValid = false;

    m_shipping_invoiced_isSet = false;
    m_shipping_invoiced_isValid = false;

    m_shipping_refunded_isSet = false;
    m_shipping_refunded_isValid = false;

    m_shipping_tax_amount_isSet = false;
    m_shipping_tax_amount_isValid = false;

    m_shipping_tax_refunded_isSet = false;
    m_shipping_tax_refunded_isValid = false;
}

void OAISales_data_total_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISales_data_total_interface::fromJsonObject(QJsonObject json) {

    m_base_shipping_amount_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_amount, json[QString("base_shipping_amount")]);
    m_base_shipping_amount_isSet = !json[QString("base_shipping_amount")].isNull() && m_base_shipping_amount_isValid;

    m_base_shipping_canceled_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_canceled, json[QString("base_shipping_canceled")]);
    m_base_shipping_canceled_isSet = !json[QString("base_shipping_canceled")].isNull() && m_base_shipping_canceled_isValid;

    m_base_shipping_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_discount_amount, json[QString("base_shipping_discount_amount")]);
    m_base_shipping_discount_amount_isSet = !json[QString("base_shipping_discount_amount")].isNull() && m_base_shipping_discount_amount_isValid;

    m_base_shipping_discount_tax_compensation_amnt_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_discount_tax_compensation_amnt, json[QString("base_shipping_discount_tax_compensation_amnt")]);
    m_base_shipping_discount_tax_compensation_amnt_isSet = !json[QString("base_shipping_discount_tax_compensation_amnt")].isNull() && m_base_shipping_discount_tax_compensation_amnt_isValid;

    m_base_shipping_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_incl_tax, json[QString("base_shipping_incl_tax")]);
    m_base_shipping_incl_tax_isSet = !json[QString("base_shipping_incl_tax")].isNull() && m_base_shipping_incl_tax_isValid;

    m_base_shipping_invoiced_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_invoiced, json[QString("base_shipping_invoiced")]);
    m_base_shipping_invoiced_isSet = !json[QString("base_shipping_invoiced")].isNull() && m_base_shipping_invoiced_isValid;

    m_base_shipping_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_refunded, json[QString("base_shipping_refunded")]);
    m_base_shipping_refunded_isSet = !json[QString("base_shipping_refunded")].isNull() && m_base_shipping_refunded_isValid;

    m_base_shipping_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_tax_amount, json[QString("base_shipping_tax_amount")]);
    m_base_shipping_tax_amount_isSet = !json[QString("base_shipping_tax_amount")].isNull() && m_base_shipping_tax_amount_isValid;

    m_base_shipping_tax_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_tax_refunded, json[QString("base_shipping_tax_refunded")]);
    m_base_shipping_tax_refunded_isSet = !json[QString("base_shipping_tax_refunded")].isNull() && m_base_shipping_tax_refunded_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_shipping_amount_isValid = ::OpenAPI::fromJsonValue(m_shipping_amount, json[QString("shipping_amount")]);
    m_shipping_amount_isSet = !json[QString("shipping_amount")].isNull() && m_shipping_amount_isValid;

    m_shipping_canceled_isValid = ::OpenAPI::fromJsonValue(m_shipping_canceled, json[QString("shipping_canceled")]);
    m_shipping_canceled_isSet = !json[QString("shipping_canceled")].isNull() && m_shipping_canceled_isValid;

    m_shipping_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_shipping_discount_amount, json[QString("shipping_discount_amount")]);
    m_shipping_discount_amount_isSet = !json[QString("shipping_discount_amount")].isNull() && m_shipping_discount_amount_isValid;

    m_shipping_discount_tax_compensation_amount_isValid = ::OpenAPI::fromJsonValue(m_shipping_discount_tax_compensation_amount, json[QString("shipping_discount_tax_compensation_amount")]);
    m_shipping_discount_tax_compensation_amount_isSet = !json[QString("shipping_discount_tax_compensation_amount")].isNull() && m_shipping_discount_tax_compensation_amount_isValid;

    m_shipping_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_shipping_incl_tax, json[QString("shipping_incl_tax")]);
    m_shipping_incl_tax_isSet = !json[QString("shipping_incl_tax")].isNull() && m_shipping_incl_tax_isValid;

    m_shipping_invoiced_isValid = ::OpenAPI::fromJsonValue(m_shipping_invoiced, json[QString("shipping_invoiced")]);
    m_shipping_invoiced_isSet = !json[QString("shipping_invoiced")].isNull() && m_shipping_invoiced_isValid;

    m_shipping_refunded_isValid = ::OpenAPI::fromJsonValue(m_shipping_refunded, json[QString("shipping_refunded")]);
    m_shipping_refunded_isSet = !json[QString("shipping_refunded")].isNull() && m_shipping_refunded_isValid;

    m_shipping_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_shipping_tax_amount, json[QString("shipping_tax_amount")]);
    m_shipping_tax_amount_isSet = !json[QString("shipping_tax_amount")].isNull() && m_shipping_tax_amount_isValid;

    m_shipping_tax_refunded_isValid = ::OpenAPI::fromJsonValue(m_shipping_tax_refunded, json[QString("shipping_tax_refunded")]);
    m_shipping_tax_refunded_isSet = !json[QString("shipping_tax_refunded")].isNull() && m_shipping_tax_refunded_isValid;
}

QString OAISales_data_total_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISales_data_total_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_base_shipping_amount_isSet) {
        obj.insert(QString("base_shipping_amount"), ::OpenAPI::toJsonValue(m_base_shipping_amount));
    }
    if (m_base_shipping_canceled_isSet) {
        obj.insert(QString("base_shipping_canceled"), ::OpenAPI::toJsonValue(m_base_shipping_canceled));
    }
    if (m_base_shipping_discount_amount_isSet) {
        obj.insert(QString("base_shipping_discount_amount"), ::OpenAPI::toJsonValue(m_base_shipping_discount_amount));
    }
    if (m_base_shipping_discount_tax_compensation_amnt_isSet) {
        obj.insert(QString("base_shipping_discount_tax_compensation_amnt"), ::OpenAPI::toJsonValue(m_base_shipping_discount_tax_compensation_amnt));
    }
    if (m_base_shipping_incl_tax_isSet) {
        obj.insert(QString("base_shipping_incl_tax"), ::OpenAPI::toJsonValue(m_base_shipping_incl_tax));
    }
    if (m_base_shipping_invoiced_isSet) {
        obj.insert(QString("base_shipping_invoiced"), ::OpenAPI::toJsonValue(m_base_shipping_invoiced));
    }
    if (m_base_shipping_refunded_isSet) {
        obj.insert(QString("base_shipping_refunded"), ::OpenAPI::toJsonValue(m_base_shipping_refunded));
    }
    if (m_base_shipping_tax_amount_isSet) {
        obj.insert(QString("base_shipping_tax_amount"), ::OpenAPI::toJsonValue(m_base_shipping_tax_amount));
    }
    if (m_base_shipping_tax_refunded_isSet) {
        obj.insert(QString("base_shipping_tax_refunded"), ::OpenAPI::toJsonValue(m_base_shipping_tax_refunded));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_shipping_amount_isSet) {
        obj.insert(QString("shipping_amount"), ::OpenAPI::toJsonValue(m_shipping_amount));
    }
    if (m_shipping_canceled_isSet) {
        obj.insert(QString("shipping_canceled"), ::OpenAPI::toJsonValue(m_shipping_canceled));
    }
    if (m_shipping_discount_amount_isSet) {
        obj.insert(QString("shipping_discount_amount"), ::OpenAPI::toJsonValue(m_shipping_discount_amount));
    }
    if (m_shipping_discount_tax_compensation_amount_isSet) {
        obj.insert(QString("shipping_discount_tax_compensation_amount"), ::OpenAPI::toJsonValue(m_shipping_discount_tax_compensation_amount));
    }
    if (m_shipping_incl_tax_isSet) {
        obj.insert(QString("shipping_incl_tax"), ::OpenAPI::toJsonValue(m_shipping_incl_tax));
    }
    if (m_shipping_invoiced_isSet) {
        obj.insert(QString("shipping_invoiced"), ::OpenAPI::toJsonValue(m_shipping_invoiced));
    }
    if (m_shipping_refunded_isSet) {
        obj.insert(QString("shipping_refunded"), ::OpenAPI::toJsonValue(m_shipping_refunded));
    }
    if (m_shipping_tax_amount_isSet) {
        obj.insert(QString("shipping_tax_amount"), ::OpenAPI::toJsonValue(m_shipping_tax_amount));
    }
    if (m_shipping_tax_refunded_isSet) {
        obj.insert(QString("shipping_tax_refunded"), ::OpenAPI::toJsonValue(m_shipping_tax_refunded));
    }
    return obj;
}

double OAISales_data_total_interface::getBaseShippingAmount() const {
    return m_base_shipping_amount;
}
void OAISales_data_total_interface::setBaseShippingAmount(const double &base_shipping_amount) {
    m_base_shipping_amount = base_shipping_amount;
    m_base_shipping_amount_isSet = true;
}

bool OAISales_data_total_interface::is_base_shipping_amount_Set() const{
    return m_base_shipping_amount_isSet;
}

bool OAISales_data_total_interface::is_base_shipping_amount_Valid() const{
    return m_base_shipping_amount_isValid;
}

double OAISales_data_total_interface::getBaseShippingCanceled() const {
    return m_base_shipping_canceled;
}
void OAISales_data_total_interface::setBaseShippingCanceled(const double &base_shipping_canceled) {
    m_base_shipping_canceled = base_shipping_canceled;
    m_base_shipping_canceled_isSet = true;
}

bool OAISales_data_total_interface::is_base_shipping_canceled_Set() const{
    return m_base_shipping_canceled_isSet;
}

bool OAISales_data_total_interface::is_base_shipping_canceled_Valid() const{
    return m_base_shipping_canceled_isValid;
}

double OAISales_data_total_interface::getBaseShippingDiscountAmount() const {
    return m_base_shipping_discount_amount;
}
void OAISales_data_total_interface::setBaseShippingDiscountAmount(const double &base_shipping_discount_amount) {
    m_base_shipping_discount_amount = base_shipping_discount_amount;
    m_base_shipping_discount_amount_isSet = true;
}

bool OAISales_data_total_interface::is_base_shipping_discount_amount_Set() const{
    return m_base_shipping_discount_amount_isSet;
}

bool OAISales_data_total_interface::is_base_shipping_discount_amount_Valid() const{
    return m_base_shipping_discount_amount_isValid;
}

double OAISales_data_total_interface::getBaseShippingDiscountTaxCompensationAmnt() const {
    return m_base_shipping_discount_tax_compensation_amnt;
}
void OAISales_data_total_interface::setBaseShippingDiscountTaxCompensationAmnt(const double &base_shipping_discount_tax_compensation_amnt) {
    m_base_shipping_discount_tax_compensation_amnt = base_shipping_discount_tax_compensation_amnt;
    m_base_shipping_discount_tax_compensation_amnt_isSet = true;
}

bool OAISales_data_total_interface::is_base_shipping_discount_tax_compensation_amnt_Set() const{
    return m_base_shipping_discount_tax_compensation_amnt_isSet;
}

bool OAISales_data_total_interface::is_base_shipping_discount_tax_compensation_amnt_Valid() const{
    return m_base_shipping_discount_tax_compensation_amnt_isValid;
}

double OAISales_data_total_interface::getBaseShippingInclTax() const {
    return m_base_shipping_incl_tax;
}
void OAISales_data_total_interface::setBaseShippingInclTax(const double &base_shipping_incl_tax) {
    m_base_shipping_incl_tax = base_shipping_incl_tax;
    m_base_shipping_incl_tax_isSet = true;
}

bool OAISales_data_total_interface::is_base_shipping_incl_tax_Set() const{
    return m_base_shipping_incl_tax_isSet;
}

bool OAISales_data_total_interface::is_base_shipping_incl_tax_Valid() const{
    return m_base_shipping_incl_tax_isValid;
}

double OAISales_data_total_interface::getBaseShippingInvoiced() const {
    return m_base_shipping_invoiced;
}
void OAISales_data_total_interface::setBaseShippingInvoiced(const double &base_shipping_invoiced) {
    m_base_shipping_invoiced = base_shipping_invoiced;
    m_base_shipping_invoiced_isSet = true;
}

bool OAISales_data_total_interface::is_base_shipping_invoiced_Set() const{
    return m_base_shipping_invoiced_isSet;
}

bool OAISales_data_total_interface::is_base_shipping_invoiced_Valid() const{
    return m_base_shipping_invoiced_isValid;
}

double OAISales_data_total_interface::getBaseShippingRefunded() const {
    return m_base_shipping_refunded;
}
void OAISales_data_total_interface::setBaseShippingRefunded(const double &base_shipping_refunded) {
    m_base_shipping_refunded = base_shipping_refunded;
    m_base_shipping_refunded_isSet = true;
}

bool OAISales_data_total_interface::is_base_shipping_refunded_Set() const{
    return m_base_shipping_refunded_isSet;
}

bool OAISales_data_total_interface::is_base_shipping_refunded_Valid() const{
    return m_base_shipping_refunded_isValid;
}

double OAISales_data_total_interface::getBaseShippingTaxAmount() const {
    return m_base_shipping_tax_amount;
}
void OAISales_data_total_interface::setBaseShippingTaxAmount(const double &base_shipping_tax_amount) {
    m_base_shipping_tax_amount = base_shipping_tax_amount;
    m_base_shipping_tax_amount_isSet = true;
}

bool OAISales_data_total_interface::is_base_shipping_tax_amount_Set() const{
    return m_base_shipping_tax_amount_isSet;
}

bool OAISales_data_total_interface::is_base_shipping_tax_amount_Valid() const{
    return m_base_shipping_tax_amount_isValid;
}

double OAISales_data_total_interface::getBaseShippingTaxRefunded() const {
    return m_base_shipping_tax_refunded;
}
void OAISales_data_total_interface::setBaseShippingTaxRefunded(const double &base_shipping_tax_refunded) {
    m_base_shipping_tax_refunded = base_shipping_tax_refunded;
    m_base_shipping_tax_refunded_isSet = true;
}

bool OAISales_data_total_interface::is_base_shipping_tax_refunded_Set() const{
    return m_base_shipping_tax_refunded_isSet;
}

bool OAISales_data_total_interface::is_base_shipping_tax_refunded_Valid() const{
    return m_base_shipping_tax_refunded_isValid;
}

OAIObject OAISales_data_total_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAISales_data_total_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAISales_data_total_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAISales_data_total_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

double OAISales_data_total_interface::getShippingAmount() const {
    return m_shipping_amount;
}
void OAISales_data_total_interface::setShippingAmount(const double &shipping_amount) {
    m_shipping_amount = shipping_amount;
    m_shipping_amount_isSet = true;
}

bool OAISales_data_total_interface::is_shipping_amount_Set() const{
    return m_shipping_amount_isSet;
}

bool OAISales_data_total_interface::is_shipping_amount_Valid() const{
    return m_shipping_amount_isValid;
}

double OAISales_data_total_interface::getShippingCanceled() const {
    return m_shipping_canceled;
}
void OAISales_data_total_interface::setShippingCanceled(const double &shipping_canceled) {
    m_shipping_canceled = shipping_canceled;
    m_shipping_canceled_isSet = true;
}

bool OAISales_data_total_interface::is_shipping_canceled_Set() const{
    return m_shipping_canceled_isSet;
}

bool OAISales_data_total_interface::is_shipping_canceled_Valid() const{
    return m_shipping_canceled_isValid;
}

double OAISales_data_total_interface::getShippingDiscountAmount() const {
    return m_shipping_discount_amount;
}
void OAISales_data_total_interface::setShippingDiscountAmount(const double &shipping_discount_amount) {
    m_shipping_discount_amount = shipping_discount_amount;
    m_shipping_discount_amount_isSet = true;
}

bool OAISales_data_total_interface::is_shipping_discount_amount_Set() const{
    return m_shipping_discount_amount_isSet;
}

bool OAISales_data_total_interface::is_shipping_discount_amount_Valid() const{
    return m_shipping_discount_amount_isValid;
}

double OAISales_data_total_interface::getShippingDiscountTaxCompensationAmount() const {
    return m_shipping_discount_tax_compensation_amount;
}
void OAISales_data_total_interface::setShippingDiscountTaxCompensationAmount(const double &shipping_discount_tax_compensation_amount) {
    m_shipping_discount_tax_compensation_amount = shipping_discount_tax_compensation_amount;
    m_shipping_discount_tax_compensation_amount_isSet = true;
}

bool OAISales_data_total_interface::is_shipping_discount_tax_compensation_amount_Set() const{
    return m_shipping_discount_tax_compensation_amount_isSet;
}

bool OAISales_data_total_interface::is_shipping_discount_tax_compensation_amount_Valid() const{
    return m_shipping_discount_tax_compensation_amount_isValid;
}

double OAISales_data_total_interface::getShippingInclTax() const {
    return m_shipping_incl_tax;
}
void OAISales_data_total_interface::setShippingInclTax(const double &shipping_incl_tax) {
    m_shipping_incl_tax = shipping_incl_tax;
    m_shipping_incl_tax_isSet = true;
}

bool OAISales_data_total_interface::is_shipping_incl_tax_Set() const{
    return m_shipping_incl_tax_isSet;
}

bool OAISales_data_total_interface::is_shipping_incl_tax_Valid() const{
    return m_shipping_incl_tax_isValid;
}

double OAISales_data_total_interface::getShippingInvoiced() const {
    return m_shipping_invoiced;
}
void OAISales_data_total_interface::setShippingInvoiced(const double &shipping_invoiced) {
    m_shipping_invoiced = shipping_invoiced;
    m_shipping_invoiced_isSet = true;
}

bool OAISales_data_total_interface::is_shipping_invoiced_Set() const{
    return m_shipping_invoiced_isSet;
}

bool OAISales_data_total_interface::is_shipping_invoiced_Valid() const{
    return m_shipping_invoiced_isValid;
}

double OAISales_data_total_interface::getShippingRefunded() const {
    return m_shipping_refunded;
}
void OAISales_data_total_interface::setShippingRefunded(const double &shipping_refunded) {
    m_shipping_refunded = shipping_refunded;
    m_shipping_refunded_isSet = true;
}

bool OAISales_data_total_interface::is_shipping_refunded_Set() const{
    return m_shipping_refunded_isSet;
}

bool OAISales_data_total_interface::is_shipping_refunded_Valid() const{
    return m_shipping_refunded_isValid;
}

double OAISales_data_total_interface::getShippingTaxAmount() const {
    return m_shipping_tax_amount;
}
void OAISales_data_total_interface::setShippingTaxAmount(const double &shipping_tax_amount) {
    m_shipping_tax_amount = shipping_tax_amount;
    m_shipping_tax_amount_isSet = true;
}

bool OAISales_data_total_interface::is_shipping_tax_amount_Set() const{
    return m_shipping_tax_amount_isSet;
}

bool OAISales_data_total_interface::is_shipping_tax_amount_Valid() const{
    return m_shipping_tax_amount_isValid;
}

double OAISales_data_total_interface::getShippingTaxRefunded() const {
    return m_shipping_tax_refunded;
}
void OAISales_data_total_interface::setShippingTaxRefunded(const double &shipping_tax_refunded) {
    m_shipping_tax_refunded = shipping_tax_refunded;
    m_shipping_tax_refunded_isSet = true;
}

bool OAISales_data_total_interface::is_shipping_tax_refunded_Set() const{
    return m_shipping_tax_refunded_isSet;
}

bool OAISales_data_total_interface::is_shipping_tax_refunded_Valid() const{
    return m_shipping_tax_refunded_isValid;
}

bool OAISales_data_total_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_shipping_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_discount_tax_compensation_amnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_tax_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_discount_tax_compensation_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_tax_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISales_data_total_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
