/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFramework_search_criteria_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFramework_search_criteria_interface::OAIFramework_search_criteria_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFramework_search_criteria_interface::OAIFramework_search_criteria_interface() {
    this->initializeModel();
}

OAIFramework_search_criteria_interface::~OAIFramework_search_criteria_interface() {}

void OAIFramework_search_criteria_interface::initializeModel() {

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_filter_groups_isSet = false;
    m_filter_groups_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_sort_orders_isSet = false;
    m_sort_orders_isValid = false;
}

void OAIFramework_search_criteria_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFramework_search_criteria_interface::fromJsonObject(QJsonObject json) {

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("current_page")]);
    m_current_page_isSet = !json[QString("current_page")].isNull() && m_current_page_isValid;

    m_filter_groups_isValid = ::OpenAPI::fromJsonValue(m_filter_groups, json[QString("filter_groups")]);
    m_filter_groups_isSet = !json[QString("filter_groups")].isNull() && m_filter_groups_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;

    m_sort_orders_isValid = ::OpenAPI::fromJsonValue(m_sort_orders, json[QString("sort_orders")]);
    m_sort_orders_isSet = !json[QString("sort_orders")].isNull() && m_sort_orders_isValid;
}

QString OAIFramework_search_criteria_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFramework_search_criteria_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_current_page_isSet) {
        obj.insert(QString("current_page"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_filter_groups.size() > 0) {
        obj.insert(QString("filter_groups"), ::OpenAPI::toJsonValue(m_filter_groups));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_sort_orders.size() > 0) {
        obj.insert(QString("sort_orders"), ::OpenAPI::toJsonValue(m_sort_orders));
    }
    return obj;
}

qint32 OAIFramework_search_criteria_interface::getCurrentPage() const {
    return m_current_page;
}
void OAIFramework_search_criteria_interface::setCurrentPage(const qint32 &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIFramework_search_criteria_interface::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIFramework_search_criteria_interface::is_current_page_Valid() const{
    return m_current_page_isValid;
}

QList<OAIFramework_search_filter_group> OAIFramework_search_criteria_interface::getFilterGroups() const {
    return m_filter_groups;
}
void OAIFramework_search_criteria_interface::setFilterGroups(const QList<OAIFramework_search_filter_group> &filter_groups) {
    m_filter_groups = filter_groups;
    m_filter_groups_isSet = true;
}

bool OAIFramework_search_criteria_interface::is_filter_groups_Set() const{
    return m_filter_groups_isSet;
}

bool OAIFramework_search_criteria_interface::is_filter_groups_Valid() const{
    return m_filter_groups_isValid;
}

qint32 OAIFramework_search_criteria_interface::getPageSize() const {
    return m_page_size;
}
void OAIFramework_search_criteria_interface::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIFramework_search_criteria_interface::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIFramework_search_criteria_interface::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QList<OAIFramework_sort_order> OAIFramework_search_criteria_interface::getSortOrders() const {
    return m_sort_orders;
}
void OAIFramework_search_criteria_interface::setSortOrders(const QList<OAIFramework_sort_order> &sort_orders) {
    m_sort_orders = sort_orders;
    m_sort_orders_isSet = true;
}

bool OAIFramework_search_criteria_interface::is_sort_orders_Set() const{
    return m_sort_orders_isSet;
}

bool OAIFramework_search_criteria_interface::is_sort_orders_Valid() const{
    return m_sort_orders_isValid;
}

bool OAIFramework_search_criteria_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_orders.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFramework_search_criteria_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_groups_isValid && true;
}

} // namespace OpenAPI
