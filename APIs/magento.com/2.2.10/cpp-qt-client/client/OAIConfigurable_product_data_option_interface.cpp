/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigurable_product_data_option_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigurable_product_data_option_interface::OAIConfigurable_product_data_option_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigurable_product_data_option_interface::OAIConfigurable_product_data_option_interface() {
    this->initializeModel();
}

OAIConfigurable_product_data_option_interface::~OAIConfigurable_product_data_option_interface() {}

void OAIConfigurable_product_data_option_interface::initializeModel() {

    m_attribute_id_isSet = false;
    m_attribute_id_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_use_default_isSet = false;
    m_is_use_default_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIConfigurable_product_data_option_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigurable_product_data_option_interface::fromJsonObject(QJsonObject json) {

    m_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_attribute_id, json[QString("attribute_id")]);
    m_attribute_id_isSet = !json[QString("attribute_id")].isNull() && m_attribute_id_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_use_default_isValid = ::OpenAPI::fromJsonValue(m_is_use_default, json[QString("is_use_default")]);
    m_is_use_default_isSet = !json[QString("is_use_default")].isNull() && m_is_use_default_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("product_id")]);
    m_product_id_isSet = !json[QString("product_id")].isNull() && m_product_id_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIConfigurable_product_data_option_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigurable_product_data_option_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_id_isSet) {
        obj.insert(QString("attribute_id"), ::OpenAPI::toJsonValue(m_attribute_id));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_use_default_isSet) {
        obj.insert(QString("is_use_default"), ::OpenAPI::toJsonValue(m_is_use_default));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("product_id"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIConfigurable_product_data_option_interface::getAttributeId() const {
    return m_attribute_id;
}
void OAIConfigurable_product_data_option_interface::setAttributeId(const QString &attribute_id) {
    m_attribute_id = attribute_id;
    m_attribute_id_isSet = true;
}

bool OAIConfigurable_product_data_option_interface::is_attribute_id_Set() const{
    return m_attribute_id_isSet;
}

bool OAIConfigurable_product_data_option_interface::is_attribute_id_Valid() const{
    return m_attribute_id_isValid;
}

OAIObject OAIConfigurable_product_data_option_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIConfigurable_product_data_option_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIConfigurable_product_data_option_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIConfigurable_product_data_option_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAIConfigurable_product_data_option_interface::getId() const {
    return m_id;
}
void OAIConfigurable_product_data_option_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConfigurable_product_data_option_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConfigurable_product_data_option_interface::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIConfigurable_product_data_option_interface::isIsUseDefault() const {
    return m_is_use_default;
}
void OAIConfigurable_product_data_option_interface::setIsUseDefault(const bool &is_use_default) {
    m_is_use_default = is_use_default;
    m_is_use_default_isSet = true;
}

bool OAIConfigurable_product_data_option_interface::is_is_use_default_Set() const{
    return m_is_use_default_isSet;
}

bool OAIConfigurable_product_data_option_interface::is_is_use_default_Valid() const{
    return m_is_use_default_isValid;
}

QString OAIConfigurable_product_data_option_interface::getLabel() const {
    return m_label;
}
void OAIConfigurable_product_data_option_interface::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIConfigurable_product_data_option_interface::is_label_Set() const{
    return m_label_isSet;
}

bool OAIConfigurable_product_data_option_interface::is_label_Valid() const{
    return m_label_isValid;
}

qint32 OAIConfigurable_product_data_option_interface::getPosition() const {
    return m_position;
}
void OAIConfigurable_product_data_option_interface::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIConfigurable_product_data_option_interface::is_position_Set() const{
    return m_position_isSet;
}

bool OAIConfigurable_product_data_option_interface::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAIConfigurable_product_data_option_interface::getProductId() const {
    return m_product_id;
}
void OAIConfigurable_product_data_option_interface::setProductId(const qint32 &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIConfigurable_product_data_option_interface::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIConfigurable_product_data_option_interface::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QList<OAIConfigurable_product_data_option_value_interface> OAIConfigurable_product_data_option_interface::getValues() const {
    return m_values;
}
void OAIConfigurable_product_data_option_interface::setValues(const QList<OAIConfigurable_product_data_option_value_interface> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIConfigurable_product_data_option_interface::is_values_Set() const{
    return m_values_isSet;
}

bool OAIConfigurable_product_data_option_interface::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIConfigurable_product_data_option_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_use_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigurable_product_data_option_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
