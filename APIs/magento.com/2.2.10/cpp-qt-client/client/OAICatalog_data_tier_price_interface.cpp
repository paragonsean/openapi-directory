/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog_data_tier_price_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog_data_tier_price_interface::OAICatalog_data_tier_price_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog_data_tier_price_interface::OAICatalog_data_tier_price_interface() {
    this->initializeModel();
}

OAICatalog_data_tier_price_interface::~OAICatalog_data_tier_price_interface() {}

void OAICatalog_data_tier_price_interface::initializeModel() {

    m_customer_group_isSet = false;
    m_customer_group_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_type_isSet = false;
    m_price_type_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_website_id_isSet = false;
    m_website_id_isValid = false;
}

void OAICatalog_data_tier_price_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog_data_tier_price_interface::fromJsonObject(QJsonObject json) {

    m_customer_group_isValid = ::OpenAPI::fromJsonValue(m_customer_group, json[QString("customer_group")]);
    m_customer_group_isSet = !json[QString("customer_group")].isNull() && m_customer_group_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_type_isValid = ::OpenAPI::fromJsonValue(m_price_type, json[QString("price_type")]);
    m_price_type_isSet = !json[QString("price_type")].isNull() && m_price_type_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_website_id_isValid = ::OpenAPI::fromJsonValue(m_website_id, json[QString("website_id")]);
    m_website_id_isSet = !json[QString("website_id")].isNull() && m_website_id_isValid;
}

QString OAICatalog_data_tier_price_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog_data_tier_price_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_group_isSet) {
        obj.insert(QString("customer_group"), ::OpenAPI::toJsonValue(m_customer_group));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_type_isSet) {
        obj.insert(QString("price_type"), ::OpenAPI::toJsonValue(m_price_type));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_website_id_isSet) {
        obj.insert(QString("website_id"), ::OpenAPI::toJsonValue(m_website_id));
    }
    return obj;
}

QString OAICatalog_data_tier_price_interface::getCustomerGroup() const {
    return m_customer_group;
}
void OAICatalog_data_tier_price_interface::setCustomerGroup(const QString &customer_group) {
    m_customer_group = customer_group;
    m_customer_group_isSet = true;
}

bool OAICatalog_data_tier_price_interface::is_customer_group_Set() const{
    return m_customer_group_isSet;
}

bool OAICatalog_data_tier_price_interface::is_customer_group_Valid() const{
    return m_customer_group_isValid;
}

OAIObject OAICatalog_data_tier_price_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAICatalog_data_tier_price_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAICatalog_data_tier_price_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAICatalog_data_tier_price_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

double OAICatalog_data_tier_price_interface::getPrice() const {
    return m_price;
}
void OAICatalog_data_tier_price_interface::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICatalog_data_tier_price_interface::is_price_Set() const{
    return m_price_isSet;
}

bool OAICatalog_data_tier_price_interface::is_price_Valid() const{
    return m_price_isValid;
}

QString OAICatalog_data_tier_price_interface::getPriceType() const {
    return m_price_type;
}
void OAICatalog_data_tier_price_interface::setPriceType(const QString &price_type) {
    m_price_type = price_type;
    m_price_type_isSet = true;
}

bool OAICatalog_data_tier_price_interface::is_price_type_Set() const{
    return m_price_type_isSet;
}

bool OAICatalog_data_tier_price_interface::is_price_type_Valid() const{
    return m_price_type_isValid;
}

double OAICatalog_data_tier_price_interface::getQuantity() const {
    return m_quantity;
}
void OAICatalog_data_tier_price_interface::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAICatalog_data_tier_price_interface::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAICatalog_data_tier_price_interface::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAICatalog_data_tier_price_interface::getSku() const {
    return m_sku;
}
void OAICatalog_data_tier_price_interface::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAICatalog_data_tier_price_interface::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAICatalog_data_tier_price_interface::is_sku_Valid() const{
    return m_sku_isValid;
}

qint32 OAICatalog_data_tier_price_interface::getWebsiteId() const {
    return m_website_id;
}
void OAICatalog_data_tier_price_interface::setWebsiteId(const qint32 &website_id) {
    m_website_id = website_id;
    m_website_id_isSet = true;
}

bool OAICatalog_data_tier_price_interface::is_website_id_Set() const{
    return m_website_id_isSet;
}

bool OAICatalog_data_tier_price_interface::is_website_id_Valid() const{
    return m_website_id_isValid;
}

bool OAICatalog_data_tier_price_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog_data_tier_price_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_customer_group_isValid && m_price_isValid && m_price_type_isValid && m_quantity_isValid && m_sku_isValid && m_website_id_isValid && true;
}

} // namespace OpenAPI
