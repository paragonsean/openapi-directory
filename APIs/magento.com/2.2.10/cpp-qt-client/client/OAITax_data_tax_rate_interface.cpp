/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITax_data_tax_rate_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITax_data_tax_rate_interface::OAITax_data_tax_rate_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITax_data_tax_rate_interface::OAITax_data_tax_rate_interface() {
    this->initializeModel();
}

OAITax_data_tax_rate_interface::~OAITax_data_tax_rate_interface() {}

void OAITax_data_tax_rate_interface::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_region_name_isSet = false;
    m_region_name_isValid = false;

    m_tax_country_id_isSet = false;
    m_tax_country_id_isValid = false;

    m_tax_postcode_isSet = false;
    m_tax_postcode_isValid = false;

    m_tax_region_id_isSet = false;
    m_tax_region_id_isValid = false;

    m_titles_isSet = false;
    m_titles_isValid = false;

    m_zip_from_isSet = false;
    m_zip_from_isValid = false;

    m_zip_is_range_isSet = false;
    m_zip_is_range_isValid = false;

    m_zip_to_isSet = false;
    m_zip_to_isValid = false;
}

void OAITax_data_tax_rate_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITax_data_tax_rate_interface::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_region_name_isValid = ::OpenAPI::fromJsonValue(m_region_name, json[QString("region_name")]);
    m_region_name_isSet = !json[QString("region_name")].isNull() && m_region_name_isValid;

    m_tax_country_id_isValid = ::OpenAPI::fromJsonValue(m_tax_country_id, json[QString("tax_country_id")]);
    m_tax_country_id_isSet = !json[QString("tax_country_id")].isNull() && m_tax_country_id_isValid;

    m_tax_postcode_isValid = ::OpenAPI::fromJsonValue(m_tax_postcode, json[QString("tax_postcode")]);
    m_tax_postcode_isSet = !json[QString("tax_postcode")].isNull() && m_tax_postcode_isValid;

    m_tax_region_id_isValid = ::OpenAPI::fromJsonValue(m_tax_region_id, json[QString("tax_region_id")]);
    m_tax_region_id_isSet = !json[QString("tax_region_id")].isNull() && m_tax_region_id_isValid;

    m_titles_isValid = ::OpenAPI::fromJsonValue(m_titles, json[QString("titles")]);
    m_titles_isSet = !json[QString("titles")].isNull() && m_titles_isValid;

    m_zip_from_isValid = ::OpenAPI::fromJsonValue(m_zip_from, json[QString("zip_from")]);
    m_zip_from_isSet = !json[QString("zip_from")].isNull() && m_zip_from_isValid;

    m_zip_is_range_isValid = ::OpenAPI::fromJsonValue(m_zip_is_range, json[QString("zip_is_range")]);
    m_zip_is_range_isSet = !json[QString("zip_is_range")].isNull() && m_zip_is_range_isValid;

    m_zip_to_isValid = ::OpenAPI::fromJsonValue(m_zip_to, json[QString("zip_to")]);
    m_zip_to_isSet = !json[QString("zip_to")].isNull() && m_zip_to_isValid;
}

QString OAITax_data_tax_rate_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITax_data_tax_rate_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_region_name_isSet) {
        obj.insert(QString("region_name"), ::OpenAPI::toJsonValue(m_region_name));
    }
    if (m_tax_country_id_isSet) {
        obj.insert(QString("tax_country_id"), ::OpenAPI::toJsonValue(m_tax_country_id));
    }
    if (m_tax_postcode_isSet) {
        obj.insert(QString("tax_postcode"), ::OpenAPI::toJsonValue(m_tax_postcode));
    }
    if (m_tax_region_id_isSet) {
        obj.insert(QString("tax_region_id"), ::OpenAPI::toJsonValue(m_tax_region_id));
    }
    if (m_titles.size() > 0) {
        obj.insert(QString("titles"), ::OpenAPI::toJsonValue(m_titles));
    }
    if (m_zip_from_isSet) {
        obj.insert(QString("zip_from"), ::OpenAPI::toJsonValue(m_zip_from));
    }
    if (m_zip_is_range_isSet) {
        obj.insert(QString("zip_is_range"), ::OpenAPI::toJsonValue(m_zip_is_range));
    }
    if (m_zip_to_isSet) {
        obj.insert(QString("zip_to"), ::OpenAPI::toJsonValue(m_zip_to));
    }
    return obj;
}

QString OAITax_data_tax_rate_interface::getCode() const {
    return m_code;
}
void OAITax_data_tax_rate_interface::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAITax_data_tax_rate_interface::is_code_Set() const{
    return m_code_isSet;
}

bool OAITax_data_tax_rate_interface::is_code_Valid() const{
    return m_code_isValid;
}

OAIObject OAITax_data_tax_rate_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAITax_data_tax_rate_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAITax_data_tax_rate_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAITax_data_tax_rate_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAITax_data_tax_rate_interface::getId() const {
    return m_id;
}
void OAITax_data_tax_rate_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITax_data_tax_rate_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAITax_data_tax_rate_interface::is_id_Valid() const{
    return m_id_isValid;
}

double OAITax_data_tax_rate_interface::getRate() const {
    return m_rate;
}
void OAITax_data_tax_rate_interface::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAITax_data_tax_rate_interface::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAITax_data_tax_rate_interface::is_rate_Valid() const{
    return m_rate_isValid;
}

QString OAITax_data_tax_rate_interface::getRegionName() const {
    return m_region_name;
}
void OAITax_data_tax_rate_interface::setRegionName(const QString &region_name) {
    m_region_name = region_name;
    m_region_name_isSet = true;
}

bool OAITax_data_tax_rate_interface::is_region_name_Set() const{
    return m_region_name_isSet;
}

bool OAITax_data_tax_rate_interface::is_region_name_Valid() const{
    return m_region_name_isValid;
}

QString OAITax_data_tax_rate_interface::getTaxCountryId() const {
    return m_tax_country_id;
}
void OAITax_data_tax_rate_interface::setTaxCountryId(const QString &tax_country_id) {
    m_tax_country_id = tax_country_id;
    m_tax_country_id_isSet = true;
}

bool OAITax_data_tax_rate_interface::is_tax_country_id_Set() const{
    return m_tax_country_id_isSet;
}

bool OAITax_data_tax_rate_interface::is_tax_country_id_Valid() const{
    return m_tax_country_id_isValid;
}

QString OAITax_data_tax_rate_interface::getTaxPostcode() const {
    return m_tax_postcode;
}
void OAITax_data_tax_rate_interface::setTaxPostcode(const QString &tax_postcode) {
    m_tax_postcode = tax_postcode;
    m_tax_postcode_isSet = true;
}

bool OAITax_data_tax_rate_interface::is_tax_postcode_Set() const{
    return m_tax_postcode_isSet;
}

bool OAITax_data_tax_rate_interface::is_tax_postcode_Valid() const{
    return m_tax_postcode_isValid;
}

qint32 OAITax_data_tax_rate_interface::getTaxRegionId() const {
    return m_tax_region_id;
}
void OAITax_data_tax_rate_interface::setTaxRegionId(const qint32 &tax_region_id) {
    m_tax_region_id = tax_region_id;
    m_tax_region_id_isSet = true;
}

bool OAITax_data_tax_rate_interface::is_tax_region_id_Set() const{
    return m_tax_region_id_isSet;
}

bool OAITax_data_tax_rate_interface::is_tax_region_id_Valid() const{
    return m_tax_region_id_isValid;
}

QList<OAITax_data_tax_rate_title_interface> OAITax_data_tax_rate_interface::getTitles() const {
    return m_titles;
}
void OAITax_data_tax_rate_interface::setTitles(const QList<OAITax_data_tax_rate_title_interface> &titles) {
    m_titles = titles;
    m_titles_isSet = true;
}

bool OAITax_data_tax_rate_interface::is_titles_Set() const{
    return m_titles_isSet;
}

bool OAITax_data_tax_rate_interface::is_titles_Valid() const{
    return m_titles_isValid;
}

qint32 OAITax_data_tax_rate_interface::getZipFrom() const {
    return m_zip_from;
}
void OAITax_data_tax_rate_interface::setZipFrom(const qint32 &zip_from) {
    m_zip_from = zip_from;
    m_zip_from_isSet = true;
}

bool OAITax_data_tax_rate_interface::is_zip_from_Set() const{
    return m_zip_from_isSet;
}

bool OAITax_data_tax_rate_interface::is_zip_from_Valid() const{
    return m_zip_from_isValid;
}

qint32 OAITax_data_tax_rate_interface::getZipIsRange() const {
    return m_zip_is_range;
}
void OAITax_data_tax_rate_interface::setZipIsRange(const qint32 &zip_is_range) {
    m_zip_is_range = zip_is_range;
    m_zip_is_range_isSet = true;
}

bool OAITax_data_tax_rate_interface::is_zip_is_range_Set() const{
    return m_zip_is_range_isSet;
}

bool OAITax_data_tax_rate_interface::is_zip_is_range_Valid() const{
    return m_zip_is_range_isValid;
}

qint32 OAITax_data_tax_rate_interface::getZipTo() const {
    return m_zip_to;
}
void OAITax_data_tax_rate_interface::setZipTo(const qint32 &zip_to) {
    m_zip_to = zip_to;
    m_zip_to_isSet = true;
}

bool OAITax_data_tax_rate_interface::is_zip_to_Set() const{
    return m_zip_to_isSet;
}

bool OAITax_data_tax_rate_interface::is_zip_to_Valid() const{
    return m_zip_to_isValid;
}

bool OAITax_data_tax_rate_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_country_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_region_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_titles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_is_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITax_data_tax_rate_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_rate_isValid && m_tax_country_id_isValid && true;
}

} // namespace OpenAPI
