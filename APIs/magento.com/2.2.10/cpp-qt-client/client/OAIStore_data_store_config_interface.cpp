/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStore_data_store_config_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStore_data_store_config_interface::OAIStore_data_store_config_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStore_data_store_config_interface::OAIStore_data_store_config_interface() {
    this->initializeModel();
}

OAIStore_data_store_config_interface::~OAIStore_data_store_config_interface() {}

void OAIStore_data_store_config_interface::initializeModel() {

    m_base_currency_code_isSet = false;
    m_base_currency_code_isValid = false;

    m_base_link_url_isSet = false;
    m_base_link_url_isValid = false;

    m_base_media_url_isSet = false;
    m_base_media_url_isValid = false;

    m_base_static_url_isSet = false;
    m_base_static_url_isValid = false;

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_default_display_currency_code_isSet = false;
    m_default_display_currency_code_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_secure_base_link_url_isSet = false;
    m_secure_base_link_url_isValid = false;

    m_secure_base_media_url_isSet = false;
    m_secure_base_media_url_isValid = false;

    m_secure_base_static_url_isSet = false;
    m_secure_base_static_url_isValid = false;

    m_secure_base_url_isSet = false;
    m_secure_base_url_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_website_id_isSet = false;
    m_website_id_isValid = false;

    m_weight_unit_isSet = false;
    m_weight_unit_isValid = false;
}

void OAIStore_data_store_config_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStore_data_store_config_interface::fromJsonObject(QJsonObject json) {

    m_base_currency_code_isValid = ::OpenAPI::fromJsonValue(m_base_currency_code, json[QString("base_currency_code")]);
    m_base_currency_code_isSet = !json[QString("base_currency_code")].isNull() && m_base_currency_code_isValid;

    m_base_link_url_isValid = ::OpenAPI::fromJsonValue(m_base_link_url, json[QString("base_link_url")]);
    m_base_link_url_isSet = !json[QString("base_link_url")].isNull() && m_base_link_url_isValid;

    m_base_media_url_isValid = ::OpenAPI::fromJsonValue(m_base_media_url, json[QString("base_media_url")]);
    m_base_media_url_isSet = !json[QString("base_media_url")].isNull() && m_base_media_url_isValid;

    m_base_static_url_isValid = ::OpenAPI::fromJsonValue(m_base_static_url, json[QString("base_static_url")]);
    m_base_static_url_isSet = !json[QString("base_static_url")].isNull() && m_base_static_url_isValid;

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("base_url")]);
    m_base_url_isSet = !json[QString("base_url")].isNull() && m_base_url_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_default_display_currency_code_isValid = ::OpenAPI::fromJsonValue(m_default_display_currency_code, json[QString("default_display_currency_code")]);
    m_default_display_currency_code_isSet = !json[QString("default_display_currency_code")].isNull() && m_default_display_currency_code_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_secure_base_link_url_isValid = ::OpenAPI::fromJsonValue(m_secure_base_link_url, json[QString("secure_base_link_url")]);
    m_secure_base_link_url_isSet = !json[QString("secure_base_link_url")].isNull() && m_secure_base_link_url_isValid;

    m_secure_base_media_url_isValid = ::OpenAPI::fromJsonValue(m_secure_base_media_url, json[QString("secure_base_media_url")]);
    m_secure_base_media_url_isSet = !json[QString("secure_base_media_url")].isNull() && m_secure_base_media_url_isValid;

    m_secure_base_static_url_isValid = ::OpenAPI::fromJsonValue(m_secure_base_static_url, json[QString("secure_base_static_url")]);
    m_secure_base_static_url_isSet = !json[QString("secure_base_static_url")].isNull() && m_secure_base_static_url_isValid;

    m_secure_base_url_isValid = ::OpenAPI::fromJsonValue(m_secure_base_url, json[QString("secure_base_url")]);
    m_secure_base_url_isSet = !json[QString("secure_base_url")].isNull() && m_secure_base_url_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_website_id_isValid = ::OpenAPI::fromJsonValue(m_website_id, json[QString("website_id")]);
    m_website_id_isSet = !json[QString("website_id")].isNull() && m_website_id_isValid;

    m_weight_unit_isValid = ::OpenAPI::fromJsonValue(m_weight_unit, json[QString("weight_unit")]);
    m_weight_unit_isSet = !json[QString("weight_unit")].isNull() && m_weight_unit_isValid;
}

QString OAIStore_data_store_config_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStore_data_store_config_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_base_currency_code_isSet) {
        obj.insert(QString("base_currency_code"), ::OpenAPI::toJsonValue(m_base_currency_code));
    }
    if (m_base_link_url_isSet) {
        obj.insert(QString("base_link_url"), ::OpenAPI::toJsonValue(m_base_link_url));
    }
    if (m_base_media_url_isSet) {
        obj.insert(QString("base_media_url"), ::OpenAPI::toJsonValue(m_base_media_url));
    }
    if (m_base_static_url_isSet) {
        obj.insert(QString("base_static_url"), ::OpenAPI::toJsonValue(m_base_static_url));
    }
    if (m_base_url_isSet) {
        obj.insert(QString("base_url"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_default_display_currency_code_isSet) {
        obj.insert(QString("default_display_currency_code"), ::OpenAPI::toJsonValue(m_default_display_currency_code));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_secure_base_link_url_isSet) {
        obj.insert(QString("secure_base_link_url"), ::OpenAPI::toJsonValue(m_secure_base_link_url));
    }
    if (m_secure_base_media_url_isSet) {
        obj.insert(QString("secure_base_media_url"), ::OpenAPI::toJsonValue(m_secure_base_media_url));
    }
    if (m_secure_base_static_url_isSet) {
        obj.insert(QString("secure_base_static_url"), ::OpenAPI::toJsonValue(m_secure_base_static_url));
    }
    if (m_secure_base_url_isSet) {
        obj.insert(QString("secure_base_url"), ::OpenAPI::toJsonValue(m_secure_base_url));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_website_id_isSet) {
        obj.insert(QString("website_id"), ::OpenAPI::toJsonValue(m_website_id));
    }
    if (m_weight_unit_isSet) {
        obj.insert(QString("weight_unit"), ::OpenAPI::toJsonValue(m_weight_unit));
    }
    return obj;
}

QString OAIStore_data_store_config_interface::getBaseCurrencyCode() const {
    return m_base_currency_code;
}
void OAIStore_data_store_config_interface::setBaseCurrencyCode(const QString &base_currency_code) {
    m_base_currency_code = base_currency_code;
    m_base_currency_code_isSet = true;
}

bool OAIStore_data_store_config_interface::is_base_currency_code_Set() const{
    return m_base_currency_code_isSet;
}

bool OAIStore_data_store_config_interface::is_base_currency_code_Valid() const{
    return m_base_currency_code_isValid;
}

QString OAIStore_data_store_config_interface::getBaseLinkUrl() const {
    return m_base_link_url;
}
void OAIStore_data_store_config_interface::setBaseLinkUrl(const QString &base_link_url) {
    m_base_link_url = base_link_url;
    m_base_link_url_isSet = true;
}

bool OAIStore_data_store_config_interface::is_base_link_url_Set() const{
    return m_base_link_url_isSet;
}

bool OAIStore_data_store_config_interface::is_base_link_url_Valid() const{
    return m_base_link_url_isValid;
}

QString OAIStore_data_store_config_interface::getBaseMediaUrl() const {
    return m_base_media_url;
}
void OAIStore_data_store_config_interface::setBaseMediaUrl(const QString &base_media_url) {
    m_base_media_url = base_media_url;
    m_base_media_url_isSet = true;
}

bool OAIStore_data_store_config_interface::is_base_media_url_Set() const{
    return m_base_media_url_isSet;
}

bool OAIStore_data_store_config_interface::is_base_media_url_Valid() const{
    return m_base_media_url_isValid;
}

QString OAIStore_data_store_config_interface::getBaseStaticUrl() const {
    return m_base_static_url;
}
void OAIStore_data_store_config_interface::setBaseStaticUrl(const QString &base_static_url) {
    m_base_static_url = base_static_url;
    m_base_static_url_isSet = true;
}

bool OAIStore_data_store_config_interface::is_base_static_url_Set() const{
    return m_base_static_url_isSet;
}

bool OAIStore_data_store_config_interface::is_base_static_url_Valid() const{
    return m_base_static_url_isValid;
}

QString OAIStore_data_store_config_interface::getBaseUrl() const {
    return m_base_url;
}
void OAIStore_data_store_config_interface::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIStore_data_store_config_interface::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIStore_data_store_config_interface::is_base_url_Valid() const{
    return m_base_url_isValid;
}

QString OAIStore_data_store_config_interface::getCode() const {
    return m_code;
}
void OAIStore_data_store_config_interface::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIStore_data_store_config_interface::is_code_Set() const{
    return m_code_isSet;
}

bool OAIStore_data_store_config_interface::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIStore_data_store_config_interface::getDefaultDisplayCurrencyCode() const {
    return m_default_display_currency_code;
}
void OAIStore_data_store_config_interface::setDefaultDisplayCurrencyCode(const QString &default_display_currency_code) {
    m_default_display_currency_code = default_display_currency_code;
    m_default_display_currency_code_isSet = true;
}

bool OAIStore_data_store_config_interface::is_default_display_currency_code_Set() const{
    return m_default_display_currency_code_isSet;
}

bool OAIStore_data_store_config_interface::is_default_display_currency_code_Valid() const{
    return m_default_display_currency_code_isValid;
}

OAIObject OAIStore_data_store_config_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIStore_data_store_config_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIStore_data_store_config_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIStore_data_store_config_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAIStore_data_store_config_interface::getId() const {
    return m_id;
}
void OAIStore_data_store_config_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStore_data_store_config_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStore_data_store_config_interface::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStore_data_store_config_interface::getLocale() const {
    return m_locale;
}
void OAIStore_data_store_config_interface::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIStore_data_store_config_interface::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIStore_data_store_config_interface::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIStore_data_store_config_interface::getSecureBaseLinkUrl() const {
    return m_secure_base_link_url;
}
void OAIStore_data_store_config_interface::setSecureBaseLinkUrl(const QString &secure_base_link_url) {
    m_secure_base_link_url = secure_base_link_url;
    m_secure_base_link_url_isSet = true;
}

bool OAIStore_data_store_config_interface::is_secure_base_link_url_Set() const{
    return m_secure_base_link_url_isSet;
}

bool OAIStore_data_store_config_interface::is_secure_base_link_url_Valid() const{
    return m_secure_base_link_url_isValid;
}

QString OAIStore_data_store_config_interface::getSecureBaseMediaUrl() const {
    return m_secure_base_media_url;
}
void OAIStore_data_store_config_interface::setSecureBaseMediaUrl(const QString &secure_base_media_url) {
    m_secure_base_media_url = secure_base_media_url;
    m_secure_base_media_url_isSet = true;
}

bool OAIStore_data_store_config_interface::is_secure_base_media_url_Set() const{
    return m_secure_base_media_url_isSet;
}

bool OAIStore_data_store_config_interface::is_secure_base_media_url_Valid() const{
    return m_secure_base_media_url_isValid;
}

QString OAIStore_data_store_config_interface::getSecureBaseStaticUrl() const {
    return m_secure_base_static_url;
}
void OAIStore_data_store_config_interface::setSecureBaseStaticUrl(const QString &secure_base_static_url) {
    m_secure_base_static_url = secure_base_static_url;
    m_secure_base_static_url_isSet = true;
}

bool OAIStore_data_store_config_interface::is_secure_base_static_url_Set() const{
    return m_secure_base_static_url_isSet;
}

bool OAIStore_data_store_config_interface::is_secure_base_static_url_Valid() const{
    return m_secure_base_static_url_isValid;
}

QString OAIStore_data_store_config_interface::getSecureBaseUrl() const {
    return m_secure_base_url;
}
void OAIStore_data_store_config_interface::setSecureBaseUrl(const QString &secure_base_url) {
    m_secure_base_url = secure_base_url;
    m_secure_base_url_isSet = true;
}

bool OAIStore_data_store_config_interface::is_secure_base_url_Set() const{
    return m_secure_base_url_isSet;
}

bool OAIStore_data_store_config_interface::is_secure_base_url_Valid() const{
    return m_secure_base_url_isValid;
}

QString OAIStore_data_store_config_interface::getTimezone() const {
    return m_timezone;
}
void OAIStore_data_store_config_interface::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIStore_data_store_config_interface::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIStore_data_store_config_interface::is_timezone_Valid() const{
    return m_timezone_isValid;
}

qint32 OAIStore_data_store_config_interface::getWebsiteId() const {
    return m_website_id;
}
void OAIStore_data_store_config_interface::setWebsiteId(const qint32 &website_id) {
    m_website_id = website_id;
    m_website_id_isSet = true;
}

bool OAIStore_data_store_config_interface::is_website_id_Set() const{
    return m_website_id_isSet;
}

bool OAIStore_data_store_config_interface::is_website_id_Valid() const{
    return m_website_id_isValid;
}

QString OAIStore_data_store_config_interface::getWeightUnit() const {
    return m_weight_unit;
}
void OAIStore_data_store_config_interface::setWeightUnit(const QString &weight_unit) {
    m_weight_unit = weight_unit;
    m_weight_unit_isSet = true;
}

bool OAIStore_data_store_config_interface::is_weight_unit_Set() const{
    return m_weight_unit_isSet;
}

bool OAIStore_data_store_config_interface::is_weight_unit_Valid() const{
    return m_weight_unit_isValid;
}

bool OAIStore_data_store_config_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_link_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_media_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_static_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_display_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_base_link_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_base_media_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_base_static_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStore_data_store_config_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_currency_code_isValid && m_base_link_url_isValid && m_base_media_url_isValid && m_base_static_url_isValid && m_base_url_isValid && m_code_isValid && m_default_display_currency_code_isValid && m_id_isValid && m_locale_isValid && m_secure_base_link_url_isValid && m_secure_base_media_url_isValid && m_secure_base_static_url_isValid && m_secure_base_url_isValid && m_timezone_isValid && m_website_id_isValid && m_weight_unit_isValid && true;
}

} // namespace OpenAPI
