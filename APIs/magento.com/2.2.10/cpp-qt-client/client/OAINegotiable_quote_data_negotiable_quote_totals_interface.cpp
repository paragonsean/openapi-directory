/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINegotiable_quote_data_negotiable_quote_totals_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINegotiable_quote_data_negotiable_quote_totals_interface::OAINegotiable_quote_data_negotiable_quote_totals_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINegotiable_quote_data_negotiable_quote_totals_interface::OAINegotiable_quote_data_negotiable_quote_totals_interface() {
    this->initializeModel();
}

OAINegotiable_quote_data_negotiable_quote_totals_interface::~OAINegotiable_quote_data_negotiable_quote_totals_interface() {}

void OAINegotiable_quote_data_negotiable_quote_totals_interface::initializeModel() {

    m_base_cost_total_isSet = false;
    m_base_cost_total_isValid = false;

    m_base_original_price_incl_tax_isSet = false;
    m_base_original_price_incl_tax_isValid = false;

    m_base_original_tax_isSet = false;
    m_base_original_tax_isValid = false;

    m_base_original_total_isSet = false;
    m_base_original_total_isValid = false;

    m_base_to_quote_rate_isSet = false;
    m_base_to_quote_rate_isValid = false;

    m_cost_total_isSet = false;
    m_cost_total_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_customer_group_isSet = false;
    m_customer_group_isValid = false;

    m_items_count_isSet = false;
    m_items_count_isValid = false;

    m_negotiated_price_type_isSet = false;
    m_negotiated_price_type_isValid = false;

    m_negotiated_price_value_isSet = false;
    m_negotiated_price_value_isValid = false;

    m_original_price_incl_tax_isSet = false;
    m_original_price_incl_tax_isValid = false;

    m_original_tax_isSet = false;
    m_original_tax_isValid = false;

    m_original_total_isSet = false;
    m_original_total_isValid = false;

    m_quote_status_isSet = false;
    m_quote_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAINegotiable_quote_data_negotiable_quote_totals_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINegotiable_quote_data_negotiable_quote_totals_interface::fromJsonObject(QJsonObject json) {

    m_base_cost_total_isValid = ::OpenAPI::fromJsonValue(m_base_cost_total, json[QString("base_cost_total")]);
    m_base_cost_total_isSet = !json[QString("base_cost_total")].isNull() && m_base_cost_total_isValid;

    m_base_original_price_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_base_original_price_incl_tax, json[QString("base_original_price_incl_tax")]);
    m_base_original_price_incl_tax_isSet = !json[QString("base_original_price_incl_tax")].isNull() && m_base_original_price_incl_tax_isValid;

    m_base_original_tax_isValid = ::OpenAPI::fromJsonValue(m_base_original_tax, json[QString("base_original_tax")]);
    m_base_original_tax_isSet = !json[QString("base_original_tax")].isNull() && m_base_original_tax_isValid;

    m_base_original_total_isValid = ::OpenAPI::fromJsonValue(m_base_original_total, json[QString("base_original_total")]);
    m_base_original_total_isSet = !json[QString("base_original_total")].isNull() && m_base_original_total_isValid;

    m_base_to_quote_rate_isValid = ::OpenAPI::fromJsonValue(m_base_to_quote_rate, json[QString("base_to_quote_rate")]);
    m_base_to_quote_rate_isSet = !json[QString("base_to_quote_rate")].isNull() && m_base_to_quote_rate_isValid;

    m_cost_total_isValid = ::OpenAPI::fromJsonValue(m_cost_total, json[QString("cost_total")]);
    m_cost_total_isSet = !json[QString("cost_total")].isNull() && m_cost_total_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_customer_group_isValid = ::OpenAPI::fromJsonValue(m_customer_group, json[QString("customer_group")]);
    m_customer_group_isSet = !json[QString("customer_group")].isNull() && m_customer_group_isValid;

    m_items_count_isValid = ::OpenAPI::fromJsonValue(m_items_count, json[QString("items_count")]);
    m_items_count_isSet = !json[QString("items_count")].isNull() && m_items_count_isValid;

    m_negotiated_price_type_isValid = ::OpenAPI::fromJsonValue(m_negotiated_price_type, json[QString("negotiated_price_type")]);
    m_negotiated_price_type_isSet = !json[QString("negotiated_price_type")].isNull() && m_negotiated_price_type_isValid;

    m_negotiated_price_value_isValid = ::OpenAPI::fromJsonValue(m_negotiated_price_value, json[QString("negotiated_price_value")]);
    m_negotiated_price_value_isSet = !json[QString("negotiated_price_value")].isNull() && m_negotiated_price_value_isValid;

    m_original_price_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_original_price_incl_tax, json[QString("original_price_incl_tax")]);
    m_original_price_incl_tax_isSet = !json[QString("original_price_incl_tax")].isNull() && m_original_price_incl_tax_isValid;

    m_original_tax_isValid = ::OpenAPI::fromJsonValue(m_original_tax, json[QString("original_tax")]);
    m_original_tax_isSet = !json[QString("original_tax")].isNull() && m_original_tax_isValid;

    m_original_total_isValid = ::OpenAPI::fromJsonValue(m_original_total, json[QString("original_total")]);
    m_original_total_isSet = !json[QString("original_total")].isNull() && m_original_total_isValid;

    m_quote_status_isValid = ::OpenAPI::fromJsonValue(m_quote_status, json[QString("quote_status")]);
    m_quote_status_isSet = !json[QString("quote_status")].isNull() && m_quote_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAINegotiable_quote_data_negotiable_quote_totals_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINegotiable_quote_data_negotiable_quote_totals_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_base_cost_total_isSet) {
        obj.insert(QString("base_cost_total"), ::OpenAPI::toJsonValue(m_base_cost_total));
    }
    if (m_base_original_price_incl_tax_isSet) {
        obj.insert(QString("base_original_price_incl_tax"), ::OpenAPI::toJsonValue(m_base_original_price_incl_tax));
    }
    if (m_base_original_tax_isSet) {
        obj.insert(QString("base_original_tax"), ::OpenAPI::toJsonValue(m_base_original_tax));
    }
    if (m_base_original_total_isSet) {
        obj.insert(QString("base_original_total"), ::OpenAPI::toJsonValue(m_base_original_total));
    }
    if (m_base_to_quote_rate_isSet) {
        obj.insert(QString("base_to_quote_rate"), ::OpenAPI::toJsonValue(m_base_to_quote_rate));
    }
    if (m_cost_total_isSet) {
        obj.insert(QString("cost_total"), ::OpenAPI::toJsonValue(m_cost_total));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_customer_group_isSet) {
        obj.insert(QString("customer_group"), ::OpenAPI::toJsonValue(m_customer_group));
    }
    if (m_items_count_isSet) {
        obj.insert(QString("items_count"), ::OpenAPI::toJsonValue(m_items_count));
    }
    if (m_negotiated_price_type_isSet) {
        obj.insert(QString("negotiated_price_type"), ::OpenAPI::toJsonValue(m_negotiated_price_type));
    }
    if (m_negotiated_price_value_isSet) {
        obj.insert(QString("negotiated_price_value"), ::OpenAPI::toJsonValue(m_negotiated_price_value));
    }
    if (m_original_price_incl_tax_isSet) {
        obj.insert(QString("original_price_incl_tax"), ::OpenAPI::toJsonValue(m_original_price_incl_tax));
    }
    if (m_original_tax_isSet) {
        obj.insert(QString("original_tax"), ::OpenAPI::toJsonValue(m_original_tax));
    }
    if (m_original_total_isSet) {
        obj.insert(QString("original_total"), ::OpenAPI::toJsonValue(m_original_total));
    }
    if (m_quote_status_isSet) {
        obj.insert(QString("quote_status"), ::OpenAPI::toJsonValue(m_quote_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

double OAINegotiable_quote_data_negotiable_quote_totals_interface::getBaseCostTotal() const {
    return m_base_cost_total;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setBaseCostTotal(const double &base_cost_total) {
    m_base_cost_total = base_cost_total;
    m_base_cost_total_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_base_cost_total_Set() const{
    return m_base_cost_total_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_base_cost_total_Valid() const{
    return m_base_cost_total_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_totals_interface::getBaseOriginalPriceInclTax() const {
    return m_base_original_price_incl_tax;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setBaseOriginalPriceInclTax(const double &base_original_price_incl_tax) {
    m_base_original_price_incl_tax = base_original_price_incl_tax;
    m_base_original_price_incl_tax_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_base_original_price_incl_tax_Set() const{
    return m_base_original_price_incl_tax_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_base_original_price_incl_tax_Valid() const{
    return m_base_original_price_incl_tax_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_totals_interface::getBaseOriginalTax() const {
    return m_base_original_tax;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setBaseOriginalTax(const double &base_original_tax) {
    m_base_original_tax = base_original_tax;
    m_base_original_tax_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_base_original_tax_Set() const{
    return m_base_original_tax_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_base_original_tax_Valid() const{
    return m_base_original_tax_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_totals_interface::getBaseOriginalTotal() const {
    return m_base_original_total;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setBaseOriginalTotal(const double &base_original_total) {
    m_base_original_total = base_original_total;
    m_base_original_total_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_base_original_total_Set() const{
    return m_base_original_total_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_base_original_total_Valid() const{
    return m_base_original_total_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_totals_interface::getBaseToQuoteRate() const {
    return m_base_to_quote_rate;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setBaseToQuoteRate(const double &base_to_quote_rate) {
    m_base_to_quote_rate = base_to_quote_rate;
    m_base_to_quote_rate_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_base_to_quote_rate_Set() const{
    return m_base_to_quote_rate_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_base_to_quote_rate_Valid() const{
    return m_base_to_quote_rate_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_totals_interface::getCostTotal() const {
    return m_cost_total;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setCostTotal(const double &cost_total) {
    m_cost_total = cost_total;
    m_cost_total_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_cost_total_Set() const{
    return m_cost_total_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_cost_total_Valid() const{
    return m_cost_total_isValid;
}

QString OAINegotiable_quote_data_negotiable_quote_totals_interface::getCreatedAt() const {
    return m_created_at;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAINegotiable_quote_data_negotiable_quote_totals_interface::getCustomerGroup() const {
    return m_customer_group;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setCustomerGroup(const qint32 &customer_group) {
    m_customer_group = customer_group;
    m_customer_group_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_customer_group_Set() const{
    return m_customer_group_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_customer_group_Valid() const{
    return m_customer_group_isValid;
}

qint32 OAINegotiable_quote_data_negotiable_quote_totals_interface::getItemsCount() const {
    return m_items_count;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setItemsCount(const qint32 &items_count) {
    m_items_count = items_count;
    m_items_count_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_items_count_Set() const{
    return m_items_count_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_items_count_Valid() const{
    return m_items_count_isValid;
}

qint32 OAINegotiable_quote_data_negotiable_quote_totals_interface::getNegotiatedPriceType() const {
    return m_negotiated_price_type;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setNegotiatedPriceType(const qint32 &negotiated_price_type) {
    m_negotiated_price_type = negotiated_price_type;
    m_negotiated_price_type_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_negotiated_price_type_Set() const{
    return m_negotiated_price_type_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_negotiated_price_type_Valid() const{
    return m_negotiated_price_type_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_totals_interface::getNegotiatedPriceValue() const {
    return m_negotiated_price_value;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setNegotiatedPriceValue(const double &negotiated_price_value) {
    m_negotiated_price_value = negotiated_price_value;
    m_negotiated_price_value_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_negotiated_price_value_Set() const{
    return m_negotiated_price_value_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_negotiated_price_value_Valid() const{
    return m_negotiated_price_value_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_totals_interface::getOriginalPriceInclTax() const {
    return m_original_price_incl_tax;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setOriginalPriceInclTax(const double &original_price_incl_tax) {
    m_original_price_incl_tax = original_price_incl_tax;
    m_original_price_incl_tax_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_original_price_incl_tax_Set() const{
    return m_original_price_incl_tax_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_original_price_incl_tax_Valid() const{
    return m_original_price_incl_tax_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_totals_interface::getOriginalTax() const {
    return m_original_tax;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setOriginalTax(const double &original_tax) {
    m_original_tax = original_tax;
    m_original_tax_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_original_tax_Set() const{
    return m_original_tax_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_original_tax_Valid() const{
    return m_original_tax_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_totals_interface::getOriginalTotal() const {
    return m_original_total;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setOriginalTotal(const double &original_total) {
    m_original_total = original_total;
    m_original_total_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_original_total_Set() const{
    return m_original_total_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_original_total_Valid() const{
    return m_original_total_isValid;
}

QString OAINegotiable_quote_data_negotiable_quote_totals_interface::getQuoteStatus() const {
    return m_quote_status;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setQuoteStatus(const QString &quote_status) {
    m_quote_status = quote_status;
    m_quote_status_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_quote_status_Set() const{
    return m_quote_status_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_quote_status_Valid() const{
    return m_quote_status_isValid;
}

QString OAINegotiable_quote_data_negotiable_quote_totals_interface::getUpdatedAt() const {
    return m_updated_at;
}
void OAINegotiable_quote_data_negotiable_quote_totals_interface::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_cost_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_original_price_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_original_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_original_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_to_quote_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negotiated_price_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negotiated_price_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_price_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINegotiable_quote_data_negotiable_quote_totals_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_cost_total_isValid && m_base_original_price_incl_tax_isValid && m_base_original_tax_isValid && m_base_original_total_isValid && m_base_to_quote_rate_isValid && m_cost_total_isValid && m_created_at_isValid && m_customer_group_isValid && m_items_count_isValid && m_negotiated_price_type_isValid && m_negotiated_price_value_isValid && m_original_price_incl_tax_isValid && m_original_tax_isValid && m_original_total_isValid && m_quote_status_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
