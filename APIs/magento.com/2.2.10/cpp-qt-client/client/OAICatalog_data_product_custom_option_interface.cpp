/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog_data_product_custom_option_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog_data_product_custom_option_interface::OAICatalog_data_product_custom_option_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog_data_product_custom_option_interface::OAICatalog_data_product_custom_option_interface() {
    this->initializeModel();
}

OAICatalog_data_product_custom_option_interface::~OAICatalog_data_product_custom_option_interface() {}

void OAICatalog_data_product_custom_option_interface::initializeModel() {

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_file_extension_isSet = false;
    m_file_extension_isValid = false;

    m_image_size_x_isSet = false;
    m_image_size_x_isValid = false;

    m_image_size_y_isSet = false;
    m_image_size_y_isValid = false;

    m_is_require_isSet = false;
    m_is_require_isValid = false;

    m_max_characters_isSet = false;
    m_max_characters_isValid = false;

    m_option_id_isSet = false;
    m_option_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_type_isSet = false;
    m_price_type_isValid = false;

    m_product_sku_isSet = false;
    m_product_sku_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAICatalog_data_product_custom_option_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog_data_product_custom_option_interface::fromJsonObject(QJsonObject json) {

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_file_extension_isValid = ::OpenAPI::fromJsonValue(m_file_extension, json[QString("file_extension")]);
    m_file_extension_isSet = !json[QString("file_extension")].isNull() && m_file_extension_isValid;

    m_image_size_x_isValid = ::OpenAPI::fromJsonValue(m_image_size_x, json[QString("image_size_x")]);
    m_image_size_x_isSet = !json[QString("image_size_x")].isNull() && m_image_size_x_isValid;

    m_image_size_y_isValid = ::OpenAPI::fromJsonValue(m_image_size_y, json[QString("image_size_y")]);
    m_image_size_y_isSet = !json[QString("image_size_y")].isNull() && m_image_size_y_isValid;

    m_is_require_isValid = ::OpenAPI::fromJsonValue(m_is_require, json[QString("is_require")]);
    m_is_require_isSet = !json[QString("is_require")].isNull() && m_is_require_isValid;

    m_max_characters_isValid = ::OpenAPI::fromJsonValue(m_max_characters, json[QString("max_characters")]);
    m_max_characters_isSet = !json[QString("max_characters")].isNull() && m_max_characters_isValid;

    m_option_id_isValid = ::OpenAPI::fromJsonValue(m_option_id, json[QString("option_id")]);
    m_option_id_isSet = !json[QString("option_id")].isNull() && m_option_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_type_isValid = ::OpenAPI::fromJsonValue(m_price_type, json[QString("price_type")]);
    m_price_type_isSet = !json[QString("price_type")].isNull() && m_price_type_isValid;

    m_product_sku_isValid = ::OpenAPI::fromJsonValue(m_product_sku, json[QString("product_sku")]);
    m_product_sku_isSet = !json[QString("product_sku")].isNull() && m_product_sku_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAICatalog_data_product_custom_option_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog_data_product_custom_option_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_file_extension_isSet) {
        obj.insert(QString("file_extension"), ::OpenAPI::toJsonValue(m_file_extension));
    }
    if (m_image_size_x_isSet) {
        obj.insert(QString("image_size_x"), ::OpenAPI::toJsonValue(m_image_size_x));
    }
    if (m_image_size_y_isSet) {
        obj.insert(QString("image_size_y"), ::OpenAPI::toJsonValue(m_image_size_y));
    }
    if (m_is_require_isSet) {
        obj.insert(QString("is_require"), ::OpenAPI::toJsonValue(m_is_require));
    }
    if (m_max_characters_isSet) {
        obj.insert(QString("max_characters"), ::OpenAPI::toJsonValue(m_max_characters));
    }
    if (m_option_id_isSet) {
        obj.insert(QString("option_id"), ::OpenAPI::toJsonValue(m_option_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_type_isSet) {
        obj.insert(QString("price_type"), ::OpenAPI::toJsonValue(m_price_type));
    }
    if (m_product_sku_isSet) {
        obj.insert(QString("product_sku"), ::OpenAPI::toJsonValue(m_product_sku));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

OAICatalog_data_product_custom_option_extension_interface OAICatalog_data_product_custom_option_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAICatalog_data_product_custom_option_interface::setExtensionAttributes(const OAICatalog_data_product_custom_option_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAICatalog_data_product_custom_option_interface::getFileExtension() const {
    return m_file_extension;
}
void OAICatalog_data_product_custom_option_interface::setFileExtension(const QString &file_extension) {
    m_file_extension = file_extension;
    m_file_extension_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_file_extension_Set() const{
    return m_file_extension_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_file_extension_Valid() const{
    return m_file_extension_isValid;
}

qint32 OAICatalog_data_product_custom_option_interface::getImageSizeX() const {
    return m_image_size_x;
}
void OAICatalog_data_product_custom_option_interface::setImageSizeX(const qint32 &image_size_x) {
    m_image_size_x = image_size_x;
    m_image_size_x_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_image_size_x_Set() const{
    return m_image_size_x_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_image_size_x_Valid() const{
    return m_image_size_x_isValid;
}

qint32 OAICatalog_data_product_custom_option_interface::getImageSizeY() const {
    return m_image_size_y;
}
void OAICatalog_data_product_custom_option_interface::setImageSizeY(const qint32 &image_size_y) {
    m_image_size_y = image_size_y;
    m_image_size_y_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_image_size_y_Set() const{
    return m_image_size_y_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_image_size_y_Valid() const{
    return m_image_size_y_isValid;
}

bool OAICatalog_data_product_custom_option_interface::isIsRequire() const {
    return m_is_require;
}
void OAICatalog_data_product_custom_option_interface::setIsRequire(const bool &is_require) {
    m_is_require = is_require;
    m_is_require_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_is_require_Set() const{
    return m_is_require_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_is_require_Valid() const{
    return m_is_require_isValid;
}

qint32 OAICatalog_data_product_custom_option_interface::getMaxCharacters() const {
    return m_max_characters;
}
void OAICatalog_data_product_custom_option_interface::setMaxCharacters(const qint32 &max_characters) {
    m_max_characters = max_characters;
    m_max_characters_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_max_characters_Set() const{
    return m_max_characters_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_max_characters_Valid() const{
    return m_max_characters_isValid;
}

qint32 OAICatalog_data_product_custom_option_interface::getOptionId() const {
    return m_option_id;
}
void OAICatalog_data_product_custom_option_interface::setOptionId(const qint32 &option_id) {
    m_option_id = option_id;
    m_option_id_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_option_id_Set() const{
    return m_option_id_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_option_id_Valid() const{
    return m_option_id_isValid;
}

double OAICatalog_data_product_custom_option_interface::getPrice() const {
    return m_price;
}
void OAICatalog_data_product_custom_option_interface::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_price_Set() const{
    return m_price_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_price_Valid() const{
    return m_price_isValid;
}

QString OAICatalog_data_product_custom_option_interface::getPriceType() const {
    return m_price_type;
}
void OAICatalog_data_product_custom_option_interface::setPriceType(const QString &price_type) {
    m_price_type = price_type;
    m_price_type_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_price_type_Set() const{
    return m_price_type_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_price_type_Valid() const{
    return m_price_type_isValid;
}

QString OAICatalog_data_product_custom_option_interface::getProductSku() const {
    return m_product_sku;
}
void OAICatalog_data_product_custom_option_interface::setProductSku(const QString &product_sku) {
    m_product_sku = product_sku;
    m_product_sku_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_product_sku_Set() const{
    return m_product_sku_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_product_sku_Valid() const{
    return m_product_sku_isValid;
}

QString OAICatalog_data_product_custom_option_interface::getSku() const {
    return m_sku;
}
void OAICatalog_data_product_custom_option_interface::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_sku_Valid() const{
    return m_sku_isValid;
}

qint32 OAICatalog_data_product_custom_option_interface::getSortOrder() const {
    return m_sort_order;
}
void OAICatalog_data_product_custom_option_interface::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAICatalog_data_product_custom_option_interface::getTitle() const {
    return m_title;
}
void OAICatalog_data_product_custom_option_interface::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_title_Set() const{
    return m_title_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICatalog_data_product_custom_option_interface::getType() const {
    return m_type;
}
void OAICatalog_data_product_custom_option_interface::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_type_Set() const{
    return m_type_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAICatalog_data_product_custom_option_values_interface> OAICatalog_data_product_custom_option_interface::getValues() const {
    return m_values;
}
void OAICatalog_data_product_custom_option_interface::setValues(const QList<OAICatalog_data_product_custom_option_values_interface> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAICatalog_data_product_custom_option_interface::is_values_Set() const{
    return m_values_isSet;
}

bool OAICatalog_data_product_custom_option_interface::is_values_Valid() const{
    return m_values_isValid;
}

bool OAICatalog_data_product_custom_option_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_size_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_size_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_require_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_characters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog_data_product_custom_option_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_require_isValid && m_product_sku_isValid && m_sort_order_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
