/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuote_data_cart_extension_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuote_data_cart_extension_interface::OAIQuote_data_cart_extension_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuote_data_cart_extension_interface::OAIQuote_data_cart_extension_interface() {
    this->initializeModel();
}

OAIQuote_data_cart_extension_interface::~OAIQuote_data_cart_extension_interface() {}

void OAIQuote_data_cart_extension_interface::initializeModel() {

    m_amazon_order_reference_id_isSet = false;
    m_amazon_order_reference_id_isValid = false;

    m_negotiable_quote_isSet = false;
    m_negotiable_quote_isValid = false;

    m_shipping_assignments_isSet = false;
    m_shipping_assignments_isValid = false;
}

void OAIQuote_data_cart_extension_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuote_data_cart_extension_interface::fromJsonObject(QJsonObject json) {

    m_amazon_order_reference_id_isValid = ::OpenAPI::fromJsonValue(m_amazon_order_reference_id, json[QString("amazon_order_reference_id")]);
    m_amazon_order_reference_id_isSet = !json[QString("amazon_order_reference_id")].isNull() && m_amazon_order_reference_id_isValid;

    m_negotiable_quote_isValid = ::OpenAPI::fromJsonValue(m_negotiable_quote, json[QString("negotiable_quote")]);
    m_negotiable_quote_isSet = !json[QString("negotiable_quote")].isNull() && m_negotiable_quote_isValid;

    m_shipping_assignments_isValid = ::OpenAPI::fromJsonValue(m_shipping_assignments, json[QString("shipping_assignments")]);
    m_shipping_assignments_isSet = !json[QString("shipping_assignments")].isNull() && m_shipping_assignments_isValid;
}

QString OAIQuote_data_cart_extension_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuote_data_cart_extension_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_amazon_order_reference_id_isSet) {
        obj.insert(QString("amazon_order_reference_id"), ::OpenAPI::toJsonValue(m_amazon_order_reference_id));
    }
    if (m_negotiable_quote.isSet()) {
        obj.insert(QString("negotiable_quote"), ::OpenAPI::toJsonValue(m_negotiable_quote));
    }
    if (m_shipping_assignments.size() > 0) {
        obj.insert(QString("shipping_assignments"), ::OpenAPI::toJsonValue(m_shipping_assignments));
    }
    return obj;
}

QString OAIQuote_data_cart_extension_interface::getAmazonOrderReferenceId() const {
    return m_amazon_order_reference_id;
}
void OAIQuote_data_cart_extension_interface::setAmazonOrderReferenceId(const QString &amazon_order_reference_id) {
    m_amazon_order_reference_id = amazon_order_reference_id;
    m_amazon_order_reference_id_isSet = true;
}

bool OAIQuote_data_cart_extension_interface::is_amazon_order_reference_id_Set() const{
    return m_amazon_order_reference_id_isSet;
}

bool OAIQuote_data_cart_extension_interface::is_amazon_order_reference_id_Valid() const{
    return m_amazon_order_reference_id_isValid;
}

OAINegotiable_quote_data_negotiable_quote_interface OAIQuote_data_cart_extension_interface::getNegotiableQuote() const {
    return m_negotiable_quote;
}
void OAIQuote_data_cart_extension_interface::setNegotiableQuote(const OAINegotiable_quote_data_negotiable_quote_interface &negotiable_quote) {
    m_negotiable_quote = negotiable_quote;
    m_negotiable_quote_isSet = true;
}

bool OAIQuote_data_cart_extension_interface::is_negotiable_quote_Set() const{
    return m_negotiable_quote_isSet;
}

bool OAIQuote_data_cart_extension_interface::is_negotiable_quote_Valid() const{
    return m_negotiable_quote_isValid;
}

QList<OAIQuote_data_shipping_assignment_interface> OAIQuote_data_cart_extension_interface::getShippingAssignments() const {
    return m_shipping_assignments;
}
void OAIQuote_data_cart_extension_interface::setShippingAssignments(const QList<OAIQuote_data_shipping_assignment_interface> &shipping_assignments) {
    m_shipping_assignments = shipping_assignments;
    m_shipping_assignments_isSet = true;
}

bool OAIQuote_data_cart_extension_interface::is_shipping_assignments_Set() const{
    return m_shipping_assignments_isSet;
}

bool OAIQuote_data_cart_extension_interface::is_shipping_assignments_Valid() const{
    return m_shipping_assignments_isValid;
}

bool OAIQuote_data_cart_extension_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amazon_order_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negotiable_quote.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuote_data_cart_extension_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
