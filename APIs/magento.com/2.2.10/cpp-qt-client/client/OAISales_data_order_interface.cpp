/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISales_data_order_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISales_data_order_interface::OAISales_data_order_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISales_data_order_interface::OAISales_data_order_interface() {
    this->initializeModel();
}

OAISales_data_order_interface::~OAISales_data_order_interface() {}

void OAISales_data_order_interface::initializeModel() {

    m_adjustment_negative_isSet = false;
    m_adjustment_negative_isValid = false;

    m_adjustment_positive_isSet = false;
    m_adjustment_positive_isValid = false;

    m_applied_rule_ids_isSet = false;
    m_applied_rule_ids_isValid = false;

    m_base_adjustment_negative_isSet = false;
    m_base_adjustment_negative_isValid = false;

    m_base_adjustment_positive_isSet = false;
    m_base_adjustment_positive_isValid = false;

    m_base_currency_code_isSet = false;
    m_base_currency_code_isValid = false;

    m_base_discount_amount_isSet = false;
    m_base_discount_amount_isValid = false;

    m_base_discount_canceled_isSet = false;
    m_base_discount_canceled_isValid = false;

    m_base_discount_invoiced_isSet = false;
    m_base_discount_invoiced_isValid = false;

    m_base_discount_refunded_isSet = false;
    m_base_discount_refunded_isValid = false;

    m_base_discount_tax_compensation_amount_isSet = false;
    m_base_discount_tax_compensation_amount_isValid = false;

    m_base_discount_tax_compensation_invoiced_isSet = false;
    m_base_discount_tax_compensation_invoiced_isValid = false;

    m_base_discount_tax_compensation_refunded_isSet = false;
    m_base_discount_tax_compensation_refunded_isValid = false;

    m_base_grand_total_isSet = false;
    m_base_grand_total_isValid = false;

    m_base_shipping_amount_isSet = false;
    m_base_shipping_amount_isValid = false;

    m_base_shipping_canceled_isSet = false;
    m_base_shipping_canceled_isValid = false;

    m_base_shipping_discount_amount_isSet = false;
    m_base_shipping_discount_amount_isValid = false;

    m_base_shipping_discount_tax_compensation_amnt_isSet = false;
    m_base_shipping_discount_tax_compensation_amnt_isValid = false;

    m_base_shipping_incl_tax_isSet = false;
    m_base_shipping_incl_tax_isValid = false;

    m_base_shipping_invoiced_isSet = false;
    m_base_shipping_invoiced_isValid = false;

    m_base_shipping_refunded_isSet = false;
    m_base_shipping_refunded_isValid = false;

    m_base_shipping_tax_amount_isSet = false;
    m_base_shipping_tax_amount_isValid = false;

    m_base_shipping_tax_refunded_isSet = false;
    m_base_shipping_tax_refunded_isValid = false;

    m_base_subtotal_isSet = false;
    m_base_subtotal_isValid = false;

    m_base_subtotal_canceled_isSet = false;
    m_base_subtotal_canceled_isValid = false;

    m_base_subtotal_incl_tax_isSet = false;
    m_base_subtotal_incl_tax_isValid = false;

    m_base_subtotal_invoiced_isSet = false;
    m_base_subtotal_invoiced_isValid = false;

    m_base_subtotal_refunded_isSet = false;
    m_base_subtotal_refunded_isValid = false;

    m_base_tax_amount_isSet = false;
    m_base_tax_amount_isValid = false;

    m_base_tax_canceled_isSet = false;
    m_base_tax_canceled_isValid = false;

    m_base_tax_invoiced_isSet = false;
    m_base_tax_invoiced_isValid = false;

    m_base_tax_refunded_isSet = false;
    m_base_tax_refunded_isValid = false;

    m_base_to_global_rate_isSet = false;
    m_base_to_global_rate_isValid = false;

    m_base_to_order_rate_isSet = false;
    m_base_to_order_rate_isValid = false;

    m_base_total_canceled_isSet = false;
    m_base_total_canceled_isValid = false;

    m_base_total_due_isSet = false;
    m_base_total_due_isValid = false;

    m_base_total_invoiced_isSet = false;
    m_base_total_invoiced_isValid = false;

    m_base_total_invoiced_cost_isSet = false;
    m_base_total_invoiced_cost_isValid = false;

    m_base_total_offline_refunded_isSet = false;
    m_base_total_offline_refunded_isValid = false;

    m_base_total_online_refunded_isSet = false;
    m_base_total_online_refunded_isValid = false;

    m_base_total_paid_isSet = false;
    m_base_total_paid_isValid = false;

    m_base_total_qty_ordered_isSet = false;
    m_base_total_qty_ordered_isValid = false;

    m_base_total_refunded_isSet = false;
    m_base_total_refunded_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_billing_address_id_isSet = false;
    m_billing_address_id_isValid = false;

    m_can_ship_partially_isSet = false;
    m_can_ship_partially_isValid = false;

    m_can_ship_partially_item_isSet = false;
    m_can_ship_partially_item_isValid = false;

    m_coupon_code_isSet = false;
    m_coupon_code_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_customer_dob_isSet = false;
    m_customer_dob_isValid = false;

    m_customer_email_isSet = false;
    m_customer_email_isValid = false;

    m_customer_firstname_isSet = false;
    m_customer_firstname_isValid = false;

    m_customer_gender_isSet = false;
    m_customer_gender_isValid = false;

    m_customer_group_id_isSet = false;
    m_customer_group_id_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_customer_is_guest_isSet = false;
    m_customer_is_guest_isValid = false;

    m_customer_lastname_isSet = false;
    m_customer_lastname_isValid = false;

    m_customer_middlename_isSet = false;
    m_customer_middlename_isValid = false;

    m_customer_note_isSet = false;
    m_customer_note_isValid = false;

    m_customer_note_notify_isSet = false;
    m_customer_note_notify_isValid = false;

    m_customer_prefix_isSet = false;
    m_customer_prefix_isValid = false;

    m_customer_suffix_isSet = false;
    m_customer_suffix_isValid = false;

    m_customer_taxvat_isSet = false;
    m_customer_taxvat_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_canceled_isSet = false;
    m_discount_canceled_isValid = false;

    m_discount_description_isSet = false;
    m_discount_description_isValid = false;

    m_discount_invoiced_isSet = false;
    m_discount_invoiced_isValid = false;

    m_discount_refunded_isSet = false;
    m_discount_refunded_isValid = false;

    m_discount_tax_compensation_amount_isSet = false;
    m_discount_tax_compensation_amount_isValid = false;

    m_discount_tax_compensation_invoiced_isSet = false;
    m_discount_tax_compensation_invoiced_isValid = false;

    m_discount_tax_compensation_refunded_isSet = false;
    m_discount_tax_compensation_refunded_isValid = false;

    m_edit_increment_isSet = false;
    m_edit_increment_isValid = false;

    m_email_sent_isSet = false;
    m_email_sent_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_ext_customer_id_isSet = false;
    m_ext_customer_id_isValid = false;

    m_ext_order_id_isSet = false;
    m_ext_order_id_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_forced_shipment_with_invoice_isSet = false;
    m_forced_shipment_with_invoice_isValid = false;

    m_global_currency_code_isSet = false;
    m_global_currency_code_isValid = false;

    m_grand_total_isSet = false;
    m_grand_total_isValid = false;

    m_hold_before_state_isSet = false;
    m_hold_before_state_isValid = false;

    m_hold_before_status_isSet = false;
    m_hold_before_status_isValid = false;

    m_increment_id_isSet = false;
    m_increment_id_isValid = false;

    m_is_virtual_isSet = false;
    m_is_virtual_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_order_currency_code_isSet = false;
    m_order_currency_code_isValid = false;

    m_original_increment_id_isSet = false;
    m_original_increment_id_isValid = false;

    m_payment_isSet = false;
    m_payment_isValid = false;

    m_payment_auth_expiration_isSet = false;
    m_payment_auth_expiration_isValid = false;

    m_payment_authorization_amount_isSet = false;
    m_payment_authorization_amount_isValid = false;

    m_protect_code_isSet = false;
    m_protect_code_isValid = false;

    m_quote_address_id_isSet = false;
    m_quote_address_id_isValid = false;

    m_quote_id_isSet = false;
    m_quote_id_isValid = false;

    m_relation_child_id_isSet = false;
    m_relation_child_id_isValid = false;

    m_relation_child_real_id_isSet = false;
    m_relation_child_real_id_isValid = false;

    m_relation_parent_id_isSet = false;
    m_relation_parent_id_isValid = false;

    m_relation_parent_real_id_isSet = false;
    m_relation_parent_real_id_isValid = false;

    m_remote_ip_isSet = false;
    m_remote_ip_isValid = false;

    m_shipping_amount_isSet = false;
    m_shipping_amount_isValid = false;

    m_shipping_canceled_isSet = false;
    m_shipping_canceled_isValid = false;

    m_shipping_description_isSet = false;
    m_shipping_description_isValid = false;

    m_shipping_discount_amount_isSet = false;
    m_shipping_discount_amount_isValid = false;

    m_shipping_discount_tax_compensation_amount_isSet = false;
    m_shipping_discount_tax_compensation_amount_isValid = false;

    m_shipping_incl_tax_isSet = false;
    m_shipping_incl_tax_isValid = false;

    m_shipping_invoiced_isSet = false;
    m_shipping_invoiced_isValid = false;

    m_shipping_refunded_isSet = false;
    m_shipping_refunded_isValid = false;

    m_shipping_tax_amount_isSet = false;
    m_shipping_tax_amount_isValid = false;

    m_shipping_tax_refunded_isSet = false;
    m_shipping_tax_refunded_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_histories_isSet = false;
    m_status_histories_isValid = false;

    m_store_currency_code_isSet = false;
    m_store_currency_code_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_store_name_isSet = false;
    m_store_name_isValid = false;

    m_store_to_base_rate_isSet = false;
    m_store_to_base_rate_isValid = false;

    m_store_to_order_rate_isSet = false;
    m_store_to_order_rate_isValid = false;

    m_subtotal_isSet = false;
    m_subtotal_isValid = false;

    m_subtotal_canceled_isSet = false;
    m_subtotal_canceled_isValid = false;

    m_subtotal_incl_tax_isSet = false;
    m_subtotal_incl_tax_isValid = false;

    m_subtotal_invoiced_isSet = false;
    m_subtotal_invoiced_isValid = false;

    m_subtotal_refunded_isSet = false;
    m_subtotal_refunded_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_canceled_isSet = false;
    m_tax_canceled_isValid = false;

    m_tax_invoiced_isSet = false;
    m_tax_invoiced_isValid = false;

    m_tax_refunded_isSet = false;
    m_tax_refunded_isValid = false;

    m_total_canceled_isSet = false;
    m_total_canceled_isValid = false;

    m_total_due_isSet = false;
    m_total_due_isValid = false;

    m_total_invoiced_isSet = false;
    m_total_invoiced_isValid = false;

    m_total_item_count_isSet = false;
    m_total_item_count_isValid = false;

    m_total_offline_refunded_isSet = false;
    m_total_offline_refunded_isValid = false;

    m_total_online_refunded_isSet = false;
    m_total_online_refunded_isValid = false;

    m_total_paid_isSet = false;
    m_total_paid_isValid = false;

    m_total_qty_ordered_isSet = false;
    m_total_qty_ordered_isValid = false;

    m_total_refunded_isSet = false;
    m_total_refunded_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_x_forwarded_for_isSet = false;
    m_x_forwarded_for_isValid = false;
}

void OAISales_data_order_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISales_data_order_interface::fromJsonObject(QJsonObject json) {

    m_adjustment_negative_isValid = ::OpenAPI::fromJsonValue(m_adjustment_negative, json[QString("adjustment_negative")]);
    m_adjustment_negative_isSet = !json[QString("adjustment_negative")].isNull() && m_adjustment_negative_isValid;

    m_adjustment_positive_isValid = ::OpenAPI::fromJsonValue(m_adjustment_positive, json[QString("adjustment_positive")]);
    m_adjustment_positive_isSet = !json[QString("adjustment_positive")].isNull() && m_adjustment_positive_isValid;

    m_applied_rule_ids_isValid = ::OpenAPI::fromJsonValue(m_applied_rule_ids, json[QString("applied_rule_ids")]);
    m_applied_rule_ids_isSet = !json[QString("applied_rule_ids")].isNull() && m_applied_rule_ids_isValid;

    m_base_adjustment_negative_isValid = ::OpenAPI::fromJsonValue(m_base_adjustment_negative, json[QString("base_adjustment_negative")]);
    m_base_adjustment_negative_isSet = !json[QString("base_adjustment_negative")].isNull() && m_base_adjustment_negative_isValid;

    m_base_adjustment_positive_isValid = ::OpenAPI::fromJsonValue(m_base_adjustment_positive, json[QString("base_adjustment_positive")]);
    m_base_adjustment_positive_isSet = !json[QString("base_adjustment_positive")].isNull() && m_base_adjustment_positive_isValid;

    m_base_currency_code_isValid = ::OpenAPI::fromJsonValue(m_base_currency_code, json[QString("base_currency_code")]);
    m_base_currency_code_isSet = !json[QString("base_currency_code")].isNull() && m_base_currency_code_isValid;

    m_base_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_base_discount_amount, json[QString("base_discount_amount")]);
    m_base_discount_amount_isSet = !json[QString("base_discount_amount")].isNull() && m_base_discount_amount_isValid;

    m_base_discount_canceled_isValid = ::OpenAPI::fromJsonValue(m_base_discount_canceled, json[QString("base_discount_canceled")]);
    m_base_discount_canceled_isSet = !json[QString("base_discount_canceled")].isNull() && m_base_discount_canceled_isValid;

    m_base_discount_invoiced_isValid = ::OpenAPI::fromJsonValue(m_base_discount_invoiced, json[QString("base_discount_invoiced")]);
    m_base_discount_invoiced_isSet = !json[QString("base_discount_invoiced")].isNull() && m_base_discount_invoiced_isValid;

    m_base_discount_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_discount_refunded, json[QString("base_discount_refunded")]);
    m_base_discount_refunded_isSet = !json[QString("base_discount_refunded")].isNull() && m_base_discount_refunded_isValid;

    m_base_discount_tax_compensation_amount_isValid = ::OpenAPI::fromJsonValue(m_base_discount_tax_compensation_amount, json[QString("base_discount_tax_compensation_amount")]);
    m_base_discount_tax_compensation_amount_isSet = !json[QString("base_discount_tax_compensation_amount")].isNull() && m_base_discount_tax_compensation_amount_isValid;

    m_base_discount_tax_compensation_invoiced_isValid = ::OpenAPI::fromJsonValue(m_base_discount_tax_compensation_invoiced, json[QString("base_discount_tax_compensation_invoiced")]);
    m_base_discount_tax_compensation_invoiced_isSet = !json[QString("base_discount_tax_compensation_invoiced")].isNull() && m_base_discount_tax_compensation_invoiced_isValid;

    m_base_discount_tax_compensation_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_discount_tax_compensation_refunded, json[QString("base_discount_tax_compensation_refunded")]);
    m_base_discount_tax_compensation_refunded_isSet = !json[QString("base_discount_tax_compensation_refunded")].isNull() && m_base_discount_tax_compensation_refunded_isValid;

    m_base_grand_total_isValid = ::OpenAPI::fromJsonValue(m_base_grand_total, json[QString("base_grand_total")]);
    m_base_grand_total_isSet = !json[QString("base_grand_total")].isNull() && m_base_grand_total_isValid;

    m_base_shipping_amount_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_amount, json[QString("base_shipping_amount")]);
    m_base_shipping_amount_isSet = !json[QString("base_shipping_amount")].isNull() && m_base_shipping_amount_isValid;

    m_base_shipping_canceled_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_canceled, json[QString("base_shipping_canceled")]);
    m_base_shipping_canceled_isSet = !json[QString("base_shipping_canceled")].isNull() && m_base_shipping_canceled_isValid;

    m_base_shipping_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_discount_amount, json[QString("base_shipping_discount_amount")]);
    m_base_shipping_discount_amount_isSet = !json[QString("base_shipping_discount_amount")].isNull() && m_base_shipping_discount_amount_isValid;

    m_base_shipping_discount_tax_compensation_amnt_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_discount_tax_compensation_amnt, json[QString("base_shipping_discount_tax_compensation_amnt")]);
    m_base_shipping_discount_tax_compensation_amnt_isSet = !json[QString("base_shipping_discount_tax_compensation_amnt")].isNull() && m_base_shipping_discount_tax_compensation_amnt_isValid;

    m_base_shipping_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_incl_tax, json[QString("base_shipping_incl_tax")]);
    m_base_shipping_incl_tax_isSet = !json[QString("base_shipping_incl_tax")].isNull() && m_base_shipping_incl_tax_isValid;

    m_base_shipping_invoiced_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_invoiced, json[QString("base_shipping_invoiced")]);
    m_base_shipping_invoiced_isSet = !json[QString("base_shipping_invoiced")].isNull() && m_base_shipping_invoiced_isValid;

    m_base_shipping_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_refunded, json[QString("base_shipping_refunded")]);
    m_base_shipping_refunded_isSet = !json[QString("base_shipping_refunded")].isNull() && m_base_shipping_refunded_isValid;

    m_base_shipping_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_tax_amount, json[QString("base_shipping_tax_amount")]);
    m_base_shipping_tax_amount_isSet = !json[QString("base_shipping_tax_amount")].isNull() && m_base_shipping_tax_amount_isValid;

    m_base_shipping_tax_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_tax_refunded, json[QString("base_shipping_tax_refunded")]);
    m_base_shipping_tax_refunded_isSet = !json[QString("base_shipping_tax_refunded")].isNull() && m_base_shipping_tax_refunded_isValid;

    m_base_subtotal_isValid = ::OpenAPI::fromJsonValue(m_base_subtotal, json[QString("base_subtotal")]);
    m_base_subtotal_isSet = !json[QString("base_subtotal")].isNull() && m_base_subtotal_isValid;

    m_base_subtotal_canceled_isValid = ::OpenAPI::fromJsonValue(m_base_subtotal_canceled, json[QString("base_subtotal_canceled")]);
    m_base_subtotal_canceled_isSet = !json[QString("base_subtotal_canceled")].isNull() && m_base_subtotal_canceled_isValid;

    m_base_subtotal_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_base_subtotal_incl_tax, json[QString("base_subtotal_incl_tax")]);
    m_base_subtotal_incl_tax_isSet = !json[QString("base_subtotal_incl_tax")].isNull() && m_base_subtotal_incl_tax_isValid;

    m_base_subtotal_invoiced_isValid = ::OpenAPI::fromJsonValue(m_base_subtotal_invoiced, json[QString("base_subtotal_invoiced")]);
    m_base_subtotal_invoiced_isSet = !json[QString("base_subtotal_invoiced")].isNull() && m_base_subtotal_invoiced_isValid;

    m_base_subtotal_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_subtotal_refunded, json[QString("base_subtotal_refunded")]);
    m_base_subtotal_refunded_isSet = !json[QString("base_subtotal_refunded")].isNull() && m_base_subtotal_refunded_isValid;

    m_base_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_base_tax_amount, json[QString("base_tax_amount")]);
    m_base_tax_amount_isSet = !json[QString("base_tax_amount")].isNull() && m_base_tax_amount_isValid;

    m_base_tax_canceled_isValid = ::OpenAPI::fromJsonValue(m_base_tax_canceled, json[QString("base_tax_canceled")]);
    m_base_tax_canceled_isSet = !json[QString("base_tax_canceled")].isNull() && m_base_tax_canceled_isValid;

    m_base_tax_invoiced_isValid = ::OpenAPI::fromJsonValue(m_base_tax_invoiced, json[QString("base_tax_invoiced")]);
    m_base_tax_invoiced_isSet = !json[QString("base_tax_invoiced")].isNull() && m_base_tax_invoiced_isValid;

    m_base_tax_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_tax_refunded, json[QString("base_tax_refunded")]);
    m_base_tax_refunded_isSet = !json[QString("base_tax_refunded")].isNull() && m_base_tax_refunded_isValid;

    m_base_to_global_rate_isValid = ::OpenAPI::fromJsonValue(m_base_to_global_rate, json[QString("base_to_global_rate")]);
    m_base_to_global_rate_isSet = !json[QString("base_to_global_rate")].isNull() && m_base_to_global_rate_isValid;

    m_base_to_order_rate_isValid = ::OpenAPI::fromJsonValue(m_base_to_order_rate, json[QString("base_to_order_rate")]);
    m_base_to_order_rate_isSet = !json[QString("base_to_order_rate")].isNull() && m_base_to_order_rate_isValid;

    m_base_total_canceled_isValid = ::OpenAPI::fromJsonValue(m_base_total_canceled, json[QString("base_total_canceled")]);
    m_base_total_canceled_isSet = !json[QString("base_total_canceled")].isNull() && m_base_total_canceled_isValid;

    m_base_total_due_isValid = ::OpenAPI::fromJsonValue(m_base_total_due, json[QString("base_total_due")]);
    m_base_total_due_isSet = !json[QString("base_total_due")].isNull() && m_base_total_due_isValid;

    m_base_total_invoiced_isValid = ::OpenAPI::fromJsonValue(m_base_total_invoiced, json[QString("base_total_invoiced")]);
    m_base_total_invoiced_isSet = !json[QString("base_total_invoiced")].isNull() && m_base_total_invoiced_isValid;

    m_base_total_invoiced_cost_isValid = ::OpenAPI::fromJsonValue(m_base_total_invoiced_cost, json[QString("base_total_invoiced_cost")]);
    m_base_total_invoiced_cost_isSet = !json[QString("base_total_invoiced_cost")].isNull() && m_base_total_invoiced_cost_isValid;

    m_base_total_offline_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_total_offline_refunded, json[QString("base_total_offline_refunded")]);
    m_base_total_offline_refunded_isSet = !json[QString("base_total_offline_refunded")].isNull() && m_base_total_offline_refunded_isValid;

    m_base_total_online_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_total_online_refunded, json[QString("base_total_online_refunded")]);
    m_base_total_online_refunded_isSet = !json[QString("base_total_online_refunded")].isNull() && m_base_total_online_refunded_isValid;

    m_base_total_paid_isValid = ::OpenAPI::fromJsonValue(m_base_total_paid, json[QString("base_total_paid")]);
    m_base_total_paid_isSet = !json[QString("base_total_paid")].isNull() && m_base_total_paid_isValid;

    m_base_total_qty_ordered_isValid = ::OpenAPI::fromJsonValue(m_base_total_qty_ordered, json[QString("base_total_qty_ordered")]);
    m_base_total_qty_ordered_isSet = !json[QString("base_total_qty_ordered")].isNull() && m_base_total_qty_ordered_isValid;

    m_base_total_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_total_refunded, json[QString("base_total_refunded")]);
    m_base_total_refunded_isSet = !json[QString("base_total_refunded")].isNull() && m_base_total_refunded_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billing_address")]);
    m_billing_address_isSet = !json[QString("billing_address")].isNull() && m_billing_address_isValid;

    m_billing_address_id_isValid = ::OpenAPI::fromJsonValue(m_billing_address_id, json[QString("billing_address_id")]);
    m_billing_address_id_isSet = !json[QString("billing_address_id")].isNull() && m_billing_address_id_isValid;

    m_can_ship_partially_isValid = ::OpenAPI::fromJsonValue(m_can_ship_partially, json[QString("can_ship_partially")]);
    m_can_ship_partially_isSet = !json[QString("can_ship_partially")].isNull() && m_can_ship_partially_isValid;

    m_can_ship_partially_item_isValid = ::OpenAPI::fromJsonValue(m_can_ship_partially_item, json[QString("can_ship_partially_item")]);
    m_can_ship_partially_item_isSet = !json[QString("can_ship_partially_item")].isNull() && m_can_ship_partially_item_isValid;

    m_coupon_code_isValid = ::OpenAPI::fromJsonValue(m_coupon_code, json[QString("coupon_code")]);
    m_coupon_code_isSet = !json[QString("coupon_code")].isNull() && m_coupon_code_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_customer_dob_isValid = ::OpenAPI::fromJsonValue(m_customer_dob, json[QString("customer_dob")]);
    m_customer_dob_isSet = !json[QString("customer_dob")].isNull() && m_customer_dob_isValid;

    m_customer_email_isValid = ::OpenAPI::fromJsonValue(m_customer_email, json[QString("customer_email")]);
    m_customer_email_isSet = !json[QString("customer_email")].isNull() && m_customer_email_isValid;

    m_customer_firstname_isValid = ::OpenAPI::fromJsonValue(m_customer_firstname, json[QString("customer_firstname")]);
    m_customer_firstname_isSet = !json[QString("customer_firstname")].isNull() && m_customer_firstname_isValid;

    m_customer_gender_isValid = ::OpenAPI::fromJsonValue(m_customer_gender, json[QString("customer_gender")]);
    m_customer_gender_isSet = !json[QString("customer_gender")].isNull() && m_customer_gender_isValid;

    m_customer_group_id_isValid = ::OpenAPI::fromJsonValue(m_customer_group_id, json[QString("customer_group_id")]);
    m_customer_group_id_isSet = !json[QString("customer_group_id")].isNull() && m_customer_group_id_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_customer_is_guest_isValid = ::OpenAPI::fromJsonValue(m_customer_is_guest, json[QString("customer_is_guest")]);
    m_customer_is_guest_isSet = !json[QString("customer_is_guest")].isNull() && m_customer_is_guest_isValid;

    m_customer_lastname_isValid = ::OpenAPI::fromJsonValue(m_customer_lastname, json[QString("customer_lastname")]);
    m_customer_lastname_isSet = !json[QString("customer_lastname")].isNull() && m_customer_lastname_isValid;

    m_customer_middlename_isValid = ::OpenAPI::fromJsonValue(m_customer_middlename, json[QString("customer_middlename")]);
    m_customer_middlename_isSet = !json[QString("customer_middlename")].isNull() && m_customer_middlename_isValid;

    m_customer_note_isValid = ::OpenAPI::fromJsonValue(m_customer_note, json[QString("customer_note")]);
    m_customer_note_isSet = !json[QString("customer_note")].isNull() && m_customer_note_isValid;

    m_customer_note_notify_isValid = ::OpenAPI::fromJsonValue(m_customer_note_notify, json[QString("customer_note_notify")]);
    m_customer_note_notify_isSet = !json[QString("customer_note_notify")].isNull() && m_customer_note_notify_isValid;

    m_customer_prefix_isValid = ::OpenAPI::fromJsonValue(m_customer_prefix, json[QString("customer_prefix")]);
    m_customer_prefix_isSet = !json[QString("customer_prefix")].isNull() && m_customer_prefix_isValid;

    m_customer_suffix_isValid = ::OpenAPI::fromJsonValue(m_customer_suffix, json[QString("customer_suffix")]);
    m_customer_suffix_isSet = !json[QString("customer_suffix")].isNull() && m_customer_suffix_isValid;

    m_customer_taxvat_isValid = ::OpenAPI::fromJsonValue(m_customer_taxvat, json[QString("customer_taxvat")]);
    m_customer_taxvat_isSet = !json[QString("customer_taxvat")].isNull() && m_customer_taxvat_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discount_amount")]);
    m_discount_amount_isSet = !json[QString("discount_amount")].isNull() && m_discount_amount_isValid;

    m_discount_canceled_isValid = ::OpenAPI::fromJsonValue(m_discount_canceled, json[QString("discount_canceled")]);
    m_discount_canceled_isSet = !json[QString("discount_canceled")].isNull() && m_discount_canceled_isValid;

    m_discount_description_isValid = ::OpenAPI::fromJsonValue(m_discount_description, json[QString("discount_description")]);
    m_discount_description_isSet = !json[QString("discount_description")].isNull() && m_discount_description_isValid;

    m_discount_invoiced_isValid = ::OpenAPI::fromJsonValue(m_discount_invoiced, json[QString("discount_invoiced")]);
    m_discount_invoiced_isSet = !json[QString("discount_invoiced")].isNull() && m_discount_invoiced_isValid;

    m_discount_refunded_isValid = ::OpenAPI::fromJsonValue(m_discount_refunded, json[QString("discount_refunded")]);
    m_discount_refunded_isSet = !json[QString("discount_refunded")].isNull() && m_discount_refunded_isValid;

    m_discount_tax_compensation_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_tax_compensation_amount, json[QString("discount_tax_compensation_amount")]);
    m_discount_tax_compensation_amount_isSet = !json[QString("discount_tax_compensation_amount")].isNull() && m_discount_tax_compensation_amount_isValid;

    m_discount_tax_compensation_invoiced_isValid = ::OpenAPI::fromJsonValue(m_discount_tax_compensation_invoiced, json[QString("discount_tax_compensation_invoiced")]);
    m_discount_tax_compensation_invoiced_isSet = !json[QString("discount_tax_compensation_invoiced")].isNull() && m_discount_tax_compensation_invoiced_isValid;

    m_discount_tax_compensation_refunded_isValid = ::OpenAPI::fromJsonValue(m_discount_tax_compensation_refunded, json[QString("discount_tax_compensation_refunded")]);
    m_discount_tax_compensation_refunded_isSet = !json[QString("discount_tax_compensation_refunded")].isNull() && m_discount_tax_compensation_refunded_isValid;

    m_edit_increment_isValid = ::OpenAPI::fromJsonValue(m_edit_increment, json[QString("edit_increment")]);
    m_edit_increment_isSet = !json[QString("edit_increment")].isNull() && m_edit_increment_isValid;

    m_email_sent_isValid = ::OpenAPI::fromJsonValue(m_email_sent, json[QString("email_sent")]);
    m_email_sent_isSet = !json[QString("email_sent")].isNull() && m_email_sent_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_ext_customer_id_isValid = ::OpenAPI::fromJsonValue(m_ext_customer_id, json[QString("ext_customer_id")]);
    m_ext_customer_id_isSet = !json[QString("ext_customer_id")].isNull() && m_ext_customer_id_isValid;

    m_ext_order_id_isValid = ::OpenAPI::fromJsonValue(m_ext_order_id, json[QString("ext_order_id")]);
    m_ext_order_id_isSet = !json[QString("ext_order_id")].isNull() && m_ext_order_id_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_forced_shipment_with_invoice_isValid = ::OpenAPI::fromJsonValue(m_forced_shipment_with_invoice, json[QString("forced_shipment_with_invoice")]);
    m_forced_shipment_with_invoice_isSet = !json[QString("forced_shipment_with_invoice")].isNull() && m_forced_shipment_with_invoice_isValid;

    m_global_currency_code_isValid = ::OpenAPI::fromJsonValue(m_global_currency_code, json[QString("global_currency_code")]);
    m_global_currency_code_isSet = !json[QString("global_currency_code")].isNull() && m_global_currency_code_isValid;

    m_grand_total_isValid = ::OpenAPI::fromJsonValue(m_grand_total, json[QString("grand_total")]);
    m_grand_total_isSet = !json[QString("grand_total")].isNull() && m_grand_total_isValid;

    m_hold_before_state_isValid = ::OpenAPI::fromJsonValue(m_hold_before_state, json[QString("hold_before_state")]);
    m_hold_before_state_isSet = !json[QString("hold_before_state")].isNull() && m_hold_before_state_isValid;

    m_hold_before_status_isValid = ::OpenAPI::fromJsonValue(m_hold_before_status, json[QString("hold_before_status")]);
    m_hold_before_status_isSet = !json[QString("hold_before_status")].isNull() && m_hold_before_status_isValid;

    m_increment_id_isValid = ::OpenAPI::fromJsonValue(m_increment_id, json[QString("increment_id")]);
    m_increment_id_isSet = !json[QString("increment_id")].isNull() && m_increment_id_isValid;

    m_is_virtual_isValid = ::OpenAPI::fromJsonValue(m_is_virtual, json[QString("is_virtual")]);
    m_is_virtual_isSet = !json[QString("is_virtual")].isNull() && m_is_virtual_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_order_currency_code_isValid = ::OpenAPI::fromJsonValue(m_order_currency_code, json[QString("order_currency_code")]);
    m_order_currency_code_isSet = !json[QString("order_currency_code")].isNull() && m_order_currency_code_isValid;

    m_original_increment_id_isValid = ::OpenAPI::fromJsonValue(m_original_increment_id, json[QString("original_increment_id")]);
    m_original_increment_id_isSet = !json[QString("original_increment_id")].isNull() && m_original_increment_id_isValid;

    m_payment_isValid = ::OpenAPI::fromJsonValue(m_payment, json[QString("payment")]);
    m_payment_isSet = !json[QString("payment")].isNull() && m_payment_isValid;

    m_payment_auth_expiration_isValid = ::OpenAPI::fromJsonValue(m_payment_auth_expiration, json[QString("payment_auth_expiration")]);
    m_payment_auth_expiration_isSet = !json[QString("payment_auth_expiration")].isNull() && m_payment_auth_expiration_isValid;

    m_payment_authorization_amount_isValid = ::OpenAPI::fromJsonValue(m_payment_authorization_amount, json[QString("payment_authorization_amount")]);
    m_payment_authorization_amount_isSet = !json[QString("payment_authorization_amount")].isNull() && m_payment_authorization_amount_isValid;

    m_protect_code_isValid = ::OpenAPI::fromJsonValue(m_protect_code, json[QString("protect_code")]);
    m_protect_code_isSet = !json[QString("protect_code")].isNull() && m_protect_code_isValid;

    m_quote_address_id_isValid = ::OpenAPI::fromJsonValue(m_quote_address_id, json[QString("quote_address_id")]);
    m_quote_address_id_isSet = !json[QString("quote_address_id")].isNull() && m_quote_address_id_isValid;

    m_quote_id_isValid = ::OpenAPI::fromJsonValue(m_quote_id, json[QString("quote_id")]);
    m_quote_id_isSet = !json[QString("quote_id")].isNull() && m_quote_id_isValid;

    m_relation_child_id_isValid = ::OpenAPI::fromJsonValue(m_relation_child_id, json[QString("relation_child_id")]);
    m_relation_child_id_isSet = !json[QString("relation_child_id")].isNull() && m_relation_child_id_isValid;

    m_relation_child_real_id_isValid = ::OpenAPI::fromJsonValue(m_relation_child_real_id, json[QString("relation_child_real_id")]);
    m_relation_child_real_id_isSet = !json[QString("relation_child_real_id")].isNull() && m_relation_child_real_id_isValid;

    m_relation_parent_id_isValid = ::OpenAPI::fromJsonValue(m_relation_parent_id, json[QString("relation_parent_id")]);
    m_relation_parent_id_isSet = !json[QString("relation_parent_id")].isNull() && m_relation_parent_id_isValid;

    m_relation_parent_real_id_isValid = ::OpenAPI::fromJsonValue(m_relation_parent_real_id, json[QString("relation_parent_real_id")]);
    m_relation_parent_real_id_isSet = !json[QString("relation_parent_real_id")].isNull() && m_relation_parent_real_id_isValid;

    m_remote_ip_isValid = ::OpenAPI::fromJsonValue(m_remote_ip, json[QString("remote_ip")]);
    m_remote_ip_isSet = !json[QString("remote_ip")].isNull() && m_remote_ip_isValid;

    m_shipping_amount_isValid = ::OpenAPI::fromJsonValue(m_shipping_amount, json[QString("shipping_amount")]);
    m_shipping_amount_isSet = !json[QString("shipping_amount")].isNull() && m_shipping_amount_isValid;

    m_shipping_canceled_isValid = ::OpenAPI::fromJsonValue(m_shipping_canceled, json[QString("shipping_canceled")]);
    m_shipping_canceled_isSet = !json[QString("shipping_canceled")].isNull() && m_shipping_canceled_isValid;

    m_shipping_description_isValid = ::OpenAPI::fromJsonValue(m_shipping_description, json[QString("shipping_description")]);
    m_shipping_description_isSet = !json[QString("shipping_description")].isNull() && m_shipping_description_isValid;

    m_shipping_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_shipping_discount_amount, json[QString("shipping_discount_amount")]);
    m_shipping_discount_amount_isSet = !json[QString("shipping_discount_amount")].isNull() && m_shipping_discount_amount_isValid;

    m_shipping_discount_tax_compensation_amount_isValid = ::OpenAPI::fromJsonValue(m_shipping_discount_tax_compensation_amount, json[QString("shipping_discount_tax_compensation_amount")]);
    m_shipping_discount_tax_compensation_amount_isSet = !json[QString("shipping_discount_tax_compensation_amount")].isNull() && m_shipping_discount_tax_compensation_amount_isValid;

    m_shipping_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_shipping_incl_tax, json[QString("shipping_incl_tax")]);
    m_shipping_incl_tax_isSet = !json[QString("shipping_incl_tax")].isNull() && m_shipping_incl_tax_isValid;

    m_shipping_invoiced_isValid = ::OpenAPI::fromJsonValue(m_shipping_invoiced, json[QString("shipping_invoiced")]);
    m_shipping_invoiced_isSet = !json[QString("shipping_invoiced")].isNull() && m_shipping_invoiced_isValid;

    m_shipping_refunded_isValid = ::OpenAPI::fromJsonValue(m_shipping_refunded, json[QString("shipping_refunded")]);
    m_shipping_refunded_isSet = !json[QString("shipping_refunded")].isNull() && m_shipping_refunded_isValid;

    m_shipping_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_shipping_tax_amount, json[QString("shipping_tax_amount")]);
    m_shipping_tax_amount_isSet = !json[QString("shipping_tax_amount")].isNull() && m_shipping_tax_amount_isValid;

    m_shipping_tax_refunded_isValid = ::OpenAPI::fromJsonValue(m_shipping_tax_refunded, json[QString("shipping_tax_refunded")]);
    m_shipping_tax_refunded_isSet = !json[QString("shipping_tax_refunded")].isNull() && m_shipping_tax_refunded_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_histories_isValid = ::OpenAPI::fromJsonValue(m_status_histories, json[QString("status_histories")]);
    m_status_histories_isSet = !json[QString("status_histories")].isNull() && m_status_histories_isValid;

    m_store_currency_code_isValid = ::OpenAPI::fromJsonValue(m_store_currency_code, json[QString("store_currency_code")]);
    m_store_currency_code_isSet = !json[QString("store_currency_code")].isNull() && m_store_currency_code_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_store_name_isValid = ::OpenAPI::fromJsonValue(m_store_name, json[QString("store_name")]);
    m_store_name_isSet = !json[QString("store_name")].isNull() && m_store_name_isValid;

    m_store_to_base_rate_isValid = ::OpenAPI::fromJsonValue(m_store_to_base_rate, json[QString("store_to_base_rate")]);
    m_store_to_base_rate_isSet = !json[QString("store_to_base_rate")].isNull() && m_store_to_base_rate_isValid;

    m_store_to_order_rate_isValid = ::OpenAPI::fromJsonValue(m_store_to_order_rate, json[QString("store_to_order_rate")]);
    m_store_to_order_rate_isSet = !json[QString("store_to_order_rate")].isNull() && m_store_to_order_rate_isValid;

    m_subtotal_isValid = ::OpenAPI::fromJsonValue(m_subtotal, json[QString("subtotal")]);
    m_subtotal_isSet = !json[QString("subtotal")].isNull() && m_subtotal_isValid;

    m_subtotal_canceled_isValid = ::OpenAPI::fromJsonValue(m_subtotal_canceled, json[QString("subtotal_canceled")]);
    m_subtotal_canceled_isSet = !json[QString("subtotal_canceled")].isNull() && m_subtotal_canceled_isValid;

    m_subtotal_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_subtotal_incl_tax, json[QString("subtotal_incl_tax")]);
    m_subtotal_incl_tax_isSet = !json[QString("subtotal_incl_tax")].isNull() && m_subtotal_incl_tax_isValid;

    m_subtotal_invoiced_isValid = ::OpenAPI::fromJsonValue(m_subtotal_invoiced, json[QString("subtotal_invoiced")]);
    m_subtotal_invoiced_isSet = !json[QString("subtotal_invoiced")].isNull() && m_subtotal_invoiced_isValid;

    m_subtotal_refunded_isValid = ::OpenAPI::fromJsonValue(m_subtotal_refunded, json[QString("subtotal_refunded")]);
    m_subtotal_refunded_isSet = !json[QString("subtotal_refunded")].isNull() && m_subtotal_refunded_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("tax_amount")]);
    m_tax_amount_isSet = !json[QString("tax_amount")].isNull() && m_tax_amount_isValid;

    m_tax_canceled_isValid = ::OpenAPI::fromJsonValue(m_tax_canceled, json[QString("tax_canceled")]);
    m_tax_canceled_isSet = !json[QString("tax_canceled")].isNull() && m_tax_canceled_isValid;

    m_tax_invoiced_isValid = ::OpenAPI::fromJsonValue(m_tax_invoiced, json[QString("tax_invoiced")]);
    m_tax_invoiced_isSet = !json[QString("tax_invoiced")].isNull() && m_tax_invoiced_isValid;

    m_tax_refunded_isValid = ::OpenAPI::fromJsonValue(m_tax_refunded, json[QString("tax_refunded")]);
    m_tax_refunded_isSet = !json[QString("tax_refunded")].isNull() && m_tax_refunded_isValid;

    m_total_canceled_isValid = ::OpenAPI::fromJsonValue(m_total_canceled, json[QString("total_canceled")]);
    m_total_canceled_isSet = !json[QString("total_canceled")].isNull() && m_total_canceled_isValid;

    m_total_due_isValid = ::OpenAPI::fromJsonValue(m_total_due, json[QString("total_due")]);
    m_total_due_isSet = !json[QString("total_due")].isNull() && m_total_due_isValid;

    m_total_invoiced_isValid = ::OpenAPI::fromJsonValue(m_total_invoiced, json[QString("total_invoiced")]);
    m_total_invoiced_isSet = !json[QString("total_invoiced")].isNull() && m_total_invoiced_isValid;

    m_total_item_count_isValid = ::OpenAPI::fromJsonValue(m_total_item_count, json[QString("total_item_count")]);
    m_total_item_count_isSet = !json[QString("total_item_count")].isNull() && m_total_item_count_isValid;

    m_total_offline_refunded_isValid = ::OpenAPI::fromJsonValue(m_total_offline_refunded, json[QString("total_offline_refunded")]);
    m_total_offline_refunded_isSet = !json[QString("total_offline_refunded")].isNull() && m_total_offline_refunded_isValid;

    m_total_online_refunded_isValid = ::OpenAPI::fromJsonValue(m_total_online_refunded, json[QString("total_online_refunded")]);
    m_total_online_refunded_isSet = !json[QString("total_online_refunded")].isNull() && m_total_online_refunded_isValid;

    m_total_paid_isValid = ::OpenAPI::fromJsonValue(m_total_paid, json[QString("total_paid")]);
    m_total_paid_isSet = !json[QString("total_paid")].isNull() && m_total_paid_isValid;

    m_total_qty_ordered_isValid = ::OpenAPI::fromJsonValue(m_total_qty_ordered, json[QString("total_qty_ordered")]);
    m_total_qty_ordered_isSet = !json[QString("total_qty_ordered")].isNull() && m_total_qty_ordered_isValid;

    m_total_refunded_isValid = ::OpenAPI::fromJsonValue(m_total_refunded, json[QString("total_refunded")]);
    m_total_refunded_isSet = !json[QString("total_refunded")].isNull() && m_total_refunded_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_x_forwarded_for_isValid = ::OpenAPI::fromJsonValue(m_x_forwarded_for, json[QString("x_forwarded_for")]);
    m_x_forwarded_for_isSet = !json[QString("x_forwarded_for")].isNull() && m_x_forwarded_for_isValid;
}

QString OAISales_data_order_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISales_data_order_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_adjustment_negative_isSet) {
        obj.insert(QString("adjustment_negative"), ::OpenAPI::toJsonValue(m_adjustment_negative));
    }
    if (m_adjustment_positive_isSet) {
        obj.insert(QString("adjustment_positive"), ::OpenAPI::toJsonValue(m_adjustment_positive));
    }
    if (m_applied_rule_ids_isSet) {
        obj.insert(QString("applied_rule_ids"), ::OpenAPI::toJsonValue(m_applied_rule_ids));
    }
    if (m_base_adjustment_negative_isSet) {
        obj.insert(QString("base_adjustment_negative"), ::OpenAPI::toJsonValue(m_base_adjustment_negative));
    }
    if (m_base_adjustment_positive_isSet) {
        obj.insert(QString("base_adjustment_positive"), ::OpenAPI::toJsonValue(m_base_adjustment_positive));
    }
    if (m_base_currency_code_isSet) {
        obj.insert(QString("base_currency_code"), ::OpenAPI::toJsonValue(m_base_currency_code));
    }
    if (m_base_discount_amount_isSet) {
        obj.insert(QString("base_discount_amount"), ::OpenAPI::toJsonValue(m_base_discount_amount));
    }
    if (m_base_discount_canceled_isSet) {
        obj.insert(QString("base_discount_canceled"), ::OpenAPI::toJsonValue(m_base_discount_canceled));
    }
    if (m_base_discount_invoiced_isSet) {
        obj.insert(QString("base_discount_invoiced"), ::OpenAPI::toJsonValue(m_base_discount_invoiced));
    }
    if (m_base_discount_refunded_isSet) {
        obj.insert(QString("base_discount_refunded"), ::OpenAPI::toJsonValue(m_base_discount_refunded));
    }
    if (m_base_discount_tax_compensation_amount_isSet) {
        obj.insert(QString("base_discount_tax_compensation_amount"), ::OpenAPI::toJsonValue(m_base_discount_tax_compensation_amount));
    }
    if (m_base_discount_tax_compensation_invoiced_isSet) {
        obj.insert(QString("base_discount_tax_compensation_invoiced"), ::OpenAPI::toJsonValue(m_base_discount_tax_compensation_invoiced));
    }
    if (m_base_discount_tax_compensation_refunded_isSet) {
        obj.insert(QString("base_discount_tax_compensation_refunded"), ::OpenAPI::toJsonValue(m_base_discount_tax_compensation_refunded));
    }
    if (m_base_grand_total_isSet) {
        obj.insert(QString("base_grand_total"), ::OpenAPI::toJsonValue(m_base_grand_total));
    }
    if (m_base_shipping_amount_isSet) {
        obj.insert(QString("base_shipping_amount"), ::OpenAPI::toJsonValue(m_base_shipping_amount));
    }
    if (m_base_shipping_canceled_isSet) {
        obj.insert(QString("base_shipping_canceled"), ::OpenAPI::toJsonValue(m_base_shipping_canceled));
    }
    if (m_base_shipping_discount_amount_isSet) {
        obj.insert(QString("base_shipping_discount_amount"), ::OpenAPI::toJsonValue(m_base_shipping_discount_amount));
    }
    if (m_base_shipping_discount_tax_compensation_amnt_isSet) {
        obj.insert(QString("base_shipping_discount_tax_compensation_amnt"), ::OpenAPI::toJsonValue(m_base_shipping_discount_tax_compensation_amnt));
    }
    if (m_base_shipping_incl_tax_isSet) {
        obj.insert(QString("base_shipping_incl_tax"), ::OpenAPI::toJsonValue(m_base_shipping_incl_tax));
    }
    if (m_base_shipping_invoiced_isSet) {
        obj.insert(QString("base_shipping_invoiced"), ::OpenAPI::toJsonValue(m_base_shipping_invoiced));
    }
    if (m_base_shipping_refunded_isSet) {
        obj.insert(QString("base_shipping_refunded"), ::OpenAPI::toJsonValue(m_base_shipping_refunded));
    }
    if (m_base_shipping_tax_amount_isSet) {
        obj.insert(QString("base_shipping_tax_amount"), ::OpenAPI::toJsonValue(m_base_shipping_tax_amount));
    }
    if (m_base_shipping_tax_refunded_isSet) {
        obj.insert(QString("base_shipping_tax_refunded"), ::OpenAPI::toJsonValue(m_base_shipping_tax_refunded));
    }
    if (m_base_subtotal_isSet) {
        obj.insert(QString("base_subtotal"), ::OpenAPI::toJsonValue(m_base_subtotal));
    }
    if (m_base_subtotal_canceled_isSet) {
        obj.insert(QString("base_subtotal_canceled"), ::OpenAPI::toJsonValue(m_base_subtotal_canceled));
    }
    if (m_base_subtotal_incl_tax_isSet) {
        obj.insert(QString("base_subtotal_incl_tax"), ::OpenAPI::toJsonValue(m_base_subtotal_incl_tax));
    }
    if (m_base_subtotal_invoiced_isSet) {
        obj.insert(QString("base_subtotal_invoiced"), ::OpenAPI::toJsonValue(m_base_subtotal_invoiced));
    }
    if (m_base_subtotal_refunded_isSet) {
        obj.insert(QString("base_subtotal_refunded"), ::OpenAPI::toJsonValue(m_base_subtotal_refunded));
    }
    if (m_base_tax_amount_isSet) {
        obj.insert(QString("base_tax_amount"), ::OpenAPI::toJsonValue(m_base_tax_amount));
    }
    if (m_base_tax_canceled_isSet) {
        obj.insert(QString("base_tax_canceled"), ::OpenAPI::toJsonValue(m_base_tax_canceled));
    }
    if (m_base_tax_invoiced_isSet) {
        obj.insert(QString("base_tax_invoiced"), ::OpenAPI::toJsonValue(m_base_tax_invoiced));
    }
    if (m_base_tax_refunded_isSet) {
        obj.insert(QString("base_tax_refunded"), ::OpenAPI::toJsonValue(m_base_tax_refunded));
    }
    if (m_base_to_global_rate_isSet) {
        obj.insert(QString("base_to_global_rate"), ::OpenAPI::toJsonValue(m_base_to_global_rate));
    }
    if (m_base_to_order_rate_isSet) {
        obj.insert(QString("base_to_order_rate"), ::OpenAPI::toJsonValue(m_base_to_order_rate));
    }
    if (m_base_total_canceled_isSet) {
        obj.insert(QString("base_total_canceled"), ::OpenAPI::toJsonValue(m_base_total_canceled));
    }
    if (m_base_total_due_isSet) {
        obj.insert(QString("base_total_due"), ::OpenAPI::toJsonValue(m_base_total_due));
    }
    if (m_base_total_invoiced_isSet) {
        obj.insert(QString("base_total_invoiced"), ::OpenAPI::toJsonValue(m_base_total_invoiced));
    }
    if (m_base_total_invoiced_cost_isSet) {
        obj.insert(QString("base_total_invoiced_cost"), ::OpenAPI::toJsonValue(m_base_total_invoiced_cost));
    }
    if (m_base_total_offline_refunded_isSet) {
        obj.insert(QString("base_total_offline_refunded"), ::OpenAPI::toJsonValue(m_base_total_offline_refunded));
    }
    if (m_base_total_online_refunded_isSet) {
        obj.insert(QString("base_total_online_refunded"), ::OpenAPI::toJsonValue(m_base_total_online_refunded));
    }
    if (m_base_total_paid_isSet) {
        obj.insert(QString("base_total_paid"), ::OpenAPI::toJsonValue(m_base_total_paid));
    }
    if (m_base_total_qty_ordered_isSet) {
        obj.insert(QString("base_total_qty_ordered"), ::OpenAPI::toJsonValue(m_base_total_qty_ordered));
    }
    if (m_base_total_refunded_isSet) {
        obj.insert(QString("base_total_refunded"), ::OpenAPI::toJsonValue(m_base_total_refunded));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billing_address"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_billing_address_id_isSet) {
        obj.insert(QString("billing_address_id"), ::OpenAPI::toJsonValue(m_billing_address_id));
    }
    if (m_can_ship_partially_isSet) {
        obj.insert(QString("can_ship_partially"), ::OpenAPI::toJsonValue(m_can_ship_partially));
    }
    if (m_can_ship_partially_item_isSet) {
        obj.insert(QString("can_ship_partially_item"), ::OpenAPI::toJsonValue(m_can_ship_partially_item));
    }
    if (m_coupon_code_isSet) {
        obj.insert(QString("coupon_code"), ::OpenAPI::toJsonValue(m_coupon_code));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_customer_dob_isSet) {
        obj.insert(QString("customer_dob"), ::OpenAPI::toJsonValue(m_customer_dob));
    }
    if (m_customer_email_isSet) {
        obj.insert(QString("customer_email"), ::OpenAPI::toJsonValue(m_customer_email));
    }
    if (m_customer_firstname_isSet) {
        obj.insert(QString("customer_firstname"), ::OpenAPI::toJsonValue(m_customer_firstname));
    }
    if (m_customer_gender_isSet) {
        obj.insert(QString("customer_gender"), ::OpenAPI::toJsonValue(m_customer_gender));
    }
    if (m_customer_group_id_isSet) {
        obj.insert(QString("customer_group_id"), ::OpenAPI::toJsonValue(m_customer_group_id));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_customer_is_guest_isSet) {
        obj.insert(QString("customer_is_guest"), ::OpenAPI::toJsonValue(m_customer_is_guest));
    }
    if (m_customer_lastname_isSet) {
        obj.insert(QString("customer_lastname"), ::OpenAPI::toJsonValue(m_customer_lastname));
    }
    if (m_customer_middlename_isSet) {
        obj.insert(QString("customer_middlename"), ::OpenAPI::toJsonValue(m_customer_middlename));
    }
    if (m_customer_note_isSet) {
        obj.insert(QString("customer_note"), ::OpenAPI::toJsonValue(m_customer_note));
    }
    if (m_customer_note_notify_isSet) {
        obj.insert(QString("customer_note_notify"), ::OpenAPI::toJsonValue(m_customer_note_notify));
    }
    if (m_customer_prefix_isSet) {
        obj.insert(QString("customer_prefix"), ::OpenAPI::toJsonValue(m_customer_prefix));
    }
    if (m_customer_suffix_isSet) {
        obj.insert(QString("customer_suffix"), ::OpenAPI::toJsonValue(m_customer_suffix));
    }
    if (m_customer_taxvat_isSet) {
        obj.insert(QString("customer_taxvat"), ::OpenAPI::toJsonValue(m_customer_taxvat));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("discount_amount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_canceled_isSet) {
        obj.insert(QString("discount_canceled"), ::OpenAPI::toJsonValue(m_discount_canceled));
    }
    if (m_discount_description_isSet) {
        obj.insert(QString("discount_description"), ::OpenAPI::toJsonValue(m_discount_description));
    }
    if (m_discount_invoiced_isSet) {
        obj.insert(QString("discount_invoiced"), ::OpenAPI::toJsonValue(m_discount_invoiced));
    }
    if (m_discount_refunded_isSet) {
        obj.insert(QString("discount_refunded"), ::OpenAPI::toJsonValue(m_discount_refunded));
    }
    if (m_discount_tax_compensation_amount_isSet) {
        obj.insert(QString("discount_tax_compensation_amount"), ::OpenAPI::toJsonValue(m_discount_tax_compensation_amount));
    }
    if (m_discount_tax_compensation_invoiced_isSet) {
        obj.insert(QString("discount_tax_compensation_invoiced"), ::OpenAPI::toJsonValue(m_discount_tax_compensation_invoiced));
    }
    if (m_discount_tax_compensation_refunded_isSet) {
        obj.insert(QString("discount_tax_compensation_refunded"), ::OpenAPI::toJsonValue(m_discount_tax_compensation_refunded));
    }
    if (m_edit_increment_isSet) {
        obj.insert(QString("edit_increment"), ::OpenAPI::toJsonValue(m_edit_increment));
    }
    if (m_email_sent_isSet) {
        obj.insert(QString("email_sent"), ::OpenAPI::toJsonValue(m_email_sent));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_ext_customer_id_isSet) {
        obj.insert(QString("ext_customer_id"), ::OpenAPI::toJsonValue(m_ext_customer_id));
    }
    if (m_ext_order_id_isSet) {
        obj.insert(QString("ext_order_id"), ::OpenAPI::toJsonValue(m_ext_order_id));
    }
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_forced_shipment_with_invoice_isSet) {
        obj.insert(QString("forced_shipment_with_invoice"), ::OpenAPI::toJsonValue(m_forced_shipment_with_invoice));
    }
    if (m_global_currency_code_isSet) {
        obj.insert(QString("global_currency_code"), ::OpenAPI::toJsonValue(m_global_currency_code));
    }
    if (m_grand_total_isSet) {
        obj.insert(QString("grand_total"), ::OpenAPI::toJsonValue(m_grand_total));
    }
    if (m_hold_before_state_isSet) {
        obj.insert(QString("hold_before_state"), ::OpenAPI::toJsonValue(m_hold_before_state));
    }
    if (m_hold_before_status_isSet) {
        obj.insert(QString("hold_before_status"), ::OpenAPI::toJsonValue(m_hold_before_status));
    }
    if (m_increment_id_isSet) {
        obj.insert(QString("increment_id"), ::OpenAPI::toJsonValue(m_increment_id));
    }
    if (m_is_virtual_isSet) {
        obj.insert(QString("is_virtual"), ::OpenAPI::toJsonValue(m_is_virtual));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_order_currency_code_isSet) {
        obj.insert(QString("order_currency_code"), ::OpenAPI::toJsonValue(m_order_currency_code));
    }
    if (m_original_increment_id_isSet) {
        obj.insert(QString("original_increment_id"), ::OpenAPI::toJsonValue(m_original_increment_id));
    }
    if (m_payment.isSet()) {
        obj.insert(QString("payment"), ::OpenAPI::toJsonValue(m_payment));
    }
    if (m_payment_auth_expiration_isSet) {
        obj.insert(QString("payment_auth_expiration"), ::OpenAPI::toJsonValue(m_payment_auth_expiration));
    }
    if (m_payment_authorization_amount_isSet) {
        obj.insert(QString("payment_authorization_amount"), ::OpenAPI::toJsonValue(m_payment_authorization_amount));
    }
    if (m_protect_code_isSet) {
        obj.insert(QString("protect_code"), ::OpenAPI::toJsonValue(m_protect_code));
    }
    if (m_quote_address_id_isSet) {
        obj.insert(QString("quote_address_id"), ::OpenAPI::toJsonValue(m_quote_address_id));
    }
    if (m_quote_id_isSet) {
        obj.insert(QString("quote_id"), ::OpenAPI::toJsonValue(m_quote_id));
    }
    if (m_relation_child_id_isSet) {
        obj.insert(QString("relation_child_id"), ::OpenAPI::toJsonValue(m_relation_child_id));
    }
    if (m_relation_child_real_id_isSet) {
        obj.insert(QString("relation_child_real_id"), ::OpenAPI::toJsonValue(m_relation_child_real_id));
    }
    if (m_relation_parent_id_isSet) {
        obj.insert(QString("relation_parent_id"), ::OpenAPI::toJsonValue(m_relation_parent_id));
    }
    if (m_relation_parent_real_id_isSet) {
        obj.insert(QString("relation_parent_real_id"), ::OpenAPI::toJsonValue(m_relation_parent_real_id));
    }
    if (m_remote_ip_isSet) {
        obj.insert(QString("remote_ip"), ::OpenAPI::toJsonValue(m_remote_ip));
    }
    if (m_shipping_amount_isSet) {
        obj.insert(QString("shipping_amount"), ::OpenAPI::toJsonValue(m_shipping_amount));
    }
    if (m_shipping_canceled_isSet) {
        obj.insert(QString("shipping_canceled"), ::OpenAPI::toJsonValue(m_shipping_canceled));
    }
    if (m_shipping_description_isSet) {
        obj.insert(QString("shipping_description"), ::OpenAPI::toJsonValue(m_shipping_description));
    }
    if (m_shipping_discount_amount_isSet) {
        obj.insert(QString("shipping_discount_amount"), ::OpenAPI::toJsonValue(m_shipping_discount_amount));
    }
    if (m_shipping_discount_tax_compensation_amount_isSet) {
        obj.insert(QString("shipping_discount_tax_compensation_amount"), ::OpenAPI::toJsonValue(m_shipping_discount_tax_compensation_amount));
    }
    if (m_shipping_incl_tax_isSet) {
        obj.insert(QString("shipping_incl_tax"), ::OpenAPI::toJsonValue(m_shipping_incl_tax));
    }
    if (m_shipping_invoiced_isSet) {
        obj.insert(QString("shipping_invoiced"), ::OpenAPI::toJsonValue(m_shipping_invoiced));
    }
    if (m_shipping_refunded_isSet) {
        obj.insert(QString("shipping_refunded"), ::OpenAPI::toJsonValue(m_shipping_refunded));
    }
    if (m_shipping_tax_amount_isSet) {
        obj.insert(QString("shipping_tax_amount"), ::OpenAPI::toJsonValue(m_shipping_tax_amount));
    }
    if (m_shipping_tax_refunded_isSet) {
        obj.insert(QString("shipping_tax_refunded"), ::OpenAPI::toJsonValue(m_shipping_tax_refunded));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_histories.size() > 0) {
        obj.insert(QString("status_histories"), ::OpenAPI::toJsonValue(m_status_histories));
    }
    if (m_store_currency_code_isSet) {
        obj.insert(QString("store_currency_code"), ::OpenAPI::toJsonValue(m_store_currency_code));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_store_name_isSet) {
        obj.insert(QString("store_name"), ::OpenAPI::toJsonValue(m_store_name));
    }
    if (m_store_to_base_rate_isSet) {
        obj.insert(QString("store_to_base_rate"), ::OpenAPI::toJsonValue(m_store_to_base_rate));
    }
    if (m_store_to_order_rate_isSet) {
        obj.insert(QString("store_to_order_rate"), ::OpenAPI::toJsonValue(m_store_to_order_rate));
    }
    if (m_subtotal_isSet) {
        obj.insert(QString("subtotal"), ::OpenAPI::toJsonValue(m_subtotal));
    }
    if (m_subtotal_canceled_isSet) {
        obj.insert(QString("subtotal_canceled"), ::OpenAPI::toJsonValue(m_subtotal_canceled));
    }
    if (m_subtotal_incl_tax_isSet) {
        obj.insert(QString("subtotal_incl_tax"), ::OpenAPI::toJsonValue(m_subtotal_incl_tax));
    }
    if (m_subtotal_invoiced_isSet) {
        obj.insert(QString("subtotal_invoiced"), ::OpenAPI::toJsonValue(m_subtotal_invoiced));
    }
    if (m_subtotal_refunded_isSet) {
        obj.insert(QString("subtotal_refunded"), ::OpenAPI::toJsonValue(m_subtotal_refunded));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("tax_amount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_canceled_isSet) {
        obj.insert(QString("tax_canceled"), ::OpenAPI::toJsonValue(m_tax_canceled));
    }
    if (m_tax_invoiced_isSet) {
        obj.insert(QString("tax_invoiced"), ::OpenAPI::toJsonValue(m_tax_invoiced));
    }
    if (m_tax_refunded_isSet) {
        obj.insert(QString("tax_refunded"), ::OpenAPI::toJsonValue(m_tax_refunded));
    }
    if (m_total_canceled_isSet) {
        obj.insert(QString("total_canceled"), ::OpenAPI::toJsonValue(m_total_canceled));
    }
    if (m_total_due_isSet) {
        obj.insert(QString("total_due"), ::OpenAPI::toJsonValue(m_total_due));
    }
    if (m_total_invoiced_isSet) {
        obj.insert(QString("total_invoiced"), ::OpenAPI::toJsonValue(m_total_invoiced));
    }
    if (m_total_item_count_isSet) {
        obj.insert(QString("total_item_count"), ::OpenAPI::toJsonValue(m_total_item_count));
    }
    if (m_total_offline_refunded_isSet) {
        obj.insert(QString("total_offline_refunded"), ::OpenAPI::toJsonValue(m_total_offline_refunded));
    }
    if (m_total_online_refunded_isSet) {
        obj.insert(QString("total_online_refunded"), ::OpenAPI::toJsonValue(m_total_online_refunded));
    }
    if (m_total_paid_isSet) {
        obj.insert(QString("total_paid"), ::OpenAPI::toJsonValue(m_total_paid));
    }
    if (m_total_qty_ordered_isSet) {
        obj.insert(QString("total_qty_ordered"), ::OpenAPI::toJsonValue(m_total_qty_ordered));
    }
    if (m_total_refunded_isSet) {
        obj.insert(QString("total_refunded"), ::OpenAPI::toJsonValue(m_total_refunded));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_x_forwarded_for_isSet) {
        obj.insert(QString("x_forwarded_for"), ::OpenAPI::toJsonValue(m_x_forwarded_for));
    }
    return obj;
}

double OAISales_data_order_interface::getAdjustmentNegative() const {
    return m_adjustment_negative;
}
void OAISales_data_order_interface::setAdjustmentNegative(const double &adjustment_negative) {
    m_adjustment_negative = adjustment_negative;
    m_adjustment_negative_isSet = true;
}

bool OAISales_data_order_interface::is_adjustment_negative_Set() const{
    return m_adjustment_negative_isSet;
}

bool OAISales_data_order_interface::is_adjustment_negative_Valid() const{
    return m_adjustment_negative_isValid;
}

double OAISales_data_order_interface::getAdjustmentPositive() const {
    return m_adjustment_positive;
}
void OAISales_data_order_interface::setAdjustmentPositive(const double &adjustment_positive) {
    m_adjustment_positive = adjustment_positive;
    m_adjustment_positive_isSet = true;
}

bool OAISales_data_order_interface::is_adjustment_positive_Set() const{
    return m_adjustment_positive_isSet;
}

bool OAISales_data_order_interface::is_adjustment_positive_Valid() const{
    return m_adjustment_positive_isValid;
}

QString OAISales_data_order_interface::getAppliedRuleIds() const {
    return m_applied_rule_ids;
}
void OAISales_data_order_interface::setAppliedRuleIds(const QString &applied_rule_ids) {
    m_applied_rule_ids = applied_rule_ids;
    m_applied_rule_ids_isSet = true;
}

bool OAISales_data_order_interface::is_applied_rule_ids_Set() const{
    return m_applied_rule_ids_isSet;
}

bool OAISales_data_order_interface::is_applied_rule_ids_Valid() const{
    return m_applied_rule_ids_isValid;
}

double OAISales_data_order_interface::getBaseAdjustmentNegative() const {
    return m_base_adjustment_negative;
}
void OAISales_data_order_interface::setBaseAdjustmentNegative(const double &base_adjustment_negative) {
    m_base_adjustment_negative = base_adjustment_negative;
    m_base_adjustment_negative_isSet = true;
}

bool OAISales_data_order_interface::is_base_adjustment_negative_Set() const{
    return m_base_adjustment_negative_isSet;
}

bool OAISales_data_order_interface::is_base_adjustment_negative_Valid() const{
    return m_base_adjustment_negative_isValid;
}

double OAISales_data_order_interface::getBaseAdjustmentPositive() const {
    return m_base_adjustment_positive;
}
void OAISales_data_order_interface::setBaseAdjustmentPositive(const double &base_adjustment_positive) {
    m_base_adjustment_positive = base_adjustment_positive;
    m_base_adjustment_positive_isSet = true;
}

bool OAISales_data_order_interface::is_base_adjustment_positive_Set() const{
    return m_base_adjustment_positive_isSet;
}

bool OAISales_data_order_interface::is_base_adjustment_positive_Valid() const{
    return m_base_adjustment_positive_isValid;
}

QString OAISales_data_order_interface::getBaseCurrencyCode() const {
    return m_base_currency_code;
}
void OAISales_data_order_interface::setBaseCurrencyCode(const QString &base_currency_code) {
    m_base_currency_code = base_currency_code;
    m_base_currency_code_isSet = true;
}

bool OAISales_data_order_interface::is_base_currency_code_Set() const{
    return m_base_currency_code_isSet;
}

bool OAISales_data_order_interface::is_base_currency_code_Valid() const{
    return m_base_currency_code_isValid;
}

double OAISales_data_order_interface::getBaseDiscountAmount() const {
    return m_base_discount_amount;
}
void OAISales_data_order_interface::setBaseDiscountAmount(const double &base_discount_amount) {
    m_base_discount_amount = base_discount_amount;
    m_base_discount_amount_isSet = true;
}

bool OAISales_data_order_interface::is_base_discount_amount_Set() const{
    return m_base_discount_amount_isSet;
}

bool OAISales_data_order_interface::is_base_discount_amount_Valid() const{
    return m_base_discount_amount_isValid;
}

double OAISales_data_order_interface::getBaseDiscountCanceled() const {
    return m_base_discount_canceled;
}
void OAISales_data_order_interface::setBaseDiscountCanceled(const double &base_discount_canceled) {
    m_base_discount_canceled = base_discount_canceled;
    m_base_discount_canceled_isSet = true;
}

bool OAISales_data_order_interface::is_base_discount_canceled_Set() const{
    return m_base_discount_canceled_isSet;
}

bool OAISales_data_order_interface::is_base_discount_canceled_Valid() const{
    return m_base_discount_canceled_isValid;
}

double OAISales_data_order_interface::getBaseDiscountInvoiced() const {
    return m_base_discount_invoiced;
}
void OAISales_data_order_interface::setBaseDiscountInvoiced(const double &base_discount_invoiced) {
    m_base_discount_invoiced = base_discount_invoiced;
    m_base_discount_invoiced_isSet = true;
}

bool OAISales_data_order_interface::is_base_discount_invoiced_Set() const{
    return m_base_discount_invoiced_isSet;
}

bool OAISales_data_order_interface::is_base_discount_invoiced_Valid() const{
    return m_base_discount_invoiced_isValid;
}

double OAISales_data_order_interface::getBaseDiscountRefunded() const {
    return m_base_discount_refunded;
}
void OAISales_data_order_interface::setBaseDiscountRefunded(const double &base_discount_refunded) {
    m_base_discount_refunded = base_discount_refunded;
    m_base_discount_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_base_discount_refunded_Set() const{
    return m_base_discount_refunded_isSet;
}

bool OAISales_data_order_interface::is_base_discount_refunded_Valid() const{
    return m_base_discount_refunded_isValid;
}

double OAISales_data_order_interface::getBaseDiscountTaxCompensationAmount() const {
    return m_base_discount_tax_compensation_amount;
}
void OAISales_data_order_interface::setBaseDiscountTaxCompensationAmount(const double &base_discount_tax_compensation_amount) {
    m_base_discount_tax_compensation_amount = base_discount_tax_compensation_amount;
    m_base_discount_tax_compensation_amount_isSet = true;
}

bool OAISales_data_order_interface::is_base_discount_tax_compensation_amount_Set() const{
    return m_base_discount_tax_compensation_amount_isSet;
}

bool OAISales_data_order_interface::is_base_discount_tax_compensation_amount_Valid() const{
    return m_base_discount_tax_compensation_amount_isValid;
}

double OAISales_data_order_interface::getBaseDiscountTaxCompensationInvoiced() const {
    return m_base_discount_tax_compensation_invoiced;
}
void OAISales_data_order_interface::setBaseDiscountTaxCompensationInvoiced(const double &base_discount_tax_compensation_invoiced) {
    m_base_discount_tax_compensation_invoiced = base_discount_tax_compensation_invoiced;
    m_base_discount_tax_compensation_invoiced_isSet = true;
}

bool OAISales_data_order_interface::is_base_discount_tax_compensation_invoiced_Set() const{
    return m_base_discount_tax_compensation_invoiced_isSet;
}

bool OAISales_data_order_interface::is_base_discount_tax_compensation_invoiced_Valid() const{
    return m_base_discount_tax_compensation_invoiced_isValid;
}

double OAISales_data_order_interface::getBaseDiscountTaxCompensationRefunded() const {
    return m_base_discount_tax_compensation_refunded;
}
void OAISales_data_order_interface::setBaseDiscountTaxCompensationRefunded(const double &base_discount_tax_compensation_refunded) {
    m_base_discount_tax_compensation_refunded = base_discount_tax_compensation_refunded;
    m_base_discount_tax_compensation_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_base_discount_tax_compensation_refunded_Set() const{
    return m_base_discount_tax_compensation_refunded_isSet;
}

bool OAISales_data_order_interface::is_base_discount_tax_compensation_refunded_Valid() const{
    return m_base_discount_tax_compensation_refunded_isValid;
}

double OAISales_data_order_interface::getBaseGrandTotal() const {
    return m_base_grand_total;
}
void OAISales_data_order_interface::setBaseGrandTotal(const double &base_grand_total) {
    m_base_grand_total = base_grand_total;
    m_base_grand_total_isSet = true;
}

bool OAISales_data_order_interface::is_base_grand_total_Set() const{
    return m_base_grand_total_isSet;
}

bool OAISales_data_order_interface::is_base_grand_total_Valid() const{
    return m_base_grand_total_isValid;
}

double OAISales_data_order_interface::getBaseShippingAmount() const {
    return m_base_shipping_amount;
}
void OAISales_data_order_interface::setBaseShippingAmount(const double &base_shipping_amount) {
    m_base_shipping_amount = base_shipping_amount;
    m_base_shipping_amount_isSet = true;
}

bool OAISales_data_order_interface::is_base_shipping_amount_Set() const{
    return m_base_shipping_amount_isSet;
}

bool OAISales_data_order_interface::is_base_shipping_amount_Valid() const{
    return m_base_shipping_amount_isValid;
}

double OAISales_data_order_interface::getBaseShippingCanceled() const {
    return m_base_shipping_canceled;
}
void OAISales_data_order_interface::setBaseShippingCanceled(const double &base_shipping_canceled) {
    m_base_shipping_canceled = base_shipping_canceled;
    m_base_shipping_canceled_isSet = true;
}

bool OAISales_data_order_interface::is_base_shipping_canceled_Set() const{
    return m_base_shipping_canceled_isSet;
}

bool OAISales_data_order_interface::is_base_shipping_canceled_Valid() const{
    return m_base_shipping_canceled_isValid;
}

double OAISales_data_order_interface::getBaseShippingDiscountAmount() const {
    return m_base_shipping_discount_amount;
}
void OAISales_data_order_interface::setBaseShippingDiscountAmount(const double &base_shipping_discount_amount) {
    m_base_shipping_discount_amount = base_shipping_discount_amount;
    m_base_shipping_discount_amount_isSet = true;
}

bool OAISales_data_order_interface::is_base_shipping_discount_amount_Set() const{
    return m_base_shipping_discount_amount_isSet;
}

bool OAISales_data_order_interface::is_base_shipping_discount_amount_Valid() const{
    return m_base_shipping_discount_amount_isValid;
}

double OAISales_data_order_interface::getBaseShippingDiscountTaxCompensationAmnt() const {
    return m_base_shipping_discount_tax_compensation_amnt;
}
void OAISales_data_order_interface::setBaseShippingDiscountTaxCompensationAmnt(const double &base_shipping_discount_tax_compensation_amnt) {
    m_base_shipping_discount_tax_compensation_amnt = base_shipping_discount_tax_compensation_amnt;
    m_base_shipping_discount_tax_compensation_amnt_isSet = true;
}

bool OAISales_data_order_interface::is_base_shipping_discount_tax_compensation_amnt_Set() const{
    return m_base_shipping_discount_tax_compensation_amnt_isSet;
}

bool OAISales_data_order_interface::is_base_shipping_discount_tax_compensation_amnt_Valid() const{
    return m_base_shipping_discount_tax_compensation_amnt_isValid;
}

double OAISales_data_order_interface::getBaseShippingInclTax() const {
    return m_base_shipping_incl_tax;
}
void OAISales_data_order_interface::setBaseShippingInclTax(const double &base_shipping_incl_tax) {
    m_base_shipping_incl_tax = base_shipping_incl_tax;
    m_base_shipping_incl_tax_isSet = true;
}

bool OAISales_data_order_interface::is_base_shipping_incl_tax_Set() const{
    return m_base_shipping_incl_tax_isSet;
}

bool OAISales_data_order_interface::is_base_shipping_incl_tax_Valid() const{
    return m_base_shipping_incl_tax_isValid;
}

double OAISales_data_order_interface::getBaseShippingInvoiced() const {
    return m_base_shipping_invoiced;
}
void OAISales_data_order_interface::setBaseShippingInvoiced(const double &base_shipping_invoiced) {
    m_base_shipping_invoiced = base_shipping_invoiced;
    m_base_shipping_invoiced_isSet = true;
}

bool OAISales_data_order_interface::is_base_shipping_invoiced_Set() const{
    return m_base_shipping_invoiced_isSet;
}

bool OAISales_data_order_interface::is_base_shipping_invoiced_Valid() const{
    return m_base_shipping_invoiced_isValid;
}

double OAISales_data_order_interface::getBaseShippingRefunded() const {
    return m_base_shipping_refunded;
}
void OAISales_data_order_interface::setBaseShippingRefunded(const double &base_shipping_refunded) {
    m_base_shipping_refunded = base_shipping_refunded;
    m_base_shipping_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_base_shipping_refunded_Set() const{
    return m_base_shipping_refunded_isSet;
}

bool OAISales_data_order_interface::is_base_shipping_refunded_Valid() const{
    return m_base_shipping_refunded_isValid;
}

double OAISales_data_order_interface::getBaseShippingTaxAmount() const {
    return m_base_shipping_tax_amount;
}
void OAISales_data_order_interface::setBaseShippingTaxAmount(const double &base_shipping_tax_amount) {
    m_base_shipping_tax_amount = base_shipping_tax_amount;
    m_base_shipping_tax_amount_isSet = true;
}

bool OAISales_data_order_interface::is_base_shipping_tax_amount_Set() const{
    return m_base_shipping_tax_amount_isSet;
}

bool OAISales_data_order_interface::is_base_shipping_tax_amount_Valid() const{
    return m_base_shipping_tax_amount_isValid;
}

double OAISales_data_order_interface::getBaseShippingTaxRefunded() const {
    return m_base_shipping_tax_refunded;
}
void OAISales_data_order_interface::setBaseShippingTaxRefunded(const double &base_shipping_tax_refunded) {
    m_base_shipping_tax_refunded = base_shipping_tax_refunded;
    m_base_shipping_tax_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_base_shipping_tax_refunded_Set() const{
    return m_base_shipping_tax_refunded_isSet;
}

bool OAISales_data_order_interface::is_base_shipping_tax_refunded_Valid() const{
    return m_base_shipping_tax_refunded_isValid;
}

double OAISales_data_order_interface::getBaseSubtotal() const {
    return m_base_subtotal;
}
void OAISales_data_order_interface::setBaseSubtotal(const double &base_subtotal) {
    m_base_subtotal = base_subtotal;
    m_base_subtotal_isSet = true;
}

bool OAISales_data_order_interface::is_base_subtotal_Set() const{
    return m_base_subtotal_isSet;
}

bool OAISales_data_order_interface::is_base_subtotal_Valid() const{
    return m_base_subtotal_isValid;
}

double OAISales_data_order_interface::getBaseSubtotalCanceled() const {
    return m_base_subtotal_canceled;
}
void OAISales_data_order_interface::setBaseSubtotalCanceled(const double &base_subtotal_canceled) {
    m_base_subtotal_canceled = base_subtotal_canceled;
    m_base_subtotal_canceled_isSet = true;
}

bool OAISales_data_order_interface::is_base_subtotal_canceled_Set() const{
    return m_base_subtotal_canceled_isSet;
}

bool OAISales_data_order_interface::is_base_subtotal_canceled_Valid() const{
    return m_base_subtotal_canceled_isValid;
}

double OAISales_data_order_interface::getBaseSubtotalInclTax() const {
    return m_base_subtotal_incl_tax;
}
void OAISales_data_order_interface::setBaseSubtotalInclTax(const double &base_subtotal_incl_tax) {
    m_base_subtotal_incl_tax = base_subtotal_incl_tax;
    m_base_subtotal_incl_tax_isSet = true;
}

bool OAISales_data_order_interface::is_base_subtotal_incl_tax_Set() const{
    return m_base_subtotal_incl_tax_isSet;
}

bool OAISales_data_order_interface::is_base_subtotal_incl_tax_Valid() const{
    return m_base_subtotal_incl_tax_isValid;
}

double OAISales_data_order_interface::getBaseSubtotalInvoiced() const {
    return m_base_subtotal_invoiced;
}
void OAISales_data_order_interface::setBaseSubtotalInvoiced(const double &base_subtotal_invoiced) {
    m_base_subtotal_invoiced = base_subtotal_invoiced;
    m_base_subtotal_invoiced_isSet = true;
}

bool OAISales_data_order_interface::is_base_subtotal_invoiced_Set() const{
    return m_base_subtotal_invoiced_isSet;
}

bool OAISales_data_order_interface::is_base_subtotal_invoiced_Valid() const{
    return m_base_subtotal_invoiced_isValid;
}

double OAISales_data_order_interface::getBaseSubtotalRefunded() const {
    return m_base_subtotal_refunded;
}
void OAISales_data_order_interface::setBaseSubtotalRefunded(const double &base_subtotal_refunded) {
    m_base_subtotal_refunded = base_subtotal_refunded;
    m_base_subtotal_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_base_subtotal_refunded_Set() const{
    return m_base_subtotal_refunded_isSet;
}

bool OAISales_data_order_interface::is_base_subtotal_refunded_Valid() const{
    return m_base_subtotal_refunded_isValid;
}

double OAISales_data_order_interface::getBaseTaxAmount() const {
    return m_base_tax_amount;
}
void OAISales_data_order_interface::setBaseTaxAmount(const double &base_tax_amount) {
    m_base_tax_amount = base_tax_amount;
    m_base_tax_amount_isSet = true;
}

bool OAISales_data_order_interface::is_base_tax_amount_Set() const{
    return m_base_tax_amount_isSet;
}

bool OAISales_data_order_interface::is_base_tax_amount_Valid() const{
    return m_base_tax_amount_isValid;
}

double OAISales_data_order_interface::getBaseTaxCanceled() const {
    return m_base_tax_canceled;
}
void OAISales_data_order_interface::setBaseTaxCanceled(const double &base_tax_canceled) {
    m_base_tax_canceled = base_tax_canceled;
    m_base_tax_canceled_isSet = true;
}

bool OAISales_data_order_interface::is_base_tax_canceled_Set() const{
    return m_base_tax_canceled_isSet;
}

bool OAISales_data_order_interface::is_base_tax_canceled_Valid() const{
    return m_base_tax_canceled_isValid;
}

double OAISales_data_order_interface::getBaseTaxInvoiced() const {
    return m_base_tax_invoiced;
}
void OAISales_data_order_interface::setBaseTaxInvoiced(const double &base_tax_invoiced) {
    m_base_tax_invoiced = base_tax_invoiced;
    m_base_tax_invoiced_isSet = true;
}

bool OAISales_data_order_interface::is_base_tax_invoiced_Set() const{
    return m_base_tax_invoiced_isSet;
}

bool OAISales_data_order_interface::is_base_tax_invoiced_Valid() const{
    return m_base_tax_invoiced_isValid;
}

double OAISales_data_order_interface::getBaseTaxRefunded() const {
    return m_base_tax_refunded;
}
void OAISales_data_order_interface::setBaseTaxRefunded(const double &base_tax_refunded) {
    m_base_tax_refunded = base_tax_refunded;
    m_base_tax_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_base_tax_refunded_Set() const{
    return m_base_tax_refunded_isSet;
}

bool OAISales_data_order_interface::is_base_tax_refunded_Valid() const{
    return m_base_tax_refunded_isValid;
}

double OAISales_data_order_interface::getBaseToGlobalRate() const {
    return m_base_to_global_rate;
}
void OAISales_data_order_interface::setBaseToGlobalRate(const double &base_to_global_rate) {
    m_base_to_global_rate = base_to_global_rate;
    m_base_to_global_rate_isSet = true;
}

bool OAISales_data_order_interface::is_base_to_global_rate_Set() const{
    return m_base_to_global_rate_isSet;
}

bool OAISales_data_order_interface::is_base_to_global_rate_Valid() const{
    return m_base_to_global_rate_isValid;
}

double OAISales_data_order_interface::getBaseToOrderRate() const {
    return m_base_to_order_rate;
}
void OAISales_data_order_interface::setBaseToOrderRate(const double &base_to_order_rate) {
    m_base_to_order_rate = base_to_order_rate;
    m_base_to_order_rate_isSet = true;
}

bool OAISales_data_order_interface::is_base_to_order_rate_Set() const{
    return m_base_to_order_rate_isSet;
}

bool OAISales_data_order_interface::is_base_to_order_rate_Valid() const{
    return m_base_to_order_rate_isValid;
}

double OAISales_data_order_interface::getBaseTotalCanceled() const {
    return m_base_total_canceled;
}
void OAISales_data_order_interface::setBaseTotalCanceled(const double &base_total_canceled) {
    m_base_total_canceled = base_total_canceled;
    m_base_total_canceled_isSet = true;
}

bool OAISales_data_order_interface::is_base_total_canceled_Set() const{
    return m_base_total_canceled_isSet;
}

bool OAISales_data_order_interface::is_base_total_canceled_Valid() const{
    return m_base_total_canceled_isValid;
}

double OAISales_data_order_interface::getBaseTotalDue() const {
    return m_base_total_due;
}
void OAISales_data_order_interface::setBaseTotalDue(const double &base_total_due) {
    m_base_total_due = base_total_due;
    m_base_total_due_isSet = true;
}

bool OAISales_data_order_interface::is_base_total_due_Set() const{
    return m_base_total_due_isSet;
}

bool OAISales_data_order_interface::is_base_total_due_Valid() const{
    return m_base_total_due_isValid;
}

double OAISales_data_order_interface::getBaseTotalInvoiced() const {
    return m_base_total_invoiced;
}
void OAISales_data_order_interface::setBaseTotalInvoiced(const double &base_total_invoiced) {
    m_base_total_invoiced = base_total_invoiced;
    m_base_total_invoiced_isSet = true;
}

bool OAISales_data_order_interface::is_base_total_invoiced_Set() const{
    return m_base_total_invoiced_isSet;
}

bool OAISales_data_order_interface::is_base_total_invoiced_Valid() const{
    return m_base_total_invoiced_isValid;
}

double OAISales_data_order_interface::getBaseTotalInvoicedCost() const {
    return m_base_total_invoiced_cost;
}
void OAISales_data_order_interface::setBaseTotalInvoicedCost(const double &base_total_invoiced_cost) {
    m_base_total_invoiced_cost = base_total_invoiced_cost;
    m_base_total_invoiced_cost_isSet = true;
}

bool OAISales_data_order_interface::is_base_total_invoiced_cost_Set() const{
    return m_base_total_invoiced_cost_isSet;
}

bool OAISales_data_order_interface::is_base_total_invoiced_cost_Valid() const{
    return m_base_total_invoiced_cost_isValid;
}

double OAISales_data_order_interface::getBaseTotalOfflineRefunded() const {
    return m_base_total_offline_refunded;
}
void OAISales_data_order_interface::setBaseTotalOfflineRefunded(const double &base_total_offline_refunded) {
    m_base_total_offline_refunded = base_total_offline_refunded;
    m_base_total_offline_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_base_total_offline_refunded_Set() const{
    return m_base_total_offline_refunded_isSet;
}

bool OAISales_data_order_interface::is_base_total_offline_refunded_Valid() const{
    return m_base_total_offline_refunded_isValid;
}

double OAISales_data_order_interface::getBaseTotalOnlineRefunded() const {
    return m_base_total_online_refunded;
}
void OAISales_data_order_interface::setBaseTotalOnlineRefunded(const double &base_total_online_refunded) {
    m_base_total_online_refunded = base_total_online_refunded;
    m_base_total_online_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_base_total_online_refunded_Set() const{
    return m_base_total_online_refunded_isSet;
}

bool OAISales_data_order_interface::is_base_total_online_refunded_Valid() const{
    return m_base_total_online_refunded_isValid;
}

double OAISales_data_order_interface::getBaseTotalPaid() const {
    return m_base_total_paid;
}
void OAISales_data_order_interface::setBaseTotalPaid(const double &base_total_paid) {
    m_base_total_paid = base_total_paid;
    m_base_total_paid_isSet = true;
}

bool OAISales_data_order_interface::is_base_total_paid_Set() const{
    return m_base_total_paid_isSet;
}

bool OAISales_data_order_interface::is_base_total_paid_Valid() const{
    return m_base_total_paid_isValid;
}

double OAISales_data_order_interface::getBaseTotalQtyOrdered() const {
    return m_base_total_qty_ordered;
}
void OAISales_data_order_interface::setBaseTotalQtyOrdered(const double &base_total_qty_ordered) {
    m_base_total_qty_ordered = base_total_qty_ordered;
    m_base_total_qty_ordered_isSet = true;
}

bool OAISales_data_order_interface::is_base_total_qty_ordered_Set() const{
    return m_base_total_qty_ordered_isSet;
}

bool OAISales_data_order_interface::is_base_total_qty_ordered_Valid() const{
    return m_base_total_qty_ordered_isValid;
}

double OAISales_data_order_interface::getBaseTotalRefunded() const {
    return m_base_total_refunded;
}
void OAISales_data_order_interface::setBaseTotalRefunded(const double &base_total_refunded) {
    m_base_total_refunded = base_total_refunded;
    m_base_total_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_base_total_refunded_Set() const{
    return m_base_total_refunded_isSet;
}

bool OAISales_data_order_interface::is_base_total_refunded_Valid() const{
    return m_base_total_refunded_isValid;
}

OAISales_data_order_address_interface OAISales_data_order_interface::getBillingAddress() const {
    return m_billing_address;
}
void OAISales_data_order_interface::setBillingAddress(const OAISales_data_order_address_interface &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAISales_data_order_interface::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAISales_data_order_interface::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

qint32 OAISales_data_order_interface::getBillingAddressId() const {
    return m_billing_address_id;
}
void OAISales_data_order_interface::setBillingAddressId(const qint32 &billing_address_id) {
    m_billing_address_id = billing_address_id;
    m_billing_address_id_isSet = true;
}

bool OAISales_data_order_interface::is_billing_address_id_Set() const{
    return m_billing_address_id_isSet;
}

bool OAISales_data_order_interface::is_billing_address_id_Valid() const{
    return m_billing_address_id_isValid;
}

qint32 OAISales_data_order_interface::getCanShipPartially() const {
    return m_can_ship_partially;
}
void OAISales_data_order_interface::setCanShipPartially(const qint32 &can_ship_partially) {
    m_can_ship_partially = can_ship_partially;
    m_can_ship_partially_isSet = true;
}

bool OAISales_data_order_interface::is_can_ship_partially_Set() const{
    return m_can_ship_partially_isSet;
}

bool OAISales_data_order_interface::is_can_ship_partially_Valid() const{
    return m_can_ship_partially_isValid;
}

qint32 OAISales_data_order_interface::getCanShipPartiallyItem() const {
    return m_can_ship_partially_item;
}
void OAISales_data_order_interface::setCanShipPartiallyItem(const qint32 &can_ship_partially_item) {
    m_can_ship_partially_item = can_ship_partially_item;
    m_can_ship_partially_item_isSet = true;
}

bool OAISales_data_order_interface::is_can_ship_partially_item_Set() const{
    return m_can_ship_partially_item_isSet;
}

bool OAISales_data_order_interface::is_can_ship_partially_item_Valid() const{
    return m_can_ship_partially_item_isValid;
}

QString OAISales_data_order_interface::getCouponCode() const {
    return m_coupon_code;
}
void OAISales_data_order_interface::setCouponCode(const QString &coupon_code) {
    m_coupon_code = coupon_code;
    m_coupon_code_isSet = true;
}

bool OAISales_data_order_interface::is_coupon_code_Set() const{
    return m_coupon_code_isSet;
}

bool OAISales_data_order_interface::is_coupon_code_Valid() const{
    return m_coupon_code_isValid;
}

QString OAISales_data_order_interface::getCreatedAt() const {
    return m_created_at;
}
void OAISales_data_order_interface::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISales_data_order_interface::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISales_data_order_interface::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISales_data_order_interface::getCustomerDob() const {
    return m_customer_dob;
}
void OAISales_data_order_interface::setCustomerDob(const QString &customer_dob) {
    m_customer_dob = customer_dob;
    m_customer_dob_isSet = true;
}

bool OAISales_data_order_interface::is_customer_dob_Set() const{
    return m_customer_dob_isSet;
}

bool OAISales_data_order_interface::is_customer_dob_Valid() const{
    return m_customer_dob_isValid;
}

QString OAISales_data_order_interface::getCustomerEmail() const {
    return m_customer_email;
}
void OAISales_data_order_interface::setCustomerEmail(const QString &customer_email) {
    m_customer_email = customer_email;
    m_customer_email_isSet = true;
}

bool OAISales_data_order_interface::is_customer_email_Set() const{
    return m_customer_email_isSet;
}

bool OAISales_data_order_interface::is_customer_email_Valid() const{
    return m_customer_email_isValid;
}

QString OAISales_data_order_interface::getCustomerFirstname() const {
    return m_customer_firstname;
}
void OAISales_data_order_interface::setCustomerFirstname(const QString &customer_firstname) {
    m_customer_firstname = customer_firstname;
    m_customer_firstname_isSet = true;
}

bool OAISales_data_order_interface::is_customer_firstname_Set() const{
    return m_customer_firstname_isSet;
}

bool OAISales_data_order_interface::is_customer_firstname_Valid() const{
    return m_customer_firstname_isValid;
}

qint32 OAISales_data_order_interface::getCustomerGender() const {
    return m_customer_gender;
}
void OAISales_data_order_interface::setCustomerGender(const qint32 &customer_gender) {
    m_customer_gender = customer_gender;
    m_customer_gender_isSet = true;
}

bool OAISales_data_order_interface::is_customer_gender_Set() const{
    return m_customer_gender_isSet;
}

bool OAISales_data_order_interface::is_customer_gender_Valid() const{
    return m_customer_gender_isValid;
}

qint32 OAISales_data_order_interface::getCustomerGroupId() const {
    return m_customer_group_id;
}
void OAISales_data_order_interface::setCustomerGroupId(const qint32 &customer_group_id) {
    m_customer_group_id = customer_group_id;
    m_customer_group_id_isSet = true;
}

bool OAISales_data_order_interface::is_customer_group_id_Set() const{
    return m_customer_group_id_isSet;
}

bool OAISales_data_order_interface::is_customer_group_id_Valid() const{
    return m_customer_group_id_isValid;
}

qint32 OAISales_data_order_interface::getCustomerId() const {
    return m_customer_id;
}
void OAISales_data_order_interface::setCustomerId(const qint32 &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAISales_data_order_interface::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAISales_data_order_interface::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

qint32 OAISales_data_order_interface::getCustomerIsGuest() const {
    return m_customer_is_guest;
}
void OAISales_data_order_interface::setCustomerIsGuest(const qint32 &customer_is_guest) {
    m_customer_is_guest = customer_is_guest;
    m_customer_is_guest_isSet = true;
}

bool OAISales_data_order_interface::is_customer_is_guest_Set() const{
    return m_customer_is_guest_isSet;
}

bool OAISales_data_order_interface::is_customer_is_guest_Valid() const{
    return m_customer_is_guest_isValid;
}

QString OAISales_data_order_interface::getCustomerLastname() const {
    return m_customer_lastname;
}
void OAISales_data_order_interface::setCustomerLastname(const QString &customer_lastname) {
    m_customer_lastname = customer_lastname;
    m_customer_lastname_isSet = true;
}

bool OAISales_data_order_interface::is_customer_lastname_Set() const{
    return m_customer_lastname_isSet;
}

bool OAISales_data_order_interface::is_customer_lastname_Valid() const{
    return m_customer_lastname_isValid;
}

QString OAISales_data_order_interface::getCustomerMiddlename() const {
    return m_customer_middlename;
}
void OAISales_data_order_interface::setCustomerMiddlename(const QString &customer_middlename) {
    m_customer_middlename = customer_middlename;
    m_customer_middlename_isSet = true;
}

bool OAISales_data_order_interface::is_customer_middlename_Set() const{
    return m_customer_middlename_isSet;
}

bool OAISales_data_order_interface::is_customer_middlename_Valid() const{
    return m_customer_middlename_isValid;
}

QString OAISales_data_order_interface::getCustomerNote() const {
    return m_customer_note;
}
void OAISales_data_order_interface::setCustomerNote(const QString &customer_note) {
    m_customer_note = customer_note;
    m_customer_note_isSet = true;
}

bool OAISales_data_order_interface::is_customer_note_Set() const{
    return m_customer_note_isSet;
}

bool OAISales_data_order_interface::is_customer_note_Valid() const{
    return m_customer_note_isValid;
}

qint32 OAISales_data_order_interface::getCustomerNoteNotify() const {
    return m_customer_note_notify;
}
void OAISales_data_order_interface::setCustomerNoteNotify(const qint32 &customer_note_notify) {
    m_customer_note_notify = customer_note_notify;
    m_customer_note_notify_isSet = true;
}

bool OAISales_data_order_interface::is_customer_note_notify_Set() const{
    return m_customer_note_notify_isSet;
}

bool OAISales_data_order_interface::is_customer_note_notify_Valid() const{
    return m_customer_note_notify_isValid;
}

QString OAISales_data_order_interface::getCustomerPrefix() const {
    return m_customer_prefix;
}
void OAISales_data_order_interface::setCustomerPrefix(const QString &customer_prefix) {
    m_customer_prefix = customer_prefix;
    m_customer_prefix_isSet = true;
}

bool OAISales_data_order_interface::is_customer_prefix_Set() const{
    return m_customer_prefix_isSet;
}

bool OAISales_data_order_interface::is_customer_prefix_Valid() const{
    return m_customer_prefix_isValid;
}

QString OAISales_data_order_interface::getCustomerSuffix() const {
    return m_customer_suffix;
}
void OAISales_data_order_interface::setCustomerSuffix(const QString &customer_suffix) {
    m_customer_suffix = customer_suffix;
    m_customer_suffix_isSet = true;
}

bool OAISales_data_order_interface::is_customer_suffix_Set() const{
    return m_customer_suffix_isSet;
}

bool OAISales_data_order_interface::is_customer_suffix_Valid() const{
    return m_customer_suffix_isValid;
}

QString OAISales_data_order_interface::getCustomerTaxvat() const {
    return m_customer_taxvat;
}
void OAISales_data_order_interface::setCustomerTaxvat(const QString &customer_taxvat) {
    m_customer_taxvat = customer_taxvat;
    m_customer_taxvat_isSet = true;
}

bool OAISales_data_order_interface::is_customer_taxvat_Set() const{
    return m_customer_taxvat_isSet;
}

bool OAISales_data_order_interface::is_customer_taxvat_Valid() const{
    return m_customer_taxvat_isValid;
}

double OAISales_data_order_interface::getDiscountAmount() const {
    return m_discount_amount;
}
void OAISales_data_order_interface::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAISales_data_order_interface::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAISales_data_order_interface::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

double OAISales_data_order_interface::getDiscountCanceled() const {
    return m_discount_canceled;
}
void OAISales_data_order_interface::setDiscountCanceled(const double &discount_canceled) {
    m_discount_canceled = discount_canceled;
    m_discount_canceled_isSet = true;
}

bool OAISales_data_order_interface::is_discount_canceled_Set() const{
    return m_discount_canceled_isSet;
}

bool OAISales_data_order_interface::is_discount_canceled_Valid() const{
    return m_discount_canceled_isValid;
}

QString OAISales_data_order_interface::getDiscountDescription() const {
    return m_discount_description;
}
void OAISales_data_order_interface::setDiscountDescription(const QString &discount_description) {
    m_discount_description = discount_description;
    m_discount_description_isSet = true;
}

bool OAISales_data_order_interface::is_discount_description_Set() const{
    return m_discount_description_isSet;
}

bool OAISales_data_order_interface::is_discount_description_Valid() const{
    return m_discount_description_isValid;
}

double OAISales_data_order_interface::getDiscountInvoiced() const {
    return m_discount_invoiced;
}
void OAISales_data_order_interface::setDiscountInvoiced(const double &discount_invoiced) {
    m_discount_invoiced = discount_invoiced;
    m_discount_invoiced_isSet = true;
}

bool OAISales_data_order_interface::is_discount_invoiced_Set() const{
    return m_discount_invoiced_isSet;
}

bool OAISales_data_order_interface::is_discount_invoiced_Valid() const{
    return m_discount_invoiced_isValid;
}

double OAISales_data_order_interface::getDiscountRefunded() const {
    return m_discount_refunded;
}
void OAISales_data_order_interface::setDiscountRefunded(const double &discount_refunded) {
    m_discount_refunded = discount_refunded;
    m_discount_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_discount_refunded_Set() const{
    return m_discount_refunded_isSet;
}

bool OAISales_data_order_interface::is_discount_refunded_Valid() const{
    return m_discount_refunded_isValid;
}

double OAISales_data_order_interface::getDiscountTaxCompensationAmount() const {
    return m_discount_tax_compensation_amount;
}
void OAISales_data_order_interface::setDiscountTaxCompensationAmount(const double &discount_tax_compensation_amount) {
    m_discount_tax_compensation_amount = discount_tax_compensation_amount;
    m_discount_tax_compensation_amount_isSet = true;
}

bool OAISales_data_order_interface::is_discount_tax_compensation_amount_Set() const{
    return m_discount_tax_compensation_amount_isSet;
}

bool OAISales_data_order_interface::is_discount_tax_compensation_amount_Valid() const{
    return m_discount_tax_compensation_amount_isValid;
}

double OAISales_data_order_interface::getDiscountTaxCompensationInvoiced() const {
    return m_discount_tax_compensation_invoiced;
}
void OAISales_data_order_interface::setDiscountTaxCompensationInvoiced(const double &discount_tax_compensation_invoiced) {
    m_discount_tax_compensation_invoiced = discount_tax_compensation_invoiced;
    m_discount_tax_compensation_invoiced_isSet = true;
}

bool OAISales_data_order_interface::is_discount_tax_compensation_invoiced_Set() const{
    return m_discount_tax_compensation_invoiced_isSet;
}

bool OAISales_data_order_interface::is_discount_tax_compensation_invoiced_Valid() const{
    return m_discount_tax_compensation_invoiced_isValid;
}

double OAISales_data_order_interface::getDiscountTaxCompensationRefunded() const {
    return m_discount_tax_compensation_refunded;
}
void OAISales_data_order_interface::setDiscountTaxCompensationRefunded(const double &discount_tax_compensation_refunded) {
    m_discount_tax_compensation_refunded = discount_tax_compensation_refunded;
    m_discount_tax_compensation_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_discount_tax_compensation_refunded_Set() const{
    return m_discount_tax_compensation_refunded_isSet;
}

bool OAISales_data_order_interface::is_discount_tax_compensation_refunded_Valid() const{
    return m_discount_tax_compensation_refunded_isValid;
}

qint32 OAISales_data_order_interface::getEditIncrement() const {
    return m_edit_increment;
}
void OAISales_data_order_interface::setEditIncrement(const qint32 &edit_increment) {
    m_edit_increment = edit_increment;
    m_edit_increment_isSet = true;
}

bool OAISales_data_order_interface::is_edit_increment_Set() const{
    return m_edit_increment_isSet;
}

bool OAISales_data_order_interface::is_edit_increment_Valid() const{
    return m_edit_increment_isValid;
}

qint32 OAISales_data_order_interface::getEmailSent() const {
    return m_email_sent;
}
void OAISales_data_order_interface::setEmailSent(const qint32 &email_sent) {
    m_email_sent = email_sent;
    m_email_sent_isSet = true;
}

bool OAISales_data_order_interface::is_email_sent_Set() const{
    return m_email_sent_isSet;
}

bool OAISales_data_order_interface::is_email_sent_Valid() const{
    return m_email_sent_isValid;
}

qint32 OAISales_data_order_interface::getEntityId() const {
    return m_entity_id;
}
void OAISales_data_order_interface::setEntityId(const qint32 &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAISales_data_order_interface::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAISales_data_order_interface::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAISales_data_order_interface::getExtCustomerId() const {
    return m_ext_customer_id;
}
void OAISales_data_order_interface::setExtCustomerId(const QString &ext_customer_id) {
    m_ext_customer_id = ext_customer_id;
    m_ext_customer_id_isSet = true;
}

bool OAISales_data_order_interface::is_ext_customer_id_Set() const{
    return m_ext_customer_id_isSet;
}

bool OAISales_data_order_interface::is_ext_customer_id_Valid() const{
    return m_ext_customer_id_isValid;
}

QString OAISales_data_order_interface::getExtOrderId() const {
    return m_ext_order_id;
}
void OAISales_data_order_interface::setExtOrderId(const QString &ext_order_id) {
    m_ext_order_id = ext_order_id;
    m_ext_order_id_isSet = true;
}

bool OAISales_data_order_interface::is_ext_order_id_Set() const{
    return m_ext_order_id_isSet;
}

bool OAISales_data_order_interface::is_ext_order_id_Valid() const{
    return m_ext_order_id_isValid;
}

OAISales_data_order_extension_interface OAISales_data_order_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAISales_data_order_interface::setExtensionAttributes(const OAISales_data_order_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAISales_data_order_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAISales_data_order_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAISales_data_order_interface::getForcedShipmentWithInvoice() const {
    return m_forced_shipment_with_invoice;
}
void OAISales_data_order_interface::setForcedShipmentWithInvoice(const qint32 &forced_shipment_with_invoice) {
    m_forced_shipment_with_invoice = forced_shipment_with_invoice;
    m_forced_shipment_with_invoice_isSet = true;
}

bool OAISales_data_order_interface::is_forced_shipment_with_invoice_Set() const{
    return m_forced_shipment_with_invoice_isSet;
}

bool OAISales_data_order_interface::is_forced_shipment_with_invoice_Valid() const{
    return m_forced_shipment_with_invoice_isValid;
}

QString OAISales_data_order_interface::getGlobalCurrencyCode() const {
    return m_global_currency_code;
}
void OAISales_data_order_interface::setGlobalCurrencyCode(const QString &global_currency_code) {
    m_global_currency_code = global_currency_code;
    m_global_currency_code_isSet = true;
}

bool OAISales_data_order_interface::is_global_currency_code_Set() const{
    return m_global_currency_code_isSet;
}

bool OAISales_data_order_interface::is_global_currency_code_Valid() const{
    return m_global_currency_code_isValid;
}

double OAISales_data_order_interface::getGrandTotal() const {
    return m_grand_total;
}
void OAISales_data_order_interface::setGrandTotal(const double &grand_total) {
    m_grand_total = grand_total;
    m_grand_total_isSet = true;
}

bool OAISales_data_order_interface::is_grand_total_Set() const{
    return m_grand_total_isSet;
}

bool OAISales_data_order_interface::is_grand_total_Valid() const{
    return m_grand_total_isValid;
}

QString OAISales_data_order_interface::getHoldBeforeState() const {
    return m_hold_before_state;
}
void OAISales_data_order_interface::setHoldBeforeState(const QString &hold_before_state) {
    m_hold_before_state = hold_before_state;
    m_hold_before_state_isSet = true;
}

bool OAISales_data_order_interface::is_hold_before_state_Set() const{
    return m_hold_before_state_isSet;
}

bool OAISales_data_order_interface::is_hold_before_state_Valid() const{
    return m_hold_before_state_isValid;
}

QString OAISales_data_order_interface::getHoldBeforeStatus() const {
    return m_hold_before_status;
}
void OAISales_data_order_interface::setHoldBeforeStatus(const QString &hold_before_status) {
    m_hold_before_status = hold_before_status;
    m_hold_before_status_isSet = true;
}

bool OAISales_data_order_interface::is_hold_before_status_Set() const{
    return m_hold_before_status_isSet;
}

bool OAISales_data_order_interface::is_hold_before_status_Valid() const{
    return m_hold_before_status_isValid;
}

QString OAISales_data_order_interface::getIncrementId() const {
    return m_increment_id;
}
void OAISales_data_order_interface::setIncrementId(const QString &increment_id) {
    m_increment_id = increment_id;
    m_increment_id_isSet = true;
}

bool OAISales_data_order_interface::is_increment_id_Set() const{
    return m_increment_id_isSet;
}

bool OAISales_data_order_interface::is_increment_id_Valid() const{
    return m_increment_id_isValid;
}

qint32 OAISales_data_order_interface::getIsVirtual() const {
    return m_is_virtual;
}
void OAISales_data_order_interface::setIsVirtual(const qint32 &is_virtual) {
    m_is_virtual = is_virtual;
    m_is_virtual_isSet = true;
}

bool OAISales_data_order_interface::is_is_virtual_Set() const{
    return m_is_virtual_isSet;
}

bool OAISales_data_order_interface::is_is_virtual_Valid() const{
    return m_is_virtual_isValid;
}

QList<OAISales_data_order_item_interface> OAISales_data_order_interface::getItems() const {
    return m_items;
}
void OAISales_data_order_interface::setItems(const QList<OAISales_data_order_item_interface> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISales_data_order_interface::is_items_Set() const{
    return m_items_isSet;
}

bool OAISales_data_order_interface::is_items_Valid() const{
    return m_items_isValid;
}

QString OAISales_data_order_interface::getOrderCurrencyCode() const {
    return m_order_currency_code;
}
void OAISales_data_order_interface::setOrderCurrencyCode(const QString &order_currency_code) {
    m_order_currency_code = order_currency_code;
    m_order_currency_code_isSet = true;
}

bool OAISales_data_order_interface::is_order_currency_code_Set() const{
    return m_order_currency_code_isSet;
}

bool OAISales_data_order_interface::is_order_currency_code_Valid() const{
    return m_order_currency_code_isValid;
}

QString OAISales_data_order_interface::getOriginalIncrementId() const {
    return m_original_increment_id;
}
void OAISales_data_order_interface::setOriginalIncrementId(const QString &original_increment_id) {
    m_original_increment_id = original_increment_id;
    m_original_increment_id_isSet = true;
}

bool OAISales_data_order_interface::is_original_increment_id_Set() const{
    return m_original_increment_id_isSet;
}

bool OAISales_data_order_interface::is_original_increment_id_Valid() const{
    return m_original_increment_id_isValid;
}

OAISales_data_order_payment_interface OAISales_data_order_interface::getPayment() const {
    return m_payment;
}
void OAISales_data_order_interface::setPayment(const OAISales_data_order_payment_interface &payment) {
    m_payment = payment;
    m_payment_isSet = true;
}

bool OAISales_data_order_interface::is_payment_Set() const{
    return m_payment_isSet;
}

bool OAISales_data_order_interface::is_payment_Valid() const{
    return m_payment_isValid;
}

qint32 OAISales_data_order_interface::getPaymentAuthExpiration() const {
    return m_payment_auth_expiration;
}
void OAISales_data_order_interface::setPaymentAuthExpiration(const qint32 &payment_auth_expiration) {
    m_payment_auth_expiration = payment_auth_expiration;
    m_payment_auth_expiration_isSet = true;
}

bool OAISales_data_order_interface::is_payment_auth_expiration_Set() const{
    return m_payment_auth_expiration_isSet;
}

bool OAISales_data_order_interface::is_payment_auth_expiration_Valid() const{
    return m_payment_auth_expiration_isValid;
}

double OAISales_data_order_interface::getPaymentAuthorizationAmount() const {
    return m_payment_authorization_amount;
}
void OAISales_data_order_interface::setPaymentAuthorizationAmount(const double &payment_authorization_amount) {
    m_payment_authorization_amount = payment_authorization_amount;
    m_payment_authorization_amount_isSet = true;
}

bool OAISales_data_order_interface::is_payment_authorization_amount_Set() const{
    return m_payment_authorization_amount_isSet;
}

bool OAISales_data_order_interface::is_payment_authorization_amount_Valid() const{
    return m_payment_authorization_amount_isValid;
}

QString OAISales_data_order_interface::getProtectCode() const {
    return m_protect_code;
}
void OAISales_data_order_interface::setProtectCode(const QString &protect_code) {
    m_protect_code = protect_code;
    m_protect_code_isSet = true;
}

bool OAISales_data_order_interface::is_protect_code_Set() const{
    return m_protect_code_isSet;
}

bool OAISales_data_order_interface::is_protect_code_Valid() const{
    return m_protect_code_isValid;
}

qint32 OAISales_data_order_interface::getQuoteAddressId() const {
    return m_quote_address_id;
}
void OAISales_data_order_interface::setQuoteAddressId(const qint32 &quote_address_id) {
    m_quote_address_id = quote_address_id;
    m_quote_address_id_isSet = true;
}

bool OAISales_data_order_interface::is_quote_address_id_Set() const{
    return m_quote_address_id_isSet;
}

bool OAISales_data_order_interface::is_quote_address_id_Valid() const{
    return m_quote_address_id_isValid;
}

qint32 OAISales_data_order_interface::getQuoteId() const {
    return m_quote_id;
}
void OAISales_data_order_interface::setQuoteId(const qint32 &quote_id) {
    m_quote_id = quote_id;
    m_quote_id_isSet = true;
}

bool OAISales_data_order_interface::is_quote_id_Set() const{
    return m_quote_id_isSet;
}

bool OAISales_data_order_interface::is_quote_id_Valid() const{
    return m_quote_id_isValid;
}

QString OAISales_data_order_interface::getRelationChildId() const {
    return m_relation_child_id;
}
void OAISales_data_order_interface::setRelationChildId(const QString &relation_child_id) {
    m_relation_child_id = relation_child_id;
    m_relation_child_id_isSet = true;
}

bool OAISales_data_order_interface::is_relation_child_id_Set() const{
    return m_relation_child_id_isSet;
}

bool OAISales_data_order_interface::is_relation_child_id_Valid() const{
    return m_relation_child_id_isValid;
}

QString OAISales_data_order_interface::getRelationChildRealId() const {
    return m_relation_child_real_id;
}
void OAISales_data_order_interface::setRelationChildRealId(const QString &relation_child_real_id) {
    m_relation_child_real_id = relation_child_real_id;
    m_relation_child_real_id_isSet = true;
}

bool OAISales_data_order_interface::is_relation_child_real_id_Set() const{
    return m_relation_child_real_id_isSet;
}

bool OAISales_data_order_interface::is_relation_child_real_id_Valid() const{
    return m_relation_child_real_id_isValid;
}

QString OAISales_data_order_interface::getRelationParentId() const {
    return m_relation_parent_id;
}
void OAISales_data_order_interface::setRelationParentId(const QString &relation_parent_id) {
    m_relation_parent_id = relation_parent_id;
    m_relation_parent_id_isSet = true;
}

bool OAISales_data_order_interface::is_relation_parent_id_Set() const{
    return m_relation_parent_id_isSet;
}

bool OAISales_data_order_interface::is_relation_parent_id_Valid() const{
    return m_relation_parent_id_isValid;
}

QString OAISales_data_order_interface::getRelationParentRealId() const {
    return m_relation_parent_real_id;
}
void OAISales_data_order_interface::setRelationParentRealId(const QString &relation_parent_real_id) {
    m_relation_parent_real_id = relation_parent_real_id;
    m_relation_parent_real_id_isSet = true;
}

bool OAISales_data_order_interface::is_relation_parent_real_id_Set() const{
    return m_relation_parent_real_id_isSet;
}

bool OAISales_data_order_interface::is_relation_parent_real_id_Valid() const{
    return m_relation_parent_real_id_isValid;
}

QString OAISales_data_order_interface::getRemoteIp() const {
    return m_remote_ip;
}
void OAISales_data_order_interface::setRemoteIp(const QString &remote_ip) {
    m_remote_ip = remote_ip;
    m_remote_ip_isSet = true;
}

bool OAISales_data_order_interface::is_remote_ip_Set() const{
    return m_remote_ip_isSet;
}

bool OAISales_data_order_interface::is_remote_ip_Valid() const{
    return m_remote_ip_isValid;
}

double OAISales_data_order_interface::getShippingAmount() const {
    return m_shipping_amount;
}
void OAISales_data_order_interface::setShippingAmount(const double &shipping_amount) {
    m_shipping_amount = shipping_amount;
    m_shipping_amount_isSet = true;
}

bool OAISales_data_order_interface::is_shipping_amount_Set() const{
    return m_shipping_amount_isSet;
}

bool OAISales_data_order_interface::is_shipping_amount_Valid() const{
    return m_shipping_amount_isValid;
}

double OAISales_data_order_interface::getShippingCanceled() const {
    return m_shipping_canceled;
}
void OAISales_data_order_interface::setShippingCanceled(const double &shipping_canceled) {
    m_shipping_canceled = shipping_canceled;
    m_shipping_canceled_isSet = true;
}

bool OAISales_data_order_interface::is_shipping_canceled_Set() const{
    return m_shipping_canceled_isSet;
}

bool OAISales_data_order_interface::is_shipping_canceled_Valid() const{
    return m_shipping_canceled_isValid;
}

QString OAISales_data_order_interface::getShippingDescription() const {
    return m_shipping_description;
}
void OAISales_data_order_interface::setShippingDescription(const QString &shipping_description) {
    m_shipping_description = shipping_description;
    m_shipping_description_isSet = true;
}

bool OAISales_data_order_interface::is_shipping_description_Set() const{
    return m_shipping_description_isSet;
}

bool OAISales_data_order_interface::is_shipping_description_Valid() const{
    return m_shipping_description_isValid;
}

double OAISales_data_order_interface::getShippingDiscountAmount() const {
    return m_shipping_discount_amount;
}
void OAISales_data_order_interface::setShippingDiscountAmount(const double &shipping_discount_amount) {
    m_shipping_discount_amount = shipping_discount_amount;
    m_shipping_discount_amount_isSet = true;
}

bool OAISales_data_order_interface::is_shipping_discount_amount_Set() const{
    return m_shipping_discount_amount_isSet;
}

bool OAISales_data_order_interface::is_shipping_discount_amount_Valid() const{
    return m_shipping_discount_amount_isValid;
}

double OAISales_data_order_interface::getShippingDiscountTaxCompensationAmount() const {
    return m_shipping_discount_tax_compensation_amount;
}
void OAISales_data_order_interface::setShippingDiscountTaxCompensationAmount(const double &shipping_discount_tax_compensation_amount) {
    m_shipping_discount_tax_compensation_amount = shipping_discount_tax_compensation_amount;
    m_shipping_discount_tax_compensation_amount_isSet = true;
}

bool OAISales_data_order_interface::is_shipping_discount_tax_compensation_amount_Set() const{
    return m_shipping_discount_tax_compensation_amount_isSet;
}

bool OAISales_data_order_interface::is_shipping_discount_tax_compensation_amount_Valid() const{
    return m_shipping_discount_tax_compensation_amount_isValid;
}

double OAISales_data_order_interface::getShippingInclTax() const {
    return m_shipping_incl_tax;
}
void OAISales_data_order_interface::setShippingInclTax(const double &shipping_incl_tax) {
    m_shipping_incl_tax = shipping_incl_tax;
    m_shipping_incl_tax_isSet = true;
}

bool OAISales_data_order_interface::is_shipping_incl_tax_Set() const{
    return m_shipping_incl_tax_isSet;
}

bool OAISales_data_order_interface::is_shipping_incl_tax_Valid() const{
    return m_shipping_incl_tax_isValid;
}

double OAISales_data_order_interface::getShippingInvoiced() const {
    return m_shipping_invoiced;
}
void OAISales_data_order_interface::setShippingInvoiced(const double &shipping_invoiced) {
    m_shipping_invoiced = shipping_invoiced;
    m_shipping_invoiced_isSet = true;
}

bool OAISales_data_order_interface::is_shipping_invoiced_Set() const{
    return m_shipping_invoiced_isSet;
}

bool OAISales_data_order_interface::is_shipping_invoiced_Valid() const{
    return m_shipping_invoiced_isValid;
}

double OAISales_data_order_interface::getShippingRefunded() const {
    return m_shipping_refunded;
}
void OAISales_data_order_interface::setShippingRefunded(const double &shipping_refunded) {
    m_shipping_refunded = shipping_refunded;
    m_shipping_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_shipping_refunded_Set() const{
    return m_shipping_refunded_isSet;
}

bool OAISales_data_order_interface::is_shipping_refunded_Valid() const{
    return m_shipping_refunded_isValid;
}

double OAISales_data_order_interface::getShippingTaxAmount() const {
    return m_shipping_tax_amount;
}
void OAISales_data_order_interface::setShippingTaxAmount(const double &shipping_tax_amount) {
    m_shipping_tax_amount = shipping_tax_amount;
    m_shipping_tax_amount_isSet = true;
}

bool OAISales_data_order_interface::is_shipping_tax_amount_Set() const{
    return m_shipping_tax_amount_isSet;
}

bool OAISales_data_order_interface::is_shipping_tax_amount_Valid() const{
    return m_shipping_tax_amount_isValid;
}

double OAISales_data_order_interface::getShippingTaxRefunded() const {
    return m_shipping_tax_refunded;
}
void OAISales_data_order_interface::setShippingTaxRefunded(const double &shipping_tax_refunded) {
    m_shipping_tax_refunded = shipping_tax_refunded;
    m_shipping_tax_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_shipping_tax_refunded_Set() const{
    return m_shipping_tax_refunded_isSet;
}

bool OAISales_data_order_interface::is_shipping_tax_refunded_Valid() const{
    return m_shipping_tax_refunded_isValid;
}

QString OAISales_data_order_interface::getState() const {
    return m_state;
}
void OAISales_data_order_interface::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISales_data_order_interface::is_state_Set() const{
    return m_state_isSet;
}

bool OAISales_data_order_interface::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISales_data_order_interface::getStatus() const {
    return m_status;
}
void OAISales_data_order_interface::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISales_data_order_interface::is_status_Set() const{
    return m_status_isSet;
}

bool OAISales_data_order_interface::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAISales_data_order_status_history_interface> OAISales_data_order_interface::getStatusHistories() const {
    return m_status_histories;
}
void OAISales_data_order_interface::setStatusHistories(const QList<OAISales_data_order_status_history_interface> &status_histories) {
    m_status_histories = status_histories;
    m_status_histories_isSet = true;
}

bool OAISales_data_order_interface::is_status_histories_Set() const{
    return m_status_histories_isSet;
}

bool OAISales_data_order_interface::is_status_histories_Valid() const{
    return m_status_histories_isValid;
}

QString OAISales_data_order_interface::getStoreCurrencyCode() const {
    return m_store_currency_code;
}
void OAISales_data_order_interface::setStoreCurrencyCode(const QString &store_currency_code) {
    m_store_currency_code = store_currency_code;
    m_store_currency_code_isSet = true;
}

bool OAISales_data_order_interface::is_store_currency_code_Set() const{
    return m_store_currency_code_isSet;
}

bool OAISales_data_order_interface::is_store_currency_code_Valid() const{
    return m_store_currency_code_isValid;
}

qint32 OAISales_data_order_interface::getStoreId() const {
    return m_store_id;
}
void OAISales_data_order_interface::setStoreId(const qint32 &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAISales_data_order_interface::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAISales_data_order_interface::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QString OAISales_data_order_interface::getStoreName() const {
    return m_store_name;
}
void OAISales_data_order_interface::setStoreName(const QString &store_name) {
    m_store_name = store_name;
    m_store_name_isSet = true;
}

bool OAISales_data_order_interface::is_store_name_Set() const{
    return m_store_name_isSet;
}

bool OAISales_data_order_interface::is_store_name_Valid() const{
    return m_store_name_isValid;
}

double OAISales_data_order_interface::getStoreToBaseRate() const {
    return m_store_to_base_rate;
}
void OAISales_data_order_interface::setStoreToBaseRate(const double &store_to_base_rate) {
    m_store_to_base_rate = store_to_base_rate;
    m_store_to_base_rate_isSet = true;
}

bool OAISales_data_order_interface::is_store_to_base_rate_Set() const{
    return m_store_to_base_rate_isSet;
}

bool OAISales_data_order_interface::is_store_to_base_rate_Valid() const{
    return m_store_to_base_rate_isValid;
}

double OAISales_data_order_interface::getStoreToOrderRate() const {
    return m_store_to_order_rate;
}
void OAISales_data_order_interface::setStoreToOrderRate(const double &store_to_order_rate) {
    m_store_to_order_rate = store_to_order_rate;
    m_store_to_order_rate_isSet = true;
}

bool OAISales_data_order_interface::is_store_to_order_rate_Set() const{
    return m_store_to_order_rate_isSet;
}

bool OAISales_data_order_interface::is_store_to_order_rate_Valid() const{
    return m_store_to_order_rate_isValid;
}

double OAISales_data_order_interface::getSubtotal() const {
    return m_subtotal;
}
void OAISales_data_order_interface::setSubtotal(const double &subtotal) {
    m_subtotal = subtotal;
    m_subtotal_isSet = true;
}

bool OAISales_data_order_interface::is_subtotal_Set() const{
    return m_subtotal_isSet;
}

bool OAISales_data_order_interface::is_subtotal_Valid() const{
    return m_subtotal_isValid;
}

double OAISales_data_order_interface::getSubtotalCanceled() const {
    return m_subtotal_canceled;
}
void OAISales_data_order_interface::setSubtotalCanceled(const double &subtotal_canceled) {
    m_subtotal_canceled = subtotal_canceled;
    m_subtotal_canceled_isSet = true;
}

bool OAISales_data_order_interface::is_subtotal_canceled_Set() const{
    return m_subtotal_canceled_isSet;
}

bool OAISales_data_order_interface::is_subtotal_canceled_Valid() const{
    return m_subtotal_canceled_isValid;
}

double OAISales_data_order_interface::getSubtotalInclTax() const {
    return m_subtotal_incl_tax;
}
void OAISales_data_order_interface::setSubtotalInclTax(const double &subtotal_incl_tax) {
    m_subtotal_incl_tax = subtotal_incl_tax;
    m_subtotal_incl_tax_isSet = true;
}

bool OAISales_data_order_interface::is_subtotal_incl_tax_Set() const{
    return m_subtotal_incl_tax_isSet;
}

bool OAISales_data_order_interface::is_subtotal_incl_tax_Valid() const{
    return m_subtotal_incl_tax_isValid;
}

double OAISales_data_order_interface::getSubtotalInvoiced() const {
    return m_subtotal_invoiced;
}
void OAISales_data_order_interface::setSubtotalInvoiced(const double &subtotal_invoiced) {
    m_subtotal_invoiced = subtotal_invoiced;
    m_subtotal_invoiced_isSet = true;
}

bool OAISales_data_order_interface::is_subtotal_invoiced_Set() const{
    return m_subtotal_invoiced_isSet;
}

bool OAISales_data_order_interface::is_subtotal_invoiced_Valid() const{
    return m_subtotal_invoiced_isValid;
}

double OAISales_data_order_interface::getSubtotalRefunded() const {
    return m_subtotal_refunded;
}
void OAISales_data_order_interface::setSubtotalRefunded(const double &subtotal_refunded) {
    m_subtotal_refunded = subtotal_refunded;
    m_subtotal_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_subtotal_refunded_Set() const{
    return m_subtotal_refunded_isSet;
}

bool OAISales_data_order_interface::is_subtotal_refunded_Valid() const{
    return m_subtotal_refunded_isValid;
}

double OAISales_data_order_interface::getTaxAmount() const {
    return m_tax_amount;
}
void OAISales_data_order_interface::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAISales_data_order_interface::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAISales_data_order_interface::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

double OAISales_data_order_interface::getTaxCanceled() const {
    return m_tax_canceled;
}
void OAISales_data_order_interface::setTaxCanceled(const double &tax_canceled) {
    m_tax_canceled = tax_canceled;
    m_tax_canceled_isSet = true;
}

bool OAISales_data_order_interface::is_tax_canceled_Set() const{
    return m_tax_canceled_isSet;
}

bool OAISales_data_order_interface::is_tax_canceled_Valid() const{
    return m_tax_canceled_isValid;
}

double OAISales_data_order_interface::getTaxInvoiced() const {
    return m_tax_invoiced;
}
void OAISales_data_order_interface::setTaxInvoiced(const double &tax_invoiced) {
    m_tax_invoiced = tax_invoiced;
    m_tax_invoiced_isSet = true;
}

bool OAISales_data_order_interface::is_tax_invoiced_Set() const{
    return m_tax_invoiced_isSet;
}

bool OAISales_data_order_interface::is_tax_invoiced_Valid() const{
    return m_tax_invoiced_isValid;
}

double OAISales_data_order_interface::getTaxRefunded() const {
    return m_tax_refunded;
}
void OAISales_data_order_interface::setTaxRefunded(const double &tax_refunded) {
    m_tax_refunded = tax_refunded;
    m_tax_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_tax_refunded_Set() const{
    return m_tax_refunded_isSet;
}

bool OAISales_data_order_interface::is_tax_refunded_Valid() const{
    return m_tax_refunded_isValid;
}

double OAISales_data_order_interface::getTotalCanceled() const {
    return m_total_canceled;
}
void OAISales_data_order_interface::setTotalCanceled(const double &total_canceled) {
    m_total_canceled = total_canceled;
    m_total_canceled_isSet = true;
}

bool OAISales_data_order_interface::is_total_canceled_Set() const{
    return m_total_canceled_isSet;
}

bool OAISales_data_order_interface::is_total_canceled_Valid() const{
    return m_total_canceled_isValid;
}

double OAISales_data_order_interface::getTotalDue() const {
    return m_total_due;
}
void OAISales_data_order_interface::setTotalDue(const double &total_due) {
    m_total_due = total_due;
    m_total_due_isSet = true;
}

bool OAISales_data_order_interface::is_total_due_Set() const{
    return m_total_due_isSet;
}

bool OAISales_data_order_interface::is_total_due_Valid() const{
    return m_total_due_isValid;
}

double OAISales_data_order_interface::getTotalInvoiced() const {
    return m_total_invoiced;
}
void OAISales_data_order_interface::setTotalInvoiced(const double &total_invoiced) {
    m_total_invoiced = total_invoiced;
    m_total_invoiced_isSet = true;
}

bool OAISales_data_order_interface::is_total_invoiced_Set() const{
    return m_total_invoiced_isSet;
}

bool OAISales_data_order_interface::is_total_invoiced_Valid() const{
    return m_total_invoiced_isValid;
}

qint32 OAISales_data_order_interface::getTotalItemCount() const {
    return m_total_item_count;
}
void OAISales_data_order_interface::setTotalItemCount(const qint32 &total_item_count) {
    m_total_item_count = total_item_count;
    m_total_item_count_isSet = true;
}

bool OAISales_data_order_interface::is_total_item_count_Set() const{
    return m_total_item_count_isSet;
}

bool OAISales_data_order_interface::is_total_item_count_Valid() const{
    return m_total_item_count_isValid;
}

double OAISales_data_order_interface::getTotalOfflineRefunded() const {
    return m_total_offline_refunded;
}
void OAISales_data_order_interface::setTotalOfflineRefunded(const double &total_offline_refunded) {
    m_total_offline_refunded = total_offline_refunded;
    m_total_offline_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_total_offline_refunded_Set() const{
    return m_total_offline_refunded_isSet;
}

bool OAISales_data_order_interface::is_total_offline_refunded_Valid() const{
    return m_total_offline_refunded_isValid;
}

double OAISales_data_order_interface::getTotalOnlineRefunded() const {
    return m_total_online_refunded;
}
void OAISales_data_order_interface::setTotalOnlineRefunded(const double &total_online_refunded) {
    m_total_online_refunded = total_online_refunded;
    m_total_online_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_total_online_refunded_Set() const{
    return m_total_online_refunded_isSet;
}

bool OAISales_data_order_interface::is_total_online_refunded_Valid() const{
    return m_total_online_refunded_isValid;
}

double OAISales_data_order_interface::getTotalPaid() const {
    return m_total_paid;
}
void OAISales_data_order_interface::setTotalPaid(const double &total_paid) {
    m_total_paid = total_paid;
    m_total_paid_isSet = true;
}

bool OAISales_data_order_interface::is_total_paid_Set() const{
    return m_total_paid_isSet;
}

bool OAISales_data_order_interface::is_total_paid_Valid() const{
    return m_total_paid_isValid;
}

double OAISales_data_order_interface::getTotalQtyOrdered() const {
    return m_total_qty_ordered;
}
void OAISales_data_order_interface::setTotalQtyOrdered(const double &total_qty_ordered) {
    m_total_qty_ordered = total_qty_ordered;
    m_total_qty_ordered_isSet = true;
}

bool OAISales_data_order_interface::is_total_qty_ordered_Set() const{
    return m_total_qty_ordered_isSet;
}

bool OAISales_data_order_interface::is_total_qty_ordered_Valid() const{
    return m_total_qty_ordered_isValid;
}

double OAISales_data_order_interface::getTotalRefunded() const {
    return m_total_refunded;
}
void OAISales_data_order_interface::setTotalRefunded(const double &total_refunded) {
    m_total_refunded = total_refunded;
    m_total_refunded_isSet = true;
}

bool OAISales_data_order_interface::is_total_refunded_Set() const{
    return m_total_refunded_isSet;
}

bool OAISales_data_order_interface::is_total_refunded_Valid() const{
    return m_total_refunded_isValid;
}

QString OAISales_data_order_interface::getUpdatedAt() const {
    return m_updated_at;
}
void OAISales_data_order_interface::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISales_data_order_interface::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISales_data_order_interface::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

double OAISales_data_order_interface::getWeight() const {
    return m_weight;
}
void OAISales_data_order_interface::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAISales_data_order_interface::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAISales_data_order_interface::is_weight_Valid() const{
    return m_weight_isValid;
}

QString OAISales_data_order_interface::getXForwardedFor() const {
    return m_x_forwarded_for;
}
void OAISales_data_order_interface::setXForwardedFor(const QString &x_forwarded_for) {
    m_x_forwarded_for = x_forwarded_for;
    m_x_forwarded_for_isSet = true;
}

bool OAISales_data_order_interface::is_x_forwarded_for_Set() const{
    return m_x_forwarded_for_isSet;
}

bool OAISales_data_order_interface::is_x_forwarded_for_Valid() const{
    return m_x_forwarded_for_isValid;
}

bool OAISales_data_order_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjustment_negative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adjustment_positive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_rule_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_adjustment_negative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_adjustment_positive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_tax_compensation_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_tax_compensation_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_tax_compensation_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_grand_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_discount_tax_compensation_amnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_tax_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_subtotal_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_subtotal_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_subtotal_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_subtotal_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_tax_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_tax_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_tax_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_to_global_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_to_order_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_total_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_total_due_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_total_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_total_invoiced_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_total_offline_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_total_online_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_total_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_total_qty_ordered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_total_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_ship_partially_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_ship_partially_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coupon_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_dob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_firstname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_is_guest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_lastname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_middlename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_note_notify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_taxvat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_tax_compensation_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_tax_compensation_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_tax_compensation_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_increment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forced_shipment_with_invoice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grand_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_before_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_before_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_increment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_virtual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_increment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_auth_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_authorization_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protect_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_child_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_child_real_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_parent_real_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_discount_tax_compensation_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_tax_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_histories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_to_base_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_to_order_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_due_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_offline_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_online_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_qty_ordered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_forwarded_for_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISales_data_order_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_grand_total_isValid && m_customer_email_isValid && m_grand_total_isValid && m_items_isValid && true;
}

} // namespace OpenAPI
