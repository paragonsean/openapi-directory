/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuote_data_currency_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuote_data_currency_interface::OAIQuote_data_currency_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuote_data_currency_interface::OAIQuote_data_currency_interface() {
    this->initializeModel();
}

OAIQuote_data_currency_interface::~OAIQuote_data_currency_interface() {}

void OAIQuote_data_currency_interface::initializeModel() {

    m_base_currency_code_isSet = false;
    m_base_currency_code_isValid = false;

    m_base_to_global_rate_isSet = false;
    m_base_to_global_rate_isValid = false;

    m_base_to_quote_rate_isSet = false;
    m_base_to_quote_rate_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_global_currency_code_isSet = false;
    m_global_currency_code_isValid = false;

    m_quote_currency_code_isSet = false;
    m_quote_currency_code_isValid = false;

    m_store_currency_code_isSet = false;
    m_store_currency_code_isValid = false;

    m_store_to_base_rate_isSet = false;
    m_store_to_base_rate_isValid = false;

    m_store_to_quote_rate_isSet = false;
    m_store_to_quote_rate_isValid = false;
}

void OAIQuote_data_currency_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuote_data_currency_interface::fromJsonObject(QJsonObject json) {

    m_base_currency_code_isValid = ::OpenAPI::fromJsonValue(m_base_currency_code, json[QString("base_currency_code")]);
    m_base_currency_code_isSet = !json[QString("base_currency_code")].isNull() && m_base_currency_code_isValid;

    m_base_to_global_rate_isValid = ::OpenAPI::fromJsonValue(m_base_to_global_rate, json[QString("base_to_global_rate")]);
    m_base_to_global_rate_isSet = !json[QString("base_to_global_rate")].isNull() && m_base_to_global_rate_isValid;

    m_base_to_quote_rate_isValid = ::OpenAPI::fromJsonValue(m_base_to_quote_rate, json[QString("base_to_quote_rate")]);
    m_base_to_quote_rate_isSet = !json[QString("base_to_quote_rate")].isNull() && m_base_to_quote_rate_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_global_currency_code_isValid = ::OpenAPI::fromJsonValue(m_global_currency_code, json[QString("global_currency_code")]);
    m_global_currency_code_isSet = !json[QString("global_currency_code")].isNull() && m_global_currency_code_isValid;

    m_quote_currency_code_isValid = ::OpenAPI::fromJsonValue(m_quote_currency_code, json[QString("quote_currency_code")]);
    m_quote_currency_code_isSet = !json[QString("quote_currency_code")].isNull() && m_quote_currency_code_isValid;

    m_store_currency_code_isValid = ::OpenAPI::fromJsonValue(m_store_currency_code, json[QString("store_currency_code")]);
    m_store_currency_code_isSet = !json[QString("store_currency_code")].isNull() && m_store_currency_code_isValid;

    m_store_to_base_rate_isValid = ::OpenAPI::fromJsonValue(m_store_to_base_rate, json[QString("store_to_base_rate")]);
    m_store_to_base_rate_isSet = !json[QString("store_to_base_rate")].isNull() && m_store_to_base_rate_isValid;

    m_store_to_quote_rate_isValid = ::OpenAPI::fromJsonValue(m_store_to_quote_rate, json[QString("store_to_quote_rate")]);
    m_store_to_quote_rate_isSet = !json[QString("store_to_quote_rate")].isNull() && m_store_to_quote_rate_isValid;
}

QString OAIQuote_data_currency_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuote_data_currency_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_base_currency_code_isSet) {
        obj.insert(QString("base_currency_code"), ::OpenAPI::toJsonValue(m_base_currency_code));
    }
    if (m_base_to_global_rate_isSet) {
        obj.insert(QString("base_to_global_rate"), ::OpenAPI::toJsonValue(m_base_to_global_rate));
    }
    if (m_base_to_quote_rate_isSet) {
        obj.insert(QString("base_to_quote_rate"), ::OpenAPI::toJsonValue(m_base_to_quote_rate));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_global_currency_code_isSet) {
        obj.insert(QString("global_currency_code"), ::OpenAPI::toJsonValue(m_global_currency_code));
    }
    if (m_quote_currency_code_isSet) {
        obj.insert(QString("quote_currency_code"), ::OpenAPI::toJsonValue(m_quote_currency_code));
    }
    if (m_store_currency_code_isSet) {
        obj.insert(QString("store_currency_code"), ::OpenAPI::toJsonValue(m_store_currency_code));
    }
    if (m_store_to_base_rate_isSet) {
        obj.insert(QString("store_to_base_rate"), ::OpenAPI::toJsonValue(m_store_to_base_rate));
    }
    if (m_store_to_quote_rate_isSet) {
        obj.insert(QString("store_to_quote_rate"), ::OpenAPI::toJsonValue(m_store_to_quote_rate));
    }
    return obj;
}

QString OAIQuote_data_currency_interface::getBaseCurrencyCode() const {
    return m_base_currency_code;
}
void OAIQuote_data_currency_interface::setBaseCurrencyCode(const QString &base_currency_code) {
    m_base_currency_code = base_currency_code;
    m_base_currency_code_isSet = true;
}

bool OAIQuote_data_currency_interface::is_base_currency_code_Set() const{
    return m_base_currency_code_isSet;
}

bool OAIQuote_data_currency_interface::is_base_currency_code_Valid() const{
    return m_base_currency_code_isValid;
}

double OAIQuote_data_currency_interface::getBaseToGlobalRate() const {
    return m_base_to_global_rate;
}
void OAIQuote_data_currency_interface::setBaseToGlobalRate(const double &base_to_global_rate) {
    m_base_to_global_rate = base_to_global_rate;
    m_base_to_global_rate_isSet = true;
}

bool OAIQuote_data_currency_interface::is_base_to_global_rate_Set() const{
    return m_base_to_global_rate_isSet;
}

bool OAIQuote_data_currency_interface::is_base_to_global_rate_Valid() const{
    return m_base_to_global_rate_isValid;
}

double OAIQuote_data_currency_interface::getBaseToQuoteRate() const {
    return m_base_to_quote_rate;
}
void OAIQuote_data_currency_interface::setBaseToQuoteRate(const double &base_to_quote_rate) {
    m_base_to_quote_rate = base_to_quote_rate;
    m_base_to_quote_rate_isSet = true;
}

bool OAIQuote_data_currency_interface::is_base_to_quote_rate_Set() const{
    return m_base_to_quote_rate_isSet;
}

bool OAIQuote_data_currency_interface::is_base_to_quote_rate_Valid() const{
    return m_base_to_quote_rate_isValid;
}

OAIObject OAIQuote_data_currency_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIQuote_data_currency_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIQuote_data_currency_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIQuote_data_currency_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAIQuote_data_currency_interface::getGlobalCurrencyCode() const {
    return m_global_currency_code;
}
void OAIQuote_data_currency_interface::setGlobalCurrencyCode(const QString &global_currency_code) {
    m_global_currency_code = global_currency_code;
    m_global_currency_code_isSet = true;
}

bool OAIQuote_data_currency_interface::is_global_currency_code_Set() const{
    return m_global_currency_code_isSet;
}

bool OAIQuote_data_currency_interface::is_global_currency_code_Valid() const{
    return m_global_currency_code_isValid;
}

QString OAIQuote_data_currency_interface::getQuoteCurrencyCode() const {
    return m_quote_currency_code;
}
void OAIQuote_data_currency_interface::setQuoteCurrencyCode(const QString &quote_currency_code) {
    m_quote_currency_code = quote_currency_code;
    m_quote_currency_code_isSet = true;
}

bool OAIQuote_data_currency_interface::is_quote_currency_code_Set() const{
    return m_quote_currency_code_isSet;
}

bool OAIQuote_data_currency_interface::is_quote_currency_code_Valid() const{
    return m_quote_currency_code_isValid;
}

QString OAIQuote_data_currency_interface::getStoreCurrencyCode() const {
    return m_store_currency_code;
}
void OAIQuote_data_currency_interface::setStoreCurrencyCode(const QString &store_currency_code) {
    m_store_currency_code = store_currency_code;
    m_store_currency_code_isSet = true;
}

bool OAIQuote_data_currency_interface::is_store_currency_code_Set() const{
    return m_store_currency_code_isSet;
}

bool OAIQuote_data_currency_interface::is_store_currency_code_Valid() const{
    return m_store_currency_code_isValid;
}

double OAIQuote_data_currency_interface::getStoreToBaseRate() const {
    return m_store_to_base_rate;
}
void OAIQuote_data_currency_interface::setStoreToBaseRate(const double &store_to_base_rate) {
    m_store_to_base_rate = store_to_base_rate;
    m_store_to_base_rate_isSet = true;
}

bool OAIQuote_data_currency_interface::is_store_to_base_rate_Set() const{
    return m_store_to_base_rate_isSet;
}

bool OAIQuote_data_currency_interface::is_store_to_base_rate_Valid() const{
    return m_store_to_base_rate_isValid;
}

double OAIQuote_data_currency_interface::getStoreToQuoteRate() const {
    return m_store_to_quote_rate;
}
void OAIQuote_data_currency_interface::setStoreToQuoteRate(const double &store_to_quote_rate) {
    m_store_to_quote_rate = store_to_quote_rate;
    m_store_to_quote_rate_isSet = true;
}

bool OAIQuote_data_currency_interface::is_store_to_quote_rate_Set() const{
    return m_store_to_quote_rate_isSet;
}

bool OAIQuote_data_currency_interface::is_store_to_quote_rate_Valid() const{
    return m_store_to_quote_rate_isValid;
}

bool OAIQuote_data_currency_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_to_global_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_to_quote_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_to_base_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_to_quote_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuote_data_currency_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
