/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISales_data_creditmemo_item_interface.h
 *
 * Credit memo item interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo item is an invoiced item for which a merchant creates a credit memo.
 */

#ifndef OAISales_data_creditmemo_item_interface_H
#define OAISales_data_creditmemo_item_interface_H

#include <QJsonObject>

#include "OAISales_data_creditmemo_item_extension_interface.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISales_data_creditmemo_item_extension_interface;

class OAISales_data_creditmemo_item_interface : public OAIObject {
public:
    OAISales_data_creditmemo_item_interface();
    OAISales_data_creditmemo_item_interface(QString json);
    ~OAISales_data_creditmemo_item_interface() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdditionalData() const;
    void setAdditionalData(const QString &additional_data);
    bool is_additional_data_Set() const;
    bool is_additional_data_Valid() const;

    double getBaseCost() const;
    void setBaseCost(const double &base_cost);
    bool is_base_cost_Set() const;
    bool is_base_cost_Valid() const;

    double getBaseDiscountAmount() const;
    void setBaseDiscountAmount(const double &base_discount_amount);
    bool is_base_discount_amount_Set() const;
    bool is_base_discount_amount_Valid() const;

    double getBaseDiscountTaxCompensationAmount() const;
    void setBaseDiscountTaxCompensationAmount(const double &base_discount_tax_compensation_amount);
    bool is_base_discount_tax_compensation_amount_Set() const;
    bool is_base_discount_tax_compensation_amount_Valid() const;

    double getBasePrice() const;
    void setBasePrice(const double &base_price);
    bool is_base_price_Set() const;
    bool is_base_price_Valid() const;

    double getBasePriceInclTax() const;
    void setBasePriceInclTax(const double &base_price_incl_tax);
    bool is_base_price_incl_tax_Set() const;
    bool is_base_price_incl_tax_Valid() const;

    double getBaseRowTotal() const;
    void setBaseRowTotal(const double &base_row_total);
    bool is_base_row_total_Set() const;
    bool is_base_row_total_Valid() const;

    double getBaseRowTotalInclTax() const;
    void setBaseRowTotalInclTax(const double &base_row_total_incl_tax);
    bool is_base_row_total_incl_tax_Set() const;
    bool is_base_row_total_incl_tax_Valid() const;

    double getBaseTaxAmount() const;
    void setBaseTaxAmount(const double &base_tax_amount);
    bool is_base_tax_amount_Set() const;
    bool is_base_tax_amount_Valid() const;

    double getBaseWeeeTaxAppliedAmount() const;
    void setBaseWeeeTaxAppliedAmount(const double &base_weee_tax_applied_amount);
    bool is_base_weee_tax_applied_amount_Set() const;
    bool is_base_weee_tax_applied_amount_Valid() const;

    double getBaseWeeeTaxAppliedRowAmnt() const;
    void setBaseWeeeTaxAppliedRowAmnt(const double &base_weee_tax_applied_row_amnt);
    bool is_base_weee_tax_applied_row_amnt_Set() const;
    bool is_base_weee_tax_applied_row_amnt_Valid() const;

    double getBaseWeeeTaxDisposition() const;
    void setBaseWeeeTaxDisposition(const double &base_weee_tax_disposition);
    bool is_base_weee_tax_disposition_Set() const;
    bool is_base_weee_tax_disposition_Valid() const;

    double getBaseWeeeTaxRowDisposition() const;
    void setBaseWeeeTaxRowDisposition(const double &base_weee_tax_row_disposition);
    bool is_base_weee_tax_row_disposition_Set() const;
    bool is_base_weee_tax_row_disposition_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    double getDiscountAmount() const;
    void setDiscountAmount(const double &discount_amount);
    bool is_discount_amount_Set() const;
    bool is_discount_amount_Valid() const;

    double getDiscountTaxCompensationAmount() const;
    void setDiscountTaxCompensationAmount(const double &discount_tax_compensation_amount);
    bool is_discount_tax_compensation_amount_Set() const;
    bool is_discount_tax_compensation_amount_Valid() const;

    qint32 getEntityId() const;
    void setEntityId(const qint32 &entity_id);
    bool is_entity_id_Set() const;
    bool is_entity_id_Valid() const;

    OAISales_data_creditmemo_item_extension_interface getExtensionAttributes() const;
    void setExtensionAttributes(const OAISales_data_creditmemo_item_extension_interface &extension_attributes);
    bool is_extension_attributes_Set() const;
    bool is_extension_attributes_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getOrderItemId() const;
    void setOrderItemId(const qint32 &order_item_id);
    bool is_order_item_id_Set() const;
    bool is_order_item_id_Valid() const;

    qint32 getParentId() const;
    void setParentId(const qint32 &parent_id);
    bool is_parent_id_Set() const;
    bool is_parent_id_Valid() const;

    double getPrice() const;
    void setPrice(const double &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    double getPriceInclTax() const;
    void setPriceInclTax(const double &price_incl_tax);
    bool is_price_incl_tax_Set() const;
    bool is_price_incl_tax_Valid() const;

    qint32 getProductId() const;
    void setProductId(const qint32 &product_id);
    bool is_product_id_Set() const;
    bool is_product_id_Valid() const;

    double getQty() const;
    void setQty(const double &qty);
    bool is_qty_Set() const;
    bool is_qty_Valid() const;

    double getRowTotal() const;
    void setRowTotal(const double &row_total);
    bool is_row_total_Set() const;
    bool is_row_total_Valid() const;

    double getRowTotalInclTax() const;
    void setRowTotalInclTax(const double &row_total_incl_tax);
    bool is_row_total_incl_tax_Set() const;
    bool is_row_total_incl_tax_Valid() const;

    QString getSku() const;
    void setSku(const QString &sku);
    bool is_sku_Set() const;
    bool is_sku_Valid() const;

    double getTaxAmount() const;
    void setTaxAmount(const double &tax_amount);
    bool is_tax_amount_Set() const;
    bool is_tax_amount_Valid() const;

    QString getWeeeTaxApplied() const;
    void setWeeeTaxApplied(const QString &weee_tax_applied);
    bool is_weee_tax_applied_Set() const;
    bool is_weee_tax_applied_Valid() const;

    double getWeeeTaxAppliedAmount() const;
    void setWeeeTaxAppliedAmount(const double &weee_tax_applied_amount);
    bool is_weee_tax_applied_amount_Set() const;
    bool is_weee_tax_applied_amount_Valid() const;

    double getWeeeTaxAppliedRowAmount() const;
    void setWeeeTaxAppliedRowAmount(const double &weee_tax_applied_row_amount);
    bool is_weee_tax_applied_row_amount_Set() const;
    bool is_weee_tax_applied_row_amount_Valid() const;

    double getWeeeTaxDisposition() const;
    void setWeeeTaxDisposition(const double &weee_tax_disposition);
    bool is_weee_tax_disposition_Set() const;
    bool is_weee_tax_disposition_Valid() const;

    double getWeeeTaxRowDisposition() const;
    void setWeeeTaxRowDisposition(const double &weee_tax_row_disposition);
    bool is_weee_tax_row_disposition_Set() const;
    bool is_weee_tax_row_disposition_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_additional_data;
    bool m_additional_data_isSet;
    bool m_additional_data_isValid;

    double m_base_cost;
    bool m_base_cost_isSet;
    bool m_base_cost_isValid;

    double m_base_discount_amount;
    bool m_base_discount_amount_isSet;
    bool m_base_discount_amount_isValid;

    double m_base_discount_tax_compensation_amount;
    bool m_base_discount_tax_compensation_amount_isSet;
    bool m_base_discount_tax_compensation_amount_isValid;

    double m_base_price;
    bool m_base_price_isSet;
    bool m_base_price_isValid;

    double m_base_price_incl_tax;
    bool m_base_price_incl_tax_isSet;
    bool m_base_price_incl_tax_isValid;

    double m_base_row_total;
    bool m_base_row_total_isSet;
    bool m_base_row_total_isValid;

    double m_base_row_total_incl_tax;
    bool m_base_row_total_incl_tax_isSet;
    bool m_base_row_total_incl_tax_isValid;

    double m_base_tax_amount;
    bool m_base_tax_amount_isSet;
    bool m_base_tax_amount_isValid;

    double m_base_weee_tax_applied_amount;
    bool m_base_weee_tax_applied_amount_isSet;
    bool m_base_weee_tax_applied_amount_isValid;

    double m_base_weee_tax_applied_row_amnt;
    bool m_base_weee_tax_applied_row_amnt_isSet;
    bool m_base_weee_tax_applied_row_amnt_isValid;

    double m_base_weee_tax_disposition;
    bool m_base_weee_tax_disposition_isSet;
    bool m_base_weee_tax_disposition_isValid;

    double m_base_weee_tax_row_disposition;
    bool m_base_weee_tax_row_disposition_isSet;
    bool m_base_weee_tax_row_disposition_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    double m_discount_amount;
    bool m_discount_amount_isSet;
    bool m_discount_amount_isValid;

    double m_discount_tax_compensation_amount;
    bool m_discount_tax_compensation_amount_isSet;
    bool m_discount_tax_compensation_amount_isValid;

    qint32 m_entity_id;
    bool m_entity_id_isSet;
    bool m_entity_id_isValid;

    OAISales_data_creditmemo_item_extension_interface m_extension_attributes;
    bool m_extension_attributes_isSet;
    bool m_extension_attributes_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_order_item_id;
    bool m_order_item_id_isSet;
    bool m_order_item_id_isValid;

    qint32 m_parent_id;
    bool m_parent_id_isSet;
    bool m_parent_id_isValid;

    double m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    double m_price_incl_tax;
    bool m_price_incl_tax_isSet;
    bool m_price_incl_tax_isValid;

    qint32 m_product_id;
    bool m_product_id_isSet;
    bool m_product_id_isValid;

    double m_qty;
    bool m_qty_isSet;
    bool m_qty_isValid;

    double m_row_total;
    bool m_row_total_isSet;
    bool m_row_total_isValid;

    double m_row_total_incl_tax;
    bool m_row_total_incl_tax_isSet;
    bool m_row_total_incl_tax_isValid;

    QString m_sku;
    bool m_sku_isSet;
    bool m_sku_isValid;

    double m_tax_amount;
    bool m_tax_amount_isSet;
    bool m_tax_amount_isValid;

    QString m_weee_tax_applied;
    bool m_weee_tax_applied_isSet;
    bool m_weee_tax_applied_isValid;

    double m_weee_tax_applied_amount;
    bool m_weee_tax_applied_amount_isSet;
    bool m_weee_tax_applied_amount_isValid;

    double m_weee_tax_applied_row_amount;
    bool m_weee_tax_applied_row_amount_isSet;
    bool m_weee_tax_applied_row_amount_isValid;

    double m_weee_tax_disposition;
    bool m_weee_tax_disposition_isSet;
    bool m_weee_tax_disposition_isValid;

    double m_weee_tax_row_disposition;
    bool m_weee_tax_row_disposition_isSet;
    bool m_weee_tax_row_disposition_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISales_data_creditmemo_item_interface)

#endif // OAISales_data_creditmemo_item_interface_H
