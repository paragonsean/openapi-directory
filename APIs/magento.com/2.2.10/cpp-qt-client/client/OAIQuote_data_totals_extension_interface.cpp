/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuote_data_totals_extension_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuote_data_totals_extension_interface::OAIQuote_data_totals_extension_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuote_data_totals_extension_interface::OAIQuote_data_totals_extension_interface() {
    this->initializeModel();
}

OAIQuote_data_totals_extension_interface::~OAIQuote_data_totals_extension_interface() {}

void OAIQuote_data_totals_extension_interface::initializeModel() {

    m_base_customer_balance_amount_isSet = false;
    m_base_customer_balance_amount_isValid = false;

    m_base_reward_currency_amount_isSet = false;
    m_base_reward_currency_amount_isValid = false;

    m_coupon_label_isSet = false;
    m_coupon_label_isValid = false;

    m_customer_balance_amount_isSet = false;
    m_customer_balance_amount_isValid = false;

    m_negotiable_quote_totals_isSet = false;
    m_negotiable_quote_totals_isValid = false;

    m_reward_currency_amount_isSet = false;
    m_reward_currency_amount_isValid = false;

    m_reward_points_balance_isSet = false;
    m_reward_points_balance_isValid = false;
}

void OAIQuote_data_totals_extension_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuote_data_totals_extension_interface::fromJsonObject(QJsonObject json) {

    m_base_customer_balance_amount_isValid = ::OpenAPI::fromJsonValue(m_base_customer_balance_amount, json[QString("base_customer_balance_amount")]);
    m_base_customer_balance_amount_isSet = !json[QString("base_customer_balance_amount")].isNull() && m_base_customer_balance_amount_isValid;

    m_base_reward_currency_amount_isValid = ::OpenAPI::fromJsonValue(m_base_reward_currency_amount, json[QString("base_reward_currency_amount")]);
    m_base_reward_currency_amount_isSet = !json[QString("base_reward_currency_amount")].isNull() && m_base_reward_currency_amount_isValid;

    m_coupon_label_isValid = ::OpenAPI::fromJsonValue(m_coupon_label, json[QString("coupon_label")]);
    m_coupon_label_isSet = !json[QString("coupon_label")].isNull() && m_coupon_label_isValid;

    m_customer_balance_amount_isValid = ::OpenAPI::fromJsonValue(m_customer_balance_amount, json[QString("customer_balance_amount")]);
    m_customer_balance_amount_isSet = !json[QString("customer_balance_amount")].isNull() && m_customer_balance_amount_isValid;

    m_negotiable_quote_totals_isValid = ::OpenAPI::fromJsonValue(m_negotiable_quote_totals, json[QString("negotiable_quote_totals")]);
    m_negotiable_quote_totals_isSet = !json[QString("negotiable_quote_totals")].isNull() && m_negotiable_quote_totals_isValid;

    m_reward_currency_amount_isValid = ::OpenAPI::fromJsonValue(m_reward_currency_amount, json[QString("reward_currency_amount")]);
    m_reward_currency_amount_isSet = !json[QString("reward_currency_amount")].isNull() && m_reward_currency_amount_isValid;

    m_reward_points_balance_isValid = ::OpenAPI::fromJsonValue(m_reward_points_balance, json[QString("reward_points_balance")]);
    m_reward_points_balance_isSet = !json[QString("reward_points_balance")].isNull() && m_reward_points_balance_isValid;
}

QString OAIQuote_data_totals_extension_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuote_data_totals_extension_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_base_customer_balance_amount_isSet) {
        obj.insert(QString("base_customer_balance_amount"), ::OpenAPI::toJsonValue(m_base_customer_balance_amount));
    }
    if (m_base_reward_currency_amount_isSet) {
        obj.insert(QString("base_reward_currency_amount"), ::OpenAPI::toJsonValue(m_base_reward_currency_amount));
    }
    if (m_coupon_label_isSet) {
        obj.insert(QString("coupon_label"), ::OpenAPI::toJsonValue(m_coupon_label));
    }
    if (m_customer_balance_amount_isSet) {
        obj.insert(QString("customer_balance_amount"), ::OpenAPI::toJsonValue(m_customer_balance_amount));
    }
    if (m_negotiable_quote_totals.isSet()) {
        obj.insert(QString("negotiable_quote_totals"), ::OpenAPI::toJsonValue(m_negotiable_quote_totals));
    }
    if (m_reward_currency_amount_isSet) {
        obj.insert(QString("reward_currency_amount"), ::OpenAPI::toJsonValue(m_reward_currency_amount));
    }
    if (m_reward_points_balance_isSet) {
        obj.insert(QString("reward_points_balance"), ::OpenAPI::toJsonValue(m_reward_points_balance));
    }
    return obj;
}

double OAIQuote_data_totals_extension_interface::getBaseCustomerBalanceAmount() const {
    return m_base_customer_balance_amount;
}
void OAIQuote_data_totals_extension_interface::setBaseCustomerBalanceAmount(const double &base_customer_balance_amount) {
    m_base_customer_balance_amount = base_customer_balance_amount;
    m_base_customer_balance_amount_isSet = true;
}

bool OAIQuote_data_totals_extension_interface::is_base_customer_balance_amount_Set() const{
    return m_base_customer_balance_amount_isSet;
}

bool OAIQuote_data_totals_extension_interface::is_base_customer_balance_amount_Valid() const{
    return m_base_customer_balance_amount_isValid;
}

double OAIQuote_data_totals_extension_interface::getBaseRewardCurrencyAmount() const {
    return m_base_reward_currency_amount;
}
void OAIQuote_data_totals_extension_interface::setBaseRewardCurrencyAmount(const double &base_reward_currency_amount) {
    m_base_reward_currency_amount = base_reward_currency_amount;
    m_base_reward_currency_amount_isSet = true;
}

bool OAIQuote_data_totals_extension_interface::is_base_reward_currency_amount_Set() const{
    return m_base_reward_currency_amount_isSet;
}

bool OAIQuote_data_totals_extension_interface::is_base_reward_currency_amount_Valid() const{
    return m_base_reward_currency_amount_isValid;
}

QString OAIQuote_data_totals_extension_interface::getCouponLabel() const {
    return m_coupon_label;
}
void OAIQuote_data_totals_extension_interface::setCouponLabel(const QString &coupon_label) {
    m_coupon_label = coupon_label;
    m_coupon_label_isSet = true;
}

bool OAIQuote_data_totals_extension_interface::is_coupon_label_Set() const{
    return m_coupon_label_isSet;
}

bool OAIQuote_data_totals_extension_interface::is_coupon_label_Valid() const{
    return m_coupon_label_isValid;
}

double OAIQuote_data_totals_extension_interface::getCustomerBalanceAmount() const {
    return m_customer_balance_amount;
}
void OAIQuote_data_totals_extension_interface::setCustomerBalanceAmount(const double &customer_balance_amount) {
    m_customer_balance_amount = customer_balance_amount;
    m_customer_balance_amount_isSet = true;
}

bool OAIQuote_data_totals_extension_interface::is_customer_balance_amount_Set() const{
    return m_customer_balance_amount_isSet;
}

bool OAIQuote_data_totals_extension_interface::is_customer_balance_amount_Valid() const{
    return m_customer_balance_amount_isValid;
}

OAINegotiable_quote_data_negotiable_quote_totals_interface OAIQuote_data_totals_extension_interface::getNegotiableQuoteTotals() const {
    return m_negotiable_quote_totals;
}
void OAIQuote_data_totals_extension_interface::setNegotiableQuoteTotals(const OAINegotiable_quote_data_negotiable_quote_totals_interface &negotiable_quote_totals) {
    m_negotiable_quote_totals = negotiable_quote_totals;
    m_negotiable_quote_totals_isSet = true;
}

bool OAIQuote_data_totals_extension_interface::is_negotiable_quote_totals_Set() const{
    return m_negotiable_quote_totals_isSet;
}

bool OAIQuote_data_totals_extension_interface::is_negotiable_quote_totals_Valid() const{
    return m_negotiable_quote_totals_isValid;
}

double OAIQuote_data_totals_extension_interface::getRewardCurrencyAmount() const {
    return m_reward_currency_amount;
}
void OAIQuote_data_totals_extension_interface::setRewardCurrencyAmount(const double &reward_currency_amount) {
    m_reward_currency_amount = reward_currency_amount;
    m_reward_currency_amount_isSet = true;
}

bool OAIQuote_data_totals_extension_interface::is_reward_currency_amount_Set() const{
    return m_reward_currency_amount_isSet;
}

bool OAIQuote_data_totals_extension_interface::is_reward_currency_amount_Valid() const{
    return m_reward_currency_amount_isValid;
}

double OAIQuote_data_totals_extension_interface::getRewardPointsBalance() const {
    return m_reward_points_balance;
}
void OAIQuote_data_totals_extension_interface::setRewardPointsBalance(const double &reward_points_balance) {
    m_reward_points_balance = reward_points_balance;
    m_reward_points_balance_isSet = true;
}

bool OAIQuote_data_totals_extension_interface::is_reward_points_balance_Set() const{
    return m_reward_points_balance_isSet;
}

bool OAIQuote_data_totals_extension_interface::is_reward_points_balance_Valid() const{
    return m_reward_points_balance_isValid;
}

bool OAIQuote_data_totals_extension_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_customer_balance_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_reward_currency_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coupon_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_balance_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negotiable_quote_totals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_currency_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_points_balance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuote_data_totals_extension_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
