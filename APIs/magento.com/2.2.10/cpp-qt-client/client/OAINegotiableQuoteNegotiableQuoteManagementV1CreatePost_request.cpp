/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request() {
    this->initializeModel();
}

OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::~OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request() {}

void OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_quote_id_isSet = false;
    m_quote_id_isValid = false;

    m_quote_name_isSet = false;
    m_quote_name_isValid = false;
}

void OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_quote_id_isValid = ::OpenAPI::fromJsonValue(m_quote_id, json[QString("quoteId")]);
    m_quote_id_isSet = !json[QString("quoteId")].isNull() && m_quote_id_isValid;

    m_quote_name_isValid = ::OpenAPI::fromJsonValue(m_quote_name, json[QString("quoteName")]);
    m_quote_name_isSet = !json[QString("quoteName")].isNull() && m_quote_name_isValid;
}

QString OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_quote_id_isSet) {
        obj.insert(QString("quoteId"), ::OpenAPI::toJsonValue(m_quote_id));
    }
    if (m_quote_name_isSet) {
        obj.insert(QString("quoteName"), ::OpenAPI::toJsonValue(m_quote_name));
    }
    return obj;
}

QString OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::getComment() const {
    return m_comment;
}
void OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::is_comment_Valid() const{
    return m_comment_isValid;
}

QList<OAINegotiable_quote_data_attachment_content_interface> OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::getFiles() const {
    return m_files;
}
void OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::setFiles(const QList<OAINegotiable_quote_data_attachment_content_interface> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::is_files_Set() const{
    return m_files_isSet;
}

bool OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::is_files_Valid() const{
    return m_files_isValid;
}

qint32 OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::getQuoteId() const {
    return m_quote_id;
}
void OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::setQuoteId(const qint32 &quote_id) {
    m_quote_id = quote_id;
    m_quote_id_isSet = true;
}

bool OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::is_quote_id_Set() const{
    return m_quote_id_isSet;
}

bool OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::is_quote_id_Valid() const{
    return m_quote_id_isValid;
}

QString OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::getQuoteName() const {
    return m_quote_name;
}
void OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::setQuoteName(const QString &quote_name) {
    m_quote_name = quote_name;
    m_quote_name_isSet = true;
}

bool OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::is_quote_name_Set() const{
    return m_quote_name_isSet;
}

bool OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::is_quote_name_Valid() const{
    return m_quote_name_isValid;
}

bool OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINegotiableQuoteNegotiableQuoteManagementV1CreatePost_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_quote_id_isValid && m_quote_name_isValid && true;
}

} // namespace OpenAPI
