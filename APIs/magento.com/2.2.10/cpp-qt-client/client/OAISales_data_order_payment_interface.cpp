/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISales_data_order_payment_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISales_data_order_payment_interface::OAISales_data_order_payment_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISales_data_order_payment_interface::OAISales_data_order_payment_interface() {
    this->initializeModel();
}

OAISales_data_order_payment_interface::~OAISales_data_order_payment_interface() {}

void OAISales_data_order_payment_interface::initializeModel() {

    m_account_status_isSet = false;
    m_account_status_isValid = false;

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_additional_information_isSet = false;
    m_additional_information_isValid = false;

    m_address_status_isSet = false;
    m_address_status_isValid = false;

    m_amount_authorized_isSet = false;
    m_amount_authorized_isValid = false;

    m_amount_canceled_isSet = false;
    m_amount_canceled_isValid = false;

    m_amount_ordered_isSet = false;
    m_amount_ordered_isValid = false;

    m_amount_paid_isSet = false;
    m_amount_paid_isValid = false;

    m_amount_refunded_isSet = false;
    m_amount_refunded_isValid = false;

    m_anet_trans_method_isSet = false;
    m_anet_trans_method_isValid = false;

    m_base_amount_authorized_isSet = false;
    m_base_amount_authorized_isValid = false;

    m_base_amount_canceled_isSet = false;
    m_base_amount_canceled_isValid = false;

    m_base_amount_ordered_isSet = false;
    m_base_amount_ordered_isValid = false;

    m_base_amount_paid_isSet = false;
    m_base_amount_paid_isValid = false;

    m_base_amount_paid_online_isSet = false;
    m_base_amount_paid_online_isValid = false;

    m_base_amount_refunded_isSet = false;
    m_base_amount_refunded_isValid = false;

    m_base_amount_refunded_online_isSet = false;
    m_base_amount_refunded_online_isValid = false;

    m_base_shipping_amount_isSet = false;
    m_base_shipping_amount_isValid = false;

    m_base_shipping_captured_isSet = false;
    m_base_shipping_captured_isValid = false;

    m_base_shipping_refunded_isSet = false;
    m_base_shipping_refunded_isValid = false;

    m_cc_approval_isSet = false;
    m_cc_approval_isValid = false;

    m_cc_avs_status_isSet = false;
    m_cc_avs_status_isValid = false;

    m_cc_cid_status_isSet = false;
    m_cc_cid_status_isValid = false;

    m_cc_debug_request_body_isSet = false;
    m_cc_debug_request_body_isValid = false;

    m_cc_debug_response_body_isSet = false;
    m_cc_debug_response_body_isValid = false;

    m_cc_debug_response_serialized_isSet = false;
    m_cc_debug_response_serialized_isValid = false;

    m_cc_exp_month_isSet = false;
    m_cc_exp_month_isValid = false;

    m_cc_exp_year_isSet = false;
    m_cc_exp_year_isValid = false;

    m_cc_last4_isSet = false;
    m_cc_last4_isValid = false;

    m_cc_number_enc_isSet = false;
    m_cc_number_enc_isValid = false;

    m_cc_owner_isSet = false;
    m_cc_owner_isValid = false;

    m_cc_secure_verify_isSet = false;
    m_cc_secure_verify_isValid = false;

    m_cc_ss_issue_isSet = false;
    m_cc_ss_issue_isValid = false;

    m_cc_ss_start_month_isSet = false;
    m_cc_ss_start_month_isValid = false;

    m_cc_ss_start_year_isSet = false;
    m_cc_ss_start_year_isValid = false;

    m_cc_status_isSet = false;
    m_cc_status_isValid = false;

    m_cc_status_description_isSet = false;
    m_cc_status_description_isValid = false;

    m_cc_trans_id_isSet = false;
    m_cc_trans_id_isValid = false;

    m_cc_type_isSet = false;
    m_cc_type_isValid = false;

    m_echeck_account_name_isSet = false;
    m_echeck_account_name_isValid = false;

    m_echeck_account_type_isSet = false;
    m_echeck_account_type_isValid = false;

    m_echeck_bank_name_isSet = false;
    m_echeck_bank_name_isValid = false;

    m_echeck_routing_number_isSet = false;
    m_echeck_routing_number_isValid = false;

    m_echeck_type_isSet = false;
    m_echeck_type_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_last_trans_id_isSet = false;
    m_last_trans_id_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_po_number_isSet = false;
    m_po_number_isValid = false;

    m_protection_eligibility_isSet = false;
    m_protection_eligibility_isValid = false;

    m_quote_payment_id_isSet = false;
    m_quote_payment_id_isValid = false;

    m_shipping_amount_isSet = false;
    m_shipping_amount_isValid = false;

    m_shipping_captured_isSet = false;
    m_shipping_captured_isValid = false;

    m_shipping_refunded_isSet = false;
    m_shipping_refunded_isValid = false;
}

void OAISales_data_order_payment_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISales_data_order_payment_interface::fromJsonObject(QJsonObject json) {

    m_account_status_isValid = ::OpenAPI::fromJsonValue(m_account_status, json[QString("account_status")]);
    m_account_status_isSet = !json[QString("account_status")].isNull() && m_account_status_isValid;

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additional_data")]);
    m_additional_data_isSet = !json[QString("additional_data")].isNull() && m_additional_data_isValid;

    m_additional_information_isValid = ::OpenAPI::fromJsonValue(m_additional_information, json[QString("additional_information")]);
    m_additional_information_isSet = !json[QString("additional_information")].isNull() && m_additional_information_isValid;

    m_address_status_isValid = ::OpenAPI::fromJsonValue(m_address_status, json[QString("address_status")]);
    m_address_status_isSet = !json[QString("address_status")].isNull() && m_address_status_isValid;

    m_amount_authorized_isValid = ::OpenAPI::fromJsonValue(m_amount_authorized, json[QString("amount_authorized")]);
    m_amount_authorized_isSet = !json[QString("amount_authorized")].isNull() && m_amount_authorized_isValid;

    m_amount_canceled_isValid = ::OpenAPI::fromJsonValue(m_amount_canceled, json[QString("amount_canceled")]);
    m_amount_canceled_isSet = !json[QString("amount_canceled")].isNull() && m_amount_canceled_isValid;

    m_amount_ordered_isValid = ::OpenAPI::fromJsonValue(m_amount_ordered, json[QString("amount_ordered")]);
    m_amount_ordered_isSet = !json[QString("amount_ordered")].isNull() && m_amount_ordered_isValid;

    m_amount_paid_isValid = ::OpenAPI::fromJsonValue(m_amount_paid, json[QString("amount_paid")]);
    m_amount_paid_isSet = !json[QString("amount_paid")].isNull() && m_amount_paid_isValid;

    m_amount_refunded_isValid = ::OpenAPI::fromJsonValue(m_amount_refunded, json[QString("amount_refunded")]);
    m_amount_refunded_isSet = !json[QString("amount_refunded")].isNull() && m_amount_refunded_isValid;

    m_anet_trans_method_isValid = ::OpenAPI::fromJsonValue(m_anet_trans_method, json[QString("anet_trans_method")]);
    m_anet_trans_method_isSet = !json[QString("anet_trans_method")].isNull() && m_anet_trans_method_isValid;

    m_base_amount_authorized_isValid = ::OpenAPI::fromJsonValue(m_base_amount_authorized, json[QString("base_amount_authorized")]);
    m_base_amount_authorized_isSet = !json[QString("base_amount_authorized")].isNull() && m_base_amount_authorized_isValid;

    m_base_amount_canceled_isValid = ::OpenAPI::fromJsonValue(m_base_amount_canceled, json[QString("base_amount_canceled")]);
    m_base_amount_canceled_isSet = !json[QString("base_amount_canceled")].isNull() && m_base_amount_canceled_isValid;

    m_base_amount_ordered_isValid = ::OpenAPI::fromJsonValue(m_base_amount_ordered, json[QString("base_amount_ordered")]);
    m_base_amount_ordered_isSet = !json[QString("base_amount_ordered")].isNull() && m_base_amount_ordered_isValid;

    m_base_amount_paid_isValid = ::OpenAPI::fromJsonValue(m_base_amount_paid, json[QString("base_amount_paid")]);
    m_base_amount_paid_isSet = !json[QString("base_amount_paid")].isNull() && m_base_amount_paid_isValid;

    m_base_amount_paid_online_isValid = ::OpenAPI::fromJsonValue(m_base_amount_paid_online, json[QString("base_amount_paid_online")]);
    m_base_amount_paid_online_isSet = !json[QString("base_amount_paid_online")].isNull() && m_base_amount_paid_online_isValid;

    m_base_amount_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_amount_refunded, json[QString("base_amount_refunded")]);
    m_base_amount_refunded_isSet = !json[QString("base_amount_refunded")].isNull() && m_base_amount_refunded_isValid;

    m_base_amount_refunded_online_isValid = ::OpenAPI::fromJsonValue(m_base_amount_refunded_online, json[QString("base_amount_refunded_online")]);
    m_base_amount_refunded_online_isSet = !json[QString("base_amount_refunded_online")].isNull() && m_base_amount_refunded_online_isValid;

    m_base_shipping_amount_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_amount, json[QString("base_shipping_amount")]);
    m_base_shipping_amount_isSet = !json[QString("base_shipping_amount")].isNull() && m_base_shipping_amount_isValid;

    m_base_shipping_captured_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_captured, json[QString("base_shipping_captured")]);
    m_base_shipping_captured_isSet = !json[QString("base_shipping_captured")].isNull() && m_base_shipping_captured_isValid;

    m_base_shipping_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_refunded, json[QString("base_shipping_refunded")]);
    m_base_shipping_refunded_isSet = !json[QString("base_shipping_refunded")].isNull() && m_base_shipping_refunded_isValid;

    m_cc_approval_isValid = ::OpenAPI::fromJsonValue(m_cc_approval, json[QString("cc_approval")]);
    m_cc_approval_isSet = !json[QString("cc_approval")].isNull() && m_cc_approval_isValid;

    m_cc_avs_status_isValid = ::OpenAPI::fromJsonValue(m_cc_avs_status, json[QString("cc_avs_status")]);
    m_cc_avs_status_isSet = !json[QString("cc_avs_status")].isNull() && m_cc_avs_status_isValid;

    m_cc_cid_status_isValid = ::OpenAPI::fromJsonValue(m_cc_cid_status, json[QString("cc_cid_status")]);
    m_cc_cid_status_isSet = !json[QString("cc_cid_status")].isNull() && m_cc_cid_status_isValid;

    m_cc_debug_request_body_isValid = ::OpenAPI::fromJsonValue(m_cc_debug_request_body, json[QString("cc_debug_request_body")]);
    m_cc_debug_request_body_isSet = !json[QString("cc_debug_request_body")].isNull() && m_cc_debug_request_body_isValid;

    m_cc_debug_response_body_isValid = ::OpenAPI::fromJsonValue(m_cc_debug_response_body, json[QString("cc_debug_response_body")]);
    m_cc_debug_response_body_isSet = !json[QString("cc_debug_response_body")].isNull() && m_cc_debug_response_body_isValid;

    m_cc_debug_response_serialized_isValid = ::OpenAPI::fromJsonValue(m_cc_debug_response_serialized, json[QString("cc_debug_response_serialized")]);
    m_cc_debug_response_serialized_isSet = !json[QString("cc_debug_response_serialized")].isNull() && m_cc_debug_response_serialized_isValid;

    m_cc_exp_month_isValid = ::OpenAPI::fromJsonValue(m_cc_exp_month, json[QString("cc_exp_month")]);
    m_cc_exp_month_isSet = !json[QString("cc_exp_month")].isNull() && m_cc_exp_month_isValid;

    m_cc_exp_year_isValid = ::OpenAPI::fromJsonValue(m_cc_exp_year, json[QString("cc_exp_year")]);
    m_cc_exp_year_isSet = !json[QString("cc_exp_year")].isNull() && m_cc_exp_year_isValid;

    m_cc_last4_isValid = ::OpenAPI::fromJsonValue(m_cc_last4, json[QString("cc_last4")]);
    m_cc_last4_isSet = !json[QString("cc_last4")].isNull() && m_cc_last4_isValid;

    m_cc_number_enc_isValid = ::OpenAPI::fromJsonValue(m_cc_number_enc, json[QString("cc_number_enc")]);
    m_cc_number_enc_isSet = !json[QString("cc_number_enc")].isNull() && m_cc_number_enc_isValid;

    m_cc_owner_isValid = ::OpenAPI::fromJsonValue(m_cc_owner, json[QString("cc_owner")]);
    m_cc_owner_isSet = !json[QString("cc_owner")].isNull() && m_cc_owner_isValid;

    m_cc_secure_verify_isValid = ::OpenAPI::fromJsonValue(m_cc_secure_verify, json[QString("cc_secure_verify")]);
    m_cc_secure_verify_isSet = !json[QString("cc_secure_verify")].isNull() && m_cc_secure_verify_isValid;

    m_cc_ss_issue_isValid = ::OpenAPI::fromJsonValue(m_cc_ss_issue, json[QString("cc_ss_issue")]);
    m_cc_ss_issue_isSet = !json[QString("cc_ss_issue")].isNull() && m_cc_ss_issue_isValid;

    m_cc_ss_start_month_isValid = ::OpenAPI::fromJsonValue(m_cc_ss_start_month, json[QString("cc_ss_start_month")]);
    m_cc_ss_start_month_isSet = !json[QString("cc_ss_start_month")].isNull() && m_cc_ss_start_month_isValid;

    m_cc_ss_start_year_isValid = ::OpenAPI::fromJsonValue(m_cc_ss_start_year, json[QString("cc_ss_start_year")]);
    m_cc_ss_start_year_isSet = !json[QString("cc_ss_start_year")].isNull() && m_cc_ss_start_year_isValid;

    m_cc_status_isValid = ::OpenAPI::fromJsonValue(m_cc_status, json[QString("cc_status")]);
    m_cc_status_isSet = !json[QString("cc_status")].isNull() && m_cc_status_isValid;

    m_cc_status_description_isValid = ::OpenAPI::fromJsonValue(m_cc_status_description, json[QString("cc_status_description")]);
    m_cc_status_description_isSet = !json[QString("cc_status_description")].isNull() && m_cc_status_description_isValid;

    m_cc_trans_id_isValid = ::OpenAPI::fromJsonValue(m_cc_trans_id, json[QString("cc_trans_id")]);
    m_cc_trans_id_isSet = !json[QString("cc_trans_id")].isNull() && m_cc_trans_id_isValid;

    m_cc_type_isValid = ::OpenAPI::fromJsonValue(m_cc_type, json[QString("cc_type")]);
    m_cc_type_isSet = !json[QString("cc_type")].isNull() && m_cc_type_isValid;

    m_echeck_account_name_isValid = ::OpenAPI::fromJsonValue(m_echeck_account_name, json[QString("echeck_account_name")]);
    m_echeck_account_name_isSet = !json[QString("echeck_account_name")].isNull() && m_echeck_account_name_isValid;

    m_echeck_account_type_isValid = ::OpenAPI::fromJsonValue(m_echeck_account_type, json[QString("echeck_account_type")]);
    m_echeck_account_type_isSet = !json[QString("echeck_account_type")].isNull() && m_echeck_account_type_isValid;

    m_echeck_bank_name_isValid = ::OpenAPI::fromJsonValue(m_echeck_bank_name, json[QString("echeck_bank_name")]);
    m_echeck_bank_name_isSet = !json[QString("echeck_bank_name")].isNull() && m_echeck_bank_name_isValid;

    m_echeck_routing_number_isValid = ::OpenAPI::fromJsonValue(m_echeck_routing_number, json[QString("echeck_routing_number")]);
    m_echeck_routing_number_isSet = !json[QString("echeck_routing_number")].isNull() && m_echeck_routing_number_isValid;

    m_echeck_type_isValid = ::OpenAPI::fromJsonValue(m_echeck_type, json[QString("echeck_type")]);
    m_echeck_type_isSet = !json[QString("echeck_type")].isNull() && m_echeck_type_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_last_trans_id_isValid = ::OpenAPI::fromJsonValue(m_last_trans_id, json[QString("last_trans_id")]);
    m_last_trans_id_isSet = !json[QString("last_trans_id")].isNull() && m_last_trans_id_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_po_number_isValid = ::OpenAPI::fromJsonValue(m_po_number, json[QString("po_number")]);
    m_po_number_isSet = !json[QString("po_number")].isNull() && m_po_number_isValid;

    m_protection_eligibility_isValid = ::OpenAPI::fromJsonValue(m_protection_eligibility, json[QString("protection_eligibility")]);
    m_protection_eligibility_isSet = !json[QString("protection_eligibility")].isNull() && m_protection_eligibility_isValid;

    m_quote_payment_id_isValid = ::OpenAPI::fromJsonValue(m_quote_payment_id, json[QString("quote_payment_id")]);
    m_quote_payment_id_isSet = !json[QString("quote_payment_id")].isNull() && m_quote_payment_id_isValid;

    m_shipping_amount_isValid = ::OpenAPI::fromJsonValue(m_shipping_amount, json[QString("shipping_amount")]);
    m_shipping_amount_isSet = !json[QString("shipping_amount")].isNull() && m_shipping_amount_isValid;

    m_shipping_captured_isValid = ::OpenAPI::fromJsonValue(m_shipping_captured, json[QString("shipping_captured")]);
    m_shipping_captured_isSet = !json[QString("shipping_captured")].isNull() && m_shipping_captured_isValid;

    m_shipping_refunded_isValid = ::OpenAPI::fromJsonValue(m_shipping_refunded, json[QString("shipping_refunded")]);
    m_shipping_refunded_isSet = !json[QString("shipping_refunded")].isNull() && m_shipping_refunded_isValid;
}

QString OAISales_data_order_payment_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISales_data_order_payment_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_account_status_isSet) {
        obj.insert(QString("account_status"), ::OpenAPI::toJsonValue(m_account_status));
    }
    if (m_additional_data_isSet) {
        obj.insert(QString("additional_data"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_additional_information.size() > 0) {
        obj.insert(QString("additional_information"), ::OpenAPI::toJsonValue(m_additional_information));
    }
    if (m_address_status_isSet) {
        obj.insert(QString("address_status"), ::OpenAPI::toJsonValue(m_address_status));
    }
    if (m_amount_authorized_isSet) {
        obj.insert(QString("amount_authorized"), ::OpenAPI::toJsonValue(m_amount_authorized));
    }
    if (m_amount_canceled_isSet) {
        obj.insert(QString("amount_canceled"), ::OpenAPI::toJsonValue(m_amount_canceled));
    }
    if (m_amount_ordered_isSet) {
        obj.insert(QString("amount_ordered"), ::OpenAPI::toJsonValue(m_amount_ordered));
    }
    if (m_amount_paid_isSet) {
        obj.insert(QString("amount_paid"), ::OpenAPI::toJsonValue(m_amount_paid));
    }
    if (m_amount_refunded_isSet) {
        obj.insert(QString("amount_refunded"), ::OpenAPI::toJsonValue(m_amount_refunded));
    }
    if (m_anet_trans_method_isSet) {
        obj.insert(QString("anet_trans_method"), ::OpenAPI::toJsonValue(m_anet_trans_method));
    }
    if (m_base_amount_authorized_isSet) {
        obj.insert(QString("base_amount_authorized"), ::OpenAPI::toJsonValue(m_base_amount_authorized));
    }
    if (m_base_amount_canceled_isSet) {
        obj.insert(QString("base_amount_canceled"), ::OpenAPI::toJsonValue(m_base_amount_canceled));
    }
    if (m_base_amount_ordered_isSet) {
        obj.insert(QString("base_amount_ordered"), ::OpenAPI::toJsonValue(m_base_amount_ordered));
    }
    if (m_base_amount_paid_isSet) {
        obj.insert(QString("base_amount_paid"), ::OpenAPI::toJsonValue(m_base_amount_paid));
    }
    if (m_base_amount_paid_online_isSet) {
        obj.insert(QString("base_amount_paid_online"), ::OpenAPI::toJsonValue(m_base_amount_paid_online));
    }
    if (m_base_amount_refunded_isSet) {
        obj.insert(QString("base_amount_refunded"), ::OpenAPI::toJsonValue(m_base_amount_refunded));
    }
    if (m_base_amount_refunded_online_isSet) {
        obj.insert(QString("base_amount_refunded_online"), ::OpenAPI::toJsonValue(m_base_amount_refunded_online));
    }
    if (m_base_shipping_amount_isSet) {
        obj.insert(QString("base_shipping_amount"), ::OpenAPI::toJsonValue(m_base_shipping_amount));
    }
    if (m_base_shipping_captured_isSet) {
        obj.insert(QString("base_shipping_captured"), ::OpenAPI::toJsonValue(m_base_shipping_captured));
    }
    if (m_base_shipping_refunded_isSet) {
        obj.insert(QString("base_shipping_refunded"), ::OpenAPI::toJsonValue(m_base_shipping_refunded));
    }
    if (m_cc_approval_isSet) {
        obj.insert(QString("cc_approval"), ::OpenAPI::toJsonValue(m_cc_approval));
    }
    if (m_cc_avs_status_isSet) {
        obj.insert(QString("cc_avs_status"), ::OpenAPI::toJsonValue(m_cc_avs_status));
    }
    if (m_cc_cid_status_isSet) {
        obj.insert(QString("cc_cid_status"), ::OpenAPI::toJsonValue(m_cc_cid_status));
    }
    if (m_cc_debug_request_body_isSet) {
        obj.insert(QString("cc_debug_request_body"), ::OpenAPI::toJsonValue(m_cc_debug_request_body));
    }
    if (m_cc_debug_response_body_isSet) {
        obj.insert(QString("cc_debug_response_body"), ::OpenAPI::toJsonValue(m_cc_debug_response_body));
    }
    if (m_cc_debug_response_serialized_isSet) {
        obj.insert(QString("cc_debug_response_serialized"), ::OpenAPI::toJsonValue(m_cc_debug_response_serialized));
    }
    if (m_cc_exp_month_isSet) {
        obj.insert(QString("cc_exp_month"), ::OpenAPI::toJsonValue(m_cc_exp_month));
    }
    if (m_cc_exp_year_isSet) {
        obj.insert(QString("cc_exp_year"), ::OpenAPI::toJsonValue(m_cc_exp_year));
    }
    if (m_cc_last4_isSet) {
        obj.insert(QString("cc_last4"), ::OpenAPI::toJsonValue(m_cc_last4));
    }
    if (m_cc_number_enc_isSet) {
        obj.insert(QString("cc_number_enc"), ::OpenAPI::toJsonValue(m_cc_number_enc));
    }
    if (m_cc_owner_isSet) {
        obj.insert(QString("cc_owner"), ::OpenAPI::toJsonValue(m_cc_owner));
    }
    if (m_cc_secure_verify_isSet) {
        obj.insert(QString("cc_secure_verify"), ::OpenAPI::toJsonValue(m_cc_secure_verify));
    }
    if (m_cc_ss_issue_isSet) {
        obj.insert(QString("cc_ss_issue"), ::OpenAPI::toJsonValue(m_cc_ss_issue));
    }
    if (m_cc_ss_start_month_isSet) {
        obj.insert(QString("cc_ss_start_month"), ::OpenAPI::toJsonValue(m_cc_ss_start_month));
    }
    if (m_cc_ss_start_year_isSet) {
        obj.insert(QString("cc_ss_start_year"), ::OpenAPI::toJsonValue(m_cc_ss_start_year));
    }
    if (m_cc_status_isSet) {
        obj.insert(QString("cc_status"), ::OpenAPI::toJsonValue(m_cc_status));
    }
    if (m_cc_status_description_isSet) {
        obj.insert(QString("cc_status_description"), ::OpenAPI::toJsonValue(m_cc_status_description));
    }
    if (m_cc_trans_id_isSet) {
        obj.insert(QString("cc_trans_id"), ::OpenAPI::toJsonValue(m_cc_trans_id));
    }
    if (m_cc_type_isSet) {
        obj.insert(QString("cc_type"), ::OpenAPI::toJsonValue(m_cc_type));
    }
    if (m_echeck_account_name_isSet) {
        obj.insert(QString("echeck_account_name"), ::OpenAPI::toJsonValue(m_echeck_account_name));
    }
    if (m_echeck_account_type_isSet) {
        obj.insert(QString("echeck_account_type"), ::OpenAPI::toJsonValue(m_echeck_account_type));
    }
    if (m_echeck_bank_name_isSet) {
        obj.insert(QString("echeck_bank_name"), ::OpenAPI::toJsonValue(m_echeck_bank_name));
    }
    if (m_echeck_routing_number_isSet) {
        obj.insert(QString("echeck_routing_number"), ::OpenAPI::toJsonValue(m_echeck_routing_number));
    }
    if (m_echeck_type_isSet) {
        obj.insert(QString("echeck_type"), ::OpenAPI::toJsonValue(m_echeck_type));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_last_trans_id_isSet) {
        obj.insert(QString("last_trans_id"), ::OpenAPI::toJsonValue(m_last_trans_id));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_po_number_isSet) {
        obj.insert(QString("po_number"), ::OpenAPI::toJsonValue(m_po_number));
    }
    if (m_protection_eligibility_isSet) {
        obj.insert(QString("protection_eligibility"), ::OpenAPI::toJsonValue(m_protection_eligibility));
    }
    if (m_quote_payment_id_isSet) {
        obj.insert(QString("quote_payment_id"), ::OpenAPI::toJsonValue(m_quote_payment_id));
    }
    if (m_shipping_amount_isSet) {
        obj.insert(QString("shipping_amount"), ::OpenAPI::toJsonValue(m_shipping_amount));
    }
    if (m_shipping_captured_isSet) {
        obj.insert(QString("shipping_captured"), ::OpenAPI::toJsonValue(m_shipping_captured));
    }
    if (m_shipping_refunded_isSet) {
        obj.insert(QString("shipping_refunded"), ::OpenAPI::toJsonValue(m_shipping_refunded));
    }
    return obj;
}

QString OAISales_data_order_payment_interface::getAccountStatus() const {
    return m_account_status;
}
void OAISales_data_order_payment_interface::setAccountStatus(const QString &account_status) {
    m_account_status = account_status;
    m_account_status_isSet = true;
}

bool OAISales_data_order_payment_interface::is_account_status_Set() const{
    return m_account_status_isSet;
}

bool OAISales_data_order_payment_interface::is_account_status_Valid() const{
    return m_account_status_isValid;
}

QString OAISales_data_order_payment_interface::getAdditionalData() const {
    return m_additional_data;
}
void OAISales_data_order_payment_interface::setAdditionalData(const QString &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAISales_data_order_payment_interface::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAISales_data_order_payment_interface::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

QList<QString> OAISales_data_order_payment_interface::getAdditionalInformation() const {
    return m_additional_information;
}
void OAISales_data_order_payment_interface::setAdditionalInformation(const QList<QString> &additional_information) {
    m_additional_information = additional_information;
    m_additional_information_isSet = true;
}

bool OAISales_data_order_payment_interface::is_additional_information_Set() const{
    return m_additional_information_isSet;
}

bool OAISales_data_order_payment_interface::is_additional_information_Valid() const{
    return m_additional_information_isValid;
}

QString OAISales_data_order_payment_interface::getAddressStatus() const {
    return m_address_status;
}
void OAISales_data_order_payment_interface::setAddressStatus(const QString &address_status) {
    m_address_status = address_status;
    m_address_status_isSet = true;
}

bool OAISales_data_order_payment_interface::is_address_status_Set() const{
    return m_address_status_isSet;
}

bool OAISales_data_order_payment_interface::is_address_status_Valid() const{
    return m_address_status_isValid;
}

double OAISales_data_order_payment_interface::getAmountAuthorized() const {
    return m_amount_authorized;
}
void OAISales_data_order_payment_interface::setAmountAuthorized(const double &amount_authorized) {
    m_amount_authorized = amount_authorized;
    m_amount_authorized_isSet = true;
}

bool OAISales_data_order_payment_interface::is_amount_authorized_Set() const{
    return m_amount_authorized_isSet;
}

bool OAISales_data_order_payment_interface::is_amount_authorized_Valid() const{
    return m_amount_authorized_isValid;
}

double OAISales_data_order_payment_interface::getAmountCanceled() const {
    return m_amount_canceled;
}
void OAISales_data_order_payment_interface::setAmountCanceled(const double &amount_canceled) {
    m_amount_canceled = amount_canceled;
    m_amount_canceled_isSet = true;
}

bool OAISales_data_order_payment_interface::is_amount_canceled_Set() const{
    return m_amount_canceled_isSet;
}

bool OAISales_data_order_payment_interface::is_amount_canceled_Valid() const{
    return m_amount_canceled_isValid;
}

double OAISales_data_order_payment_interface::getAmountOrdered() const {
    return m_amount_ordered;
}
void OAISales_data_order_payment_interface::setAmountOrdered(const double &amount_ordered) {
    m_amount_ordered = amount_ordered;
    m_amount_ordered_isSet = true;
}

bool OAISales_data_order_payment_interface::is_amount_ordered_Set() const{
    return m_amount_ordered_isSet;
}

bool OAISales_data_order_payment_interface::is_amount_ordered_Valid() const{
    return m_amount_ordered_isValid;
}

double OAISales_data_order_payment_interface::getAmountPaid() const {
    return m_amount_paid;
}
void OAISales_data_order_payment_interface::setAmountPaid(const double &amount_paid) {
    m_amount_paid = amount_paid;
    m_amount_paid_isSet = true;
}

bool OAISales_data_order_payment_interface::is_amount_paid_Set() const{
    return m_amount_paid_isSet;
}

bool OAISales_data_order_payment_interface::is_amount_paid_Valid() const{
    return m_amount_paid_isValid;
}

double OAISales_data_order_payment_interface::getAmountRefunded() const {
    return m_amount_refunded;
}
void OAISales_data_order_payment_interface::setAmountRefunded(const double &amount_refunded) {
    m_amount_refunded = amount_refunded;
    m_amount_refunded_isSet = true;
}

bool OAISales_data_order_payment_interface::is_amount_refunded_Set() const{
    return m_amount_refunded_isSet;
}

bool OAISales_data_order_payment_interface::is_amount_refunded_Valid() const{
    return m_amount_refunded_isValid;
}

QString OAISales_data_order_payment_interface::getAnetTransMethod() const {
    return m_anet_trans_method;
}
void OAISales_data_order_payment_interface::setAnetTransMethod(const QString &anet_trans_method) {
    m_anet_trans_method = anet_trans_method;
    m_anet_trans_method_isSet = true;
}

bool OAISales_data_order_payment_interface::is_anet_trans_method_Set() const{
    return m_anet_trans_method_isSet;
}

bool OAISales_data_order_payment_interface::is_anet_trans_method_Valid() const{
    return m_anet_trans_method_isValid;
}

double OAISales_data_order_payment_interface::getBaseAmountAuthorized() const {
    return m_base_amount_authorized;
}
void OAISales_data_order_payment_interface::setBaseAmountAuthorized(const double &base_amount_authorized) {
    m_base_amount_authorized = base_amount_authorized;
    m_base_amount_authorized_isSet = true;
}

bool OAISales_data_order_payment_interface::is_base_amount_authorized_Set() const{
    return m_base_amount_authorized_isSet;
}

bool OAISales_data_order_payment_interface::is_base_amount_authorized_Valid() const{
    return m_base_amount_authorized_isValid;
}

double OAISales_data_order_payment_interface::getBaseAmountCanceled() const {
    return m_base_amount_canceled;
}
void OAISales_data_order_payment_interface::setBaseAmountCanceled(const double &base_amount_canceled) {
    m_base_amount_canceled = base_amount_canceled;
    m_base_amount_canceled_isSet = true;
}

bool OAISales_data_order_payment_interface::is_base_amount_canceled_Set() const{
    return m_base_amount_canceled_isSet;
}

bool OAISales_data_order_payment_interface::is_base_amount_canceled_Valid() const{
    return m_base_amount_canceled_isValid;
}

double OAISales_data_order_payment_interface::getBaseAmountOrdered() const {
    return m_base_amount_ordered;
}
void OAISales_data_order_payment_interface::setBaseAmountOrdered(const double &base_amount_ordered) {
    m_base_amount_ordered = base_amount_ordered;
    m_base_amount_ordered_isSet = true;
}

bool OAISales_data_order_payment_interface::is_base_amount_ordered_Set() const{
    return m_base_amount_ordered_isSet;
}

bool OAISales_data_order_payment_interface::is_base_amount_ordered_Valid() const{
    return m_base_amount_ordered_isValid;
}

double OAISales_data_order_payment_interface::getBaseAmountPaid() const {
    return m_base_amount_paid;
}
void OAISales_data_order_payment_interface::setBaseAmountPaid(const double &base_amount_paid) {
    m_base_amount_paid = base_amount_paid;
    m_base_amount_paid_isSet = true;
}

bool OAISales_data_order_payment_interface::is_base_amount_paid_Set() const{
    return m_base_amount_paid_isSet;
}

bool OAISales_data_order_payment_interface::is_base_amount_paid_Valid() const{
    return m_base_amount_paid_isValid;
}

double OAISales_data_order_payment_interface::getBaseAmountPaidOnline() const {
    return m_base_amount_paid_online;
}
void OAISales_data_order_payment_interface::setBaseAmountPaidOnline(const double &base_amount_paid_online) {
    m_base_amount_paid_online = base_amount_paid_online;
    m_base_amount_paid_online_isSet = true;
}

bool OAISales_data_order_payment_interface::is_base_amount_paid_online_Set() const{
    return m_base_amount_paid_online_isSet;
}

bool OAISales_data_order_payment_interface::is_base_amount_paid_online_Valid() const{
    return m_base_amount_paid_online_isValid;
}

double OAISales_data_order_payment_interface::getBaseAmountRefunded() const {
    return m_base_amount_refunded;
}
void OAISales_data_order_payment_interface::setBaseAmountRefunded(const double &base_amount_refunded) {
    m_base_amount_refunded = base_amount_refunded;
    m_base_amount_refunded_isSet = true;
}

bool OAISales_data_order_payment_interface::is_base_amount_refunded_Set() const{
    return m_base_amount_refunded_isSet;
}

bool OAISales_data_order_payment_interface::is_base_amount_refunded_Valid() const{
    return m_base_amount_refunded_isValid;
}

double OAISales_data_order_payment_interface::getBaseAmountRefundedOnline() const {
    return m_base_amount_refunded_online;
}
void OAISales_data_order_payment_interface::setBaseAmountRefundedOnline(const double &base_amount_refunded_online) {
    m_base_amount_refunded_online = base_amount_refunded_online;
    m_base_amount_refunded_online_isSet = true;
}

bool OAISales_data_order_payment_interface::is_base_amount_refunded_online_Set() const{
    return m_base_amount_refunded_online_isSet;
}

bool OAISales_data_order_payment_interface::is_base_amount_refunded_online_Valid() const{
    return m_base_amount_refunded_online_isValid;
}

double OAISales_data_order_payment_interface::getBaseShippingAmount() const {
    return m_base_shipping_amount;
}
void OAISales_data_order_payment_interface::setBaseShippingAmount(const double &base_shipping_amount) {
    m_base_shipping_amount = base_shipping_amount;
    m_base_shipping_amount_isSet = true;
}

bool OAISales_data_order_payment_interface::is_base_shipping_amount_Set() const{
    return m_base_shipping_amount_isSet;
}

bool OAISales_data_order_payment_interface::is_base_shipping_amount_Valid() const{
    return m_base_shipping_amount_isValid;
}

double OAISales_data_order_payment_interface::getBaseShippingCaptured() const {
    return m_base_shipping_captured;
}
void OAISales_data_order_payment_interface::setBaseShippingCaptured(const double &base_shipping_captured) {
    m_base_shipping_captured = base_shipping_captured;
    m_base_shipping_captured_isSet = true;
}

bool OAISales_data_order_payment_interface::is_base_shipping_captured_Set() const{
    return m_base_shipping_captured_isSet;
}

bool OAISales_data_order_payment_interface::is_base_shipping_captured_Valid() const{
    return m_base_shipping_captured_isValid;
}

double OAISales_data_order_payment_interface::getBaseShippingRefunded() const {
    return m_base_shipping_refunded;
}
void OAISales_data_order_payment_interface::setBaseShippingRefunded(const double &base_shipping_refunded) {
    m_base_shipping_refunded = base_shipping_refunded;
    m_base_shipping_refunded_isSet = true;
}

bool OAISales_data_order_payment_interface::is_base_shipping_refunded_Set() const{
    return m_base_shipping_refunded_isSet;
}

bool OAISales_data_order_payment_interface::is_base_shipping_refunded_Valid() const{
    return m_base_shipping_refunded_isValid;
}

QString OAISales_data_order_payment_interface::getCcApproval() const {
    return m_cc_approval;
}
void OAISales_data_order_payment_interface::setCcApproval(const QString &cc_approval) {
    m_cc_approval = cc_approval;
    m_cc_approval_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_approval_Set() const{
    return m_cc_approval_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_approval_Valid() const{
    return m_cc_approval_isValid;
}

QString OAISales_data_order_payment_interface::getCcAvsStatus() const {
    return m_cc_avs_status;
}
void OAISales_data_order_payment_interface::setCcAvsStatus(const QString &cc_avs_status) {
    m_cc_avs_status = cc_avs_status;
    m_cc_avs_status_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_avs_status_Set() const{
    return m_cc_avs_status_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_avs_status_Valid() const{
    return m_cc_avs_status_isValid;
}

QString OAISales_data_order_payment_interface::getCcCidStatus() const {
    return m_cc_cid_status;
}
void OAISales_data_order_payment_interface::setCcCidStatus(const QString &cc_cid_status) {
    m_cc_cid_status = cc_cid_status;
    m_cc_cid_status_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_cid_status_Set() const{
    return m_cc_cid_status_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_cid_status_Valid() const{
    return m_cc_cid_status_isValid;
}

QString OAISales_data_order_payment_interface::getCcDebugRequestBody() const {
    return m_cc_debug_request_body;
}
void OAISales_data_order_payment_interface::setCcDebugRequestBody(const QString &cc_debug_request_body) {
    m_cc_debug_request_body = cc_debug_request_body;
    m_cc_debug_request_body_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_debug_request_body_Set() const{
    return m_cc_debug_request_body_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_debug_request_body_Valid() const{
    return m_cc_debug_request_body_isValid;
}

QString OAISales_data_order_payment_interface::getCcDebugResponseBody() const {
    return m_cc_debug_response_body;
}
void OAISales_data_order_payment_interface::setCcDebugResponseBody(const QString &cc_debug_response_body) {
    m_cc_debug_response_body = cc_debug_response_body;
    m_cc_debug_response_body_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_debug_response_body_Set() const{
    return m_cc_debug_response_body_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_debug_response_body_Valid() const{
    return m_cc_debug_response_body_isValid;
}

QString OAISales_data_order_payment_interface::getCcDebugResponseSerialized() const {
    return m_cc_debug_response_serialized;
}
void OAISales_data_order_payment_interface::setCcDebugResponseSerialized(const QString &cc_debug_response_serialized) {
    m_cc_debug_response_serialized = cc_debug_response_serialized;
    m_cc_debug_response_serialized_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_debug_response_serialized_Set() const{
    return m_cc_debug_response_serialized_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_debug_response_serialized_Valid() const{
    return m_cc_debug_response_serialized_isValid;
}

QString OAISales_data_order_payment_interface::getCcExpMonth() const {
    return m_cc_exp_month;
}
void OAISales_data_order_payment_interface::setCcExpMonth(const QString &cc_exp_month) {
    m_cc_exp_month = cc_exp_month;
    m_cc_exp_month_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_exp_month_Set() const{
    return m_cc_exp_month_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_exp_month_Valid() const{
    return m_cc_exp_month_isValid;
}

QString OAISales_data_order_payment_interface::getCcExpYear() const {
    return m_cc_exp_year;
}
void OAISales_data_order_payment_interface::setCcExpYear(const QString &cc_exp_year) {
    m_cc_exp_year = cc_exp_year;
    m_cc_exp_year_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_exp_year_Set() const{
    return m_cc_exp_year_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_exp_year_Valid() const{
    return m_cc_exp_year_isValid;
}

QString OAISales_data_order_payment_interface::getCcLast4() const {
    return m_cc_last4;
}
void OAISales_data_order_payment_interface::setCcLast4(const QString &cc_last4) {
    m_cc_last4 = cc_last4;
    m_cc_last4_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_last4_Set() const{
    return m_cc_last4_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_last4_Valid() const{
    return m_cc_last4_isValid;
}

QString OAISales_data_order_payment_interface::getCcNumberEnc() const {
    return m_cc_number_enc;
}
void OAISales_data_order_payment_interface::setCcNumberEnc(const QString &cc_number_enc) {
    m_cc_number_enc = cc_number_enc;
    m_cc_number_enc_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_number_enc_Set() const{
    return m_cc_number_enc_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_number_enc_Valid() const{
    return m_cc_number_enc_isValid;
}

QString OAISales_data_order_payment_interface::getCcOwner() const {
    return m_cc_owner;
}
void OAISales_data_order_payment_interface::setCcOwner(const QString &cc_owner) {
    m_cc_owner = cc_owner;
    m_cc_owner_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_owner_Set() const{
    return m_cc_owner_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_owner_Valid() const{
    return m_cc_owner_isValid;
}

QString OAISales_data_order_payment_interface::getCcSecureVerify() const {
    return m_cc_secure_verify;
}
void OAISales_data_order_payment_interface::setCcSecureVerify(const QString &cc_secure_verify) {
    m_cc_secure_verify = cc_secure_verify;
    m_cc_secure_verify_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_secure_verify_Set() const{
    return m_cc_secure_verify_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_secure_verify_Valid() const{
    return m_cc_secure_verify_isValid;
}

QString OAISales_data_order_payment_interface::getCcSsIssue() const {
    return m_cc_ss_issue;
}
void OAISales_data_order_payment_interface::setCcSsIssue(const QString &cc_ss_issue) {
    m_cc_ss_issue = cc_ss_issue;
    m_cc_ss_issue_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_ss_issue_Set() const{
    return m_cc_ss_issue_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_ss_issue_Valid() const{
    return m_cc_ss_issue_isValid;
}

QString OAISales_data_order_payment_interface::getCcSsStartMonth() const {
    return m_cc_ss_start_month;
}
void OAISales_data_order_payment_interface::setCcSsStartMonth(const QString &cc_ss_start_month) {
    m_cc_ss_start_month = cc_ss_start_month;
    m_cc_ss_start_month_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_ss_start_month_Set() const{
    return m_cc_ss_start_month_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_ss_start_month_Valid() const{
    return m_cc_ss_start_month_isValid;
}

QString OAISales_data_order_payment_interface::getCcSsStartYear() const {
    return m_cc_ss_start_year;
}
void OAISales_data_order_payment_interface::setCcSsStartYear(const QString &cc_ss_start_year) {
    m_cc_ss_start_year = cc_ss_start_year;
    m_cc_ss_start_year_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_ss_start_year_Set() const{
    return m_cc_ss_start_year_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_ss_start_year_Valid() const{
    return m_cc_ss_start_year_isValid;
}

QString OAISales_data_order_payment_interface::getCcStatus() const {
    return m_cc_status;
}
void OAISales_data_order_payment_interface::setCcStatus(const QString &cc_status) {
    m_cc_status = cc_status;
    m_cc_status_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_status_Set() const{
    return m_cc_status_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_status_Valid() const{
    return m_cc_status_isValid;
}

QString OAISales_data_order_payment_interface::getCcStatusDescription() const {
    return m_cc_status_description;
}
void OAISales_data_order_payment_interface::setCcStatusDescription(const QString &cc_status_description) {
    m_cc_status_description = cc_status_description;
    m_cc_status_description_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_status_description_Set() const{
    return m_cc_status_description_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_status_description_Valid() const{
    return m_cc_status_description_isValid;
}

QString OAISales_data_order_payment_interface::getCcTransId() const {
    return m_cc_trans_id;
}
void OAISales_data_order_payment_interface::setCcTransId(const QString &cc_trans_id) {
    m_cc_trans_id = cc_trans_id;
    m_cc_trans_id_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_trans_id_Set() const{
    return m_cc_trans_id_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_trans_id_Valid() const{
    return m_cc_trans_id_isValid;
}

QString OAISales_data_order_payment_interface::getCcType() const {
    return m_cc_type;
}
void OAISales_data_order_payment_interface::setCcType(const QString &cc_type) {
    m_cc_type = cc_type;
    m_cc_type_isSet = true;
}

bool OAISales_data_order_payment_interface::is_cc_type_Set() const{
    return m_cc_type_isSet;
}

bool OAISales_data_order_payment_interface::is_cc_type_Valid() const{
    return m_cc_type_isValid;
}

QString OAISales_data_order_payment_interface::getEcheckAccountName() const {
    return m_echeck_account_name;
}
void OAISales_data_order_payment_interface::setEcheckAccountName(const QString &echeck_account_name) {
    m_echeck_account_name = echeck_account_name;
    m_echeck_account_name_isSet = true;
}

bool OAISales_data_order_payment_interface::is_echeck_account_name_Set() const{
    return m_echeck_account_name_isSet;
}

bool OAISales_data_order_payment_interface::is_echeck_account_name_Valid() const{
    return m_echeck_account_name_isValid;
}

QString OAISales_data_order_payment_interface::getEcheckAccountType() const {
    return m_echeck_account_type;
}
void OAISales_data_order_payment_interface::setEcheckAccountType(const QString &echeck_account_type) {
    m_echeck_account_type = echeck_account_type;
    m_echeck_account_type_isSet = true;
}

bool OAISales_data_order_payment_interface::is_echeck_account_type_Set() const{
    return m_echeck_account_type_isSet;
}

bool OAISales_data_order_payment_interface::is_echeck_account_type_Valid() const{
    return m_echeck_account_type_isValid;
}

QString OAISales_data_order_payment_interface::getEcheckBankName() const {
    return m_echeck_bank_name;
}
void OAISales_data_order_payment_interface::setEcheckBankName(const QString &echeck_bank_name) {
    m_echeck_bank_name = echeck_bank_name;
    m_echeck_bank_name_isSet = true;
}

bool OAISales_data_order_payment_interface::is_echeck_bank_name_Set() const{
    return m_echeck_bank_name_isSet;
}

bool OAISales_data_order_payment_interface::is_echeck_bank_name_Valid() const{
    return m_echeck_bank_name_isValid;
}

QString OAISales_data_order_payment_interface::getEcheckRoutingNumber() const {
    return m_echeck_routing_number;
}
void OAISales_data_order_payment_interface::setEcheckRoutingNumber(const QString &echeck_routing_number) {
    m_echeck_routing_number = echeck_routing_number;
    m_echeck_routing_number_isSet = true;
}

bool OAISales_data_order_payment_interface::is_echeck_routing_number_Set() const{
    return m_echeck_routing_number_isSet;
}

bool OAISales_data_order_payment_interface::is_echeck_routing_number_Valid() const{
    return m_echeck_routing_number_isValid;
}

QString OAISales_data_order_payment_interface::getEcheckType() const {
    return m_echeck_type;
}
void OAISales_data_order_payment_interface::setEcheckType(const QString &echeck_type) {
    m_echeck_type = echeck_type;
    m_echeck_type_isSet = true;
}

bool OAISales_data_order_payment_interface::is_echeck_type_Set() const{
    return m_echeck_type_isSet;
}

bool OAISales_data_order_payment_interface::is_echeck_type_Valid() const{
    return m_echeck_type_isValid;
}

qint32 OAISales_data_order_payment_interface::getEntityId() const {
    return m_entity_id;
}
void OAISales_data_order_payment_interface::setEntityId(const qint32 &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAISales_data_order_payment_interface::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAISales_data_order_payment_interface::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAISales_data_order_payment_extension_interface OAISales_data_order_payment_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAISales_data_order_payment_interface::setExtensionAttributes(const OAISales_data_order_payment_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAISales_data_order_payment_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAISales_data_order_payment_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAISales_data_order_payment_interface::getLastTransId() const {
    return m_last_trans_id;
}
void OAISales_data_order_payment_interface::setLastTransId(const QString &last_trans_id) {
    m_last_trans_id = last_trans_id;
    m_last_trans_id_isSet = true;
}

bool OAISales_data_order_payment_interface::is_last_trans_id_Set() const{
    return m_last_trans_id_isSet;
}

bool OAISales_data_order_payment_interface::is_last_trans_id_Valid() const{
    return m_last_trans_id_isValid;
}

QString OAISales_data_order_payment_interface::getMethod() const {
    return m_method;
}
void OAISales_data_order_payment_interface::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAISales_data_order_payment_interface::is_method_Set() const{
    return m_method_isSet;
}

bool OAISales_data_order_payment_interface::is_method_Valid() const{
    return m_method_isValid;
}

qint32 OAISales_data_order_payment_interface::getParentId() const {
    return m_parent_id;
}
void OAISales_data_order_payment_interface::setParentId(const qint32 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAISales_data_order_payment_interface::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAISales_data_order_payment_interface::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAISales_data_order_payment_interface::getPoNumber() const {
    return m_po_number;
}
void OAISales_data_order_payment_interface::setPoNumber(const QString &po_number) {
    m_po_number = po_number;
    m_po_number_isSet = true;
}

bool OAISales_data_order_payment_interface::is_po_number_Set() const{
    return m_po_number_isSet;
}

bool OAISales_data_order_payment_interface::is_po_number_Valid() const{
    return m_po_number_isValid;
}

QString OAISales_data_order_payment_interface::getProtectionEligibility() const {
    return m_protection_eligibility;
}
void OAISales_data_order_payment_interface::setProtectionEligibility(const QString &protection_eligibility) {
    m_protection_eligibility = protection_eligibility;
    m_protection_eligibility_isSet = true;
}

bool OAISales_data_order_payment_interface::is_protection_eligibility_Set() const{
    return m_protection_eligibility_isSet;
}

bool OAISales_data_order_payment_interface::is_protection_eligibility_Valid() const{
    return m_protection_eligibility_isValid;
}

qint32 OAISales_data_order_payment_interface::getQuotePaymentId() const {
    return m_quote_payment_id;
}
void OAISales_data_order_payment_interface::setQuotePaymentId(const qint32 &quote_payment_id) {
    m_quote_payment_id = quote_payment_id;
    m_quote_payment_id_isSet = true;
}

bool OAISales_data_order_payment_interface::is_quote_payment_id_Set() const{
    return m_quote_payment_id_isSet;
}

bool OAISales_data_order_payment_interface::is_quote_payment_id_Valid() const{
    return m_quote_payment_id_isValid;
}

double OAISales_data_order_payment_interface::getShippingAmount() const {
    return m_shipping_amount;
}
void OAISales_data_order_payment_interface::setShippingAmount(const double &shipping_amount) {
    m_shipping_amount = shipping_amount;
    m_shipping_amount_isSet = true;
}

bool OAISales_data_order_payment_interface::is_shipping_amount_Set() const{
    return m_shipping_amount_isSet;
}

bool OAISales_data_order_payment_interface::is_shipping_amount_Valid() const{
    return m_shipping_amount_isValid;
}

double OAISales_data_order_payment_interface::getShippingCaptured() const {
    return m_shipping_captured;
}
void OAISales_data_order_payment_interface::setShippingCaptured(const double &shipping_captured) {
    m_shipping_captured = shipping_captured;
    m_shipping_captured_isSet = true;
}

bool OAISales_data_order_payment_interface::is_shipping_captured_Set() const{
    return m_shipping_captured_isSet;
}

bool OAISales_data_order_payment_interface::is_shipping_captured_Valid() const{
    return m_shipping_captured_isValid;
}

double OAISales_data_order_payment_interface::getShippingRefunded() const {
    return m_shipping_refunded;
}
void OAISales_data_order_payment_interface::setShippingRefunded(const double &shipping_refunded) {
    m_shipping_refunded = shipping_refunded;
    m_shipping_refunded_isSet = true;
}

bool OAISales_data_order_payment_interface::is_shipping_refunded_Set() const{
    return m_shipping_refunded_isSet;
}

bool OAISales_data_order_payment_interface::is_shipping_refunded_Valid() const{
    return m_shipping_refunded_isValid;
}

bool OAISales_data_order_payment_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_information.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_ordered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anet_trans_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_amount_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_amount_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_amount_ordered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_amount_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_amount_paid_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_amount_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_amount_refunded_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_captured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_approval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_avs_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_cid_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_debug_request_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_debug_response_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_debug_response_serialized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_exp_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_exp_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_last4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_number_enc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_secure_verify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_ss_issue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_ss_start_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_ss_start_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_trans_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_echeck_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_echeck_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_echeck_bank_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_echeck_routing_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_echeck_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_trans_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_eligibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_captured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISales_data_order_payment_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_status_isValid && m_additional_information_isValid && m_cc_last4_isValid && m_method_isValid && true;
}

} // namespace OpenAPI
