/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICatalog_inventory_data_stock_item_interface.h
 *
 * Interface StockItem
 */

#ifndef OAICatalog_inventory_data_stock_item_interface_H
#define OAICatalog_inventory_data_stock_item_interface_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICatalog_inventory_data_stock_item_interface : public OAIObject {
public:
    OAICatalog_inventory_data_stock_item_interface();
    OAICatalog_inventory_data_stock_item_interface(QString json);
    ~OAICatalog_inventory_data_stock_item_interface() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBackorders() const;
    void setBackorders(const qint32 &backorders);
    bool is_backorders_Set() const;
    bool is_backorders_Valid() const;

    bool isEnableQtyIncrements() const;
    void setEnableQtyIncrements(const bool &enable_qty_increments);
    bool is_enable_qty_increments_Set() const;
    bool is_enable_qty_increments_Valid() const;

    OAIObject getExtensionAttributes() const;
    void setExtensionAttributes(const OAIObject &extension_attributes);
    bool is_extension_attributes_Set() const;
    bool is_extension_attributes_Valid() const;

    bool isIsDecimalDivided() const;
    void setIsDecimalDivided(const bool &is_decimal_divided);
    bool is_is_decimal_divided_Set() const;
    bool is_is_decimal_divided_Valid() const;

    bool isIsInStock() const;
    void setIsInStock(const bool &is_in_stock);
    bool is_is_in_stock_Set() const;
    bool is_is_in_stock_Valid() const;

    bool isIsQtyDecimal() const;
    void setIsQtyDecimal(const bool &is_qty_decimal);
    bool is_is_qty_decimal_Set() const;
    bool is_is_qty_decimal_Valid() const;

    qint32 getItemId() const;
    void setItemId(const qint32 &item_id);
    bool is_item_id_Set() const;
    bool is_item_id_Valid() const;

    QString getLowStockDate() const;
    void setLowStockDate(const QString &low_stock_date);
    bool is_low_stock_date_Set() const;
    bool is_low_stock_date_Valid() const;

    bool isManageStock() const;
    void setManageStock(const bool &manage_stock);
    bool is_manage_stock_Set() const;
    bool is_manage_stock_Valid() const;

    double getMaxSaleQty() const;
    void setMaxSaleQty(const double &max_sale_qty);
    bool is_max_sale_qty_Set() const;
    bool is_max_sale_qty_Valid() const;

    double getMinQty() const;
    void setMinQty(const double &min_qty);
    bool is_min_qty_Set() const;
    bool is_min_qty_Valid() const;

    double getMinSaleQty() const;
    void setMinSaleQty(const double &min_sale_qty);
    bool is_min_sale_qty_Set() const;
    bool is_min_sale_qty_Valid() const;

    double getNotifyStockQty() const;
    void setNotifyStockQty(const double &notify_stock_qty);
    bool is_notify_stock_qty_Set() const;
    bool is_notify_stock_qty_Valid() const;

    qint32 getProductId() const;
    void setProductId(const qint32 &product_id);
    bool is_product_id_Set() const;
    bool is_product_id_Valid() const;

    double getQty() const;
    void setQty(const double &qty);
    bool is_qty_Set() const;
    bool is_qty_Valid() const;

    double getQtyIncrements() const;
    void setQtyIncrements(const double &qty_increments);
    bool is_qty_increments_Set() const;
    bool is_qty_increments_Valid() const;

    bool isShowDefaultNotificationMessage() const;
    void setShowDefaultNotificationMessage(const bool &show_default_notification_message);
    bool is_show_default_notification_message_Set() const;
    bool is_show_default_notification_message_Valid() const;

    qint32 getStockId() const;
    void setStockId(const qint32 &stock_id);
    bool is_stock_id_Set() const;
    bool is_stock_id_Valid() const;

    qint32 getStockStatusChangedAuto() const;
    void setStockStatusChangedAuto(const qint32 &stock_status_changed_auto);
    bool is_stock_status_changed_auto_Set() const;
    bool is_stock_status_changed_auto_Valid() const;

    bool isUseConfigBackorders() const;
    void setUseConfigBackorders(const bool &use_config_backorders);
    bool is_use_config_backorders_Set() const;
    bool is_use_config_backorders_Valid() const;

    bool isUseConfigEnableQtyInc() const;
    void setUseConfigEnableQtyInc(const bool &use_config_enable_qty_inc);
    bool is_use_config_enable_qty_inc_Set() const;
    bool is_use_config_enable_qty_inc_Valid() const;

    bool isUseConfigManageStock() const;
    void setUseConfigManageStock(const bool &use_config_manage_stock);
    bool is_use_config_manage_stock_Set() const;
    bool is_use_config_manage_stock_Valid() const;

    bool isUseConfigMaxSaleQty() const;
    void setUseConfigMaxSaleQty(const bool &use_config_max_sale_qty);
    bool is_use_config_max_sale_qty_Set() const;
    bool is_use_config_max_sale_qty_Valid() const;

    bool isUseConfigMinQty() const;
    void setUseConfigMinQty(const bool &use_config_min_qty);
    bool is_use_config_min_qty_Set() const;
    bool is_use_config_min_qty_Valid() const;

    qint32 getUseConfigMinSaleQty() const;
    void setUseConfigMinSaleQty(const qint32 &use_config_min_sale_qty);
    bool is_use_config_min_sale_qty_Set() const;
    bool is_use_config_min_sale_qty_Valid() const;

    bool isUseConfigNotifyStockQty() const;
    void setUseConfigNotifyStockQty(const bool &use_config_notify_stock_qty);
    bool is_use_config_notify_stock_qty_Set() const;
    bool is_use_config_notify_stock_qty_Valid() const;

    bool isUseConfigQtyIncrements() const;
    void setUseConfigQtyIncrements(const bool &use_config_qty_increments);
    bool is_use_config_qty_increments_Set() const;
    bool is_use_config_qty_increments_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_backorders;
    bool m_backorders_isSet;
    bool m_backorders_isValid;

    bool m_enable_qty_increments;
    bool m_enable_qty_increments_isSet;
    bool m_enable_qty_increments_isValid;

    OAIObject m_extension_attributes;
    bool m_extension_attributes_isSet;
    bool m_extension_attributes_isValid;

    bool m_is_decimal_divided;
    bool m_is_decimal_divided_isSet;
    bool m_is_decimal_divided_isValid;

    bool m_is_in_stock;
    bool m_is_in_stock_isSet;
    bool m_is_in_stock_isValid;

    bool m_is_qty_decimal;
    bool m_is_qty_decimal_isSet;
    bool m_is_qty_decimal_isValid;

    qint32 m_item_id;
    bool m_item_id_isSet;
    bool m_item_id_isValid;

    QString m_low_stock_date;
    bool m_low_stock_date_isSet;
    bool m_low_stock_date_isValid;

    bool m_manage_stock;
    bool m_manage_stock_isSet;
    bool m_manage_stock_isValid;

    double m_max_sale_qty;
    bool m_max_sale_qty_isSet;
    bool m_max_sale_qty_isValid;

    double m_min_qty;
    bool m_min_qty_isSet;
    bool m_min_qty_isValid;

    double m_min_sale_qty;
    bool m_min_sale_qty_isSet;
    bool m_min_sale_qty_isValid;

    double m_notify_stock_qty;
    bool m_notify_stock_qty_isSet;
    bool m_notify_stock_qty_isValid;

    qint32 m_product_id;
    bool m_product_id_isSet;
    bool m_product_id_isValid;

    double m_qty;
    bool m_qty_isSet;
    bool m_qty_isValid;

    double m_qty_increments;
    bool m_qty_increments_isSet;
    bool m_qty_increments_isValid;

    bool m_show_default_notification_message;
    bool m_show_default_notification_message_isSet;
    bool m_show_default_notification_message_isValid;

    qint32 m_stock_id;
    bool m_stock_id_isSet;
    bool m_stock_id_isValid;

    qint32 m_stock_status_changed_auto;
    bool m_stock_status_changed_auto_isSet;
    bool m_stock_status_changed_auto_isValid;

    bool m_use_config_backorders;
    bool m_use_config_backorders_isSet;
    bool m_use_config_backorders_isValid;

    bool m_use_config_enable_qty_inc;
    bool m_use_config_enable_qty_inc_isSet;
    bool m_use_config_enable_qty_inc_isValid;

    bool m_use_config_manage_stock;
    bool m_use_config_manage_stock_isSet;
    bool m_use_config_manage_stock_isValid;

    bool m_use_config_max_sale_qty;
    bool m_use_config_max_sale_qty_isSet;
    bool m_use_config_max_sale_qty_isValid;

    bool m_use_config_min_qty;
    bool m_use_config_min_qty_isSet;
    bool m_use_config_min_qty_isValid;

    qint32 m_use_config_min_sale_qty;
    bool m_use_config_min_sale_qty_isSet;
    bool m_use_config_min_sale_qty_isValid;

    bool m_use_config_notify_stock_qty;
    bool m_use_config_notify_stock_qty_isSet;
    bool m_use_config_notify_stock_qty_isValid;

    bool m_use_config_qty_increments;
    bool m_use_config_qty_increments_isSet;
    bool m_use_config_qty_increments_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICatalog_inventory_data_stock_item_interface)

#endif // OAICatalog_inventory_data_stock_item_interface_H
