/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINegotiable_quote_data_comment_attachment_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINegotiable_quote_data_comment_attachment_interface::OAINegotiable_quote_data_comment_attachment_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINegotiable_quote_data_comment_attachment_interface::OAINegotiable_quote_data_comment_attachment_interface() {
    this->initializeModel();
}

OAINegotiable_quote_data_comment_attachment_interface::~OAINegotiable_quote_data_comment_attachment_interface() {}

void OAINegotiable_quote_data_comment_attachment_interface::initializeModel() {

    m_attachment_id_isSet = false;
    m_attachment_id_isValid = false;

    m_comment_id_isSet = false;
    m_comment_id_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;
}

void OAINegotiable_quote_data_comment_attachment_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINegotiable_quote_data_comment_attachment_interface::fromJsonObject(QJsonObject json) {

    m_attachment_id_isValid = ::OpenAPI::fromJsonValue(m_attachment_id, json[QString("attachment_id")]);
    m_attachment_id_isSet = !json[QString("attachment_id")].isNull() && m_attachment_id_isValid;

    m_comment_id_isValid = ::OpenAPI::fromJsonValue(m_comment_id, json[QString("comment_id")]);
    m_comment_id_isSet = !json[QString("comment_id")].isNull() && m_comment_id_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("file_name")]);
    m_file_name_isSet = !json[QString("file_name")].isNull() && m_file_name_isValid;

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("file_path")]);
    m_file_path_isSet = !json[QString("file_path")].isNull() && m_file_path_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("file_type")]);
    m_file_type_isSet = !json[QString("file_type")].isNull() && m_file_type_isValid;
}

QString OAINegotiable_quote_data_comment_attachment_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINegotiable_quote_data_comment_attachment_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment_id_isSet) {
        obj.insert(QString("attachment_id"), ::OpenAPI::toJsonValue(m_attachment_id));
    }
    if (m_comment_id_isSet) {
        obj.insert(QString("comment_id"), ::OpenAPI::toJsonValue(m_comment_id));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("file_name"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_file_path_isSet) {
        obj.insert(QString("file_path"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_file_type_isSet) {
        obj.insert(QString("file_type"), ::OpenAPI::toJsonValue(m_file_type));
    }
    return obj;
}

qint32 OAINegotiable_quote_data_comment_attachment_interface::getAttachmentId() const {
    return m_attachment_id;
}
void OAINegotiable_quote_data_comment_attachment_interface::setAttachmentId(const qint32 &attachment_id) {
    m_attachment_id = attachment_id;
    m_attachment_id_isSet = true;
}

bool OAINegotiable_quote_data_comment_attachment_interface::is_attachment_id_Set() const{
    return m_attachment_id_isSet;
}

bool OAINegotiable_quote_data_comment_attachment_interface::is_attachment_id_Valid() const{
    return m_attachment_id_isValid;
}

qint32 OAINegotiable_quote_data_comment_attachment_interface::getCommentId() const {
    return m_comment_id;
}
void OAINegotiable_quote_data_comment_attachment_interface::setCommentId(const qint32 &comment_id) {
    m_comment_id = comment_id;
    m_comment_id_isSet = true;
}

bool OAINegotiable_quote_data_comment_attachment_interface::is_comment_id_Set() const{
    return m_comment_id_isSet;
}

bool OAINegotiable_quote_data_comment_attachment_interface::is_comment_id_Valid() const{
    return m_comment_id_isValid;
}

OAIObject OAINegotiable_quote_data_comment_attachment_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAINegotiable_quote_data_comment_attachment_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAINegotiable_quote_data_comment_attachment_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAINegotiable_quote_data_comment_attachment_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAINegotiable_quote_data_comment_attachment_interface::getFileName() const {
    return m_file_name;
}
void OAINegotiable_quote_data_comment_attachment_interface::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAINegotiable_quote_data_comment_attachment_interface::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAINegotiable_quote_data_comment_attachment_interface::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAINegotiable_quote_data_comment_attachment_interface::getFilePath() const {
    return m_file_path;
}
void OAINegotiable_quote_data_comment_attachment_interface::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAINegotiable_quote_data_comment_attachment_interface::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAINegotiable_quote_data_comment_attachment_interface::is_file_path_Valid() const{
    return m_file_path_isValid;
}

QString OAINegotiable_quote_data_comment_attachment_interface::getFileType() const {
    return m_file_type;
}
void OAINegotiable_quote_data_comment_attachment_interface::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAINegotiable_quote_data_comment_attachment_interface::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAINegotiable_quote_data_comment_attachment_interface::is_file_type_Valid() const{
    return m_file_type_isValid;
}

bool OAINegotiable_quote_data_comment_attachment_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINegotiable_quote_data_comment_attachment_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attachment_id_isValid && m_comment_id_isValid && m_file_name_isValid && m_file_path_isValid && m_file_type_isValid && true;
}

} // namespace OpenAPI
