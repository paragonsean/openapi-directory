/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomer_data_customer_extension_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomer_data_customer_extension_interface::OAICustomer_data_customer_extension_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomer_data_customer_extension_interface::OAICustomer_data_customer_extension_interface() {
    this->initializeModel();
}

OAICustomer_data_customer_extension_interface::~OAICustomer_data_customer_extension_interface() {}

void OAICustomer_data_customer_extension_interface::initializeModel() {

    m_amazon_id_isSet = false;
    m_amazon_id_isValid = false;

    m_company_attributes_isSet = false;
    m_company_attributes_isValid = false;

    m_is_subscribed_isSet = false;
    m_is_subscribed_isValid = false;

    m_vertex_customer_code_isSet = false;
    m_vertex_customer_code_isValid = false;
}

void OAICustomer_data_customer_extension_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomer_data_customer_extension_interface::fromJsonObject(QJsonObject json) {

    m_amazon_id_isValid = ::OpenAPI::fromJsonValue(m_amazon_id, json[QString("amazon_id")]);
    m_amazon_id_isSet = !json[QString("amazon_id")].isNull() && m_amazon_id_isValid;

    m_company_attributes_isValid = ::OpenAPI::fromJsonValue(m_company_attributes, json[QString("company_attributes")]);
    m_company_attributes_isSet = !json[QString("company_attributes")].isNull() && m_company_attributes_isValid;

    m_is_subscribed_isValid = ::OpenAPI::fromJsonValue(m_is_subscribed, json[QString("is_subscribed")]);
    m_is_subscribed_isSet = !json[QString("is_subscribed")].isNull() && m_is_subscribed_isValid;

    m_vertex_customer_code_isValid = ::OpenAPI::fromJsonValue(m_vertex_customer_code, json[QString("vertex_customer_code")]);
    m_vertex_customer_code_isSet = !json[QString("vertex_customer_code")].isNull() && m_vertex_customer_code_isValid;
}

QString OAICustomer_data_customer_extension_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomer_data_customer_extension_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_amazon_id_isSet) {
        obj.insert(QString("amazon_id"), ::OpenAPI::toJsonValue(m_amazon_id));
    }
    if (m_company_attributes.isSet()) {
        obj.insert(QString("company_attributes"), ::OpenAPI::toJsonValue(m_company_attributes));
    }
    if (m_is_subscribed_isSet) {
        obj.insert(QString("is_subscribed"), ::OpenAPI::toJsonValue(m_is_subscribed));
    }
    if (m_vertex_customer_code_isSet) {
        obj.insert(QString("vertex_customer_code"), ::OpenAPI::toJsonValue(m_vertex_customer_code));
    }
    return obj;
}

QString OAICustomer_data_customer_extension_interface::getAmazonId() const {
    return m_amazon_id;
}
void OAICustomer_data_customer_extension_interface::setAmazonId(const QString &amazon_id) {
    m_amazon_id = amazon_id;
    m_amazon_id_isSet = true;
}

bool OAICustomer_data_customer_extension_interface::is_amazon_id_Set() const{
    return m_amazon_id_isSet;
}

bool OAICustomer_data_customer_extension_interface::is_amazon_id_Valid() const{
    return m_amazon_id_isValid;
}

OAICompany_data_company_customer_interface OAICustomer_data_customer_extension_interface::getCompanyAttributes() const {
    return m_company_attributes;
}
void OAICustomer_data_customer_extension_interface::setCompanyAttributes(const OAICompany_data_company_customer_interface &company_attributes) {
    m_company_attributes = company_attributes;
    m_company_attributes_isSet = true;
}

bool OAICustomer_data_customer_extension_interface::is_company_attributes_Set() const{
    return m_company_attributes_isSet;
}

bool OAICustomer_data_customer_extension_interface::is_company_attributes_Valid() const{
    return m_company_attributes_isValid;
}

bool OAICustomer_data_customer_extension_interface::isIsSubscribed() const {
    return m_is_subscribed;
}
void OAICustomer_data_customer_extension_interface::setIsSubscribed(const bool &is_subscribed) {
    m_is_subscribed = is_subscribed;
    m_is_subscribed_isSet = true;
}

bool OAICustomer_data_customer_extension_interface::is_is_subscribed_Set() const{
    return m_is_subscribed_isSet;
}

bool OAICustomer_data_customer_extension_interface::is_is_subscribed_Valid() const{
    return m_is_subscribed_isValid;
}

QString OAICustomer_data_customer_extension_interface::getVertexCustomerCode() const {
    return m_vertex_customer_code;
}
void OAICustomer_data_customer_extension_interface::setVertexCustomerCode(const QString &vertex_customer_code) {
    m_vertex_customer_code = vertex_customer_code;
    m_vertex_customer_code_isSet = true;
}

bool OAICustomer_data_customer_extension_interface::is_vertex_customer_code_Set() const{
    return m_vertex_customer_code_isSet;
}

bool OAICustomer_data_customer_extension_interface::is_vertex_customer_code_Valid() const{
    return m_vertex_customer_code_isValid;
}

bool OAICustomer_data_customer_extension_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amazon_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_subscribed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertex_customer_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomer_data_customer_extension_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
