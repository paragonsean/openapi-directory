/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBundle_data_link_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBundle_data_link_interface::OAIBundle_data_link_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBundle_data_link_interface::OAIBundle_data_link_interface() {
    this->initializeModel();
}

OAIBundle_data_link_interface::~OAIBundle_data_link_interface() {}

void OAIBundle_data_link_interface::initializeModel() {

    m_can_change_quantity_isSet = false;
    m_can_change_quantity_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_option_id_isSet = false;
    m_option_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_type_isSet = false;
    m_price_type_isValid = false;

    m_qty_isSet = false;
    m_qty_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;
}

void OAIBundle_data_link_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBundle_data_link_interface::fromJsonObject(QJsonObject json) {

    m_can_change_quantity_isValid = ::OpenAPI::fromJsonValue(m_can_change_quantity, json[QString("can_change_quantity")]);
    m_can_change_quantity_isSet = !json[QString("can_change_quantity")].isNull() && m_can_change_quantity_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("is_default")]);
    m_is_default_isSet = !json[QString("is_default")].isNull() && m_is_default_isValid;

    m_option_id_isValid = ::OpenAPI::fromJsonValue(m_option_id, json[QString("option_id")]);
    m_option_id_isSet = !json[QString("option_id")].isNull() && m_option_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_type_isValid = ::OpenAPI::fromJsonValue(m_price_type, json[QString("price_type")]);
    m_price_type_isSet = !json[QString("price_type")].isNull() && m_price_type_isValid;

    m_qty_isValid = ::OpenAPI::fromJsonValue(m_qty, json[QString("qty")]);
    m_qty_isSet = !json[QString("qty")].isNull() && m_qty_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;
}

QString OAIBundle_data_link_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBundle_data_link_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_can_change_quantity_isSet) {
        obj.insert(QString("can_change_quantity"), ::OpenAPI::toJsonValue(m_can_change_quantity));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("is_default"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_option_id_isSet) {
        obj.insert(QString("option_id"), ::OpenAPI::toJsonValue(m_option_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_type_isSet) {
        obj.insert(QString("price_type"), ::OpenAPI::toJsonValue(m_price_type));
    }
    if (m_qty_isSet) {
        obj.insert(QString("qty"), ::OpenAPI::toJsonValue(m_qty));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    return obj;
}

qint32 OAIBundle_data_link_interface::getCanChangeQuantity() const {
    return m_can_change_quantity;
}
void OAIBundle_data_link_interface::setCanChangeQuantity(const qint32 &can_change_quantity) {
    m_can_change_quantity = can_change_quantity;
    m_can_change_quantity_isSet = true;
}

bool OAIBundle_data_link_interface::is_can_change_quantity_Set() const{
    return m_can_change_quantity_isSet;
}

bool OAIBundle_data_link_interface::is_can_change_quantity_Valid() const{
    return m_can_change_quantity_isValid;
}

OAIObject OAIBundle_data_link_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIBundle_data_link_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIBundle_data_link_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIBundle_data_link_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAIBundle_data_link_interface::getId() const {
    return m_id;
}
void OAIBundle_data_link_interface::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBundle_data_link_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBundle_data_link_interface::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIBundle_data_link_interface::isIsDefault() const {
    return m_is_default;
}
void OAIBundle_data_link_interface::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIBundle_data_link_interface::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIBundle_data_link_interface::is_is_default_Valid() const{
    return m_is_default_isValid;
}

qint32 OAIBundle_data_link_interface::getOptionId() const {
    return m_option_id;
}
void OAIBundle_data_link_interface::setOptionId(const qint32 &option_id) {
    m_option_id = option_id;
    m_option_id_isSet = true;
}

bool OAIBundle_data_link_interface::is_option_id_Set() const{
    return m_option_id_isSet;
}

bool OAIBundle_data_link_interface::is_option_id_Valid() const{
    return m_option_id_isValid;
}

qint32 OAIBundle_data_link_interface::getPosition() const {
    return m_position;
}
void OAIBundle_data_link_interface::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIBundle_data_link_interface::is_position_Set() const{
    return m_position_isSet;
}

bool OAIBundle_data_link_interface::is_position_Valid() const{
    return m_position_isValid;
}

double OAIBundle_data_link_interface::getPrice() const {
    return m_price;
}
void OAIBundle_data_link_interface::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIBundle_data_link_interface::is_price_Set() const{
    return m_price_isSet;
}

bool OAIBundle_data_link_interface::is_price_Valid() const{
    return m_price_isValid;
}

qint32 OAIBundle_data_link_interface::getPriceType() const {
    return m_price_type;
}
void OAIBundle_data_link_interface::setPriceType(const qint32 &price_type) {
    m_price_type = price_type;
    m_price_type_isSet = true;
}

bool OAIBundle_data_link_interface::is_price_type_Set() const{
    return m_price_type_isSet;
}

bool OAIBundle_data_link_interface::is_price_type_Valid() const{
    return m_price_type_isValid;
}

double OAIBundle_data_link_interface::getQty() const {
    return m_qty;
}
void OAIBundle_data_link_interface::setQty(const double &qty) {
    m_qty = qty;
    m_qty_isSet = true;
}

bool OAIBundle_data_link_interface::is_qty_Set() const{
    return m_qty_isSet;
}

bool OAIBundle_data_link_interface::is_qty_Valid() const{
    return m_qty_isValid;
}

QString OAIBundle_data_link_interface::getSku() const {
    return m_sku;
}
void OAIBundle_data_link_interface::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIBundle_data_link_interface::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIBundle_data_link_interface::is_sku_Valid() const{
    return m_sku_isValid;
}

bool OAIBundle_data_link_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_change_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_option_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBundle_data_link_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_default_isValid && m_price_isValid && m_price_type_isValid && true;
}

} // namespace OpenAPI
