/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISales_rule_data_coupon_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISales_rule_data_coupon_interface::OAISales_rule_data_coupon_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISales_rule_data_coupon_interface::OAISales_rule_data_coupon_interface() {
    this->initializeModel();
}

OAISales_rule_data_coupon_interface::~OAISales_rule_data_coupon_interface() {}

void OAISales_rule_data_coupon_interface::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_coupon_id_isSet = false;
    m_coupon_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_is_primary_isSet = false;
    m_is_primary_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_times_used_isSet = false;
    m_times_used_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_usage_limit_isSet = false;
    m_usage_limit_isValid = false;

    m_usage_per_customer_isSet = false;
    m_usage_per_customer_isValid = false;
}

void OAISales_rule_data_coupon_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISales_rule_data_coupon_interface::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_coupon_id_isValid = ::OpenAPI::fromJsonValue(m_coupon_id, json[QString("coupon_id")]);
    m_coupon_id_isSet = !json[QString("coupon_id")].isNull() && m_coupon_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expiration_date")]);
    m_expiration_date_isSet = !json[QString("expiration_date")].isNull() && m_expiration_date_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_is_primary_isValid = ::OpenAPI::fromJsonValue(m_is_primary, json[QString("is_primary")]);
    m_is_primary_isSet = !json[QString("is_primary")].isNull() && m_is_primary_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("rule_id")]);
    m_rule_id_isSet = !json[QString("rule_id")].isNull() && m_rule_id_isValid;

    m_times_used_isValid = ::OpenAPI::fromJsonValue(m_times_used, json[QString("times_used")]);
    m_times_used_isSet = !json[QString("times_used")].isNull() && m_times_used_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_usage_limit_isValid = ::OpenAPI::fromJsonValue(m_usage_limit, json[QString("usage_limit")]);
    m_usage_limit_isSet = !json[QString("usage_limit")].isNull() && m_usage_limit_isValid;

    m_usage_per_customer_isValid = ::OpenAPI::fromJsonValue(m_usage_per_customer, json[QString("usage_per_customer")]);
    m_usage_per_customer_isSet = !json[QString("usage_per_customer")].isNull() && m_usage_per_customer_isValid;
}

QString OAISales_rule_data_coupon_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISales_rule_data_coupon_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_coupon_id_isSet) {
        obj.insert(QString("coupon_id"), ::OpenAPI::toJsonValue(m_coupon_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expiration_date"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_is_primary_isSet) {
        obj.insert(QString("is_primary"), ::OpenAPI::toJsonValue(m_is_primary));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("rule_id"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_times_used_isSet) {
        obj.insert(QString("times_used"), ::OpenAPI::toJsonValue(m_times_used));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_usage_limit_isSet) {
        obj.insert(QString("usage_limit"), ::OpenAPI::toJsonValue(m_usage_limit));
    }
    if (m_usage_per_customer_isSet) {
        obj.insert(QString("usage_per_customer"), ::OpenAPI::toJsonValue(m_usage_per_customer));
    }
    return obj;
}

QString OAISales_rule_data_coupon_interface::getCode() const {
    return m_code;
}
void OAISales_rule_data_coupon_interface::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAISales_rule_data_coupon_interface::is_code_Set() const{
    return m_code_isSet;
}

bool OAISales_rule_data_coupon_interface::is_code_Valid() const{
    return m_code_isValid;
}

qint32 OAISales_rule_data_coupon_interface::getCouponId() const {
    return m_coupon_id;
}
void OAISales_rule_data_coupon_interface::setCouponId(const qint32 &coupon_id) {
    m_coupon_id = coupon_id;
    m_coupon_id_isSet = true;
}

bool OAISales_rule_data_coupon_interface::is_coupon_id_Set() const{
    return m_coupon_id_isSet;
}

bool OAISales_rule_data_coupon_interface::is_coupon_id_Valid() const{
    return m_coupon_id_isValid;
}

QString OAISales_rule_data_coupon_interface::getCreatedAt() const {
    return m_created_at;
}
void OAISales_rule_data_coupon_interface::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISales_rule_data_coupon_interface::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISales_rule_data_coupon_interface::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISales_rule_data_coupon_interface::getExpirationDate() const {
    return m_expiration_date;
}
void OAISales_rule_data_coupon_interface::setExpirationDate(const QString &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAISales_rule_data_coupon_interface::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAISales_rule_data_coupon_interface::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

OAIObject OAISales_rule_data_coupon_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAISales_rule_data_coupon_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAISales_rule_data_coupon_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAISales_rule_data_coupon_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

bool OAISales_rule_data_coupon_interface::isIsPrimary() const {
    return m_is_primary;
}
void OAISales_rule_data_coupon_interface::setIsPrimary(const bool &is_primary) {
    m_is_primary = is_primary;
    m_is_primary_isSet = true;
}

bool OAISales_rule_data_coupon_interface::is_is_primary_Set() const{
    return m_is_primary_isSet;
}

bool OAISales_rule_data_coupon_interface::is_is_primary_Valid() const{
    return m_is_primary_isValid;
}

qint32 OAISales_rule_data_coupon_interface::getRuleId() const {
    return m_rule_id;
}
void OAISales_rule_data_coupon_interface::setRuleId(const qint32 &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAISales_rule_data_coupon_interface::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAISales_rule_data_coupon_interface::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

qint32 OAISales_rule_data_coupon_interface::getTimesUsed() const {
    return m_times_used;
}
void OAISales_rule_data_coupon_interface::setTimesUsed(const qint32 &times_used) {
    m_times_used = times_used;
    m_times_used_isSet = true;
}

bool OAISales_rule_data_coupon_interface::is_times_used_Set() const{
    return m_times_used_isSet;
}

bool OAISales_rule_data_coupon_interface::is_times_used_Valid() const{
    return m_times_used_isValid;
}

qint32 OAISales_rule_data_coupon_interface::getType() const {
    return m_type;
}
void OAISales_rule_data_coupon_interface::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISales_rule_data_coupon_interface::is_type_Set() const{
    return m_type_isSet;
}

bool OAISales_rule_data_coupon_interface::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAISales_rule_data_coupon_interface::getUsageLimit() const {
    return m_usage_limit;
}
void OAISales_rule_data_coupon_interface::setUsageLimit(const qint32 &usage_limit) {
    m_usage_limit = usage_limit;
    m_usage_limit_isSet = true;
}

bool OAISales_rule_data_coupon_interface::is_usage_limit_Set() const{
    return m_usage_limit_isSet;
}

bool OAISales_rule_data_coupon_interface::is_usage_limit_Valid() const{
    return m_usage_limit_isValid;
}

qint32 OAISales_rule_data_coupon_interface::getUsagePerCustomer() const {
    return m_usage_per_customer;
}
void OAISales_rule_data_coupon_interface::setUsagePerCustomer(const qint32 &usage_per_customer) {
    m_usage_per_customer = usage_per_customer;
    m_usage_per_customer_isSet = true;
}

bool OAISales_rule_data_coupon_interface::is_usage_per_customer_Set() const{
    return m_usage_per_customer_isSet;
}

bool OAISales_rule_data_coupon_interface::is_usage_per_customer_Valid() const{
    return m_usage_per_customer_isValid;
}

bool OAISales_rule_data_coupon_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coupon_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_times_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_per_customer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISales_rule_data_coupon_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_primary_isValid && m_rule_id_isValid && m_times_used_isValid && true;
}

} // namespace OpenAPI
