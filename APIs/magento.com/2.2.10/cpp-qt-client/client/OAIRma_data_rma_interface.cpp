/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRma_data_rma_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRma_data_rma_interface::OAIRma_data_rma_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRma_data_rma_interface::OAIRma_data_rma_interface() {
    this->initializeModel();
}

OAIRma_data_rma_interface::~OAIRma_data_rma_interface() {}

void OAIRma_data_rma_interface::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_custom_attributes_isSet = false;
    m_custom_attributes_isValid = false;

    m_customer_custom_email_isSet = false;
    m_customer_custom_email_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_date_requested_isSet = false;
    m_date_requested_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_increment_id_isSet = false;
    m_increment_id_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_order_increment_id_isSet = false;
    m_order_increment_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;
}

void OAIRma_data_rma_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRma_data_rma_interface::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_custom_attributes_isValid = ::OpenAPI::fromJsonValue(m_custom_attributes, json[QString("custom_attributes")]);
    m_custom_attributes_isSet = !json[QString("custom_attributes")].isNull() && m_custom_attributes_isValid;

    m_customer_custom_email_isValid = ::OpenAPI::fromJsonValue(m_customer_custom_email, json[QString("customer_custom_email")]);
    m_customer_custom_email_isSet = !json[QString("customer_custom_email")].isNull() && m_customer_custom_email_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_date_requested_isValid = ::OpenAPI::fromJsonValue(m_date_requested, json[QString("date_requested")]);
    m_date_requested_isSet = !json[QString("date_requested")].isNull() && m_date_requested_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_increment_id_isValid = ::OpenAPI::fromJsonValue(m_increment_id, json[QString("increment_id")]);
    m_increment_id_isSet = !json[QString("increment_id")].isNull() && m_increment_id_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_order_increment_id_isValid = ::OpenAPI::fromJsonValue(m_order_increment_id, json[QString("order_increment_id")]);
    m_order_increment_id_isSet = !json[QString("order_increment_id")].isNull() && m_order_increment_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;
}

QString OAIRma_data_rma_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRma_data_rma_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_comments.size() > 0) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_custom_attributes.size() > 0) {
        obj.insert(QString("custom_attributes"), ::OpenAPI::toJsonValue(m_custom_attributes));
    }
    if (m_customer_custom_email_isSet) {
        obj.insert(QString("customer_custom_email"), ::OpenAPI::toJsonValue(m_customer_custom_email));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_date_requested_isSet) {
        obj.insert(QString("date_requested"), ::OpenAPI::toJsonValue(m_date_requested));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_increment_id_isSet) {
        obj.insert(QString("increment_id"), ::OpenAPI::toJsonValue(m_increment_id));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_order_increment_id_isSet) {
        obj.insert(QString("order_increment_id"), ::OpenAPI::toJsonValue(m_order_increment_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_tracks.size() > 0) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    return obj;
}

QList<OAIRma_data_comment_interface> OAIRma_data_rma_interface::getComments() const {
    return m_comments;
}
void OAIRma_data_rma_interface::setComments(const QList<OAIRma_data_comment_interface> &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIRma_data_rma_interface::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIRma_data_rma_interface::is_comments_Valid() const{
    return m_comments_isValid;
}

QList<OAIFramework_attribute_interface> OAIRma_data_rma_interface::getCustomAttributes() const {
    return m_custom_attributes;
}
void OAIRma_data_rma_interface::setCustomAttributes(const QList<OAIFramework_attribute_interface> &custom_attributes) {
    m_custom_attributes = custom_attributes;
    m_custom_attributes_isSet = true;
}

bool OAIRma_data_rma_interface::is_custom_attributes_Set() const{
    return m_custom_attributes_isSet;
}

bool OAIRma_data_rma_interface::is_custom_attributes_Valid() const{
    return m_custom_attributes_isValid;
}

QString OAIRma_data_rma_interface::getCustomerCustomEmail() const {
    return m_customer_custom_email;
}
void OAIRma_data_rma_interface::setCustomerCustomEmail(const QString &customer_custom_email) {
    m_customer_custom_email = customer_custom_email;
    m_customer_custom_email_isSet = true;
}

bool OAIRma_data_rma_interface::is_customer_custom_email_Set() const{
    return m_customer_custom_email_isSet;
}

bool OAIRma_data_rma_interface::is_customer_custom_email_Valid() const{
    return m_customer_custom_email_isValid;
}

qint32 OAIRma_data_rma_interface::getCustomerId() const {
    return m_customer_id;
}
void OAIRma_data_rma_interface::setCustomerId(const qint32 &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIRma_data_rma_interface::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIRma_data_rma_interface::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIRma_data_rma_interface::getDateRequested() const {
    return m_date_requested;
}
void OAIRma_data_rma_interface::setDateRequested(const QString &date_requested) {
    m_date_requested = date_requested;
    m_date_requested_isSet = true;
}

bool OAIRma_data_rma_interface::is_date_requested_Set() const{
    return m_date_requested_isSet;
}

bool OAIRma_data_rma_interface::is_date_requested_Valid() const{
    return m_date_requested_isValid;
}

qint32 OAIRma_data_rma_interface::getEntityId() const {
    return m_entity_id;
}
void OAIRma_data_rma_interface::setEntityId(const qint32 &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIRma_data_rma_interface::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIRma_data_rma_interface::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIObject OAIRma_data_rma_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIRma_data_rma_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIRma_data_rma_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIRma_data_rma_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAIRma_data_rma_interface::getIncrementId() const {
    return m_increment_id;
}
void OAIRma_data_rma_interface::setIncrementId(const QString &increment_id) {
    m_increment_id = increment_id;
    m_increment_id_isSet = true;
}

bool OAIRma_data_rma_interface::is_increment_id_Set() const{
    return m_increment_id_isSet;
}

bool OAIRma_data_rma_interface::is_increment_id_Valid() const{
    return m_increment_id_isValid;
}

QList<OAIRma_data_item_interface> OAIRma_data_rma_interface::getItems() const {
    return m_items;
}
void OAIRma_data_rma_interface::setItems(const QList<OAIRma_data_item_interface> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIRma_data_rma_interface::is_items_Set() const{
    return m_items_isSet;
}

bool OAIRma_data_rma_interface::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAIRma_data_rma_interface::getOrderId() const {
    return m_order_id;
}
void OAIRma_data_rma_interface::setOrderId(const qint32 &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIRma_data_rma_interface::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIRma_data_rma_interface::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIRma_data_rma_interface::getOrderIncrementId() const {
    return m_order_increment_id;
}
void OAIRma_data_rma_interface::setOrderIncrementId(const QString &order_increment_id) {
    m_order_increment_id = order_increment_id;
    m_order_increment_id_isSet = true;
}

bool OAIRma_data_rma_interface::is_order_increment_id_Set() const{
    return m_order_increment_id_isSet;
}

bool OAIRma_data_rma_interface::is_order_increment_id_Valid() const{
    return m_order_increment_id_isValid;
}

QString OAIRma_data_rma_interface::getStatus() const {
    return m_status;
}
void OAIRma_data_rma_interface::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRma_data_rma_interface::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRma_data_rma_interface::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIRma_data_rma_interface::getStoreId() const {
    return m_store_id;
}
void OAIRma_data_rma_interface::setStoreId(const qint32 &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIRma_data_rma_interface::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIRma_data_rma_interface::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QList<OAIRma_data_track_interface> OAIRma_data_rma_interface::getTracks() const {
    return m_tracks;
}
void OAIRma_data_rma_interface::setTracks(const QList<OAIRma_data_track_interface> &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAIRma_data_rma_interface::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAIRma_data_rma_interface::is_tracks_Valid() const{
    return m_tracks_isValid;
}

bool OAIRma_data_rma_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_custom_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_increment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_increment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRma_data_rma_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comments_isValid && m_customer_custom_email_isValid && m_customer_id_isValid && m_date_requested_isValid && m_entity_id_isValid && m_increment_id_isValid && m_items_isValid && m_order_id_isValid && m_order_increment_id_isValid && m_status_isValid && m_store_id_isValid && m_tracks_isValid && true;
}

} // namespace OpenAPI
