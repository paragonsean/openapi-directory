/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirectory_data_country_information_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirectory_data_country_information_interface::OAIDirectory_data_country_information_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirectory_data_country_information_interface::OAIDirectory_data_country_information_interface() {
    this->initializeModel();
}

OAIDirectory_data_country_information_interface::~OAIDirectory_data_country_information_interface() {}

void OAIDirectory_data_country_information_interface::initializeModel() {

    m_available_regions_isSet = false;
    m_available_regions_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_full_name_english_isSet = false;
    m_full_name_english_isValid = false;

    m_full_name_locale_isSet = false;
    m_full_name_locale_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_three_letter_abbreviation_isSet = false;
    m_three_letter_abbreviation_isValid = false;

    m_two_letter_abbreviation_isSet = false;
    m_two_letter_abbreviation_isValid = false;
}

void OAIDirectory_data_country_information_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirectory_data_country_information_interface::fromJsonObject(QJsonObject json) {

    m_available_regions_isValid = ::OpenAPI::fromJsonValue(m_available_regions, json[QString("available_regions")]);
    m_available_regions_isSet = !json[QString("available_regions")].isNull() && m_available_regions_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_full_name_english_isValid = ::OpenAPI::fromJsonValue(m_full_name_english, json[QString("full_name_english")]);
    m_full_name_english_isSet = !json[QString("full_name_english")].isNull() && m_full_name_english_isValid;

    m_full_name_locale_isValid = ::OpenAPI::fromJsonValue(m_full_name_locale, json[QString("full_name_locale")]);
    m_full_name_locale_isSet = !json[QString("full_name_locale")].isNull() && m_full_name_locale_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_three_letter_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_three_letter_abbreviation, json[QString("three_letter_abbreviation")]);
    m_three_letter_abbreviation_isSet = !json[QString("three_letter_abbreviation")].isNull() && m_three_letter_abbreviation_isValid;

    m_two_letter_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_two_letter_abbreviation, json[QString("two_letter_abbreviation")]);
    m_two_letter_abbreviation_isSet = !json[QString("two_letter_abbreviation")].isNull() && m_two_letter_abbreviation_isValid;
}

QString OAIDirectory_data_country_information_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirectory_data_country_information_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_available_regions.size() > 0) {
        obj.insert(QString("available_regions"), ::OpenAPI::toJsonValue(m_available_regions));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_full_name_english_isSet) {
        obj.insert(QString("full_name_english"), ::OpenAPI::toJsonValue(m_full_name_english));
    }
    if (m_full_name_locale_isSet) {
        obj.insert(QString("full_name_locale"), ::OpenAPI::toJsonValue(m_full_name_locale));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_three_letter_abbreviation_isSet) {
        obj.insert(QString("three_letter_abbreviation"), ::OpenAPI::toJsonValue(m_three_letter_abbreviation));
    }
    if (m_two_letter_abbreviation_isSet) {
        obj.insert(QString("two_letter_abbreviation"), ::OpenAPI::toJsonValue(m_two_letter_abbreviation));
    }
    return obj;
}

QList<OAIDirectory_data_region_information_interface> OAIDirectory_data_country_information_interface::getAvailableRegions() const {
    return m_available_regions;
}
void OAIDirectory_data_country_information_interface::setAvailableRegions(const QList<OAIDirectory_data_region_information_interface> &available_regions) {
    m_available_regions = available_regions;
    m_available_regions_isSet = true;
}

bool OAIDirectory_data_country_information_interface::is_available_regions_Set() const{
    return m_available_regions_isSet;
}

bool OAIDirectory_data_country_information_interface::is_available_regions_Valid() const{
    return m_available_regions_isValid;
}

OAIObject OAIDirectory_data_country_information_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIDirectory_data_country_information_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIDirectory_data_country_information_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIDirectory_data_country_information_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAIDirectory_data_country_information_interface::getFullNameEnglish() const {
    return m_full_name_english;
}
void OAIDirectory_data_country_information_interface::setFullNameEnglish(const QString &full_name_english) {
    m_full_name_english = full_name_english;
    m_full_name_english_isSet = true;
}

bool OAIDirectory_data_country_information_interface::is_full_name_english_Set() const{
    return m_full_name_english_isSet;
}

bool OAIDirectory_data_country_information_interface::is_full_name_english_Valid() const{
    return m_full_name_english_isValid;
}

QString OAIDirectory_data_country_information_interface::getFullNameLocale() const {
    return m_full_name_locale;
}
void OAIDirectory_data_country_information_interface::setFullNameLocale(const QString &full_name_locale) {
    m_full_name_locale = full_name_locale;
    m_full_name_locale_isSet = true;
}

bool OAIDirectory_data_country_information_interface::is_full_name_locale_Set() const{
    return m_full_name_locale_isSet;
}

bool OAIDirectory_data_country_information_interface::is_full_name_locale_Valid() const{
    return m_full_name_locale_isValid;
}

QString OAIDirectory_data_country_information_interface::getId() const {
    return m_id;
}
void OAIDirectory_data_country_information_interface::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDirectory_data_country_information_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDirectory_data_country_information_interface::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDirectory_data_country_information_interface::getThreeLetterAbbreviation() const {
    return m_three_letter_abbreviation;
}
void OAIDirectory_data_country_information_interface::setThreeLetterAbbreviation(const QString &three_letter_abbreviation) {
    m_three_letter_abbreviation = three_letter_abbreviation;
    m_three_letter_abbreviation_isSet = true;
}

bool OAIDirectory_data_country_information_interface::is_three_letter_abbreviation_Set() const{
    return m_three_letter_abbreviation_isSet;
}

bool OAIDirectory_data_country_information_interface::is_three_letter_abbreviation_Valid() const{
    return m_three_letter_abbreviation_isValid;
}

QString OAIDirectory_data_country_information_interface::getTwoLetterAbbreviation() const {
    return m_two_letter_abbreviation;
}
void OAIDirectory_data_country_information_interface::setTwoLetterAbbreviation(const QString &two_letter_abbreviation) {
    m_two_letter_abbreviation = two_letter_abbreviation;
    m_two_letter_abbreviation_isSet = true;
}

bool OAIDirectory_data_country_information_interface::is_two_letter_abbreviation_Set() const{
    return m_two_letter_abbreviation_isSet;
}

bool OAIDirectory_data_country_information_interface::is_two_letter_abbreviation_Valid() const{
    return m_two_letter_abbreviation_isValid;
}

bool OAIDirectory_data_country_information_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_english_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_letter_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_letter_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirectory_data_country_information_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_full_name_english_isValid && m_full_name_locale_isValid && m_id_isValid && m_three_letter_abbreviation_isValid && m_two_letter_abbreviation_isValid && true;
}

} // namespace OpenAPI
