/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompany_data_permission_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompany_data_permission_interface::OAICompany_data_permission_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompany_data_permission_interface::OAICompany_data_permission_interface() {
    this->initializeModel();
}

OAICompany_data_permission_interface::~OAICompany_data_permission_interface() {}

void OAICompany_data_permission_interface::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_role_id_isSet = false;
    m_role_id_isValid = false;
}

void OAICompany_data_permission_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompany_data_permission_interface::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resource_id")]);
    m_resource_id_isSet = !json[QString("resource_id")].isNull() && m_resource_id_isValid;

    m_role_id_isValid = ::OpenAPI::fromJsonValue(m_role_id, json[QString("role_id")]);
    m_role_id_isSet = !json[QString("role_id")].isNull() && m_role_id_isValid;
}

QString OAICompany_data_permission_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompany_data_permission_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resource_id"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_role_id_isSet) {
        obj.insert(QString("role_id"), ::OpenAPI::toJsonValue(m_role_id));
    }
    return obj;
}

qint32 OAICompany_data_permission_interface::getId() const {
    return m_id;
}
void OAICompany_data_permission_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICompany_data_permission_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAICompany_data_permission_interface::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICompany_data_permission_interface::getPermission() const {
    return m_permission;
}
void OAICompany_data_permission_interface::setPermission(const QString &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAICompany_data_permission_interface::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAICompany_data_permission_interface::is_permission_Valid() const{
    return m_permission_isValid;
}

QString OAICompany_data_permission_interface::getResourceId() const {
    return m_resource_id;
}
void OAICompany_data_permission_interface::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAICompany_data_permission_interface::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAICompany_data_permission_interface::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

qint32 OAICompany_data_permission_interface::getRoleId() const {
    return m_role_id;
}
void OAICompany_data_permission_interface::setRoleId(const qint32 &role_id) {
    m_role_id = role_id;
    m_role_id_isSet = true;
}

bool OAICompany_data_permission_interface::is_role_id_Set() const{
    return m_role_id_isSet;
}

bool OAICompany_data_permission_interface::is_role_id_Valid() const{
    return m_role_id_isValid;
}

bool OAICompany_data_permission_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompany_data_permission_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_permission_isValid && m_resource_id_isValid && true;
}

} // namespace OpenAPI
