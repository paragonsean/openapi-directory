/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog_data_category_tree_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog_data_category_tree_interface::OAICatalog_data_category_tree_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog_data_category_tree_interface::OAICatalog_data_category_tree_interface() {
    this->initializeModel();
}

OAICatalog_data_category_tree_interface::~OAICatalog_data_category_tree_interface() {}

void OAICatalog_data_category_tree_interface::initializeModel() {

    m_children_data_isSet = false;
    m_children_data_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_product_count_isSet = false;
    m_product_count_isValid = false;
}

void OAICatalog_data_category_tree_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog_data_category_tree_interface::fromJsonObject(QJsonObject json) {

    m_children_data_isValid = ::OpenAPI::fromJsonValue(m_children_data, json[QString("children_data")]);
    m_children_data_isSet = !json[QString("children_data")].isNull() && m_children_data_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_product_count_isValid = ::OpenAPI::fromJsonValue(m_product_count, json[QString("product_count")]);
    m_product_count_isSet = !json[QString("product_count")].isNull() && m_product_count_isValid;
}

QString OAICatalog_data_category_tree_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog_data_category_tree_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_children_data.size() > 0) {
        obj.insert(QString("children_data"), ::OpenAPI::toJsonValue(m_children_data));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_product_count_isSet) {
        obj.insert(QString("product_count"), ::OpenAPI::toJsonValue(m_product_count));
    }
    return obj;
}

QList<OAICatalog_data_category_tree_interface> OAICatalog_data_category_tree_interface::getChildrenData() const {
    return m_children_data;
}
void OAICatalog_data_category_tree_interface::setChildrenData(const QList<OAICatalog_data_category_tree_interface> &children_data) {
    m_children_data = children_data;
    m_children_data_isSet = true;
}

bool OAICatalog_data_category_tree_interface::is_children_data_Set() const{
    return m_children_data_isSet;
}

bool OAICatalog_data_category_tree_interface::is_children_data_Valid() const{
    return m_children_data_isValid;
}

qint32 OAICatalog_data_category_tree_interface::getId() const {
    return m_id;
}
void OAICatalog_data_category_tree_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICatalog_data_category_tree_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAICatalog_data_category_tree_interface::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICatalog_data_category_tree_interface::isIsActive() const {
    return m_is_active;
}
void OAICatalog_data_category_tree_interface::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAICatalog_data_category_tree_interface::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAICatalog_data_category_tree_interface::is_is_active_Valid() const{
    return m_is_active_isValid;
}

qint32 OAICatalog_data_category_tree_interface::getLevel() const {
    return m_level;
}
void OAICatalog_data_category_tree_interface::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAICatalog_data_category_tree_interface::is_level_Set() const{
    return m_level_isSet;
}

bool OAICatalog_data_category_tree_interface::is_level_Valid() const{
    return m_level_isValid;
}

QString OAICatalog_data_category_tree_interface::getName() const {
    return m_name;
}
void OAICatalog_data_category_tree_interface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalog_data_category_tree_interface::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalog_data_category_tree_interface::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICatalog_data_category_tree_interface::getParentId() const {
    return m_parent_id;
}
void OAICatalog_data_category_tree_interface::setParentId(const qint32 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAICatalog_data_category_tree_interface::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAICatalog_data_category_tree_interface::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

qint32 OAICatalog_data_category_tree_interface::getPosition() const {
    return m_position;
}
void OAICatalog_data_category_tree_interface::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAICatalog_data_category_tree_interface::is_position_Set() const{
    return m_position_isSet;
}

bool OAICatalog_data_category_tree_interface::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAICatalog_data_category_tree_interface::getProductCount() const {
    return m_product_count;
}
void OAICatalog_data_category_tree_interface::setProductCount(const qint32 &product_count) {
    m_product_count = product_count;
    m_product_count_isSet = true;
}

bool OAICatalog_data_category_tree_interface::is_product_count_Set() const{
    return m_product_count_isSet;
}

bool OAICatalog_data_category_tree_interface::is_product_count_Valid() const{
    return m_product_count_isValid;
}

bool OAICatalog_data_category_tree_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_children_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog_data_category_tree_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_children_data_isValid && m_is_active_isValid && m_level_isValid && m_name_isValid && m_parent_id_isValid && m_position_isValid && m_product_count_isValid && true;
}

} // namespace OpenAPI
