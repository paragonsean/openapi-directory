/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog_inventory_data_stock_status_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog_inventory_data_stock_status_interface::OAICatalog_inventory_data_stock_status_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog_inventory_data_stock_status_interface::OAICatalog_inventory_data_stock_status_interface() {
    this->initializeModel();
}

OAICatalog_inventory_data_stock_status_interface::~OAICatalog_inventory_data_stock_status_interface() {}

void OAICatalog_inventory_data_stock_status_interface::initializeModel() {

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_qty_isSet = false;
    m_qty_isValid = false;

    m_stock_id_isSet = false;
    m_stock_id_isValid = false;

    m_stock_item_isSet = false;
    m_stock_item_isValid = false;

    m_stock_status_isSet = false;
    m_stock_status_isValid = false;
}

void OAICatalog_inventory_data_stock_status_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog_inventory_data_stock_status_interface::fromJsonObject(QJsonObject json) {

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("product_id")]);
    m_product_id_isSet = !json[QString("product_id")].isNull() && m_product_id_isValid;

    m_qty_isValid = ::OpenAPI::fromJsonValue(m_qty, json[QString("qty")]);
    m_qty_isSet = !json[QString("qty")].isNull() && m_qty_isValid;

    m_stock_id_isValid = ::OpenAPI::fromJsonValue(m_stock_id, json[QString("stock_id")]);
    m_stock_id_isSet = !json[QString("stock_id")].isNull() && m_stock_id_isValid;

    m_stock_item_isValid = ::OpenAPI::fromJsonValue(m_stock_item, json[QString("stock_item")]);
    m_stock_item_isSet = !json[QString("stock_item")].isNull() && m_stock_item_isValid;

    m_stock_status_isValid = ::OpenAPI::fromJsonValue(m_stock_status, json[QString("stock_status")]);
    m_stock_status_isSet = !json[QString("stock_status")].isNull() && m_stock_status_isValid;
}

QString OAICatalog_inventory_data_stock_status_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog_inventory_data_stock_status_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("product_id"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_qty_isSet) {
        obj.insert(QString("qty"), ::OpenAPI::toJsonValue(m_qty));
    }
    if (m_stock_id_isSet) {
        obj.insert(QString("stock_id"), ::OpenAPI::toJsonValue(m_stock_id));
    }
    if (m_stock_item.isSet()) {
        obj.insert(QString("stock_item"), ::OpenAPI::toJsonValue(m_stock_item));
    }
    if (m_stock_status_isSet) {
        obj.insert(QString("stock_status"), ::OpenAPI::toJsonValue(m_stock_status));
    }
    return obj;
}

OAIObject OAICatalog_inventory_data_stock_status_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAICatalog_inventory_data_stock_status_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAICatalog_inventory_data_stock_status_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAICatalog_inventory_data_stock_status_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAICatalog_inventory_data_stock_status_interface::getProductId() const {
    return m_product_id;
}
void OAICatalog_inventory_data_stock_status_interface::setProductId(const qint32 &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAICatalog_inventory_data_stock_status_interface::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAICatalog_inventory_data_stock_status_interface::is_product_id_Valid() const{
    return m_product_id_isValid;
}

qint32 OAICatalog_inventory_data_stock_status_interface::getQty() const {
    return m_qty;
}
void OAICatalog_inventory_data_stock_status_interface::setQty(const qint32 &qty) {
    m_qty = qty;
    m_qty_isSet = true;
}

bool OAICatalog_inventory_data_stock_status_interface::is_qty_Set() const{
    return m_qty_isSet;
}

bool OAICatalog_inventory_data_stock_status_interface::is_qty_Valid() const{
    return m_qty_isValid;
}

qint32 OAICatalog_inventory_data_stock_status_interface::getStockId() const {
    return m_stock_id;
}
void OAICatalog_inventory_data_stock_status_interface::setStockId(const qint32 &stock_id) {
    m_stock_id = stock_id;
    m_stock_id_isSet = true;
}

bool OAICatalog_inventory_data_stock_status_interface::is_stock_id_Set() const{
    return m_stock_id_isSet;
}

bool OAICatalog_inventory_data_stock_status_interface::is_stock_id_Valid() const{
    return m_stock_id_isValid;
}

OAICatalog_inventory_data_stock_item_interface OAICatalog_inventory_data_stock_status_interface::getStockItem() const {
    return m_stock_item;
}
void OAICatalog_inventory_data_stock_status_interface::setStockItem(const OAICatalog_inventory_data_stock_item_interface &stock_item) {
    m_stock_item = stock_item;
    m_stock_item_isSet = true;
}

bool OAICatalog_inventory_data_stock_status_interface::is_stock_item_Set() const{
    return m_stock_item_isSet;
}

bool OAICatalog_inventory_data_stock_status_interface::is_stock_item_Valid() const{
    return m_stock_item_isValid;
}

qint32 OAICatalog_inventory_data_stock_status_interface::getStockStatus() const {
    return m_stock_status;
}
void OAICatalog_inventory_data_stock_status_interface::setStockStatus(const qint32 &stock_status) {
    m_stock_status = stock_status;
    m_stock_status_isSet = true;
}

bool OAICatalog_inventory_data_stock_status_interface::is_stock_status_Set() const{
    return m_stock_status_isSet;
}

bool OAICatalog_inventory_data_stock_status_interface::is_stock_status_Valid() const{
    return m_stock_status_isValid;
}

bool OAICatalog_inventory_data_stock_status_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog_inventory_data_stock_status_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_id_isValid && m_qty_isValid && m_stock_id_isValid && m_stock_item_isValid && m_stock_status_isValid && true;
}

} // namespace OpenAPI
