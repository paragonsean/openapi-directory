/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISales_rule_data_rule_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISales_rule_data_rule_interface::OAISales_rule_data_rule_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISales_rule_data_rule_interface::OAISales_rule_data_rule_interface() {
    this->initializeModel();
}

OAISales_rule_data_rule_interface::~OAISales_rule_data_rule_interface() {}

void OAISales_rule_data_rule_interface::initializeModel() {

    m_action_condition_isSet = false;
    m_action_condition_isValid = false;

    m_apply_to_shipping_isSet = false;
    m_apply_to_shipping_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_coupon_type_isSet = false;
    m_coupon_type_isValid = false;

    m_customer_group_ids_isSet = false;
    m_customer_group_ids_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_qty_isSet = false;
    m_discount_qty_isValid = false;

    m_discount_step_isSet = false;
    m_discount_step_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_from_date_isSet = false;
    m_from_date_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_advanced_isSet = false;
    m_is_advanced_isValid = false;

    m_is_rss_isSet = false;
    m_is_rss_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_ids_isSet = false;
    m_product_ids_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_simple_action_isSet = false;
    m_simple_action_isValid = false;

    m_simple_free_shipping_isSet = false;
    m_simple_free_shipping_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_stop_rules_processing_isSet = false;
    m_stop_rules_processing_isValid = false;

    m_store_labels_isSet = false;
    m_store_labels_isValid = false;

    m_times_used_isSet = false;
    m_times_used_isValid = false;

    m_to_date_isSet = false;
    m_to_date_isValid = false;

    m_use_auto_generation_isSet = false;
    m_use_auto_generation_isValid = false;

    m_uses_per_coupon_isSet = false;
    m_uses_per_coupon_isValid = false;

    m_uses_per_customer_isSet = false;
    m_uses_per_customer_isValid = false;

    m_website_ids_isSet = false;
    m_website_ids_isValid = false;
}

void OAISales_rule_data_rule_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISales_rule_data_rule_interface::fromJsonObject(QJsonObject json) {

    m_action_condition_isValid = ::OpenAPI::fromJsonValue(m_action_condition, json[QString("action_condition")]);
    m_action_condition_isSet = !json[QString("action_condition")].isNull() && m_action_condition_isValid;

    m_apply_to_shipping_isValid = ::OpenAPI::fromJsonValue(m_apply_to_shipping, json[QString("apply_to_shipping")]);
    m_apply_to_shipping_isSet = !json[QString("apply_to_shipping")].isNull() && m_apply_to_shipping_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_coupon_type_isValid = ::OpenAPI::fromJsonValue(m_coupon_type, json[QString("coupon_type")]);
    m_coupon_type_isSet = !json[QString("coupon_type")].isNull() && m_coupon_type_isValid;

    m_customer_group_ids_isValid = ::OpenAPI::fromJsonValue(m_customer_group_ids, json[QString("customer_group_ids")]);
    m_customer_group_ids_isSet = !json[QString("customer_group_ids")].isNull() && m_customer_group_ids_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discount_amount")]);
    m_discount_amount_isSet = !json[QString("discount_amount")].isNull() && m_discount_amount_isValid;

    m_discount_qty_isValid = ::OpenAPI::fromJsonValue(m_discount_qty, json[QString("discount_qty")]);
    m_discount_qty_isSet = !json[QString("discount_qty")].isNull() && m_discount_qty_isValid;

    m_discount_step_isValid = ::OpenAPI::fromJsonValue(m_discount_step, json[QString("discount_step")]);
    m_discount_step_isSet = !json[QString("discount_step")].isNull() && m_discount_step_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_from_date_isValid = ::OpenAPI::fromJsonValue(m_from_date, json[QString("from_date")]);
    m_from_date_isSet = !json[QString("from_date")].isNull() && m_from_date_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_is_advanced_isValid = ::OpenAPI::fromJsonValue(m_is_advanced, json[QString("is_advanced")]);
    m_is_advanced_isSet = !json[QString("is_advanced")].isNull() && m_is_advanced_isValid;

    m_is_rss_isValid = ::OpenAPI::fromJsonValue(m_is_rss, json[QString("is_rss")]);
    m_is_rss_isSet = !json[QString("is_rss")].isNull() && m_is_rss_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_product_ids_isValid = ::OpenAPI::fromJsonValue(m_product_ids, json[QString("product_ids")]);
    m_product_ids_isSet = !json[QString("product_ids")].isNull() && m_product_ids_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("rule_id")]);
    m_rule_id_isSet = !json[QString("rule_id")].isNull() && m_rule_id_isValid;

    m_simple_action_isValid = ::OpenAPI::fromJsonValue(m_simple_action, json[QString("simple_action")]);
    m_simple_action_isSet = !json[QString("simple_action")].isNull() && m_simple_action_isValid;

    m_simple_free_shipping_isValid = ::OpenAPI::fromJsonValue(m_simple_free_shipping, json[QString("simple_free_shipping")]);
    m_simple_free_shipping_isSet = !json[QString("simple_free_shipping")].isNull() && m_simple_free_shipping_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_stop_rules_processing_isValid = ::OpenAPI::fromJsonValue(m_stop_rules_processing, json[QString("stop_rules_processing")]);
    m_stop_rules_processing_isSet = !json[QString("stop_rules_processing")].isNull() && m_stop_rules_processing_isValid;

    m_store_labels_isValid = ::OpenAPI::fromJsonValue(m_store_labels, json[QString("store_labels")]);
    m_store_labels_isSet = !json[QString("store_labels")].isNull() && m_store_labels_isValid;

    m_times_used_isValid = ::OpenAPI::fromJsonValue(m_times_used, json[QString("times_used")]);
    m_times_used_isSet = !json[QString("times_used")].isNull() && m_times_used_isValid;

    m_to_date_isValid = ::OpenAPI::fromJsonValue(m_to_date, json[QString("to_date")]);
    m_to_date_isSet = !json[QString("to_date")].isNull() && m_to_date_isValid;

    m_use_auto_generation_isValid = ::OpenAPI::fromJsonValue(m_use_auto_generation, json[QString("use_auto_generation")]);
    m_use_auto_generation_isSet = !json[QString("use_auto_generation")].isNull() && m_use_auto_generation_isValid;

    m_uses_per_coupon_isValid = ::OpenAPI::fromJsonValue(m_uses_per_coupon, json[QString("uses_per_coupon")]);
    m_uses_per_coupon_isSet = !json[QString("uses_per_coupon")].isNull() && m_uses_per_coupon_isValid;

    m_uses_per_customer_isValid = ::OpenAPI::fromJsonValue(m_uses_per_customer, json[QString("uses_per_customer")]);
    m_uses_per_customer_isSet = !json[QString("uses_per_customer")].isNull() && m_uses_per_customer_isValid;

    m_website_ids_isValid = ::OpenAPI::fromJsonValue(m_website_ids, json[QString("website_ids")]);
    m_website_ids_isSet = !json[QString("website_ids")].isNull() && m_website_ids_isValid;
}

QString OAISales_rule_data_rule_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISales_rule_data_rule_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_action_condition.isSet()) {
        obj.insert(QString("action_condition"), ::OpenAPI::toJsonValue(m_action_condition));
    }
    if (m_apply_to_shipping_isSet) {
        obj.insert(QString("apply_to_shipping"), ::OpenAPI::toJsonValue(m_apply_to_shipping));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_coupon_type_isSet) {
        obj.insert(QString("coupon_type"), ::OpenAPI::toJsonValue(m_coupon_type));
    }
    if (m_customer_group_ids.size() > 0) {
        obj.insert(QString("customer_group_ids"), ::OpenAPI::toJsonValue(m_customer_group_ids));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("discount_amount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_qty_isSet) {
        obj.insert(QString("discount_qty"), ::OpenAPI::toJsonValue(m_discount_qty));
    }
    if (m_discount_step_isSet) {
        obj.insert(QString("discount_step"), ::OpenAPI::toJsonValue(m_discount_step));
    }
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_from_date_isSet) {
        obj.insert(QString("from_date"), ::OpenAPI::toJsonValue(m_from_date));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_advanced_isSet) {
        obj.insert(QString("is_advanced"), ::OpenAPI::toJsonValue(m_is_advanced));
    }
    if (m_is_rss_isSet) {
        obj.insert(QString("is_rss"), ::OpenAPI::toJsonValue(m_is_rss));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product_ids.size() > 0) {
        obj.insert(QString("product_ids"), ::OpenAPI::toJsonValue(m_product_ids));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("rule_id"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_simple_action_isSet) {
        obj.insert(QString("simple_action"), ::OpenAPI::toJsonValue(m_simple_action));
    }
    if (m_simple_free_shipping_isSet) {
        obj.insert(QString("simple_free_shipping"), ::OpenAPI::toJsonValue(m_simple_free_shipping));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_stop_rules_processing_isSet) {
        obj.insert(QString("stop_rules_processing"), ::OpenAPI::toJsonValue(m_stop_rules_processing));
    }
    if (m_store_labels.size() > 0) {
        obj.insert(QString("store_labels"), ::OpenAPI::toJsonValue(m_store_labels));
    }
    if (m_times_used_isSet) {
        obj.insert(QString("times_used"), ::OpenAPI::toJsonValue(m_times_used));
    }
    if (m_to_date_isSet) {
        obj.insert(QString("to_date"), ::OpenAPI::toJsonValue(m_to_date));
    }
    if (m_use_auto_generation_isSet) {
        obj.insert(QString("use_auto_generation"), ::OpenAPI::toJsonValue(m_use_auto_generation));
    }
    if (m_uses_per_coupon_isSet) {
        obj.insert(QString("uses_per_coupon"), ::OpenAPI::toJsonValue(m_uses_per_coupon));
    }
    if (m_uses_per_customer_isSet) {
        obj.insert(QString("uses_per_customer"), ::OpenAPI::toJsonValue(m_uses_per_customer));
    }
    if (m_website_ids.size() > 0) {
        obj.insert(QString("website_ids"), ::OpenAPI::toJsonValue(m_website_ids));
    }
    return obj;
}

OAISales_rule_data_condition_interface OAISales_rule_data_rule_interface::getActionCondition() const {
    return m_action_condition;
}
void OAISales_rule_data_rule_interface::setActionCondition(const OAISales_rule_data_condition_interface &action_condition) {
    m_action_condition = action_condition;
    m_action_condition_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_action_condition_Set() const{
    return m_action_condition_isSet;
}

bool OAISales_rule_data_rule_interface::is_action_condition_Valid() const{
    return m_action_condition_isValid;
}

bool OAISales_rule_data_rule_interface::isApplyToShipping() const {
    return m_apply_to_shipping;
}
void OAISales_rule_data_rule_interface::setApplyToShipping(const bool &apply_to_shipping) {
    m_apply_to_shipping = apply_to_shipping;
    m_apply_to_shipping_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_apply_to_shipping_Set() const{
    return m_apply_to_shipping_isSet;
}

bool OAISales_rule_data_rule_interface::is_apply_to_shipping_Valid() const{
    return m_apply_to_shipping_isValid;
}

OAISales_rule_data_condition_interface OAISales_rule_data_rule_interface::getCondition() const {
    return m_condition;
}
void OAISales_rule_data_rule_interface::setCondition(const OAISales_rule_data_condition_interface &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAISales_rule_data_rule_interface::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAISales_rule_data_rule_interface::getCouponType() const {
    return m_coupon_type;
}
void OAISales_rule_data_rule_interface::setCouponType(const QString &coupon_type) {
    m_coupon_type = coupon_type;
    m_coupon_type_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_coupon_type_Set() const{
    return m_coupon_type_isSet;
}

bool OAISales_rule_data_rule_interface::is_coupon_type_Valid() const{
    return m_coupon_type_isValid;
}

QList<qint32> OAISales_rule_data_rule_interface::getCustomerGroupIds() const {
    return m_customer_group_ids;
}
void OAISales_rule_data_rule_interface::setCustomerGroupIds(const QList<qint32> &customer_group_ids) {
    m_customer_group_ids = customer_group_ids;
    m_customer_group_ids_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_customer_group_ids_Set() const{
    return m_customer_group_ids_isSet;
}

bool OAISales_rule_data_rule_interface::is_customer_group_ids_Valid() const{
    return m_customer_group_ids_isValid;
}

QString OAISales_rule_data_rule_interface::getDescription() const {
    return m_description;
}
void OAISales_rule_data_rule_interface::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_description_Set() const{
    return m_description_isSet;
}

bool OAISales_rule_data_rule_interface::is_description_Valid() const{
    return m_description_isValid;
}

double OAISales_rule_data_rule_interface::getDiscountAmount() const {
    return m_discount_amount;
}
void OAISales_rule_data_rule_interface::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAISales_rule_data_rule_interface::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

double OAISales_rule_data_rule_interface::getDiscountQty() const {
    return m_discount_qty;
}
void OAISales_rule_data_rule_interface::setDiscountQty(const double &discount_qty) {
    m_discount_qty = discount_qty;
    m_discount_qty_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_discount_qty_Set() const{
    return m_discount_qty_isSet;
}

bool OAISales_rule_data_rule_interface::is_discount_qty_Valid() const{
    return m_discount_qty_isValid;
}

qint32 OAISales_rule_data_rule_interface::getDiscountStep() const {
    return m_discount_step;
}
void OAISales_rule_data_rule_interface::setDiscountStep(const qint32 &discount_step) {
    m_discount_step = discount_step;
    m_discount_step_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_discount_step_Set() const{
    return m_discount_step_isSet;
}

bool OAISales_rule_data_rule_interface::is_discount_step_Valid() const{
    return m_discount_step_isValid;
}

OAISales_rule_data_rule_extension_interface OAISales_rule_data_rule_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAISales_rule_data_rule_interface::setExtensionAttributes(const OAISales_rule_data_rule_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAISales_rule_data_rule_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAISales_rule_data_rule_interface::getFromDate() const {
    return m_from_date;
}
void OAISales_rule_data_rule_interface::setFromDate(const QString &from_date) {
    m_from_date = from_date;
    m_from_date_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_from_date_Set() const{
    return m_from_date_isSet;
}

bool OAISales_rule_data_rule_interface::is_from_date_Valid() const{
    return m_from_date_isValid;
}

bool OAISales_rule_data_rule_interface::isIsActive() const {
    return m_is_active;
}
void OAISales_rule_data_rule_interface::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAISales_rule_data_rule_interface::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAISales_rule_data_rule_interface::isIsAdvanced() const {
    return m_is_advanced;
}
void OAISales_rule_data_rule_interface::setIsAdvanced(const bool &is_advanced) {
    m_is_advanced = is_advanced;
    m_is_advanced_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_is_advanced_Set() const{
    return m_is_advanced_isSet;
}

bool OAISales_rule_data_rule_interface::is_is_advanced_Valid() const{
    return m_is_advanced_isValid;
}

bool OAISales_rule_data_rule_interface::isIsRss() const {
    return m_is_rss;
}
void OAISales_rule_data_rule_interface::setIsRss(const bool &is_rss) {
    m_is_rss = is_rss;
    m_is_rss_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_is_rss_Set() const{
    return m_is_rss_isSet;
}

bool OAISales_rule_data_rule_interface::is_is_rss_Valid() const{
    return m_is_rss_isValid;
}

QString OAISales_rule_data_rule_interface::getName() const {
    return m_name;
}
void OAISales_rule_data_rule_interface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_name_Set() const{
    return m_name_isSet;
}

bool OAISales_rule_data_rule_interface::is_name_Valid() const{
    return m_name_isValid;
}

QList<qint32> OAISales_rule_data_rule_interface::getProductIds() const {
    return m_product_ids;
}
void OAISales_rule_data_rule_interface::setProductIds(const QList<qint32> &product_ids) {
    m_product_ids = product_ids;
    m_product_ids_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_product_ids_Set() const{
    return m_product_ids_isSet;
}

bool OAISales_rule_data_rule_interface::is_product_ids_Valid() const{
    return m_product_ids_isValid;
}

qint32 OAISales_rule_data_rule_interface::getRuleId() const {
    return m_rule_id;
}
void OAISales_rule_data_rule_interface::setRuleId(const qint32 &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAISales_rule_data_rule_interface::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QString OAISales_rule_data_rule_interface::getSimpleAction() const {
    return m_simple_action;
}
void OAISales_rule_data_rule_interface::setSimpleAction(const QString &simple_action) {
    m_simple_action = simple_action;
    m_simple_action_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_simple_action_Set() const{
    return m_simple_action_isSet;
}

bool OAISales_rule_data_rule_interface::is_simple_action_Valid() const{
    return m_simple_action_isValid;
}

QString OAISales_rule_data_rule_interface::getSimpleFreeShipping() const {
    return m_simple_free_shipping;
}
void OAISales_rule_data_rule_interface::setSimpleFreeShipping(const QString &simple_free_shipping) {
    m_simple_free_shipping = simple_free_shipping;
    m_simple_free_shipping_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_simple_free_shipping_Set() const{
    return m_simple_free_shipping_isSet;
}

bool OAISales_rule_data_rule_interface::is_simple_free_shipping_Valid() const{
    return m_simple_free_shipping_isValid;
}

qint32 OAISales_rule_data_rule_interface::getSortOrder() const {
    return m_sort_order;
}
void OAISales_rule_data_rule_interface::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAISales_rule_data_rule_interface::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAISales_rule_data_rule_interface::isStopRulesProcessing() const {
    return m_stop_rules_processing;
}
void OAISales_rule_data_rule_interface::setStopRulesProcessing(const bool &stop_rules_processing) {
    m_stop_rules_processing = stop_rules_processing;
    m_stop_rules_processing_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_stop_rules_processing_Set() const{
    return m_stop_rules_processing_isSet;
}

bool OAISales_rule_data_rule_interface::is_stop_rules_processing_Valid() const{
    return m_stop_rules_processing_isValid;
}

QList<OAISales_rule_data_rule_label_interface> OAISales_rule_data_rule_interface::getStoreLabels() const {
    return m_store_labels;
}
void OAISales_rule_data_rule_interface::setStoreLabels(const QList<OAISales_rule_data_rule_label_interface> &store_labels) {
    m_store_labels = store_labels;
    m_store_labels_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_store_labels_Set() const{
    return m_store_labels_isSet;
}

bool OAISales_rule_data_rule_interface::is_store_labels_Valid() const{
    return m_store_labels_isValid;
}

qint32 OAISales_rule_data_rule_interface::getTimesUsed() const {
    return m_times_used;
}
void OAISales_rule_data_rule_interface::setTimesUsed(const qint32 &times_used) {
    m_times_used = times_used;
    m_times_used_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_times_used_Set() const{
    return m_times_used_isSet;
}

bool OAISales_rule_data_rule_interface::is_times_used_Valid() const{
    return m_times_used_isValid;
}

QString OAISales_rule_data_rule_interface::getToDate() const {
    return m_to_date;
}
void OAISales_rule_data_rule_interface::setToDate(const QString &to_date) {
    m_to_date = to_date;
    m_to_date_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_to_date_Set() const{
    return m_to_date_isSet;
}

bool OAISales_rule_data_rule_interface::is_to_date_Valid() const{
    return m_to_date_isValid;
}

bool OAISales_rule_data_rule_interface::isUseAutoGeneration() const {
    return m_use_auto_generation;
}
void OAISales_rule_data_rule_interface::setUseAutoGeneration(const bool &use_auto_generation) {
    m_use_auto_generation = use_auto_generation;
    m_use_auto_generation_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_use_auto_generation_Set() const{
    return m_use_auto_generation_isSet;
}

bool OAISales_rule_data_rule_interface::is_use_auto_generation_Valid() const{
    return m_use_auto_generation_isValid;
}

qint32 OAISales_rule_data_rule_interface::getUsesPerCoupon() const {
    return m_uses_per_coupon;
}
void OAISales_rule_data_rule_interface::setUsesPerCoupon(const qint32 &uses_per_coupon) {
    m_uses_per_coupon = uses_per_coupon;
    m_uses_per_coupon_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_uses_per_coupon_Set() const{
    return m_uses_per_coupon_isSet;
}

bool OAISales_rule_data_rule_interface::is_uses_per_coupon_Valid() const{
    return m_uses_per_coupon_isValid;
}

qint32 OAISales_rule_data_rule_interface::getUsesPerCustomer() const {
    return m_uses_per_customer;
}
void OAISales_rule_data_rule_interface::setUsesPerCustomer(const qint32 &uses_per_customer) {
    m_uses_per_customer = uses_per_customer;
    m_uses_per_customer_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_uses_per_customer_Set() const{
    return m_uses_per_customer_isSet;
}

bool OAISales_rule_data_rule_interface::is_uses_per_customer_Valid() const{
    return m_uses_per_customer_isValid;
}

QList<qint32> OAISales_rule_data_rule_interface::getWebsiteIds() const {
    return m_website_ids;
}
void OAISales_rule_data_rule_interface::setWebsiteIds(const QList<qint32> &website_ids) {
    m_website_ids = website_ids;
    m_website_ids_isSet = true;
}

bool OAISales_rule_data_rule_interface::is_website_ids_Set() const{
    return m_website_ids_isSet;
}

bool OAISales_rule_data_rule_interface::is_website_ids_Valid() const{
    return m_website_ids_isValid;
}

bool OAISales_rule_data_rule_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_to_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_coupon_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_advanced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_free_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_rules_processing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_times_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_auto_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_per_coupon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_per_customer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISales_rule_data_rule_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_apply_to_shipping_isValid && m_coupon_type_isValid && m_customer_group_ids_isValid && m_discount_amount_isValid && m_discount_step_isValid && m_is_active_isValid && m_is_advanced_isValid && m_is_rss_isValid && m_sort_order_isValid && m_stop_rules_processing_isValid && m_times_used_isValid && m_use_auto_generation_isValid && m_uses_per_coupon_isValid && m_uses_per_customer_isValid && m_website_ids_isValid && true;
}

} // namespace OpenAPI
