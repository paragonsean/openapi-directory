/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompany_credit_data_history_data_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompany_credit_data_history_data_interface::OAICompany_credit_data_history_data_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompany_credit_data_history_data_interface::OAICompany_credit_data_history_data_interface() {
    this->initializeModel();
}

OAICompany_credit_data_history_data_interface::~OAICompany_credit_data_history_data_interface() {}

void OAICompany_credit_data_history_data_interface::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_available_limit_isSet = false;
    m_available_limit_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_company_credit_id_isSet = false;
    m_company_credit_id_isValid = false;

    m_credit_limit_isSet = false;
    m_credit_limit_isValid = false;

    m_currency_credit_isSet = false;
    m_currency_credit_isValid = false;

    m_currency_operation_isSet = false;
    m_currency_operation_isValid = false;

    m_datetime_isSet = false;
    m_datetime_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_purchase_order_isSet = false;
    m_purchase_order_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_rate_credit_isSet = false;
    m_rate_credit_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;
}

void OAICompany_credit_data_history_data_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompany_credit_data_history_data_interface::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_available_limit_isValid = ::OpenAPI::fromJsonValue(m_available_limit, json[QString("available_limit")]);
    m_available_limit_isSet = !json[QString("available_limit")].isNull() && m_available_limit_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_company_credit_id_isValid = ::OpenAPI::fromJsonValue(m_company_credit_id, json[QString("company_credit_id")]);
    m_company_credit_id_isSet = !json[QString("company_credit_id")].isNull() && m_company_credit_id_isValid;

    m_credit_limit_isValid = ::OpenAPI::fromJsonValue(m_credit_limit, json[QString("credit_limit")]);
    m_credit_limit_isSet = !json[QString("credit_limit")].isNull() && m_credit_limit_isValid;

    m_currency_credit_isValid = ::OpenAPI::fromJsonValue(m_currency_credit, json[QString("currency_credit")]);
    m_currency_credit_isSet = !json[QString("currency_credit")].isNull() && m_currency_credit_isValid;

    m_currency_operation_isValid = ::OpenAPI::fromJsonValue(m_currency_operation, json[QString("currency_operation")]);
    m_currency_operation_isSet = !json[QString("currency_operation")].isNull() && m_currency_operation_isValid;

    m_datetime_isValid = ::OpenAPI::fromJsonValue(m_datetime, json[QString("datetime")]);
    m_datetime_isSet = !json[QString("datetime")].isNull() && m_datetime_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_purchase_order_isValid = ::OpenAPI::fromJsonValue(m_purchase_order, json[QString("purchase_order")]);
    m_purchase_order_isSet = !json[QString("purchase_order")].isNull() && m_purchase_order_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_rate_credit_isValid = ::OpenAPI::fromJsonValue(m_rate_credit, json[QString("rate_credit")]);
    m_rate_credit_isSet = !json[QString("rate_credit")].isNull() && m_rate_credit_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_user_type_isValid = ::OpenAPI::fromJsonValue(m_user_type, json[QString("user_type")]);
    m_user_type_isSet = !json[QString("user_type")].isNull() && m_user_type_isValid;
}

QString OAICompany_credit_data_history_data_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompany_credit_data_history_data_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_available_limit_isSet) {
        obj.insert(QString("available_limit"), ::OpenAPI::toJsonValue(m_available_limit));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_company_credit_id_isSet) {
        obj.insert(QString("company_credit_id"), ::OpenAPI::toJsonValue(m_company_credit_id));
    }
    if (m_credit_limit_isSet) {
        obj.insert(QString("credit_limit"), ::OpenAPI::toJsonValue(m_credit_limit));
    }
    if (m_currency_credit_isSet) {
        obj.insert(QString("currency_credit"), ::OpenAPI::toJsonValue(m_currency_credit));
    }
    if (m_currency_operation_isSet) {
        obj.insert(QString("currency_operation"), ::OpenAPI::toJsonValue(m_currency_operation));
    }
    if (m_datetime_isSet) {
        obj.insert(QString("datetime"), ::OpenAPI::toJsonValue(m_datetime));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_purchase_order_isSet) {
        obj.insert(QString("purchase_order"), ::OpenAPI::toJsonValue(m_purchase_order));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_rate_credit_isSet) {
        obj.insert(QString("rate_credit"), ::OpenAPI::toJsonValue(m_rate_credit));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_type_isSet) {
        obj.insert(QString("user_type"), ::OpenAPI::toJsonValue(m_user_type));
    }
    return obj;
}

double OAICompany_credit_data_history_data_interface::getAmount() const {
    return m_amount;
}
void OAICompany_credit_data_history_data_interface::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_amount_Valid() const{
    return m_amount_isValid;
}

double OAICompany_credit_data_history_data_interface::getAvailableLimit() const {
    return m_available_limit;
}
void OAICompany_credit_data_history_data_interface::setAvailableLimit(const double &available_limit) {
    m_available_limit = available_limit;
    m_available_limit_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_available_limit_Set() const{
    return m_available_limit_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_available_limit_Valid() const{
    return m_available_limit_isValid;
}

double OAICompany_credit_data_history_data_interface::getBalance() const {
    return m_balance;
}
void OAICompany_credit_data_history_data_interface::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAICompany_credit_data_history_data_interface::getComment() const {
    return m_comment;
}
void OAICompany_credit_data_history_data_interface::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_comment_Valid() const{
    return m_comment_isValid;
}

qint32 OAICompany_credit_data_history_data_interface::getCompanyCreditId() const {
    return m_company_credit_id;
}
void OAICompany_credit_data_history_data_interface::setCompanyCreditId(const qint32 &company_credit_id) {
    m_company_credit_id = company_credit_id;
    m_company_credit_id_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_company_credit_id_Set() const{
    return m_company_credit_id_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_company_credit_id_Valid() const{
    return m_company_credit_id_isValid;
}

double OAICompany_credit_data_history_data_interface::getCreditLimit() const {
    return m_credit_limit;
}
void OAICompany_credit_data_history_data_interface::setCreditLimit(const double &credit_limit) {
    m_credit_limit = credit_limit;
    m_credit_limit_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_credit_limit_Set() const{
    return m_credit_limit_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_credit_limit_Valid() const{
    return m_credit_limit_isValid;
}

QString OAICompany_credit_data_history_data_interface::getCurrencyCredit() const {
    return m_currency_credit;
}
void OAICompany_credit_data_history_data_interface::setCurrencyCredit(const QString &currency_credit) {
    m_currency_credit = currency_credit;
    m_currency_credit_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_currency_credit_Set() const{
    return m_currency_credit_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_currency_credit_Valid() const{
    return m_currency_credit_isValid;
}

QString OAICompany_credit_data_history_data_interface::getCurrencyOperation() const {
    return m_currency_operation;
}
void OAICompany_credit_data_history_data_interface::setCurrencyOperation(const QString &currency_operation) {
    m_currency_operation = currency_operation;
    m_currency_operation_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_currency_operation_Set() const{
    return m_currency_operation_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_currency_operation_Valid() const{
    return m_currency_operation_isValid;
}

QString OAICompany_credit_data_history_data_interface::getDatetime() const {
    return m_datetime;
}
void OAICompany_credit_data_history_data_interface::setDatetime(const QString &datetime) {
    m_datetime = datetime;
    m_datetime_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_datetime_Set() const{
    return m_datetime_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_datetime_Valid() const{
    return m_datetime_isValid;
}

qint32 OAICompany_credit_data_history_data_interface::getId() const {
    return m_id;
}
void OAICompany_credit_data_history_data_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICompany_credit_data_history_data_interface::getPurchaseOrder() const {
    return m_purchase_order;
}
void OAICompany_credit_data_history_data_interface::setPurchaseOrder(const QString &purchase_order) {
    m_purchase_order = purchase_order;
    m_purchase_order_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_purchase_order_Set() const{
    return m_purchase_order_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_purchase_order_Valid() const{
    return m_purchase_order_isValid;
}

double OAICompany_credit_data_history_data_interface::getRate() const {
    return m_rate;
}
void OAICompany_credit_data_history_data_interface::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_rate_Valid() const{
    return m_rate_isValid;
}

double OAICompany_credit_data_history_data_interface::getRateCredit() const {
    return m_rate_credit;
}
void OAICompany_credit_data_history_data_interface::setRateCredit(const double &rate_credit) {
    m_rate_credit = rate_credit;
    m_rate_credit_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_rate_credit_Set() const{
    return m_rate_credit_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_rate_credit_Valid() const{
    return m_rate_credit_isValid;
}

qint32 OAICompany_credit_data_history_data_interface::getType() const {
    return m_type;
}
void OAICompany_credit_data_history_data_interface::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_type_Set() const{
    return m_type_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAICompany_credit_data_history_data_interface::getUserId() const {
    return m_user_id;
}
void OAICompany_credit_data_history_data_interface::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_user_id_Valid() const{
    return m_user_id_isValid;
}

qint32 OAICompany_credit_data_history_data_interface::getUserType() const {
    return m_user_type;
}
void OAICompany_credit_data_history_data_interface::setUserType(const qint32 &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool OAICompany_credit_data_history_data_interface::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool OAICompany_credit_data_history_data_interface::is_user_type_Valid() const{
    return m_user_type_isValid;
}

bool OAICompany_credit_data_history_data_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_credit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_credit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_credit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompany_credit_data_history_data_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_balance_isValid && m_credit_limit_isValid && m_rate_isValid && true;
}

} // namespace OpenAPI
