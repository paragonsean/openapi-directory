/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICatalog_data_category_attribute_interface.h
 *
 * 
 */

#ifndef OAICatalog_data_category_attribute_interface_H
#define OAICatalog_data_category_attribute_interface_H

#include <QJsonObject>

#include "OAIEav_data_attribute_frontend_label_interface.h"
#include "OAIEav_data_attribute_option_interface.h"
#include "OAIEav_data_attribute_validation_rule_interface.h"
#include "OAIFramework_attribute_interface.h"
#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFramework_attribute_interface;
class OAIEav_data_attribute_frontend_label_interface;
class OAIEav_data_attribute_option_interface;
class OAIEav_data_attribute_validation_rule_interface;

class OAICatalog_data_category_attribute_interface : public OAIObject {
public:
    OAICatalog_data_category_attribute_interface();
    OAICatalog_data_category_attribute_interface(QString json);
    ~OAICatalog_data_category_attribute_interface() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getApplyTo() const;
    void setApplyTo(const QList<QString> &apply_to);
    bool is_apply_to_Set() const;
    bool is_apply_to_Valid() const;

    QString getAttributeCode() const;
    void setAttributeCode(const QString &attribute_code);
    bool is_attribute_code_Set() const;
    bool is_attribute_code_Valid() const;

    qint32 getAttributeId() const;
    void setAttributeId(const qint32 &attribute_id);
    bool is_attribute_id_Set() const;
    bool is_attribute_id_Valid() const;

    QString getBackendModel() const;
    void setBackendModel(const QString &backend_model);
    bool is_backend_model_Set() const;
    bool is_backend_model_Valid() const;

    QString getBackendType() const;
    void setBackendType(const QString &backend_type);
    bool is_backend_type_Set() const;
    bool is_backend_type_Valid() const;

    QList<OAIFramework_attribute_interface> getCustomAttributes() const;
    void setCustomAttributes(const QList<OAIFramework_attribute_interface> &custom_attributes);
    bool is_custom_attributes_Set() const;
    bool is_custom_attributes_Valid() const;

    QString getDefaultFrontendLabel() const;
    void setDefaultFrontendLabel(const QString &default_frontend_label);
    bool is_default_frontend_label_Set() const;
    bool is_default_frontend_label_Valid() const;

    QString getDefaultValue() const;
    void setDefaultValue(const QString &default_value);
    bool is_default_value_Set() const;
    bool is_default_value_Valid() const;

    QString getEntityTypeId() const;
    void setEntityTypeId(const QString &entity_type_id);
    bool is_entity_type_id_Set() const;
    bool is_entity_type_id_Valid() const;

    OAIObject getExtensionAttributes() const;
    void setExtensionAttributes(const OAIObject &extension_attributes);
    bool is_extension_attributes_Set() const;
    bool is_extension_attributes_Valid() const;

    QString getFrontendClass() const;
    void setFrontendClass(const QString &frontend_class);
    bool is_frontend_class_Set() const;
    bool is_frontend_class_Valid() const;

    QString getFrontendInput() const;
    void setFrontendInput(const QString &frontend_input);
    bool is_frontend_input_Set() const;
    bool is_frontend_input_Valid() const;

    QList<OAIEav_data_attribute_frontend_label_interface> getFrontendLabels() const;
    void setFrontendLabels(const QList<OAIEav_data_attribute_frontend_label_interface> &frontend_labels);
    bool is_frontend_labels_Set() const;
    bool is_frontend_labels_Valid() const;

    QString getIsComparable() const;
    void setIsComparable(const QString &is_comparable);
    bool is_is_comparable_Set() const;
    bool is_is_comparable_Valid() const;

    bool isIsFilterable() const;
    void setIsFilterable(const bool &is_filterable);
    bool is_is_filterable_Set() const;
    bool is_is_filterable_Valid() const;

    bool isIsFilterableInGrid() const;
    void setIsFilterableInGrid(const bool &is_filterable_in_grid);
    bool is_is_filterable_in_grid_Set() const;
    bool is_is_filterable_in_grid_Valid() const;

    bool isIsFilterableInSearch() const;
    void setIsFilterableInSearch(const bool &is_filterable_in_search);
    bool is_is_filterable_in_search_Set() const;
    bool is_is_filterable_in_search_Valid() const;

    bool isIsHtmlAllowedOnFront() const;
    void setIsHtmlAllowedOnFront(const bool &is_html_allowed_on_front);
    bool is_is_html_allowed_on_front_Set() const;
    bool is_is_html_allowed_on_front_Valid() const;

    bool isIsRequired() const;
    void setIsRequired(const bool &is_required);
    bool is_is_required_Set() const;
    bool is_is_required_Valid() const;

    QString getIsSearchable() const;
    void setIsSearchable(const QString &is_searchable);
    bool is_is_searchable_Set() const;
    bool is_is_searchable_Valid() const;

    QString getIsUnique() const;
    void setIsUnique(const QString &is_unique);
    bool is_is_unique_Set() const;
    bool is_is_unique_Valid() const;

    QString getIsUsedForPromoRules() const;
    void setIsUsedForPromoRules(const QString &is_used_for_promo_rules);
    bool is_is_used_for_promo_rules_Set() const;
    bool is_is_used_for_promo_rules_Valid() const;

    bool isIsUsedInGrid() const;
    void setIsUsedInGrid(const bool &is_used_in_grid);
    bool is_is_used_in_grid_Set() const;
    bool is_is_used_in_grid_Valid() const;

    bool isIsUserDefined() const;
    void setIsUserDefined(const bool &is_user_defined);
    bool is_is_user_defined_Set() const;
    bool is_is_user_defined_Valid() const;

    bool isIsVisible() const;
    void setIsVisible(const bool &is_visible);
    bool is_is_visible_Set() const;
    bool is_is_visible_Valid() const;

    QString getIsVisibleInAdvancedSearch() const;
    void setIsVisibleInAdvancedSearch(const QString &is_visible_in_advanced_search);
    bool is_is_visible_in_advanced_search_Set() const;
    bool is_is_visible_in_advanced_search_Valid() const;

    bool isIsVisibleInGrid() const;
    void setIsVisibleInGrid(const bool &is_visible_in_grid);
    bool is_is_visible_in_grid_Set() const;
    bool is_is_visible_in_grid_Valid() const;

    QString getIsVisibleOnFront() const;
    void setIsVisibleOnFront(const QString &is_visible_on_front);
    bool is_is_visible_on_front_Set() const;
    bool is_is_visible_on_front_Valid() const;

    bool isIsWysiwygEnabled() const;
    void setIsWysiwygEnabled(const bool &is_wysiwyg_enabled);
    bool is_is_wysiwyg_enabled_Set() const;
    bool is_is_wysiwyg_enabled_Valid() const;

    QString getNote() const;
    void setNote(const QString &note);
    bool is_note_Set() const;
    bool is_note_Valid() const;

    QList<OAIEav_data_attribute_option_interface> getOptions() const;
    void setOptions(const QList<OAIEav_data_attribute_option_interface> &options);
    bool is_options_Set() const;
    bool is_options_Valid() const;

    qint32 getPosition() const;
    void setPosition(const qint32 &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    QString getScope() const;
    void setScope(const QString &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    QString getSourceModel() const;
    void setSourceModel(const QString &source_model);
    bool is_source_model_Set() const;
    bool is_source_model_Valid() const;

    bool isUsedForSortBy() const;
    void setUsedForSortBy(const bool &used_for_sort_by);
    bool is_used_for_sort_by_Set() const;
    bool is_used_for_sort_by_Valid() const;

    QString getUsedInProductListing() const;
    void setUsedInProductListing(const QString &used_in_product_listing);
    bool is_used_in_product_listing_Set() const;
    bool is_used_in_product_listing_Valid() const;

    QList<OAIEav_data_attribute_validation_rule_interface> getValidationRules() const;
    void setValidationRules(const QList<OAIEav_data_attribute_validation_rule_interface> &validation_rules);
    bool is_validation_rules_Set() const;
    bool is_validation_rules_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_apply_to;
    bool m_apply_to_isSet;
    bool m_apply_to_isValid;

    QString m_attribute_code;
    bool m_attribute_code_isSet;
    bool m_attribute_code_isValid;

    qint32 m_attribute_id;
    bool m_attribute_id_isSet;
    bool m_attribute_id_isValid;

    QString m_backend_model;
    bool m_backend_model_isSet;
    bool m_backend_model_isValid;

    QString m_backend_type;
    bool m_backend_type_isSet;
    bool m_backend_type_isValid;

    QList<OAIFramework_attribute_interface> m_custom_attributes;
    bool m_custom_attributes_isSet;
    bool m_custom_attributes_isValid;

    QString m_default_frontend_label;
    bool m_default_frontend_label_isSet;
    bool m_default_frontend_label_isValid;

    QString m_default_value;
    bool m_default_value_isSet;
    bool m_default_value_isValid;

    QString m_entity_type_id;
    bool m_entity_type_id_isSet;
    bool m_entity_type_id_isValid;

    OAIObject m_extension_attributes;
    bool m_extension_attributes_isSet;
    bool m_extension_attributes_isValid;

    QString m_frontend_class;
    bool m_frontend_class_isSet;
    bool m_frontend_class_isValid;

    QString m_frontend_input;
    bool m_frontend_input_isSet;
    bool m_frontend_input_isValid;

    QList<OAIEav_data_attribute_frontend_label_interface> m_frontend_labels;
    bool m_frontend_labels_isSet;
    bool m_frontend_labels_isValid;

    QString m_is_comparable;
    bool m_is_comparable_isSet;
    bool m_is_comparable_isValid;

    bool m_is_filterable;
    bool m_is_filterable_isSet;
    bool m_is_filterable_isValid;

    bool m_is_filterable_in_grid;
    bool m_is_filterable_in_grid_isSet;
    bool m_is_filterable_in_grid_isValid;

    bool m_is_filterable_in_search;
    bool m_is_filterable_in_search_isSet;
    bool m_is_filterable_in_search_isValid;

    bool m_is_html_allowed_on_front;
    bool m_is_html_allowed_on_front_isSet;
    bool m_is_html_allowed_on_front_isValid;

    bool m_is_required;
    bool m_is_required_isSet;
    bool m_is_required_isValid;

    QString m_is_searchable;
    bool m_is_searchable_isSet;
    bool m_is_searchable_isValid;

    QString m_is_unique;
    bool m_is_unique_isSet;
    bool m_is_unique_isValid;

    QString m_is_used_for_promo_rules;
    bool m_is_used_for_promo_rules_isSet;
    bool m_is_used_for_promo_rules_isValid;

    bool m_is_used_in_grid;
    bool m_is_used_in_grid_isSet;
    bool m_is_used_in_grid_isValid;

    bool m_is_user_defined;
    bool m_is_user_defined_isSet;
    bool m_is_user_defined_isValid;

    bool m_is_visible;
    bool m_is_visible_isSet;
    bool m_is_visible_isValid;

    QString m_is_visible_in_advanced_search;
    bool m_is_visible_in_advanced_search_isSet;
    bool m_is_visible_in_advanced_search_isValid;

    bool m_is_visible_in_grid;
    bool m_is_visible_in_grid_isSet;
    bool m_is_visible_in_grid_isValid;

    QString m_is_visible_on_front;
    bool m_is_visible_on_front_isSet;
    bool m_is_visible_on_front_isValid;

    bool m_is_wysiwyg_enabled;
    bool m_is_wysiwyg_enabled_isSet;
    bool m_is_wysiwyg_enabled_isValid;

    QString m_note;
    bool m_note_isSet;
    bool m_note_isValid;

    QList<OAIEav_data_attribute_option_interface> m_options;
    bool m_options_isSet;
    bool m_options_isValid;

    qint32 m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    QString m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    QString m_source_model;
    bool m_source_model_isSet;
    bool m_source_model_isValid;

    bool m_used_for_sort_by;
    bool m_used_for_sort_by_isSet;
    bool m_used_for_sort_by_isValid;

    QString m_used_in_product_listing;
    bool m_used_in_product_listing_isSet;
    bool m_used_in_product_listing_isValid;

    QList<OAIEav_data_attribute_validation_rule_interface> m_validation_rules;
    bool m_validation_rules_isSet;
    bool m_validation_rules_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICatalog_data_category_attribute_interface)

#endif // OAICatalog_data_category_attribute_interface_H
