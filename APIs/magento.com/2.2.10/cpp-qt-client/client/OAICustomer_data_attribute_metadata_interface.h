/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICustomer_data_attribute_metadata_interface.h
 *
 * Customer attribute metadata interface.
 */

#ifndef OAICustomer_data_attribute_metadata_interface_H
#define OAICustomer_data_attribute_metadata_interface_H

#include <QJsonObject>

#include "OAICustomer_data_option_interface.h"
#include "OAICustomer_data_validation_rule_interface.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICustomer_data_option_interface;
class OAICustomer_data_validation_rule_interface;

class OAICustomer_data_attribute_metadata_interface : public OAIObject {
public:
    OAICustomer_data_attribute_metadata_interface();
    OAICustomer_data_attribute_metadata_interface(QString json);
    ~OAICustomer_data_attribute_metadata_interface() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAttributeCode() const;
    void setAttributeCode(const QString &attribute_code);
    bool is_attribute_code_Set() const;
    bool is_attribute_code_Valid() const;

    QString getBackendType() const;
    void setBackendType(const QString &backend_type);
    bool is_backend_type_Set() const;
    bool is_backend_type_Valid() const;

    QString getDataModel() const;
    void setDataModel(const QString &data_model);
    bool is_data_model_Set() const;
    bool is_data_model_Valid() const;

    QString getFrontendClass() const;
    void setFrontendClass(const QString &frontend_class);
    bool is_frontend_class_Set() const;
    bool is_frontend_class_Valid() const;

    QString getFrontendInput() const;
    void setFrontendInput(const QString &frontend_input);
    bool is_frontend_input_Set() const;
    bool is_frontend_input_Valid() const;

    QString getFrontendLabel() const;
    void setFrontendLabel(const QString &frontend_label);
    bool is_frontend_label_Set() const;
    bool is_frontend_label_Valid() const;

    QString getInputFilter() const;
    void setInputFilter(const QString &input_filter);
    bool is_input_filter_Set() const;
    bool is_input_filter_Valid() const;

    bool isIsFilterableInGrid() const;
    void setIsFilterableInGrid(const bool &is_filterable_in_grid);
    bool is_is_filterable_in_grid_Set() const;
    bool is_is_filterable_in_grid_Valid() const;

    bool isIsSearchableInGrid() const;
    void setIsSearchableInGrid(const bool &is_searchable_in_grid);
    bool is_is_searchable_in_grid_Set() const;
    bool is_is_searchable_in_grid_Valid() const;

    bool isIsUsedInGrid() const;
    void setIsUsedInGrid(const bool &is_used_in_grid);
    bool is_is_used_in_grid_Set() const;
    bool is_is_used_in_grid_Valid() const;

    bool isIsVisibleInGrid() const;
    void setIsVisibleInGrid(const bool &is_visible_in_grid);
    bool is_is_visible_in_grid_Set() const;
    bool is_is_visible_in_grid_Valid() const;

    qint32 getMultilineCount() const;
    void setMultilineCount(const qint32 &multiline_count);
    bool is_multiline_count_Set() const;
    bool is_multiline_count_Valid() const;

    QString getNote() const;
    void setNote(const QString &note);
    bool is_note_Set() const;
    bool is_note_Valid() const;

    QList<OAICustomer_data_option_interface> getOptions() const;
    void setOptions(const QList<OAICustomer_data_option_interface> &options);
    bool is_options_Set() const;
    bool is_options_Valid() const;

    bool isRequired() const;
    void setRequired(const bool &required);
    bool is_required_Set() const;
    bool is_required_Valid() const;

    qint32 getSortOrder() const;
    void setSortOrder(const qint32 &sort_order);
    bool is_sort_order_Set() const;
    bool is_sort_order_Valid() const;

    QString getStoreLabel() const;
    void setStoreLabel(const QString &store_label);
    bool is_store_label_Set() const;
    bool is_store_label_Valid() const;

    bool isSystem() const;
    void setSystem(const bool &system);
    bool is_system_Set() const;
    bool is_system_Valid() const;

    bool isUserDefined() const;
    void setUserDefined(const bool &user_defined);
    bool is_user_defined_Set() const;
    bool is_user_defined_Valid() const;

    QList<OAICustomer_data_validation_rule_interface> getValidationRules() const;
    void setValidationRules(const QList<OAICustomer_data_validation_rule_interface> &validation_rules);
    bool is_validation_rules_Set() const;
    bool is_validation_rules_Valid() const;

    bool isVisible() const;
    void setVisible(const bool &visible);
    bool is_visible_Set() const;
    bool is_visible_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_attribute_code;
    bool m_attribute_code_isSet;
    bool m_attribute_code_isValid;

    QString m_backend_type;
    bool m_backend_type_isSet;
    bool m_backend_type_isValid;

    QString m_data_model;
    bool m_data_model_isSet;
    bool m_data_model_isValid;

    QString m_frontend_class;
    bool m_frontend_class_isSet;
    bool m_frontend_class_isValid;

    QString m_frontend_input;
    bool m_frontend_input_isSet;
    bool m_frontend_input_isValid;

    QString m_frontend_label;
    bool m_frontend_label_isSet;
    bool m_frontend_label_isValid;

    QString m_input_filter;
    bool m_input_filter_isSet;
    bool m_input_filter_isValid;

    bool m_is_filterable_in_grid;
    bool m_is_filterable_in_grid_isSet;
    bool m_is_filterable_in_grid_isValid;

    bool m_is_searchable_in_grid;
    bool m_is_searchable_in_grid_isSet;
    bool m_is_searchable_in_grid_isValid;

    bool m_is_used_in_grid;
    bool m_is_used_in_grid_isSet;
    bool m_is_used_in_grid_isValid;

    bool m_is_visible_in_grid;
    bool m_is_visible_in_grid_isSet;
    bool m_is_visible_in_grid_isValid;

    qint32 m_multiline_count;
    bool m_multiline_count_isSet;
    bool m_multiline_count_isValid;

    QString m_note;
    bool m_note_isSet;
    bool m_note_isValid;

    QList<OAICustomer_data_option_interface> m_options;
    bool m_options_isSet;
    bool m_options_isValid;

    bool m_required;
    bool m_required_isSet;
    bool m_required_isValid;

    qint32 m_sort_order;
    bool m_sort_order_isSet;
    bool m_sort_order_isValid;

    QString m_store_label;
    bool m_store_label_isSet;
    bool m_store_label_isValid;

    bool m_system;
    bool m_system_isSet;
    bool m_system_isValid;

    bool m_user_defined;
    bool m_user_defined_isSet;
    bool m_user_defined_isValid;

    QList<OAICustomer_data_validation_rule_interface> m_validation_rules;
    bool m_validation_rules_isSet;
    bool m_validation_rules_isValid;

    bool m_visible;
    bool m_visible_isSet;
    bool m_visible_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICustomer_data_attribute_metadata_interface)

#endif // OAICustomer_data_attribute_metadata_interface_H
