/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuote_data_totals_item_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuote_data_totals_item_interface::OAIQuote_data_totals_item_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuote_data_totals_item_interface::OAIQuote_data_totals_item_interface() {
    this->initializeModel();
}

OAIQuote_data_totals_item_interface::~OAIQuote_data_totals_item_interface() {}

void OAIQuote_data_totals_item_interface::initializeModel() {

    m_base_discount_amount_isSet = false;
    m_base_discount_amount_isValid = false;

    m_base_price_isSet = false;
    m_base_price_isValid = false;

    m_base_price_incl_tax_isSet = false;
    m_base_price_incl_tax_isValid = false;

    m_base_row_total_isSet = false;
    m_base_row_total_isValid = false;

    m_base_row_total_incl_tax_isSet = false;
    m_base_row_total_incl_tax_isValid = false;

    m_base_tax_amount_isSet = false;
    m_base_tax_amount_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_percent_isSet = false;
    m_discount_percent_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_incl_tax_isSet = false;
    m_price_incl_tax_isValid = false;

    m_qty_isSet = false;
    m_qty_isValid = false;

    m_row_total_isSet = false;
    m_row_total_isValid = false;

    m_row_total_incl_tax_isSet = false;
    m_row_total_incl_tax_isValid = false;

    m_row_total_with_discount_isSet = false;
    m_row_total_with_discount_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_percent_isSet = false;
    m_tax_percent_isValid = false;

    m_weee_tax_applied_isSet = false;
    m_weee_tax_applied_isValid = false;

    m_weee_tax_applied_amount_isSet = false;
    m_weee_tax_applied_amount_isValid = false;
}

void OAIQuote_data_totals_item_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuote_data_totals_item_interface::fromJsonObject(QJsonObject json) {

    m_base_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_base_discount_amount, json[QString("base_discount_amount")]);
    m_base_discount_amount_isSet = !json[QString("base_discount_amount")].isNull() && m_base_discount_amount_isValid;

    m_base_price_isValid = ::OpenAPI::fromJsonValue(m_base_price, json[QString("base_price")]);
    m_base_price_isSet = !json[QString("base_price")].isNull() && m_base_price_isValid;

    m_base_price_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_base_price_incl_tax, json[QString("base_price_incl_tax")]);
    m_base_price_incl_tax_isSet = !json[QString("base_price_incl_tax")].isNull() && m_base_price_incl_tax_isValid;

    m_base_row_total_isValid = ::OpenAPI::fromJsonValue(m_base_row_total, json[QString("base_row_total")]);
    m_base_row_total_isSet = !json[QString("base_row_total")].isNull() && m_base_row_total_isValid;

    m_base_row_total_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_base_row_total_incl_tax, json[QString("base_row_total_incl_tax")]);
    m_base_row_total_incl_tax_isSet = !json[QString("base_row_total_incl_tax")].isNull() && m_base_row_total_incl_tax_isValid;

    m_base_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_base_tax_amount, json[QString("base_tax_amount")]);
    m_base_tax_amount_isSet = !json[QString("base_tax_amount")].isNull() && m_base_tax_amount_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discount_amount")]);
    m_discount_amount_isSet = !json[QString("discount_amount")].isNull() && m_discount_amount_isValid;

    m_discount_percent_isValid = ::OpenAPI::fromJsonValue(m_discount_percent, json[QString("discount_percent")]);
    m_discount_percent_isSet = !json[QString("discount_percent")].isNull() && m_discount_percent_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("item_id")]);
    m_item_id_isSet = !json[QString("item_id")].isNull() && m_item_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_price_incl_tax, json[QString("price_incl_tax")]);
    m_price_incl_tax_isSet = !json[QString("price_incl_tax")].isNull() && m_price_incl_tax_isValid;

    m_qty_isValid = ::OpenAPI::fromJsonValue(m_qty, json[QString("qty")]);
    m_qty_isSet = !json[QString("qty")].isNull() && m_qty_isValid;

    m_row_total_isValid = ::OpenAPI::fromJsonValue(m_row_total, json[QString("row_total")]);
    m_row_total_isSet = !json[QString("row_total")].isNull() && m_row_total_isValid;

    m_row_total_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_row_total_incl_tax, json[QString("row_total_incl_tax")]);
    m_row_total_incl_tax_isSet = !json[QString("row_total_incl_tax")].isNull() && m_row_total_incl_tax_isValid;

    m_row_total_with_discount_isValid = ::OpenAPI::fromJsonValue(m_row_total_with_discount, json[QString("row_total_with_discount")]);
    m_row_total_with_discount_isSet = !json[QString("row_total_with_discount")].isNull() && m_row_total_with_discount_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("tax_amount")]);
    m_tax_amount_isSet = !json[QString("tax_amount")].isNull() && m_tax_amount_isValid;

    m_tax_percent_isValid = ::OpenAPI::fromJsonValue(m_tax_percent, json[QString("tax_percent")]);
    m_tax_percent_isSet = !json[QString("tax_percent")].isNull() && m_tax_percent_isValid;

    m_weee_tax_applied_isValid = ::OpenAPI::fromJsonValue(m_weee_tax_applied, json[QString("weee_tax_applied")]);
    m_weee_tax_applied_isSet = !json[QString("weee_tax_applied")].isNull() && m_weee_tax_applied_isValid;

    m_weee_tax_applied_amount_isValid = ::OpenAPI::fromJsonValue(m_weee_tax_applied_amount, json[QString("weee_tax_applied_amount")]);
    m_weee_tax_applied_amount_isSet = !json[QString("weee_tax_applied_amount")].isNull() && m_weee_tax_applied_amount_isValid;
}

QString OAIQuote_data_totals_item_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuote_data_totals_item_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_base_discount_amount_isSet) {
        obj.insert(QString("base_discount_amount"), ::OpenAPI::toJsonValue(m_base_discount_amount));
    }
    if (m_base_price_isSet) {
        obj.insert(QString("base_price"), ::OpenAPI::toJsonValue(m_base_price));
    }
    if (m_base_price_incl_tax_isSet) {
        obj.insert(QString("base_price_incl_tax"), ::OpenAPI::toJsonValue(m_base_price_incl_tax));
    }
    if (m_base_row_total_isSet) {
        obj.insert(QString("base_row_total"), ::OpenAPI::toJsonValue(m_base_row_total));
    }
    if (m_base_row_total_incl_tax_isSet) {
        obj.insert(QString("base_row_total_incl_tax"), ::OpenAPI::toJsonValue(m_base_row_total_incl_tax));
    }
    if (m_base_tax_amount_isSet) {
        obj.insert(QString("base_tax_amount"), ::OpenAPI::toJsonValue(m_base_tax_amount));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("discount_amount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_percent_isSet) {
        obj.insert(QString("discount_percent"), ::OpenAPI::toJsonValue(m_discount_percent));
    }
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("item_id"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options_isSet) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_incl_tax_isSet) {
        obj.insert(QString("price_incl_tax"), ::OpenAPI::toJsonValue(m_price_incl_tax));
    }
    if (m_qty_isSet) {
        obj.insert(QString("qty"), ::OpenAPI::toJsonValue(m_qty));
    }
    if (m_row_total_isSet) {
        obj.insert(QString("row_total"), ::OpenAPI::toJsonValue(m_row_total));
    }
    if (m_row_total_incl_tax_isSet) {
        obj.insert(QString("row_total_incl_tax"), ::OpenAPI::toJsonValue(m_row_total_incl_tax));
    }
    if (m_row_total_with_discount_isSet) {
        obj.insert(QString("row_total_with_discount"), ::OpenAPI::toJsonValue(m_row_total_with_discount));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("tax_amount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_percent_isSet) {
        obj.insert(QString("tax_percent"), ::OpenAPI::toJsonValue(m_tax_percent));
    }
    if (m_weee_tax_applied_isSet) {
        obj.insert(QString("weee_tax_applied"), ::OpenAPI::toJsonValue(m_weee_tax_applied));
    }
    if (m_weee_tax_applied_amount_isSet) {
        obj.insert(QString("weee_tax_applied_amount"), ::OpenAPI::toJsonValue(m_weee_tax_applied_amount));
    }
    return obj;
}

double OAIQuote_data_totals_item_interface::getBaseDiscountAmount() const {
    return m_base_discount_amount;
}
void OAIQuote_data_totals_item_interface::setBaseDiscountAmount(const double &base_discount_amount) {
    m_base_discount_amount = base_discount_amount;
    m_base_discount_amount_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_base_discount_amount_Set() const{
    return m_base_discount_amount_isSet;
}

bool OAIQuote_data_totals_item_interface::is_base_discount_amount_Valid() const{
    return m_base_discount_amount_isValid;
}

double OAIQuote_data_totals_item_interface::getBasePrice() const {
    return m_base_price;
}
void OAIQuote_data_totals_item_interface::setBasePrice(const double &base_price) {
    m_base_price = base_price;
    m_base_price_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_base_price_Set() const{
    return m_base_price_isSet;
}

bool OAIQuote_data_totals_item_interface::is_base_price_Valid() const{
    return m_base_price_isValid;
}

double OAIQuote_data_totals_item_interface::getBasePriceInclTax() const {
    return m_base_price_incl_tax;
}
void OAIQuote_data_totals_item_interface::setBasePriceInclTax(const double &base_price_incl_tax) {
    m_base_price_incl_tax = base_price_incl_tax;
    m_base_price_incl_tax_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_base_price_incl_tax_Set() const{
    return m_base_price_incl_tax_isSet;
}

bool OAIQuote_data_totals_item_interface::is_base_price_incl_tax_Valid() const{
    return m_base_price_incl_tax_isValid;
}

double OAIQuote_data_totals_item_interface::getBaseRowTotal() const {
    return m_base_row_total;
}
void OAIQuote_data_totals_item_interface::setBaseRowTotal(const double &base_row_total) {
    m_base_row_total = base_row_total;
    m_base_row_total_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_base_row_total_Set() const{
    return m_base_row_total_isSet;
}

bool OAIQuote_data_totals_item_interface::is_base_row_total_Valid() const{
    return m_base_row_total_isValid;
}

double OAIQuote_data_totals_item_interface::getBaseRowTotalInclTax() const {
    return m_base_row_total_incl_tax;
}
void OAIQuote_data_totals_item_interface::setBaseRowTotalInclTax(const double &base_row_total_incl_tax) {
    m_base_row_total_incl_tax = base_row_total_incl_tax;
    m_base_row_total_incl_tax_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_base_row_total_incl_tax_Set() const{
    return m_base_row_total_incl_tax_isSet;
}

bool OAIQuote_data_totals_item_interface::is_base_row_total_incl_tax_Valid() const{
    return m_base_row_total_incl_tax_isValid;
}

double OAIQuote_data_totals_item_interface::getBaseTaxAmount() const {
    return m_base_tax_amount;
}
void OAIQuote_data_totals_item_interface::setBaseTaxAmount(const double &base_tax_amount) {
    m_base_tax_amount = base_tax_amount;
    m_base_tax_amount_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_base_tax_amount_Set() const{
    return m_base_tax_amount_isSet;
}

bool OAIQuote_data_totals_item_interface::is_base_tax_amount_Valid() const{
    return m_base_tax_amount_isValid;
}

double OAIQuote_data_totals_item_interface::getDiscountAmount() const {
    return m_discount_amount;
}
void OAIQuote_data_totals_item_interface::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAIQuote_data_totals_item_interface::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

double OAIQuote_data_totals_item_interface::getDiscountPercent() const {
    return m_discount_percent;
}
void OAIQuote_data_totals_item_interface::setDiscountPercent(const double &discount_percent) {
    m_discount_percent = discount_percent;
    m_discount_percent_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_discount_percent_Set() const{
    return m_discount_percent_isSet;
}

bool OAIQuote_data_totals_item_interface::is_discount_percent_Valid() const{
    return m_discount_percent_isValid;
}

OAIQuote_data_totals_item_extension_interface OAIQuote_data_totals_item_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIQuote_data_totals_item_interface::setExtensionAttributes(const OAIQuote_data_totals_item_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIQuote_data_totals_item_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAIQuote_data_totals_item_interface::getItemId() const {
    return m_item_id;
}
void OAIQuote_data_totals_item_interface::setItemId(const qint32 &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIQuote_data_totals_item_interface::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAIQuote_data_totals_item_interface::getName() const {
    return m_name;
}
void OAIQuote_data_totals_item_interface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_name_Set() const{
    return m_name_isSet;
}

bool OAIQuote_data_totals_item_interface::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIQuote_data_totals_item_interface::getOptions() const {
    return m_options;
}
void OAIQuote_data_totals_item_interface::setOptions(const QString &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_options_Set() const{
    return m_options_isSet;
}

bool OAIQuote_data_totals_item_interface::is_options_Valid() const{
    return m_options_isValid;
}

double OAIQuote_data_totals_item_interface::getPrice() const {
    return m_price;
}
void OAIQuote_data_totals_item_interface::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_price_Set() const{
    return m_price_isSet;
}

bool OAIQuote_data_totals_item_interface::is_price_Valid() const{
    return m_price_isValid;
}

double OAIQuote_data_totals_item_interface::getPriceInclTax() const {
    return m_price_incl_tax;
}
void OAIQuote_data_totals_item_interface::setPriceInclTax(const double &price_incl_tax) {
    m_price_incl_tax = price_incl_tax;
    m_price_incl_tax_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_price_incl_tax_Set() const{
    return m_price_incl_tax_isSet;
}

bool OAIQuote_data_totals_item_interface::is_price_incl_tax_Valid() const{
    return m_price_incl_tax_isValid;
}

double OAIQuote_data_totals_item_interface::getQty() const {
    return m_qty;
}
void OAIQuote_data_totals_item_interface::setQty(const double &qty) {
    m_qty = qty;
    m_qty_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_qty_Set() const{
    return m_qty_isSet;
}

bool OAIQuote_data_totals_item_interface::is_qty_Valid() const{
    return m_qty_isValid;
}

double OAIQuote_data_totals_item_interface::getRowTotal() const {
    return m_row_total;
}
void OAIQuote_data_totals_item_interface::setRowTotal(const double &row_total) {
    m_row_total = row_total;
    m_row_total_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_row_total_Set() const{
    return m_row_total_isSet;
}

bool OAIQuote_data_totals_item_interface::is_row_total_Valid() const{
    return m_row_total_isValid;
}

double OAIQuote_data_totals_item_interface::getRowTotalInclTax() const {
    return m_row_total_incl_tax;
}
void OAIQuote_data_totals_item_interface::setRowTotalInclTax(const double &row_total_incl_tax) {
    m_row_total_incl_tax = row_total_incl_tax;
    m_row_total_incl_tax_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_row_total_incl_tax_Set() const{
    return m_row_total_incl_tax_isSet;
}

bool OAIQuote_data_totals_item_interface::is_row_total_incl_tax_Valid() const{
    return m_row_total_incl_tax_isValid;
}

double OAIQuote_data_totals_item_interface::getRowTotalWithDiscount() const {
    return m_row_total_with_discount;
}
void OAIQuote_data_totals_item_interface::setRowTotalWithDiscount(const double &row_total_with_discount) {
    m_row_total_with_discount = row_total_with_discount;
    m_row_total_with_discount_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_row_total_with_discount_Set() const{
    return m_row_total_with_discount_isSet;
}

bool OAIQuote_data_totals_item_interface::is_row_total_with_discount_Valid() const{
    return m_row_total_with_discount_isValid;
}

double OAIQuote_data_totals_item_interface::getTaxAmount() const {
    return m_tax_amount;
}
void OAIQuote_data_totals_item_interface::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIQuote_data_totals_item_interface::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

double OAIQuote_data_totals_item_interface::getTaxPercent() const {
    return m_tax_percent;
}
void OAIQuote_data_totals_item_interface::setTaxPercent(const double &tax_percent) {
    m_tax_percent = tax_percent;
    m_tax_percent_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_tax_percent_Set() const{
    return m_tax_percent_isSet;
}

bool OAIQuote_data_totals_item_interface::is_tax_percent_Valid() const{
    return m_tax_percent_isValid;
}

QString OAIQuote_data_totals_item_interface::getWeeeTaxApplied() const {
    return m_weee_tax_applied;
}
void OAIQuote_data_totals_item_interface::setWeeeTaxApplied(const QString &weee_tax_applied) {
    m_weee_tax_applied = weee_tax_applied;
    m_weee_tax_applied_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_weee_tax_applied_Set() const{
    return m_weee_tax_applied_isSet;
}

bool OAIQuote_data_totals_item_interface::is_weee_tax_applied_Valid() const{
    return m_weee_tax_applied_isValid;
}

double OAIQuote_data_totals_item_interface::getWeeeTaxAppliedAmount() const {
    return m_weee_tax_applied_amount;
}
void OAIQuote_data_totals_item_interface::setWeeeTaxAppliedAmount(const double &weee_tax_applied_amount) {
    m_weee_tax_applied_amount = weee_tax_applied_amount;
    m_weee_tax_applied_amount_isSet = true;
}

bool OAIQuote_data_totals_item_interface::is_weee_tax_applied_amount_Set() const{
    return m_weee_tax_applied_amount_isSet;
}

bool OAIQuote_data_totals_item_interface::is_weee_tax_applied_amount_Valid() const{
    return m_weee_tax_applied_amount_isValid;
}

bool OAIQuote_data_totals_item_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_price_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_row_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_row_total_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_total_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_total_with_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weee_tax_applied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weee_tax_applied_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuote_data_totals_item_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_price_isValid && m_base_row_total_isValid && m_item_id_isValid && m_options_isValid && m_price_isValid && m_qty_isValid && m_row_total_isValid && m_weee_tax_applied_isValid && m_weee_tax_applied_amount_isValid && true;
}

} // namespace OpenAPI
