/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICms_data_page_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICms_data_page_interface::OAICms_data_page_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICms_data_page_interface::OAICms_data_page_interface() {
    this->initializeModel();
}

OAICms_data_page_interface::~OAICms_data_page_interface() {}

void OAICms_data_page_interface::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_heading_isSet = false;
    m_content_heading_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_custom_layout_update_xml_isSet = false;
    m_custom_layout_update_xml_isValid = false;

    m_custom_root_template_isSet = false;
    m_custom_root_template_isValid = false;

    m_custom_theme_isSet = false;
    m_custom_theme_isValid = false;

    m_custom_theme_from_isSet = false;
    m_custom_theme_from_isValid = false;

    m_custom_theme_to_isSet = false;
    m_custom_theme_to_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_layout_update_xml_isSet = false;
    m_layout_update_xml_isValid = false;

    m_meta_description_isSet = false;
    m_meta_description_isValid = false;

    m_meta_keywords_isSet = false;
    m_meta_keywords_isValid = false;

    m_meta_title_isSet = false;
    m_meta_title_isValid = false;

    m_page_layout_isSet = false;
    m_page_layout_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICms_data_page_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICms_data_page_interface::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_content_heading_isValid = ::OpenAPI::fromJsonValue(m_content_heading, json[QString("content_heading")]);
    m_content_heading_isSet = !json[QString("content_heading")].isNull() && m_content_heading_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creation_time")]);
    m_creation_time_isSet = !json[QString("creation_time")].isNull() && m_creation_time_isValid;

    m_custom_layout_update_xml_isValid = ::OpenAPI::fromJsonValue(m_custom_layout_update_xml, json[QString("custom_layout_update_xml")]);
    m_custom_layout_update_xml_isSet = !json[QString("custom_layout_update_xml")].isNull() && m_custom_layout_update_xml_isValid;

    m_custom_root_template_isValid = ::OpenAPI::fromJsonValue(m_custom_root_template, json[QString("custom_root_template")]);
    m_custom_root_template_isSet = !json[QString("custom_root_template")].isNull() && m_custom_root_template_isValid;

    m_custom_theme_isValid = ::OpenAPI::fromJsonValue(m_custom_theme, json[QString("custom_theme")]);
    m_custom_theme_isSet = !json[QString("custom_theme")].isNull() && m_custom_theme_isValid;

    m_custom_theme_from_isValid = ::OpenAPI::fromJsonValue(m_custom_theme_from, json[QString("custom_theme_from")]);
    m_custom_theme_from_isSet = !json[QString("custom_theme_from")].isNull() && m_custom_theme_from_isValid;

    m_custom_theme_to_isValid = ::OpenAPI::fromJsonValue(m_custom_theme_to, json[QString("custom_theme_to")]);
    m_custom_theme_to_isSet = !json[QString("custom_theme_to")].isNull() && m_custom_theme_to_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_layout_update_xml_isValid = ::OpenAPI::fromJsonValue(m_layout_update_xml, json[QString("layout_update_xml")]);
    m_layout_update_xml_isSet = !json[QString("layout_update_xml")].isNull() && m_layout_update_xml_isValid;

    m_meta_description_isValid = ::OpenAPI::fromJsonValue(m_meta_description, json[QString("meta_description")]);
    m_meta_description_isSet = !json[QString("meta_description")].isNull() && m_meta_description_isValid;

    m_meta_keywords_isValid = ::OpenAPI::fromJsonValue(m_meta_keywords, json[QString("meta_keywords")]);
    m_meta_keywords_isSet = !json[QString("meta_keywords")].isNull() && m_meta_keywords_isValid;

    m_meta_title_isValid = ::OpenAPI::fromJsonValue(m_meta_title, json[QString("meta_title")]);
    m_meta_title_isSet = !json[QString("meta_title")].isNull() && m_meta_title_isValid;

    m_page_layout_isValid = ::OpenAPI::fromJsonValue(m_page_layout, json[QString("page_layout")]);
    m_page_layout_isSet = !json[QString("page_layout")].isNull() && m_page_layout_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("update_time")]);
    m_update_time_isSet = !json[QString("update_time")].isNull() && m_update_time_isValid;
}

QString OAICms_data_page_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICms_data_page_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_heading_isSet) {
        obj.insert(QString("content_heading"), ::OpenAPI::toJsonValue(m_content_heading));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creation_time"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_custom_layout_update_xml_isSet) {
        obj.insert(QString("custom_layout_update_xml"), ::OpenAPI::toJsonValue(m_custom_layout_update_xml));
    }
    if (m_custom_root_template_isSet) {
        obj.insert(QString("custom_root_template"), ::OpenAPI::toJsonValue(m_custom_root_template));
    }
    if (m_custom_theme_isSet) {
        obj.insert(QString("custom_theme"), ::OpenAPI::toJsonValue(m_custom_theme));
    }
    if (m_custom_theme_from_isSet) {
        obj.insert(QString("custom_theme_from"), ::OpenAPI::toJsonValue(m_custom_theme_from));
    }
    if (m_custom_theme_to_isSet) {
        obj.insert(QString("custom_theme_to"), ::OpenAPI::toJsonValue(m_custom_theme_to));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_layout_update_xml_isSet) {
        obj.insert(QString("layout_update_xml"), ::OpenAPI::toJsonValue(m_layout_update_xml));
    }
    if (m_meta_description_isSet) {
        obj.insert(QString("meta_description"), ::OpenAPI::toJsonValue(m_meta_description));
    }
    if (m_meta_keywords_isSet) {
        obj.insert(QString("meta_keywords"), ::OpenAPI::toJsonValue(m_meta_keywords));
    }
    if (m_meta_title_isSet) {
        obj.insert(QString("meta_title"), ::OpenAPI::toJsonValue(m_meta_title));
    }
    if (m_page_layout_isSet) {
        obj.insert(QString("page_layout"), ::OpenAPI::toJsonValue(m_page_layout));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("update_time"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

bool OAICms_data_page_interface::isActive() const {
    return m_active;
}
void OAICms_data_page_interface::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICms_data_page_interface::is_active_Set() const{
    return m_active_isSet;
}

bool OAICms_data_page_interface::is_active_Valid() const{
    return m_active_isValid;
}

QString OAICms_data_page_interface::getContent() const {
    return m_content;
}
void OAICms_data_page_interface::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAICms_data_page_interface::is_content_Set() const{
    return m_content_isSet;
}

bool OAICms_data_page_interface::is_content_Valid() const{
    return m_content_isValid;
}

QString OAICms_data_page_interface::getContentHeading() const {
    return m_content_heading;
}
void OAICms_data_page_interface::setContentHeading(const QString &content_heading) {
    m_content_heading = content_heading;
    m_content_heading_isSet = true;
}

bool OAICms_data_page_interface::is_content_heading_Set() const{
    return m_content_heading_isSet;
}

bool OAICms_data_page_interface::is_content_heading_Valid() const{
    return m_content_heading_isValid;
}

QString OAICms_data_page_interface::getCreationTime() const {
    return m_creation_time;
}
void OAICms_data_page_interface::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICms_data_page_interface::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICms_data_page_interface::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAICms_data_page_interface::getCustomLayoutUpdateXml() const {
    return m_custom_layout_update_xml;
}
void OAICms_data_page_interface::setCustomLayoutUpdateXml(const QString &custom_layout_update_xml) {
    m_custom_layout_update_xml = custom_layout_update_xml;
    m_custom_layout_update_xml_isSet = true;
}

bool OAICms_data_page_interface::is_custom_layout_update_xml_Set() const{
    return m_custom_layout_update_xml_isSet;
}

bool OAICms_data_page_interface::is_custom_layout_update_xml_Valid() const{
    return m_custom_layout_update_xml_isValid;
}

QString OAICms_data_page_interface::getCustomRootTemplate() const {
    return m_custom_root_template;
}
void OAICms_data_page_interface::setCustomRootTemplate(const QString &custom_root_template) {
    m_custom_root_template = custom_root_template;
    m_custom_root_template_isSet = true;
}

bool OAICms_data_page_interface::is_custom_root_template_Set() const{
    return m_custom_root_template_isSet;
}

bool OAICms_data_page_interface::is_custom_root_template_Valid() const{
    return m_custom_root_template_isValid;
}

QString OAICms_data_page_interface::getCustomTheme() const {
    return m_custom_theme;
}
void OAICms_data_page_interface::setCustomTheme(const QString &custom_theme) {
    m_custom_theme = custom_theme;
    m_custom_theme_isSet = true;
}

bool OAICms_data_page_interface::is_custom_theme_Set() const{
    return m_custom_theme_isSet;
}

bool OAICms_data_page_interface::is_custom_theme_Valid() const{
    return m_custom_theme_isValid;
}

QString OAICms_data_page_interface::getCustomThemeFrom() const {
    return m_custom_theme_from;
}
void OAICms_data_page_interface::setCustomThemeFrom(const QString &custom_theme_from) {
    m_custom_theme_from = custom_theme_from;
    m_custom_theme_from_isSet = true;
}

bool OAICms_data_page_interface::is_custom_theme_from_Set() const{
    return m_custom_theme_from_isSet;
}

bool OAICms_data_page_interface::is_custom_theme_from_Valid() const{
    return m_custom_theme_from_isValid;
}

QString OAICms_data_page_interface::getCustomThemeTo() const {
    return m_custom_theme_to;
}
void OAICms_data_page_interface::setCustomThemeTo(const QString &custom_theme_to) {
    m_custom_theme_to = custom_theme_to;
    m_custom_theme_to_isSet = true;
}

bool OAICms_data_page_interface::is_custom_theme_to_Set() const{
    return m_custom_theme_to_isSet;
}

bool OAICms_data_page_interface::is_custom_theme_to_Valid() const{
    return m_custom_theme_to_isValid;
}

qint32 OAICms_data_page_interface::getId() const {
    return m_id;
}
void OAICms_data_page_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICms_data_page_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAICms_data_page_interface::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICms_data_page_interface::getIdentifier() const {
    return m_identifier;
}
void OAICms_data_page_interface::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAICms_data_page_interface::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAICms_data_page_interface::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAICms_data_page_interface::getLayoutUpdateXml() const {
    return m_layout_update_xml;
}
void OAICms_data_page_interface::setLayoutUpdateXml(const QString &layout_update_xml) {
    m_layout_update_xml = layout_update_xml;
    m_layout_update_xml_isSet = true;
}

bool OAICms_data_page_interface::is_layout_update_xml_Set() const{
    return m_layout_update_xml_isSet;
}

bool OAICms_data_page_interface::is_layout_update_xml_Valid() const{
    return m_layout_update_xml_isValid;
}

QString OAICms_data_page_interface::getMetaDescription() const {
    return m_meta_description;
}
void OAICms_data_page_interface::setMetaDescription(const QString &meta_description) {
    m_meta_description = meta_description;
    m_meta_description_isSet = true;
}

bool OAICms_data_page_interface::is_meta_description_Set() const{
    return m_meta_description_isSet;
}

bool OAICms_data_page_interface::is_meta_description_Valid() const{
    return m_meta_description_isValid;
}

QString OAICms_data_page_interface::getMetaKeywords() const {
    return m_meta_keywords;
}
void OAICms_data_page_interface::setMetaKeywords(const QString &meta_keywords) {
    m_meta_keywords = meta_keywords;
    m_meta_keywords_isSet = true;
}

bool OAICms_data_page_interface::is_meta_keywords_Set() const{
    return m_meta_keywords_isSet;
}

bool OAICms_data_page_interface::is_meta_keywords_Valid() const{
    return m_meta_keywords_isValid;
}

QString OAICms_data_page_interface::getMetaTitle() const {
    return m_meta_title;
}
void OAICms_data_page_interface::setMetaTitle(const QString &meta_title) {
    m_meta_title = meta_title;
    m_meta_title_isSet = true;
}

bool OAICms_data_page_interface::is_meta_title_Set() const{
    return m_meta_title_isSet;
}

bool OAICms_data_page_interface::is_meta_title_Valid() const{
    return m_meta_title_isValid;
}

QString OAICms_data_page_interface::getPageLayout() const {
    return m_page_layout;
}
void OAICms_data_page_interface::setPageLayout(const QString &page_layout) {
    m_page_layout = page_layout;
    m_page_layout_isSet = true;
}

bool OAICms_data_page_interface::is_page_layout_Set() const{
    return m_page_layout_isSet;
}

bool OAICms_data_page_interface::is_page_layout_Valid() const{
    return m_page_layout_isValid;
}

QString OAICms_data_page_interface::getSortOrder() const {
    return m_sort_order;
}
void OAICms_data_page_interface::setSortOrder(const QString &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAICms_data_page_interface::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAICms_data_page_interface::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QString OAICms_data_page_interface::getTitle() const {
    return m_title;
}
void OAICms_data_page_interface::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICms_data_page_interface::is_title_Set() const{
    return m_title_isSet;
}

bool OAICms_data_page_interface::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICms_data_page_interface::getUpdateTime() const {
    return m_update_time;
}
void OAICms_data_page_interface::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICms_data_page_interface::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICms_data_page_interface::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAICms_data_page_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_heading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_layout_update_xml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_root_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_theme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_theme_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_theme_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout_update_xml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_keywords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_layout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICms_data_page_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifier_isValid && true;
}

} // namespace OpenAPI
