/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompany_credit_data_credit_data_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompany_credit_data_credit_data_interface::OAICompany_credit_data_credit_data_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompany_credit_data_credit_data_interface::OAICompany_credit_data_credit_data_interface() {
    this->initializeModel();
}

OAICompany_credit_data_credit_data_interface::~OAICompany_credit_data_credit_data_interface() {}

void OAICompany_credit_data_credit_data_interface::initializeModel() {

    m_available_limit_isSet = false;
    m_available_limit_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_credit_limit_isSet = false;
    m_credit_limit_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_exceed_limit_isSet = false;
    m_exceed_limit_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAICompany_credit_data_credit_data_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompany_credit_data_credit_data_interface::fromJsonObject(QJsonObject json) {

    m_available_limit_isValid = ::OpenAPI::fromJsonValue(m_available_limit, json[QString("available_limit")]);
    m_available_limit_isSet = !json[QString("available_limit")].isNull() && m_available_limit_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("company_id")]);
    m_company_id_isSet = !json[QString("company_id")].isNull() && m_company_id_isValid;

    m_credit_limit_isValid = ::OpenAPI::fromJsonValue(m_credit_limit, json[QString("credit_limit")]);
    m_credit_limit_isSet = !json[QString("credit_limit")].isNull() && m_credit_limit_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_exceed_limit_isValid = ::OpenAPI::fromJsonValue(m_exceed_limit, json[QString("exceed_limit")]);
    m_exceed_limit_isSet = !json[QString("exceed_limit")].isNull() && m_exceed_limit_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAICompany_credit_data_credit_data_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompany_credit_data_credit_data_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_available_limit_isSet) {
        obj.insert(QString("available_limit"), ::OpenAPI::toJsonValue(m_available_limit));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_company_id_isSet) {
        obj.insert(QString("company_id"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_credit_limit_isSet) {
        obj.insert(QString("credit_limit"), ::OpenAPI::toJsonValue(m_credit_limit));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_exceed_limit_isSet) {
        obj.insert(QString("exceed_limit"), ::OpenAPI::toJsonValue(m_exceed_limit));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

double OAICompany_credit_data_credit_data_interface::getAvailableLimit() const {
    return m_available_limit;
}
void OAICompany_credit_data_credit_data_interface::setAvailableLimit(const double &available_limit) {
    m_available_limit = available_limit;
    m_available_limit_isSet = true;
}

bool OAICompany_credit_data_credit_data_interface::is_available_limit_Set() const{
    return m_available_limit_isSet;
}

bool OAICompany_credit_data_credit_data_interface::is_available_limit_Valid() const{
    return m_available_limit_isValid;
}

double OAICompany_credit_data_credit_data_interface::getBalance() const {
    return m_balance;
}
void OAICompany_credit_data_credit_data_interface::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAICompany_credit_data_credit_data_interface::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAICompany_credit_data_credit_data_interface::is_balance_Valid() const{
    return m_balance_isValid;
}

qint32 OAICompany_credit_data_credit_data_interface::getCompanyId() const {
    return m_company_id;
}
void OAICompany_credit_data_credit_data_interface::setCompanyId(const qint32 &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAICompany_credit_data_credit_data_interface::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAICompany_credit_data_credit_data_interface::is_company_id_Valid() const{
    return m_company_id_isValid;
}

double OAICompany_credit_data_credit_data_interface::getCreditLimit() const {
    return m_credit_limit;
}
void OAICompany_credit_data_credit_data_interface::setCreditLimit(const double &credit_limit) {
    m_credit_limit = credit_limit;
    m_credit_limit_isSet = true;
}

bool OAICompany_credit_data_credit_data_interface::is_credit_limit_Set() const{
    return m_credit_limit_isSet;
}

bool OAICompany_credit_data_credit_data_interface::is_credit_limit_Valid() const{
    return m_credit_limit_isValid;
}

QString OAICompany_credit_data_credit_data_interface::getCurrencyCode() const {
    return m_currency_code;
}
void OAICompany_credit_data_credit_data_interface::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAICompany_credit_data_credit_data_interface::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAICompany_credit_data_credit_data_interface::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

bool OAICompany_credit_data_credit_data_interface::isExceedLimit() const {
    return m_exceed_limit;
}
void OAICompany_credit_data_credit_data_interface::setExceedLimit(const bool &exceed_limit) {
    m_exceed_limit = exceed_limit;
    m_exceed_limit_isSet = true;
}

bool OAICompany_credit_data_credit_data_interface::is_exceed_limit_Set() const{
    return m_exceed_limit_isSet;
}

bool OAICompany_credit_data_credit_data_interface::is_exceed_limit_Valid() const{
    return m_exceed_limit_isValid;
}

qint32 OAICompany_credit_data_credit_data_interface::getId() const {
    return m_id;
}
void OAICompany_credit_data_credit_data_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICompany_credit_data_credit_data_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAICompany_credit_data_credit_data_interface::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICompany_credit_data_credit_data_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exceed_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompany_credit_data_credit_data_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_exceed_limit_isValid && true;
}

} // namespace OpenAPI
