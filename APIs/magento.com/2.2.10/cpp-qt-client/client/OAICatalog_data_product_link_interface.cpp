/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog_data_product_link_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog_data_product_link_interface::OAICatalog_data_product_link_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog_data_product_link_interface::OAICatalog_data_product_link_interface() {
    this->initializeModel();
}

OAICatalog_data_product_link_interface::~OAICatalog_data_product_link_interface() {}

void OAICatalog_data_product_link_interface::initializeModel() {

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_link_type_isSet = false;
    m_link_type_isValid = false;

    m_linked_product_sku_isSet = false;
    m_linked_product_sku_isValid = false;

    m_linked_product_type_isSet = false;
    m_linked_product_type_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;
}

void OAICatalog_data_product_link_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog_data_product_link_interface::fromJsonObject(QJsonObject json) {

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_link_type_isValid = ::OpenAPI::fromJsonValue(m_link_type, json[QString("link_type")]);
    m_link_type_isSet = !json[QString("link_type")].isNull() && m_link_type_isValid;

    m_linked_product_sku_isValid = ::OpenAPI::fromJsonValue(m_linked_product_sku, json[QString("linked_product_sku")]);
    m_linked_product_sku_isSet = !json[QString("linked_product_sku")].isNull() && m_linked_product_sku_isValid;

    m_linked_product_type_isValid = ::OpenAPI::fromJsonValue(m_linked_product_type, json[QString("linked_product_type")]);
    m_linked_product_type_isSet = !json[QString("linked_product_type")].isNull() && m_linked_product_type_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;
}

QString OAICatalog_data_product_link_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog_data_product_link_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_link_type_isSet) {
        obj.insert(QString("link_type"), ::OpenAPI::toJsonValue(m_link_type));
    }
    if (m_linked_product_sku_isSet) {
        obj.insert(QString("linked_product_sku"), ::OpenAPI::toJsonValue(m_linked_product_sku));
    }
    if (m_linked_product_type_isSet) {
        obj.insert(QString("linked_product_type"), ::OpenAPI::toJsonValue(m_linked_product_type));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    return obj;
}

OAICatalog_data_product_link_extension_interface OAICatalog_data_product_link_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAICatalog_data_product_link_interface::setExtensionAttributes(const OAICatalog_data_product_link_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAICatalog_data_product_link_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAICatalog_data_product_link_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAICatalog_data_product_link_interface::getLinkType() const {
    return m_link_type;
}
void OAICatalog_data_product_link_interface::setLinkType(const QString &link_type) {
    m_link_type = link_type;
    m_link_type_isSet = true;
}

bool OAICatalog_data_product_link_interface::is_link_type_Set() const{
    return m_link_type_isSet;
}

bool OAICatalog_data_product_link_interface::is_link_type_Valid() const{
    return m_link_type_isValid;
}

QString OAICatalog_data_product_link_interface::getLinkedProductSku() const {
    return m_linked_product_sku;
}
void OAICatalog_data_product_link_interface::setLinkedProductSku(const QString &linked_product_sku) {
    m_linked_product_sku = linked_product_sku;
    m_linked_product_sku_isSet = true;
}

bool OAICatalog_data_product_link_interface::is_linked_product_sku_Set() const{
    return m_linked_product_sku_isSet;
}

bool OAICatalog_data_product_link_interface::is_linked_product_sku_Valid() const{
    return m_linked_product_sku_isValid;
}

QString OAICatalog_data_product_link_interface::getLinkedProductType() const {
    return m_linked_product_type;
}
void OAICatalog_data_product_link_interface::setLinkedProductType(const QString &linked_product_type) {
    m_linked_product_type = linked_product_type;
    m_linked_product_type_isSet = true;
}

bool OAICatalog_data_product_link_interface::is_linked_product_type_Set() const{
    return m_linked_product_type_isSet;
}

bool OAICatalog_data_product_link_interface::is_linked_product_type_Valid() const{
    return m_linked_product_type_isValid;
}

qint32 OAICatalog_data_product_link_interface::getPosition() const {
    return m_position;
}
void OAICatalog_data_product_link_interface::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAICatalog_data_product_link_interface::is_position_Set() const{
    return m_position_isSet;
}

bool OAICatalog_data_product_link_interface::is_position_Valid() const{
    return m_position_isValid;
}

QString OAICatalog_data_product_link_interface::getSku() const {
    return m_sku;
}
void OAICatalog_data_product_link_interface::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAICatalog_data_product_link_interface::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAICatalog_data_product_link_interface::is_sku_Valid() const{
    return m_sku_isValid;
}

bool OAICatalog_data_product_link_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_product_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog_data_product_link_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_link_type_isValid && m_linked_product_sku_isValid && m_linked_product_type_isValid && m_position_isValid && m_sku_isValid && true;
}

} // namespace OpenAPI
