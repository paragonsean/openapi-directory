/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuote_data_total_segment_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuote_data_total_segment_interface::OAIQuote_data_total_segment_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuote_data_total_segment_interface::OAIQuote_data_total_segment_interface() {
    this->initializeModel();
}

OAIQuote_data_total_segment_interface::~OAIQuote_data_total_segment_interface() {}

void OAIQuote_data_total_segment_interface::initializeModel() {

    m_area_isSet = false;
    m_area_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIQuote_data_total_segment_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuote_data_total_segment_interface::fromJsonObject(QJsonObject json) {

    m_area_isValid = ::OpenAPI::fromJsonValue(m_area, json[QString("area")]);
    m_area_isSet = !json[QString("area")].isNull() && m_area_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIQuote_data_total_segment_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuote_data_total_segment_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_area_isSet) {
        obj.insert(QString("area"), ::OpenAPI::toJsonValue(m_area));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIQuote_data_total_segment_interface::getArea() const {
    return m_area;
}
void OAIQuote_data_total_segment_interface::setArea(const QString &area) {
    m_area = area;
    m_area_isSet = true;
}

bool OAIQuote_data_total_segment_interface::is_area_Set() const{
    return m_area_isSet;
}

bool OAIQuote_data_total_segment_interface::is_area_Valid() const{
    return m_area_isValid;
}

QString OAIQuote_data_total_segment_interface::getCode() const {
    return m_code;
}
void OAIQuote_data_total_segment_interface::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIQuote_data_total_segment_interface::is_code_Set() const{
    return m_code_isSet;
}

bool OAIQuote_data_total_segment_interface::is_code_Valid() const{
    return m_code_isValid;
}

OAIQuote_data_total_segment_extension_interface OAIQuote_data_total_segment_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIQuote_data_total_segment_interface::setExtensionAttributes(const OAIQuote_data_total_segment_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIQuote_data_total_segment_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIQuote_data_total_segment_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAIQuote_data_total_segment_interface::getTitle() const {
    return m_title;
}
void OAIQuote_data_total_segment_interface::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIQuote_data_total_segment_interface::is_title_Set() const{
    return m_title_isSet;
}

bool OAIQuote_data_total_segment_interface::is_title_Valid() const{
    return m_title_isValid;
}

double OAIQuote_data_total_segment_interface::getValue() const {
    return m_value;
}
void OAIQuote_data_total_segment_interface::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIQuote_data_total_segment_interface::is_value_Set() const{
    return m_value_isSet;
}

bool OAIQuote_data_total_segment_interface::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIQuote_data_total_segment_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuote_data_total_segment_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
