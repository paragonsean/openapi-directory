/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINegotiable_quote_data_negotiable_quote_item_totals_interface.h
 *
 * Extension attribute for quote item totals model.
 */

#ifndef OAINegotiable_quote_data_negotiable_quote_item_totals_interface_H
#define OAINegotiable_quote_data_negotiable_quote_item_totals_interface_H

#include <QJsonObject>

#include "OAIObject.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINegotiable_quote_data_negotiable_quote_item_totals_interface : public OAIObject {
public:
    OAINegotiable_quote_data_negotiable_quote_item_totals_interface();
    OAINegotiable_quote_data_negotiable_quote_item_totals_interface(QString json);
    ~OAINegotiable_quote_data_negotiable_quote_item_totals_interface() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getBaseCartPrice() const;
    void setBaseCartPrice(const double &base_cart_price);
    bool is_base_cart_price_Set() const;
    bool is_base_cart_price_Valid() const;

    double getBaseCartPriceInclTax() const;
    void setBaseCartPriceInclTax(const double &base_cart_price_incl_tax);
    bool is_base_cart_price_incl_tax_Set() const;
    bool is_base_cart_price_incl_tax_Valid() const;

    double getBaseCartTax() const;
    void setBaseCartTax(const double &base_cart_tax);
    bool is_base_cart_tax_Set() const;
    bool is_base_cart_tax_Valid() const;

    double getBaseCatalogPrice() const;
    void setBaseCatalogPrice(const double &base_catalog_price);
    bool is_base_catalog_price_Set() const;
    bool is_base_catalog_price_Valid() const;

    double getBaseCatalogPriceInclTax() const;
    void setBaseCatalogPriceInclTax(const double &base_catalog_price_incl_tax);
    bool is_base_catalog_price_incl_tax_Set() const;
    bool is_base_catalog_price_incl_tax_Valid() const;

    double getCartPrice() const;
    void setCartPrice(const double &cart_price);
    bool is_cart_price_Set() const;
    bool is_cart_price_Valid() const;

    double getCartPriceInclTax() const;
    void setCartPriceInclTax(const double &cart_price_incl_tax);
    bool is_cart_price_incl_tax_Set() const;
    bool is_cart_price_incl_tax_Valid() const;

    double getCartTax() const;
    void setCartTax(const double &cart_tax);
    bool is_cart_tax_Set() const;
    bool is_cart_tax_Valid() const;

    double getCatalogPrice() const;
    void setCatalogPrice(const double &catalog_price);
    bool is_catalog_price_Set() const;
    bool is_catalog_price_Valid() const;

    double getCatalogPriceInclTax() const;
    void setCatalogPriceInclTax(const double &catalog_price_incl_tax);
    bool is_catalog_price_incl_tax_Set() const;
    bool is_catalog_price_incl_tax_Valid() const;

    double getCost() const;
    void setCost(const double &cost);
    bool is_cost_Set() const;
    bool is_cost_Valid() const;

    OAIObject getExtensionAttributes() const;
    void setExtensionAttributes(const OAIObject &extension_attributes);
    bool is_extension_attributes_Set() const;
    bool is_extension_attributes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_base_cart_price;
    bool m_base_cart_price_isSet;
    bool m_base_cart_price_isValid;

    double m_base_cart_price_incl_tax;
    bool m_base_cart_price_incl_tax_isSet;
    bool m_base_cart_price_incl_tax_isValid;

    double m_base_cart_tax;
    bool m_base_cart_tax_isSet;
    bool m_base_cart_tax_isValid;

    double m_base_catalog_price;
    bool m_base_catalog_price_isSet;
    bool m_base_catalog_price_isValid;

    double m_base_catalog_price_incl_tax;
    bool m_base_catalog_price_incl_tax_isSet;
    bool m_base_catalog_price_incl_tax_isValid;

    double m_cart_price;
    bool m_cart_price_isSet;
    bool m_cart_price_isValid;

    double m_cart_price_incl_tax;
    bool m_cart_price_incl_tax_isSet;
    bool m_cart_price_incl_tax_isValid;

    double m_cart_tax;
    bool m_cart_tax_isSet;
    bool m_cart_tax_isValid;

    double m_catalog_price;
    bool m_catalog_price_isSet;
    bool m_catalog_price_isValid;

    double m_catalog_price_incl_tax;
    bool m_catalog_price_incl_tax_isSet;
    bool m_catalog_price_incl_tax_isValid;

    double m_cost;
    bool m_cost_isSet;
    bool m_cost_isValid;

    OAIObject m_extension_attributes;
    bool m_extension_attributes_isSet;
    bool m_extension_attributes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINegotiable_quote_data_negotiable_quote_item_totals_interface)

#endif // OAINegotiable_quote_data_negotiable_quote_item_totals_interface_H
