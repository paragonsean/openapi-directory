/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog_data_category_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog_data_category_interface::OAICatalog_data_category_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog_data_category_interface::OAICatalog_data_category_interface() {
    this->initializeModel();
}

OAICatalog_data_category_interface::~OAICatalog_data_category_interface() {}

void OAICatalog_data_category_interface::initializeModel() {

    m_available_sort_by_isSet = false;
    m_available_sort_by_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_attributes_isSet = false;
    m_custom_attributes_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_include_in_menu_isSet = false;
    m_include_in_menu_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAICatalog_data_category_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog_data_category_interface::fromJsonObject(QJsonObject json) {

    m_available_sort_by_isValid = ::OpenAPI::fromJsonValue(m_available_sort_by, json[QString("available_sort_by")]);
    m_available_sort_by_isSet = !json[QString("available_sort_by")].isNull() && m_available_sort_by_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_custom_attributes_isValid = ::OpenAPI::fromJsonValue(m_custom_attributes, json[QString("custom_attributes")]);
    m_custom_attributes_isSet = !json[QString("custom_attributes")].isNull() && m_custom_attributes_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_include_in_menu_isValid = ::OpenAPI::fromJsonValue(m_include_in_menu, json[QString("include_in_menu")]);
    m_include_in_menu_isSet = !json[QString("include_in_menu")].isNull() && m_include_in_menu_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAICatalog_data_category_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog_data_category_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_available_sort_by.size() > 0) {
        obj.insert(QString("available_sort_by"), ::OpenAPI::toJsonValue(m_available_sort_by));
    }
    if (m_children_isSet) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_attributes.size() > 0) {
        obj.insert(QString("custom_attributes"), ::OpenAPI::toJsonValue(m_custom_attributes));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_include_in_menu_isSet) {
        obj.insert(QString("include_in_menu"), ::OpenAPI::toJsonValue(m_include_in_menu));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QList<QString> OAICatalog_data_category_interface::getAvailableSortBy() const {
    return m_available_sort_by;
}
void OAICatalog_data_category_interface::setAvailableSortBy(const QList<QString> &available_sort_by) {
    m_available_sort_by = available_sort_by;
    m_available_sort_by_isSet = true;
}

bool OAICatalog_data_category_interface::is_available_sort_by_Set() const{
    return m_available_sort_by_isSet;
}

bool OAICatalog_data_category_interface::is_available_sort_by_Valid() const{
    return m_available_sort_by_isValid;
}

QString OAICatalog_data_category_interface::getChildren() const {
    return m_children;
}
void OAICatalog_data_category_interface::setChildren(const QString &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAICatalog_data_category_interface::is_children_Set() const{
    return m_children_isSet;
}

bool OAICatalog_data_category_interface::is_children_Valid() const{
    return m_children_isValid;
}

QString OAICatalog_data_category_interface::getCreatedAt() const {
    return m_created_at;
}
void OAICatalog_data_category_interface::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICatalog_data_category_interface::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICatalog_data_category_interface::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIFramework_attribute_interface> OAICatalog_data_category_interface::getCustomAttributes() const {
    return m_custom_attributes;
}
void OAICatalog_data_category_interface::setCustomAttributes(const QList<OAIFramework_attribute_interface> &custom_attributes) {
    m_custom_attributes = custom_attributes;
    m_custom_attributes_isSet = true;
}

bool OAICatalog_data_category_interface::is_custom_attributes_Set() const{
    return m_custom_attributes_isSet;
}

bool OAICatalog_data_category_interface::is_custom_attributes_Valid() const{
    return m_custom_attributes_isValid;
}

OAIObject OAICatalog_data_category_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAICatalog_data_category_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAICatalog_data_category_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAICatalog_data_category_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAICatalog_data_category_interface::getId() const {
    return m_id;
}
void OAICatalog_data_category_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICatalog_data_category_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAICatalog_data_category_interface::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICatalog_data_category_interface::isIncludeInMenu() const {
    return m_include_in_menu;
}
void OAICatalog_data_category_interface::setIncludeInMenu(const bool &include_in_menu) {
    m_include_in_menu = include_in_menu;
    m_include_in_menu_isSet = true;
}

bool OAICatalog_data_category_interface::is_include_in_menu_Set() const{
    return m_include_in_menu_isSet;
}

bool OAICatalog_data_category_interface::is_include_in_menu_Valid() const{
    return m_include_in_menu_isValid;
}

bool OAICatalog_data_category_interface::isIsActive() const {
    return m_is_active;
}
void OAICatalog_data_category_interface::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAICatalog_data_category_interface::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAICatalog_data_category_interface::is_is_active_Valid() const{
    return m_is_active_isValid;
}

qint32 OAICatalog_data_category_interface::getLevel() const {
    return m_level;
}
void OAICatalog_data_category_interface::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAICatalog_data_category_interface::is_level_Set() const{
    return m_level_isSet;
}

bool OAICatalog_data_category_interface::is_level_Valid() const{
    return m_level_isValid;
}

QString OAICatalog_data_category_interface::getName() const {
    return m_name;
}
void OAICatalog_data_category_interface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalog_data_category_interface::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalog_data_category_interface::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICatalog_data_category_interface::getParentId() const {
    return m_parent_id;
}
void OAICatalog_data_category_interface::setParentId(const qint32 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAICatalog_data_category_interface::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAICatalog_data_category_interface::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAICatalog_data_category_interface::getPath() const {
    return m_path;
}
void OAICatalog_data_category_interface::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAICatalog_data_category_interface::is_path_Set() const{
    return m_path_isSet;
}

bool OAICatalog_data_category_interface::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAICatalog_data_category_interface::getPosition() const {
    return m_position;
}
void OAICatalog_data_category_interface::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAICatalog_data_category_interface::is_position_Set() const{
    return m_position_isSet;
}

bool OAICatalog_data_category_interface::is_position_Valid() const{
    return m_position_isValid;
}

QString OAICatalog_data_category_interface::getUpdatedAt() const {
    return m_updated_at;
}
void OAICatalog_data_category_interface::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICatalog_data_category_interface::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICatalog_data_category_interface::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAICatalog_data_category_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_sort_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_in_menu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog_data_category_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
