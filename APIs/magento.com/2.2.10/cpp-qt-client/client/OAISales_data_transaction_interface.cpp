/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISales_data_transaction_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISales_data_transaction_interface::OAISales_data_transaction_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISales_data_transaction_interface::OAISales_data_transaction_interface() {
    this->initializeModel();
}

OAISales_data_transaction_interface::~OAISales_data_transaction_interface() {}

void OAISales_data_transaction_interface::initializeModel() {

    m_additional_information_isSet = false;
    m_additional_information_isValid = false;

    m_child_transactions_isSet = false;
    m_child_transactions_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_is_closed_isSet = false;
    m_is_closed_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_parent_txn_id_isSet = false;
    m_parent_txn_id_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_txn_id_isSet = false;
    m_txn_id_isValid = false;

    m_txn_type_isSet = false;
    m_txn_type_isValid = false;
}

void OAISales_data_transaction_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISales_data_transaction_interface::fromJsonObject(QJsonObject json) {

    m_additional_information_isValid = ::OpenAPI::fromJsonValue(m_additional_information, json[QString("additional_information")]);
    m_additional_information_isSet = !json[QString("additional_information")].isNull() && m_additional_information_isValid;

    m_child_transactions_isValid = ::OpenAPI::fromJsonValue(m_child_transactions, json[QString("child_transactions")]);
    m_child_transactions_isSet = !json[QString("child_transactions")].isNull() && m_child_transactions_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_is_closed_isValid = ::OpenAPI::fromJsonValue(m_is_closed, json[QString("is_closed")]);
    m_is_closed_isSet = !json[QString("is_closed")].isNull() && m_is_closed_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_parent_txn_id_isValid = ::OpenAPI::fromJsonValue(m_parent_txn_id, json[QString("parent_txn_id")]);
    m_parent_txn_id_isSet = !json[QString("parent_txn_id")].isNull() && m_parent_txn_id_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("payment_id")]);
    m_payment_id_isSet = !json[QString("payment_id")].isNull() && m_payment_id_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;

    m_txn_id_isValid = ::OpenAPI::fromJsonValue(m_txn_id, json[QString("txn_id")]);
    m_txn_id_isSet = !json[QString("txn_id")].isNull() && m_txn_id_isValid;

    m_txn_type_isValid = ::OpenAPI::fromJsonValue(m_txn_type, json[QString("txn_type")]);
    m_txn_type_isSet = !json[QString("txn_type")].isNull() && m_txn_type_isValid;
}

QString OAISales_data_transaction_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISales_data_transaction_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_information.size() > 0) {
        obj.insert(QString("additional_information"), ::OpenAPI::toJsonValue(m_additional_information));
    }
    if (m_child_transactions.size() > 0) {
        obj.insert(QString("child_transactions"), ::OpenAPI::toJsonValue(m_child_transactions));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_is_closed_isSet) {
        obj.insert(QString("is_closed"), ::OpenAPI::toJsonValue(m_is_closed));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_parent_txn_id_isSet) {
        obj.insert(QString("parent_txn_id"), ::OpenAPI::toJsonValue(m_parent_txn_id));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("payment_id"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_txn_id_isSet) {
        obj.insert(QString("txn_id"), ::OpenAPI::toJsonValue(m_txn_id));
    }
    if (m_txn_type_isSet) {
        obj.insert(QString("txn_type"), ::OpenAPI::toJsonValue(m_txn_type));
    }
    return obj;
}

QList<QString> OAISales_data_transaction_interface::getAdditionalInformation() const {
    return m_additional_information;
}
void OAISales_data_transaction_interface::setAdditionalInformation(const QList<QString> &additional_information) {
    m_additional_information = additional_information;
    m_additional_information_isSet = true;
}

bool OAISales_data_transaction_interface::is_additional_information_Set() const{
    return m_additional_information_isSet;
}

bool OAISales_data_transaction_interface::is_additional_information_Valid() const{
    return m_additional_information_isValid;
}

QList<OAISales_data_transaction_interface> OAISales_data_transaction_interface::getChildTransactions() const {
    return m_child_transactions;
}
void OAISales_data_transaction_interface::setChildTransactions(const QList<OAISales_data_transaction_interface> &child_transactions) {
    m_child_transactions = child_transactions;
    m_child_transactions_isSet = true;
}

bool OAISales_data_transaction_interface::is_child_transactions_Set() const{
    return m_child_transactions_isSet;
}

bool OAISales_data_transaction_interface::is_child_transactions_Valid() const{
    return m_child_transactions_isValid;
}

QString OAISales_data_transaction_interface::getCreatedAt() const {
    return m_created_at;
}
void OAISales_data_transaction_interface::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISales_data_transaction_interface::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISales_data_transaction_interface::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIObject OAISales_data_transaction_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAISales_data_transaction_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAISales_data_transaction_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAISales_data_transaction_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAISales_data_transaction_interface::getIsClosed() const {
    return m_is_closed;
}
void OAISales_data_transaction_interface::setIsClosed(const qint32 &is_closed) {
    m_is_closed = is_closed;
    m_is_closed_isSet = true;
}

bool OAISales_data_transaction_interface::is_is_closed_Set() const{
    return m_is_closed_isSet;
}

bool OAISales_data_transaction_interface::is_is_closed_Valid() const{
    return m_is_closed_isValid;
}

qint32 OAISales_data_transaction_interface::getOrderId() const {
    return m_order_id;
}
void OAISales_data_transaction_interface::setOrderId(const qint32 &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAISales_data_transaction_interface::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAISales_data_transaction_interface::is_order_id_Valid() const{
    return m_order_id_isValid;
}

qint32 OAISales_data_transaction_interface::getParentId() const {
    return m_parent_id;
}
void OAISales_data_transaction_interface::setParentId(const qint32 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAISales_data_transaction_interface::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAISales_data_transaction_interface::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAISales_data_transaction_interface::getParentTxnId() const {
    return m_parent_txn_id;
}
void OAISales_data_transaction_interface::setParentTxnId(const QString &parent_txn_id) {
    m_parent_txn_id = parent_txn_id;
    m_parent_txn_id_isSet = true;
}

bool OAISales_data_transaction_interface::is_parent_txn_id_Set() const{
    return m_parent_txn_id_isSet;
}

bool OAISales_data_transaction_interface::is_parent_txn_id_Valid() const{
    return m_parent_txn_id_isValid;
}

qint32 OAISales_data_transaction_interface::getPaymentId() const {
    return m_payment_id;
}
void OAISales_data_transaction_interface::setPaymentId(const qint32 &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAISales_data_transaction_interface::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAISales_data_transaction_interface::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

qint32 OAISales_data_transaction_interface::getTransactionId() const {
    return m_transaction_id;
}
void OAISales_data_transaction_interface::setTransactionId(const qint32 &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAISales_data_transaction_interface::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAISales_data_transaction_interface::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAISales_data_transaction_interface::getTxnId() const {
    return m_txn_id;
}
void OAISales_data_transaction_interface::setTxnId(const QString &txn_id) {
    m_txn_id = txn_id;
    m_txn_id_isSet = true;
}

bool OAISales_data_transaction_interface::is_txn_id_Set() const{
    return m_txn_id_isSet;
}

bool OAISales_data_transaction_interface::is_txn_id_Valid() const{
    return m_txn_id_isValid;
}

QString OAISales_data_transaction_interface::getTxnType() const {
    return m_txn_type;
}
void OAISales_data_transaction_interface::setTxnType(const QString &txn_type) {
    m_txn_type = txn_type;
    m_txn_type_isSet = true;
}

bool OAISales_data_transaction_interface::is_txn_type_Set() const{
    return m_txn_type_isSet;
}

bool OAISales_data_transaction_interface::is_txn_type_Valid() const{
    return m_txn_type_isValid;
}

bool OAISales_data_transaction_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_information.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_txn_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txn_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txn_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISales_data_transaction_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_child_transactions_isValid && m_created_at_isValid && m_is_closed_isValid && m_order_id_isValid && m_parent_txn_id_isValid && m_payment_id_isValid && m_transaction_id_isValid && m_txn_id_isValid && m_txn_type_isValid && true;
}

} // namespace OpenAPI
