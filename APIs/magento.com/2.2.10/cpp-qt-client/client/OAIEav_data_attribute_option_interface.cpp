/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEav_data_attribute_option_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEav_data_attribute_option_interface::OAIEav_data_attribute_option_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEav_data_attribute_option_interface::OAIEav_data_attribute_option_interface() {
    this->initializeModel();
}

OAIEav_data_attribute_option_interface::~OAIEav_data_attribute_option_interface() {}

void OAIEav_data_attribute_option_interface::initializeModel() {

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_store_labels_isSet = false;
    m_store_labels_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIEav_data_attribute_option_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEav_data_attribute_option_interface::fromJsonObject(QJsonObject json) {

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("is_default")]);
    m_is_default_isSet = !json[QString("is_default")].isNull() && m_is_default_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_store_labels_isValid = ::OpenAPI::fromJsonValue(m_store_labels, json[QString("store_labels")]);
    m_store_labels_isSet = !json[QString("store_labels")].isNull() && m_store_labels_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIEav_data_attribute_option_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEav_data_attribute_option_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_is_default_isSet) {
        obj.insert(QString("is_default"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_store_labels.size() > 0) {
        obj.insert(QString("store_labels"), ::OpenAPI::toJsonValue(m_store_labels));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

bool OAIEav_data_attribute_option_interface::isIsDefault() const {
    return m_is_default;
}
void OAIEav_data_attribute_option_interface::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIEav_data_attribute_option_interface::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIEav_data_attribute_option_interface::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QString OAIEav_data_attribute_option_interface::getLabel() const {
    return m_label;
}
void OAIEav_data_attribute_option_interface::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIEav_data_attribute_option_interface::is_label_Set() const{
    return m_label_isSet;
}

bool OAIEav_data_attribute_option_interface::is_label_Valid() const{
    return m_label_isValid;
}

qint32 OAIEav_data_attribute_option_interface::getSortOrder() const {
    return m_sort_order;
}
void OAIEav_data_attribute_option_interface::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIEav_data_attribute_option_interface::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIEav_data_attribute_option_interface::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QList<OAIEav_data_attribute_option_label_interface> OAIEav_data_attribute_option_interface::getStoreLabels() const {
    return m_store_labels;
}
void OAIEav_data_attribute_option_interface::setStoreLabels(const QList<OAIEav_data_attribute_option_label_interface> &store_labels) {
    m_store_labels = store_labels;
    m_store_labels_isSet = true;
}

bool OAIEav_data_attribute_option_interface::is_store_labels_Set() const{
    return m_store_labels_isSet;
}

bool OAIEav_data_attribute_option_interface::is_store_labels_Valid() const{
    return m_store_labels_isValid;
}

QString OAIEav_data_attribute_option_interface::getValue() const {
    return m_value;
}
void OAIEav_data_attribute_option_interface::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIEav_data_attribute_option_interface::is_value_Set() const{
    return m_value_isSet;
}

bool OAIEav_data_attribute_option_interface::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIEav_data_attribute_option_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEav_data_attribute_option_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_label_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
