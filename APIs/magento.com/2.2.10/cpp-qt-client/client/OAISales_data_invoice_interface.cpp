/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISales_data_invoice_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISales_data_invoice_interface::OAISales_data_invoice_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISales_data_invoice_interface::OAISales_data_invoice_interface() {
    this->initializeModel();
}

OAISales_data_invoice_interface::~OAISales_data_invoice_interface() {}

void OAISales_data_invoice_interface::initializeModel() {

    m_base_currency_code_isSet = false;
    m_base_currency_code_isValid = false;

    m_base_discount_amount_isSet = false;
    m_base_discount_amount_isValid = false;

    m_base_discount_tax_compensation_amount_isSet = false;
    m_base_discount_tax_compensation_amount_isValid = false;

    m_base_grand_total_isSet = false;
    m_base_grand_total_isValid = false;

    m_base_shipping_amount_isSet = false;
    m_base_shipping_amount_isValid = false;

    m_base_shipping_discount_tax_compensation_amnt_isSet = false;
    m_base_shipping_discount_tax_compensation_amnt_isValid = false;

    m_base_shipping_incl_tax_isSet = false;
    m_base_shipping_incl_tax_isValid = false;

    m_base_shipping_tax_amount_isSet = false;
    m_base_shipping_tax_amount_isValid = false;

    m_base_subtotal_isSet = false;
    m_base_subtotal_isValid = false;

    m_base_subtotal_incl_tax_isSet = false;
    m_base_subtotal_incl_tax_isValid = false;

    m_base_tax_amount_isSet = false;
    m_base_tax_amount_isValid = false;

    m_base_to_global_rate_isSet = false;
    m_base_to_global_rate_isValid = false;

    m_base_to_order_rate_isSet = false;
    m_base_to_order_rate_isValid = false;

    m_base_total_refunded_isSet = false;
    m_base_total_refunded_isValid = false;

    m_billing_address_id_isSet = false;
    m_billing_address_id_isValid = false;

    m_can_void_flag_isSet = false;
    m_can_void_flag_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_discount_amount_isSet = false;
    m_discount_amount_isValid = false;

    m_discount_description_isSet = false;
    m_discount_description_isValid = false;

    m_discount_tax_compensation_amount_isSet = false;
    m_discount_tax_compensation_amount_isValid = false;

    m_email_sent_isSet = false;
    m_email_sent_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_global_currency_code_isSet = false;
    m_global_currency_code_isValid = false;

    m_grand_total_isSet = false;
    m_grand_total_isValid = false;

    m_increment_id_isSet = false;
    m_increment_id_isValid = false;

    m_is_used_for_refund_isSet = false;
    m_is_used_for_refund_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_order_currency_code_isSet = false;
    m_order_currency_code_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_shipping_address_id_isSet = false;
    m_shipping_address_id_isValid = false;

    m_shipping_amount_isSet = false;
    m_shipping_amount_isValid = false;

    m_shipping_discount_tax_compensation_amount_isSet = false;
    m_shipping_discount_tax_compensation_amount_isValid = false;

    m_shipping_incl_tax_isSet = false;
    m_shipping_incl_tax_isValid = false;

    m_shipping_tax_amount_isSet = false;
    m_shipping_tax_amount_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_store_currency_code_isSet = false;
    m_store_currency_code_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_store_to_base_rate_isSet = false;
    m_store_to_base_rate_isValid = false;

    m_store_to_order_rate_isSet = false;
    m_store_to_order_rate_isValid = false;

    m_subtotal_isSet = false;
    m_subtotal_isValid = false;

    m_subtotal_incl_tax_isSet = false;
    m_subtotal_incl_tax_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_total_qty_isSet = false;
    m_total_qty_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAISales_data_invoice_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISales_data_invoice_interface::fromJsonObject(QJsonObject json) {

    m_base_currency_code_isValid = ::OpenAPI::fromJsonValue(m_base_currency_code, json[QString("base_currency_code")]);
    m_base_currency_code_isSet = !json[QString("base_currency_code")].isNull() && m_base_currency_code_isValid;

    m_base_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_base_discount_amount, json[QString("base_discount_amount")]);
    m_base_discount_amount_isSet = !json[QString("base_discount_amount")].isNull() && m_base_discount_amount_isValid;

    m_base_discount_tax_compensation_amount_isValid = ::OpenAPI::fromJsonValue(m_base_discount_tax_compensation_amount, json[QString("base_discount_tax_compensation_amount")]);
    m_base_discount_tax_compensation_amount_isSet = !json[QString("base_discount_tax_compensation_amount")].isNull() && m_base_discount_tax_compensation_amount_isValid;

    m_base_grand_total_isValid = ::OpenAPI::fromJsonValue(m_base_grand_total, json[QString("base_grand_total")]);
    m_base_grand_total_isSet = !json[QString("base_grand_total")].isNull() && m_base_grand_total_isValid;

    m_base_shipping_amount_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_amount, json[QString("base_shipping_amount")]);
    m_base_shipping_amount_isSet = !json[QString("base_shipping_amount")].isNull() && m_base_shipping_amount_isValid;

    m_base_shipping_discount_tax_compensation_amnt_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_discount_tax_compensation_amnt, json[QString("base_shipping_discount_tax_compensation_amnt")]);
    m_base_shipping_discount_tax_compensation_amnt_isSet = !json[QString("base_shipping_discount_tax_compensation_amnt")].isNull() && m_base_shipping_discount_tax_compensation_amnt_isValid;

    m_base_shipping_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_incl_tax, json[QString("base_shipping_incl_tax")]);
    m_base_shipping_incl_tax_isSet = !json[QString("base_shipping_incl_tax")].isNull() && m_base_shipping_incl_tax_isValid;

    m_base_shipping_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_base_shipping_tax_amount, json[QString("base_shipping_tax_amount")]);
    m_base_shipping_tax_amount_isSet = !json[QString("base_shipping_tax_amount")].isNull() && m_base_shipping_tax_amount_isValid;

    m_base_subtotal_isValid = ::OpenAPI::fromJsonValue(m_base_subtotal, json[QString("base_subtotal")]);
    m_base_subtotal_isSet = !json[QString("base_subtotal")].isNull() && m_base_subtotal_isValid;

    m_base_subtotal_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_base_subtotal_incl_tax, json[QString("base_subtotal_incl_tax")]);
    m_base_subtotal_incl_tax_isSet = !json[QString("base_subtotal_incl_tax")].isNull() && m_base_subtotal_incl_tax_isValid;

    m_base_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_base_tax_amount, json[QString("base_tax_amount")]);
    m_base_tax_amount_isSet = !json[QString("base_tax_amount")].isNull() && m_base_tax_amount_isValid;

    m_base_to_global_rate_isValid = ::OpenAPI::fromJsonValue(m_base_to_global_rate, json[QString("base_to_global_rate")]);
    m_base_to_global_rate_isSet = !json[QString("base_to_global_rate")].isNull() && m_base_to_global_rate_isValid;

    m_base_to_order_rate_isValid = ::OpenAPI::fromJsonValue(m_base_to_order_rate, json[QString("base_to_order_rate")]);
    m_base_to_order_rate_isSet = !json[QString("base_to_order_rate")].isNull() && m_base_to_order_rate_isValid;

    m_base_total_refunded_isValid = ::OpenAPI::fromJsonValue(m_base_total_refunded, json[QString("base_total_refunded")]);
    m_base_total_refunded_isSet = !json[QString("base_total_refunded")].isNull() && m_base_total_refunded_isValid;

    m_billing_address_id_isValid = ::OpenAPI::fromJsonValue(m_billing_address_id, json[QString("billing_address_id")]);
    m_billing_address_id_isSet = !json[QString("billing_address_id")].isNull() && m_billing_address_id_isValid;

    m_can_void_flag_isValid = ::OpenAPI::fromJsonValue(m_can_void_flag, json[QString("can_void_flag")]);
    m_can_void_flag_isSet = !json[QString("can_void_flag")].isNull() && m_can_void_flag_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_discount_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_amount, json[QString("discount_amount")]);
    m_discount_amount_isSet = !json[QString("discount_amount")].isNull() && m_discount_amount_isValid;

    m_discount_description_isValid = ::OpenAPI::fromJsonValue(m_discount_description, json[QString("discount_description")]);
    m_discount_description_isSet = !json[QString("discount_description")].isNull() && m_discount_description_isValid;

    m_discount_tax_compensation_amount_isValid = ::OpenAPI::fromJsonValue(m_discount_tax_compensation_amount, json[QString("discount_tax_compensation_amount")]);
    m_discount_tax_compensation_amount_isSet = !json[QString("discount_tax_compensation_amount")].isNull() && m_discount_tax_compensation_amount_isValid;

    m_email_sent_isValid = ::OpenAPI::fromJsonValue(m_email_sent, json[QString("email_sent")]);
    m_email_sent_isSet = !json[QString("email_sent")].isNull() && m_email_sent_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_global_currency_code_isValid = ::OpenAPI::fromJsonValue(m_global_currency_code, json[QString("global_currency_code")]);
    m_global_currency_code_isSet = !json[QString("global_currency_code")].isNull() && m_global_currency_code_isValid;

    m_grand_total_isValid = ::OpenAPI::fromJsonValue(m_grand_total, json[QString("grand_total")]);
    m_grand_total_isSet = !json[QString("grand_total")].isNull() && m_grand_total_isValid;

    m_increment_id_isValid = ::OpenAPI::fromJsonValue(m_increment_id, json[QString("increment_id")]);
    m_increment_id_isSet = !json[QString("increment_id")].isNull() && m_increment_id_isValid;

    m_is_used_for_refund_isValid = ::OpenAPI::fromJsonValue(m_is_used_for_refund, json[QString("is_used_for_refund")]);
    m_is_used_for_refund_isSet = !json[QString("is_used_for_refund")].isNull() && m_is_used_for_refund_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_order_currency_code_isValid = ::OpenAPI::fromJsonValue(m_order_currency_code, json[QString("order_currency_code")]);
    m_order_currency_code_isSet = !json[QString("order_currency_code")].isNull() && m_order_currency_code_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_shipping_address_id_isValid = ::OpenAPI::fromJsonValue(m_shipping_address_id, json[QString("shipping_address_id")]);
    m_shipping_address_id_isSet = !json[QString("shipping_address_id")].isNull() && m_shipping_address_id_isValid;

    m_shipping_amount_isValid = ::OpenAPI::fromJsonValue(m_shipping_amount, json[QString("shipping_amount")]);
    m_shipping_amount_isSet = !json[QString("shipping_amount")].isNull() && m_shipping_amount_isValid;

    m_shipping_discount_tax_compensation_amount_isValid = ::OpenAPI::fromJsonValue(m_shipping_discount_tax_compensation_amount, json[QString("shipping_discount_tax_compensation_amount")]);
    m_shipping_discount_tax_compensation_amount_isSet = !json[QString("shipping_discount_tax_compensation_amount")].isNull() && m_shipping_discount_tax_compensation_amount_isValid;

    m_shipping_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_shipping_incl_tax, json[QString("shipping_incl_tax")]);
    m_shipping_incl_tax_isSet = !json[QString("shipping_incl_tax")].isNull() && m_shipping_incl_tax_isValid;

    m_shipping_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_shipping_tax_amount, json[QString("shipping_tax_amount")]);
    m_shipping_tax_amount_isSet = !json[QString("shipping_tax_amount")].isNull() && m_shipping_tax_amount_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_store_currency_code_isValid = ::OpenAPI::fromJsonValue(m_store_currency_code, json[QString("store_currency_code")]);
    m_store_currency_code_isSet = !json[QString("store_currency_code")].isNull() && m_store_currency_code_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_store_to_base_rate_isValid = ::OpenAPI::fromJsonValue(m_store_to_base_rate, json[QString("store_to_base_rate")]);
    m_store_to_base_rate_isSet = !json[QString("store_to_base_rate")].isNull() && m_store_to_base_rate_isValid;

    m_store_to_order_rate_isValid = ::OpenAPI::fromJsonValue(m_store_to_order_rate, json[QString("store_to_order_rate")]);
    m_store_to_order_rate_isSet = !json[QString("store_to_order_rate")].isNull() && m_store_to_order_rate_isValid;

    m_subtotal_isValid = ::OpenAPI::fromJsonValue(m_subtotal, json[QString("subtotal")]);
    m_subtotal_isSet = !json[QString("subtotal")].isNull() && m_subtotal_isValid;

    m_subtotal_incl_tax_isValid = ::OpenAPI::fromJsonValue(m_subtotal_incl_tax, json[QString("subtotal_incl_tax")]);
    m_subtotal_incl_tax_isSet = !json[QString("subtotal_incl_tax")].isNull() && m_subtotal_incl_tax_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("tax_amount")]);
    m_tax_amount_isSet = !json[QString("tax_amount")].isNull() && m_tax_amount_isValid;

    m_total_qty_isValid = ::OpenAPI::fromJsonValue(m_total_qty, json[QString("total_qty")]);
    m_total_qty_isSet = !json[QString("total_qty")].isNull() && m_total_qty_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAISales_data_invoice_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISales_data_invoice_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_base_currency_code_isSet) {
        obj.insert(QString("base_currency_code"), ::OpenAPI::toJsonValue(m_base_currency_code));
    }
    if (m_base_discount_amount_isSet) {
        obj.insert(QString("base_discount_amount"), ::OpenAPI::toJsonValue(m_base_discount_amount));
    }
    if (m_base_discount_tax_compensation_amount_isSet) {
        obj.insert(QString("base_discount_tax_compensation_amount"), ::OpenAPI::toJsonValue(m_base_discount_tax_compensation_amount));
    }
    if (m_base_grand_total_isSet) {
        obj.insert(QString("base_grand_total"), ::OpenAPI::toJsonValue(m_base_grand_total));
    }
    if (m_base_shipping_amount_isSet) {
        obj.insert(QString("base_shipping_amount"), ::OpenAPI::toJsonValue(m_base_shipping_amount));
    }
    if (m_base_shipping_discount_tax_compensation_amnt_isSet) {
        obj.insert(QString("base_shipping_discount_tax_compensation_amnt"), ::OpenAPI::toJsonValue(m_base_shipping_discount_tax_compensation_amnt));
    }
    if (m_base_shipping_incl_tax_isSet) {
        obj.insert(QString("base_shipping_incl_tax"), ::OpenAPI::toJsonValue(m_base_shipping_incl_tax));
    }
    if (m_base_shipping_tax_amount_isSet) {
        obj.insert(QString("base_shipping_tax_amount"), ::OpenAPI::toJsonValue(m_base_shipping_tax_amount));
    }
    if (m_base_subtotal_isSet) {
        obj.insert(QString("base_subtotal"), ::OpenAPI::toJsonValue(m_base_subtotal));
    }
    if (m_base_subtotal_incl_tax_isSet) {
        obj.insert(QString("base_subtotal_incl_tax"), ::OpenAPI::toJsonValue(m_base_subtotal_incl_tax));
    }
    if (m_base_tax_amount_isSet) {
        obj.insert(QString("base_tax_amount"), ::OpenAPI::toJsonValue(m_base_tax_amount));
    }
    if (m_base_to_global_rate_isSet) {
        obj.insert(QString("base_to_global_rate"), ::OpenAPI::toJsonValue(m_base_to_global_rate));
    }
    if (m_base_to_order_rate_isSet) {
        obj.insert(QString("base_to_order_rate"), ::OpenAPI::toJsonValue(m_base_to_order_rate));
    }
    if (m_base_total_refunded_isSet) {
        obj.insert(QString("base_total_refunded"), ::OpenAPI::toJsonValue(m_base_total_refunded));
    }
    if (m_billing_address_id_isSet) {
        obj.insert(QString("billing_address_id"), ::OpenAPI::toJsonValue(m_billing_address_id));
    }
    if (m_can_void_flag_isSet) {
        obj.insert(QString("can_void_flag"), ::OpenAPI::toJsonValue(m_can_void_flag));
    }
    if (m_comments.size() > 0) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_discount_amount_isSet) {
        obj.insert(QString("discount_amount"), ::OpenAPI::toJsonValue(m_discount_amount));
    }
    if (m_discount_description_isSet) {
        obj.insert(QString("discount_description"), ::OpenAPI::toJsonValue(m_discount_description));
    }
    if (m_discount_tax_compensation_amount_isSet) {
        obj.insert(QString("discount_tax_compensation_amount"), ::OpenAPI::toJsonValue(m_discount_tax_compensation_amount));
    }
    if (m_email_sent_isSet) {
        obj.insert(QString("email_sent"), ::OpenAPI::toJsonValue(m_email_sent));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_global_currency_code_isSet) {
        obj.insert(QString("global_currency_code"), ::OpenAPI::toJsonValue(m_global_currency_code));
    }
    if (m_grand_total_isSet) {
        obj.insert(QString("grand_total"), ::OpenAPI::toJsonValue(m_grand_total));
    }
    if (m_increment_id_isSet) {
        obj.insert(QString("increment_id"), ::OpenAPI::toJsonValue(m_increment_id));
    }
    if (m_is_used_for_refund_isSet) {
        obj.insert(QString("is_used_for_refund"), ::OpenAPI::toJsonValue(m_is_used_for_refund));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_order_currency_code_isSet) {
        obj.insert(QString("order_currency_code"), ::OpenAPI::toJsonValue(m_order_currency_code));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_shipping_address_id_isSet) {
        obj.insert(QString("shipping_address_id"), ::OpenAPI::toJsonValue(m_shipping_address_id));
    }
    if (m_shipping_amount_isSet) {
        obj.insert(QString("shipping_amount"), ::OpenAPI::toJsonValue(m_shipping_amount));
    }
    if (m_shipping_discount_tax_compensation_amount_isSet) {
        obj.insert(QString("shipping_discount_tax_compensation_amount"), ::OpenAPI::toJsonValue(m_shipping_discount_tax_compensation_amount));
    }
    if (m_shipping_incl_tax_isSet) {
        obj.insert(QString("shipping_incl_tax"), ::OpenAPI::toJsonValue(m_shipping_incl_tax));
    }
    if (m_shipping_tax_amount_isSet) {
        obj.insert(QString("shipping_tax_amount"), ::OpenAPI::toJsonValue(m_shipping_tax_amount));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_store_currency_code_isSet) {
        obj.insert(QString("store_currency_code"), ::OpenAPI::toJsonValue(m_store_currency_code));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_store_to_base_rate_isSet) {
        obj.insert(QString("store_to_base_rate"), ::OpenAPI::toJsonValue(m_store_to_base_rate));
    }
    if (m_store_to_order_rate_isSet) {
        obj.insert(QString("store_to_order_rate"), ::OpenAPI::toJsonValue(m_store_to_order_rate));
    }
    if (m_subtotal_isSet) {
        obj.insert(QString("subtotal"), ::OpenAPI::toJsonValue(m_subtotal));
    }
    if (m_subtotal_incl_tax_isSet) {
        obj.insert(QString("subtotal_incl_tax"), ::OpenAPI::toJsonValue(m_subtotal_incl_tax));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("tax_amount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_total_qty_isSet) {
        obj.insert(QString("total_qty"), ::OpenAPI::toJsonValue(m_total_qty));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAISales_data_invoice_interface::getBaseCurrencyCode() const {
    return m_base_currency_code;
}
void OAISales_data_invoice_interface::setBaseCurrencyCode(const QString &base_currency_code) {
    m_base_currency_code = base_currency_code;
    m_base_currency_code_isSet = true;
}

bool OAISales_data_invoice_interface::is_base_currency_code_Set() const{
    return m_base_currency_code_isSet;
}

bool OAISales_data_invoice_interface::is_base_currency_code_Valid() const{
    return m_base_currency_code_isValid;
}

double OAISales_data_invoice_interface::getBaseDiscountAmount() const {
    return m_base_discount_amount;
}
void OAISales_data_invoice_interface::setBaseDiscountAmount(const double &base_discount_amount) {
    m_base_discount_amount = base_discount_amount;
    m_base_discount_amount_isSet = true;
}

bool OAISales_data_invoice_interface::is_base_discount_amount_Set() const{
    return m_base_discount_amount_isSet;
}

bool OAISales_data_invoice_interface::is_base_discount_amount_Valid() const{
    return m_base_discount_amount_isValid;
}

double OAISales_data_invoice_interface::getBaseDiscountTaxCompensationAmount() const {
    return m_base_discount_tax_compensation_amount;
}
void OAISales_data_invoice_interface::setBaseDiscountTaxCompensationAmount(const double &base_discount_tax_compensation_amount) {
    m_base_discount_tax_compensation_amount = base_discount_tax_compensation_amount;
    m_base_discount_tax_compensation_amount_isSet = true;
}

bool OAISales_data_invoice_interface::is_base_discount_tax_compensation_amount_Set() const{
    return m_base_discount_tax_compensation_amount_isSet;
}

bool OAISales_data_invoice_interface::is_base_discount_tax_compensation_amount_Valid() const{
    return m_base_discount_tax_compensation_amount_isValid;
}

double OAISales_data_invoice_interface::getBaseGrandTotal() const {
    return m_base_grand_total;
}
void OAISales_data_invoice_interface::setBaseGrandTotal(const double &base_grand_total) {
    m_base_grand_total = base_grand_total;
    m_base_grand_total_isSet = true;
}

bool OAISales_data_invoice_interface::is_base_grand_total_Set() const{
    return m_base_grand_total_isSet;
}

bool OAISales_data_invoice_interface::is_base_grand_total_Valid() const{
    return m_base_grand_total_isValid;
}

double OAISales_data_invoice_interface::getBaseShippingAmount() const {
    return m_base_shipping_amount;
}
void OAISales_data_invoice_interface::setBaseShippingAmount(const double &base_shipping_amount) {
    m_base_shipping_amount = base_shipping_amount;
    m_base_shipping_amount_isSet = true;
}

bool OAISales_data_invoice_interface::is_base_shipping_amount_Set() const{
    return m_base_shipping_amount_isSet;
}

bool OAISales_data_invoice_interface::is_base_shipping_amount_Valid() const{
    return m_base_shipping_amount_isValid;
}

double OAISales_data_invoice_interface::getBaseShippingDiscountTaxCompensationAmnt() const {
    return m_base_shipping_discount_tax_compensation_amnt;
}
void OAISales_data_invoice_interface::setBaseShippingDiscountTaxCompensationAmnt(const double &base_shipping_discount_tax_compensation_amnt) {
    m_base_shipping_discount_tax_compensation_amnt = base_shipping_discount_tax_compensation_amnt;
    m_base_shipping_discount_tax_compensation_amnt_isSet = true;
}

bool OAISales_data_invoice_interface::is_base_shipping_discount_tax_compensation_amnt_Set() const{
    return m_base_shipping_discount_tax_compensation_amnt_isSet;
}

bool OAISales_data_invoice_interface::is_base_shipping_discount_tax_compensation_amnt_Valid() const{
    return m_base_shipping_discount_tax_compensation_amnt_isValid;
}

double OAISales_data_invoice_interface::getBaseShippingInclTax() const {
    return m_base_shipping_incl_tax;
}
void OAISales_data_invoice_interface::setBaseShippingInclTax(const double &base_shipping_incl_tax) {
    m_base_shipping_incl_tax = base_shipping_incl_tax;
    m_base_shipping_incl_tax_isSet = true;
}

bool OAISales_data_invoice_interface::is_base_shipping_incl_tax_Set() const{
    return m_base_shipping_incl_tax_isSet;
}

bool OAISales_data_invoice_interface::is_base_shipping_incl_tax_Valid() const{
    return m_base_shipping_incl_tax_isValid;
}

double OAISales_data_invoice_interface::getBaseShippingTaxAmount() const {
    return m_base_shipping_tax_amount;
}
void OAISales_data_invoice_interface::setBaseShippingTaxAmount(const double &base_shipping_tax_amount) {
    m_base_shipping_tax_amount = base_shipping_tax_amount;
    m_base_shipping_tax_amount_isSet = true;
}

bool OAISales_data_invoice_interface::is_base_shipping_tax_amount_Set() const{
    return m_base_shipping_tax_amount_isSet;
}

bool OAISales_data_invoice_interface::is_base_shipping_tax_amount_Valid() const{
    return m_base_shipping_tax_amount_isValid;
}

double OAISales_data_invoice_interface::getBaseSubtotal() const {
    return m_base_subtotal;
}
void OAISales_data_invoice_interface::setBaseSubtotal(const double &base_subtotal) {
    m_base_subtotal = base_subtotal;
    m_base_subtotal_isSet = true;
}

bool OAISales_data_invoice_interface::is_base_subtotal_Set() const{
    return m_base_subtotal_isSet;
}

bool OAISales_data_invoice_interface::is_base_subtotal_Valid() const{
    return m_base_subtotal_isValid;
}

double OAISales_data_invoice_interface::getBaseSubtotalInclTax() const {
    return m_base_subtotal_incl_tax;
}
void OAISales_data_invoice_interface::setBaseSubtotalInclTax(const double &base_subtotal_incl_tax) {
    m_base_subtotal_incl_tax = base_subtotal_incl_tax;
    m_base_subtotal_incl_tax_isSet = true;
}

bool OAISales_data_invoice_interface::is_base_subtotal_incl_tax_Set() const{
    return m_base_subtotal_incl_tax_isSet;
}

bool OAISales_data_invoice_interface::is_base_subtotal_incl_tax_Valid() const{
    return m_base_subtotal_incl_tax_isValid;
}

double OAISales_data_invoice_interface::getBaseTaxAmount() const {
    return m_base_tax_amount;
}
void OAISales_data_invoice_interface::setBaseTaxAmount(const double &base_tax_amount) {
    m_base_tax_amount = base_tax_amount;
    m_base_tax_amount_isSet = true;
}

bool OAISales_data_invoice_interface::is_base_tax_amount_Set() const{
    return m_base_tax_amount_isSet;
}

bool OAISales_data_invoice_interface::is_base_tax_amount_Valid() const{
    return m_base_tax_amount_isValid;
}

double OAISales_data_invoice_interface::getBaseToGlobalRate() const {
    return m_base_to_global_rate;
}
void OAISales_data_invoice_interface::setBaseToGlobalRate(const double &base_to_global_rate) {
    m_base_to_global_rate = base_to_global_rate;
    m_base_to_global_rate_isSet = true;
}

bool OAISales_data_invoice_interface::is_base_to_global_rate_Set() const{
    return m_base_to_global_rate_isSet;
}

bool OAISales_data_invoice_interface::is_base_to_global_rate_Valid() const{
    return m_base_to_global_rate_isValid;
}

double OAISales_data_invoice_interface::getBaseToOrderRate() const {
    return m_base_to_order_rate;
}
void OAISales_data_invoice_interface::setBaseToOrderRate(const double &base_to_order_rate) {
    m_base_to_order_rate = base_to_order_rate;
    m_base_to_order_rate_isSet = true;
}

bool OAISales_data_invoice_interface::is_base_to_order_rate_Set() const{
    return m_base_to_order_rate_isSet;
}

bool OAISales_data_invoice_interface::is_base_to_order_rate_Valid() const{
    return m_base_to_order_rate_isValid;
}

double OAISales_data_invoice_interface::getBaseTotalRefunded() const {
    return m_base_total_refunded;
}
void OAISales_data_invoice_interface::setBaseTotalRefunded(const double &base_total_refunded) {
    m_base_total_refunded = base_total_refunded;
    m_base_total_refunded_isSet = true;
}

bool OAISales_data_invoice_interface::is_base_total_refunded_Set() const{
    return m_base_total_refunded_isSet;
}

bool OAISales_data_invoice_interface::is_base_total_refunded_Valid() const{
    return m_base_total_refunded_isValid;
}

qint32 OAISales_data_invoice_interface::getBillingAddressId() const {
    return m_billing_address_id;
}
void OAISales_data_invoice_interface::setBillingAddressId(const qint32 &billing_address_id) {
    m_billing_address_id = billing_address_id;
    m_billing_address_id_isSet = true;
}

bool OAISales_data_invoice_interface::is_billing_address_id_Set() const{
    return m_billing_address_id_isSet;
}

bool OAISales_data_invoice_interface::is_billing_address_id_Valid() const{
    return m_billing_address_id_isValid;
}

qint32 OAISales_data_invoice_interface::getCanVoidFlag() const {
    return m_can_void_flag;
}
void OAISales_data_invoice_interface::setCanVoidFlag(const qint32 &can_void_flag) {
    m_can_void_flag = can_void_flag;
    m_can_void_flag_isSet = true;
}

bool OAISales_data_invoice_interface::is_can_void_flag_Set() const{
    return m_can_void_flag_isSet;
}

bool OAISales_data_invoice_interface::is_can_void_flag_Valid() const{
    return m_can_void_flag_isValid;
}

QList<OAISales_data_invoice_comment_interface> OAISales_data_invoice_interface::getComments() const {
    return m_comments;
}
void OAISales_data_invoice_interface::setComments(const QList<OAISales_data_invoice_comment_interface> &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAISales_data_invoice_interface::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAISales_data_invoice_interface::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAISales_data_invoice_interface::getCreatedAt() const {
    return m_created_at;
}
void OAISales_data_invoice_interface::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISales_data_invoice_interface::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISales_data_invoice_interface::is_created_at_Valid() const{
    return m_created_at_isValid;
}

double OAISales_data_invoice_interface::getDiscountAmount() const {
    return m_discount_amount;
}
void OAISales_data_invoice_interface::setDiscountAmount(const double &discount_amount) {
    m_discount_amount = discount_amount;
    m_discount_amount_isSet = true;
}

bool OAISales_data_invoice_interface::is_discount_amount_Set() const{
    return m_discount_amount_isSet;
}

bool OAISales_data_invoice_interface::is_discount_amount_Valid() const{
    return m_discount_amount_isValid;
}

QString OAISales_data_invoice_interface::getDiscountDescription() const {
    return m_discount_description;
}
void OAISales_data_invoice_interface::setDiscountDescription(const QString &discount_description) {
    m_discount_description = discount_description;
    m_discount_description_isSet = true;
}

bool OAISales_data_invoice_interface::is_discount_description_Set() const{
    return m_discount_description_isSet;
}

bool OAISales_data_invoice_interface::is_discount_description_Valid() const{
    return m_discount_description_isValid;
}

double OAISales_data_invoice_interface::getDiscountTaxCompensationAmount() const {
    return m_discount_tax_compensation_amount;
}
void OAISales_data_invoice_interface::setDiscountTaxCompensationAmount(const double &discount_tax_compensation_amount) {
    m_discount_tax_compensation_amount = discount_tax_compensation_amount;
    m_discount_tax_compensation_amount_isSet = true;
}

bool OAISales_data_invoice_interface::is_discount_tax_compensation_amount_Set() const{
    return m_discount_tax_compensation_amount_isSet;
}

bool OAISales_data_invoice_interface::is_discount_tax_compensation_amount_Valid() const{
    return m_discount_tax_compensation_amount_isValid;
}

qint32 OAISales_data_invoice_interface::getEmailSent() const {
    return m_email_sent;
}
void OAISales_data_invoice_interface::setEmailSent(const qint32 &email_sent) {
    m_email_sent = email_sent;
    m_email_sent_isSet = true;
}

bool OAISales_data_invoice_interface::is_email_sent_Set() const{
    return m_email_sent_isSet;
}

bool OAISales_data_invoice_interface::is_email_sent_Valid() const{
    return m_email_sent_isValid;
}

qint32 OAISales_data_invoice_interface::getEntityId() const {
    return m_entity_id;
}
void OAISales_data_invoice_interface::setEntityId(const qint32 &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAISales_data_invoice_interface::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAISales_data_invoice_interface::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAISales_data_invoice_extension_interface OAISales_data_invoice_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAISales_data_invoice_interface::setExtensionAttributes(const OAISales_data_invoice_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAISales_data_invoice_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAISales_data_invoice_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAISales_data_invoice_interface::getGlobalCurrencyCode() const {
    return m_global_currency_code;
}
void OAISales_data_invoice_interface::setGlobalCurrencyCode(const QString &global_currency_code) {
    m_global_currency_code = global_currency_code;
    m_global_currency_code_isSet = true;
}

bool OAISales_data_invoice_interface::is_global_currency_code_Set() const{
    return m_global_currency_code_isSet;
}

bool OAISales_data_invoice_interface::is_global_currency_code_Valid() const{
    return m_global_currency_code_isValid;
}

double OAISales_data_invoice_interface::getGrandTotal() const {
    return m_grand_total;
}
void OAISales_data_invoice_interface::setGrandTotal(const double &grand_total) {
    m_grand_total = grand_total;
    m_grand_total_isSet = true;
}

bool OAISales_data_invoice_interface::is_grand_total_Set() const{
    return m_grand_total_isSet;
}

bool OAISales_data_invoice_interface::is_grand_total_Valid() const{
    return m_grand_total_isValid;
}

QString OAISales_data_invoice_interface::getIncrementId() const {
    return m_increment_id;
}
void OAISales_data_invoice_interface::setIncrementId(const QString &increment_id) {
    m_increment_id = increment_id;
    m_increment_id_isSet = true;
}

bool OAISales_data_invoice_interface::is_increment_id_Set() const{
    return m_increment_id_isSet;
}

bool OAISales_data_invoice_interface::is_increment_id_Valid() const{
    return m_increment_id_isValid;
}

qint32 OAISales_data_invoice_interface::getIsUsedForRefund() const {
    return m_is_used_for_refund;
}
void OAISales_data_invoice_interface::setIsUsedForRefund(const qint32 &is_used_for_refund) {
    m_is_used_for_refund = is_used_for_refund;
    m_is_used_for_refund_isSet = true;
}

bool OAISales_data_invoice_interface::is_is_used_for_refund_Set() const{
    return m_is_used_for_refund_isSet;
}

bool OAISales_data_invoice_interface::is_is_used_for_refund_Valid() const{
    return m_is_used_for_refund_isValid;
}

QList<OAISales_data_invoice_item_interface> OAISales_data_invoice_interface::getItems() const {
    return m_items;
}
void OAISales_data_invoice_interface::setItems(const QList<OAISales_data_invoice_item_interface> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISales_data_invoice_interface::is_items_Set() const{
    return m_items_isSet;
}

bool OAISales_data_invoice_interface::is_items_Valid() const{
    return m_items_isValid;
}

QString OAISales_data_invoice_interface::getOrderCurrencyCode() const {
    return m_order_currency_code;
}
void OAISales_data_invoice_interface::setOrderCurrencyCode(const QString &order_currency_code) {
    m_order_currency_code = order_currency_code;
    m_order_currency_code_isSet = true;
}

bool OAISales_data_invoice_interface::is_order_currency_code_Set() const{
    return m_order_currency_code_isSet;
}

bool OAISales_data_invoice_interface::is_order_currency_code_Valid() const{
    return m_order_currency_code_isValid;
}

qint32 OAISales_data_invoice_interface::getOrderId() const {
    return m_order_id;
}
void OAISales_data_invoice_interface::setOrderId(const qint32 &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAISales_data_invoice_interface::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAISales_data_invoice_interface::is_order_id_Valid() const{
    return m_order_id_isValid;
}

qint32 OAISales_data_invoice_interface::getShippingAddressId() const {
    return m_shipping_address_id;
}
void OAISales_data_invoice_interface::setShippingAddressId(const qint32 &shipping_address_id) {
    m_shipping_address_id = shipping_address_id;
    m_shipping_address_id_isSet = true;
}

bool OAISales_data_invoice_interface::is_shipping_address_id_Set() const{
    return m_shipping_address_id_isSet;
}

bool OAISales_data_invoice_interface::is_shipping_address_id_Valid() const{
    return m_shipping_address_id_isValid;
}

double OAISales_data_invoice_interface::getShippingAmount() const {
    return m_shipping_amount;
}
void OAISales_data_invoice_interface::setShippingAmount(const double &shipping_amount) {
    m_shipping_amount = shipping_amount;
    m_shipping_amount_isSet = true;
}

bool OAISales_data_invoice_interface::is_shipping_amount_Set() const{
    return m_shipping_amount_isSet;
}

bool OAISales_data_invoice_interface::is_shipping_amount_Valid() const{
    return m_shipping_amount_isValid;
}

double OAISales_data_invoice_interface::getShippingDiscountTaxCompensationAmount() const {
    return m_shipping_discount_tax_compensation_amount;
}
void OAISales_data_invoice_interface::setShippingDiscountTaxCompensationAmount(const double &shipping_discount_tax_compensation_amount) {
    m_shipping_discount_tax_compensation_amount = shipping_discount_tax_compensation_amount;
    m_shipping_discount_tax_compensation_amount_isSet = true;
}

bool OAISales_data_invoice_interface::is_shipping_discount_tax_compensation_amount_Set() const{
    return m_shipping_discount_tax_compensation_amount_isSet;
}

bool OAISales_data_invoice_interface::is_shipping_discount_tax_compensation_amount_Valid() const{
    return m_shipping_discount_tax_compensation_amount_isValid;
}

double OAISales_data_invoice_interface::getShippingInclTax() const {
    return m_shipping_incl_tax;
}
void OAISales_data_invoice_interface::setShippingInclTax(const double &shipping_incl_tax) {
    m_shipping_incl_tax = shipping_incl_tax;
    m_shipping_incl_tax_isSet = true;
}

bool OAISales_data_invoice_interface::is_shipping_incl_tax_Set() const{
    return m_shipping_incl_tax_isSet;
}

bool OAISales_data_invoice_interface::is_shipping_incl_tax_Valid() const{
    return m_shipping_incl_tax_isValid;
}

double OAISales_data_invoice_interface::getShippingTaxAmount() const {
    return m_shipping_tax_amount;
}
void OAISales_data_invoice_interface::setShippingTaxAmount(const double &shipping_tax_amount) {
    m_shipping_tax_amount = shipping_tax_amount;
    m_shipping_tax_amount_isSet = true;
}

bool OAISales_data_invoice_interface::is_shipping_tax_amount_Set() const{
    return m_shipping_tax_amount_isSet;
}

bool OAISales_data_invoice_interface::is_shipping_tax_amount_Valid() const{
    return m_shipping_tax_amount_isValid;
}

qint32 OAISales_data_invoice_interface::getState() const {
    return m_state;
}
void OAISales_data_invoice_interface::setState(const qint32 &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISales_data_invoice_interface::is_state_Set() const{
    return m_state_isSet;
}

bool OAISales_data_invoice_interface::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISales_data_invoice_interface::getStoreCurrencyCode() const {
    return m_store_currency_code;
}
void OAISales_data_invoice_interface::setStoreCurrencyCode(const QString &store_currency_code) {
    m_store_currency_code = store_currency_code;
    m_store_currency_code_isSet = true;
}

bool OAISales_data_invoice_interface::is_store_currency_code_Set() const{
    return m_store_currency_code_isSet;
}

bool OAISales_data_invoice_interface::is_store_currency_code_Valid() const{
    return m_store_currency_code_isValid;
}

qint32 OAISales_data_invoice_interface::getStoreId() const {
    return m_store_id;
}
void OAISales_data_invoice_interface::setStoreId(const qint32 &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAISales_data_invoice_interface::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAISales_data_invoice_interface::is_store_id_Valid() const{
    return m_store_id_isValid;
}

double OAISales_data_invoice_interface::getStoreToBaseRate() const {
    return m_store_to_base_rate;
}
void OAISales_data_invoice_interface::setStoreToBaseRate(const double &store_to_base_rate) {
    m_store_to_base_rate = store_to_base_rate;
    m_store_to_base_rate_isSet = true;
}

bool OAISales_data_invoice_interface::is_store_to_base_rate_Set() const{
    return m_store_to_base_rate_isSet;
}

bool OAISales_data_invoice_interface::is_store_to_base_rate_Valid() const{
    return m_store_to_base_rate_isValid;
}

double OAISales_data_invoice_interface::getStoreToOrderRate() const {
    return m_store_to_order_rate;
}
void OAISales_data_invoice_interface::setStoreToOrderRate(const double &store_to_order_rate) {
    m_store_to_order_rate = store_to_order_rate;
    m_store_to_order_rate_isSet = true;
}

bool OAISales_data_invoice_interface::is_store_to_order_rate_Set() const{
    return m_store_to_order_rate_isSet;
}

bool OAISales_data_invoice_interface::is_store_to_order_rate_Valid() const{
    return m_store_to_order_rate_isValid;
}

double OAISales_data_invoice_interface::getSubtotal() const {
    return m_subtotal;
}
void OAISales_data_invoice_interface::setSubtotal(const double &subtotal) {
    m_subtotal = subtotal;
    m_subtotal_isSet = true;
}

bool OAISales_data_invoice_interface::is_subtotal_Set() const{
    return m_subtotal_isSet;
}

bool OAISales_data_invoice_interface::is_subtotal_Valid() const{
    return m_subtotal_isValid;
}

double OAISales_data_invoice_interface::getSubtotalInclTax() const {
    return m_subtotal_incl_tax;
}
void OAISales_data_invoice_interface::setSubtotalInclTax(const double &subtotal_incl_tax) {
    m_subtotal_incl_tax = subtotal_incl_tax;
    m_subtotal_incl_tax_isSet = true;
}

bool OAISales_data_invoice_interface::is_subtotal_incl_tax_Set() const{
    return m_subtotal_incl_tax_isSet;
}

bool OAISales_data_invoice_interface::is_subtotal_incl_tax_Valid() const{
    return m_subtotal_incl_tax_isValid;
}

double OAISales_data_invoice_interface::getTaxAmount() const {
    return m_tax_amount;
}
void OAISales_data_invoice_interface::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAISales_data_invoice_interface::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAISales_data_invoice_interface::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

double OAISales_data_invoice_interface::getTotalQty() const {
    return m_total_qty;
}
void OAISales_data_invoice_interface::setTotalQty(const double &total_qty) {
    m_total_qty = total_qty;
    m_total_qty_isSet = true;
}

bool OAISales_data_invoice_interface::is_total_qty_Set() const{
    return m_total_qty_isSet;
}

bool OAISales_data_invoice_interface::is_total_qty_Valid() const{
    return m_total_qty_isValid;
}

QString OAISales_data_invoice_interface::getTransactionId() const {
    return m_transaction_id;
}
void OAISales_data_invoice_interface::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAISales_data_invoice_interface::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAISales_data_invoice_interface::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAISales_data_invoice_interface::getUpdatedAt() const {
    return m_updated_at;
}
void OAISales_data_invoice_interface::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISales_data_invoice_interface::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISales_data_invoice_interface::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAISales_data_invoice_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_discount_tax_compensation_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_grand_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_discount_tax_compensation_amnt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_shipping_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_subtotal_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_to_global_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_to_order_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_total_refunded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_void_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_tax_compensation_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grand_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_increment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_used_for_refund_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_discount_tax_compensation_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_to_base_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_to_order_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_incl_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISales_data_invoice_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_items_isValid && m_order_id_isValid && m_total_qty_isValid && true;
}

} // namespace OpenAPI
