/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequisition_list_data_requisition_list_item_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequisition_list_data_requisition_list_item_interface::OAIRequisition_list_data_requisition_list_item_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequisition_list_data_requisition_list_item_interface::OAIRequisition_list_data_requisition_list_item_interface() {
    this->initializeModel();
}

OAIRequisition_list_data_requisition_list_item_interface::~OAIRequisition_list_data_requisition_list_item_interface() {}

void OAIRequisition_list_data_requisition_list_item_interface::initializeModel() {

    m_added_at_isSet = false;
    m_added_at_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_qty_isSet = false;
    m_qty_isValid = false;

    m_requisition_list_id_isSet = false;
    m_requisition_list_id_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;
}

void OAIRequisition_list_data_requisition_list_item_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequisition_list_data_requisition_list_item_interface::fromJsonObject(QJsonObject json) {

    m_added_at_isValid = ::OpenAPI::fromJsonValue(m_added_at, json[QString("added_at")]);
    m_added_at_isSet = !json[QString("added_at")].isNull() && m_added_at_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_qty_isValid = ::OpenAPI::fromJsonValue(m_qty, json[QString("qty")]);
    m_qty_isSet = !json[QString("qty")].isNull() && m_qty_isValid;

    m_requisition_list_id_isValid = ::OpenAPI::fromJsonValue(m_requisition_list_id, json[QString("requisition_list_id")]);
    m_requisition_list_id_isSet = !json[QString("requisition_list_id")].isNull() && m_requisition_list_id_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;
}

QString OAIRequisition_list_data_requisition_list_item_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequisition_list_data_requisition_list_item_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_added_at_isSet) {
        obj.insert(QString("added_at"), ::OpenAPI::toJsonValue(m_added_at));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_qty_isSet) {
        obj.insert(QString("qty"), ::OpenAPI::toJsonValue(m_qty));
    }
    if (m_requisition_list_id_isSet) {
        obj.insert(QString("requisition_list_id"), ::OpenAPI::toJsonValue(m_requisition_list_id));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    return obj;
}

QString OAIRequisition_list_data_requisition_list_item_interface::getAddedAt() const {
    return m_added_at;
}
void OAIRequisition_list_data_requisition_list_item_interface::setAddedAt(const QString &added_at) {
    m_added_at = added_at;
    m_added_at_isSet = true;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_added_at_Set() const{
    return m_added_at_isSet;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_added_at_Valid() const{
    return m_added_at_isValid;
}

OAIObject OAIRequisition_list_data_requisition_list_item_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAIRequisition_list_data_requisition_list_item_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAIRequisition_list_data_requisition_list_item_interface::getId() const {
    return m_id;
}
void OAIRequisition_list_data_requisition_list_item_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIRequisition_list_data_requisition_list_item_interface::getOptions() const {
    return m_options;
}
void OAIRequisition_list_data_requisition_list_item_interface::setOptions(const QList<QString> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_options_Set() const{
    return m_options_isSet;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_options_Valid() const{
    return m_options_isValid;
}

double OAIRequisition_list_data_requisition_list_item_interface::getQty() const {
    return m_qty;
}
void OAIRequisition_list_data_requisition_list_item_interface::setQty(const double &qty) {
    m_qty = qty;
    m_qty_isSet = true;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_qty_Set() const{
    return m_qty_isSet;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_qty_Valid() const{
    return m_qty_isValid;
}

qint32 OAIRequisition_list_data_requisition_list_item_interface::getRequisitionListId() const {
    return m_requisition_list_id;
}
void OAIRequisition_list_data_requisition_list_item_interface::setRequisitionListId(const qint32 &requisition_list_id) {
    m_requisition_list_id = requisition_list_id;
    m_requisition_list_id_isSet = true;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_requisition_list_id_Set() const{
    return m_requisition_list_id_isSet;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_requisition_list_id_Valid() const{
    return m_requisition_list_id_isValid;
}

QString OAIRequisition_list_data_requisition_list_item_interface::getSku() const {
    return m_sku;
}
void OAIRequisition_list_data_requisition_list_item_interface::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_sku_Valid() const{
    return m_sku_isValid;
}

qint32 OAIRequisition_list_data_requisition_list_item_interface::getStoreId() const {
    return m_store_id;
}
void OAIRequisition_list_data_requisition_list_item_interface::setStoreId(const qint32 &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIRequisition_list_data_requisition_list_item_interface::is_store_id_Valid() const{
    return m_store_id_isValid;
}

bool OAIRequisition_list_data_requisition_list_item_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requisition_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequisition_list_data_requisition_list_item_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_added_at_isValid && m_id_isValid && m_options_isValid && m_qty_isValid && m_requisition_list_id_isValid && m_sku_isValid && m_store_id_isValid && true;
}

} // namespace OpenAPI
