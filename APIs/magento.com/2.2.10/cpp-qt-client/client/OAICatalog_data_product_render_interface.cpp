/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog_data_product_render_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog_data_product_render_interface::OAICatalog_data_product_render_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog_data_product_render_interface::OAICatalog_data_product_render_interface() {
    this->initializeModel();
}

OAICatalog_data_product_render_interface::~OAICatalog_data_product_render_interface() {}

void OAICatalog_data_product_render_interface::initializeModel() {

    m_add_to_cart_button_isSet = false;
    m_add_to_cart_button_isValid = false;

    m_add_to_compare_button_isSet = false;
    m_add_to_compare_button_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_is_salable_isSet = false;
    m_is_salable_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_info_isSet = false;
    m_price_info_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICatalog_data_product_render_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog_data_product_render_interface::fromJsonObject(QJsonObject json) {

    m_add_to_cart_button_isValid = ::OpenAPI::fromJsonValue(m_add_to_cart_button, json[QString("add_to_cart_button")]);
    m_add_to_cart_button_isSet = !json[QString("add_to_cart_button")].isNull() && m_add_to_cart_button_isValid;

    m_add_to_compare_button_isValid = ::OpenAPI::fromJsonValue(m_add_to_compare_button, json[QString("add_to_compare_button")]);
    m_add_to_compare_button_isSet = !json[QString("add_to_compare_button")].isNull() && m_add_to_compare_button_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_is_salable_isValid = ::OpenAPI::fromJsonValue(m_is_salable, json[QString("is_salable")]);
    m_is_salable_isSet = !json[QString("is_salable")].isNull() && m_is_salable_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_info_isValid = ::OpenAPI::fromJsonValue(m_price_info, json[QString("price_info")]);
    m_price_info_isSet = !json[QString("price_info")].isNull() && m_price_info_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICatalog_data_product_render_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog_data_product_render_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_add_to_cart_button.isSet()) {
        obj.insert(QString("add_to_cart_button"), ::OpenAPI::toJsonValue(m_add_to_cart_button));
    }
    if (m_add_to_compare_button.isSet()) {
        obj.insert(QString("add_to_compare_button"), ::OpenAPI::toJsonValue(m_add_to_compare_button));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_is_salable_isSet) {
        obj.insert(QString("is_salable"), ::OpenAPI::toJsonValue(m_is_salable));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_info.isSet()) {
        obj.insert(QString("price_info"), ::OpenAPI::toJsonValue(m_price_info));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAICatalog_data_product_render_button_interface OAICatalog_data_product_render_interface::getAddToCartButton() const {
    return m_add_to_cart_button;
}
void OAICatalog_data_product_render_interface::setAddToCartButton(const OAICatalog_data_product_render_button_interface &add_to_cart_button) {
    m_add_to_cart_button = add_to_cart_button;
    m_add_to_cart_button_isSet = true;
}

bool OAICatalog_data_product_render_interface::is_add_to_cart_button_Set() const{
    return m_add_to_cart_button_isSet;
}

bool OAICatalog_data_product_render_interface::is_add_to_cart_button_Valid() const{
    return m_add_to_cart_button_isValid;
}

OAICatalog_data_product_render_button_interface OAICatalog_data_product_render_interface::getAddToCompareButton() const {
    return m_add_to_compare_button;
}
void OAICatalog_data_product_render_interface::setAddToCompareButton(const OAICatalog_data_product_render_button_interface &add_to_compare_button) {
    m_add_to_compare_button = add_to_compare_button;
    m_add_to_compare_button_isSet = true;
}

bool OAICatalog_data_product_render_interface::is_add_to_compare_button_Set() const{
    return m_add_to_compare_button_isSet;
}

bool OAICatalog_data_product_render_interface::is_add_to_compare_button_Valid() const{
    return m_add_to_compare_button_isValid;
}

QString OAICatalog_data_product_render_interface::getCurrencyCode() const {
    return m_currency_code;
}
void OAICatalog_data_product_render_interface::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAICatalog_data_product_render_interface::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAICatalog_data_product_render_interface::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

OAICatalog_data_product_render_extension_interface OAICatalog_data_product_render_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAICatalog_data_product_render_interface::setExtensionAttributes(const OAICatalog_data_product_render_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAICatalog_data_product_render_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAICatalog_data_product_render_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAICatalog_data_product_render_interface::getId() const {
    return m_id;
}
void OAICatalog_data_product_render_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICatalog_data_product_render_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAICatalog_data_product_render_interface::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAICatalog_data_product_render_image_interface> OAICatalog_data_product_render_interface::getImages() const {
    return m_images;
}
void OAICatalog_data_product_render_interface::setImages(const QList<OAICatalog_data_product_render_image_interface> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAICatalog_data_product_render_interface::is_images_Set() const{
    return m_images_isSet;
}

bool OAICatalog_data_product_render_interface::is_images_Valid() const{
    return m_images_isValid;
}

QString OAICatalog_data_product_render_interface::getIsSalable() const {
    return m_is_salable;
}
void OAICatalog_data_product_render_interface::setIsSalable(const QString &is_salable) {
    m_is_salable = is_salable;
    m_is_salable_isSet = true;
}

bool OAICatalog_data_product_render_interface::is_is_salable_Set() const{
    return m_is_salable_isSet;
}

bool OAICatalog_data_product_render_interface::is_is_salable_Valid() const{
    return m_is_salable_isValid;
}

QString OAICatalog_data_product_render_interface::getName() const {
    return m_name;
}
void OAICatalog_data_product_render_interface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalog_data_product_render_interface::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalog_data_product_render_interface::is_name_Valid() const{
    return m_name_isValid;
}

OAICatalog_data_product_render_price_info_interface OAICatalog_data_product_render_interface::getPriceInfo() const {
    return m_price_info;
}
void OAICatalog_data_product_render_interface::setPriceInfo(const OAICatalog_data_product_render_price_info_interface &price_info) {
    m_price_info = price_info;
    m_price_info_isSet = true;
}

bool OAICatalog_data_product_render_interface::is_price_info_Set() const{
    return m_price_info_isSet;
}

bool OAICatalog_data_product_render_interface::is_price_info_Valid() const{
    return m_price_info_isValid;
}

qint32 OAICatalog_data_product_render_interface::getStoreId() const {
    return m_store_id;
}
void OAICatalog_data_product_render_interface::setStoreId(const qint32 &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAICatalog_data_product_render_interface::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAICatalog_data_product_render_interface::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QString OAICatalog_data_product_render_interface::getType() const {
    return m_type;
}
void OAICatalog_data_product_render_interface::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICatalog_data_product_render_interface::is_type_Set() const{
    return m_type_isSet;
}

bool OAICatalog_data_product_render_interface::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICatalog_data_product_render_interface::getUrl() const {
    return m_url;
}
void OAICatalog_data_product_render_interface::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICatalog_data_product_render_interface::is_url_Set() const{
    return m_url_isSet;
}

bool OAICatalog_data_product_render_interface::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICatalog_data_product_render_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_to_cart_button.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_to_compare_button.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_salable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog_data_product_render_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_add_to_cart_button_isValid && m_add_to_compare_button_isValid && m_currency_code_isValid && m_extension_attributes_isValid && m_id_isValid && m_images_isValid && m_is_salable_isValid && m_name_isValid && m_price_info_isValid && m_store_id_isValid && m_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
