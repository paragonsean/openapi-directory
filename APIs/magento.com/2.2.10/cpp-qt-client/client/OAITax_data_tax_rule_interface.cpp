/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITax_data_tax_rule_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITax_data_tax_rule_interface::OAITax_data_tax_rule_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITax_data_tax_rule_interface::OAITax_data_tax_rule_interface() {
    this->initializeModel();
}

OAITax_data_tax_rule_interface::~OAITax_data_tax_rule_interface() {}

void OAITax_data_tax_rule_interface::initializeModel() {

    m_calculate_subtotal_isSet = false;
    m_calculate_subtotal_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_customer_tax_class_ids_isSet = false;
    m_customer_tax_class_ids_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_product_tax_class_ids_isSet = false;
    m_product_tax_class_ids_isValid = false;

    m_tax_rate_ids_isSet = false;
    m_tax_rate_ids_isValid = false;
}

void OAITax_data_tax_rule_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITax_data_tax_rule_interface::fromJsonObject(QJsonObject json) {

    m_calculate_subtotal_isValid = ::OpenAPI::fromJsonValue(m_calculate_subtotal, json[QString("calculate_subtotal")]);
    m_calculate_subtotal_isSet = !json[QString("calculate_subtotal")].isNull() && m_calculate_subtotal_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_customer_tax_class_ids_isValid = ::OpenAPI::fromJsonValue(m_customer_tax_class_ids, json[QString("customer_tax_class_ids")]);
    m_customer_tax_class_ids_isSet = !json[QString("customer_tax_class_ids")].isNull() && m_customer_tax_class_ids_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_product_tax_class_ids_isValid = ::OpenAPI::fromJsonValue(m_product_tax_class_ids, json[QString("product_tax_class_ids")]);
    m_product_tax_class_ids_isSet = !json[QString("product_tax_class_ids")].isNull() && m_product_tax_class_ids_isValid;

    m_tax_rate_ids_isValid = ::OpenAPI::fromJsonValue(m_tax_rate_ids, json[QString("tax_rate_ids")]);
    m_tax_rate_ids_isSet = !json[QString("tax_rate_ids")].isNull() && m_tax_rate_ids_isValid;
}

QString OAITax_data_tax_rule_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITax_data_tax_rule_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_calculate_subtotal_isSet) {
        obj.insert(QString("calculate_subtotal"), ::OpenAPI::toJsonValue(m_calculate_subtotal));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_customer_tax_class_ids.size() > 0) {
        obj.insert(QString("customer_tax_class_ids"), ::OpenAPI::toJsonValue(m_customer_tax_class_ids));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_product_tax_class_ids.size() > 0) {
        obj.insert(QString("product_tax_class_ids"), ::OpenAPI::toJsonValue(m_product_tax_class_ids));
    }
    if (m_tax_rate_ids.size() > 0) {
        obj.insert(QString("tax_rate_ids"), ::OpenAPI::toJsonValue(m_tax_rate_ids));
    }
    return obj;
}

bool OAITax_data_tax_rule_interface::isCalculateSubtotal() const {
    return m_calculate_subtotal;
}
void OAITax_data_tax_rule_interface::setCalculateSubtotal(const bool &calculate_subtotal) {
    m_calculate_subtotal = calculate_subtotal;
    m_calculate_subtotal_isSet = true;
}

bool OAITax_data_tax_rule_interface::is_calculate_subtotal_Set() const{
    return m_calculate_subtotal_isSet;
}

bool OAITax_data_tax_rule_interface::is_calculate_subtotal_Valid() const{
    return m_calculate_subtotal_isValid;
}

QString OAITax_data_tax_rule_interface::getCode() const {
    return m_code;
}
void OAITax_data_tax_rule_interface::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAITax_data_tax_rule_interface::is_code_Set() const{
    return m_code_isSet;
}

bool OAITax_data_tax_rule_interface::is_code_Valid() const{
    return m_code_isValid;
}

QList<qint32> OAITax_data_tax_rule_interface::getCustomerTaxClassIds() const {
    return m_customer_tax_class_ids;
}
void OAITax_data_tax_rule_interface::setCustomerTaxClassIds(const QList<qint32> &customer_tax_class_ids) {
    m_customer_tax_class_ids = customer_tax_class_ids;
    m_customer_tax_class_ids_isSet = true;
}

bool OAITax_data_tax_rule_interface::is_customer_tax_class_ids_Set() const{
    return m_customer_tax_class_ids_isSet;
}

bool OAITax_data_tax_rule_interface::is_customer_tax_class_ids_Valid() const{
    return m_customer_tax_class_ids_isValid;
}

OAIObject OAITax_data_tax_rule_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAITax_data_tax_rule_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAITax_data_tax_rule_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAITax_data_tax_rule_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

qint32 OAITax_data_tax_rule_interface::getId() const {
    return m_id;
}
void OAITax_data_tax_rule_interface::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITax_data_tax_rule_interface::is_id_Set() const{
    return m_id_isSet;
}

bool OAITax_data_tax_rule_interface::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAITax_data_tax_rule_interface::getPosition() const {
    return m_position;
}
void OAITax_data_tax_rule_interface::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAITax_data_tax_rule_interface::is_position_Set() const{
    return m_position_isSet;
}

bool OAITax_data_tax_rule_interface::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAITax_data_tax_rule_interface::getPriority() const {
    return m_priority;
}
void OAITax_data_tax_rule_interface::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAITax_data_tax_rule_interface::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAITax_data_tax_rule_interface::is_priority_Valid() const{
    return m_priority_isValid;
}

QList<qint32> OAITax_data_tax_rule_interface::getProductTaxClassIds() const {
    return m_product_tax_class_ids;
}
void OAITax_data_tax_rule_interface::setProductTaxClassIds(const QList<qint32> &product_tax_class_ids) {
    m_product_tax_class_ids = product_tax_class_ids;
    m_product_tax_class_ids_isSet = true;
}

bool OAITax_data_tax_rule_interface::is_product_tax_class_ids_Set() const{
    return m_product_tax_class_ids_isSet;
}

bool OAITax_data_tax_rule_interface::is_product_tax_class_ids_Valid() const{
    return m_product_tax_class_ids_isValid;
}

QList<qint32> OAITax_data_tax_rule_interface::getTaxRateIds() const {
    return m_tax_rate_ids;
}
void OAITax_data_tax_rule_interface::setTaxRateIds(const QList<qint32> &tax_rate_ids) {
    m_tax_rate_ids = tax_rate_ids;
    m_tax_rate_ids_isSet = true;
}

bool OAITax_data_tax_rule_interface::is_tax_rate_ids_Set() const{
    return m_tax_rate_ids_isSet;
}

bool OAITax_data_tax_rule_interface::is_tax_rate_ids_Valid() const{
    return m_tax_rate_ids_isValid;
}

bool OAITax_data_tax_rule_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculate_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_tax_class_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_tax_class_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rate_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITax_data_tax_rule_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_customer_tax_class_ids_isValid && m_position_isValid && m_priority_isValid && m_product_tax_class_ids_isValid && m_tax_rate_ids_isValid && true;
}

} // namespace OpenAPI
