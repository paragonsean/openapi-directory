/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQuote_data_totals_extension_interface.h
 *
 * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsInterface
 */

#ifndef OAIQuote_data_totals_extension_interface_H
#define OAIQuote_data_totals_extension_interface_H

#include <QJsonObject>

#include "OAINegotiable_quote_data_negotiable_quote_totals_interface.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINegotiable_quote_data_negotiable_quote_totals_interface;

class OAIQuote_data_totals_extension_interface : public OAIObject {
public:
    OAIQuote_data_totals_extension_interface();
    OAIQuote_data_totals_extension_interface(QString json);
    ~OAIQuote_data_totals_extension_interface() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getBaseCustomerBalanceAmount() const;
    void setBaseCustomerBalanceAmount(const double &base_customer_balance_amount);
    bool is_base_customer_balance_amount_Set() const;
    bool is_base_customer_balance_amount_Valid() const;

    double getBaseRewardCurrencyAmount() const;
    void setBaseRewardCurrencyAmount(const double &base_reward_currency_amount);
    bool is_base_reward_currency_amount_Set() const;
    bool is_base_reward_currency_amount_Valid() const;

    QString getCouponLabel() const;
    void setCouponLabel(const QString &coupon_label);
    bool is_coupon_label_Set() const;
    bool is_coupon_label_Valid() const;

    double getCustomerBalanceAmount() const;
    void setCustomerBalanceAmount(const double &customer_balance_amount);
    bool is_customer_balance_amount_Set() const;
    bool is_customer_balance_amount_Valid() const;

    OAINegotiable_quote_data_negotiable_quote_totals_interface getNegotiableQuoteTotals() const;
    void setNegotiableQuoteTotals(const OAINegotiable_quote_data_negotiable_quote_totals_interface &negotiable_quote_totals);
    bool is_negotiable_quote_totals_Set() const;
    bool is_negotiable_quote_totals_Valid() const;

    double getRewardCurrencyAmount() const;
    void setRewardCurrencyAmount(const double &reward_currency_amount);
    bool is_reward_currency_amount_Set() const;
    bool is_reward_currency_amount_Valid() const;

    double getRewardPointsBalance() const;
    void setRewardPointsBalance(const double &reward_points_balance);
    bool is_reward_points_balance_Set() const;
    bool is_reward_points_balance_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_base_customer_balance_amount;
    bool m_base_customer_balance_amount_isSet;
    bool m_base_customer_balance_amount_isValid;

    double m_base_reward_currency_amount;
    bool m_base_reward_currency_amount_isSet;
    bool m_base_reward_currency_amount_isValid;

    QString m_coupon_label;
    bool m_coupon_label_isSet;
    bool m_coupon_label_isValid;

    double m_customer_balance_amount;
    bool m_customer_balance_amount_isSet;
    bool m_customer_balance_amount_isValid;

    OAINegotiable_quote_data_negotiable_quote_totals_interface m_negotiable_quote_totals;
    bool m_negotiable_quote_totals_isSet;
    bool m_negotiable_quote_totals_isValid;

    double m_reward_currency_amount;
    bool m_reward_currency_amount_isSet;
    bool m_reward_currency_amount_isValid;

    double m_reward_points_balance;
    bool m_reward_points_balance_isSet;
    bool m_reward_points_balance_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQuote_data_totals_extension_interface)

#endif // OAIQuote_data_totals_extension_interface_H
