/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompanyAclV1AssignRolesPut_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompanyAclV1AssignRolesPut_request::OAICompanyAclV1AssignRolesPut_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompanyAclV1AssignRolesPut_request::OAICompanyAclV1AssignRolesPut_request() {
    this->initializeModel();
}

OAICompanyAclV1AssignRolesPut_request::~OAICompanyAclV1AssignRolesPut_request() {}

void OAICompanyAclV1AssignRolesPut_request::initializeModel() {

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAICompanyAclV1AssignRolesPut_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompanyAclV1AssignRolesPut_request::fromJsonObject(QJsonObject json) {

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAICompanyAclV1AssignRolesPut_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompanyAclV1AssignRolesPut_request::asJsonObject() const {
    QJsonObject obj;
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QList<OAICompany_data_role_interface> OAICompanyAclV1AssignRolesPut_request::getRoles() const {
    return m_roles;
}
void OAICompanyAclV1AssignRolesPut_request::setRoles(const QList<OAICompany_data_role_interface> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAICompanyAclV1AssignRolesPut_request::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAICompanyAclV1AssignRolesPut_request::is_roles_Valid() const{
    return m_roles_isValid;
}

qint32 OAICompanyAclV1AssignRolesPut_request::getUserId() const {
    return m_user_id;
}
void OAICompanyAclV1AssignRolesPut_request::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAICompanyAclV1AssignRolesPut_request::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAICompanyAclV1AssignRolesPut_request::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAICompanyAclV1AssignRolesPut_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompanyAclV1AssignRolesPut_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_roles_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
