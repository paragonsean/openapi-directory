/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError_errors_item.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError_errors_item::OAIError_errors_item(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError_errors_item::OAIError_errors_item() {
    this->initializeModel();
}

OAIError_errors_item::~OAIError_errors_item() {}

void OAIError_errors_item::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIError_errors_item::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError_errors_item::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAIError_errors_item::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError_errors_item::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

QString OAIError_errors_item::getMessage() const {
    return m_message;
}
void OAIError_errors_item::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIError_errors_item::is_message_Set() const{
    return m_message_isSet;
}

bool OAIError_errors_item::is_message_Valid() const{
    return m_message_isValid;
}

QList<OAIError_parameters_item> OAIError_errors_item::getParameters() const {
    return m_parameters;
}
void OAIError_errors_item::setParameters(const QList<OAIError_parameters_item> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIError_errors_item::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIError_errors_item::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIError_errors_item::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError_errors_item::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
