/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISales_data_shipment_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISales_data_shipment_interface::OAISales_data_shipment_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISales_data_shipment_interface::OAISales_data_shipment_interface() {
    this->initializeModel();
}

OAISales_data_shipment_interface::~OAISales_data_shipment_interface() {}

void OAISales_data_shipment_interface::initializeModel() {

    m_billing_address_id_isSet = false;
    m_billing_address_id_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_email_sent_isSet = false;
    m_email_sent_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_increment_id_isSet = false;
    m_increment_id_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_packages_isSet = false;
    m_packages_isValid = false;

    m_shipment_status_isSet = false;
    m_shipment_status_isValid = false;

    m_shipping_address_id_isSet = false;
    m_shipping_address_id_isValid = false;

    m_shipping_label_isSet = false;
    m_shipping_label_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_total_qty_isSet = false;
    m_total_qty_isValid = false;

    m_total_weight_isSet = false;
    m_total_weight_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAISales_data_shipment_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISales_data_shipment_interface::fromJsonObject(QJsonObject json) {

    m_billing_address_id_isValid = ::OpenAPI::fromJsonValue(m_billing_address_id, json[QString("billing_address_id")]);
    m_billing_address_id_isSet = !json[QString("billing_address_id")].isNull() && m_billing_address_id_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_email_sent_isValid = ::OpenAPI::fromJsonValue(m_email_sent, json[QString("email_sent")]);
    m_email_sent_isSet = !json[QString("email_sent")].isNull() && m_email_sent_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_increment_id_isValid = ::OpenAPI::fromJsonValue(m_increment_id, json[QString("increment_id")]);
    m_increment_id_isSet = !json[QString("increment_id")].isNull() && m_increment_id_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_packages_isValid = ::OpenAPI::fromJsonValue(m_packages, json[QString("packages")]);
    m_packages_isSet = !json[QString("packages")].isNull() && m_packages_isValid;

    m_shipment_status_isValid = ::OpenAPI::fromJsonValue(m_shipment_status, json[QString("shipment_status")]);
    m_shipment_status_isSet = !json[QString("shipment_status")].isNull() && m_shipment_status_isValid;

    m_shipping_address_id_isValid = ::OpenAPI::fromJsonValue(m_shipping_address_id, json[QString("shipping_address_id")]);
    m_shipping_address_id_isSet = !json[QString("shipping_address_id")].isNull() && m_shipping_address_id_isValid;

    m_shipping_label_isValid = ::OpenAPI::fromJsonValue(m_shipping_label, json[QString("shipping_label")]);
    m_shipping_label_isSet = !json[QString("shipping_label")].isNull() && m_shipping_label_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_total_qty_isValid = ::OpenAPI::fromJsonValue(m_total_qty, json[QString("total_qty")]);
    m_total_qty_isSet = !json[QString("total_qty")].isNull() && m_total_qty_isValid;

    m_total_weight_isValid = ::OpenAPI::fromJsonValue(m_total_weight, json[QString("total_weight")]);
    m_total_weight_isSet = !json[QString("total_weight")].isNull() && m_total_weight_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAISales_data_shipment_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISales_data_shipment_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_address_id_isSet) {
        obj.insert(QString("billing_address_id"), ::OpenAPI::toJsonValue(m_billing_address_id));
    }
    if (m_comments.size() > 0) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_email_sent_isSet) {
        obj.insert(QString("email_sent"), ::OpenAPI::toJsonValue(m_email_sent));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_extension_attributes.isSet()) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_increment_id_isSet) {
        obj.insert(QString("increment_id"), ::OpenAPI::toJsonValue(m_increment_id));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_packages.size() > 0) {
        obj.insert(QString("packages"), ::OpenAPI::toJsonValue(m_packages));
    }
    if (m_shipment_status_isSet) {
        obj.insert(QString("shipment_status"), ::OpenAPI::toJsonValue(m_shipment_status));
    }
    if (m_shipping_address_id_isSet) {
        obj.insert(QString("shipping_address_id"), ::OpenAPI::toJsonValue(m_shipping_address_id));
    }
    if (m_shipping_label_isSet) {
        obj.insert(QString("shipping_label"), ::OpenAPI::toJsonValue(m_shipping_label));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_total_qty_isSet) {
        obj.insert(QString("total_qty"), ::OpenAPI::toJsonValue(m_total_qty));
    }
    if (m_total_weight_isSet) {
        obj.insert(QString("total_weight"), ::OpenAPI::toJsonValue(m_total_weight));
    }
    if (m_tracks.size() > 0) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

qint32 OAISales_data_shipment_interface::getBillingAddressId() const {
    return m_billing_address_id;
}
void OAISales_data_shipment_interface::setBillingAddressId(const qint32 &billing_address_id) {
    m_billing_address_id = billing_address_id;
    m_billing_address_id_isSet = true;
}

bool OAISales_data_shipment_interface::is_billing_address_id_Set() const{
    return m_billing_address_id_isSet;
}

bool OAISales_data_shipment_interface::is_billing_address_id_Valid() const{
    return m_billing_address_id_isValid;
}

QList<OAISales_data_shipment_comment_interface> OAISales_data_shipment_interface::getComments() const {
    return m_comments;
}
void OAISales_data_shipment_interface::setComments(const QList<OAISales_data_shipment_comment_interface> &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAISales_data_shipment_interface::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAISales_data_shipment_interface::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAISales_data_shipment_interface::getCreatedAt() const {
    return m_created_at;
}
void OAISales_data_shipment_interface::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISales_data_shipment_interface::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISales_data_shipment_interface::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAISales_data_shipment_interface::getCustomerId() const {
    return m_customer_id;
}
void OAISales_data_shipment_interface::setCustomerId(const qint32 &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAISales_data_shipment_interface::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAISales_data_shipment_interface::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

qint32 OAISales_data_shipment_interface::getEmailSent() const {
    return m_email_sent;
}
void OAISales_data_shipment_interface::setEmailSent(const qint32 &email_sent) {
    m_email_sent = email_sent;
    m_email_sent_isSet = true;
}

bool OAISales_data_shipment_interface::is_email_sent_Set() const{
    return m_email_sent_isSet;
}

bool OAISales_data_shipment_interface::is_email_sent_Valid() const{
    return m_email_sent_isValid;
}

qint32 OAISales_data_shipment_interface::getEntityId() const {
    return m_entity_id;
}
void OAISales_data_shipment_interface::setEntityId(const qint32 &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAISales_data_shipment_interface::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAISales_data_shipment_interface::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAISales_data_shipment_extension_interface OAISales_data_shipment_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAISales_data_shipment_interface::setExtensionAttributes(const OAISales_data_shipment_extension_interface &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAISales_data_shipment_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAISales_data_shipment_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

QString OAISales_data_shipment_interface::getIncrementId() const {
    return m_increment_id;
}
void OAISales_data_shipment_interface::setIncrementId(const QString &increment_id) {
    m_increment_id = increment_id;
    m_increment_id_isSet = true;
}

bool OAISales_data_shipment_interface::is_increment_id_Set() const{
    return m_increment_id_isSet;
}

bool OAISales_data_shipment_interface::is_increment_id_Valid() const{
    return m_increment_id_isValid;
}

QList<OAISales_data_shipment_item_interface> OAISales_data_shipment_interface::getItems() const {
    return m_items;
}
void OAISales_data_shipment_interface::setItems(const QList<OAISales_data_shipment_item_interface> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISales_data_shipment_interface::is_items_Set() const{
    return m_items_isSet;
}

bool OAISales_data_shipment_interface::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAISales_data_shipment_interface::getOrderId() const {
    return m_order_id;
}
void OAISales_data_shipment_interface::setOrderId(const qint32 &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAISales_data_shipment_interface::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAISales_data_shipment_interface::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QList<OAISales_data_shipment_package_interface> OAISales_data_shipment_interface::getPackages() const {
    return m_packages;
}
void OAISales_data_shipment_interface::setPackages(const QList<OAISales_data_shipment_package_interface> &packages) {
    m_packages = packages;
    m_packages_isSet = true;
}

bool OAISales_data_shipment_interface::is_packages_Set() const{
    return m_packages_isSet;
}

bool OAISales_data_shipment_interface::is_packages_Valid() const{
    return m_packages_isValid;
}

qint32 OAISales_data_shipment_interface::getShipmentStatus() const {
    return m_shipment_status;
}
void OAISales_data_shipment_interface::setShipmentStatus(const qint32 &shipment_status) {
    m_shipment_status = shipment_status;
    m_shipment_status_isSet = true;
}

bool OAISales_data_shipment_interface::is_shipment_status_Set() const{
    return m_shipment_status_isSet;
}

bool OAISales_data_shipment_interface::is_shipment_status_Valid() const{
    return m_shipment_status_isValid;
}

qint32 OAISales_data_shipment_interface::getShippingAddressId() const {
    return m_shipping_address_id;
}
void OAISales_data_shipment_interface::setShippingAddressId(const qint32 &shipping_address_id) {
    m_shipping_address_id = shipping_address_id;
    m_shipping_address_id_isSet = true;
}

bool OAISales_data_shipment_interface::is_shipping_address_id_Set() const{
    return m_shipping_address_id_isSet;
}

bool OAISales_data_shipment_interface::is_shipping_address_id_Valid() const{
    return m_shipping_address_id_isValid;
}

QString OAISales_data_shipment_interface::getShippingLabel() const {
    return m_shipping_label;
}
void OAISales_data_shipment_interface::setShippingLabel(const QString &shipping_label) {
    m_shipping_label = shipping_label;
    m_shipping_label_isSet = true;
}

bool OAISales_data_shipment_interface::is_shipping_label_Set() const{
    return m_shipping_label_isSet;
}

bool OAISales_data_shipment_interface::is_shipping_label_Valid() const{
    return m_shipping_label_isValid;
}

qint32 OAISales_data_shipment_interface::getStoreId() const {
    return m_store_id;
}
void OAISales_data_shipment_interface::setStoreId(const qint32 &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAISales_data_shipment_interface::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAISales_data_shipment_interface::is_store_id_Valid() const{
    return m_store_id_isValid;
}

double OAISales_data_shipment_interface::getTotalQty() const {
    return m_total_qty;
}
void OAISales_data_shipment_interface::setTotalQty(const double &total_qty) {
    m_total_qty = total_qty;
    m_total_qty_isSet = true;
}

bool OAISales_data_shipment_interface::is_total_qty_Set() const{
    return m_total_qty_isSet;
}

bool OAISales_data_shipment_interface::is_total_qty_Valid() const{
    return m_total_qty_isValid;
}

double OAISales_data_shipment_interface::getTotalWeight() const {
    return m_total_weight;
}
void OAISales_data_shipment_interface::setTotalWeight(const double &total_weight) {
    m_total_weight = total_weight;
    m_total_weight_isSet = true;
}

bool OAISales_data_shipment_interface::is_total_weight_Set() const{
    return m_total_weight_isSet;
}

bool OAISales_data_shipment_interface::is_total_weight_Valid() const{
    return m_total_weight_isValid;
}

QList<OAISales_data_shipment_track_interface> OAISales_data_shipment_interface::getTracks() const {
    return m_tracks;
}
void OAISales_data_shipment_interface::setTracks(const QList<OAISales_data_shipment_track_interface> &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAISales_data_shipment_interface::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAISales_data_shipment_interface::is_tracks_Valid() const{
    return m_tracks_isValid;
}

QString OAISales_data_shipment_interface::getUpdatedAt() const {
    return m_updated_at;
}
void OAISales_data_shipment_interface::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISales_data_shipment_interface::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISales_data_shipment_interface::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAISales_data_shipment_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_increment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISales_data_shipment_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comments_isValid && m_items_isValid && m_order_id_isValid && m_tracks_isValid && true;
}

} // namespace OpenAPI
