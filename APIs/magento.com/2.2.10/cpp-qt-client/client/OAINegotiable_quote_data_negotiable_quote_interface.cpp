/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINegotiable_quote_data_negotiable_quote_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINegotiable_quote_data_negotiable_quote_interface::OAINegotiable_quote_data_negotiable_quote_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINegotiable_quote_data_negotiable_quote_interface::OAINegotiable_quote_data_negotiable_quote_interface() {
    this->initializeModel();
}

OAINegotiable_quote_data_negotiable_quote_interface::~OAINegotiable_quote_data_negotiable_quote_interface() {}

void OAINegotiable_quote_data_negotiable_quote_interface::initializeModel() {

    m_applied_rule_ids_isSet = false;
    m_applied_rule_ids_isValid = false;

    m_base_negotiated_total_price_isSet = false;
    m_base_negotiated_total_price_isValid = false;

    m_base_original_total_price_isSet = false;
    m_base_original_total_price_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_creator_type_isSet = false;
    m_creator_type_isValid = false;

    m_deleted_sku_isSet = false;
    m_deleted_sku_isValid = false;

    m_email_notification_status_isSet = false;
    m_email_notification_status_isValid = false;

    m_expiration_period_isSet = false;
    m_expiration_period_isValid = false;

    m_extension_attributes_isSet = false;
    m_extension_attributes_isValid = false;

    m_has_unconfirmed_changes_isSet = false;
    m_has_unconfirmed_changes_isValid = false;

    m_is_address_draft_isSet = false;
    m_is_address_draft_isValid = false;

    m_is_customer_price_changed_isSet = false;
    m_is_customer_price_changed_isValid = false;

    m_is_regular_quote_isSet = false;
    m_is_regular_quote_isValid = false;

    m_is_shipping_tax_changed_isSet = false;
    m_is_shipping_tax_changed_isValid = false;

    m_negotiated_price_type_isSet = false;
    m_negotiated_price_type_isValid = false;

    m_negotiated_price_value_isSet = false;
    m_negotiated_price_value_isValid = false;

    m_negotiated_total_price_isSet = false;
    m_negotiated_total_price_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_original_total_price_isSet = false;
    m_original_total_price_isValid = false;

    m_quote_id_isSet = false;
    m_quote_id_isValid = false;

    m_quote_name_isSet = false;
    m_quote_name_isValid = false;

    m_shipping_price_isSet = false;
    m_shipping_price_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAINegotiable_quote_data_negotiable_quote_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINegotiable_quote_data_negotiable_quote_interface::fromJsonObject(QJsonObject json) {

    m_applied_rule_ids_isValid = ::OpenAPI::fromJsonValue(m_applied_rule_ids, json[QString("applied_rule_ids")]);
    m_applied_rule_ids_isSet = !json[QString("applied_rule_ids")].isNull() && m_applied_rule_ids_isValid;

    m_base_negotiated_total_price_isValid = ::OpenAPI::fromJsonValue(m_base_negotiated_total_price, json[QString("base_negotiated_total_price")]);
    m_base_negotiated_total_price_isSet = !json[QString("base_negotiated_total_price")].isNull() && m_base_negotiated_total_price_isValid;

    m_base_original_total_price_isValid = ::OpenAPI::fromJsonValue(m_base_original_total_price, json[QString("base_original_total_price")]);
    m_base_original_total_price_isSet = !json[QString("base_original_total_price")].isNull() && m_base_original_total_price_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creator_id")]);
    m_creator_id_isSet = !json[QString("creator_id")].isNull() && m_creator_id_isValid;

    m_creator_type_isValid = ::OpenAPI::fromJsonValue(m_creator_type, json[QString("creator_type")]);
    m_creator_type_isSet = !json[QString("creator_type")].isNull() && m_creator_type_isValid;

    m_deleted_sku_isValid = ::OpenAPI::fromJsonValue(m_deleted_sku, json[QString("deleted_sku")]);
    m_deleted_sku_isSet = !json[QString("deleted_sku")].isNull() && m_deleted_sku_isValid;

    m_email_notification_status_isValid = ::OpenAPI::fromJsonValue(m_email_notification_status, json[QString("email_notification_status")]);
    m_email_notification_status_isSet = !json[QString("email_notification_status")].isNull() && m_email_notification_status_isValid;

    m_expiration_period_isValid = ::OpenAPI::fromJsonValue(m_expiration_period, json[QString("expiration_period")]);
    m_expiration_period_isSet = !json[QString("expiration_period")].isNull() && m_expiration_period_isValid;

    m_extension_attributes_isValid = ::OpenAPI::fromJsonValue(m_extension_attributes, json[QString("extension_attributes")]);
    m_extension_attributes_isSet = !json[QString("extension_attributes")].isNull() && m_extension_attributes_isValid;

    m_has_unconfirmed_changes_isValid = ::OpenAPI::fromJsonValue(m_has_unconfirmed_changes, json[QString("has_unconfirmed_changes")]);
    m_has_unconfirmed_changes_isSet = !json[QString("has_unconfirmed_changes")].isNull() && m_has_unconfirmed_changes_isValid;

    m_is_address_draft_isValid = ::OpenAPI::fromJsonValue(m_is_address_draft, json[QString("is_address_draft")]);
    m_is_address_draft_isSet = !json[QString("is_address_draft")].isNull() && m_is_address_draft_isValid;

    m_is_customer_price_changed_isValid = ::OpenAPI::fromJsonValue(m_is_customer_price_changed, json[QString("is_customer_price_changed")]);
    m_is_customer_price_changed_isSet = !json[QString("is_customer_price_changed")].isNull() && m_is_customer_price_changed_isValid;

    m_is_regular_quote_isValid = ::OpenAPI::fromJsonValue(m_is_regular_quote, json[QString("is_regular_quote")]);
    m_is_regular_quote_isSet = !json[QString("is_regular_quote")].isNull() && m_is_regular_quote_isValid;

    m_is_shipping_tax_changed_isValid = ::OpenAPI::fromJsonValue(m_is_shipping_tax_changed, json[QString("is_shipping_tax_changed")]);
    m_is_shipping_tax_changed_isSet = !json[QString("is_shipping_tax_changed")].isNull() && m_is_shipping_tax_changed_isValid;

    m_negotiated_price_type_isValid = ::OpenAPI::fromJsonValue(m_negotiated_price_type, json[QString("negotiated_price_type")]);
    m_negotiated_price_type_isSet = !json[QString("negotiated_price_type")].isNull() && m_negotiated_price_type_isValid;

    m_negotiated_price_value_isValid = ::OpenAPI::fromJsonValue(m_negotiated_price_value, json[QString("negotiated_price_value")]);
    m_negotiated_price_value_isSet = !json[QString("negotiated_price_value")].isNull() && m_negotiated_price_value_isValid;

    m_negotiated_total_price_isValid = ::OpenAPI::fromJsonValue(m_negotiated_total_price, json[QString("negotiated_total_price")]);
    m_negotiated_total_price_isSet = !json[QString("negotiated_total_price")].isNull() && m_negotiated_total_price_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_original_total_price_isValid = ::OpenAPI::fromJsonValue(m_original_total_price, json[QString("original_total_price")]);
    m_original_total_price_isSet = !json[QString("original_total_price")].isNull() && m_original_total_price_isValid;

    m_quote_id_isValid = ::OpenAPI::fromJsonValue(m_quote_id, json[QString("quote_id")]);
    m_quote_id_isSet = !json[QString("quote_id")].isNull() && m_quote_id_isValid;

    m_quote_name_isValid = ::OpenAPI::fromJsonValue(m_quote_name, json[QString("quote_name")]);
    m_quote_name_isSet = !json[QString("quote_name")].isNull() && m_quote_name_isValid;

    m_shipping_price_isValid = ::OpenAPI::fromJsonValue(m_shipping_price, json[QString("shipping_price")]);
    m_shipping_price_isSet = !json[QString("shipping_price")].isNull() && m_shipping_price_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAINegotiable_quote_data_negotiable_quote_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINegotiable_quote_data_negotiable_quote_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_rule_ids_isSet) {
        obj.insert(QString("applied_rule_ids"), ::OpenAPI::toJsonValue(m_applied_rule_ids));
    }
    if (m_base_negotiated_total_price_isSet) {
        obj.insert(QString("base_negotiated_total_price"), ::OpenAPI::toJsonValue(m_base_negotiated_total_price));
    }
    if (m_base_original_total_price_isSet) {
        obj.insert(QString("base_original_total_price"), ::OpenAPI::toJsonValue(m_base_original_total_price));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creator_id"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_creator_type_isSet) {
        obj.insert(QString("creator_type"), ::OpenAPI::toJsonValue(m_creator_type));
    }
    if (m_deleted_sku_isSet) {
        obj.insert(QString("deleted_sku"), ::OpenAPI::toJsonValue(m_deleted_sku));
    }
    if (m_email_notification_status_isSet) {
        obj.insert(QString("email_notification_status"), ::OpenAPI::toJsonValue(m_email_notification_status));
    }
    if (m_expiration_period_isSet) {
        obj.insert(QString("expiration_period"), ::OpenAPI::toJsonValue(m_expiration_period));
    }
    if (m_extension_attributes_isSet) {
        obj.insert(QString("extension_attributes"), ::OpenAPI::toJsonValue(m_extension_attributes));
    }
    if (m_has_unconfirmed_changes_isSet) {
        obj.insert(QString("has_unconfirmed_changes"), ::OpenAPI::toJsonValue(m_has_unconfirmed_changes));
    }
    if (m_is_address_draft_isSet) {
        obj.insert(QString("is_address_draft"), ::OpenAPI::toJsonValue(m_is_address_draft));
    }
    if (m_is_customer_price_changed_isSet) {
        obj.insert(QString("is_customer_price_changed"), ::OpenAPI::toJsonValue(m_is_customer_price_changed));
    }
    if (m_is_regular_quote_isSet) {
        obj.insert(QString("is_regular_quote"), ::OpenAPI::toJsonValue(m_is_regular_quote));
    }
    if (m_is_shipping_tax_changed_isSet) {
        obj.insert(QString("is_shipping_tax_changed"), ::OpenAPI::toJsonValue(m_is_shipping_tax_changed));
    }
    if (m_negotiated_price_type_isSet) {
        obj.insert(QString("negotiated_price_type"), ::OpenAPI::toJsonValue(m_negotiated_price_type));
    }
    if (m_negotiated_price_value_isSet) {
        obj.insert(QString("negotiated_price_value"), ::OpenAPI::toJsonValue(m_negotiated_price_value));
    }
    if (m_negotiated_total_price_isSet) {
        obj.insert(QString("negotiated_total_price"), ::OpenAPI::toJsonValue(m_negotiated_total_price));
    }
    if (m_notifications_isSet) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_original_total_price_isSet) {
        obj.insert(QString("original_total_price"), ::OpenAPI::toJsonValue(m_original_total_price));
    }
    if (m_quote_id_isSet) {
        obj.insert(QString("quote_id"), ::OpenAPI::toJsonValue(m_quote_id));
    }
    if (m_quote_name_isSet) {
        obj.insert(QString("quote_name"), ::OpenAPI::toJsonValue(m_quote_name));
    }
    if (m_shipping_price_isSet) {
        obj.insert(QString("shipping_price"), ::OpenAPI::toJsonValue(m_shipping_price));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAINegotiable_quote_data_negotiable_quote_interface::getAppliedRuleIds() const {
    return m_applied_rule_ids;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setAppliedRuleIds(const QString &applied_rule_ids) {
    m_applied_rule_ids = applied_rule_ids;
    m_applied_rule_ids_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_applied_rule_ids_Set() const{
    return m_applied_rule_ids_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_applied_rule_ids_Valid() const{
    return m_applied_rule_ids_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_interface::getBaseNegotiatedTotalPrice() const {
    return m_base_negotiated_total_price;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setBaseNegotiatedTotalPrice(const double &base_negotiated_total_price) {
    m_base_negotiated_total_price = base_negotiated_total_price;
    m_base_negotiated_total_price_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_base_negotiated_total_price_Set() const{
    return m_base_negotiated_total_price_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_base_negotiated_total_price_Valid() const{
    return m_base_negotiated_total_price_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_interface::getBaseOriginalTotalPrice() const {
    return m_base_original_total_price;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setBaseOriginalTotalPrice(const double &base_original_total_price) {
    m_base_original_total_price = base_original_total_price;
    m_base_original_total_price_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_base_original_total_price_Set() const{
    return m_base_original_total_price_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_base_original_total_price_Valid() const{
    return m_base_original_total_price_isValid;
}

qint32 OAINegotiable_quote_data_negotiable_quote_interface::getCreatorId() const {
    return m_creator_id;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setCreatorId(const qint32 &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

qint32 OAINegotiable_quote_data_negotiable_quote_interface::getCreatorType() const {
    return m_creator_type;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setCreatorType(const qint32 &creator_type) {
    m_creator_type = creator_type;
    m_creator_type_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_creator_type_Set() const{
    return m_creator_type_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_creator_type_Valid() const{
    return m_creator_type_isValid;
}

QString OAINegotiable_quote_data_negotiable_quote_interface::getDeletedSku() const {
    return m_deleted_sku;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setDeletedSku(const QString &deleted_sku) {
    m_deleted_sku = deleted_sku;
    m_deleted_sku_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_deleted_sku_Set() const{
    return m_deleted_sku_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_deleted_sku_Valid() const{
    return m_deleted_sku_isValid;
}

qint32 OAINegotiable_quote_data_negotiable_quote_interface::getEmailNotificationStatus() const {
    return m_email_notification_status;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setEmailNotificationStatus(const qint32 &email_notification_status) {
    m_email_notification_status = email_notification_status;
    m_email_notification_status_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_email_notification_status_Set() const{
    return m_email_notification_status_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_email_notification_status_Valid() const{
    return m_email_notification_status_isValid;
}

QString OAINegotiable_quote_data_negotiable_quote_interface::getExpirationPeriod() const {
    return m_expiration_period;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setExpirationPeriod(const QString &expiration_period) {
    m_expiration_period = expiration_period;
    m_expiration_period_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_expiration_period_Set() const{
    return m_expiration_period_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_expiration_period_Valid() const{
    return m_expiration_period_isValid;
}

OAIObject OAINegotiable_quote_data_negotiable_quote_interface::getExtensionAttributes() const {
    return m_extension_attributes;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setExtensionAttributes(const OAIObject &extension_attributes) {
    m_extension_attributes = extension_attributes;
    m_extension_attributes_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_extension_attributes_Set() const{
    return m_extension_attributes_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_extension_attributes_Valid() const{
    return m_extension_attributes_isValid;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::isHasUnconfirmedChanges() const {
    return m_has_unconfirmed_changes;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setHasUnconfirmedChanges(const bool &has_unconfirmed_changes) {
    m_has_unconfirmed_changes = has_unconfirmed_changes;
    m_has_unconfirmed_changes_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_has_unconfirmed_changes_Set() const{
    return m_has_unconfirmed_changes_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_has_unconfirmed_changes_Valid() const{
    return m_has_unconfirmed_changes_isValid;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::isIsAddressDraft() const {
    return m_is_address_draft;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setIsAddressDraft(const bool &is_address_draft) {
    m_is_address_draft = is_address_draft;
    m_is_address_draft_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_is_address_draft_Set() const{
    return m_is_address_draft_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_is_address_draft_Valid() const{
    return m_is_address_draft_isValid;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::isIsCustomerPriceChanged() const {
    return m_is_customer_price_changed;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setIsCustomerPriceChanged(const bool &is_customer_price_changed) {
    m_is_customer_price_changed = is_customer_price_changed;
    m_is_customer_price_changed_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_is_customer_price_changed_Set() const{
    return m_is_customer_price_changed_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_is_customer_price_changed_Valid() const{
    return m_is_customer_price_changed_isValid;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::isIsRegularQuote() const {
    return m_is_regular_quote;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setIsRegularQuote(const bool &is_regular_quote) {
    m_is_regular_quote = is_regular_quote;
    m_is_regular_quote_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_is_regular_quote_Set() const{
    return m_is_regular_quote_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_is_regular_quote_Valid() const{
    return m_is_regular_quote_isValid;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::isIsShippingTaxChanged() const {
    return m_is_shipping_tax_changed;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setIsShippingTaxChanged(const bool &is_shipping_tax_changed) {
    m_is_shipping_tax_changed = is_shipping_tax_changed;
    m_is_shipping_tax_changed_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_is_shipping_tax_changed_Set() const{
    return m_is_shipping_tax_changed_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_is_shipping_tax_changed_Valid() const{
    return m_is_shipping_tax_changed_isValid;
}

qint32 OAINegotiable_quote_data_negotiable_quote_interface::getNegotiatedPriceType() const {
    return m_negotiated_price_type;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setNegotiatedPriceType(const qint32 &negotiated_price_type) {
    m_negotiated_price_type = negotiated_price_type;
    m_negotiated_price_type_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_negotiated_price_type_Set() const{
    return m_negotiated_price_type_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_negotiated_price_type_Valid() const{
    return m_negotiated_price_type_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_interface::getNegotiatedPriceValue() const {
    return m_negotiated_price_value;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setNegotiatedPriceValue(const double &negotiated_price_value) {
    m_negotiated_price_value = negotiated_price_value;
    m_negotiated_price_value_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_negotiated_price_value_Set() const{
    return m_negotiated_price_value_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_negotiated_price_value_Valid() const{
    return m_negotiated_price_value_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_interface::getNegotiatedTotalPrice() const {
    return m_negotiated_total_price;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setNegotiatedTotalPrice(const double &negotiated_total_price) {
    m_negotiated_total_price = negotiated_total_price;
    m_negotiated_total_price_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_negotiated_total_price_Set() const{
    return m_negotiated_total_price_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_negotiated_total_price_Valid() const{
    return m_negotiated_total_price_isValid;
}

qint32 OAINegotiable_quote_data_negotiable_quote_interface::getNotifications() const {
    return m_notifications;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setNotifications(const qint32 &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_notifications_Valid() const{
    return m_notifications_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_interface::getOriginalTotalPrice() const {
    return m_original_total_price;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setOriginalTotalPrice(const double &original_total_price) {
    m_original_total_price = original_total_price;
    m_original_total_price_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_original_total_price_Set() const{
    return m_original_total_price_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_original_total_price_Valid() const{
    return m_original_total_price_isValid;
}

qint32 OAINegotiable_quote_data_negotiable_quote_interface::getQuoteId() const {
    return m_quote_id;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setQuoteId(const qint32 &quote_id) {
    m_quote_id = quote_id;
    m_quote_id_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_quote_id_Set() const{
    return m_quote_id_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_quote_id_Valid() const{
    return m_quote_id_isValid;
}

QString OAINegotiable_quote_data_negotiable_quote_interface::getQuoteName() const {
    return m_quote_name;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setQuoteName(const QString &quote_name) {
    m_quote_name = quote_name;
    m_quote_name_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_quote_name_Set() const{
    return m_quote_name_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_quote_name_Valid() const{
    return m_quote_name_isValid;
}

double OAINegotiable_quote_data_negotiable_quote_interface::getShippingPrice() const {
    return m_shipping_price;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setShippingPrice(const double &shipping_price) {
    m_shipping_price = shipping_price;
    m_shipping_price_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_shipping_price_Set() const{
    return m_shipping_price_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_shipping_price_Valid() const{
    return m_shipping_price_isValid;
}

QString OAINegotiable_quote_data_negotiable_quote_interface::getStatus() const {
    return m_status;
}
void OAINegotiable_quote_data_negotiable_quote_interface::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_status_Set() const{
    return m_status_isSet;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::is_status_Valid() const{
    return m_status_isValid;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_rule_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_negotiated_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_original_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_notification_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_unconfirmed_changes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_address_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_customer_price_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_regular_quote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shipping_tax_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negotiated_price_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negotiated_price_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negotiated_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_total_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINegotiable_quote_data_negotiable_quote_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_applied_rule_ids_isValid && m_creator_id_isValid && m_creator_type_isValid && m_deleted_sku_isValid && m_email_notification_status_isValid && m_expiration_period_isValid && m_has_unconfirmed_changes_isValid && m_is_address_draft_isValid && m_is_customer_price_changed_isValid && m_is_regular_quote_isValid && m_is_shipping_tax_changed_isValid && m_negotiated_price_type_isValid && m_negotiated_price_value_isValid && m_notifications_isValid && m_quote_id_isValid && m_quote_name_isValid && m_shipping_price_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
