/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemando_shipping_data_collection_point_search_request_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemando_shipping_data_collection_point_search_request_interface::OAITemando_shipping_data_collection_point_search_request_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemando_shipping_data_collection_point_search_request_interface::OAITemando_shipping_data_collection_point_search_request_interface() {
    this->initializeModel();
}

OAITemando_shipping_data_collection_point_search_request_interface::~OAITemando_shipping_data_collection_point_search_request_interface() {}

void OAITemando_shipping_data_collection_point_search_request_interface::initializeModel() {

    m_country_id_isSet = false;
    m_country_id_isValid = false;

    m_pending_isSet = false;
    m_pending_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;

    m_shipping_address_id_isSet = false;
    m_shipping_address_id_isValid = false;
}

void OAITemando_shipping_data_collection_point_search_request_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemando_shipping_data_collection_point_search_request_interface::fromJsonObject(QJsonObject json) {

    m_country_id_isValid = ::OpenAPI::fromJsonValue(m_country_id, json[QString("country_id")]);
    m_country_id_isSet = !json[QString("country_id")].isNull() && m_country_id_isValid;

    m_pending_isValid = ::OpenAPI::fromJsonValue(m_pending, json[QString("pending")]);
    m_pending_isSet = !json[QString("pending")].isNull() && m_pending_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("postcode")]);
    m_postcode_isSet = !json[QString("postcode")].isNull() && m_postcode_isValid;

    m_shipping_address_id_isValid = ::OpenAPI::fromJsonValue(m_shipping_address_id, json[QString("shipping_address_id")]);
    m_shipping_address_id_isSet = !json[QString("shipping_address_id")].isNull() && m_shipping_address_id_isValid;
}

QString OAITemando_shipping_data_collection_point_search_request_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemando_shipping_data_collection_point_search_request_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_country_id_isSet) {
        obj.insert(QString("country_id"), ::OpenAPI::toJsonValue(m_country_id));
    }
    if (m_pending_isSet) {
        obj.insert(QString("pending"), ::OpenAPI::toJsonValue(m_pending));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    if (m_shipping_address_id_isSet) {
        obj.insert(QString("shipping_address_id"), ::OpenAPI::toJsonValue(m_shipping_address_id));
    }
    return obj;
}

QString OAITemando_shipping_data_collection_point_search_request_interface::getCountryId() const {
    return m_country_id;
}
void OAITemando_shipping_data_collection_point_search_request_interface::setCountryId(const QString &country_id) {
    m_country_id = country_id;
    m_country_id_isSet = true;
}

bool OAITemando_shipping_data_collection_point_search_request_interface::is_country_id_Set() const{
    return m_country_id_isSet;
}

bool OAITemando_shipping_data_collection_point_search_request_interface::is_country_id_Valid() const{
    return m_country_id_isValid;
}

bool OAITemando_shipping_data_collection_point_search_request_interface::isPending() const {
    return m_pending;
}
void OAITemando_shipping_data_collection_point_search_request_interface::setPending(const bool &pending) {
    m_pending = pending;
    m_pending_isSet = true;
}

bool OAITemando_shipping_data_collection_point_search_request_interface::is_pending_Set() const{
    return m_pending_isSet;
}

bool OAITemando_shipping_data_collection_point_search_request_interface::is_pending_Valid() const{
    return m_pending_isValid;
}

QString OAITemando_shipping_data_collection_point_search_request_interface::getPostcode() const {
    return m_postcode;
}
void OAITemando_shipping_data_collection_point_search_request_interface::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAITemando_shipping_data_collection_point_search_request_interface::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAITemando_shipping_data_collection_point_search_request_interface::is_postcode_Valid() const{
    return m_postcode_isValid;
}

qint32 OAITemando_shipping_data_collection_point_search_request_interface::getShippingAddressId() const {
    return m_shipping_address_id;
}
void OAITemando_shipping_data_collection_point_search_request_interface::setShippingAddressId(const qint32 &shipping_address_id) {
    m_shipping_address_id = shipping_address_id;
    m_shipping_address_id_isSet = true;
}

bool OAITemando_shipping_data_collection_point_search_request_interface::is_shipping_address_id_Set() const{
    return m_shipping_address_id_isSet;
}

bool OAITemando_shipping_data_collection_point_search_request_interface::is_shipping_address_id_Valid() const{
    return m_shipping_address_id_isValid;
}

bool OAITemando_shipping_data_collection_point_search_request_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemando_shipping_data_collection_point_search_request_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_id_isValid && m_pending_isValid && m_postcode_isValid && m_shipping_address_id_isValid && true;
}

} // namespace OpenAPI
