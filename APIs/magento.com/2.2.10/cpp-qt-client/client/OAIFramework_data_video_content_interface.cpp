/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFramework_data_video_content_interface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFramework_data_video_content_interface::OAIFramework_data_video_content_interface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFramework_data_video_content_interface::OAIFramework_data_video_content_interface() {
    this->initializeModel();
}

OAIFramework_data_video_content_interface::~OAIFramework_data_video_content_interface() {}

void OAIFramework_data_video_content_interface::initializeModel() {

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_video_description_isSet = false;
    m_video_description_isValid = false;

    m_video_metadata_isSet = false;
    m_video_metadata_isValid = false;

    m_video_provider_isSet = false;
    m_video_provider_isValid = false;

    m_video_title_isSet = false;
    m_video_title_isValid = false;

    m_video_url_isSet = false;
    m_video_url_isValid = false;
}

void OAIFramework_data_video_content_interface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFramework_data_video_content_interface::fromJsonObject(QJsonObject json) {

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;

    m_video_description_isValid = ::OpenAPI::fromJsonValue(m_video_description, json[QString("video_description")]);
    m_video_description_isSet = !json[QString("video_description")].isNull() && m_video_description_isValid;

    m_video_metadata_isValid = ::OpenAPI::fromJsonValue(m_video_metadata, json[QString("video_metadata")]);
    m_video_metadata_isSet = !json[QString("video_metadata")].isNull() && m_video_metadata_isValid;

    m_video_provider_isValid = ::OpenAPI::fromJsonValue(m_video_provider, json[QString("video_provider")]);
    m_video_provider_isSet = !json[QString("video_provider")].isNull() && m_video_provider_isValid;

    m_video_title_isValid = ::OpenAPI::fromJsonValue(m_video_title, json[QString("video_title")]);
    m_video_title_isSet = !json[QString("video_title")].isNull() && m_video_title_isValid;

    m_video_url_isValid = ::OpenAPI::fromJsonValue(m_video_url, json[QString("video_url")]);
    m_video_url_isSet = !json[QString("video_url")].isNull() && m_video_url_isValid;
}

QString OAIFramework_data_video_content_interface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFramework_data_video_content_interface::asJsonObject() const {
    QJsonObject obj;
    if (m_media_type_isSet) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_video_description_isSet) {
        obj.insert(QString("video_description"), ::OpenAPI::toJsonValue(m_video_description));
    }
    if (m_video_metadata_isSet) {
        obj.insert(QString("video_metadata"), ::OpenAPI::toJsonValue(m_video_metadata));
    }
    if (m_video_provider_isSet) {
        obj.insert(QString("video_provider"), ::OpenAPI::toJsonValue(m_video_provider));
    }
    if (m_video_title_isSet) {
        obj.insert(QString("video_title"), ::OpenAPI::toJsonValue(m_video_title));
    }
    if (m_video_url_isSet) {
        obj.insert(QString("video_url"), ::OpenAPI::toJsonValue(m_video_url));
    }
    return obj;
}

QString OAIFramework_data_video_content_interface::getMediaType() const {
    return m_media_type;
}
void OAIFramework_data_video_content_interface::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIFramework_data_video_content_interface::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIFramework_data_video_content_interface::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAIFramework_data_video_content_interface::getVideoDescription() const {
    return m_video_description;
}
void OAIFramework_data_video_content_interface::setVideoDescription(const QString &video_description) {
    m_video_description = video_description;
    m_video_description_isSet = true;
}

bool OAIFramework_data_video_content_interface::is_video_description_Set() const{
    return m_video_description_isSet;
}

bool OAIFramework_data_video_content_interface::is_video_description_Valid() const{
    return m_video_description_isValid;
}

QString OAIFramework_data_video_content_interface::getVideoMetadata() const {
    return m_video_metadata;
}
void OAIFramework_data_video_content_interface::setVideoMetadata(const QString &video_metadata) {
    m_video_metadata = video_metadata;
    m_video_metadata_isSet = true;
}

bool OAIFramework_data_video_content_interface::is_video_metadata_Set() const{
    return m_video_metadata_isSet;
}

bool OAIFramework_data_video_content_interface::is_video_metadata_Valid() const{
    return m_video_metadata_isValid;
}

QString OAIFramework_data_video_content_interface::getVideoProvider() const {
    return m_video_provider;
}
void OAIFramework_data_video_content_interface::setVideoProvider(const QString &video_provider) {
    m_video_provider = video_provider;
    m_video_provider_isSet = true;
}

bool OAIFramework_data_video_content_interface::is_video_provider_Set() const{
    return m_video_provider_isSet;
}

bool OAIFramework_data_video_content_interface::is_video_provider_Valid() const{
    return m_video_provider_isValid;
}

QString OAIFramework_data_video_content_interface::getVideoTitle() const {
    return m_video_title;
}
void OAIFramework_data_video_content_interface::setVideoTitle(const QString &video_title) {
    m_video_title = video_title;
    m_video_title_isSet = true;
}

bool OAIFramework_data_video_content_interface::is_video_title_Set() const{
    return m_video_title_isSet;
}

bool OAIFramework_data_video_content_interface::is_video_title_Valid() const{
    return m_video_title_isValid;
}

QString OAIFramework_data_video_content_interface::getVideoUrl() const {
    return m_video_url;
}
void OAIFramework_data_video_content_interface::setVideoUrl(const QString &video_url) {
    m_video_url = video_url;
    m_video_url_isSet = true;
}

bool OAIFramework_data_video_content_interface::is_video_url_Set() const{
    return m_video_url_isSet;
}

bool OAIFramework_data_video_content_interface::is_video_url_Valid() const{
    return m_video_url_isValid;
}

bool OAIFramework_data_video_content_interface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFramework_data_video_content_interface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_media_type_isValid && m_video_description_isValid && m_video_metadata_isValid && m_video_provider_isValid && m_video_title_isValid && m_video_url_isValid && true;
}

} // namespace OpenAPI
