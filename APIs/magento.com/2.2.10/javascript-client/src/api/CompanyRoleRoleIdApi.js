/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CompanyDataRoleInterface from '../model/CompanyDataRoleInterface';
import ErrorResponse from '../model/ErrorResponse';

/**
* CompanyRoleRoleId service.
* @module api/CompanyRoleRoleIdApi
* @version 2.2.10
*/
export default class CompanyRoleRoleIdApi {

    /**
    * Constructs a new CompanyRoleRoleIdApi. 
    * @alias module:api/CompanyRoleRoleIdApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the companyRoleRepositoryV1DeleteDelete operation.
     * @callback module:api/CompanyRoleRoleIdApi~companyRoleRepositoryV1DeleteDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * company/role/{roleId}
     * Delete a role.
     * @param {Number} roleId 
     * @param {module:api/CompanyRoleRoleIdApi~companyRoleRepositoryV1DeleteDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    companyRoleRepositoryV1DeleteDelete(roleId, callback) {
      let postBody = null;
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling companyRoleRepositoryV1DeleteDelete");
      }

      let pathParams = {
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/V1/company/role/{roleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyRoleRepositoryV1GetGet operation.
     * @callback module:api/CompanyRoleRoleIdApi~companyRoleRepositoryV1GetGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyDataRoleInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * company/role/{roleId}
     * Returns the list of permissions for a specified role.
     * @param {Number} roleId 
     * @param {module:api/CompanyRoleRoleIdApi~companyRoleRepositoryV1GetGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyDataRoleInterface}
     */
    companyRoleRepositoryV1GetGet(roleId, callback) {
      let postBody = null;
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling companyRoleRepositoryV1GetGet");
      }

      let pathParams = {
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CompanyDataRoleInterface;
      return this.apiClient.callApi(
        '/V1/company/role/{roleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
