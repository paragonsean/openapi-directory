/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CatalogDataProductInterface from '../model/CatalogDataProductInterface';
import CatalogProductRepositoryV1SavePostRequest from '../model/CatalogProductRepositoryV1SavePostRequest';
import ErrorResponse from '../model/ErrorResponse';

/**
* ProductsSku service.
* @module api/ProductsSkuApi
* @version 2.2.10
*/
export default class ProductsSkuApi {

    /**
    * Constructs a new ProductsSkuApi. 
    * @alias module:api/ProductsSkuApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the catalogProductRepositoryV1DeleteByIdDelete operation.
     * @callback module:api/ProductsSkuApi~catalogProductRepositoryV1DeleteByIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * products/{sku}
     * 
     * @param {String} sku 
     * @param {module:api/ProductsSkuApi~catalogProductRepositoryV1DeleteByIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    catalogProductRepositoryV1DeleteByIdDelete(sku, callback) {
      let postBody = null;
      // verify the required parameter 'sku' is set
      if (sku === undefined || sku === null) {
        throw new Error("Missing the required parameter 'sku' when calling catalogProductRepositoryV1DeleteByIdDelete");
      }

      let pathParams = {
        'sku': sku
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/V1/products/{sku}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogProductRepositoryV1GetGet operation.
     * @callback module:api/ProductsSkuApi~catalogProductRepositoryV1GetGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogDataProductInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * products/{sku}
     * Get info about product by product SKU
     * @param {String} sku 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [editMode] 
     * @param {Number} [storeId] 
     * @param {Boolean} [forceReload] 
     * @param {module:api/ProductsSkuApi~catalogProductRepositoryV1GetGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogDataProductInterface}
     */
    catalogProductRepositoryV1GetGet(sku, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sku' is set
      if (sku === undefined || sku === null) {
        throw new Error("Missing the required parameter 'sku' when calling catalogProductRepositoryV1GetGet");
      }

      let pathParams = {
        'sku': sku
      };
      let queryParams = {
        'editMode': opts['editMode'],
        'storeId': opts['storeId'],
        'forceReload': opts['forceReload']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CatalogDataProductInterface;
      return this.apiClient.callApi(
        '/V1/products/{sku}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogProductRepositoryV1SavePut operation.
     * @callback module:api/ProductsSkuApi~catalogProductRepositoryV1SavePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogDataProductInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * products/{sku}
     * Create product
     * @param {String} sku 
     * @param {Object} opts Optional parameters
     * @param {module:model/CatalogProductRepositoryV1SavePostRequest} [catalogProductRepositoryV1SavePostRequest] 
     * @param {module:api/ProductsSkuApi~catalogProductRepositoryV1SavePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogDataProductInterface}
     */
    catalogProductRepositoryV1SavePut(sku, opts, callback) {
      opts = opts || {};
      let postBody = opts['catalogProductRepositoryV1SavePostRequest'];
      // verify the required parameter 'sku' is set
      if (sku === undefined || sku === null) {
        throw new Error("Missing the required parameter 'sku' when calling catalogProductRepositoryV1SavePut");
      }

      let pathParams = {
        'sku': sku
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CatalogDataProductInterface;
      return this.apiClient.callApi(
        '/V1/products/{sku}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
