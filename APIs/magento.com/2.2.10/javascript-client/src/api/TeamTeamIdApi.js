/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CompanyDataTeamInterface from '../model/CompanyDataTeamInterface';
import CompanyTeamRepositoryV1CreatePostRequest from '../model/CompanyTeamRepositoryV1CreatePostRequest';
import ErrorResponse from '../model/ErrorResponse';

/**
* TeamTeamId service.
* @module api/TeamTeamIdApi
* @version 2.2.10
*/
export default class TeamTeamIdApi {

    /**
    * Constructs a new TeamTeamIdApi. 
    * @alias module:api/TeamTeamIdApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the companyTeamRepositoryV1DeleteByIdDelete operation.
     * @callback module:api/TeamTeamIdApi~companyTeamRepositoryV1DeleteByIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * team/{teamId}
     * Delete a team from the company structure.
     * @param {Number} teamId 
     * @param {module:api/TeamTeamIdApi~companyTeamRepositoryV1DeleteByIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorResponse}
     */
    companyTeamRepositoryV1DeleteByIdDelete(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling companyTeamRepositoryV1DeleteByIdDelete");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ErrorResponse;
      return this.apiClient.callApi(
        '/V1/team/{teamId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyTeamRepositoryV1GetGet operation.
     * @callback module:api/TeamTeamIdApi~companyTeamRepositoryV1GetGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompanyDataTeamInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * team/{teamId}
     * Returns data for a team in the company, by entity id.
     * @param {Number} teamId 
     * @param {module:api/TeamTeamIdApi~companyTeamRepositoryV1GetGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompanyDataTeamInterface}
     */
    companyTeamRepositoryV1GetGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling companyTeamRepositoryV1GetGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CompanyDataTeamInterface;
      return this.apiClient.callApi(
        '/V1/team/{teamId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the companyTeamRepositoryV1SavePut operation.
     * @callback module:api/TeamTeamIdApi~companyTeamRepositoryV1SavePutCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * team/{teamId}
     * Update a team in the company structure.
     * @param {String} teamId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CompanyTeamRepositoryV1CreatePostRequest} [companyTeamRepositoryV1CreatePostRequest] 
     * @param {module:api/TeamTeamIdApi~companyTeamRepositoryV1SavePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    companyTeamRepositoryV1SavePut(teamId, opts, callback) {
      opts = opts || {};
      let postBody = opts['companyTeamRepositoryV1CreatePostRequest'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling companyTeamRepositoryV1SavePut");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/V1/team/{teamId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
