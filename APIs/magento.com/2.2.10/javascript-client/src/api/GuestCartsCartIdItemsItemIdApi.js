/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import QuoteCartItemRepositoryV1SavePostRequest from '../model/QuoteCartItemRepositoryV1SavePostRequest';
import QuoteDataCartItemInterface from '../model/QuoteDataCartItemInterface';

/**
* GuestCartsCartIdItemsItemId service.
* @module api/GuestCartsCartIdItemsItemIdApi
* @version 2.2.10
*/
export default class GuestCartsCartIdItemsItemIdApi {

    /**
    * Constructs a new GuestCartsCartIdItemsItemIdApi. 
    * @alias module:api/GuestCartsCartIdItemsItemIdApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the quoteGuestCartItemRepositoryV1DeleteByIdDelete operation.
     * @callback module:api/GuestCartsCartIdItemsItemIdApi~quoteGuestCartItemRepositoryV1DeleteByIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * guest-carts/{cartId}/items/{itemId}
     * Remove the specified item from the specified cart.
     * @param {String} cartId The cart ID.
     * @param {Number} itemId The item ID of the item to be removed.
     * @param {module:api/GuestCartsCartIdItemsItemIdApi~quoteGuestCartItemRepositoryV1DeleteByIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    quoteGuestCartItemRepositoryV1DeleteByIdDelete(cartId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling quoteGuestCartItemRepositoryV1DeleteByIdDelete");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling quoteGuestCartItemRepositoryV1DeleteByIdDelete");
      }

      let pathParams = {
        'cartId': cartId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/V1/guest-carts/{cartId}/items/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteGuestCartItemRepositoryV1SavePut operation.
     * @callback module:api/GuestCartsCartIdItemsItemIdApi~quoteGuestCartItemRepositoryV1SavePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteDataCartItemInterface} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * guest-carts/{cartId}/items/{itemId}
     * Add/update the specified cart item.
     * @param {String} cartId 
     * @param {String} itemId 
     * @param {Object} opts Optional parameters
     * @param {module:model/QuoteCartItemRepositoryV1SavePostRequest} [quoteCartItemRepositoryV1SavePostRequest] 
     * @param {module:api/GuestCartsCartIdItemsItemIdApi~quoteGuestCartItemRepositoryV1SavePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteDataCartItemInterface}
     */
    quoteGuestCartItemRepositoryV1SavePut(cartId, itemId, opts, callback) {
      opts = opts || {};
      let postBody = opts['quoteCartItemRepositoryV1SavePostRequest'];
      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling quoteGuestCartItemRepositoryV1SavePut");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling quoteGuestCartItemRepositoryV1SavePut");
      }

      let pathParams = {
        'cartId': cartId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = QuoteDataCartItemInterface;
      return this.apiClient.callApi(
        '/V1/guest-carts/{cartId}/items/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
