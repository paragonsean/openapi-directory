/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FrameworkFilter model module.
 * @module model/FrameworkFilter
 * @version 2.2.10
 */
class FrameworkFilter {
    /**
     * Constructs a new <code>FrameworkFilter</code>.
     * Filter which can be used by any methods from service layer.
     * @alias module:model/FrameworkFilter
     * @param field {String} Field
     * @param value {String} Value
     */
    constructor(field, value) { 
        
        FrameworkFilter.initialize(this, field, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, field, value) { 
        obj['field'] = field;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>FrameworkFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FrameworkFilter} obj Optional instance to populate.
     * @return {module:model/FrameworkFilter} The populated <code>FrameworkFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FrameworkFilter();

            if (data.hasOwnProperty('condition_type')) {
                obj['condition_type'] = ApiClient.convertToType(data['condition_type'], 'String');
            }
            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FrameworkFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FrameworkFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FrameworkFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['condition_type'] && !(typeof data['condition_type'] === 'string' || data['condition_type'] instanceof String)) {
            throw new Error("Expected the field `condition_type` to be a primitive type in the JSON string but got " + data['condition_type']);
        }
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

FrameworkFilter.RequiredProperties = ["field", "value"];

/**
 * Condition type
 * @member {String} condition_type
 */
FrameworkFilter.prototype['condition_type'] = undefined;

/**
 * Field
 * @member {String} field
 */
FrameworkFilter.prototype['field'] = undefined;

/**
 * Value
 * @member {String} value
 */
FrameworkFilter.prototype['value'] = undefined;






export default FrameworkFilter;

