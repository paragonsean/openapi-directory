/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FrameworkAttributeInterface from './FrameworkAttributeInterface';
import RmaDataCommentInterface from './RmaDataCommentInterface';
import RmaDataItemInterface from './RmaDataItemInterface';
import RmaDataTrackInterface from './RmaDataTrackInterface';

/**
 * The RmaDataRmaInterface model module.
 * @module model/RmaDataRmaInterface
 * @version 2.2.10
 */
class RmaDataRmaInterface {
    /**
     * Constructs a new <code>RmaDataRmaInterface</code>.
     * Interface RmaInterface
     * @alias module:model/RmaDataRmaInterface
     * @param comments {Array.<module:model/RmaDataCommentInterface>} Comments list
     * @param customerCustomEmail {String} Customer_custom_email
     * @param customerId {Number} Customer_id
     * @param dateRequested {String} Date_requested
     * @param entityId {Number} Entity_id
     * @param incrementId {String} Entity_id
     * @param items {Array.<module:model/RmaDataItemInterface>} Items
     * @param orderId {Number} Order_id
     * @param orderIncrementId {String} Order_increment_id
     * @param status {String} Status
     * @param storeId {Number} Store_id
     * @param tracks {Array.<module:model/RmaDataTrackInterface>} Tracks list
     */
    constructor(comments, customerCustomEmail, customerId, dateRequested, entityId, incrementId, items, orderId, orderIncrementId, status, storeId, tracks) { 
        
        RmaDataRmaInterface.initialize(this, comments, customerCustomEmail, customerId, dateRequested, entityId, incrementId, items, orderId, orderIncrementId, status, storeId, tracks);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, comments, customerCustomEmail, customerId, dateRequested, entityId, incrementId, items, orderId, orderIncrementId, status, storeId, tracks) { 
        obj['comments'] = comments;
        obj['customer_custom_email'] = customerCustomEmail;
        obj['customer_id'] = customerId;
        obj['date_requested'] = dateRequested;
        obj['entity_id'] = entityId;
        obj['increment_id'] = incrementId;
        obj['items'] = items;
        obj['order_id'] = orderId;
        obj['order_increment_id'] = orderIncrementId;
        obj['status'] = status;
        obj['store_id'] = storeId;
        obj['tracks'] = tracks;
    }

    /**
     * Constructs a <code>RmaDataRmaInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RmaDataRmaInterface} obj Optional instance to populate.
     * @return {module:model/RmaDataRmaInterface} The populated <code>RmaDataRmaInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RmaDataRmaInterface();

            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], [RmaDataCommentInterface]);
            }
            if (data.hasOwnProperty('custom_attributes')) {
                obj['custom_attributes'] = ApiClient.convertToType(data['custom_attributes'], [FrameworkAttributeInterface]);
            }
            if (data.hasOwnProperty('customer_custom_email')) {
                obj['customer_custom_email'] = ApiClient.convertToType(data['customer_custom_email'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'Number');
            }
            if (data.hasOwnProperty('date_requested')) {
                obj['date_requested'] = ApiClient.convertToType(data['date_requested'], 'String');
            }
            if (data.hasOwnProperty('entity_id')) {
                obj['entity_id'] = ApiClient.convertToType(data['entity_id'], 'Number');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('increment_id')) {
                obj['increment_id'] = ApiClient.convertToType(data['increment_id'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [RmaDataItemInterface]);
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'Number');
            }
            if (data.hasOwnProperty('order_increment_id')) {
                obj['order_increment_id'] = ApiClient.convertToType(data['order_increment_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('store_id')) {
                obj['store_id'] = ApiClient.convertToType(data['store_id'], 'Number');
            }
            if (data.hasOwnProperty('tracks')) {
                obj['tracks'] = ApiClient.convertToType(data['tracks'], [RmaDataTrackInterface]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RmaDataRmaInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RmaDataRmaInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RmaDataRmaInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['comments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['comments'])) {
                throw new Error("Expected the field `comments` to be an array in the JSON data but got " + data['comments']);
            }
            // validate the optional field `comments` (array)
            for (const item of data['comments']) {
                RmaDataCommentInterface.validateJSON(item);
            };
        }
        if (data['custom_attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['custom_attributes'])) {
                throw new Error("Expected the field `custom_attributes` to be an array in the JSON data but got " + data['custom_attributes']);
            }
            // validate the optional field `custom_attributes` (array)
            for (const item of data['custom_attributes']) {
                FrameworkAttributeInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['customer_custom_email'] && !(typeof data['customer_custom_email'] === 'string' || data['customer_custom_email'] instanceof String)) {
            throw new Error("Expected the field `customer_custom_email` to be a primitive type in the JSON string but got " + data['customer_custom_email']);
        }
        // ensure the json data is a string
        if (data['date_requested'] && !(typeof data['date_requested'] === 'string' || data['date_requested'] instanceof String)) {
            throw new Error("Expected the field `date_requested` to be a primitive type in the JSON string but got " + data['date_requested']);
        }
        // ensure the json data is a string
        if (data['increment_id'] && !(typeof data['increment_id'] === 'string' || data['increment_id'] instanceof String)) {
            throw new Error("Expected the field `increment_id` to be a primitive type in the JSON string but got " + data['increment_id']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                RmaDataItemInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['order_increment_id'] && !(typeof data['order_increment_id'] === 'string' || data['order_increment_id'] instanceof String)) {
            throw new Error("Expected the field `order_increment_id` to be a primitive type in the JSON string but got " + data['order_increment_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['tracks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tracks'])) {
                throw new Error("Expected the field `tracks` to be an array in the JSON data but got " + data['tracks']);
            }
            // validate the optional field `tracks` (array)
            for (const item of data['tracks']) {
                RmaDataTrackInterface.validateJSON(item);
            };
        }

        return true;
    }


}

RmaDataRmaInterface.RequiredProperties = ["comments", "customer_custom_email", "customer_id", "date_requested", "entity_id", "increment_id", "items", "order_id", "order_increment_id", "status", "store_id", "tracks"];

/**
 * Comments list
 * @member {Array.<module:model/RmaDataCommentInterface>} comments
 */
RmaDataRmaInterface.prototype['comments'] = undefined;

/**
 * Custom attributes values.
 * @member {Array.<module:model/FrameworkAttributeInterface>} custom_attributes
 */
RmaDataRmaInterface.prototype['custom_attributes'] = undefined;

/**
 * Customer_custom_email
 * @member {String} customer_custom_email
 */
RmaDataRmaInterface.prototype['customer_custom_email'] = undefined;

/**
 * Customer_id
 * @member {Number} customer_id
 */
RmaDataRmaInterface.prototype['customer_id'] = undefined;

/**
 * Date_requested
 * @member {String} date_requested
 */
RmaDataRmaInterface.prototype['date_requested'] = undefined;

/**
 * Entity_id
 * @member {Number} entity_id
 */
RmaDataRmaInterface.prototype['entity_id'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\RmaInterface
 * @member {Object} extension_attributes
 */
RmaDataRmaInterface.prototype['extension_attributes'] = undefined;

/**
 * Entity_id
 * @member {String} increment_id
 */
RmaDataRmaInterface.prototype['increment_id'] = undefined;

/**
 * Items
 * @member {Array.<module:model/RmaDataItemInterface>} items
 */
RmaDataRmaInterface.prototype['items'] = undefined;

/**
 * Order_id
 * @member {Number} order_id
 */
RmaDataRmaInterface.prototype['order_id'] = undefined;

/**
 * Order_increment_id
 * @member {String} order_increment_id
 */
RmaDataRmaInterface.prototype['order_increment_id'] = undefined;

/**
 * Status
 * @member {String} status
 */
RmaDataRmaInterface.prototype['status'] = undefined;

/**
 * Store_id
 * @member {Number} store_id
 */
RmaDataRmaInterface.prototype['store_id'] = undefined;

/**
 * Tracks list
 * @member {Array.<module:model/RmaDataTrackInterface>} tracks
 */
RmaDataRmaInterface.prototype['tracks'] = undefined;






export default RmaDataRmaInterface;

