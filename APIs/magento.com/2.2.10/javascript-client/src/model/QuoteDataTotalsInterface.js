/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QuoteDataTotalSegmentInterface from './QuoteDataTotalSegmentInterface';
import QuoteDataTotalsExtensionInterface from './QuoteDataTotalsExtensionInterface';
import QuoteDataTotalsItemInterface from './QuoteDataTotalsItemInterface';

/**
 * The QuoteDataTotalsInterface model module.
 * @module model/QuoteDataTotalsInterface
 * @version 2.2.10
 */
class QuoteDataTotalsInterface {
    /**
     * Constructs a new <code>QuoteDataTotalsInterface</code>.
     * Interface TotalsInterface
     * @alias module:model/QuoteDataTotalsInterface
     * @param totalSegments {Array.<module:model/QuoteDataTotalSegmentInterface>} Dynamically calculated totals
     * @param weeeTaxAppliedAmount {Number} Item weee tax applied amount in quote currency.
     */
    constructor(totalSegments, weeeTaxAppliedAmount) { 
        
        QuoteDataTotalsInterface.initialize(this, totalSegments, weeeTaxAppliedAmount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, totalSegments, weeeTaxAppliedAmount) { 
        obj['total_segments'] = totalSegments;
        obj['weee_tax_applied_amount'] = weeeTaxAppliedAmount;
    }

    /**
     * Constructs a <code>QuoteDataTotalsInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuoteDataTotalsInterface} obj Optional instance to populate.
     * @return {module:model/QuoteDataTotalsInterface} The populated <code>QuoteDataTotalsInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuoteDataTotalsInterface();

            if (data.hasOwnProperty('base_currency_code')) {
                obj['base_currency_code'] = ApiClient.convertToType(data['base_currency_code'], 'String');
            }
            if (data.hasOwnProperty('base_discount_amount')) {
                obj['base_discount_amount'] = ApiClient.convertToType(data['base_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('base_grand_total')) {
                obj['base_grand_total'] = ApiClient.convertToType(data['base_grand_total'], 'Number');
            }
            if (data.hasOwnProperty('base_shipping_amount')) {
                obj['base_shipping_amount'] = ApiClient.convertToType(data['base_shipping_amount'], 'Number');
            }
            if (data.hasOwnProperty('base_shipping_discount_amount')) {
                obj['base_shipping_discount_amount'] = ApiClient.convertToType(data['base_shipping_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('base_shipping_incl_tax')) {
                obj['base_shipping_incl_tax'] = ApiClient.convertToType(data['base_shipping_incl_tax'], 'Number');
            }
            if (data.hasOwnProperty('base_shipping_tax_amount')) {
                obj['base_shipping_tax_amount'] = ApiClient.convertToType(data['base_shipping_tax_amount'], 'Number');
            }
            if (data.hasOwnProperty('base_subtotal')) {
                obj['base_subtotal'] = ApiClient.convertToType(data['base_subtotal'], 'Number');
            }
            if (data.hasOwnProperty('base_subtotal_incl_tax')) {
                obj['base_subtotal_incl_tax'] = ApiClient.convertToType(data['base_subtotal_incl_tax'], 'Number');
            }
            if (data.hasOwnProperty('base_subtotal_with_discount')) {
                obj['base_subtotal_with_discount'] = ApiClient.convertToType(data['base_subtotal_with_discount'], 'Number');
            }
            if (data.hasOwnProperty('base_tax_amount')) {
                obj['base_tax_amount'] = ApiClient.convertToType(data['base_tax_amount'], 'Number');
            }
            if (data.hasOwnProperty('coupon_code')) {
                obj['coupon_code'] = ApiClient.convertToType(data['coupon_code'], 'String');
            }
            if (data.hasOwnProperty('discount_amount')) {
                obj['discount_amount'] = ApiClient.convertToType(data['discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = QuoteDataTotalsExtensionInterface.constructFromObject(data['extension_attributes']);
            }
            if (data.hasOwnProperty('grand_total')) {
                obj['grand_total'] = ApiClient.convertToType(data['grand_total'], 'Number');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [QuoteDataTotalsItemInterface]);
            }
            if (data.hasOwnProperty('items_qty')) {
                obj['items_qty'] = ApiClient.convertToType(data['items_qty'], 'Number');
            }
            if (data.hasOwnProperty('quote_currency_code')) {
                obj['quote_currency_code'] = ApiClient.convertToType(data['quote_currency_code'], 'String');
            }
            if (data.hasOwnProperty('shipping_amount')) {
                obj['shipping_amount'] = ApiClient.convertToType(data['shipping_amount'], 'Number');
            }
            if (data.hasOwnProperty('shipping_discount_amount')) {
                obj['shipping_discount_amount'] = ApiClient.convertToType(data['shipping_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('shipping_incl_tax')) {
                obj['shipping_incl_tax'] = ApiClient.convertToType(data['shipping_incl_tax'], 'Number');
            }
            if (data.hasOwnProperty('shipping_tax_amount')) {
                obj['shipping_tax_amount'] = ApiClient.convertToType(data['shipping_tax_amount'], 'Number');
            }
            if (data.hasOwnProperty('subtotal')) {
                obj['subtotal'] = ApiClient.convertToType(data['subtotal'], 'Number');
            }
            if (data.hasOwnProperty('subtotal_incl_tax')) {
                obj['subtotal_incl_tax'] = ApiClient.convertToType(data['subtotal_incl_tax'], 'Number');
            }
            if (data.hasOwnProperty('subtotal_with_discount')) {
                obj['subtotal_with_discount'] = ApiClient.convertToType(data['subtotal_with_discount'], 'Number');
            }
            if (data.hasOwnProperty('tax_amount')) {
                obj['tax_amount'] = ApiClient.convertToType(data['tax_amount'], 'Number');
            }
            if (data.hasOwnProperty('total_segments')) {
                obj['total_segments'] = ApiClient.convertToType(data['total_segments'], [QuoteDataTotalSegmentInterface]);
            }
            if (data.hasOwnProperty('weee_tax_applied_amount')) {
                obj['weee_tax_applied_amount'] = ApiClient.convertToType(data['weee_tax_applied_amount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuoteDataTotalsInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuoteDataTotalsInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QuoteDataTotalsInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['base_currency_code'] && !(typeof data['base_currency_code'] === 'string' || data['base_currency_code'] instanceof String)) {
            throw new Error("Expected the field `base_currency_code` to be a primitive type in the JSON string but got " + data['base_currency_code']);
        }
        // ensure the json data is a string
        if (data['coupon_code'] && !(typeof data['coupon_code'] === 'string' || data['coupon_code'] instanceof String)) {
            throw new Error("Expected the field `coupon_code` to be a primitive type in the JSON string but got " + data['coupon_code']);
        }
        // validate the optional field `extension_attributes`
        if (data['extension_attributes']) { // data not null
          QuoteDataTotalsExtensionInterface.validateJSON(data['extension_attributes']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                QuoteDataTotalsItemInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['quote_currency_code'] && !(typeof data['quote_currency_code'] === 'string' || data['quote_currency_code'] instanceof String)) {
            throw new Error("Expected the field `quote_currency_code` to be a primitive type in the JSON string but got " + data['quote_currency_code']);
        }
        if (data['total_segments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['total_segments'])) {
                throw new Error("Expected the field `total_segments` to be an array in the JSON data but got " + data['total_segments']);
            }
            // validate the optional field `total_segments` (array)
            for (const item of data['total_segments']) {
                QuoteDataTotalSegmentInterface.validateJSON(item);
            };
        }

        return true;
    }


}

QuoteDataTotalsInterface.RequiredProperties = ["total_segments", "weee_tax_applied_amount"];

/**
 * Base currency code
 * @member {String} base_currency_code
 */
QuoteDataTotalsInterface.prototype['base_currency_code'] = undefined;

/**
 * Discount amount in base currency
 * @member {Number} base_discount_amount
 */
QuoteDataTotalsInterface.prototype['base_discount_amount'] = undefined;

/**
 * Grand total in base currency
 * @member {Number} base_grand_total
 */
QuoteDataTotalsInterface.prototype['base_grand_total'] = undefined;

/**
 * Shipping amount in base currency
 * @member {Number} base_shipping_amount
 */
QuoteDataTotalsInterface.prototype['base_shipping_amount'] = undefined;

/**
 * Shipping discount amount in base currency
 * @member {Number} base_shipping_discount_amount
 */
QuoteDataTotalsInterface.prototype['base_shipping_discount_amount'] = undefined;

/**
 * Shipping including tax in base currency
 * @member {Number} base_shipping_incl_tax
 */
QuoteDataTotalsInterface.prototype['base_shipping_incl_tax'] = undefined;

/**
 * Shipping tax amount in base currency
 * @member {Number} base_shipping_tax_amount
 */
QuoteDataTotalsInterface.prototype['base_shipping_tax_amount'] = undefined;

/**
 * Subtotal in base currency
 * @member {Number} base_subtotal
 */
QuoteDataTotalsInterface.prototype['base_subtotal'] = undefined;

/**
 * Subtotal including tax in base currency
 * @member {Number} base_subtotal_incl_tax
 */
QuoteDataTotalsInterface.prototype['base_subtotal_incl_tax'] = undefined;

/**
 * Subtotal in base currency with applied discount
 * @member {Number} base_subtotal_with_discount
 */
QuoteDataTotalsInterface.prototype['base_subtotal_with_discount'] = undefined;

/**
 * Tax amount in base currency
 * @member {Number} base_tax_amount
 */
QuoteDataTotalsInterface.prototype['base_tax_amount'] = undefined;

/**
 * Applied coupon code
 * @member {String} coupon_code
 */
QuoteDataTotalsInterface.prototype['coupon_code'] = undefined;

/**
 * Discount amount in quote currency
 * @member {Number} discount_amount
 */
QuoteDataTotalsInterface.prototype['discount_amount'] = undefined;

/**
 * @member {module:model/QuoteDataTotalsExtensionInterface} extension_attributes
 */
QuoteDataTotalsInterface.prototype['extension_attributes'] = undefined;

/**
 * Grand total in quote currency
 * @member {Number} grand_total
 */
QuoteDataTotalsInterface.prototype['grand_total'] = undefined;

/**
 * Totals by items
 * @member {Array.<module:model/QuoteDataTotalsItemInterface>} items
 */
QuoteDataTotalsInterface.prototype['items'] = undefined;

/**
 * Items qty
 * @member {Number} items_qty
 */
QuoteDataTotalsInterface.prototype['items_qty'] = undefined;

/**
 * Quote currency code
 * @member {String} quote_currency_code
 */
QuoteDataTotalsInterface.prototype['quote_currency_code'] = undefined;

/**
 * Shipping amount in quote currency
 * @member {Number} shipping_amount
 */
QuoteDataTotalsInterface.prototype['shipping_amount'] = undefined;

/**
 * Shipping discount amount in quote currency
 * @member {Number} shipping_discount_amount
 */
QuoteDataTotalsInterface.prototype['shipping_discount_amount'] = undefined;

/**
 * Shipping including tax in quote currency
 * @member {Number} shipping_incl_tax
 */
QuoteDataTotalsInterface.prototype['shipping_incl_tax'] = undefined;

/**
 * Shipping tax amount in quote currency
 * @member {Number} shipping_tax_amount
 */
QuoteDataTotalsInterface.prototype['shipping_tax_amount'] = undefined;

/**
 * Subtotal in quote currency
 * @member {Number} subtotal
 */
QuoteDataTotalsInterface.prototype['subtotal'] = undefined;

/**
 * Subtotal including tax in quote currency
 * @member {Number} subtotal_incl_tax
 */
QuoteDataTotalsInterface.prototype['subtotal_incl_tax'] = undefined;

/**
 * Subtotal in quote currency with applied discount
 * @member {Number} subtotal_with_discount
 */
QuoteDataTotalsInterface.prototype['subtotal_with_discount'] = undefined;

/**
 * Tax amount in quote currency
 * @member {Number} tax_amount
 */
QuoteDataTotalsInterface.prototype['tax_amount'] = undefined;

/**
 * Dynamically calculated totals
 * @member {Array.<module:model/QuoteDataTotalSegmentInterface>} total_segments
 */
QuoteDataTotalsInterface.prototype['total_segments'] = undefined;

/**
 * Item weee tax applied amount in quote currency.
 * @member {Number} weee_tax_applied_amount
 */
QuoteDataTotalsInterface.prototype['weee_tax_applied_amount'] = undefined;






export default QuoteDataTotalsInterface;

