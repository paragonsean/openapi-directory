/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorErrorsItem from './ErrorErrorsItem';
import ErrorParametersItem from './ErrorParametersItem';

/**
 * The ErrorResponse model module.
 * @module model/ErrorResponse
 * @version 2.2.10
 */
class ErrorResponse {
    /**
     * Constructs a new <code>ErrorResponse</code>.
     * @alias module:model/ErrorResponse
     * @param message {String} Error message
     */
    constructor(message) { 
        
        ErrorResponse.initialize(this, message);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message) { 
        obj['message'] = message;
    }

    /**
     * Constructs a <code>ErrorResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorResponse} obj Optional instance to populate.
     * @return {module:model/ErrorResponse} The populated <code>ErrorResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorResponse();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'Number');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ErrorErrorsItem]);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [ErrorParametersItem]);
            }
            if (data.hasOwnProperty('trace')) {
                obj['trace'] = ApiClient.convertToType(data['trace'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ErrorResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ErrorErrorsItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                ErrorParametersItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['trace'] && !(typeof data['trace'] === 'string' || data['trace'] instanceof String)) {
            throw new Error("Expected the field `trace` to be a primitive type in the JSON string but got " + data['trace']);
        }

        return true;
    }


}

ErrorResponse.RequiredProperties = ["message"];

/**
 * Error code
 * @member {Number} code
 */
ErrorResponse.prototype['code'] = undefined;

/**
 * Errors list
 * @member {Array.<module:model/ErrorErrorsItem>} errors
 */
ErrorResponse.prototype['errors'] = undefined;

/**
 * Error message
 * @member {String} message
 */
ErrorResponse.prototype['message'] = undefined;

/**
 * Error parameters list
 * @member {Array.<module:model/ErrorParametersItem>} parameters
 */
ErrorResponse.prototype['parameters'] = undefined;

/**
 * Stack trace
 * @member {String} trace
 */
ErrorResponse.prototype['trace'] = undefined;






export default ErrorResponse;

