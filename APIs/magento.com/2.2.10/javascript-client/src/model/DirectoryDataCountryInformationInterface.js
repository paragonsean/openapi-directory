/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DirectoryDataRegionInformationInterface from './DirectoryDataRegionInformationInterface';

/**
 * The DirectoryDataCountryInformationInterface model module.
 * @module model/DirectoryDataCountryInformationInterface
 * @version 2.2.10
 */
class DirectoryDataCountryInformationInterface {
    /**
     * Constructs a new <code>DirectoryDataCountryInformationInterface</code>.
     * Country Information interface.
     * @alias module:model/DirectoryDataCountryInformationInterface
     * @param fullNameEnglish {String} The country full name (in English) for the store.
     * @param fullNameLocale {String} The country full name (in store locale) for the store.
     * @param id {String} The country id for the store.
     * @param threeLetterAbbreviation {String} The country 3 letter abbreviation for the store.
     * @param twoLetterAbbreviation {String} The country 2 letter abbreviation for the store.
     */
    constructor(fullNameEnglish, fullNameLocale, id, threeLetterAbbreviation, twoLetterAbbreviation) { 
        
        DirectoryDataCountryInformationInterface.initialize(this, fullNameEnglish, fullNameLocale, id, threeLetterAbbreviation, twoLetterAbbreviation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fullNameEnglish, fullNameLocale, id, threeLetterAbbreviation, twoLetterAbbreviation) { 
        obj['full_name_english'] = fullNameEnglish;
        obj['full_name_locale'] = fullNameLocale;
        obj['id'] = id;
        obj['three_letter_abbreviation'] = threeLetterAbbreviation;
        obj['two_letter_abbreviation'] = twoLetterAbbreviation;
    }

    /**
     * Constructs a <code>DirectoryDataCountryInformationInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DirectoryDataCountryInformationInterface} obj Optional instance to populate.
     * @return {module:model/DirectoryDataCountryInformationInterface} The populated <code>DirectoryDataCountryInformationInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DirectoryDataCountryInformationInterface();

            if (data.hasOwnProperty('available_regions')) {
                obj['available_regions'] = ApiClient.convertToType(data['available_regions'], [DirectoryDataRegionInformationInterface]);
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('full_name_english')) {
                obj['full_name_english'] = ApiClient.convertToType(data['full_name_english'], 'String');
            }
            if (data.hasOwnProperty('full_name_locale')) {
                obj['full_name_locale'] = ApiClient.convertToType(data['full_name_locale'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('three_letter_abbreviation')) {
                obj['three_letter_abbreviation'] = ApiClient.convertToType(data['three_letter_abbreviation'], 'String');
            }
            if (data.hasOwnProperty('two_letter_abbreviation')) {
                obj['two_letter_abbreviation'] = ApiClient.convertToType(data['two_letter_abbreviation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DirectoryDataCountryInformationInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DirectoryDataCountryInformationInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DirectoryDataCountryInformationInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['available_regions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['available_regions'])) {
                throw new Error("Expected the field `available_regions` to be an array in the JSON data but got " + data['available_regions']);
            }
            // validate the optional field `available_regions` (array)
            for (const item of data['available_regions']) {
                DirectoryDataRegionInformationInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['full_name_english'] && !(typeof data['full_name_english'] === 'string' || data['full_name_english'] instanceof String)) {
            throw new Error("Expected the field `full_name_english` to be a primitive type in the JSON string but got " + data['full_name_english']);
        }
        // ensure the json data is a string
        if (data['full_name_locale'] && !(typeof data['full_name_locale'] === 'string' || data['full_name_locale'] instanceof String)) {
            throw new Error("Expected the field `full_name_locale` to be a primitive type in the JSON string but got " + data['full_name_locale']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['three_letter_abbreviation'] && !(typeof data['three_letter_abbreviation'] === 'string' || data['three_letter_abbreviation'] instanceof String)) {
            throw new Error("Expected the field `three_letter_abbreviation` to be a primitive type in the JSON string but got " + data['three_letter_abbreviation']);
        }
        // ensure the json data is a string
        if (data['two_letter_abbreviation'] && !(typeof data['two_letter_abbreviation'] === 'string' || data['two_letter_abbreviation'] instanceof String)) {
            throw new Error("Expected the field `two_letter_abbreviation` to be a primitive type in the JSON string but got " + data['two_letter_abbreviation']);
        }

        return true;
    }


}

DirectoryDataCountryInformationInterface.RequiredProperties = ["full_name_english", "full_name_locale", "id", "three_letter_abbreviation", "two_letter_abbreviation"];

/**
 * The available regions for the store.
 * @member {Array.<module:model/DirectoryDataRegionInformationInterface>} available_regions
 */
DirectoryDataCountryInformationInterface.prototype['available_regions'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CountryInformationInterface
 * @member {Object} extension_attributes
 */
DirectoryDataCountryInformationInterface.prototype['extension_attributes'] = undefined;

/**
 * The country full name (in English) for the store.
 * @member {String} full_name_english
 */
DirectoryDataCountryInformationInterface.prototype['full_name_english'] = undefined;

/**
 * The country full name (in store locale) for the store.
 * @member {String} full_name_locale
 */
DirectoryDataCountryInformationInterface.prototype['full_name_locale'] = undefined;

/**
 * The country id for the store.
 * @member {String} id
 */
DirectoryDataCountryInformationInterface.prototype['id'] = undefined;

/**
 * The country 3 letter abbreviation for the store.
 * @member {String} three_letter_abbreviation
 */
DirectoryDataCountryInformationInterface.prototype['three_letter_abbreviation'] = undefined;

/**
 * The country 2 letter abbreviation for the store.
 * @member {String} two_letter_abbreviation
 */
DirectoryDataCountryInformationInterface.prototype['two_letter_abbreviation'] = undefined;






export default DirectoryDataCountryInformationInterface;

