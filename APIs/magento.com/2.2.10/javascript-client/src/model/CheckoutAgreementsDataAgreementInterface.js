/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CheckoutAgreementsDataAgreementInterface model module.
 * @module model/CheckoutAgreementsDataAgreementInterface
 * @version 2.2.10
 */
class CheckoutAgreementsDataAgreementInterface {
    /**
     * Constructs a new <code>CheckoutAgreementsDataAgreementInterface</code>.
     * Interface AgreementInterface
     * @alias module:model/CheckoutAgreementsDataAgreementInterface
     * @param agreementId {Number} Agreement ID.
     * @param checkboxText {String} Agreement checkbox text.
     * @param content {String} Agreement content.
     * @param isActive {Boolean} Agreement status.
     * @param isHtml {Boolean} * true - HTML. * false - plain text.
     * @param mode {Number} The agreement applied mode.
     * @param name {String} Agreement name.
     */
    constructor(agreementId, checkboxText, content, isActive, isHtml, mode, name) { 
        
        CheckoutAgreementsDataAgreementInterface.initialize(this, agreementId, checkboxText, content, isActive, isHtml, mode, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, agreementId, checkboxText, content, isActive, isHtml, mode, name) { 
        obj['agreement_id'] = agreementId;
        obj['checkbox_text'] = checkboxText;
        obj['content'] = content;
        obj['is_active'] = isActive;
        obj['is_html'] = isHtml;
        obj['mode'] = mode;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CheckoutAgreementsDataAgreementInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckoutAgreementsDataAgreementInterface} obj Optional instance to populate.
     * @return {module:model/CheckoutAgreementsDataAgreementInterface} The populated <code>CheckoutAgreementsDataAgreementInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckoutAgreementsDataAgreementInterface();

            if (data.hasOwnProperty('agreement_id')) {
                obj['agreement_id'] = ApiClient.convertToType(data['agreement_id'], 'Number');
            }
            if (data.hasOwnProperty('checkbox_text')) {
                obj['checkbox_text'] = ApiClient.convertToType(data['checkbox_text'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('content_height')) {
                obj['content_height'] = ApiClient.convertToType(data['content_height'], 'String');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('is_html')) {
                obj['is_html'] = ApiClient.convertToType(data['is_html'], 'Boolean');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckoutAgreementsDataAgreementInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckoutAgreementsDataAgreementInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckoutAgreementsDataAgreementInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['checkbox_text'] && !(typeof data['checkbox_text'] === 'string' || data['checkbox_text'] instanceof String)) {
            throw new Error("Expected the field `checkbox_text` to be a primitive type in the JSON string but got " + data['checkbox_text']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['content_height'] && !(typeof data['content_height'] === 'string' || data['content_height'] instanceof String)) {
            throw new Error("Expected the field `content_height` to be a primitive type in the JSON string but got " + data['content_height']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

CheckoutAgreementsDataAgreementInterface.RequiredProperties = ["agreement_id", "checkbox_text", "content", "is_active", "is_html", "mode", "name"];

/**
 * Agreement ID.
 * @member {Number} agreement_id
 */
CheckoutAgreementsDataAgreementInterface.prototype['agreement_id'] = undefined;

/**
 * Agreement checkbox text.
 * @member {String} checkbox_text
 */
CheckoutAgreementsDataAgreementInterface.prototype['checkbox_text'] = undefined;

/**
 * Agreement content.
 * @member {String} content
 */
CheckoutAgreementsDataAgreementInterface.prototype['content'] = undefined;

/**
 * Agreement content height. Otherwise, null.
 * @member {String} content_height
 */
CheckoutAgreementsDataAgreementInterface.prototype['content_height'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\CheckoutAgreements\\Api\\Data\\AgreementInterface
 * @member {Object} extension_attributes
 */
CheckoutAgreementsDataAgreementInterface.prototype['extension_attributes'] = undefined;

/**
 * Agreement status.
 * @member {Boolean} is_active
 */
CheckoutAgreementsDataAgreementInterface.prototype['is_active'] = undefined;

/**
 * * true - HTML. * false - plain text.
 * @member {Boolean} is_html
 */
CheckoutAgreementsDataAgreementInterface.prototype['is_html'] = undefined;

/**
 * The agreement applied mode.
 * @member {Number} mode
 */
CheckoutAgreementsDataAgreementInterface.prototype['mode'] = undefined;

/**
 * Agreement name.
 * @member {String} name
 */
CheckoutAgreementsDataAgreementInterface.prototype['name'] = undefined;






export default CheckoutAgreementsDataAgreementInterface;

