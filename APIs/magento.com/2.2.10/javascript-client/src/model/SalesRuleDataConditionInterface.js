/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SalesRuleDataConditionInterface model module.
 * @module model/SalesRuleDataConditionInterface
 * @version 2.2.10
 */
class SalesRuleDataConditionInterface {
    /**
     * Constructs a new <code>SalesRuleDataConditionInterface</code>.
     * Interface ConditionInterface
     * @alias module:model/SalesRuleDataConditionInterface
     * @param conditionType {String} Condition type
     * @param operator {String} The operator of the condition
     * @param value {String} The value of the condition
     */
    constructor(conditionType, operator, value) { 
        
        SalesRuleDataConditionInterface.initialize(this, conditionType, operator, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, conditionType, operator, value) { 
        obj['condition_type'] = conditionType;
        obj['operator'] = operator;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>SalesRuleDataConditionInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SalesRuleDataConditionInterface} obj Optional instance to populate.
     * @return {module:model/SalesRuleDataConditionInterface} The populated <code>SalesRuleDataConditionInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SalesRuleDataConditionInterface();

            if (data.hasOwnProperty('aggregator_type')) {
                obj['aggregator_type'] = ApiClient.convertToType(data['aggregator_type'], 'String');
            }
            if (data.hasOwnProperty('attribute_name')) {
                obj['attribute_name'] = ApiClient.convertToType(data['attribute_name'], 'String');
            }
            if (data.hasOwnProperty('condition_type')) {
                obj['condition_type'] = ApiClient.convertToType(data['condition_type'], 'String');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [SalesRuleDataConditionInterface]);
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SalesRuleDataConditionInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SalesRuleDataConditionInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SalesRuleDataConditionInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['aggregator_type'] && !(typeof data['aggregator_type'] === 'string' || data['aggregator_type'] instanceof String)) {
            throw new Error("Expected the field `aggregator_type` to be a primitive type in the JSON string but got " + data['aggregator_type']);
        }
        // ensure the json data is a string
        if (data['attribute_name'] && !(typeof data['attribute_name'] === 'string' || data['attribute_name'] instanceof String)) {
            throw new Error("Expected the field `attribute_name` to be a primitive type in the JSON string but got " + data['attribute_name']);
        }
        // ensure the json data is a string
        if (data['condition_type'] && !(typeof data['condition_type'] === 'string' || data['condition_type'] instanceof String)) {
            throw new Error("Expected the field `condition_type` to be a primitive type in the JSON string but got " + data['condition_type']);
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                SalesRuleDataConditionInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

SalesRuleDataConditionInterface.RequiredProperties = ["condition_type", "operator", "value"];

/**
 * The aggregator type
 * @member {String} aggregator_type
 */
SalesRuleDataConditionInterface.prototype['aggregator_type'] = undefined;

/**
 * The attribute name of the condition
 * @member {String} attribute_name
 */
SalesRuleDataConditionInterface.prototype['attribute_name'] = undefined;

/**
 * Condition type
 * @member {String} condition_type
 */
SalesRuleDataConditionInterface.prototype['condition_type'] = undefined;

/**
 * List of conditions
 * @member {Array.<module:model/SalesRuleDataConditionInterface>} conditions
 */
SalesRuleDataConditionInterface.prototype['conditions'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\ConditionInterface
 * @member {Object} extension_attributes
 */
SalesRuleDataConditionInterface.prototype['extension_attributes'] = undefined;

/**
 * The operator of the condition
 * @member {String} operator
 */
SalesRuleDataConditionInterface.prototype['operator'] = undefined;

/**
 * The value of the condition
 * @member {String} value
 */
SalesRuleDataConditionInterface.prototype['value'] = undefined;






export default SalesRuleDataConditionInterface;

