/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NegotiableQuoteDataNegotiableQuoteTotalsInterface model module.
 * @module model/NegotiableQuoteDataNegotiableQuoteTotalsInterface
 * @version 2.2.10
 */
class NegotiableQuoteDataNegotiableQuoteTotalsInterface {
    /**
     * Constructs a new <code>NegotiableQuoteDataNegotiableQuoteTotalsInterface</code>.
     * Extension attribute for quote totals model.
     * @alias module:model/NegotiableQuoteDataNegotiableQuoteTotalsInterface
     * @param baseCostTotal {Number} Total cost for quote in base currency.
     * @param baseOriginalPriceInclTax {Number} Original price with included tax for quote in base currency.
     * @param baseOriginalTax {Number} Original tax amount for quote in base currency.
     * @param baseOriginalTotal {Number} Original quote total in base currency.
     * @param baseToQuoteRate {Number} Base currency to quote currency rate.
     * @param costTotal {Number} Total cost for quote.
     * @param createdAt {String} The cart creation date and time.
     * @param customerGroup {Number} Customer group id.
     * @param itemsCount {Number} The number of different items or products in the cart.
     * @param negotiatedPriceType {Number} Negotiable quote type.
     * @param negotiatedPriceValue {Number} Negotiable price value for quote.
     * @param originalPriceInclTax {Number} Original price with included tax for quote.
     * @param originalTax {Number} Original tax amount for quote.
     * @param originalTotal {Number} Original quote total.
     * @param quoteStatus {String} Negotiable quote status.
     * @param updatedAt {String} The cart last update date and time.
     */
    constructor(baseCostTotal, baseOriginalPriceInclTax, baseOriginalTax, baseOriginalTotal, baseToQuoteRate, costTotal, createdAt, customerGroup, itemsCount, negotiatedPriceType, negotiatedPriceValue, originalPriceInclTax, originalTax, originalTotal, quoteStatus, updatedAt) { 
        
        NegotiableQuoteDataNegotiableQuoteTotalsInterface.initialize(this, baseCostTotal, baseOriginalPriceInclTax, baseOriginalTax, baseOriginalTotal, baseToQuoteRate, costTotal, createdAt, customerGroup, itemsCount, negotiatedPriceType, negotiatedPriceValue, originalPriceInclTax, originalTax, originalTotal, quoteStatus, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, baseCostTotal, baseOriginalPriceInclTax, baseOriginalTax, baseOriginalTotal, baseToQuoteRate, costTotal, createdAt, customerGroup, itemsCount, negotiatedPriceType, negotiatedPriceValue, originalPriceInclTax, originalTax, originalTotal, quoteStatus, updatedAt) { 
        obj['base_cost_total'] = baseCostTotal;
        obj['base_original_price_incl_tax'] = baseOriginalPriceInclTax;
        obj['base_original_tax'] = baseOriginalTax;
        obj['base_original_total'] = baseOriginalTotal;
        obj['base_to_quote_rate'] = baseToQuoteRate;
        obj['cost_total'] = costTotal;
        obj['created_at'] = createdAt;
        obj['customer_group'] = customerGroup;
        obj['items_count'] = itemsCount;
        obj['negotiated_price_type'] = negotiatedPriceType;
        obj['negotiated_price_value'] = negotiatedPriceValue;
        obj['original_price_incl_tax'] = originalPriceInclTax;
        obj['original_tax'] = originalTax;
        obj['original_total'] = originalTotal;
        obj['quote_status'] = quoteStatus;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>NegotiableQuoteDataNegotiableQuoteTotalsInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NegotiableQuoteDataNegotiableQuoteTotalsInterface} obj Optional instance to populate.
     * @return {module:model/NegotiableQuoteDataNegotiableQuoteTotalsInterface} The populated <code>NegotiableQuoteDataNegotiableQuoteTotalsInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NegotiableQuoteDataNegotiableQuoteTotalsInterface();

            if (data.hasOwnProperty('base_cost_total')) {
                obj['base_cost_total'] = ApiClient.convertToType(data['base_cost_total'], 'Number');
            }
            if (data.hasOwnProperty('base_original_price_incl_tax')) {
                obj['base_original_price_incl_tax'] = ApiClient.convertToType(data['base_original_price_incl_tax'], 'Number');
            }
            if (data.hasOwnProperty('base_original_tax')) {
                obj['base_original_tax'] = ApiClient.convertToType(data['base_original_tax'], 'Number');
            }
            if (data.hasOwnProperty('base_original_total')) {
                obj['base_original_total'] = ApiClient.convertToType(data['base_original_total'], 'Number');
            }
            if (data.hasOwnProperty('base_to_quote_rate')) {
                obj['base_to_quote_rate'] = ApiClient.convertToType(data['base_to_quote_rate'], 'Number');
            }
            if (data.hasOwnProperty('cost_total')) {
                obj['cost_total'] = ApiClient.convertToType(data['cost_total'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('customer_group')) {
                obj['customer_group'] = ApiClient.convertToType(data['customer_group'], 'Number');
            }
            if (data.hasOwnProperty('items_count')) {
                obj['items_count'] = ApiClient.convertToType(data['items_count'], 'Number');
            }
            if (data.hasOwnProperty('negotiated_price_type')) {
                obj['negotiated_price_type'] = ApiClient.convertToType(data['negotiated_price_type'], 'Number');
            }
            if (data.hasOwnProperty('negotiated_price_value')) {
                obj['negotiated_price_value'] = ApiClient.convertToType(data['negotiated_price_value'], 'Number');
            }
            if (data.hasOwnProperty('original_price_incl_tax')) {
                obj['original_price_incl_tax'] = ApiClient.convertToType(data['original_price_incl_tax'], 'Number');
            }
            if (data.hasOwnProperty('original_tax')) {
                obj['original_tax'] = ApiClient.convertToType(data['original_tax'], 'Number');
            }
            if (data.hasOwnProperty('original_total')) {
                obj['original_total'] = ApiClient.convertToType(data['original_total'], 'Number');
            }
            if (data.hasOwnProperty('quote_status')) {
                obj['quote_status'] = ApiClient.convertToType(data['quote_status'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NegotiableQuoteDataNegotiableQuoteTotalsInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NegotiableQuoteDataNegotiableQuoteTotalsInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NegotiableQuoteDataNegotiableQuoteTotalsInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['quote_status'] && !(typeof data['quote_status'] === 'string' || data['quote_status'] instanceof String)) {
            throw new Error("Expected the field `quote_status` to be a primitive type in the JSON string but got " + data['quote_status']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

NegotiableQuoteDataNegotiableQuoteTotalsInterface.RequiredProperties = ["base_cost_total", "base_original_price_incl_tax", "base_original_tax", "base_original_total", "base_to_quote_rate", "cost_total", "created_at", "customer_group", "items_count", "negotiated_price_type", "negotiated_price_value", "original_price_incl_tax", "original_tax", "original_total", "quote_status", "updated_at"];

/**
 * Total cost for quote in base currency.
 * @member {Number} base_cost_total
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['base_cost_total'] = undefined;

/**
 * Original price with included tax for quote in base currency.
 * @member {Number} base_original_price_incl_tax
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['base_original_price_incl_tax'] = undefined;

/**
 * Original tax amount for quote in base currency.
 * @member {Number} base_original_tax
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['base_original_tax'] = undefined;

/**
 * Original quote total in base currency.
 * @member {Number} base_original_total
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['base_original_total'] = undefined;

/**
 * Base currency to quote currency rate.
 * @member {Number} base_to_quote_rate
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['base_to_quote_rate'] = undefined;

/**
 * Total cost for quote.
 * @member {Number} cost_total
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['cost_total'] = undefined;

/**
 * The cart creation date and time.
 * @member {String} created_at
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['created_at'] = undefined;

/**
 * Customer group id.
 * @member {Number} customer_group
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['customer_group'] = undefined;

/**
 * The number of different items or products in the cart.
 * @member {Number} items_count
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['items_count'] = undefined;

/**
 * Negotiable quote type.
 * @member {Number} negotiated_price_type
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['negotiated_price_type'] = undefined;

/**
 * Negotiable price value for quote.
 * @member {Number} negotiated_price_value
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['negotiated_price_value'] = undefined;

/**
 * Original price with included tax for quote.
 * @member {Number} original_price_incl_tax
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['original_price_incl_tax'] = undefined;

/**
 * Original tax amount for quote.
 * @member {Number} original_tax
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['original_tax'] = undefined;

/**
 * Original quote total.
 * @member {Number} original_total
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['original_total'] = undefined;

/**
 * Negotiable quote status.
 * @member {String} quote_status
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['quote_status'] = undefined;

/**
 * The cart last update date and time.
 * @member {String} updated_at
 */
NegotiableQuoteDataNegotiableQuoteTotalsInterface.prototype['updated_at'] = undefined;






export default NegotiableQuoteDataNegotiableQuoteTotalsInterface;

