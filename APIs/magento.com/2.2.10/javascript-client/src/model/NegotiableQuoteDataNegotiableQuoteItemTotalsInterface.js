/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NegotiableQuoteDataNegotiableQuoteItemTotalsInterface model module.
 * @module model/NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
 * @version 2.2.10
 */
class NegotiableQuoteDataNegotiableQuoteItemTotalsInterface {
    /**
     * Constructs a new <code>NegotiableQuoteDataNegotiableQuoteItemTotalsInterface</code>.
     * Extension attribute for quote item totals model.
     * @alias module:model/NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
     * @param baseCartPrice {Number} Cart price for quote item in base currency.
     * @param baseCartPriceInclTax {Number} Cart price with included tax for quote item in base currency.
     * @param baseCartTax {Number} Tax from catalog price for quote item in base currency.
     * @param baseCatalogPrice {Number} Catalog price for quote item in base currency.
     * @param baseCatalogPriceInclTax {Number} Catalog price with included tax for quote item in base currency.
     * @param cartPrice {Number} Cart price for quote item.
     * @param cartPriceInclTax {Number} Cart price with included tax for quote item.
     * @param cartTax {Number} Tax from catalog price for quote item.
     * @param catalogPrice {Number} Catalog price for quote item.
     * @param catalogPriceInclTax {Number} Catalog price with included tax for quote item.
     * @param cost {Number} Cost for quote item.
     */
    constructor(baseCartPrice, baseCartPriceInclTax, baseCartTax, baseCatalogPrice, baseCatalogPriceInclTax, cartPrice, cartPriceInclTax, cartTax, catalogPrice, catalogPriceInclTax, cost) { 
        
        NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.initialize(this, baseCartPrice, baseCartPriceInclTax, baseCartTax, baseCatalogPrice, baseCatalogPriceInclTax, cartPrice, cartPriceInclTax, cartTax, catalogPrice, catalogPriceInclTax, cost);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, baseCartPrice, baseCartPriceInclTax, baseCartTax, baseCatalogPrice, baseCatalogPriceInclTax, cartPrice, cartPriceInclTax, cartTax, catalogPrice, catalogPriceInclTax, cost) { 
        obj['base_cart_price'] = baseCartPrice;
        obj['base_cart_price_incl_tax'] = baseCartPriceInclTax;
        obj['base_cart_tax'] = baseCartTax;
        obj['base_catalog_price'] = baseCatalogPrice;
        obj['base_catalog_price_incl_tax'] = baseCatalogPriceInclTax;
        obj['cart_price'] = cartPrice;
        obj['cart_price_incl_tax'] = cartPriceInclTax;
        obj['cart_tax'] = cartTax;
        obj['catalog_price'] = catalogPrice;
        obj['catalog_price_incl_tax'] = catalogPriceInclTax;
        obj['cost'] = cost;
    }

    /**
     * Constructs a <code>NegotiableQuoteDataNegotiableQuoteItemTotalsInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NegotiableQuoteDataNegotiableQuoteItemTotalsInterface} obj Optional instance to populate.
     * @return {module:model/NegotiableQuoteDataNegotiableQuoteItemTotalsInterface} The populated <code>NegotiableQuoteDataNegotiableQuoteItemTotalsInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NegotiableQuoteDataNegotiableQuoteItemTotalsInterface();

            if (data.hasOwnProperty('base_cart_price')) {
                obj['base_cart_price'] = ApiClient.convertToType(data['base_cart_price'], 'Number');
            }
            if (data.hasOwnProperty('base_cart_price_incl_tax')) {
                obj['base_cart_price_incl_tax'] = ApiClient.convertToType(data['base_cart_price_incl_tax'], 'Number');
            }
            if (data.hasOwnProperty('base_cart_tax')) {
                obj['base_cart_tax'] = ApiClient.convertToType(data['base_cart_tax'], 'Number');
            }
            if (data.hasOwnProperty('base_catalog_price')) {
                obj['base_catalog_price'] = ApiClient.convertToType(data['base_catalog_price'], 'Number');
            }
            if (data.hasOwnProperty('base_catalog_price_incl_tax')) {
                obj['base_catalog_price_incl_tax'] = ApiClient.convertToType(data['base_catalog_price_incl_tax'], 'Number');
            }
            if (data.hasOwnProperty('cart_price')) {
                obj['cart_price'] = ApiClient.convertToType(data['cart_price'], 'Number');
            }
            if (data.hasOwnProperty('cart_price_incl_tax')) {
                obj['cart_price_incl_tax'] = ApiClient.convertToType(data['cart_price_incl_tax'], 'Number');
            }
            if (data.hasOwnProperty('cart_tax')) {
                obj['cart_tax'] = ApiClient.convertToType(data['cart_tax'], 'Number');
            }
            if (data.hasOwnProperty('catalog_price')) {
                obj['catalog_price'] = ApiClient.convertToType(data['catalog_price'], 'Number');
            }
            if (data.hasOwnProperty('catalog_price_incl_tax')) {
                obj['catalog_price_incl_tax'] = ApiClient.convertToType(data['catalog_price_incl_tax'], 'Number');
            }
            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], 'Number');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NegotiableQuoteDataNegotiableQuoteItemTotalsInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NegotiableQuoteDataNegotiableQuoteItemTotalsInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.RequiredProperties = ["base_cart_price", "base_cart_price_incl_tax", "base_cart_tax", "base_catalog_price", "base_catalog_price_incl_tax", "cart_price", "cart_price_incl_tax", "cart_tax", "catalog_price", "catalog_price_incl_tax", "cost"];

/**
 * Cart price for quote item in base currency.
 * @member {Number} base_cart_price
 */
NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.prototype['base_cart_price'] = undefined;

/**
 * Cart price with included tax for quote item in base currency.
 * @member {Number} base_cart_price_incl_tax
 */
NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.prototype['base_cart_price_incl_tax'] = undefined;

/**
 * Tax from catalog price for quote item in base currency.
 * @member {Number} base_cart_tax
 */
NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.prototype['base_cart_tax'] = undefined;

/**
 * Catalog price for quote item in base currency.
 * @member {Number} base_catalog_price
 */
NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.prototype['base_catalog_price'] = undefined;

/**
 * Catalog price with included tax for quote item in base currency.
 * @member {Number} base_catalog_price_incl_tax
 */
NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.prototype['base_catalog_price_incl_tax'] = undefined;

/**
 * Cart price for quote item.
 * @member {Number} cart_price
 */
NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.prototype['cart_price'] = undefined;

/**
 * Cart price with included tax for quote item.
 * @member {Number} cart_price_incl_tax
 */
NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.prototype['cart_price_incl_tax'] = undefined;

/**
 * Tax from catalog price for quote item.
 * @member {Number} cart_tax
 */
NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.prototype['cart_tax'] = undefined;

/**
 * Catalog price for quote item.
 * @member {Number} catalog_price
 */
NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.prototype['catalog_price'] = undefined;

/**
 * Catalog price with included tax for quote item.
 * @member {Number} catalog_price_incl_tax
 */
NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.prototype['catalog_price_incl_tax'] = undefined;

/**
 * Cost for quote item.
 * @member {Number} cost
 */
NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.prototype['cost'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\NegotiableQuoteItemTotalsInterface
 * @member {Object} extension_attributes
 */
NegotiableQuoteDataNegotiableQuoteItemTotalsInterface.prototype['extension_attributes'] = undefined;






export default NegotiableQuoteDataNegotiableQuoteItemTotalsInterface;

