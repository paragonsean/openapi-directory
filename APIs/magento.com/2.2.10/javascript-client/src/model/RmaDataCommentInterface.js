/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FrameworkAttributeInterface from './FrameworkAttributeInterface';

/**
 * The RmaDataCommentInterface model module.
 * @module model/RmaDataCommentInterface
 * @version 2.2.10
 */
class RmaDataCommentInterface {
    /**
     * Constructs a new <code>RmaDataCommentInterface</code>.
     * Interface CommentInterface
     * @alias module:model/RmaDataCommentInterface
     * @param admin {Boolean} Is_admin
     * @param comment {String} Comment
     * @param createdAt {String} Created_at
     * @param customerNotified {Boolean} Is_customer_notified
     * @param entityId {Number} Entity_id
     * @param rmaEntityId {Number} Rma Id
     * @param status {String} Status
     * @param visibleOnFront {Boolean} Is_visible_on_front
     */
    constructor(admin, comment, createdAt, customerNotified, entityId, rmaEntityId, status, visibleOnFront) { 
        
        RmaDataCommentInterface.initialize(this, admin, comment, createdAt, customerNotified, entityId, rmaEntityId, status, visibleOnFront);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, admin, comment, createdAt, customerNotified, entityId, rmaEntityId, status, visibleOnFront) { 
        obj['admin'] = admin;
        obj['comment'] = comment;
        obj['created_at'] = createdAt;
        obj['customer_notified'] = customerNotified;
        obj['entity_id'] = entityId;
        obj['rma_entity_id'] = rmaEntityId;
        obj['status'] = status;
        obj['visible_on_front'] = visibleOnFront;
    }

    /**
     * Constructs a <code>RmaDataCommentInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RmaDataCommentInterface} obj Optional instance to populate.
     * @return {module:model/RmaDataCommentInterface} The populated <code>RmaDataCommentInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RmaDataCommentInterface();

            if (data.hasOwnProperty('admin')) {
                obj['admin'] = ApiClient.convertToType(data['admin'], 'Boolean');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('custom_attributes')) {
                obj['custom_attributes'] = ApiClient.convertToType(data['custom_attributes'], [FrameworkAttributeInterface]);
            }
            if (data.hasOwnProperty('customer_notified')) {
                obj['customer_notified'] = ApiClient.convertToType(data['customer_notified'], 'Boolean');
            }
            if (data.hasOwnProperty('entity_id')) {
                obj['entity_id'] = ApiClient.convertToType(data['entity_id'], 'Number');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('rma_entity_id')) {
                obj['rma_entity_id'] = ApiClient.convertToType(data['rma_entity_id'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('visible_on_front')) {
                obj['visible_on_front'] = ApiClient.convertToType(data['visible_on_front'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RmaDataCommentInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RmaDataCommentInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RmaDataCommentInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        if (data['custom_attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['custom_attributes'])) {
                throw new Error("Expected the field `custom_attributes` to be an array in the JSON data but got " + data['custom_attributes']);
            }
            // validate the optional field `custom_attributes` (array)
            for (const item of data['custom_attributes']) {
                FrameworkAttributeInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

RmaDataCommentInterface.RequiredProperties = ["admin", "comment", "created_at", "customer_notified", "entity_id", "rma_entity_id", "status", "visible_on_front"];

/**
 * Is_admin
 * @member {Boolean} admin
 */
RmaDataCommentInterface.prototype['admin'] = undefined;

/**
 * Comment
 * @member {String} comment
 */
RmaDataCommentInterface.prototype['comment'] = undefined;

/**
 * Created_at
 * @member {String} created_at
 */
RmaDataCommentInterface.prototype['created_at'] = undefined;

/**
 * Custom attributes values.
 * @member {Array.<module:model/FrameworkAttributeInterface>} custom_attributes
 */
RmaDataCommentInterface.prototype['custom_attributes'] = undefined;

/**
 * Is_customer_notified
 * @member {Boolean} customer_notified
 */
RmaDataCommentInterface.prototype['customer_notified'] = undefined;

/**
 * Entity_id
 * @member {Number} entity_id
 */
RmaDataCommentInterface.prototype['entity_id'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\Rma\\Api\\Data\\CommentInterface
 * @member {Object} extension_attributes
 */
RmaDataCommentInterface.prototype['extension_attributes'] = undefined;

/**
 * Rma Id
 * @member {Number} rma_entity_id
 */
RmaDataCommentInterface.prototype['rma_entity_id'] = undefined;

/**
 * Status
 * @member {String} status
 */
RmaDataCommentInterface.prototype['status'] = undefined;

/**
 * Is_visible_on_front
 * @member {Boolean} visible_on_front
 */
RmaDataCommentInterface.prototype['visible_on_front'] = undefined;






export default RmaDataCommentInterface;

