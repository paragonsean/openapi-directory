/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QuoteDataShippingMethodInterface model module.
 * @module model/QuoteDataShippingMethodInterface
 * @version 2.2.10
 */
class QuoteDataShippingMethodInterface {
    /**
     * Constructs a new <code>QuoteDataShippingMethodInterface</code>.
     * Interface ShippingMethodInterface
     * @alias module:model/QuoteDataShippingMethodInterface
     * @param amount {Number} Shipping amount in store currency.
     * @param available {Boolean} The value of the availability flag for the current shipping method.
     * @param baseAmount {Number} Shipping amount in base currency.
     * @param carrierCode {String} Shipping carrier code.
     * @param errorMessage {String} Shipping Error message.
     * @param methodCode {String} Shipping method code.
     * @param priceExclTax {Number} Shipping price excl tax.
     * @param priceInclTax {Number} Shipping price incl tax.
     */
    constructor(amount, available, baseAmount, carrierCode, errorMessage, methodCode, priceExclTax, priceInclTax) { 
        
        QuoteDataShippingMethodInterface.initialize(this, amount, available, baseAmount, carrierCode, errorMessage, methodCode, priceExclTax, priceInclTax);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, available, baseAmount, carrierCode, errorMessage, methodCode, priceExclTax, priceInclTax) { 
        obj['amount'] = amount;
        obj['available'] = available;
        obj['base_amount'] = baseAmount;
        obj['carrier_code'] = carrierCode;
        obj['error_message'] = errorMessage;
        obj['method_code'] = methodCode;
        obj['price_excl_tax'] = priceExclTax;
        obj['price_incl_tax'] = priceInclTax;
    }

    /**
     * Constructs a <code>QuoteDataShippingMethodInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuoteDataShippingMethodInterface} obj Optional instance to populate.
     * @return {module:model/QuoteDataShippingMethodInterface} The populated <code>QuoteDataShippingMethodInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuoteDataShippingMethodInterface();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Boolean');
            }
            if (data.hasOwnProperty('base_amount')) {
                obj['base_amount'] = ApiClient.convertToType(data['base_amount'], 'Number');
            }
            if (data.hasOwnProperty('carrier_code')) {
                obj['carrier_code'] = ApiClient.convertToType(data['carrier_code'], 'String');
            }
            if (data.hasOwnProperty('carrier_title')) {
                obj['carrier_title'] = ApiClient.convertToType(data['carrier_title'], 'String');
            }
            if (data.hasOwnProperty('error_message')) {
                obj['error_message'] = ApiClient.convertToType(data['error_message'], 'String');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('method_code')) {
                obj['method_code'] = ApiClient.convertToType(data['method_code'], 'String');
            }
            if (data.hasOwnProperty('method_title')) {
                obj['method_title'] = ApiClient.convertToType(data['method_title'], 'String');
            }
            if (data.hasOwnProperty('price_excl_tax')) {
                obj['price_excl_tax'] = ApiClient.convertToType(data['price_excl_tax'], 'Number');
            }
            if (data.hasOwnProperty('price_incl_tax')) {
                obj['price_incl_tax'] = ApiClient.convertToType(data['price_incl_tax'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuoteDataShippingMethodInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuoteDataShippingMethodInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QuoteDataShippingMethodInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['carrier_code'] && !(typeof data['carrier_code'] === 'string' || data['carrier_code'] instanceof String)) {
            throw new Error("Expected the field `carrier_code` to be a primitive type in the JSON string but got " + data['carrier_code']);
        }
        // ensure the json data is a string
        if (data['carrier_title'] && !(typeof data['carrier_title'] === 'string' || data['carrier_title'] instanceof String)) {
            throw new Error("Expected the field `carrier_title` to be a primitive type in the JSON string but got " + data['carrier_title']);
        }
        // ensure the json data is a string
        if (data['error_message'] && !(typeof data['error_message'] === 'string' || data['error_message'] instanceof String)) {
            throw new Error("Expected the field `error_message` to be a primitive type in the JSON string but got " + data['error_message']);
        }
        // ensure the json data is a string
        if (data['method_code'] && !(typeof data['method_code'] === 'string' || data['method_code'] instanceof String)) {
            throw new Error("Expected the field `method_code` to be a primitive type in the JSON string but got " + data['method_code']);
        }
        // ensure the json data is a string
        if (data['method_title'] && !(typeof data['method_title'] === 'string' || data['method_title'] instanceof String)) {
            throw new Error("Expected the field `method_title` to be a primitive type in the JSON string but got " + data['method_title']);
        }

        return true;
    }


}

QuoteDataShippingMethodInterface.RequiredProperties = ["amount", "available", "base_amount", "carrier_code", "error_message", "method_code", "price_excl_tax", "price_incl_tax"];

/**
 * Shipping amount in store currency.
 * @member {Number} amount
 */
QuoteDataShippingMethodInterface.prototype['amount'] = undefined;

/**
 * The value of the availability flag for the current shipping method.
 * @member {Boolean} available
 */
QuoteDataShippingMethodInterface.prototype['available'] = undefined;

/**
 * Shipping amount in base currency.
 * @member {Number} base_amount
 */
QuoteDataShippingMethodInterface.prototype['base_amount'] = undefined;

/**
 * Shipping carrier code.
 * @member {String} carrier_code
 */
QuoteDataShippingMethodInterface.prototype['carrier_code'] = undefined;

/**
 * Shipping carrier title. Otherwise, null.
 * @member {String} carrier_title
 */
QuoteDataShippingMethodInterface.prototype['carrier_title'] = undefined;

/**
 * Shipping Error message.
 * @member {String} error_message
 */
QuoteDataShippingMethodInterface.prototype['error_message'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingMethodInterface
 * @member {Object} extension_attributes
 */
QuoteDataShippingMethodInterface.prototype['extension_attributes'] = undefined;

/**
 * Shipping method code.
 * @member {String} method_code
 */
QuoteDataShippingMethodInterface.prototype['method_code'] = undefined;

/**
 * Shipping method title. Otherwise, null.
 * @member {String} method_title
 */
QuoteDataShippingMethodInterface.prototype['method_title'] = undefined;

/**
 * Shipping price excl tax.
 * @member {Number} price_excl_tax
 */
QuoteDataShippingMethodInterface.prototype['price_excl_tax'] = undefined;

/**
 * Shipping price incl tax.
 * @member {Number} price_incl_tax
 */
QuoteDataShippingMethodInterface.prototype['price_incl_tax'] = undefined;






export default QuoteDataShippingMethodInterface;

