/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogDataProductCustomOptionTypeInterface model module.
 * @module model/CatalogDataProductCustomOptionTypeInterface
 * @version 2.2.10
 */
class CatalogDataProductCustomOptionTypeInterface {
    /**
     * Constructs a new <code>CatalogDataProductCustomOptionTypeInterface</code>.
     * 
     * @alias module:model/CatalogDataProductCustomOptionTypeInterface
     * @param code {String} Option type code
     * @param group {String} Option type group
     * @param label {String} Option type label
     */
    constructor(code, group, label) { 
        
        CatalogDataProductCustomOptionTypeInterface.initialize(this, code, group, label);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, group, label) { 
        obj['code'] = code;
        obj['group'] = group;
        obj['label'] = label;
    }

    /**
     * Constructs a <code>CatalogDataProductCustomOptionTypeInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogDataProductCustomOptionTypeInterface} obj Optional instance to populate.
     * @return {module:model/CatalogDataProductCustomOptionTypeInterface} The populated <code>CatalogDataProductCustomOptionTypeInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogDataProductCustomOptionTypeInterface();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogDataProductCustomOptionTypeInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogDataProductCustomOptionTypeInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogDataProductCustomOptionTypeInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }

        return true;
    }


}

CatalogDataProductCustomOptionTypeInterface.RequiredProperties = ["code", "group", "label"];

/**
 * Option type code
 * @member {String} code
 */
CatalogDataProductCustomOptionTypeInterface.prototype['code'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductCustomOptionTypeInterface
 * @member {Object} extension_attributes
 */
CatalogDataProductCustomOptionTypeInterface.prototype['extension_attributes'] = undefined;

/**
 * Option type group
 * @member {String} group
 */
CatalogDataProductCustomOptionTypeInterface.prototype['group'] = undefined;

/**
 * Option type label
 * @member {String} label
 */
CatalogDataProductCustomOptionTypeInterface.prototype['label'] = undefined;






export default CatalogDataProductCustomOptionTypeInterface;

