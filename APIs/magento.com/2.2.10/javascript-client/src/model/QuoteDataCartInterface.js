/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomerDataCustomerInterface from './CustomerDataCustomerInterface';
import QuoteDataAddressInterface from './QuoteDataAddressInterface';
import QuoteDataCartExtensionInterface from './QuoteDataCartExtensionInterface';
import QuoteDataCartItemInterface from './QuoteDataCartItemInterface';
import QuoteDataCurrencyInterface from './QuoteDataCurrencyInterface';

/**
 * The QuoteDataCartInterface model module.
 * @module model/QuoteDataCartInterface
 * @version 2.2.10
 */
class QuoteDataCartInterface {
    /**
     * Constructs a new <code>QuoteDataCartInterface</code>.
     * Interface CartInterface
     * @alias module:model/QuoteDataCartInterface
     * @param customer {module:model/CustomerDataCustomerInterface} 
     * @param id {Number} Cart/quote ID.
     * @param storeId {Number} Store identifier
     */
    constructor(customer, id, storeId) { 
        
        QuoteDataCartInterface.initialize(this, customer, id, storeId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customer, id, storeId) { 
        obj['customer'] = customer;
        obj['id'] = id;
        obj['store_id'] = storeId;
    }

    /**
     * Constructs a <code>QuoteDataCartInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuoteDataCartInterface} obj Optional instance to populate.
     * @return {module:model/QuoteDataCartInterface} The populated <code>QuoteDataCartInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuoteDataCartInterface();

            if (data.hasOwnProperty('billing_address')) {
                obj['billing_address'] = QuoteDataAddressInterface.constructFromObject(data['billing_address']);
            }
            if (data.hasOwnProperty('converted_at')) {
                obj['converted_at'] = ApiClient.convertToType(data['converted_at'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = QuoteDataCurrencyInterface.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = CustomerDataCustomerInterface.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('customer_is_guest')) {
                obj['customer_is_guest'] = ApiClient.convertToType(data['customer_is_guest'], 'Boolean');
            }
            if (data.hasOwnProperty('customer_note')) {
                obj['customer_note'] = ApiClient.convertToType(data['customer_note'], 'String');
            }
            if (data.hasOwnProperty('customer_note_notify')) {
                obj['customer_note_notify'] = ApiClient.convertToType(data['customer_note_notify'], 'Boolean');
            }
            if (data.hasOwnProperty('customer_tax_class_id')) {
                obj['customer_tax_class_id'] = ApiClient.convertToType(data['customer_tax_class_id'], 'Number');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = QuoteDataCartExtensionInterface.constructFromObject(data['extension_attributes']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('is_virtual')) {
                obj['is_virtual'] = ApiClient.convertToType(data['is_virtual'], 'Boolean');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [QuoteDataCartItemInterface]);
            }
            if (data.hasOwnProperty('items_count')) {
                obj['items_count'] = ApiClient.convertToType(data['items_count'], 'Number');
            }
            if (data.hasOwnProperty('items_qty')) {
                obj['items_qty'] = ApiClient.convertToType(data['items_qty'], 'Number');
            }
            if (data.hasOwnProperty('orig_order_id')) {
                obj['orig_order_id'] = ApiClient.convertToType(data['orig_order_id'], 'Number');
            }
            if (data.hasOwnProperty('reserved_order_id')) {
                obj['reserved_order_id'] = ApiClient.convertToType(data['reserved_order_id'], 'String');
            }
            if (data.hasOwnProperty('store_id')) {
                obj['store_id'] = ApiClient.convertToType(data['store_id'], 'Number');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuoteDataCartInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuoteDataCartInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QuoteDataCartInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `billing_address`
        if (data['billing_address']) { // data not null
          QuoteDataAddressInterface.validateJSON(data['billing_address']);
        }
        // ensure the json data is a string
        if (data['converted_at'] && !(typeof data['converted_at'] === 'string' || data['converted_at'] instanceof String)) {
            throw new Error("Expected the field `converted_at` to be a primitive type in the JSON string but got " + data['converted_at']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          QuoteDataCurrencyInterface.validateJSON(data['currency']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          CustomerDataCustomerInterface.validateJSON(data['customer']);
        }
        // ensure the json data is a string
        if (data['customer_note'] && !(typeof data['customer_note'] === 'string' || data['customer_note'] instanceof String)) {
            throw new Error("Expected the field `customer_note` to be a primitive type in the JSON string but got " + data['customer_note']);
        }
        // validate the optional field `extension_attributes`
        if (data['extension_attributes']) { // data not null
          QuoteDataCartExtensionInterface.validateJSON(data['extension_attributes']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                QuoteDataCartItemInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['reserved_order_id'] && !(typeof data['reserved_order_id'] === 'string' || data['reserved_order_id'] instanceof String)) {
            throw new Error("Expected the field `reserved_order_id` to be a primitive type in the JSON string but got " + data['reserved_order_id']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

QuoteDataCartInterface.RequiredProperties = ["customer", "id", "store_id"];

/**
 * @member {module:model/QuoteDataAddressInterface} billing_address
 */
QuoteDataCartInterface.prototype['billing_address'] = undefined;

/**
 * Cart conversion date and time. Otherwise, null.
 * @member {String} converted_at
 */
QuoteDataCartInterface.prototype['converted_at'] = undefined;

/**
 * Cart creation date and time. Otherwise, null.
 * @member {String} created_at
 */
QuoteDataCartInterface.prototype['created_at'] = undefined;

/**
 * @member {module:model/QuoteDataCurrencyInterface} currency
 */
QuoteDataCartInterface.prototype['currency'] = undefined;

/**
 * @member {module:model/CustomerDataCustomerInterface} customer
 */
QuoteDataCartInterface.prototype['customer'] = undefined;

/**
 * For guest customers, false for logged in customers
 * @member {Boolean} customer_is_guest
 */
QuoteDataCartInterface.prototype['customer_is_guest'] = undefined;

/**
 * Notice text
 * @member {String} customer_note
 */
QuoteDataCartInterface.prototype['customer_note'] = undefined;

/**
 * Customer notification flag
 * @member {Boolean} customer_note_notify
 */
QuoteDataCartInterface.prototype['customer_note_notify'] = undefined;

/**
 * Customer tax class ID.
 * @member {Number} customer_tax_class_id
 */
QuoteDataCartInterface.prototype['customer_tax_class_id'] = undefined;

/**
 * @member {module:model/QuoteDataCartExtensionInterface} extension_attributes
 */
QuoteDataCartInterface.prototype['extension_attributes'] = undefined;

/**
 * Cart/quote ID.
 * @member {Number} id
 */
QuoteDataCartInterface.prototype['id'] = undefined;

/**
 * Active status flag value. Otherwise, null.
 * @member {Boolean} is_active
 */
QuoteDataCartInterface.prototype['is_active'] = undefined;

/**
 * Virtual flag value. Otherwise, null.
 * @member {Boolean} is_virtual
 */
QuoteDataCartInterface.prototype['is_virtual'] = undefined;

/**
 * Array of items. Otherwise, null.
 * @member {Array.<module:model/QuoteDataCartItemInterface>} items
 */
QuoteDataCartInterface.prototype['items'] = undefined;

/**
 * Number of different items or products in the cart. Otherwise, null.
 * @member {Number} items_count
 */
QuoteDataCartInterface.prototype['items_count'] = undefined;

/**
 * Total quantity of all cart items. Otherwise, null.
 * @member {Number} items_qty
 */
QuoteDataCartInterface.prototype['items_qty'] = undefined;

/**
 * Original order ID. Otherwise, null.
 * @member {Number} orig_order_id
 */
QuoteDataCartInterface.prototype['orig_order_id'] = undefined;

/**
 * Reserved order ID. Otherwise, null.
 * @member {String} reserved_order_id
 */
QuoteDataCartInterface.prototype['reserved_order_id'] = undefined;

/**
 * Store identifier
 * @member {Number} store_id
 */
QuoteDataCartInterface.prototype['store_id'] = undefined;

/**
 * Cart last update date and time. Otherwise, null.
 * @member {String} updated_at
 */
QuoteDataCartInterface.prototype['updated_at'] = undefined;






export default QuoteDataCartInterface;

