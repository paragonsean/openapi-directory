/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompanyDataCompanyExtensionInterface from './CompanyDataCompanyExtensionInterface';

/**
 * The CompanyDataCompanyInterface model module.
 * @module model/CompanyDataCompanyInterface
 * @version 2.2.10
 */
class CompanyDataCompanyInterface {
    /**
     * Constructs a new <code>CompanyDataCompanyInterface</code>.
     * Interface for Company entity.
     * @alias module:model/CompanyDataCompanyInterface
     * @param customerGroupId {Number} Customer Group Id.
     * @param rejectReason {String} Reject Reason.
     * @param rejectedAt {String} Rejected at time.
     * @param salesRepresentativeId {Number} Sales Representative Id.
     * @param street {Array.<String>} Street.
     * @param superUserId {Number} Company admin customer id.
     */
    constructor(customerGroupId, rejectReason, rejectedAt, salesRepresentativeId, street, superUserId) { 
        
        CompanyDataCompanyInterface.initialize(this, customerGroupId, rejectReason, rejectedAt, salesRepresentativeId, street, superUserId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customerGroupId, rejectReason, rejectedAt, salesRepresentativeId, street, superUserId) { 
        obj['customer_group_id'] = customerGroupId;
        obj['reject_reason'] = rejectReason;
        obj['rejected_at'] = rejectedAt;
        obj['sales_representative_id'] = salesRepresentativeId;
        obj['street'] = street;
        obj['super_user_id'] = superUserId;
    }

    /**
     * Constructs a <code>CompanyDataCompanyInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompanyDataCompanyInterface} obj Optional instance to populate.
     * @return {module:model/CompanyDataCompanyInterface} The populated <code>CompanyDataCompanyInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompanyDataCompanyInterface();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('company_email')) {
                obj['company_email'] = ApiClient.convertToType(data['company_email'], 'String');
            }
            if (data.hasOwnProperty('company_name')) {
                obj['company_name'] = ApiClient.convertToType(data['company_name'], 'String');
            }
            if (data.hasOwnProperty('country_id')) {
                obj['country_id'] = ApiClient.convertToType(data['country_id'], 'String');
            }
            if (data.hasOwnProperty('customer_group_id')) {
                obj['customer_group_id'] = ApiClient.convertToType(data['customer_group_id'], 'Number');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = CompanyDataCompanyExtensionInterface.constructFromObject(data['extension_attributes']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('legal_name')) {
                obj['legal_name'] = ApiClient.convertToType(data['legal_name'], 'String');
            }
            if (data.hasOwnProperty('postcode')) {
                obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('region_id')) {
                obj['region_id'] = ApiClient.convertToType(data['region_id'], 'String');
            }
            if (data.hasOwnProperty('reject_reason')) {
                obj['reject_reason'] = ApiClient.convertToType(data['reject_reason'], 'String');
            }
            if (data.hasOwnProperty('rejected_at')) {
                obj['rejected_at'] = ApiClient.convertToType(data['rejected_at'], 'String');
            }
            if (data.hasOwnProperty('reseller_id')) {
                obj['reseller_id'] = ApiClient.convertToType(data['reseller_id'], 'String');
            }
            if (data.hasOwnProperty('sales_representative_id')) {
                obj['sales_representative_id'] = ApiClient.convertToType(data['sales_representative_id'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], ['String']);
            }
            if (data.hasOwnProperty('super_user_id')) {
                obj['super_user_id'] = ApiClient.convertToType(data['super_user_id'], 'Number');
            }
            if (data.hasOwnProperty('telephone')) {
                obj['telephone'] = ApiClient.convertToType(data['telephone'], 'String');
            }
            if (data.hasOwnProperty('vat_tax_id')) {
                obj['vat_tax_id'] = ApiClient.convertToType(data['vat_tax_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompanyDataCompanyInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompanyDataCompanyInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CompanyDataCompanyInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['company_email'] && !(typeof data['company_email'] === 'string' || data['company_email'] instanceof String)) {
            throw new Error("Expected the field `company_email` to be a primitive type in the JSON string but got " + data['company_email']);
        }
        // ensure the json data is a string
        if (data['company_name'] && !(typeof data['company_name'] === 'string' || data['company_name'] instanceof String)) {
            throw new Error("Expected the field `company_name` to be a primitive type in the JSON string but got " + data['company_name']);
        }
        // ensure the json data is a string
        if (data['country_id'] && !(typeof data['country_id'] === 'string' || data['country_id'] instanceof String)) {
            throw new Error("Expected the field `country_id` to be a primitive type in the JSON string but got " + data['country_id']);
        }
        // validate the optional field `extension_attributes`
        if (data['extension_attributes']) { // data not null
          CompanyDataCompanyExtensionInterface.validateJSON(data['extension_attributes']);
        }
        // ensure the json data is a string
        if (data['legal_name'] && !(typeof data['legal_name'] === 'string' || data['legal_name'] instanceof String)) {
            throw new Error("Expected the field `legal_name` to be a primitive type in the JSON string but got " + data['legal_name']);
        }
        // ensure the json data is a string
        if (data['postcode'] && !(typeof data['postcode'] === 'string' || data['postcode'] instanceof String)) {
            throw new Error("Expected the field `postcode` to be a primitive type in the JSON string but got " + data['postcode']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['region_id'] && !(typeof data['region_id'] === 'string' || data['region_id'] instanceof String)) {
            throw new Error("Expected the field `region_id` to be a primitive type in the JSON string but got " + data['region_id']);
        }
        // ensure the json data is a string
        if (data['reject_reason'] && !(typeof data['reject_reason'] === 'string' || data['reject_reason'] instanceof String)) {
            throw new Error("Expected the field `reject_reason` to be a primitive type in the JSON string but got " + data['reject_reason']);
        }
        // ensure the json data is a string
        if (data['rejected_at'] && !(typeof data['rejected_at'] === 'string' || data['rejected_at'] instanceof String)) {
            throw new Error("Expected the field `rejected_at` to be a primitive type in the JSON string but got " + data['rejected_at']);
        }
        // ensure the json data is a string
        if (data['reseller_id'] && !(typeof data['reseller_id'] === 'string' || data['reseller_id'] instanceof String)) {
            throw new Error("Expected the field `reseller_id` to be a primitive type in the JSON string but got " + data['reseller_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['street'])) {
            throw new Error("Expected the field `street` to be an array in the JSON data but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['telephone'] && !(typeof data['telephone'] === 'string' || data['telephone'] instanceof String)) {
            throw new Error("Expected the field `telephone` to be a primitive type in the JSON string but got " + data['telephone']);
        }
        // ensure the json data is a string
        if (data['vat_tax_id'] && !(typeof data['vat_tax_id'] === 'string' || data['vat_tax_id'] instanceof String)) {
            throw new Error("Expected the field `vat_tax_id` to be a primitive type in the JSON string but got " + data['vat_tax_id']);
        }

        return true;
    }


}

CompanyDataCompanyInterface.RequiredProperties = ["customer_group_id", "reject_reason", "rejected_at", "sales_representative_id", "street", "super_user_id"];

/**
 * City.
 * @member {String} city
 */
CompanyDataCompanyInterface.prototype['city'] = undefined;

/**
 * Comment.
 * @member {String} comment
 */
CompanyDataCompanyInterface.prototype['comment'] = undefined;

/**
 * Company email.
 * @member {String} company_email
 */
CompanyDataCompanyInterface.prototype['company_email'] = undefined;

/**
 * Company name.
 * @member {String} company_name
 */
CompanyDataCompanyInterface.prototype['company_name'] = undefined;

/**
 * Country.
 * @member {String} country_id
 */
CompanyDataCompanyInterface.prototype['country_id'] = undefined;

/**
 * Customer Group Id.
 * @member {Number} customer_group_id
 */
CompanyDataCompanyInterface.prototype['customer_group_id'] = undefined;

/**
 * @member {module:model/CompanyDataCompanyExtensionInterface} extension_attributes
 */
CompanyDataCompanyInterface.prototype['extension_attributes'] = undefined;

/**
 * Id.
 * @member {Number} id
 */
CompanyDataCompanyInterface.prototype['id'] = undefined;

/**
 * Legal name.
 * @member {String} legal_name
 */
CompanyDataCompanyInterface.prototype['legal_name'] = undefined;

/**
 * Postcode.
 * @member {String} postcode
 */
CompanyDataCompanyInterface.prototype['postcode'] = undefined;

/**
 * Region.
 * @member {String} region
 */
CompanyDataCompanyInterface.prototype['region'] = undefined;

/**
 * Region Id.
 * @member {String} region_id
 */
CompanyDataCompanyInterface.prototype['region_id'] = undefined;

/**
 * Reject Reason.
 * @member {String} reject_reason
 */
CompanyDataCompanyInterface.prototype['reject_reason'] = undefined;

/**
 * Rejected at time.
 * @member {String} rejected_at
 */
CompanyDataCompanyInterface.prototype['rejected_at'] = undefined;

/**
 * Reseller Id.
 * @member {String} reseller_id
 */
CompanyDataCompanyInterface.prototype['reseller_id'] = undefined;

/**
 * Sales Representative Id.
 * @member {Number} sales_representative_id
 */
CompanyDataCompanyInterface.prototype['sales_representative_id'] = undefined;

/**
 * Status.
 * @member {Number} status
 */
CompanyDataCompanyInterface.prototype['status'] = undefined;

/**
 * Street.
 * @member {Array.<String>} street
 */
CompanyDataCompanyInterface.prototype['street'] = undefined;

/**
 * Company admin customer id.
 * @member {Number} super_user_id
 */
CompanyDataCompanyInterface.prototype['super_user_id'] = undefined;

/**
 * Telephone.
 * @member {String} telephone
 */
CompanyDataCompanyInterface.prototype['telephone'] = undefined;

/**
 * Vat tax id.
 * @member {String} vat_tax_id
 */
CompanyDataCompanyInterface.prototype['vat_tax_id'] = undefined;






export default CompanyDataCompanyInterface;

