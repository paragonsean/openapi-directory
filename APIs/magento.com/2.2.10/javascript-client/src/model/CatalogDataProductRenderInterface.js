/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogDataProductRenderButtonInterface from './CatalogDataProductRenderButtonInterface';
import CatalogDataProductRenderExtensionInterface from './CatalogDataProductRenderExtensionInterface';
import CatalogDataProductRenderImageInterface from './CatalogDataProductRenderImageInterface';
import CatalogDataProductRenderPriceInfoInterface from './CatalogDataProductRenderPriceInfoInterface';

/**
 * The CatalogDataProductRenderInterface model module.
 * @module model/CatalogDataProductRenderInterface
 * @version 2.2.10
 */
class CatalogDataProductRenderInterface {
    /**
     * Constructs a new <code>CatalogDataProductRenderInterface</code>.
     * Represents Data Object which holds enough information to render product This information is put into part as Add To Cart or Add to Compare Data or Price Data
     * @alias module:model/CatalogDataProductRenderInterface
     * @param addToCartButton {module:model/CatalogDataProductRenderButtonInterface} 
     * @param addToCompareButton {module:model/CatalogDataProductRenderButtonInterface} 
     * @param currencyCode {String} Current or desired currency code to product
     * @param extensionAttributes {module:model/CatalogDataProductRenderExtensionInterface} 
     * @param id {Number} Product identifier
     * @param images {Array.<module:model/CatalogDataProductRenderImageInterface>} Enough information, that needed to render image on front
     * @param isSalable {String} Information about product saleability (In Stock)
     * @param name {String} Product name
     * @param priceInfo {module:model/CatalogDataProductRenderPriceInfoInterface} 
     * @param storeId {Number} Information about current store id or requested store id
     * @param type {String} Product type. Such as bundle, grouped, simple, etc...
     * @param url {String} Product url
     */
    constructor(addToCartButton, addToCompareButton, currencyCode, extensionAttributes, id, images, isSalable, name, priceInfo, storeId, type, url) { 
        
        CatalogDataProductRenderInterface.initialize(this, addToCartButton, addToCompareButton, currencyCode, extensionAttributes, id, images, isSalable, name, priceInfo, storeId, type, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, addToCartButton, addToCompareButton, currencyCode, extensionAttributes, id, images, isSalable, name, priceInfo, storeId, type, url) { 
        obj['add_to_cart_button'] = addToCartButton;
        obj['add_to_compare_button'] = addToCompareButton;
        obj['currency_code'] = currencyCode;
        obj['extension_attributes'] = extensionAttributes;
        obj['id'] = id;
        obj['images'] = images;
        obj['is_salable'] = isSalable;
        obj['name'] = name;
        obj['price_info'] = priceInfo;
        obj['store_id'] = storeId;
        obj['type'] = type;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>CatalogDataProductRenderInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogDataProductRenderInterface} obj Optional instance to populate.
     * @return {module:model/CatalogDataProductRenderInterface} The populated <code>CatalogDataProductRenderInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogDataProductRenderInterface();

            if (data.hasOwnProperty('add_to_cart_button')) {
                obj['add_to_cart_button'] = CatalogDataProductRenderButtonInterface.constructFromObject(data['add_to_cart_button']);
            }
            if (data.hasOwnProperty('add_to_compare_button')) {
                obj['add_to_compare_button'] = CatalogDataProductRenderButtonInterface.constructFromObject(data['add_to_compare_button']);
            }
            if (data.hasOwnProperty('currency_code')) {
                obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = CatalogDataProductRenderExtensionInterface.constructFromObject(data['extension_attributes']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [CatalogDataProductRenderImageInterface]);
            }
            if (data.hasOwnProperty('is_salable')) {
                obj['is_salable'] = ApiClient.convertToType(data['is_salable'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price_info')) {
                obj['price_info'] = CatalogDataProductRenderPriceInfoInterface.constructFromObject(data['price_info']);
            }
            if (data.hasOwnProperty('store_id')) {
                obj['store_id'] = ApiClient.convertToType(data['store_id'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogDataProductRenderInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogDataProductRenderInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogDataProductRenderInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `add_to_cart_button`
        if (data['add_to_cart_button']) { // data not null
          CatalogDataProductRenderButtonInterface.validateJSON(data['add_to_cart_button']);
        }
        // validate the optional field `add_to_compare_button`
        if (data['add_to_compare_button']) { // data not null
          CatalogDataProductRenderButtonInterface.validateJSON(data['add_to_compare_button']);
        }
        // ensure the json data is a string
        if (data['currency_code'] && !(typeof data['currency_code'] === 'string' || data['currency_code'] instanceof String)) {
            throw new Error("Expected the field `currency_code` to be a primitive type in the JSON string but got " + data['currency_code']);
        }
        // validate the optional field `extension_attributes`
        if (data['extension_attributes']) { // data not null
          CatalogDataProductRenderExtensionInterface.validateJSON(data['extension_attributes']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                CatalogDataProductRenderImageInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['is_salable'] && !(typeof data['is_salable'] === 'string' || data['is_salable'] instanceof String)) {
            throw new Error("Expected the field `is_salable` to be a primitive type in the JSON string but got " + data['is_salable']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `price_info`
        if (data['price_info']) { // data not null
          CatalogDataProductRenderPriceInfoInterface.validateJSON(data['price_info']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

CatalogDataProductRenderInterface.RequiredProperties = ["add_to_cart_button", "add_to_compare_button", "currency_code", "extension_attributes", "id", "images", "is_salable", "name", "price_info", "store_id", "type", "url"];

/**
 * @member {module:model/CatalogDataProductRenderButtonInterface} add_to_cart_button
 */
CatalogDataProductRenderInterface.prototype['add_to_cart_button'] = undefined;

/**
 * @member {module:model/CatalogDataProductRenderButtonInterface} add_to_compare_button
 */
CatalogDataProductRenderInterface.prototype['add_to_compare_button'] = undefined;

/**
 * Current or desired currency code to product
 * @member {String} currency_code
 */
CatalogDataProductRenderInterface.prototype['currency_code'] = undefined;

/**
 * @member {module:model/CatalogDataProductRenderExtensionInterface} extension_attributes
 */
CatalogDataProductRenderInterface.prototype['extension_attributes'] = undefined;

/**
 * Product identifier
 * @member {Number} id
 */
CatalogDataProductRenderInterface.prototype['id'] = undefined;

/**
 * Enough information, that needed to render image on front
 * @member {Array.<module:model/CatalogDataProductRenderImageInterface>} images
 */
CatalogDataProductRenderInterface.prototype['images'] = undefined;

/**
 * Information about product saleability (In Stock)
 * @member {String} is_salable
 */
CatalogDataProductRenderInterface.prototype['is_salable'] = undefined;

/**
 * Product name
 * @member {String} name
 */
CatalogDataProductRenderInterface.prototype['name'] = undefined;

/**
 * @member {module:model/CatalogDataProductRenderPriceInfoInterface} price_info
 */
CatalogDataProductRenderInterface.prototype['price_info'] = undefined;

/**
 * Information about current store id or requested store id
 * @member {Number} store_id
 */
CatalogDataProductRenderInterface.prototype['store_id'] = undefined;

/**
 * Product type. Such as bundle, grouped, simple, etc...
 * @member {String} type
 */
CatalogDataProductRenderInterface.prototype['type'] = undefined;

/**
 * Product url
 * @member {String} url
 */
CatalogDataProductRenderInterface.prototype['url'] = undefined;






export default CatalogDataProductRenderInterface;

