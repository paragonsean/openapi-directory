/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogDataProductTypeInterface model module.
 * @module model/CatalogDataProductTypeInterface
 * @version 2.2.10
 */
class CatalogDataProductTypeInterface {
    /**
     * Constructs a new <code>CatalogDataProductTypeInterface</code>.
     * Product type details
     * @alias module:model/CatalogDataProductTypeInterface
     * @param label {String} Product type label
     * @param name {String} Product type code
     */
    constructor(label, name) { 
        
        CatalogDataProductTypeInterface.initialize(this, label, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, label, name) { 
        obj['label'] = label;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CatalogDataProductTypeInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogDataProductTypeInterface} obj Optional instance to populate.
     * @return {module:model/CatalogDataProductTypeInterface} The populated <code>CatalogDataProductTypeInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogDataProductTypeInterface();

            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogDataProductTypeInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogDataProductTypeInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogDataProductTypeInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

CatalogDataProductTypeInterface.RequiredProperties = ["label", "name"];

/**
 * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductTypeInterface
 * @member {Object} extension_attributes
 */
CatalogDataProductTypeInterface.prototype['extension_attributes'] = undefined;

/**
 * Product type label
 * @member {String} label
 */
CatalogDataProductTypeInterface.prototype['label'] = undefined;

/**
 * Product type code
 * @member {String} name
 */
CatalogDataProductTypeInterface.prototype['name'] = undefined;






export default CatalogDataProductTypeInterface;

