/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SalesDataTransactionInterface model module.
 * @module model/SalesDataTransactionInterface
 * @version 2.2.10
 */
class SalesDataTransactionInterface {
    /**
     * Constructs a new <code>SalesDataTransactionInterface</code>.
     * Transaction interface. A transaction is an interaction between a merchant and a customer such as a purchase, a credit, a refund, and so on.
     * @alias module:model/SalesDataTransactionInterface
     * @param childTransactions {Array.<module:model/SalesDataTransactionInterface>} Array of child transactions.
     * @param createdAt {String} Created-at timestamp.
     * @param isClosed {Number} Is-closed flag value.
     * @param orderId {Number} Order ID.
     * @param parentTxnId {String} Parent transaction business ID.
     * @param paymentId {Number} Payment ID.
     * @param transactionId {Number} Transaction ID.
     * @param txnId {String} Transaction business ID.
     * @param txnType {String} Transaction type.
     */
    constructor(childTransactions, createdAt, isClosed, orderId, parentTxnId, paymentId, transactionId, txnId, txnType) { 
        
        SalesDataTransactionInterface.initialize(this, childTransactions, createdAt, isClosed, orderId, parentTxnId, paymentId, transactionId, txnId, txnType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, childTransactions, createdAt, isClosed, orderId, parentTxnId, paymentId, transactionId, txnId, txnType) { 
        obj['child_transactions'] = childTransactions;
        obj['created_at'] = createdAt;
        obj['is_closed'] = isClosed;
        obj['order_id'] = orderId;
        obj['parent_txn_id'] = parentTxnId;
        obj['payment_id'] = paymentId;
        obj['transaction_id'] = transactionId;
        obj['txn_id'] = txnId;
        obj['txn_type'] = txnType;
    }

    /**
     * Constructs a <code>SalesDataTransactionInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SalesDataTransactionInterface} obj Optional instance to populate.
     * @return {module:model/SalesDataTransactionInterface} The populated <code>SalesDataTransactionInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SalesDataTransactionInterface();

            if (data.hasOwnProperty('additional_information')) {
                obj['additional_information'] = ApiClient.convertToType(data['additional_information'], ['String']);
            }
            if (data.hasOwnProperty('child_transactions')) {
                obj['child_transactions'] = ApiClient.convertToType(data['child_transactions'], [SalesDataTransactionInterface]);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('is_closed')) {
                obj['is_closed'] = ApiClient.convertToType(data['is_closed'], 'Number');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'Number');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'Number');
            }
            if (data.hasOwnProperty('parent_txn_id')) {
                obj['parent_txn_id'] = ApiClient.convertToType(data['parent_txn_id'], 'String');
            }
            if (data.hasOwnProperty('payment_id')) {
                obj['payment_id'] = ApiClient.convertToType(data['payment_id'], 'Number');
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'Number');
            }
            if (data.hasOwnProperty('txn_id')) {
                obj['txn_id'] = ApiClient.convertToType(data['txn_id'], 'String');
            }
            if (data.hasOwnProperty('txn_type')) {
                obj['txn_type'] = ApiClient.convertToType(data['txn_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SalesDataTransactionInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SalesDataTransactionInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SalesDataTransactionInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['additional_information'])) {
            throw new Error("Expected the field `additional_information` to be an array in the JSON data but got " + data['additional_information']);
        }
        if (data['child_transactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['child_transactions'])) {
                throw new Error("Expected the field `child_transactions` to be an array in the JSON data but got " + data['child_transactions']);
            }
            // validate the optional field `child_transactions` (array)
            for (const item of data['child_transactions']) {
                SalesDataTransactionInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['parent_txn_id'] && !(typeof data['parent_txn_id'] === 'string' || data['parent_txn_id'] instanceof String)) {
            throw new Error("Expected the field `parent_txn_id` to be a primitive type in the JSON string but got " + data['parent_txn_id']);
        }
        // ensure the json data is a string
        if (data['txn_id'] && !(typeof data['txn_id'] === 'string' || data['txn_id'] instanceof String)) {
            throw new Error("Expected the field `txn_id` to be a primitive type in the JSON string but got " + data['txn_id']);
        }
        // ensure the json data is a string
        if (data['txn_type'] && !(typeof data['txn_type'] === 'string' || data['txn_type'] instanceof String)) {
            throw new Error("Expected the field `txn_type` to be a primitive type in the JSON string but got " + data['txn_type']);
        }

        return true;
    }


}

SalesDataTransactionInterface.RequiredProperties = ["child_transactions", "created_at", "is_closed", "order_id", "parent_txn_id", "payment_id", "transaction_id", "txn_id", "txn_type"];

/**
 * Array of additional information. Otherwise, null.
 * @member {Array.<String>} additional_information
 */
SalesDataTransactionInterface.prototype['additional_information'] = undefined;

/**
 * Array of child transactions.
 * @member {Array.<module:model/SalesDataTransactionInterface>} child_transactions
 */
SalesDataTransactionInterface.prototype['child_transactions'] = undefined;

/**
 * Created-at timestamp.
 * @member {String} created_at
 */
SalesDataTransactionInterface.prototype['created_at'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\TransactionInterface
 * @member {Object} extension_attributes
 */
SalesDataTransactionInterface.prototype['extension_attributes'] = undefined;

/**
 * Is-closed flag value.
 * @member {Number} is_closed
 */
SalesDataTransactionInterface.prototype['is_closed'] = undefined;

/**
 * Order ID.
 * @member {Number} order_id
 */
SalesDataTransactionInterface.prototype['order_id'] = undefined;

/**
 * The parent ID for the transaction. Otherwise, null.
 * @member {Number} parent_id
 */
SalesDataTransactionInterface.prototype['parent_id'] = undefined;

/**
 * Parent transaction business ID.
 * @member {String} parent_txn_id
 */
SalesDataTransactionInterface.prototype['parent_txn_id'] = undefined;

/**
 * Payment ID.
 * @member {Number} payment_id
 */
SalesDataTransactionInterface.prototype['payment_id'] = undefined;

/**
 * Transaction ID.
 * @member {Number} transaction_id
 */
SalesDataTransactionInterface.prototype['transaction_id'] = undefined;

/**
 * Transaction business ID.
 * @member {String} txn_id
 */
SalesDataTransactionInterface.prototype['txn_id'] = undefined;

/**
 * Transaction type.
 * @member {String} txn_type
 */
SalesDataTransactionInterface.prototype['txn_type'] = undefined;






export default SalesDataTransactionInterface;

