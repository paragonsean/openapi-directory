/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QuoteDataCartItemExtensionInterface from './QuoteDataCartItemExtensionInterface';
import QuoteDataProductOptionInterface from './QuoteDataProductOptionInterface';

/**
 * The QuoteDataCartItemInterface model module.
 * @module model/QuoteDataCartItemInterface
 * @version 2.2.10
 */
class QuoteDataCartItemInterface {
    /**
     * Constructs a new <code>QuoteDataCartItemInterface</code>.
     * Interface CartItemInterface
     * @alias module:model/QuoteDataCartItemInterface
     * @param qty {Number} Product quantity.
     * @param quoteId {String} Quote id.
     */
    constructor(qty, quoteId) { 
        
        QuoteDataCartItemInterface.initialize(this, qty, quoteId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, qty, quoteId) { 
        obj['qty'] = qty;
        obj['quote_id'] = quoteId;
    }

    /**
     * Constructs a <code>QuoteDataCartItemInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuoteDataCartItemInterface} obj Optional instance to populate.
     * @return {module:model/QuoteDataCartItemInterface} The populated <code>QuoteDataCartItemInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuoteDataCartItemInterface();

            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = QuoteDataCartItemExtensionInterface.constructFromObject(data['extension_attributes']);
            }
            if (data.hasOwnProperty('item_id')) {
                obj['item_id'] = ApiClient.convertToType(data['item_id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('product_option')) {
                obj['product_option'] = QuoteDataProductOptionInterface.constructFromObject(data['product_option']);
            }
            if (data.hasOwnProperty('product_type')) {
                obj['product_type'] = ApiClient.convertToType(data['product_type'], 'String');
            }
            if (data.hasOwnProperty('qty')) {
                obj['qty'] = ApiClient.convertToType(data['qty'], 'Number');
            }
            if (data.hasOwnProperty('quote_id')) {
                obj['quote_id'] = ApiClient.convertToType(data['quote_id'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuoteDataCartItemInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuoteDataCartItemInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QuoteDataCartItemInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `extension_attributes`
        if (data['extension_attributes']) { // data not null
          QuoteDataCartItemExtensionInterface.validateJSON(data['extension_attributes']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `product_option`
        if (data['product_option']) { // data not null
          QuoteDataProductOptionInterface.validateJSON(data['product_option']);
        }
        // ensure the json data is a string
        if (data['product_type'] && !(typeof data['product_type'] === 'string' || data['product_type'] instanceof String)) {
            throw new Error("Expected the field `product_type` to be a primitive type in the JSON string but got " + data['product_type']);
        }
        // ensure the json data is a string
        if (data['quote_id'] && !(typeof data['quote_id'] === 'string' || data['quote_id'] instanceof String)) {
            throw new Error("Expected the field `quote_id` to be a primitive type in the JSON string but got " + data['quote_id']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }

        return true;
    }


}

QuoteDataCartItemInterface.RequiredProperties = ["qty", "quote_id"];

/**
 * @member {module:model/QuoteDataCartItemExtensionInterface} extension_attributes
 */
QuoteDataCartItemInterface.prototype['extension_attributes'] = undefined;

/**
 * Item ID. Otherwise, null.
 * @member {Number} item_id
 */
QuoteDataCartItemInterface.prototype['item_id'] = undefined;

/**
 * Product name. Otherwise, null.
 * @member {String} name
 */
QuoteDataCartItemInterface.prototype['name'] = undefined;

/**
 * Product price. Otherwise, null.
 * @member {Number} price
 */
QuoteDataCartItemInterface.prototype['price'] = undefined;

/**
 * @member {module:model/QuoteDataProductOptionInterface} product_option
 */
QuoteDataCartItemInterface.prototype['product_option'] = undefined;

/**
 * Product type. Otherwise, null.
 * @member {String} product_type
 */
QuoteDataCartItemInterface.prototype['product_type'] = undefined;

/**
 * Product quantity.
 * @member {Number} qty
 */
QuoteDataCartItemInterface.prototype['qty'] = undefined;

/**
 * Quote id.
 * @member {String} quote_id
 */
QuoteDataCartItemInterface.prototype['quote_id'] = undefined;

/**
 * Product SKU. Otherwise, null.
 * @member {String} sku
 */
QuoteDataCartItemInterface.prototype['sku'] = undefined;






export default QuoteDataCartItemInterface;

