/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogDataProductRenderButtonInterface model module.
 * @module model/CatalogDataProductRenderButtonInterface
 * @version 2.2.10
 */
class CatalogDataProductRenderButtonInterface {
    /**
     * Constructs a new <code>CatalogDataProductRenderButtonInterface</code>.
     * Button interface. This interface represents all manner of product buttons: add to cart, add to compare, etc... The buttons describes by this interface should have interaction with backend
     * @alias module:model/CatalogDataProductRenderButtonInterface
     * @param postData {String} Post data
     * @param requiredOptions {Boolean} Flag whether a product has options or not
     * @param url {String} Url, needed to add product to cart
     */
    constructor(postData, requiredOptions, url) { 
        
        CatalogDataProductRenderButtonInterface.initialize(this, postData, requiredOptions, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, postData, requiredOptions, url) { 
        obj['post_data'] = postData;
        obj['required_options'] = requiredOptions;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>CatalogDataProductRenderButtonInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogDataProductRenderButtonInterface} obj Optional instance to populate.
     * @return {module:model/CatalogDataProductRenderButtonInterface} The populated <code>CatalogDataProductRenderButtonInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogDataProductRenderButtonInterface();

            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('post_data')) {
                obj['post_data'] = ApiClient.convertToType(data['post_data'], 'String');
            }
            if (data.hasOwnProperty('required_options')) {
                obj['required_options'] = ApiClient.convertToType(data['required_options'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogDataProductRenderButtonInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogDataProductRenderButtonInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogDataProductRenderButtonInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['post_data'] && !(typeof data['post_data'] === 'string' || data['post_data'] instanceof String)) {
            throw new Error("Expected the field `post_data` to be a primitive type in the JSON string but got " + data['post_data']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

CatalogDataProductRenderButtonInterface.RequiredProperties = ["post_data", "required_options", "url"];

/**
 * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\ButtonInterface
 * @member {Object} extension_attributes
 */
CatalogDataProductRenderButtonInterface.prototype['extension_attributes'] = undefined;

/**
 * Post data
 * @member {String} post_data
 */
CatalogDataProductRenderButtonInterface.prototype['post_data'] = undefined;

/**
 * Flag whether a product has options or not
 * @member {Boolean} required_options
 */
CatalogDataProductRenderButtonInterface.prototype['required_options'] = undefined;

/**
 * Url, needed to add product to cart
 * @member {String} url
 */
CatalogDataProductRenderButtonInterface.prototype['url'] = undefined;






export default CatalogDataProductRenderButtonInterface;

