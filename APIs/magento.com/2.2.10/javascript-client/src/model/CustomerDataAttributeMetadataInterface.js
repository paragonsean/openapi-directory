/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomerDataOptionInterface from './CustomerDataOptionInterface';
import CustomerDataValidationRuleInterface from './CustomerDataValidationRuleInterface';

/**
 * The CustomerDataAttributeMetadataInterface model module.
 * @module model/CustomerDataAttributeMetadataInterface
 * @version 2.2.10
 */
class CustomerDataAttributeMetadataInterface {
    /**
     * Constructs a new <code>CustomerDataAttributeMetadataInterface</code>.
     * Customer attribute metadata interface.
     * @alias module:model/CustomerDataAttributeMetadataInterface
     * @param attributeCode {String} Code of the attribute.
     * @param backendType {String} Backend type.
     * @param dataModel {String} Data model for attribute.
     * @param frontendClass {String} Class which is used to display the attribute on frontend.
     * @param frontendInput {String} HTML for input element.
     * @param frontendLabel {String} Label which supposed to be displayed on frontend.
     * @param inputFilter {String} Template used for input (e.g. \"date\")
     * @param multilineCount {Number} Of lines of the attribute value.
     * @param note {String} The note attribute for the element.
     * @param options {Array.<module:model/CustomerDataOptionInterface>} Options of the attribute (key => value pairs for select)
     * @param required {Boolean} Attribute is required.
     * @param sortOrder {Number} Attributes sort order.
     * @param storeLabel {String} Label of the store.
     * @param system {Boolean} This is a system attribute.
     * @param userDefined {Boolean} Current attribute has been defined by a user.
     * @param validationRules {Array.<module:model/CustomerDataValidationRuleInterface>} Validation rules.
     * @param visible {Boolean} Attribute is visible on frontend.
     */
    constructor(attributeCode, backendType, dataModel, frontendClass, frontendInput, frontendLabel, inputFilter, multilineCount, note, options, required, sortOrder, storeLabel, system, userDefined, validationRules, visible) { 
        
        CustomerDataAttributeMetadataInterface.initialize(this, attributeCode, backendType, dataModel, frontendClass, frontendInput, frontendLabel, inputFilter, multilineCount, note, options, required, sortOrder, storeLabel, system, userDefined, validationRules, visible);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributeCode, backendType, dataModel, frontendClass, frontendInput, frontendLabel, inputFilter, multilineCount, note, options, required, sortOrder, storeLabel, system, userDefined, validationRules, visible) { 
        obj['attribute_code'] = attributeCode;
        obj['backend_type'] = backendType;
        obj['data_model'] = dataModel;
        obj['frontend_class'] = frontendClass;
        obj['frontend_input'] = frontendInput;
        obj['frontend_label'] = frontendLabel;
        obj['input_filter'] = inputFilter;
        obj['multiline_count'] = multilineCount;
        obj['note'] = note;
        obj['options'] = options;
        obj['required'] = required;
        obj['sort_order'] = sortOrder;
        obj['store_label'] = storeLabel;
        obj['system'] = system;
        obj['user_defined'] = userDefined;
        obj['validation_rules'] = validationRules;
        obj['visible'] = visible;
    }

    /**
     * Constructs a <code>CustomerDataAttributeMetadataInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerDataAttributeMetadataInterface} obj Optional instance to populate.
     * @return {module:model/CustomerDataAttributeMetadataInterface} The populated <code>CustomerDataAttributeMetadataInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerDataAttributeMetadataInterface();

            if (data.hasOwnProperty('attribute_code')) {
                obj['attribute_code'] = ApiClient.convertToType(data['attribute_code'], 'String');
            }
            if (data.hasOwnProperty('backend_type')) {
                obj['backend_type'] = ApiClient.convertToType(data['backend_type'], 'String');
            }
            if (data.hasOwnProperty('data_model')) {
                obj['data_model'] = ApiClient.convertToType(data['data_model'], 'String');
            }
            if (data.hasOwnProperty('frontend_class')) {
                obj['frontend_class'] = ApiClient.convertToType(data['frontend_class'], 'String');
            }
            if (data.hasOwnProperty('frontend_input')) {
                obj['frontend_input'] = ApiClient.convertToType(data['frontend_input'], 'String');
            }
            if (data.hasOwnProperty('frontend_label')) {
                obj['frontend_label'] = ApiClient.convertToType(data['frontend_label'], 'String');
            }
            if (data.hasOwnProperty('input_filter')) {
                obj['input_filter'] = ApiClient.convertToType(data['input_filter'], 'String');
            }
            if (data.hasOwnProperty('is_filterable_in_grid')) {
                obj['is_filterable_in_grid'] = ApiClient.convertToType(data['is_filterable_in_grid'], 'Boolean');
            }
            if (data.hasOwnProperty('is_searchable_in_grid')) {
                obj['is_searchable_in_grid'] = ApiClient.convertToType(data['is_searchable_in_grid'], 'Boolean');
            }
            if (data.hasOwnProperty('is_used_in_grid')) {
                obj['is_used_in_grid'] = ApiClient.convertToType(data['is_used_in_grid'], 'Boolean');
            }
            if (data.hasOwnProperty('is_visible_in_grid')) {
                obj['is_visible_in_grid'] = ApiClient.convertToType(data['is_visible_in_grid'], 'Boolean');
            }
            if (data.hasOwnProperty('multiline_count')) {
                obj['multiline_count'] = ApiClient.convertToType(data['multiline_count'], 'Number');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [CustomerDataOptionInterface]);
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('sort_order')) {
                obj['sort_order'] = ApiClient.convertToType(data['sort_order'], 'Number');
            }
            if (data.hasOwnProperty('store_label')) {
                obj['store_label'] = ApiClient.convertToType(data['store_label'], 'String');
            }
            if (data.hasOwnProperty('system')) {
                obj['system'] = ApiClient.convertToType(data['system'], 'Boolean');
            }
            if (data.hasOwnProperty('user_defined')) {
                obj['user_defined'] = ApiClient.convertToType(data['user_defined'], 'Boolean');
            }
            if (data.hasOwnProperty('validation_rules')) {
                obj['validation_rules'] = ApiClient.convertToType(data['validation_rules'], [CustomerDataValidationRuleInterface]);
            }
            if (data.hasOwnProperty('visible')) {
                obj['visible'] = ApiClient.convertToType(data['visible'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerDataAttributeMetadataInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerDataAttributeMetadataInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomerDataAttributeMetadataInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['attribute_code'] && !(typeof data['attribute_code'] === 'string' || data['attribute_code'] instanceof String)) {
            throw new Error("Expected the field `attribute_code` to be a primitive type in the JSON string but got " + data['attribute_code']);
        }
        // ensure the json data is a string
        if (data['backend_type'] && !(typeof data['backend_type'] === 'string' || data['backend_type'] instanceof String)) {
            throw new Error("Expected the field `backend_type` to be a primitive type in the JSON string but got " + data['backend_type']);
        }
        // ensure the json data is a string
        if (data['data_model'] && !(typeof data['data_model'] === 'string' || data['data_model'] instanceof String)) {
            throw new Error("Expected the field `data_model` to be a primitive type in the JSON string but got " + data['data_model']);
        }
        // ensure the json data is a string
        if (data['frontend_class'] && !(typeof data['frontend_class'] === 'string' || data['frontend_class'] instanceof String)) {
            throw new Error("Expected the field `frontend_class` to be a primitive type in the JSON string but got " + data['frontend_class']);
        }
        // ensure the json data is a string
        if (data['frontend_input'] && !(typeof data['frontend_input'] === 'string' || data['frontend_input'] instanceof String)) {
            throw new Error("Expected the field `frontend_input` to be a primitive type in the JSON string but got " + data['frontend_input']);
        }
        // ensure the json data is a string
        if (data['frontend_label'] && !(typeof data['frontend_label'] === 'string' || data['frontend_label'] instanceof String)) {
            throw new Error("Expected the field `frontend_label` to be a primitive type in the JSON string but got " + data['frontend_label']);
        }
        // ensure the json data is a string
        if (data['input_filter'] && !(typeof data['input_filter'] === 'string' || data['input_filter'] instanceof String)) {
            throw new Error("Expected the field `input_filter` to be a primitive type in the JSON string but got " + data['input_filter']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                CustomerDataOptionInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['store_label'] && !(typeof data['store_label'] === 'string' || data['store_label'] instanceof String)) {
            throw new Error("Expected the field `store_label` to be a primitive type in the JSON string but got " + data['store_label']);
        }
        if (data['validation_rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['validation_rules'])) {
                throw new Error("Expected the field `validation_rules` to be an array in the JSON data but got " + data['validation_rules']);
            }
            // validate the optional field `validation_rules` (array)
            for (const item of data['validation_rules']) {
                CustomerDataValidationRuleInterface.validateJSON(item);
            };
        }

        return true;
    }


}

CustomerDataAttributeMetadataInterface.RequiredProperties = ["attribute_code", "backend_type", "data_model", "frontend_class", "frontend_input", "frontend_label", "input_filter", "multiline_count", "note", "options", "required", "sort_order", "store_label", "system", "user_defined", "validation_rules", "visible"];

/**
 * Code of the attribute.
 * @member {String} attribute_code
 */
CustomerDataAttributeMetadataInterface.prototype['attribute_code'] = undefined;

/**
 * Backend type.
 * @member {String} backend_type
 */
CustomerDataAttributeMetadataInterface.prototype['backend_type'] = undefined;

/**
 * Data model for attribute.
 * @member {String} data_model
 */
CustomerDataAttributeMetadataInterface.prototype['data_model'] = undefined;

/**
 * Class which is used to display the attribute on frontend.
 * @member {String} frontend_class
 */
CustomerDataAttributeMetadataInterface.prototype['frontend_class'] = undefined;

/**
 * HTML for input element.
 * @member {String} frontend_input
 */
CustomerDataAttributeMetadataInterface.prototype['frontend_input'] = undefined;

/**
 * Label which supposed to be displayed on frontend.
 * @member {String} frontend_label
 */
CustomerDataAttributeMetadataInterface.prototype['frontend_label'] = undefined;

/**
 * Template used for input (e.g. \"date\")
 * @member {String} input_filter
 */
CustomerDataAttributeMetadataInterface.prototype['input_filter'] = undefined;

/**
 * It is filterable in customer grid
 * @member {Boolean} is_filterable_in_grid
 */
CustomerDataAttributeMetadataInterface.prototype['is_filterable_in_grid'] = undefined;

/**
 * It is searchable in customer grid
 * @member {Boolean} is_searchable_in_grid
 */
CustomerDataAttributeMetadataInterface.prototype['is_searchable_in_grid'] = undefined;

/**
 * It is used in customer grid
 * @member {Boolean} is_used_in_grid
 */
CustomerDataAttributeMetadataInterface.prototype['is_used_in_grid'] = undefined;

/**
 * It is visible in customer grid
 * @member {Boolean} is_visible_in_grid
 */
CustomerDataAttributeMetadataInterface.prototype['is_visible_in_grid'] = undefined;

/**
 * Of lines of the attribute value.
 * @member {Number} multiline_count
 */
CustomerDataAttributeMetadataInterface.prototype['multiline_count'] = undefined;

/**
 * The note attribute for the element.
 * @member {String} note
 */
CustomerDataAttributeMetadataInterface.prototype['note'] = undefined;

/**
 * Options of the attribute (key => value pairs for select)
 * @member {Array.<module:model/CustomerDataOptionInterface>} options
 */
CustomerDataAttributeMetadataInterface.prototype['options'] = undefined;

/**
 * Attribute is required.
 * @member {Boolean} required
 */
CustomerDataAttributeMetadataInterface.prototype['required'] = undefined;

/**
 * Attributes sort order.
 * @member {Number} sort_order
 */
CustomerDataAttributeMetadataInterface.prototype['sort_order'] = undefined;

/**
 * Label of the store.
 * @member {String} store_label
 */
CustomerDataAttributeMetadataInterface.prototype['store_label'] = undefined;

/**
 * This is a system attribute.
 * @member {Boolean} system
 */
CustomerDataAttributeMetadataInterface.prototype['system'] = undefined;

/**
 * Current attribute has been defined by a user.
 * @member {Boolean} user_defined
 */
CustomerDataAttributeMetadataInterface.prototype['user_defined'] = undefined;

/**
 * Validation rules.
 * @member {Array.<module:model/CustomerDataValidationRuleInterface>} validation_rules
 */
CustomerDataAttributeMetadataInterface.prototype['validation_rules'] = undefined;

/**
 * Attribute is visible on frontend.
 * @member {Boolean} visible
 */
CustomerDataAttributeMetadataInterface.prototype['visible'] = undefined;






export default CustomerDataAttributeMetadataInterface;

