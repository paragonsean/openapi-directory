/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogDataCategoryTreeInterface model module.
 * @module model/CatalogDataCategoryTreeInterface
 * @version 2.2.10
 */
class CatalogDataCategoryTreeInterface {
    /**
     * Constructs a new <code>CatalogDataCategoryTreeInterface</code>.
     * 
     * @alias module:model/CatalogDataCategoryTreeInterface
     * @param childrenData {Array.<module:model/CatalogDataCategoryTreeInterface>} 
     * @param isActive {Boolean} Whether category is active
     * @param level {Number} Category level
     * @param name {String} Category name
     * @param parentId {Number} Parent category ID
     * @param position {Number} Category position
     * @param productCount {Number} Product count
     */
    constructor(childrenData, isActive, level, name, parentId, position, productCount) { 
        
        CatalogDataCategoryTreeInterface.initialize(this, childrenData, isActive, level, name, parentId, position, productCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, childrenData, isActive, level, name, parentId, position, productCount) { 
        obj['children_data'] = childrenData;
        obj['is_active'] = isActive;
        obj['level'] = level;
        obj['name'] = name;
        obj['parent_id'] = parentId;
        obj['position'] = position;
        obj['product_count'] = productCount;
    }

    /**
     * Constructs a <code>CatalogDataCategoryTreeInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogDataCategoryTreeInterface} obj Optional instance to populate.
     * @return {module:model/CatalogDataCategoryTreeInterface} The populated <code>CatalogDataCategoryTreeInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogDataCategoryTreeInterface();

            if (data.hasOwnProperty('children_data')) {
                obj['children_data'] = ApiClient.convertToType(data['children_data'], [CatalogDataCategoryTreeInterface]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'Number');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('product_count')) {
                obj['product_count'] = ApiClient.convertToType(data['product_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogDataCategoryTreeInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogDataCategoryTreeInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogDataCategoryTreeInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['children_data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children_data'])) {
                throw new Error("Expected the field `children_data` to be an array in the JSON data but got " + data['children_data']);
            }
            // validate the optional field `children_data` (array)
            for (const item of data['children_data']) {
                CatalogDataCategoryTreeInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

CatalogDataCategoryTreeInterface.RequiredProperties = ["children_data", "is_active", "level", "name", "parent_id", "position", "product_count"];

/**
 * @member {Array.<module:model/CatalogDataCategoryTreeInterface>} children_data
 */
CatalogDataCategoryTreeInterface.prototype['children_data'] = undefined;

/**
 * @member {Number} id
 */
CatalogDataCategoryTreeInterface.prototype['id'] = undefined;

/**
 * Whether category is active
 * @member {Boolean} is_active
 */
CatalogDataCategoryTreeInterface.prototype['is_active'] = undefined;

/**
 * Category level
 * @member {Number} level
 */
CatalogDataCategoryTreeInterface.prototype['level'] = undefined;

/**
 * Category name
 * @member {String} name
 */
CatalogDataCategoryTreeInterface.prototype['name'] = undefined;

/**
 * Parent category ID
 * @member {Number} parent_id
 */
CatalogDataCategoryTreeInterface.prototype['parent_id'] = undefined;

/**
 * Category position
 * @member {Number} position
 */
CatalogDataCategoryTreeInterface.prototype['position'] = undefined;

/**
 * Product count
 * @member {Number} product_count
 */
CatalogDataCategoryTreeInterface.prototype['product_count'] = undefined;






export default CatalogDataCategoryTreeInterface;

