/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TemandoShippingDataCollectionPointOrderCollectionPointInterface model module.
 * @module model/TemandoShippingDataCollectionPointOrderCollectionPointInterface
 * @version 2.2.10
 */
class TemandoShippingDataCollectionPointOrderCollectionPointInterface {
    /**
     * Constructs a new <code>TemandoShippingDataCollectionPointOrderCollectionPointInterface</code>.
     * Temando Order Collection Point Interface â€“ Order Details/Fulfillment
     * @alias module:model/TemandoShippingDataCollectionPointOrderCollectionPointInterface
     * @param city {String} 
     * @param collectionPointId {String} 
     * @param country {String} 
     * @param name {String} 
     * @param postcode {String} 
     * @param recipientAddressId {Number} 
     * @param region {String} 
     * @param street {Array.<String>} 
     */
    constructor(city, collectionPointId, country, name, postcode, recipientAddressId, region, street) { 
        
        TemandoShippingDataCollectionPointOrderCollectionPointInterface.initialize(this, city, collectionPointId, country, name, postcode, recipientAddressId, region, street);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, city, collectionPointId, country, name, postcode, recipientAddressId, region, street) { 
        obj['city'] = city;
        obj['collection_point_id'] = collectionPointId;
        obj['country'] = country;
        obj['name'] = name;
        obj['postcode'] = postcode;
        obj['recipient_address_id'] = recipientAddressId;
        obj['region'] = region;
        obj['street'] = street;
    }

    /**
     * Constructs a <code>TemandoShippingDataCollectionPointOrderCollectionPointInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TemandoShippingDataCollectionPointOrderCollectionPointInterface} obj Optional instance to populate.
     * @return {module:model/TemandoShippingDataCollectionPointOrderCollectionPointInterface} The populated <code>TemandoShippingDataCollectionPointOrderCollectionPointInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemandoShippingDataCollectionPointOrderCollectionPointInterface();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('collection_point_id')) {
                obj['collection_point_id'] = ApiClient.convertToType(data['collection_point_id'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('postcode')) {
                obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
            }
            if (data.hasOwnProperty('recipient_address_id')) {
                obj['recipient_address_id'] = ApiClient.convertToType(data['recipient_address_id'], 'Number');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemandoShippingDataCollectionPointOrderCollectionPointInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemandoShippingDataCollectionPointOrderCollectionPointInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TemandoShippingDataCollectionPointOrderCollectionPointInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['collection_point_id'] && !(typeof data['collection_point_id'] === 'string' || data['collection_point_id'] instanceof String)) {
            throw new Error("Expected the field `collection_point_id` to be a primitive type in the JSON string but got " + data['collection_point_id']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['postcode'] && !(typeof data['postcode'] === 'string' || data['postcode'] instanceof String)) {
            throw new Error("Expected the field `postcode` to be a primitive type in the JSON string but got " + data['postcode']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['street'])) {
            throw new Error("Expected the field `street` to be an array in the JSON data but got " + data['street']);
        }

        return true;
    }


}

TemandoShippingDataCollectionPointOrderCollectionPointInterface.RequiredProperties = ["city", "collection_point_id", "country", "name", "postcode", "recipient_address_id", "region", "street"];

/**
 * @member {String} city
 */
TemandoShippingDataCollectionPointOrderCollectionPointInterface.prototype['city'] = undefined;

/**
 * @member {String} collection_point_id
 */
TemandoShippingDataCollectionPointOrderCollectionPointInterface.prototype['collection_point_id'] = undefined;

/**
 * @member {String} country
 */
TemandoShippingDataCollectionPointOrderCollectionPointInterface.prototype['country'] = undefined;

/**
 * @member {String} name
 */
TemandoShippingDataCollectionPointOrderCollectionPointInterface.prototype['name'] = undefined;

/**
 * @member {String} postcode
 */
TemandoShippingDataCollectionPointOrderCollectionPointInterface.prototype['postcode'] = undefined;

/**
 * @member {Number} recipient_address_id
 */
TemandoShippingDataCollectionPointOrderCollectionPointInterface.prototype['recipient_address_id'] = undefined;

/**
 * @member {String} region
 */
TemandoShippingDataCollectionPointOrderCollectionPointInterface.prototype['region'] = undefined;

/**
 * @member {Array.<String>} street
 */
TemandoShippingDataCollectionPointOrderCollectionPointInterface.prototype['street'] = undefined;






export default TemandoShippingDataCollectionPointOrderCollectionPointInterface;

