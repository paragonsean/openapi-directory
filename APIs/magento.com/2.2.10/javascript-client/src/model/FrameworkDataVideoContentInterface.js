/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FrameworkDataVideoContentInterface model module.
 * @module model/FrameworkDataVideoContentInterface
 * @version 2.2.10
 */
class FrameworkDataVideoContentInterface {
    /**
     * Constructs a new <code>FrameworkDataVideoContentInterface</code>.
     * Video Content data interface
     * @alias module:model/FrameworkDataVideoContentInterface
     * @param mediaType {String} MIME type
     * @param videoDescription {String} Video Description
     * @param videoMetadata {String} Metadata
     * @param videoProvider {String} Provider
     * @param videoTitle {String} Title
     * @param videoUrl {String} Video URL
     */
    constructor(mediaType, videoDescription, videoMetadata, videoProvider, videoTitle, videoUrl) { 
        
        FrameworkDataVideoContentInterface.initialize(this, mediaType, videoDescription, videoMetadata, videoProvider, videoTitle, videoUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mediaType, videoDescription, videoMetadata, videoProvider, videoTitle, videoUrl) { 
        obj['media_type'] = mediaType;
        obj['video_description'] = videoDescription;
        obj['video_metadata'] = videoMetadata;
        obj['video_provider'] = videoProvider;
        obj['video_title'] = videoTitle;
        obj['video_url'] = videoUrl;
    }

    /**
     * Constructs a <code>FrameworkDataVideoContentInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FrameworkDataVideoContentInterface} obj Optional instance to populate.
     * @return {module:model/FrameworkDataVideoContentInterface} The populated <code>FrameworkDataVideoContentInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FrameworkDataVideoContentInterface();

            if (data.hasOwnProperty('media_type')) {
                obj['media_type'] = ApiClient.convertToType(data['media_type'], 'String');
            }
            if (data.hasOwnProperty('video_description')) {
                obj['video_description'] = ApiClient.convertToType(data['video_description'], 'String');
            }
            if (data.hasOwnProperty('video_metadata')) {
                obj['video_metadata'] = ApiClient.convertToType(data['video_metadata'], 'String');
            }
            if (data.hasOwnProperty('video_provider')) {
                obj['video_provider'] = ApiClient.convertToType(data['video_provider'], 'String');
            }
            if (data.hasOwnProperty('video_title')) {
                obj['video_title'] = ApiClient.convertToType(data['video_title'], 'String');
            }
            if (data.hasOwnProperty('video_url')) {
                obj['video_url'] = ApiClient.convertToType(data['video_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FrameworkDataVideoContentInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FrameworkDataVideoContentInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FrameworkDataVideoContentInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['media_type'] && !(typeof data['media_type'] === 'string' || data['media_type'] instanceof String)) {
            throw new Error("Expected the field `media_type` to be a primitive type in the JSON string but got " + data['media_type']);
        }
        // ensure the json data is a string
        if (data['video_description'] && !(typeof data['video_description'] === 'string' || data['video_description'] instanceof String)) {
            throw new Error("Expected the field `video_description` to be a primitive type in the JSON string but got " + data['video_description']);
        }
        // ensure the json data is a string
        if (data['video_metadata'] && !(typeof data['video_metadata'] === 'string' || data['video_metadata'] instanceof String)) {
            throw new Error("Expected the field `video_metadata` to be a primitive type in the JSON string but got " + data['video_metadata']);
        }
        // ensure the json data is a string
        if (data['video_provider'] && !(typeof data['video_provider'] === 'string' || data['video_provider'] instanceof String)) {
            throw new Error("Expected the field `video_provider` to be a primitive type in the JSON string but got " + data['video_provider']);
        }
        // ensure the json data is a string
        if (data['video_title'] && !(typeof data['video_title'] === 'string' || data['video_title'] instanceof String)) {
            throw new Error("Expected the field `video_title` to be a primitive type in the JSON string but got " + data['video_title']);
        }
        // ensure the json data is a string
        if (data['video_url'] && !(typeof data['video_url'] === 'string' || data['video_url'] instanceof String)) {
            throw new Error("Expected the field `video_url` to be a primitive type in the JSON string but got " + data['video_url']);
        }

        return true;
    }


}

FrameworkDataVideoContentInterface.RequiredProperties = ["media_type", "video_description", "video_metadata", "video_provider", "video_title", "video_url"];

/**
 * MIME type
 * @member {String} media_type
 */
FrameworkDataVideoContentInterface.prototype['media_type'] = undefined;

/**
 * Video Description
 * @member {String} video_description
 */
FrameworkDataVideoContentInterface.prototype['video_description'] = undefined;

/**
 * Metadata
 * @member {String} video_metadata
 */
FrameworkDataVideoContentInterface.prototype['video_metadata'] = undefined;

/**
 * Provider
 * @member {String} video_provider
 */
FrameworkDataVideoContentInterface.prototype['video_provider'] = undefined;

/**
 * Title
 * @member {String} video_title
 */
FrameworkDataVideoContentInterface.prototype['video_title'] = undefined;

/**
 * Video URL
 * @member {String} video_url
 */
FrameworkDataVideoContentInterface.prototype['video_url'] = undefined;






export default FrameworkDataVideoContentInterface;

