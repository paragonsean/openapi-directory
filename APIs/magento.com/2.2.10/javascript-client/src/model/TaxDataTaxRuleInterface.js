/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaxDataTaxRuleInterface model module.
 * @module model/TaxDataTaxRuleInterface
 * @version 2.2.10
 */
class TaxDataTaxRuleInterface {
    /**
     * Constructs a new <code>TaxDataTaxRuleInterface</code>.
     * Tax rule interface.
     * @alias module:model/TaxDataTaxRuleInterface
     * @param code {String} Tax rule code
     * @param customerTaxClassIds {Array.<Number>} Customer tax class id
     * @param position {Number} Sort order.
     * @param priority {Number} Priority
     * @param productTaxClassIds {Array.<Number>} Product tax class id
     * @param taxRateIds {Array.<Number>} Tax rate ids
     */
    constructor(code, customerTaxClassIds, position, priority, productTaxClassIds, taxRateIds) { 
        
        TaxDataTaxRuleInterface.initialize(this, code, customerTaxClassIds, position, priority, productTaxClassIds, taxRateIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, customerTaxClassIds, position, priority, productTaxClassIds, taxRateIds) { 
        obj['code'] = code;
        obj['customer_tax_class_ids'] = customerTaxClassIds;
        obj['position'] = position;
        obj['priority'] = priority;
        obj['product_tax_class_ids'] = productTaxClassIds;
        obj['tax_rate_ids'] = taxRateIds;
    }

    /**
     * Constructs a <code>TaxDataTaxRuleInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxDataTaxRuleInterface} obj Optional instance to populate.
     * @return {module:model/TaxDataTaxRuleInterface} The populated <code>TaxDataTaxRuleInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxDataTaxRuleInterface();

            if (data.hasOwnProperty('calculate_subtotal')) {
                obj['calculate_subtotal'] = ApiClient.convertToType(data['calculate_subtotal'], 'Boolean');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('customer_tax_class_ids')) {
                obj['customer_tax_class_ids'] = ApiClient.convertToType(data['customer_tax_class_ids'], ['Number']);
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('product_tax_class_ids')) {
                obj['product_tax_class_ids'] = ApiClient.convertToType(data['product_tax_class_ids'], ['Number']);
            }
            if (data.hasOwnProperty('tax_rate_ids')) {
                obj['tax_rate_ids'] = ApiClient.convertToType(data['tax_rate_ids'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaxDataTaxRuleInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaxDataTaxRuleInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaxDataTaxRuleInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['customer_tax_class_ids'])) {
            throw new Error("Expected the field `customer_tax_class_ids` to be an array in the JSON data but got " + data['customer_tax_class_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['product_tax_class_ids'])) {
            throw new Error("Expected the field `product_tax_class_ids` to be an array in the JSON data but got " + data['product_tax_class_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tax_rate_ids'])) {
            throw new Error("Expected the field `tax_rate_ids` to be an array in the JSON data but got " + data['tax_rate_ids']);
        }

        return true;
    }


}

TaxDataTaxRuleInterface.RequiredProperties = ["code", "customer_tax_class_ids", "position", "priority", "product_tax_class_ids", "tax_rate_ids"];

/**
 * Calculate subtotal.
 * @member {Boolean} calculate_subtotal
 */
TaxDataTaxRuleInterface.prototype['calculate_subtotal'] = undefined;

/**
 * Tax rule code
 * @member {String} code
 */
TaxDataTaxRuleInterface.prototype['code'] = undefined;

/**
 * Customer tax class id
 * @member {Array.<Number>} customer_tax_class_ids
 */
TaxDataTaxRuleInterface.prototype['customer_tax_class_ids'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRuleInterface
 * @member {Object} extension_attributes
 */
TaxDataTaxRuleInterface.prototype['extension_attributes'] = undefined;

/**
 * Id
 * @member {Number} id
 */
TaxDataTaxRuleInterface.prototype['id'] = undefined;

/**
 * Sort order.
 * @member {Number} position
 */
TaxDataTaxRuleInterface.prototype['position'] = undefined;

/**
 * Priority
 * @member {Number} priority
 */
TaxDataTaxRuleInterface.prototype['priority'] = undefined;

/**
 * Product tax class id
 * @member {Array.<Number>} product_tax_class_ids
 */
TaxDataTaxRuleInterface.prototype['product_tax_class_ids'] = undefined;

/**
 * Tax rate ids
 * @member {Array.<Number>} tax_rate_ids
 */
TaxDataTaxRuleInterface.prototype['tax_rate_ids'] = undefined;






export default TaxDataTaxRuleInterface;

