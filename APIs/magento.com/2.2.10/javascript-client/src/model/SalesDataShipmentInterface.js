/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SalesDataShipmentCommentInterface from './SalesDataShipmentCommentInterface';
import SalesDataShipmentExtensionInterface from './SalesDataShipmentExtensionInterface';
import SalesDataShipmentItemInterface from './SalesDataShipmentItemInterface';
import SalesDataShipmentPackageInterface from './SalesDataShipmentPackageInterface';
import SalesDataShipmentTrackInterface from './SalesDataShipmentTrackInterface';

/**
 * The SalesDataShipmentInterface model module.
 * @module model/SalesDataShipmentInterface
 * @version 2.2.10
 */
class SalesDataShipmentInterface {
    /**
     * Constructs a new <code>SalesDataShipmentInterface</code>.
     * Shipment interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.
     * @alias module:model/SalesDataShipmentInterface
     * @param comments {Array.<module:model/SalesDataShipmentCommentInterface>} Array of comments.
     * @param items {Array.<module:model/SalesDataShipmentItemInterface>} Array of items.
     * @param orderId {Number} Order ID.
     * @param tracks {Array.<module:model/SalesDataShipmentTrackInterface>} Array of tracks.
     */
    constructor(comments, items, orderId, tracks) { 
        
        SalesDataShipmentInterface.initialize(this, comments, items, orderId, tracks);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, comments, items, orderId, tracks) { 
        obj['comments'] = comments;
        obj['items'] = items;
        obj['order_id'] = orderId;
        obj['tracks'] = tracks;
    }

    /**
     * Constructs a <code>SalesDataShipmentInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SalesDataShipmentInterface} obj Optional instance to populate.
     * @return {module:model/SalesDataShipmentInterface} The populated <code>SalesDataShipmentInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SalesDataShipmentInterface();

            if (data.hasOwnProperty('billing_address_id')) {
                obj['billing_address_id'] = ApiClient.convertToType(data['billing_address_id'], 'Number');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], [SalesDataShipmentCommentInterface]);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'Number');
            }
            if (data.hasOwnProperty('email_sent')) {
                obj['email_sent'] = ApiClient.convertToType(data['email_sent'], 'Number');
            }
            if (data.hasOwnProperty('entity_id')) {
                obj['entity_id'] = ApiClient.convertToType(data['entity_id'], 'Number');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = SalesDataShipmentExtensionInterface.constructFromObject(data['extension_attributes']);
            }
            if (data.hasOwnProperty('increment_id')) {
                obj['increment_id'] = ApiClient.convertToType(data['increment_id'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [SalesDataShipmentItemInterface]);
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'Number');
            }
            if (data.hasOwnProperty('packages')) {
                obj['packages'] = ApiClient.convertToType(data['packages'], [SalesDataShipmentPackageInterface]);
            }
            if (data.hasOwnProperty('shipment_status')) {
                obj['shipment_status'] = ApiClient.convertToType(data['shipment_status'], 'Number');
            }
            if (data.hasOwnProperty('shipping_address_id')) {
                obj['shipping_address_id'] = ApiClient.convertToType(data['shipping_address_id'], 'Number');
            }
            if (data.hasOwnProperty('shipping_label')) {
                obj['shipping_label'] = ApiClient.convertToType(data['shipping_label'], 'String');
            }
            if (data.hasOwnProperty('store_id')) {
                obj['store_id'] = ApiClient.convertToType(data['store_id'], 'Number');
            }
            if (data.hasOwnProperty('total_qty')) {
                obj['total_qty'] = ApiClient.convertToType(data['total_qty'], 'Number');
            }
            if (data.hasOwnProperty('total_weight')) {
                obj['total_weight'] = ApiClient.convertToType(data['total_weight'], 'Number');
            }
            if (data.hasOwnProperty('tracks')) {
                obj['tracks'] = ApiClient.convertToType(data['tracks'], [SalesDataShipmentTrackInterface]);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SalesDataShipmentInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SalesDataShipmentInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SalesDataShipmentInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['comments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['comments'])) {
                throw new Error("Expected the field `comments` to be an array in the JSON data but got " + data['comments']);
            }
            // validate the optional field `comments` (array)
            for (const item of data['comments']) {
                SalesDataShipmentCommentInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // validate the optional field `extension_attributes`
        if (data['extension_attributes']) { // data not null
          SalesDataShipmentExtensionInterface.validateJSON(data['extension_attributes']);
        }
        // ensure the json data is a string
        if (data['increment_id'] && !(typeof data['increment_id'] === 'string' || data['increment_id'] instanceof String)) {
            throw new Error("Expected the field `increment_id` to be a primitive type in the JSON string but got " + data['increment_id']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                SalesDataShipmentItemInterface.validateJSON(item);
            };
        }
        if (data['packages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['packages'])) {
                throw new Error("Expected the field `packages` to be an array in the JSON data but got " + data['packages']);
            }
            // validate the optional field `packages` (array)
            for (const item of data['packages']) {
                SalesDataShipmentPackageInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['shipping_label'] && !(typeof data['shipping_label'] === 'string' || data['shipping_label'] instanceof String)) {
            throw new Error("Expected the field `shipping_label` to be a primitive type in the JSON string but got " + data['shipping_label']);
        }
        if (data['tracks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tracks'])) {
                throw new Error("Expected the field `tracks` to be an array in the JSON data but got " + data['tracks']);
            }
            // validate the optional field `tracks` (array)
            for (const item of data['tracks']) {
                SalesDataShipmentTrackInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

SalesDataShipmentInterface.RequiredProperties = ["comments", "items", "order_id", "tracks"];

/**
 * Billing address ID.
 * @member {Number} billing_address_id
 */
SalesDataShipmentInterface.prototype['billing_address_id'] = undefined;

/**
 * Array of comments.
 * @member {Array.<module:model/SalesDataShipmentCommentInterface>} comments
 */
SalesDataShipmentInterface.prototype['comments'] = undefined;

/**
 * Created-at timestamp.
 * @member {String} created_at
 */
SalesDataShipmentInterface.prototype['created_at'] = undefined;

/**
 * Customer ID.
 * @member {Number} customer_id
 */
SalesDataShipmentInterface.prototype['customer_id'] = undefined;

/**
 * Email-sent flag value.
 * @member {Number} email_sent
 */
SalesDataShipmentInterface.prototype['email_sent'] = undefined;

/**
 * Shipment ID.
 * @member {Number} entity_id
 */
SalesDataShipmentInterface.prototype['entity_id'] = undefined;

/**
 * @member {module:model/SalesDataShipmentExtensionInterface} extension_attributes
 */
SalesDataShipmentInterface.prototype['extension_attributes'] = undefined;

/**
 * Increment ID.
 * @member {String} increment_id
 */
SalesDataShipmentInterface.prototype['increment_id'] = undefined;

/**
 * Array of items.
 * @member {Array.<module:model/SalesDataShipmentItemInterface>} items
 */
SalesDataShipmentInterface.prototype['items'] = undefined;

/**
 * Order ID.
 * @member {Number} order_id
 */
SalesDataShipmentInterface.prototype['order_id'] = undefined;

/**
 * Array of packages, if any. Otherwise, null.
 * @member {Array.<module:model/SalesDataShipmentPackageInterface>} packages
 */
SalesDataShipmentInterface.prototype['packages'] = undefined;

/**
 * Shipment status.
 * @member {Number} shipment_status
 */
SalesDataShipmentInterface.prototype['shipment_status'] = undefined;

/**
 * Shipping address ID.
 * @member {Number} shipping_address_id
 */
SalesDataShipmentInterface.prototype['shipping_address_id'] = undefined;

/**
 * Shipping label.
 * @member {String} shipping_label
 */
SalesDataShipmentInterface.prototype['shipping_label'] = undefined;

/**
 * Store ID.
 * @member {Number} store_id
 */
SalesDataShipmentInterface.prototype['store_id'] = undefined;

/**
 * Total quantity.
 * @member {Number} total_qty
 */
SalesDataShipmentInterface.prototype['total_qty'] = undefined;

/**
 * Total weight.
 * @member {Number} total_weight
 */
SalesDataShipmentInterface.prototype['total_weight'] = undefined;

/**
 * Array of tracks.
 * @member {Array.<module:model/SalesDataShipmentTrackInterface>} tracks
 */
SalesDataShipmentInterface.prototype['tracks'] = undefined;

/**
 * Updated-at timestamp.
 * @member {String} updated_at
 */
SalesDataShipmentInterface.prototype['updated_at'] = undefined;






export default SalesDataShipmentInterface;

