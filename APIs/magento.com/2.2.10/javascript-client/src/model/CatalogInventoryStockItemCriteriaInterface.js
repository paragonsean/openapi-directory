/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FrameworkCriteriaInterface from './FrameworkCriteriaInterface';

/**
 * The CatalogInventoryStockItemCriteriaInterface model module.
 * @module model/CatalogInventoryStockItemCriteriaInterface
 * @version 2.2.10
 */
class CatalogInventoryStockItemCriteriaInterface {
    /**
     * Constructs a new <code>CatalogInventoryStockItemCriteriaInterface</code>.
     * Interface StockItemCriteriaInterface
     * @alias module:model/CatalogInventoryStockItemCriteriaInterface
     * @param criteriaList {Array.<module:model/FrameworkCriteriaInterface>} Criteria objects added to current Composite Criteria
     * @param filters {Array.<String>} List of filters
     * @param limit {Array.<String>} Limit
     * @param mapperInterfaceName {String} Associated Mapper Interface name
     * @param orders {Array.<String>} Ordering criteria
     */
    constructor(criteriaList, filters, limit, mapperInterfaceName, orders) { 
        
        CatalogInventoryStockItemCriteriaInterface.initialize(this, criteriaList, filters, limit, mapperInterfaceName, orders);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, criteriaList, filters, limit, mapperInterfaceName, orders) { 
        obj['criteria_list'] = criteriaList;
        obj['filters'] = filters;
        obj['limit'] = limit;
        obj['mapper_interface_name'] = mapperInterfaceName;
        obj['orders'] = orders;
    }

    /**
     * Constructs a <code>CatalogInventoryStockItemCriteriaInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogInventoryStockItemCriteriaInterface} obj Optional instance to populate.
     * @return {module:model/CatalogInventoryStockItemCriteriaInterface} The populated <code>CatalogInventoryStockItemCriteriaInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogInventoryStockItemCriteriaInterface();

            if (data.hasOwnProperty('criteria_list')) {
                obj['criteria_list'] = ApiClient.convertToType(data['criteria_list'], [FrameworkCriteriaInterface]);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], ['String']);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], ['String']);
            }
            if (data.hasOwnProperty('mapper_interface_name')) {
                obj['mapper_interface_name'] = ApiClient.convertToType(data['mapper_interface_name'], 'String');
            }
            if (data.hasOwnProperty('orders')) {
                obj['orders'] = ApiClient.convertToType(data['orders'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogInventoryStockItemCriteriaInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogInventoryStockItemCriteriaInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogInventoryStockItemCriteriaInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['criteria_list']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['criteria_list'])) {
                throw new Error("Expected the field `criteria_list` to be an array in the JSON data but got " + data['criteria_list']);
            }
            // validate the optional field `criteria_list` (array)
            for (const item of data['criteria_list']) {
                FrameworkCriteriaInterface.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['filters'])) {
            throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['limit'])) {
            throw new Error("Expected the field `limit` to be an array in the JSON data but got " + data['limit']);
        }
        // ensure the json data is a string
        if (data['mapper_interface_name'] && !(typeof data['mapper_interface_name'] === 'string' || data['mapper_interface_name'] instanceof String)) {
            throw new Error("Expected the field `mapper_interface_name` to be a primitive type in the JSON string but got " + data['mapper_interface_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['orders'])) {
            throw new Error("Expected the field `orders` to be an array in the JSON data but got " + data['orders']);
        }

        return true;
    }


}

CatalogInventoryStockItemCriteriaInterface.RequiredProperties = ["criteria_list", "filters", "limit", "mapper_interface_name", "orders"];

/**
 * Criteria objects added to current Composite Criteria
 * @member {Array.<module:model/FrameworkCriteriaInterface>} criteria_list
 */
CatalogInventoryStockItemCriteriaInterface.prototype['criteria_list'] = undefined;

/**
 * List of filters
 * @member {Array.<String>} filters
 */
CatalogInventoryStockItemCriteriaInterface.prototype['filters'] = undefined;

/**
 * Limit
 * @member {Array.<String>} limit
 */
CatalogInventoryStockItemCriteriaInterface.prototype['limit'] = undefined;

/**
 * Associated Mapper Interface name
 * @member {String} mapper_interface_name
 */
CatalogInventoryStockItemCriteriaInterface.prototype['mapper_interface_name'] = undefined;

/**
 * Ordering criteria
 * @member {Array.<String>} orders
 */
CatalogInventoryStockItemCriteriaInterface.prototype['orders'] = undefined;






export default CatalogInventoryStockItemCriteriaInterface;

