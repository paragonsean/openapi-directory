/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomerDataRegionInterface model module.
 * @module model/CustomerDataRegionInterface
 * @version 2.2.10
 */
class CustomerDataRegionInterface {
    /**
     * Constructs a new <code>CustomerDataRegionInterface</code>.
     * Customer address region interface.
     * @alias module:model/CustomerDataRegionInterface
     * @param region {String} Region
     * @param regionCode {String} Region code
     * @param regionId {Number} Region id
     */
    constructor(region, regionCode, regionId) { 
        
        CustomerDataRegionInterface.initialize(this, region, regionCode, regionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, region, regionCode, regionId) { 
        obj['region'] = region;
        obj['region_code'] = regionCode;
        obj['region_id'] = regionId;
    }

    /**
     * Constructs a <code>CustomerDataRegionInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerDataRegionInterface} obj Optional instance to populate.
     * @return {module:model/CustomerDataRegionInterface} The populated <code>CustomerDataRegionInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerDataRegionInterface();

            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('region_code')) {
                obj['region_code'] = ApiClient.convertToType(data['region_code'], 'String');
            }
            if (data.hasOwnProperty('region_id')) {
                obj['region_id'] = ApiClient.convertToType(data['region_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerDataRegionInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerDataRegionInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomerDataRegionInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['region_code'] && !(typeof data['region_code'] === 'string' || data['region_code'] instanceof String)) {
            throw new Error("Expected the field `region_code` to be a primitive type in the JSON string but got " + data['region_code']);
        }

        return true;
    }


}

CustomerDataRegionInterface.RequiredProperties = ["region", "region_code", "region_id"];

/**
 * ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\RegionInterface
 * @member {Object} extension_attributes
 */
CustomerDataRegionInterface.prototype['extension_attributes'] = undefined;

/**
 * Region
 * @member {String} region
 */
CustomerDataRegionInterface.prototype['region'] = undefined;

/**
 * Region code
 * @member {String} region_code
 */
CustomerDataRegionInterface.prototype['region_code'] = undefined;

/**
 * Region id
 * @member {Number} region_id
 */
CustomerDataRegionInterface.prototype['region_id'] = undefined;






export default CustomerDataRegionInterface;

