/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaxDataTaxRateTitleInterface from './TaxDataTaxRateTitleInterface';

/**
 * The TaxDataTaxRateInterface model module.
 * @module model/TaxDataTaxRateInterface
 * @version 2.2.10
 */
class TaxDataTaxRateInterface {
    /**
     * Constructs a new <code>TaxDataTaxRateInterface</code>.
     * Tax rate interface.
     * @alias module:model/TaxDataTaxRateInterface
     * @param code {String} Tax rate code
     * @param rate {Number} Tax rate in percentage
     * @param taxCountryId {String} Country id
     */
    constructor(code, rate, taxCountryId) { 
        
        TaxDataTaxRateInterface.initialize(this, code, rate, taxCountryId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, rate, taxCountryId) { 
        obj['code'] = code;
        obj['rate'] = rate;
        obj['tax_country_id'] = taxCountryId;
    }

    /**
     * Constructs a <code>TaxDataTaxRateInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxDataTaxRateInterface} obj Optional instance to populate.
     * @return {module:model/TaxDataTaxRateInterface} The populated <code>TaxDataTaxRateInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxDataTaxRateInterface();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
            }
            if (data.hasOwnProperty('region_name')) {
                obj['region_name'] = ApiClient.convertToType(data['region_name'], 'String');
            }
            if (data.hasOwnProperty('tax_country_id')) {
                obj['tax_country_id'] = ApiClient.convertToType(data['tax_country_id'], 'String');
            }
            if (data.hasOwnProperty('tax_postcode')) {
                obj['tax_postcode'] = ApiClient.convertToType(data['tax_postcode'], 'String');
            }
            if (data.hasOwnProperty('tax_region_id')) {
                obj['tax_region_id'] = ApiClient.convertToType(data['tax_region_id'], 'Number');
            }
            if (data.hasOwnProperty('titles')) {
                obj['titles'] = ApiClient.convertToType(data['titles'], [TaxDataTaxRateTitleInterface]);
            }
            if (data.hasOwnProperty('zip_from')) {
                obj['zip_from'] = ApiClient.convertToType(data['zip_from'], 'Number');
            }
            if (data.hasOwnProperty('zip_is_range')) {
                obj['zip_is_range'] = ApiClient.convertToType(data['zip_is_range'], 'Number');
            }
            if (data.hasOwnProperty('zip_to')) {
                obj['zip_to'] = ApiClient.convertToType(data['zip_to'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaxDataTaxRateInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaxDataTaxRateInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaxDataTaxRateInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['region_name'] && !(typeof data['region_name'] === 'string' || data['region_name'] instanceof String)) {
            throw new Error("Expected the field `region_name` to be a primitive type in the JSON string but got " + data['region_name']);
        }
        // ensure the json data is a string
        if (data['tax_country_id'] && !(typeof data['tax_country_id'] === 'string' || data['tax_country_id'] instanceof String)) {
            throw new Error("Expected the field `tax_country_id` to be a primitive type in the JSON string but got " + data['tax_country_id']);
        }
        // ensure the json data is a string
        if (data['tax_postcode'] && !(typeof data['tax_postcode'] === 'string' || data['tax_postcode'] instanceof String)) {
            throw new Error("Expected the field `tax_postcode` to be a primitive type in the JSON string but got " + data['tax_postcode']);
        }
        if (data['titles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['titles'])) {
                throw new Error("Expected the field `titles` to be an array in the JSON data but got " + data['titles']);
            }
            // validate the optional field `titles` (array)
            for (const item of data['titles']) {
                TaxDataTaxRateTitleInterface.validateJSON(item);
            };
        }

        return true;
    }


}

TaxDataTaxRateInterface.RequiredProperties = ["code", "rate", "tax_country_id"];

/**
 * Tax rate code
 * @member {String} code
 */
TaxDataTaxRateInterface.prototype['code'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRateInterface
 * @member {Object} extension_attributes
 */
TaxDataTaxRateInterface.prototype['extension_attributes'] = undefined;

/**
 * Id
 * @member {Number} id
 */
TaxDataTaxRateInterface.prototype['id'] = undefined;

/**
 * Tax rate in percentage
 * @member {Number} rate
 */
TaxDataTaxRateInterface.prototype['rate'] = undefined;

/**
 * Region name
 * @member {String} region_name
 */
TaxDataTaxRateInterface.prototype['region_name'] = undefined;

/**
 * Country id
 * @member {String} tax_country_id
 */
TaxDataTaxRateInterface.prototype['tax_country_id'] = undefined;

/**
 * Postcode
 * @member {String} tax_postcode
 */
TaxDataTaxRateInterface.prototype['tax_postcode'] = undefined;

/**
 * Region id
 * @member {Number} tax_region_id
 */
TaxDataTaxRateInterface.prototype['tax_region_id'] = undefined;

/**
 * Tax rate titles
 * @member {Array.<module:model/TaxDataTaxRateTitleInterface>} titles
 */
TaxDataTaxRateInterface.prototype['titles'] = undefined;

/**
 * Zip range from
 * @member {Number} zip_from
 */
TaxDataTaxRateInterface.prototype['zip_from'] = undefined;

/**
 * Zip is range
 * @member {Number} zip_is_range
 */
TaxDataTaxRateInterface.prototype['zip_is_range'] = undefined;

/**
 * Zip range to
 * @member {Number} zip_to
 */
TaxDataTaxRateInterface.prototype['zip_to'] = undefined;






export default TaxDataTaxRateInterface;

