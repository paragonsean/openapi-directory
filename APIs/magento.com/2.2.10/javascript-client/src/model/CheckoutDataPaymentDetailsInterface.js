/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QuoteDataPaymentMethodInterface from './QuoteDataPaymentMethodInterface';
import QuoteDataTotalsInterface from './QuoteDataTotalsInterface';

/**
 * The CheckoutDataPaymentDetailsInterface model module.
 * @module model/CheckoutDataPaymentDetailsInterface
 * @version 2.2.10
 */
class CheckoutDataPaymentDetailsInterface {
    /**
     * Constructs a new <code>CheckoutDataPaymentDetailsInterface</code>.
     * Interface PaymentDetailsInterface
     * @alias module:model/CheckoutDataPaymentDetailsInterface
     * @param paymentMethods {Array.<module:model/QuoteDataPaymentMethodInterface>} 
     * @param totals {module:model/QuoteDataTotalsInterface} 
     */
    constructor(paymentMethods, totals) { 
        
        CheckoutDataPaymentDetailsInterface.initialize(this, paymentMethods, totals);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, paymentMethods, totals) { 
        obj['payment_methods'] = paymentMethods;
        obj['totals'] = totals;
    }

    /**
     * Constructs a <code>CheckoutDataPaymentDetailsInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckoutDataPaymentDetailsInterface} obj Optional instance to populate.
     * @return {module:model/CheckoutDataPaymentDetailsInterface} The populated <code>CheckoutDataPaymentDetailsInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckoutDataPaymentDetailsInterface();

            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('payment_methods')) {
                obj['payment_methods'] = ApiClient.convertToType(data['payment_methods'], [QuoteDataPaymentMethodInterface]);
            }
            if (data.hasOwnProperty('totals')) {
                obj['totals'] = QuoteDataTotalsInterface.constructFromObject(data['totals']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckoutDataPaymentDetailsInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckoutDataPaymentDetailsInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckoutDataPaymentDetailsInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['payment_methods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payment_methods'])) {
                throw new Error("Expected the field `payment_methods` to be an array in the JSON data but got " + data['payment_methods']);
            }
            // validate the optional field `payment_methods` (array)
            for (const item of data['payment_methods']) {
                QuoteDataPaymentMethodInterface.validateJSON(item);
            };
        }
        // validate the optional field `totals`
        if (data['totals']) { // data not null
          QuoteDataTotalsInterface.validateJSON(data['totals']);
        }

        return true;
    }


}

CheckoutDataPaymentDetailsInterface.RequiredProperties = ["payment_methods", "totals"];

/**
 * ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\PaymentDetailsInterface
 * @member {Object} extension_attributes
 */
CheckoutDataPaymentDetailsInterface.prototype['extension_attributes'] = undefined;

/**
 * @member {Array.<module:model/QuoteDataPaymentMethodInterface>} payment_methods
 */
CheckoutDataPaymentDetailsInterface.prototype['payment_methods'] = undefined;

/**
 * @member {module:model/QuoteDataTotalsInterface} totals
 */
CheckoutDataPaymentDetailsInterface.prototype['totals'] = undefined;






export default CheckoutDataPaymentDetailsInterface;

