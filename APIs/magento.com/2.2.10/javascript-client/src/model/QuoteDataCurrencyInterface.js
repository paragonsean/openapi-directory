/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QuoteDataCurrencyInterface model module.
 * @module model/QuoteDataCurrencyInterface
 * @version 2.2.10
 */
class QuoteDataCurrencyInterface {
    /**
     * Constructs a new <code>QuoteDataCurrencyInterface</code>.
     * Interface CurrencyInterface
     * @alias module:model/QuoteDataCurrencyInterface
     */
    constructor() { 
        
        QuoteDataCurrencyInterface.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QuoteDataCurrencyInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuoteDataCurrencyInterface} obj Optional instance to populate.
     * @return {module:model/QuoteDataCurrencyInterface} The populated <code>QuoteDataCurrencyInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuoteDataCurrencyInterface();

            if (data.hasOwnProperty('base_currency_code')) {
                obj['base_currency_code'] = ApiClient.convertToType(data['base_currency_code'], 'String');
            }
            if (data.hasOwnProperty('base_to_global_rate')) {
                obj['base_to_global_rate'] = ApiClient.convertToType(data['base_to_global_rate'], 'Number');
            }
            if (data.hasOwnProperty('base_to_quote_rate')) {
                obj['base_to_quote_rate'] = ApiClient.convertToType(data['base_to_quote_rate'], 'Number');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('global_currency_code')) {
                obj['global_currency_code'] = ApiClient.convertToType(data['global_currency_code'], 'String');
            }
            if (data.hasOwnProperty('quote_currency_code')) {
                obj['quote_currency_code'] = ApiClient.convertToType(data['quote_currency_code'], 'String');
            }
            if (data.hasOwnProperty('store_currency_code')) {
                obj['store_currency_code'] = ApiClient.convertToType(data['store_currency_code'], 'String');
            }
            if (data.hasOwnProperty('store_to_base_rate')) {
                obj['store_to_base_rate'] = ApiClient.convertToType(data['store_to_base_rate'], 'Number');
            }
            if (data.hasOwnProperty('store_to_quote_rate')) {
                obj['store_to_quote_rate'] = ApiClient.convertToType(data['store_to_quote_rate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuoteDataCurrencyInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuoteDataCurrencyInterface</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['base_currency_code'] && !(typeof data['base_currency_code'] === 'string' || data['base_currency_code'] instanceof String)) {
            throw new Error("Expected the field `base_currency_code` to be a primitive type in the JSON string but got " + data['base_currency_code']);
        }
        // ensure the json data is a string
        if (data['global_currency_code'] && !(typeof data['global_currency_code'] === 'string' || data['global_currency_code'] instanceof String)) {
            throw new Error("Expected the field `global_currency_code` to be a primitive type in the JSON string but got " + data['global_currency_code']);
        }
        // ensure the json data is a string
        if (data['quote_currency_code'] && !(typeof data['quote_currency_code'] === 'string' || data['quote_currency_code'] instanceof String)) {
            throw new Error("Expected the field `quote_currency_code` to be a primitive type in the JSON string but got " + data['quote_currency_code']);
        }
        // ensure the json data is a string
        if (data['store_currency_code'] && !(typeof data['store_currency_code'] === 'string' || data['store_currency_code'] instanceof String)) {
            throw new Error("Expected the field `store_currency_code` to be a primitive type in the JSON string but got " + data['store_currency_code']);
        }

        return true;
    }


}



/**
 * Base currency code
 * @member {String} base_currency_code
 */
QuoteDataCurrencyInterface.prototype['base_currency_code'] = undefined;

/**
 * Base currency to global currency rate
 * @member {Number} base_to_global_rate
 */
QuoteDataCurrencyInterface.prototype['base_to_global_rate'] = undefined;

/**
 * Base currency to quote currency rate
 * @member {Number} base_to_quote_rate
 */
QuoteDataCurrencyInterface.prototype['base_to_quote_rate'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CurrencyInterface
 * @member {Object} extension_attributes
 */
QuoteDataCurrencyInterface.prototype['extension_attributes'] = undefined;

/**
 * Global currency code
 * @member {String} global_currency_code
 */
QuoteDataCurrencyInterface.prototype['global_currency_code'] = undefined;

/**
 * Quote currency code
 * @member {String} quote_currency_code
 */
QuoteDataCurrencyInterface.prototype['quote_currency_code'] = undefined;

/**
 * Store currency code
 * @member {String} store_currency_code
 */
QuoteDataCurrencyInterface.prototype['store_currency_code'] = undefined;

/**
 * Store currency to base currency rate
 * @member {Number} store_to_base_rate
 */
QuoteDataCurrencyInterface.prototype['store_to_base_rate'] = undefined;

/**
 * Store currency to quote currency rate
 * @member {Number} store_to_quote_rate
 */
QuoteDataCurrencyInterface.prototype['store_to_quote_rate'] = undefined;






export default QuoteDataCurrencyInterface;

