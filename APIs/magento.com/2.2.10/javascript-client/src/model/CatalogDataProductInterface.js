/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CatalogDataProductAttributeMediaGalleryEntryInterface from './CatalogDataProductAttributeMediaGalleryEntryInterface';
import CatalogDataProductCustomOptionInterface from './CatalogDataProductCustomOptionInterface';
import CatalogDataProductExtensionInterface from './CatalogDataProductExtensionInterface';
import CatalogDataProductLinkInterface from './CatalogDataProductLinkInterface';
import CatalogDataProductTierPriceInterface from './CatalogDataProductTierPriceInterface';
import FrameworkAttributeInterface from './FrameworkAttributeInterface';

/**
 * The CatalogDataProductInterface model module.
 * @module model/CatalogDataProductInterface
 * @version 2.2.10
 */
class CatalogDataProductInterface {
    /**
     * Constructs a new <code>CatalogDataProductInterface</code>.
     * 
     * @alias module:model/CatalogDataProductInterface
     * @param sku {String} Sku
     */
    constructor(sku) { 
        
        CatalogDataProductInterface.initialize(this, sku);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sku) { 
        obj['sku'] = sku;
    }

    /**
     * Constructs a <code>CatalogDataProductInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogDataProductInterface} obj Optional instance to populate.
     * @return {module:model/CatalogDataProductInterface} The populated <code>CatalogDataProductInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogDataProductInterface();

            if (data.hasOwnProperty('attribute_set_id')) {
                obj['attribute_set_id'] = ApiClient.convertToType(data['attribute_set_id'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('custom_attributes')) {
                obj['custom_attributes'] = ApiClient.convertToType(data['custom_attributes'], [FrameworkAttributeInterface]);
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = CatalogDataProductExtensionInterface.constructFromObject(data['extension_attributes']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('media_gallery_entries')) {
                obj['media_gallery_entries'] = ApiClient.convertToType(data['media_gallery_entries'], [CatalogDataProductAttributeMediaGalleryEntryInterface]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [CatalogDataProductCustomOptionInterface]);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('product_links')) {
                obj['product_links'] = ApiClient.convertToType(data['product_links'], [CatalogDataProductLinkInterface]);
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('tier_prices')) {
                obj['tier_prices'] = ApiClient.convertToType(data['tier_prices'], [CatalogDataProductTierPriceInterface]);
            }
            if (data.hasOwnProperty('type_id')) {
                obj['type_id'] = ApiClient.convertToType(data['type_id'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'Number');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogDataProductInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogDataProductInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogDataProductInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        if (data['custom_attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['custom_attributes'])) {
                throw new Error("Expected the field `custom_attributes` to be an array in the JSON data but got " + data['custom_attributes']);
            }
            // validate the optional field `custom_attributes` (array)
            for (const item of data['custom_attributes']) {
                FrameworkAttributeInterface.validateJSON(item);
            };
        }
        // validate the optional field `extension_attributes`
        if (data['extension_attributes']) { // data not null
          CatalogDataProductExtensionInterface.validateJSON(data['extension_attributes']);
        }
        if (data['media_gallery_entries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['media_gallery_entries'])) {
                throw new Error("Expected the field `media_gallery_entries` to be an array in the JSON data but got " + data['media_gallery_entries']);
            }
            // validate the optional field `media_gallery_entries` (array)
            for (const item of data['media_gallery_entries']) {
                CatalogDataProductAttributeMediaGalleryEntryInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                CatalogDataProductCustomOptionInterface.validateJSON(item);
            };
        }
        if (data['product_links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['product_links'])) {
                throw new Error("Expected the field `product_links` to be an array in the JSON data but got " + data['product_links']);
            }
            // validate the optional field `product_links` (array)
            for (const item of data['product_links']) {
                CatalogDataProductLinkInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }
        if (data['tier_prices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tier_prices'])) {
                throw new Error("Expected the field `tier_prices` to be an array in the JSON data but got " + data['tier_prices']);
            }
            // validate the optional field `tier_prices` (array)
            for (const item of data['tier_prices']) {
                CatalogDataProductTierPriceInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type_id'] && !(typeof data['type_id'] === 'string' || data['type_id'] instanceof String)) {
            throw new Error("Expected the field `type_id` to be a primitive type in the JSON string but got " + data['type_id']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

CatalogDataProductInterface.RequiredProperties = ["sku"];

/**
 * Attribute set id
 * @member {Number} attribute_set_id
 */
CatalogDataProductInterface.prototype['attribute_set_id'] = undefined;

/**
 * Created date
 * @member {String} created_at
 */
CatalogDataProductInterface.prototype['created_at'] = undefined;

/**
 * Custom attributes values.
 * @member {Array.<module:model/FrameworkAttributeInterface>} custom_attributes
 */
CatalogDataProductInterface.prototype['custom_attributes'] = undefined;

/**
 * @member {module:model/CatalogDataProductExtensionInterface} extension_attributes
 */
CatalogDataProductInterface.prototype['extension_attributes'] = undefined;

/**
 * Id
 * @member {Number} id
 */
CatalogDataProductInterface.prototype['id'] = undefined;

/**
 * Media gallery entries
 * @member {Array.<module:model/CatalogDataProductAttributeMediaGalleryEntryInterface>} media_gallery_entries
 */
CatalogDataProductInterface.prototype['media_gallery_entries'] = undefined;

/**
 * Name
 * @member {String} name
 */
CatalogDataProductInterface.prototype['name'] = undefined;

/**
 * List of product options
 * @member {Array.<module:model/CatalogDataProductCustomOptionInterface>} options
 */
CatalogDataProductInterface.prototype['options'] = undefined;

/**
 * Price
 * @member {Number} price
 */
CatalogDataProductInterface.prototype['price'] = undefined;

/**
 * Product links info
 * @member {Array.<module:model/CatalogDataProductLinkInterface>} product_links
 */
CatalogDataProductInterface.prototype['product_links'] = undefined;

/**
 * Sku
 * @member {String} sku
 */
CatalogDataProductInterface.prototype['sku'] = undefined;

/**
 * Status
 * @member {Number} status
 */
CatalogDataProductInterface.prototype['status'] = undefined;

/**
 * List of product tier prices
 * @member {Array.<module:model/CatalogDataProductTierPriceInterface>} tier_prices
 */
CatalogDataProductInterface.prototype['tier_prices'] = undefined;

/**
 * Type id
 * @member {String} type_id
 */
CatalogDataProductInterface.prototype['type_id'] = undefined;

/**
 * Updated date
 * @member {String} updated_at
 */
CatalogDataProductInterface.prototype['updated_at'] = undefined;

/**
 * Visibility
 * @member {Number} visibility
 */
CatalogDataProductInterface.prototype['visibility'] = undefined;

/**
 * Weight
 * @member {Number} weight
 */
CatalogDataProductInterface.prototype['weight'] = undefined;






export default CatalogDataProductInterface;

