/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DirectoryDataExchangeRateInterface from './DirectoryDataExchangeRateInterface';

/**
 * The DirectoryDataCurrencyInformationInterface model module.
 * @module model/DirectoryDataCurrencyInformationInterface
 * @version 2.2.10
 */
class DirectoryDataCurrencyInformationInterface {
    /**
     * Constructs a new <code>DirectoryDataCurrencyInformationInterface</code>.
     * Currency Information interface.
     * @alias module:model/DirectoryDataCurrencyInformationInterface
     * @param availableCurrencyCodes {Array.<String>} The list of allowed currency codes for the store.
     * @param baseCurrencyCode {String} The base currency code for the store.
     * @param baseCurrencySymbol {String} The currency symbol of the base currency for the store.
     * @param defaultDisplayCurrencyCode {String} The default display currency code for the store.
     * @param defaultDisplayCurrencySymbol {String} The currency symbol of the default display currency for the store.
     * @param exchangeRates {Array.<module:model/DirectoryDataExchangeRateInterface>} The list of exchange rate information for the store.
     */
    constructor(availableCurrencyCodes, baseCurrencyCode, baseCurrencySymbol, defaultDisplayCurrencyCode, defaultDisplayCurrencySymbol, exchangeRates) { 
        
        DirectoryDataCurrencyInformationInterface.initialize(this, availableCurrencyCodes, baseCurrencyCode, baseCurrencySymbol, defaultDisplayCurrencyCode, defaultDisplayCurrencySymbol, exchangeRates);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, availableCurrencyCodes, baseCurrencyCode, baseCurrencySymbol, defaultDisplayCurrencyCode, defaultDisplayCurrencySymbol, exchangeRates) { 
        obj['available_currency_codes'] = availableCurrencyCodes;
        obj['base_currency_code'] = baseCurrencyCode;
        obj['base_currency_symbol'] = baseCurrencySymbol;
        obj['default_display_currency_code'] = defaultDisplayCurrencyCode;
        obj['default_display_currency_symbol'] = defaultDisplayCurrencySymbol;
        obj['exchange_rates'] = exchangeRates;
    }

    /**
     * Constructs a <code>DirectoryDataCurrencyInformationInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DirectoryDataCurrencyInformationInterface} obj Optional instance to populate.
     * @return {module:model/DirectoryDataCurrencyInformationInterface} The populated <code>DirectoryDataCurrencyInformationInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DirectoryDataCurrencyInformationInterface();

            if (data.hasOwnProperty('available_currency_codes')) {
                obj['available_currency_codes'] = ApiClient.convertToType(data['available_currency_codes'], ['String']);
            }
            if (data.hasOwnProperty('base_currency_code')) {
                obj['base_currency_code'] = ApiClient.convertToType(data['base_currency_code'], 'String');
            }
            if (data.hasOwnProperty('base_currency_symbol')) {
                obj['base_currency_symbol'] = ApiClient.convertToType(data['base_currency_symbol'], 'String');
            }
            if (data.hasOwnProperty('default_display_currency_code')) {
                obj['default_display_currency_code'] = ApiClient.convertToType(data['default_display_currency_code'], 'String');
            }
            if (data.hasOwnProperty('default_display_currency_symbol')) {
                obj['default_display_currency_symbol'] = ApiClient.convertToType(data['default_display_currency_symbol'], 'String');
            }
            if (data.hasOwnProperty('exchange_rates')) {
                obj['exchange_rates'] = ApiClient.convertToType(data['exchange_rates'], [DirectoryDataExchangeRateInterface]);
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DirectoryDataCurrencyInformationInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DirectoryDataCurrencyInformationInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DirectoryDataCurrencyInformationInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['available_currency_codes'])) {
            throw new Error("Expected the field `available_currency_codes` to be an array in the JSON data but got " + data['available_currency_codes']);
        }
        // ensure the json data is a string
        if (data['base_currency_code'] && !(typeof data['base_currency_code'] === 'string' || data['base_currency_code'] instanceof String)) {
            throw new Error("Expected the field `base_currency_code` to be a primitive type in the JSON string but got " + data['base_currency_code']);
        }
        // ensure the json data is a string
        if (data['base_currency_symbol'] && !(typeof data['base_currency_symbol'] === 'string' || data['base_currency_symbol'] instanceof String)) {
            throw new Error("Expected the field `base_currency_symbol` to be a primitive type in the JSON string but got " + data['base_currency_symbol']);
        }
        // ensure the json data is a string
        if (data['default_display_currency_code'] && !(typeof data['default_display_currency_code'] === 'string' || data['default_display_currency_code'] instanceof String)) {
            throw new Error("Expected the field `default_display_currency_code` to be a primitive type in the JSON string but got " + data['default_display_currency_code']);
        }
        // ensure the json data is a string
        if (data['default_display_currency_symbol'] && !(typeof data['default_display_currency_symbol'] === 'string' || data['default_display_currency_symbol'] instanceof String)) {
            throw new Error("Expected the field `default_display_currency_symbol` to be a primitive type in the JSON string but got " + data['default_display_currency_symbol']);
        }
        if (data['exchange_rates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exchange_rates'])) {
                throw new Error("Expected the field `exchange_rates` to be an array in the JSON data but got " + data['exchange_rates']);
            }
            // validate the optional field `exchange_rates` (array)
            for (const item of data['exchange_rates']) {
                DirectoryDataExchangeRateInterface.validateJSON(item);
            };
        }

        return true;
    }


}

DirectoryDataCurrencyInformationInterface.RequiredProperties = ["available_currency_codes", "base_currency_code", "base_currency_symbol", "default_display_currency_code", "default_display_currency_symbol", "exchange_rates"];

/**
 * The list of allowed currency codes for the store.
 * @member {Array.<String>} available_currency_codes
 */
DirectoryDataCurrencyInformationInterface.prototype['available_currency_codes'] = undefined;

/**
 * The base currency code for the store.
 * @member {String} base_currency_code
 */
DirectoryDataCurrencyInformationInterface.prototype['base_currency_code'] = undefined;

/**
 * The currency symbol of the base currency for the store.
 * @member {String} base_currency_symbol
 */
DirectoryDataCurrencyInformationInterface.prototype['base_currency_symbol'] = undefined;

/**
 * The default display currency code for the store.
 * @member {String} default_display_currency_code
 */
DirectoryDataCurrencyInformationInterface.prototype['default_display_currency_code'] = undefined;

/**
 * The currency symbol of the default display currency for the store.
 * @member {String} default_display_currency_symbol
 */
DirectoryDataCurrencyInformationInterface.prototype['default_display_currency_symbol'] = undefined;

/**
 * The list of exchange rate information for the store.
 * @member {Array.<module:model/DirectoryDataExchangeRateInterface>} exchange_rates
 */
DirectoryDataCurrencyInformationInterface.prototype['exchange_rates'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CurrencyInformationInterface
 * @member {Object} extension_attributes
 */
DirectoryDataCurrencyInformationInterface.prototype['extension_attributes'] = undefined;






export default DirectoryDataCurrencyInformationInterface;

