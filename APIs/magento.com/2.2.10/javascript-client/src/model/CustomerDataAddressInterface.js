/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomerDataRegionInterface from './CustomerDataRegionInterface';
import FrameworkAttributeInterface from './FrameworkAttributeInterface';

/**
 * The CustomerDataAddressInterface model module.
 * @module model/CustomerDataAddressInterface
 * @version 2.2.10
 */
class CustomerDataAddressInterface {
    /**
     * Constructs a new <code>CustomerDataAddressInterface</code>.
     * Customer address interface.
     * @alias module:model/CustomerDataAddressInterface
     */
    constructor() { 
        
        CustomerDataAddressInterface.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomerDataAddressInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerDataAddressInterface} obj Optional instance to populate.
     * @return {module:model/CustomerDataAddressInterface} The populated <code>CustomerDataAddressInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerDataAddressInterface();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('country_id')) {
                obj['country_id'] = ApiClient.convertToType(data['country_id'], 'String');
            }
            if (data.hasOwnProperty('custom_attributes')) {
                obj['custom_attributes'] = ApiClient.convertToType(data['custom_attributes'], [FrameworkAttributeInterface]);
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'Number');
            }
            if (data.hasOwnProperty('default_billing')) {
                obj['default_billing'] = ApiClient.convertToType(data['default_billing'], 'Boolean');
            }
            if (data.hasOwnProperty('default_shipping')) {
                obj['default_shipping'] = ApiClient.convertToType(data['default_shipping'], 'Boolean');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('fax')) {
                obj['fax'] = ApiClient.convertToType(data['fax'], 'String');
            }
            if (data.hasOwnProperty('firstname')) {
                obj['firstname'] = ApiClient.convertToType(data['firstname'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastname')) {
                obj['lastname'] = ApiClient.convertToType(data['lastname'], 'String');
            }
            if (data.hasOwnProperty('middlename')) {
                obj['middlename'] = ApiClient.convertToType(data['middlename'], 'String');
            }
            if (data.hasOwnProperty('postcode')) {
                obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = CustomerDataRegionInterface.constructFromObject(data['region']);
            }
            if (data.hasOwnProperty('region_id')) {
                obj['region_id'] = ApiClient.convertToType(data['region_id'], 'Number');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], ['String']);
            }
            if (data.hasOwnProperty('suffix')) {
                obj['suffix'] = ApiClient.convertToType(data['suffix'], 'String');
            }
            if (data.hasOwnProperty('telephone')) {
                obj['telephone'] = ApiClient.convertToType(data['telephone'], 'String');
            }
            if (data.hasOwnProperty('vat_id')) {
                obj['vat_id'] = ApiClient.convertToType(data['vat_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerDataAddressInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerDataAddressInterface</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['country_id'] && !(typeof data['country_id'] === 'string' || data['country_id'] instanceof String)) {
            throw new Error("Expected the field `country_id` to be a primitive type in the JSON string but got " + data['country_id']);
        }
        if (data['custom_attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['custom_attributes'])) {
                throw new Error("Expected the field `custom_attributes` to be an array in the JSON data but got " + data['custom_attributes']);
            }
            // validate the optional field `custom_attributes` (array)
            for (const item of data['custom_attributes']) {
                FrameworkAttributeInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['fax'] && !(typeof data['fax'] === 'string' || data['fax'] instanceof String)) {
            throw new Error("Expected the field `fax` to be a primitive type in the JSON string but got " + data['fax']);
        }
        // ensure the json data is a string
        if (data['firstname'] && !(typeof data['firstname'] === 'string' || data['firstname'] instanceof String)) {
            throw new Error("Expected the field `firstname` to be a primitive type in the JSON string but got " + data['firstname']);
        }
        // ensure the json data is a string
        if (data['lastname'] && !(typeof data['lastname'] === 'string' || data['lastname'] instanceof String)) {
            throw new Error("Expected the field `lastname` to be a primitive type in the JSON string but got " + data['lastname']);
        }
        // ensure the json data is a string
        if (data['middlename'] && !(typeof data['middlename'] === 'string' || data['middlename'] instanceof String)) {
            throw new Error("Expected the field `middlename` to be a primitive type in the JSON string but got " + data['middlename']);
        }
        // ensure the json data is a string
        if (data['postcode'] && !(typeof data['postcode'] === 'string' || data['postcode'] instanceof String)) {
            throw new Error("Expected the field `postcode` to be a primitive type in the JSON string but got " + data['postcode']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }
        // validate the optional field `region`
        if (data['region']) { // data not null
          CustomerDataRegionInterface.validateJSON(data['region']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['street'])) {
            throw new Error("Expected the field `street` to be an array in the JSON data but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['suffix'] && !(typeof data['suffix'] === 'string' || data['suffix'] instanceof String)) {
            throw new Error("Expected the field `suffix` to be a primitive type in the JSON string but got " + data['suffix']);
        }
        // ensure the json data is a string
        if (data['telephone'] && !(typeof data['telephone'] === 'string' || data['telephone'] instanceof String)) {
            throw new Error("Expected the field `telephone` to be a primitive type in the JSON string but got " + data['telephone']);
        }
        // ensure the json data is a string
        if (data['vat_id'] && !(typeof data['vat_id'] === 'string' || data['vat_id'] instanceof String)) {
            throw new Error("Expected the field `vat_id` to be a primitive type in the JSON string but got " + data['vat_id']);
        }

        return true;
    }


}



/**
 * City name
 * @member {String} city
 */
CustomerDataAddressInterface.prototype['city'] = undefined;

/**
 * Company
 * @member {String} company
 */
CustomerDataAddressInterface.prototype['company'] = undefined;

/**
 * Country code in ISO_3166-2 format
 * @member {String} country_id
 */
CustomerDataAddressInterface.prototype['country_id'] = undefined;

/**
 * Custom attributes values.
 * @member {Array.<module:model/FrameworkAttributeInterface>} custom_attributes
 */
CustomerDataAddressInterface.prototype['custom_attributes'] = undefined;

/**
 * Customer ID
 * @member {Number} customer_id
 */
CustomerDataAddressInterface.prototype['customer_id'] = undefined;

/**
 * If this address is default billing address
 * @member {Boolean} default_billing
 */
CustomerDataAddressInterface.prototype['default_billing'] = undefined;

/**
 * If this address is default shipping address.
 * @member {Boolean} default_shipping
 */
CustomerDataAddressInterface.prototype['default_shipping'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\AddressInterface
 * @member {Object} extension_attributes
 */
CustomerDataAddressInterface.prototype['extension_attributes'] = undefined;

/**
 * Fax number
 * @member {String} fax
 */
CustomerDataAddressInterface.prototype['fax'] = undefined;

/**
 * First name
 * @member {String} firstname
 */
CustomerDataAddressInterface.prototype['firstname'] = undefined;

/**
 * ID
 * @member {Number} id
 */
CustomerDataAddressInterface.prototype['id'] = undefined;

/**
 * Last name
 * @member {String} lastname
 */
CustomerDataAddressInterface.prototype['lastname'] = undefined;

/**
 * Middle name
 * @member {String} middlename
 */
CustomerDataAddressInterface.prototype['middlename'] = undefined;

/**
 * Postcode
 * @member {String} postcode
 */
CustomerDataAddressInterface.prototype['postcode'] = undefined;

/**
 * Prefix
 * @member {String} prefix
 */
CustomerDataAddressInterface.prototype['prefix'] = undefined;

/**
 * @member {module:model/CustomerDataRegionInterface} region
 */
CustomerDataAddressInterface.prototype['region'] = undefined;

/**
 * Region ID
 * @member {Number} region_id
 */
CustomerDataAddressInterface.prototype['region_id'] = undefined;

/**
 * Street
 * @member {Array.<String>} street
 */
CustomerDataAddressInterface.prototype['street'] = undefined;

/**
 * Suffix
 * @member {String} suffix
 */
CustomerDataAddressInterface.prototype['suffix'] = undefined;

/**
 * Telephone number
 * @member {String} telephone
 */
CustomerDataAddressInterface.prototype['telephone'] = undefined;

/**
 * Vat id
 * @member {String} vat_id
 */
CustomerDataAddressInterface.prototype['vat_id'] = undefined;






export default CustomerDataAddressInterface;

