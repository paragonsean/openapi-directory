/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QuoteDataTotalsItemExtensionInterface from './QuoteDataTotalsItemExtensionInterface';

/**
 * The QuoteDataTotalsItemInterface model module.
 * @module model/QuoteDataTotalsItemInterface
 * @version 2.2.10
 */
class QuoteDataTotalsItemInterface {
    /**
     * Constructs a new <code>QuoteDataTotalsItemInterface</code>.
     * Interface TotalsItemInterface
     * @alias module:model/QuoteDataTotalsItemInterface
     * @param basePrice {Number} Item price in base currency.
     * @param baseRowTotal {Number} Row total in base currency.
     * @param itemId {Number} Item id
     * @param options {String} Item price in quote currency.
     * @param price {Number} Item price in quote currency.
     * @param qty {Number} Item quantity.
     * @param rowTotal {Number} Row total in quote currency.
     * @param weeeTaxApplied {String} Item weee tax applied in quote currency.
     * @param weeeTaxAppliedAmount {Number} Item weee tax applied amount in quote currency.
     */
    constructor(basePrice, baseRowTotal, itemId, options, price, qty, rowTotal, weeeTaxApplied, weeeTaxAppliedAmount) { 
        
        QuoteDataTotalsItemInterface.initialize(this, basePrice, baseRowTotal, itemId, options, price, qty, rowTotal, weeeTaxApplied, weeeTaxAppliedAmount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, basePrice, baseRowTotal, itemId, options, price, qty, rowTotal, weeeTaxApplied, weeeTaxAppliedAmount) { 
        obj['base_price'] = basePrice;
        obj['base_row_total'] = baseRowTotal;
        obj['item_id'] = itemId;
        obj['options'] = options;
        obj['price'] = price;
        obj['qty'] = qty;
        obj['row_total'] = rowTotal;
        obj['weee_tax_applied'] = weeeTaxApplied;
        obj['weee_tax_applied_amount'] = weeeTaxAppliedAmount;
    }

    /**
     * Constructs a <code>QuoteDataTotalsItemInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuoteDataTotalsItemInterface} obj Optional instance to populate.
     * @return {module:model/QuoteDataTotalsItemInterface} The populated <code>QuoteDataTotalsItemInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuoteDataTotalsItemInterface();

            if (data.hasOwnProperty('base_discount_amount')) {
                obj['base_discount_amount'] = ApiClient.convertToType(data['base_discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('base_price')) {
                obj['base_price'] = ApiClient.convertToType(data['base_price'], 'Number');
            }
            if (data.hasOwnProperty('base_price_incl_tax')) {
                obj['base_price_incl_tax'] = ApiClient.convertToType(data['base_price_incl_tax'], 'Number');
            }
            if (data.hasOwnProperty('base_row_total')) {
                obj['base_row_total'] = ApiClient.convertToType(data['base_row_total'], 'Number');
            }
            if (data.hasOwnProperty('base_row_total_incl_tax')) {
                obj['base_row_total_incl_tax'] = ApiClient.convertToType(data['base_row_total_incl_tax'], 'Number');
            }
            if (data.hasOwnProperty('base_tax_amount')) {
                obj['base_tax_amount'] = ApiClient.convertToType(data['base_tax_amount'], 'Number');
            }
            if (data.hasOwnProperty('discount_amount')) {
                obj['discount_amount'] = ApiClient.convertToType(data['discount_amount'], 'Number');
            }
            if (data.hasOwnProperty('discount_percent')) {
                obj['discount_percent'] = ApiClient.convertToType(data['discount_percent'], 'Number');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = QuoteDataTotalsItemExtensionInterface.constructFromObject(data['extension_attributes']);
            }
            if (data.hasOwnProperty('item_id')) {
                obj['item_id'] = ApiClient.convertToType(data['item_id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('price_incl_tax')) {
                obj['price_incl_tax'] = ApiClient.convertToType(data['price_incl_tax'], 'Number');
            }
            if (data.hasOwnProperty('qty')) {
                obj['qty'] = ApiClient.convertToType(data['qty'], 'Number');
            }
            if (data.hasOwnProperty('row_total')) {
                obj['row_total'] = ApiClient.convertToType(data['row_total'], 'Number');
            }
            if (data.hasOwnProperty('row_total_incl_tax')) {
                obj['row_total_incl_tax'] = ApiClient.convertToType(data['row_total_incl_tax'], 'Number');
            }
            if (data.hasOwnProperty('row_total_with_discount')) {
                obj['row_total_with_discount'] = ApiClient.convertToType(data['row_total_with_discount'], 'Number');
            }
            if (data.hasOwnProperty('tax_amount')) {
                obj['tax_amount'] = ApiClient.convertToType(data['tax_amount'], 'Number');
            }
            if (data.hasOwnProperty('tax_percent')) {
                obj['tax_percent'] = ApiClient.convertToType(data['tax_percent'], 'Number');
            }
            if (data.hasOwnProperty('weee_tax_applied')) {
                obj['weee_tax_applied'] = ApiClient.convertToType(data['weee_tax_applied'], 'String');
            }
            if (data.hasOwnProperty('weee_tax_applied_amount')) {
                obj['weee_tax_applied_amount'] = ApiClient.convertToType(data['weee_tax_applied_amount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuoteDataTotalsItemInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuoteDataTotalsItemInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QuoteDataTotalsItemInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `extension_attributes`
        if (data['extension_attributes']) { // data not null
          QuoteDataTotalsItemExtensionInterface.validateJSON(data['extension_attributes']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['options'] && !(typeof data['options'] === 'string' || data['options'] instanceof String)) {
            throw new Error("Expected the field `options` to be a primitive type in the JSON string but got " + data['options']);
        }
        // ensure the json data is a string
        if (data['weee_tax_applied'] && !(typeof data['weee_tax_applied'] === 'string' || data['weee_tax_applied'] instanceof String)) {
            throw new Error("Expected the field `weee_tax_applied` to be a primitive type in the JSON string but got " + data['weee_tax_applied']);
        }

        return true;
    }


}

QuoteDataTotalsItemInterface.RequiredProperties = ["base_price", "base_row_total", "item_id", "options", "price", "qty", "row_total", "weee_tax_applied", "weee_tax_applied_amount"];

/**
 * Discount amount in base currency. Otherwise, null.
 * @member {Number} base_discount_amount
 */
QuoteDataTotalsItemInterface.prototype['base_discount_amount'] = undefined;

/**
 * Item price in base currency.
 * @member {Number} base_price
 */
QuoteDataTotalsItemInterface.prototype['base_price'] = undefined;

/**
 * Price including tax in base currency. Otherwise, null.
 * @member {Number} base_price_incl_tax
 */
QuoteDataTotalsItemInterface.prototype['base_price_incl_tax'] = undefined;

/**
 * Row total in base currency.
 * @member {Number} base_row_total
 */
QuoteDataTotalsItemInterface.prototype['base_row_total'] = undefined;

/**
 * Row total including tax in base currency. Otherwise, null.
 * @member {Number} base_row_total_incl_tax
 */
QuoteDataTotalsItemInterface.prototype['base_row_total_incl_tax'] = undefined;

/**
 * Tax amount in base currency. Otherwise, null.
 * @member {Number} base_tax_amount
 */
QuoteDataTotalsItemInterface.prototype['base_tax_amount'] = undefined;

/**
 * Discount amount in quote currency. Otherwise, null.
 * @member {Number} discount_amount
 */
QuoteDataTotalsItemInterface.prototype['discount_amount'] = undefined;

/**
 * Discount percent. Otherwise, null.
 * @member {Number} discount_percent
 */
QuoteDataTotalsItemInterface.prototype['discount_percent'] = undefined;

/**
 * @member {module:model/QuoteDataTotalsItemExtensionInterface} extension_attributes
 */
QuoteDataTotalsItemInterface.prototype['extension_attributes'] = undefined;

/**
 * Item id
 * @member {Number} item_id
 */
QuoteDataTotalsItemInterface.prototype['item_id'] = undefined;

/**
 * Product name. Otherwise, null.
 * @member {String} name
 */
QuoteDataTotalsItemInterface.prototype['name'] = undefined;

/**
 * Item price in quote currency.
 * @member {String} options
 */
QuoteDataTotalsItemInterface.prototype['options'] = undefined;

/**
 * Item price in quote currency.
 * @member {Number} price
 */
QuoteDataTotalsItemInterface.prototype['price'] = undefined;

/**
 * Price including tax in quote currency. Otherwise, null.
 * @member {Number} price_incl_tax
 */
QuoteDataTotalsItemInterface.prototype['price_incl_tax'] = undefined;

/**
 * Item quantity.
 * @member {Number} qty
 */
QuoteDataTotalsItemInterface.prototype['qty'] = undefined;

/**
 * Row total in quote currency.
 * @member {Number} row_total
 */
QuoteDataTotalsItemInterface.prototype['row_total'] = undefined;

/**
 * Row total including tax in quote currency. Otherwise, null.
 * @member {Number} row_total_incl_tax
 */
QuoteDataTotalsItemInterface.prototype['row_total_incl_tax'] = undefined;

/**
 * Row total with discount in quote currency. Otherwise, null.
 * @member {Number} row_total_with_discount
 */
QuoteDataTotalsItemInterface.prototype['row_total_with_discount'] = undefined;

/**
 * Tax amount in quote currency. Otherwise, null.
 * @member {Number} tax_amount
 */
QuoteDataTotalsItemInterface.prototype['tax_amount'] = undefined;

/**
 * Tax percent. Otherwise, null.
 * @member {Number} tax_percent
 */
QuoteDataTotalsItemInterface.prototype['tax_percent'] = undefined;

/**
 * Item weee tax applied in quote currency.
 * @member {String} weee_tax_applied
 */
QuoteDataTotalsItemInterface.prototype['weee_tax_applied'] = undefined;

/**
 * Item weee tax applied amount in quote currency.
 * @member {Number} weee_tax_applied_amount
 */
QuoteDataTotalsItemInterface.prototype['weee_tax_applied_amount'] = undefined;






export default QuoteDataTotalsItemInterface;

