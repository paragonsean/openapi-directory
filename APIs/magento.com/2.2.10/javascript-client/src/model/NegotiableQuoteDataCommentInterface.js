/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NegotiableQuoteDataCommentAttachmentInterface from './NegotiableQuoteDataCommentAttachmentInterface';

/**
 * The NegotiableQuoteDataCommentInterface model module.
 * @module model/NegotiableQuoteDataCommentInterface
 * @version 2.2.10
 */
class NegotiableQuoteDataCommentInterface {
    /**
     * Constructs a new <code>NegotiableQuoteDataCommentInterface</code>.
     * Interface CommentInterface
     * @alias module:model/NegotiableQuoteDataCommentInterface
     * @param attachments {Array.<module:model/NegotiableQuoteDataCommentAttachmentInterface>} Existing attachments.
     * @param comment {String} Comment.
     * @param createdAt {String} Comment created at.
     * @param creatorId {Number} Comment creator ID.
     * @param creatorType {Number} The comment creator type.
     * @param entityId {Number} Comment ID.
     * @param isDecline {Number} Is quote was declined by seller.
     * @param isDraft {Number} Is quote draft flag.
     * @param parentId {Number} Negotiable quote ID, that this comment belongs to.
     */
    constructor(attachments, comment, createdAt, creatorId, creatorType, entityId, isDecline, isDraft, parentId) { 
        
        NegotiableQuoteDataCommentInterface.initialize(this, attachments, comment, createdAt, creatorId, creatorType, entityId, isDecline, isDraft, parentId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attachments, comment, createdAt, creatorId, creatorType, entityId, isDecline, isDraft, parentId) { 
        obj['attachments'] = attachments;
        obj['comment'] = comment;
        obj['created_at'] = createdAt;
        obj['creator_id'] = creatorId;
        obj['creator_type'] = creatorType;
        obj['entity_id'] = entityId;
        obj['is_decline'] = isDecline;
        obj['is_draft'] = isDraft;
        obj['parent_id'] = parentId;
    }

    /**
     * Constructs a <code>NegotiableQuoteDataCommentInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NegotiableQuoteDataCommentInterface} obj Optional instance to populate.
     * @return {module:model/NegotiableQuoteDataCommentInterface} The populated <code>NegotiableQuoteDataCommentInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NegotiableQuoteDataCommentInterface();

            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [NegotiableQuoteDataCommentAttachmentInterface]);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('creator_id')) {
                obj['creator_id'] = ApiClient.convertToType(data['creator_id'], 'Number');
            }
            if (data.hasOwnProperty('creator_type')) {
                obj['creator_type'] = ApiClient.convertToType(data['creator_type'], 'Number');
            }
            if (data.hasOwnProperty('entity_id')) {
                obj['entity_id'] = ApiClient.convertToType(data['entity_id'], 'Number');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('is_decline')) {
                obj['is_decline'] = ApiClient.convertToType(data['is_decline'], 'Number');
            }
            if (data.hasOwnProperty('is_draft')) {
                obj['is_draft'] = ApiClient.convertToType(data['is_draft'], 'Number');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NegotiableQuoteDataCommentInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NegotiableQuoteDataCommentInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NegotiableQuoteDataCommentInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                NegotiableQuoteDataCommentAttachmentInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }

        return true;
    }


}

NegotiableQuoteDataCommentInterface.RequiredProperties = ["attachments", "comment", "created_at", "creator_id", "creator_type", "entity_id", "is_decline", "is_draft", "parent_id"];

/**
 * Existing attachments.
 * @member {Array.<module:model/NegotiableQuoteDataCommentAttachmentInterface>} attachments
 */
NegotiableQuoteDataCommentInterface.prototype['attachments'] = undefined;

/**
 * Comment.
 * @member {String} comment
 */
NegotiableQuoteDataCommentInterface.prototype['comment'] = undefined;

/**
 * Comment created at.
 * @member {String} created_at
 */
NegotiableQuoteDataCommentInterface.prototype['created_at'] = undefined;

/**
 * Comment creator ID.
 * @member {Number} creator_id
 */
NegotiableQuoteDataCommentInterface.prototype['creator_id'] = undefined;

/**
 * The comment creator type.
 * @member {Number} creator_type
 */
NegotiableQuoteDataCommentInterface.prototype['creator_type'] = undefined;

/**
 * Comment ID.
 * @member {Number} entity_id
 */
NegotiableQuoteDataCommentInterface.prototype['entity_id'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\CommentInterface
 * @member {Object} extension_attributes
 */
NegotiableQuoteDataCommentInterface.prototype['extension_attributes'] = undefined;

/**
 * Is quote was declined by seller.
 * @member {Number} is_decline
 */
NegotiableQuoteDataCommentInterface.prototype['is_decline'] = undefined;

/**
 * Is quote draft flag.
 * @member {Number} is_draft
 */
NegotiableQuoteDataCommentInterface.prototype['is_draft'] = undefined;

/**
 * Negotiable quote ID, that this comment belongs to.
 * @member {Number} parent_id
 */
NegotiableQuoteDataCommentInterface.prototype['parent_id'] = undefined;






export default NegotiableQuoteDataCommentInterface;

