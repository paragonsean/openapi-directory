/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FrameworkSearchBucketInterface from './FrameworkSearchBucketInterface';

/**
 * The FrameworkSearchAggregationInterface model module.
 * @module model/FrameworkSearchAggregationInterface
 * @version 2.2.10
 */
class FrameworkSearchAggregationInterface {
    /**
     * Constructs a new <code>FrameworkSearchAggregationInterface</code>.
     * Faceted data
     * @alias module:model/FrameworkSearchAggregationInterface
     * @param bucketNames {Array.<String>} Document field names
     * @param buckets {Array.<module:model/FrameworkSearchBucketInterface>} All Document fields
     */
    constructor(bucketNames, buckets) { 
        
        FrameworkSearchAggregationInterface.initialize(this, bucketNames, buckets);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bucketNames, buckets) { 
        obj['bucket_names'] = bucketNames;
        obj['buckets'] = buckets;
    }

    /**
     * Constructs a <code>FrameworkSearchAggregationInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FrameworkSearchAggregationInterface} obj Optional instance to populate.
     * @return {module:model/FrameworkSearchAggregationInterface} The populated <code>FrameworkSearchAggregationInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FrameworkSearchAggregationInterface();

            if (data.hasOwnProperty('bucket_names')) {
                obj['bucket_names'] = ApiClient.convertToType(data['bucket_names'], ['String']);
            }
            if (data.hasOwnProperty('buckets')) {
                obj['buckets'] = ApiClient.convertToType(data['buckets'], [FrameworkSearchBucketInterface]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FrameworkSearchAggregationInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FrameworkSearchAggregationInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FrameworkSearchAggregationInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['bucket_names'])) {
            throw new Error("Expected the field `bucket_names` to be an array in the JSON data but got " + data['bucket_names']);
        }
        if (data['buckets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buckets'])) {
                throw new Error("Expected the field `buckets` to be an array in the JSON data but got " + data['buckets']);
            }
            // validate the optional field `buckets` (array)
            for (const item of data['buckets']) {
                FrameworkSearchBucketInterface.validateJSON(item);
            };
        }

        return true;
    }


}

FrameworkSearchAggregationInterface.RequiredProperties = ["bucket_names", "buckets"];

/**
 * Document field names
 * @member {Array.<String>} bucket_names
 */
FrameworkSearchAggregationInterface.prototype['bucket_names'] = undefined;

/**
 * All Document fields
 * @member {Array.<module:model/FrameworkSearchBucketInterface>} buckets
 */
FrameworkSearchAggregationInterface.prototype['buckets'] = undefined;






export default FrameworkSearchAggregationInterface;

