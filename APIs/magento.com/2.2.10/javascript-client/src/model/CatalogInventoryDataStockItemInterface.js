/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogInventoryDataStockItemInterface model module.
 * @module model/CatalogInventoryDataStockItemInterface
 * @version 2.2.10
 */
class CatalogInventoryDataStockItemInterface {
    /**
     * Constructs a new <code>CatalogInventoryDataStockItemInterface</code>.
     * Interface StockItem
     * @alias module:model/CatalogInventoryDataStockItemInterface
     * @param backorders {Number} Backorders status
     * @param enableQtyIncrements {Boolean} Whether Quantity Increments is enabled
     * @param isDecimalDivided {Boolean} 
     * @param isInStock {Boolean} Stock Availability
     * @param isQtyDecimal {Boolean} 
     * @param lowStockDate {String} 
     * @param manageStock {Boolean} Can Manage Stock
     * @param maxSaleQty {Number} Maximum Qty Allowed in Shopping Cart data wrapper
     * @param minQty {Number} Minimal quantity available for item status in stock
     * @param minSaleQty {Number} Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation
     * @param notifyStockQty {Number} Notify for Quantity Below data wrapper
     * @param qty {Number} 
     * @param qtyIncrements {Number} Quantity Increments data wrapper
     * @param showDefaultNotificationMessage {Boolean} 
     * @param stockStatusChangedAuto {Number} 
     * @param useConfigBackorders {Boolean} 
     * @param useConfigEnableQtyInc {Boolean} 
     * @param useConfigManageStock {Boolean} 
     * @param useConfigMaxSaleQty {Boolean} 
     * @param useConfigMinQty {Boolean} 
     * @param useConfigMinSaleQty {Number} 
     * @param useConfigNotifyStockQty {Boolean} 
     * @param useConfigQtyIncrements {Boolean} 
     */
    constructor(backorders, enableQtyIncrements, isDecimalDivided, isInStock, isQtyDecimal, lowStockDate, manageStock, maxSaleQty, minQty, minSaleQty, notifyStockQty, qty, qtyIncrements, showDefaultNotificationMessage, stockStatusChangedAuto, useConfigBackorders, useConfigEnableQtyInc, useConfigManageStock, useConfigMaxSaleQty, useConfigMinQty, useConfigMinSaleQty, useConfigNotifyStockQty, useConfigQtyIncrements) { 
        
        CatalogInventoryDataStockItemInterface.initialize(this, backorders, enableQtyIncrements, isDecimalDivided, isInStock, isQtyDecimal, lowStockDate, manageStock, maxSaleQty, minQty, minSaleQty, notifyStockQty, qty, qtyIncrements, showDefaultNotificationMessage, stockStatusChangedAuto, useConfigBackorders, useConfigEnableQtyInc, useConfigManageStock, useConfigMaxSaleQty, useConfigMinQty, useConfigMinSaleQty, useConfigNotifyStockQty, useConfigQtyIncrements);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, backorders, enableQtyIncrements, isDecimalDivided, isInStock, isQtyDecimal, lowStockDate, manageStock, maxSaleQty, minQty, minSaleQty, notifyStockQty, qty, qtyIncrements, showDefaultNotificationMessage, stockStatusChangedAuto, useConfigBackorders, useConfigEnableQtyInc, useConfigManageStock, useConfigMaxSaleQty, useConfigMinQty, useConfigMinSaleQty, useConfigNotifyStockQty, useConfigQtyIncrements) { 
        obj['backorders'] = backorders;
        obj['enable_qty_increments'] = enableQtyIncrements;
        obj['is_decimal_divided'] = isDecimalDivided;
        obj['is_in_stock'] = isInStock;
        obj['is_qty_decimal'] = isQtyDecimal;
        obj['low_stock_date'] = lowStockDate;
        obj['manage_stock'] = manageStock;
        obj['max_sale_qty'] = maxSaleQty;
        obj['min_qty'] = minQty;
        obj['min_sale_qty'] = minSaleQty;
        obj['notify_stock_qty'] = notifyStockQty;
        obj['qty'] = qty;
        obj['qty_increments'] = qtyIncrements;
        obj['show_default_notification_message'] = showDefaultNotificationMessage;
        obj['stock_status_changed_auto'] = stockStatusChangedAuto;
        obj['use_config_backorders'] = useConfigBackorders;
        obj['use_config_enable_qty_inc'] = useConfigEnableQtyInc;
        obj['use_config_manage_stock'] = useConfigManageStock;
        obj['use_config_max_sale_qty'] = useConfigMaxSaleQty;
        obj['use_config_min_qty'] = useConfigMinQty;
        obj['use_config_min_sale_qty'] = useConfigMinSaleQty;
        obj['use_config_notify_stock_qty'] = useConfigNotifyStockQty;
        obj['use_config_qty_increments'] = useConfigQtyIncrements;
    }

    /**
     * Constructs a <code>CatalogInventoryDataStockItemInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogInventoryDataStockItemInterface} obj Optional instance to populate.
     * @return {module:model/CatalogInventoryDataStockItemInterface} The populated <code>CatalogInventoryDataStockItemInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogInventoryDataStockItemInterface();

            if (data.hasOwnProperty('backorders')) {
                obj['backorders'] = ApiClient.convertToType(data['backorders'], 'Number');
            }
            if (data.hasOwnProperty('enable_qty_increments')) {
                obj['enable_qty_increments'] = ApiClient.convertToType(data['enable_qty_increments'], 'Boolean');
            }
            if (data.hasOwnProperty('extension_attributes')) {
                obj['extension_attributes'] = ApiClient.convertToType(data['extension_attributes'], Object);
            }
            if (data.hasOwnProperty('is_decimal_divided')) {
                obj['is_decimal_divided'] = ApiClient.convertToType(data['is_decimal_divided'], 'Boolean');
            }
            if (data.hasOwnProperty('is_in_stock')) {
                obj['is_in_stock'] = ApiClient.convertToType(data['is_in_stock'], 'Boolean');
            }
            if (data.hasOwnProperty('is_qty_decimal')) {
                obj['is_qty_decimal'] = ApiClient.convertToType(data['is_qty_decimal'], 'Boolean');
            }
            if (data.hasOwnProperty('item_id')) {
                obj['item_id'] = ApiClient.convertToType(data['item_id'], 'Number');
            }
            if (data.hasOwnProperty('low_stock_date')) {
                obj['low_stock_date'] = ApiClient.convertToType(data['low_stock_date'], 'String');
            }
            if (data.hasOwnProperty('manage_stock')) {
                obj['manage_stock'] = ApiClient.convertToType(data['manage_stock'], 'Boolean');
            }
            if (data.hasOwnProperty('max_sale_qty')) {
                obj['max_sale_qty'] = ApiClient.convertToType(data['max_sale_qty'], 'Number');
            }
            if (data.hasOwnProperty('min_qty')) {
                obj['min_qty'] = ApiClient.convertToType(data['min_qty'], 'Number');
            }
            if (data.hasOwnProperty('min_sale_qty')) {
                obj['min_sale_qty'] = ApiClient.convertToType(data['min_sale_qty'], 'Number');
            }
            if (data.hasOwnProperty('notify_stock_qty')) {
                obj['notify_stock_qty'] = ApiClient.convertToType(data['notify_stock_qty'], 'Number');
            }
            if (data.hasOwnProperty('product_id')) {
                obj['product_id'] = ApiClient.convertToType(data['product_id'], 'Number');
            }
            if (data.hasOwnProperty('qty')) {
                obj['qty'] = ApiClient.convertToType(data['qty'], 'Number');
            }
            if (data.hasOwnProperty('qty_increments')) {
                obj['qty_increments'] = ApiClient.convertToType(data['qty_increments'], 'Number');
            }
            if (data.hasOwnProperty('show_default_notification_message')) {
                obj['show_default_notification_message'] = ApiClient.convertToType(data['show_default_notification_message'], 'Boolean');
            }
            if (data.hasOwnProperty('stock_id')) {
                obj['stock_id'] = ApiClient.convertToType(data['stock_id'], 'Number');
            }
            if (data.hasOwnProperty('stock_status_changed_auto')) {
                obj['stock_status_changed_auto'] = ApiClient.convertToType(data['stock_status_changed_auto'], 'Number');
            }
            if (data.hasOwnProperty('use_config_backorders')) {
                obj['use_config_backorders'] = ApiClient.convertToType(data['use_config_backorders'], 'Boolean');
            }
            if (data.hasOwnProperty('use_config_enable_qty_inc')) {
                obj['use_config_enable_qty_inc'] = ApiClient.convertToType(data['use_config_enable_qty_inc'], 'Boolean');
            }
            if (data.hasOwnProperty('use_config_manage_stock')) {
                obj['use_config_manage_stock'] = ApiClient.convertToType(data['use_config_manage_stock'], 'Boolean');
            }
            if (data.hasOwnProperty('use_config_max_sale_qty')) {
                obj['use_config_max_sale_qty'] = ApiClient.convertToType(data['use_config_max_sale_qty'], 'Boolean');
            }
            if (data.hasOwnProperty('use_config_min_qty')) {
                obj['use_config_min_qty'] = ApiClient.convertToType(data['use_config_min_qty'], 'Boolean');
            }
            if (data.hasOwnProperty('use_config_min_sale_qty')) {
                obj['use_config_min_sale_qty'] = ApiClient.convertToType(data['use_config_min_sale_qty'], 'Number');
            }
            if (data.hasOwnProperty('use_config_notify_stock_qty')) {
                obj['use_config_notify_stock_qty'] = ApiClient.convertToType(data['use_config_notify_stock_qty'], 'Boolean');
            }
            if (data.hasOwnProperty('use_config_qty_increments')) {
                obj['use_config_qty_increments'] = ApiClient.convertToType(data['use_config_qty_increments'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogInventoryDataStockItemInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogInventoryDataStockItemInterface</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CatalogInventoryDataStockItemInterface.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['low_stock_date'] && !(typeof data['low_stock_date'] === 'string' || data['low_stock_date'] instanceof String)) {
            throw new Error("Expected the field `low_stock_date` to be a primitive type in the JSON string but got " + data['low_stock_date']);
        }

        return true;
    }


}

CatalogInventoryDataStockItemInterface.RequiredProperties = ["backorders", "enable_qty_increments", "is_decimal_divided", "is_in_stock", "is_qty_decimal", "low_stock_date", "manage_stock", "max_sale_qty", "min_qty", "min_sale_qty", "notify_stock_qty", "qty", "qty_increments", "show_default_notification_message", "stock_status_changed_auto", "use_config_backorders", "use_config_enable_qty_inc", "use_config_manage_stock", "use_config_max_sale_qty", "use_config_min_qty", "use_config_min_sale_qty", "use_config_notify_stock_qty", "use_config_qty_increments"];

/**
 * Backorders status
 * @member {Number} backorders
 */
CatalogInventoryDataStockItemInterface.prototype['backorders'] = undefined;

/**
 * Whether Quantity Increments is enabled
 * @member {Boolean} enable_qty_increments
 */
CatalogInventoryDataStockItemInterface.prototype['enable_qty_increments'] = undefined;

/**
 * ExtensionInterface class for @see \\Magento\\CatalogInventory\\Api\\Data\\StockItemInterface
 * @member {Object} extension_attributes
 */
CatalogInventoryDataStockItemInterface.prototype['extension_attributes'] = undefined;

/**
 * @member {Boolean} is_decimal_divided
 */
CatalogInventoryDataStockItemInterface.prototype['is_decimal_divided'] = undefined;

/**
 * Stock Availability
 * @member {Boolean} is_in_stock
 */
CatalogInventoryDataStockItemInterface.prototype['is_in_stock'] = undefined;

/**
 * @member {Boolean} is_qty_decimal
 */
CatalogInventoryDataStockItemInterface.prototype['is_qty_decimal'] = undefined;

/**
 * @member {Number} item_id
 */
CatalogInventoryDataStockItemInterface.prototype['item_id'] = undefined;

/**
 * @member {String} low_stock_date
 */
CatalogInventoryDataStockItemInterface.prototype['low_stock_date'] = undefined;

/**
 * Can Manage Stock
 * @member {Boolean} manage_stock
 */
CatalogInventoryDataStockItemInterface.prototype['manage_stock'] = undefined;

/**
 * Maximum Qty Allowed in Shopping Cart data wrapper
 * @member {Number} max_sale_qty
 */
CatalogInventoryDataStockItemInterface.prototype['max_sale_qty'] = undefined;

/**
 * Minimal quantity available for item status in stock
 * @member {Number} min_qty
 */
CatalogInventoryDataStockItemInterface.prototype['min_qty'] = undefined;

/**
 * Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation
 * @member {Number} min_sale_qty
 */
CatalogInventoryDataStockItemInterface.prototype['min_sale_qty'] = undefined;

/**
 * Notify for Quantity Below data wrapper
 * @member {Number} notify_stock_qty
 */
CatalogInventoryDataStockItemInterface.prototype['notify_stock_qty'] = undefined;

/**
 * @member {Number} product_id
 */
CatalogInventoryDataStockItemInterface.prototype['product_id'] = undefined;

/**
 * @member {Number} qty
 */
CatalogInventoryDataStockItemInterface.prototype['qty'] = undefined;

/**
 * Quantity Increments data wrapper
 * @member {Number} qty_increments
 */
CatalogInventoryDataStockItemInterface.prototype['qty_increments'] = undefined;

/**
 * @member {Boolean} show_default_notification_message
 */
CatalogInventoryDataStockItemInterface.prototype['show_default_notification_message'] = undefined;

/**
 * Stock identifier
 * @member {Number} stock_id
 */
CatalogInventoryDataStockItemInterface.prototype['stock_id'] = undefined;

/**
 * @member {Number} stock_status_changed_auto
 */
CatalogInventoryDataStockItemInterface.prototype['stock_status_changed_auto'] = undefined;

/**
 * @member {Boolean} use_config_backorders
 */
CatalogInventoryDataStockItemInterface.prototype['use_config_backorders'] = undefined;

/**
 * @member {Boolean} use_config_enable_qty_inc
 */
CatalogInventoryDataStockItemInterface.prototype['use_config_enable_qty_inc'] = undefined;

/**
 * @member {Boolean} use_config_manage_stock
 */
CatalogInventoryDataStockItemInterface.prototype['use_config_manage_stock'] = undefined;

/**
 * @member {Boolean} use_config_max_sale_qty
 */
CatalogInventoryDataStockItemInterface.prototype['use_config_max_sale_qty'] = undefined;

/**
 * @member {Boolean} use_config_min_qty
 */
CatalogInventoryDataStockItemInterface.prototype['use_config_min_qty'] = undefined;

/**
 * @member {Number} use_config_min_sale_qty
 */
CatalogInventoryDataStockItemInterface.prototype['use_config_min_sale_qty'] = undefined;

/**
 * @member {Boolean} use_config_notify_stock_qty
 */
CatalogInventoryDataStockItemInterface.prototype['use_config_notify_stock_qty'] = undefined;

/**
 * @member {Boolean} use_config_qty_increments
 */
CatalogInventoryDataStockItemInterface.prototype['use_config_qty_increments'] = undefined;






export default CatalogInventoryDataStockItemInterface;

