/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MagentoB2B);
  }
}(this, function(expect, MagentoB2B) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MagentoB2B.SalesDataOrderInterface();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SalesDataOrderInterface', function() {
    it('should create an instance of SalesDataOrderInterface', function() {
      // uncomment below and update the code to test SalesDataOrderInterface
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be.a(MagentoB2B.SalesDataOrderInterface);
    });

    it('should have the property adjustmentNegative (base name: "adjustment_negative")', function() {
      // uncomment below and update the code to test the property adjustmentNegative
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property adjustmentPositive (base name: "adjustment_positive")', function() {
      // uncomment below and update the code to test the property adjustmentPositive
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property appliedRuleIds (base name: "applied_rule_ids")', function() {
      // uncomment below and update the code to test the property appliedRuleIds
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseAdjustmentNegative (base name: "base_adjustment_negative")', function() {
      // uncomment below and update the code to test the property baseAdjustmentNegative
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseAdjustmentPositive (base name: "base_adjustment_positive")', function() {
      // uncomment below and update the code to test the property baseAdjustmentPositive
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseCurrencyCode (base name: "base_currency_code")', function() {
      // uncomment below and update the code to test the property baseCurrencyCode
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountAmount (base name: "base_discount_amount")', function() {
      // uncomment below and update the code to test the property baseDiscountAmount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountCanceled (base name: "base_discount_canceled")', function() {
      // uncomment below and update the code to test the property baseDiscountCanceled
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountInvoiced (base name: "base_discount_invoiced")', function() {
      // uncomment below and update the code to test the property baseDiscountInvoiced
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountRefunded (base name: "base_discount_refunded")', function() {
      // uncomment below and update the code to test the property baseDiscountRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountTaxCompensationAmount (base name: "base_discount_tax_compensation_amount")', function() {
      // uncomment below and update the code to test the property baseDiscountTaxCompensationAmount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountTaxCompensationInvoiced (base name: "base_discount_tax_compensation_invoiced")', function() {
      // uncomment below and update the code to test the property baseDiscountTaxCompensationInvoiced
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountTaxCompensationRefunded (base name: "base_discount_tax_compensation_refunded")', function() {
      // uncomment below and update the code to test the property baseDiscountTaxCompensationRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseGrandTotal (base name: "base_grand_total")', function() {
      // uncomment below and update the code to test the property baseGrandTotal
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingAmount (base name: "base_shipping_amount")', function() {
      // uncomment below and update the code to test the property baseShippingAmount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingCanceled (base name: "base_shipping_canceled")', function() {
      // uncomment below and update the code to test the property baseShippingCanceled
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingDiscountAmount (base name: "base_shipping_discount_amount")', function() {
      // uncomment below and update the code to test the property baseShippingDiscountAmount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingDiscountTaxCompensationAmnt (base name: "base_shipping_discount_tax_compensation_amnt")', function() {
      // uncomment below and update the code to test the property baseShippingDiscountTaxCompensationAmnt
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingInclTax (base name: "base_shipping_incl_tax")', function() {
      // uncomment below and update the code to test the property baseShippingInclTax
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingInvoiced (base name: "base_shipping_invoiced")', function() {
      // uncomment below and update the code to test the property baseShippingInvoiced
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingRefunded (base name: "base_shipping_refunded")', function() {
      // uncomment below and update the code to test the property baseShippingRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingTaxAmount (base name: "base_shipping_tax_amount")', function() {
      // uncomment below and update the code to test the property baseShippingTaxAmount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingTaxRefunded (base name: "base_shipping_tax_refunded")', function() {
      // uncomment below and update the code to test the property baseShippingTaxRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseSubtotal (base name: "base_subtotal")', function() {
      // uncomment below and update the code to test the property baseSubtotal
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseSubtotalCanceled (base name: "base_subtotal_canceled")', function() {
      // uncomment below and update the code to test the property baseSubtotalCanceled
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseSubtotalInclTax (base name: "base_subtotal_incl_tax")', function() {
      // uncomment below and update the code to test the property baseSubtotalInclTax
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseSubtotalInvoiced (base name: "base_subtotal_invoiced")', function() {
      // uncomment below and update the code to test the property baseSubtotalInvoiced
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseSubtotalRefunded (base name: "base_subtotal_refunded")', function() {
      // uncomment below and update the code to test the property baseSubtotalRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTaxAmount (base name: "base_tax_amount")', function() {
      // uncomment below and update the code to test the property baseTaxAmount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTaxCanceled (base name: "base_tax_canceled")', function() {
      // uncomment below and update the code to test the property baseTaxCanceled
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTaxInvoiced (base name: "base_tax_invoiced")', function() {
      // uncomment below and update the code to test the property baseTaxInvoiced
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTaxRefunded (base name: "base_tax_refunded")', function() {
      // uncomment below and update the code to test the property baseTaxRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseToGlobalRate (base name: "base_to_global_rate")', function() {
      // uncomment below and update the code to test the property baseToGlobalRate
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseToOrderRate (base name: "base_to_order_rate")', function() {
      // uncomment below and update the code to test the property baseToOrderRate
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalCanceled (base name: "base_total_canceled")', function() {
      // uncomment below and update the code to test the property baseTotalCanceled
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalDue (base name: "base_total_due")', function() {
      // uncomment below and update the code to test the property baseTotalDue
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalInvoiced (base name: "base_total_invoiced")', function() {
      // uncomment below and update the code to test the property baseTotalInvoiced
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalInvoicedCost (base name: "base_total_invoiced_cost")', function() {
      // uncomment below and update the code to test the property baseTotalInvoicedCost
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalOfflineRefunded (base name: "base_total_offline_refunded")', function() {
      // uncomment below and update the code to test the property baseTotalOfflineRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalOnlineRefunded (base name: "base_total_online_refunded")', function() {
      // uncomment below and update the code to test the property baseTotalOnlineRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalPaid (base name: "base_total_paid")', function() {
      // uncomment below and update the code to test the property baseTotalPaid
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalQtyOrdered (base name: "base_total_qty_ordered")', function() {
      // uncomment below and update the code to test the property baseTotalQtyOrdered
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTotalRefunded (base name: "base_total_refunded")', function() {
      // uncomment below and update the code to test the property baseTotalRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property billingAddress (base name: "billing_address")', function() {
      // uncomment below and update the code to test the property billingAddress
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property billingAddressId (base name: "billing_address_id")', function() {
      // uncomment below and update the code to test the property billingAddressId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property canShipPartially (base name: "can_ship_partially")', function() {
      // uncomment below and update the code to test the property canShipPartially
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property canShipPartiallyItem (base name: "can_ship_partially_item")', function() {
      // uncomment below and update the code to test the property canShipPartiallyItem
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property couponCode (base name: "coupon_code")', function() {
      // uncomment below and update the code to test the property couponCode
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerDob (base name: "customer_dob")', function() {
      // uncomment below and update the code to test the property customerDob
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerEmail (base name: "customer_email")', function() {
      // uncomment below and update the code to test the property customerEmail
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerFirstname (base name: "customer_firstname")', function() {
      // uncomment below and update the code to test the property customerFirstname
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerGender (base name: "customer_gender")', function() {
      // uncomment below and update the code to test the property customerGender
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerGroupId (base name: "customer_group_id")', function() {
      // uncomment below and update the code to test the property customerGroupId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerId (base name: "customer_id")', function() {
      // uncomment below and update the code to test the property customerId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerIsGuest (base name: "customer_is_guest")', function() {
      // uncomment below and update the code to test the property customerIsGuest
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerLastname (base name: "customer_lastname")', function() {
      // uncomment below and update the code to test the property customerLastname
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerMiddlename (base name: "customer_middlename")', function() {
      // uncomment below and update the code to test the property customerMiddlename
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerNote (base name: "customer_note")', function() {
      // uncomment below and update the code to test the property customerNote
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerNoteNotify (base name: "customer_note_notify")', function() {
      // uncomment below and update the code to test the property customerNoteNotify
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerPrefix (base name: "customer_prefix")', function() {
      // uncomment below and update the code to test the property customerPrefix
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerSuffix (base name: "customer_suffix")', function() {
      // uncomment below and update the code to test the property customerSuffix
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property customerTaxvat (base name: "customer_taxvat")', function() {
      // uncomment below and update the code to test the property customerTaxvat
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountAmount (base name: "discount_amount")', function() {
      // uncomment below and update the code to test the property discountAmount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountCanceled (base name: "discount_canceled")', function() {
      // uncomment below and update the code to test the property discountCanceled
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountDescription (base name: "discount_description")', function() {
      // uncomment below and update the code to test the property discountDescription
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountInvoiced (base name: "discount_invoiced")', function() {
      // uncomment below and update the code to test the property discountInvoiced
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountRefunded (base name: "discount_refunded")', function() {
      // uncomment below and update the code to test the property discountRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountTaxCompensationAmount (base name: "discount_tax_compensation_amount")', function() {
      // uncomment below and update the code to test the property discountTaxCompensationAmount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountTaxCompensationInvoiced (base name: "discount_tax_compensation_invoiced")', function() {
      // uncomment below and update the code to test the property discountTaxCompensationInvoiced
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountTaxCompensationRefunded (base name: "discount_tax_compensation_refunded")', function() {
      // uncomment below and update the code to test the property discountTaxCompensationRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property editIncrement (base name: "edit_increment")', function() {
      // uncomment below and update the code to test the property editIncrement
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property emailSent (base name: "email_sent")', function() {
      // uncomment below and update the code to test the property emailSent
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property entityId (base name: "entity_id")', function() {
      // uncomment below and update the code to test the property entityId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property extCustomerId (base name: "ext_customer_id")', function() {
      // uncomment below and update the code to test the property extCustomerId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property extOrderId (base name: "ext_order_id")', function() {
      // uncomment below and update the code to test the property extOrderId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property extensionAttributes (base name: "extension_attributes")', function() {
      // uncomment below and update the code to test the property extensionAttributes
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property forcedShipmentWithInvoice (base name: "forced_shipment_with_invoice")', function() {
      // uncomment below and update the code to test the property forcedShipmentWithInvoice
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property globalCurrencyCode (base name: "global_currency_code")', function() {
      // uncomment below and update the code to test the property globalCurrencyCode
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property grandTotal (base name: "grand_total")', function() {
      // uncomment below and update the code to test the property grandTotal
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property holdBeforeState (base name: "hold_before_state")', function() {
      // uncomment below and update the code to test the property holdBeforeState
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property holdBeforeStatus (base name: "hold_before_status")', function() {
      // uncomment below and update the code to test the property holdBeforeStatus
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property incrementId (base name: "increment_id")', function() {
      // uncomment below and update the code to test the property incrementId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property isVirtual (base name: "is_virtual")', function() {
      // uncomment below and update the code to test the property isVirtual
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property items (base name: "items")', function() {
      // uncomment below and update the code to test the property items
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property orderCurrencyCode (base name: "order_currency_code")', function() {
      // uncomment below and update the code to test the property orderCurrencyCode
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property originalIncrementId (base name: "original_increment_id")', function() {
      // uncomment below and update the code to test the property originalIncrementId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property payment (base name: "payment")', function() {
      // uncomment below and update the code to test the property payment
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property paymentAuthExpiration (base name: "payment_auth_expiration")', function() {
      // uncomment below and update the code to test the property paymentAuthExpiration
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property paymentAuthorizationAmount (base name: "payment_authorization_amount")', function() {
      // uncomment below and update the code to test the property paymentAuthorizationAmount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property protectCode (base name: "protect_code")', function() {
      // uncomment below and update the code to test the property protectCode
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property quoteAddressId (base name: "quote_address_id")', function() {
      // uncomment below and update the code to test the property quoteAddressId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property quoteId (base name: "quote_id")', function() {
      // uncomment below and update the code to test the property quoteId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property relationChildId (base name: "relation_child_id")', function() {
      // uncomment below and update the code to test the property relationChildId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property relationChildRealId (base name: "relation_child_real_id")', function() {
      // uncomment below and update the code to test the property relationChildRealId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property relationParentId (base name: "relation_parent_id")', function() {
      // uncomment below and update the code to test the property relationParentId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property relationParentRealId (base name: "relation_parent_real_id")', function() {
      // uncomment below and update the code to test the property relationParentRealId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property remoteIp (base name: "remote_ip")', function() {
      // uncomment below and update the code to test the property remoteIp
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingAmount (base name: "shipping_amount")', function() {
      // uncomment below and update the code to test the property shippingAmount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingCanceled (base name: "shipping_canceled")', function() {
      // uncomment below and update the code to test the property shippingCanceled
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingDescription (base name: "shipping_description")', function() {
      // uncomment below and update the code to test the property shippingDescription
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingDiscountAmount (base name: "shipping_discount_amount")', function() {
      // uncomment below and update the code to test the property shippingDiscountAmount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingDiscountTaxCompensationAmount (base name: "shipping_discount_tax_compensation_amount")', function() {
      // uncomment below and update the code to test the property shippingDiscountTaxCompensationAmount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingInclTax (base name: "shipping_incl_tax")', function() {
      // uncomment below and update the code to test the property shippingInclTax
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingInvoiced (base name: "shipping_invoiced")', function() {
      // uncomment below and update the code to test the property shippingInvoiced
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingRefunded (base name: "shipping_refunded")', function() {
      // uncomment below and update the code to test the property shippingRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingTaxAmount (base name: "shipping_tax_amount")', function() {
      // uncomment below and update the code to test the property shippingTaxAmount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingTaxRefunded (base name: "shipping_tax_refunded")', function() {
      // uncomment below and update the code to test the property shippingTaxRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property statusHistories (base name: "status_histories")', function() {
      // uncomment below and update the code to test the property statusHistories
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property storeCurrencyCode (base name: "store_currency_code")', function() {
      // uncomment below and update the code to test the property storeCurrencyCode
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property storeId (base name: "store_id")', function() {
      // uncomment below and update the code to test the property storeId
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property storeName (base name: "store_name")', function() {
      // uncomment below and update the code to test the property storeName
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property storeToBaseRate (base name: "store_to_base_rate")', function() {
      // uncomment below and update the code to test the property storeToBaseRate
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property storeToOrderRate (base name: "store_to_order_rate")', function() {
      // uncomment below and update the code to test the property storeToOrderRate
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property subtotal (base name: "subtotal")', function() {
      // uncomment below and update the code to test the property subtotal
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property subtotalCanceled (base name: "subtotal_canceled")', function() {
      // uncomment below and update the code to test the property subtotalCanceled
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property subtotalInclTax (base name: "subtotal_incl_tax")', function() {
      // uncomment below and update the code to test the property subtotalInclTax
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property subtotalInvoiced (base name: "subtotal_invoiced")', function() {
      // uncomment below and update the code to test the property subtotalInvoiced
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property subtotalRefunded (base name: "subtotal_refunded")', function() {
      // uncomment below and update the code to test the property subtotalRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxAmount (base name: "tax_amount")', function() {
      // uncomment below and update the code to test the property taxAmount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxCanceled (base name: "tax_canceled")', function() {
      // uncomment below and update the code to test the property taxCanceled
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxInvoiced (base name: "tax_invoiced")', function() {
      // uncomment below and update the code to test the property taxInvoiced
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxRefunded (base name: "tax_refunded")', function() {
      // uncomment below and update the code to test the property taxRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalCanceled (base name: "total_canceled")', function() {
      // uncomment below and update the code to test the property totalCanceled
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalDue (base name: "total_due")', function() {
      // uncomment below and update the code to test the property totalDue
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalInvoiced (base name: "total_invoiced")', function() {
      // uncomment below and update the code to test the property totalInvoiced
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalItemCount (base name: "total_item_count")', function() {
      // uncomment below and update the code to test the property totalItemCount
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalOfflineRefunded (base name: "total_offline_refunded")', function() {
      // uncomment below and update the code to test the property totalOfflineRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalOnlineRefunded (base name: "total_online_refunded")', function() {
      // uncomment below and update the code to test the property totalOnlineRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalPaid (base name: "total_paid")', function() {
      // uncomment below and update the code to test the property totalPaid
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalQtyOrdered (base name: "total_qty_ordered")', function() {
      // uncomment below and update the code to test the property totalQtyOrdered
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalRefunded (base name: "total_refunded")', function() {
      // uncomment below and update the code to test the property totalRefunded
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property weight (base name: "weight")', function() {
      // uncomment below and update the code to test the property weight
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

    it('should have the property xForwardedFor (base name: "x_forwarded_for")', function() {
      // uncomment below and update the code to test the property xForwardedFor
      //var instance = new MagentoB2B.SalesDataOrderInterface();
      //expect(instance).to.be();
    });

  });

}));
