/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MagentoB2B);
  }
}(this, function(expect, MagentoB2B) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MagentoB2B.QuoteDataTotalsInterface();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('QuoteDataTotalsInterface', function() {
    it('should create an instance of QuoteDataTotalsInterface', function() {
      // uncomment below and update the code to test QuoteDataTotalsInterface
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be.a(MagentoB2B.QuoteDataTotalsInterface);
    });

    it('should have the property baseCurrencyCode (base name: "base_currency_code")', function() {
      // uncomment below and update the code to test the property baseCurrencyCode
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseDiscountAmount (base name: "base_discount_amount")', function() {
      // uncomment below and update the code to test the property baseDiscountAmount
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseGrandTotal (base name: "base_grand_total")', function() {
      // uncomment below and update the code to test the property baseGrandTotal
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingAmount (base name: "base_shipping_amount")', function() {
      // uncomment below and update the code to test the property baseShippingAmount
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingDiscountAmount (base name: "base_shipping_discount_amount")', function() {
      // uncomment below and update the code to test the property baseShippingDiscountAmount
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingInclTax (base name: "base_shipping_incl_tax")', function() {
      // uncomment below and update the code to test the property baseShippingInclTax
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseShippingTaxAmount (base name: "base_shipping_tax_amount")', function() {
      // uncomment below and update the code to test the property baseShippingTaxAmount
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseSubtotal (base name: "base_subtotal")', function() {
      // uncomment below and update the code to test the property baseSubtotal
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseSubtotalInclTax (base name: "base_subtotal_incl_tax")', function() {
      // uncomment below and update the code to test the property baseSubtotalInclTax
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseSubtotalWithDiscount (base name: "base_subtotal_with_discount")', function() {
      // uncomment below and update the code to test the property baseSubtotalWithDiscount
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property baseTaxAmount (base name: "base_tax_amount")', function() {
      // uncomment below and update the code to test the property baseTaxAmount
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property couponCode (base name: "coupon_code")', function() {
      // uncomment below and update the code to test the property couponCode
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property discountAmount (base name: "discount_amount")', function() {
      // uncomment below and update the code to test the property discountAmount
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property extensionAttributes (base name: "extension_attributes")', function() {
      // uncomment below and update the code to test the property extensionAttributes
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property grandTotal (base name: "grand_total")', function() {
      // uncomment below and update the code to test the property grandTotal
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property items (base name: "items")', function() {
      // uncomment below and update the code to test the property items
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property itemsQty (base name: "items_qty")', function() {
      // uncomment below and update the code to test the property itemsQty
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property quoteCurrencyCode (base name: "quote_currency_code")', function() {
      // uncomment below and update the code to test the property quoteCurrencyCode
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingAmount (base name: "shipping_amount")', function() {
      // uncomment below and update the code to test the property shippingAmount
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingDiscountAmount (base name: "shipping_discount_amount")', function() {
      // uncomment below and update the code to test the property shippingDiscountAmount
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingInclTax (base name: "shipping_incl_tax")', function() {
      // uncomment below and update the code to test the property shippingInclTax
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property shippingTaxAmount (base name: "shipping_tax_amount")', function() {
      // uncomment below and update the code to test the property shippingTaxAmount
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property subtotal (base name: "subtotal")', function() {
      // uncomment below and update the code to test the property subtotal
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property subtotalInclTax (base name: "subtotal_incl_tax")', function() {
      // uncomment below and update the code to test the property subtotalInclTax
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property subtotalWithDiscount (base name: "subtotal_with_discount")', function() {
      // uncomment below and update the code to test the property subtotalWithDiscount
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxAmount (base name: "tax_amount")', function() {
      // uncomment below and update the code to test the property taxAmount
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property totalSegments (base name: "total_segments")', function() {
      // uncomment below and update the code to test the property totalSegments
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

    it('should have the property weeeTaxAppliedAmount (base name: "weee_tax_applied_amount")', function() {
      // uncomment below and update the code to test the property weeeTaxAppliedAmount
      //var instance = new MagentoB2B.QuoteDataTotalsInterface();
      //expect(instance).to.be();
    });

  });

}));
