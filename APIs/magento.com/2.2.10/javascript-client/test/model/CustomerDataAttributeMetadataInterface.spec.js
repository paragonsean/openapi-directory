/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MagentoB2B);
  }
}(this, function(expect, MagentoB2B) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CustomerDataAttributeMetadataInterface', function() {
    it('should create an instance of CustomerDataAttributeMetadataInterface', function() {
      // uncomment below and update the code to test CustomerDataAttributeMetadataInterface
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be.a(MagentoB2B.CustomerDataAttributeMetadataInterface);
    });

    it('should have the property attributeCode (base name: "attribute_code")', function() {
      // uncomment below and update the code to test the property attributeCode
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property backendType (base name: "backend_type")', function() {
      // uncomment below and update the code to test the property backendType
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property dataModel (base name: "data_model")', function() {
      // uncomment below and update the code to test the property dataModel
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property frontendClass (base name: "frontend_class")', function() {
      // uncomment below and update the code to test the property frontendClass
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property frontendInput (base name: "frontend_input")', function() {
      // uncomment below and update the code to test the property frontendInput
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property frontendLabel (base name: "frontend_label")', function() {
      // uncomment below and update the code to test the property frontendLabel
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property inputFilter (base name: "input_filter")', function() {
      // uncomment below and update the code to test the property inputFilter
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property isFilterableInGrid (base name: "is_filterable_in_grid")', function() {
      // uncomment below and update the code to test the property isFilterableInGrid
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property isSearchableInGrid (base name: "is_searchable_in_grid")', function() {
      // uncomment below and update the code to test the property isSearchableInGrid
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property isUsedInGrid (base name: "is_used_in_grid")', function() {
      // uncomment below and update the code to test the property isUsedInGrid
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property isVisibleInGrid (base name: "is_visible_in_grid")', function() {
      // uncomment below and update the code to test the property isVisibleInGrid
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property multilineCount (base name: "multiline_count")', function() {
      // uncomment below and update the code to test the property multilineCount
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property note (base name: "note")', function() {
      // uncomment below and update the code to test the property note
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property options (base name: "options")', function() {
      // uncomment below and update the code to test the property options
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property required (base name: "required")', function() {
      // uncomment below and update the code to test the property required
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property sortOrder (base name: "sort_order")', function() {
      // uncomment below and update the code to test the property sortOrder
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property storeLabel (base name: "store_label")', function() {
      // uncomment below and update the code to test the property storeLabel
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property system (base name: "system")', function() {
      // uncomment below and update the code to test the property system
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property userDefined (base name: "user_defined")', function() {
      // uncomment below and update the code to test the property userDefined
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property validationRules (base name: "validation_rules")', function() {
      // uncomment below and update the code to test the property validationRules
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

    it('should have the property visible (base name: "visible")', function() {
      // uncomment below and update the code to test the property visible
      //var instance = new MagentoB2B.CustomerDataAttributeMetadataInterface();
      //expect(instance).to.be();
    });

  });

}));
