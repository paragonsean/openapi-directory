/**
 * Magento B2B
 * Magento Commerce is the leading provider of open omnichannel innovation.
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MagentoB2B);
  }
}(this, function(expect, MagentoB2B) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('QuoteDataTotalSegmentExtensionInterface', function() {
    it('should create an instance of QuoteDataTotalSegmentExtensionInterface', function() {
      // uncomment below and update the code to test QuoteDataTotalSegmentExtensionInterface
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be.a(MagentoB2B.QuoteDataTotalSegmentExtensionInterface);
    });

    it('should have the property giftCards (base name: "gift_cards")', function() {
      // uncomment below and update the code to test the property giftCards
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwAddCard (base name: "gw_add_card")', function() {
      // uncomment below and update the code to test the property gwAddCard
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwAllowGiftReceipt (base name: "gw_allow_gift_receipt")', function() {
      // uncomment below and update the code to test the property gwAllowGiftReceipt
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwBasePrice (base name: "gw_base_price")', function() {
      // uncomment below and update the code to test the property gwBasePrice
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwBasePriceInclTax (base name: "gw_base_price_incl_tax")', function() {
      // uncomment below and update the code to test the property gwBasePriceInclTax
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwBaseTaxAmount (base name: "gw_base_tax_amount")', function() {
      // uncomment below and update the code to test the property gwBaseTaxAmount
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwCardBasePrice (base name: "gw_card_base_price")', function() {
      // uncomment below and update the code to test the property gwCardBasePrice
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwCardBasePriceInclTax (base name: "gw_card_base_price_incl_tax")', function() {
      // uncomment below and update the code to test the property gwCardBasePriceInclTax
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwCardBaseTaxAmount (base name: "gw_card_base_tax_amount")', function() {
      // uncomment below and update the code to test the property gwCardBaseTaxAmount
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwCardPrice (base name: "gw_card_price")', function() {
      // uncomment below and update the code to test the property gwCardPrice
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwCardPriceInclTax (base name: "gw_card_price_incl_tax")', function() {
      // uncomment below and update the code to test the property gwCardPriceInclTax
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwCardTaxAmount (base name: "gw_card_tax_amount")', function() {
      // uncomment below and update the code to test the property gwCardTaxAmount
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwItemIds (base name: "gw_item_ids")', function() {
      // uncomment below and update the code to test the property gwItemIds
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwItemsBasePrice (base name: "gw_items_base_price")', function() {
      // uncomment below and update the code to test the property gwItemsBasePrice
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwItemsBasePriceInclTax (base name: "gw_items_base_price_incl_tax")', function() {
      // uncomment below and update the code to test the property gwItemsBasePriceInclTax
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwItemsBaseTaxAmount (base name: "gw_items_base_tax_amount")', function() {
      // uncomment below and update the code to test the property gwItemsBaseTaxAmount
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwItemsPrice (base name: "gw_items_price")', function() {
      // uncomment below and update the code to test the property gwItemsPrice
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwItemsPriceInclTax (base name: "gw_items_price_incl_tax")', function() {
      // uncomment below and update the code to test the property gwItemsPriceInclTax
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwItemsTaxAmount (base name: "gw_items_tax_amount")', function() {
      // uncomment below and update the code to test the property gwItemsTaxAmount
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwOrderId (base name: "gw_order_id")', function() {
      // uncomment below and update the code to test the property gwOrderId
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwPrice (base name: "gw_price")', function() {
      // uncomment below and update the code to test the property gwPrice
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwPriceInclTax (base name: "gw_price_incl_tax")', function() {
      // uncomment below and update the code to test the property gwPriceInclTax
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property gwTaxAmount (base name: "gw_tax_amount")', function() {
      // uncomment below and update the code to test the property gwTaxAmount
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property taxGrandtotalDetails (base name: "tax_grandtotal_details")', function() {
      // uncomment below and update the code to test the property taxGrandtotalDetails
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

    it('should have the property vertexTaxCalculationMessages (base name: "vertex_tax_calculation_messages")', function() {
      // uncomment below and update the code to test the property vertexTaxCalculationMessages
      //var instance = new MagentoB2B.QuoteDataTotalSegmentExtensionInterface();
      //expect(instance).to.be();
    });

  });

}));
