/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventTypeApi_H
#define OAI_OAIEventTypeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEventTypeIn.h"
#include "OAIEventTypeOut.h"
#include "OAIEventTypeUpdate.h"
#include "OAIHTTPValidationError.h"
#include "OAIHttpErrorOut.h"
#include "OAIListResponse_EventTypeOut_.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventTypeApi : public QObject {
    Q_OBJECT

public:
    OAIEventTypeApi(const int timeOut = 0);
    ~OAIEventTypeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_event_type_in OAIEventTypeIn [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void createEventTypeApiV1EventTypePost(const OAIEventTypeIn &oai_event_type_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_type_name QString [required]
    * @param[in]  expunge bool [optional]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void deleteEventTypeApiV1EventTypeEventTypeNameDelete(const QString &event_type_name, const ::OpenAPI::OptionalParam<bool> &expunge = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_type_name QString [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void getEventTypeApiV1EventTypeEventTypeNameGet(const QString &event_type_name, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  iterator QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  with_content bool [optional]
    * @param[in]  include_archived bool [optional]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void listEventTypesApiV1EventTypeGet(const ::OpenAPI::OptionalParam<QString> &iterator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &with_content = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_archived = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_type_name QString [required]
    * @param[in]  oai_event_type_update OAIEventTypeUpdate [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void updateEventTypeApiV1EventTypeEventTypeNamePut(const QString &event_type_name, const OAIEventTypeUpdate &oai_event_type_update, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createEventTypeApiV1EventTypePostCallback(OAIHttpRequestWorker *worker);
    void deleteEventTypeApiV1EventTypeEventTypeNameDeleteCallback(OAIHttpRequestWorker *worker);
    void getEventTypeApiV1EventTypeEventTypeNameGetCallback(OAIHttpRequestWorker *worker);
    void listEventTypesApiV1EventTypeGetCallback(OAIHttpRequestWorker *worker);
    void updateEventTypeApiV1EventTypeEventTypeNamePutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createEventTypeApiV1EventTypePostSignal(OAIEventTypeOut summary);
    void deleteEventTypeApiV1EventTypeEventTypeNameDeleteSignal();
    void getEventTypeApiV1EventTypeEventTypeNameGetSignal(OAIEventTypeOut summary);
    void listEventTypesApiV1EventTypeGetSignal(OAIListResponse_EventTypeOut_ summary);
    void updateEventTypeApiV1EventTypeEventTypeNamePutSignal(OAIEventTypeOut summary);


    void createEventTypeApiV1EventTypePostSignalFull(OAIHttpRequestWorker *worker, OAIEventTypeOut summary);
    void deleteEventTypeApiV1EventTypeEventTypeNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void getEventTypeApiV1EventTypeEventTypeNameGetSignalFull(OAIHttpRequestWorker *worker, OAIEventTypeOut summary);
    void listEventTypesApiV1EventTypeGetSignalFull(OAIHttpRequestWorker *worker, OAIListResponse_EventTypeOut_ summary);
    void updateEventTypeApiV1EventTypeEventTypeNamePutSignalFull(OAIHttpRequestWorker *worker, OAIEventTypeOut summary);

    Q_DECL_DEPRECATED_X("Use createEventTypeApiV1EventTypePostSignalError() instead")
    void createEventTypeApiV1EventTypePostSignalE(OAIEventTypeOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEventTypeApiV1EventTypePostSignalError(OAIEventTypeOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEventTypeApiV1EventTypeEventTypeNameDeleteSignalError() instead")
    void deleteEventTypeApiV1EventTypeEventTypeNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventTypeApiV1EventTypeEventTypeNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTypeApiV1EventTypeEventTypeNameGetSignalError() instead")
    void getEventTypeApiV1EventTypeEventTypeNameGetSignalE(OAIEventTypeOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTypeApiV1EventTypeEventTypeNameGetSignalError(OAIEventTypeOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEventTypesApiV1EventTypeGetSignalError() instead")
    void listEventTypesApiV1EventTypeGetSignalE(OAIListResponse_EventTypeOut_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEventTypesApiV1EventTypeGetSignalError(OAIListResponse_EventTypeOut_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEventTypeApiV1EventTypeEventTypeNamePutSignalError() instead")
    void updateEventTypeApiV1EventTypeEventTypeNamePutSignalE(OAIEventTypeOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEventTypeApiV1EventTypeEventTypeNamePutSignalError(OAIEventTypeOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createEventTypeApiV1EventTypePostSignalErrorFull() instead")
    void createEventTypeApiV1EventTypePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEventTypeApiV1EventTypePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEventTypeApiV1EventTypeEventTypeNameDeleteSignalErrorFull() instead")
    void deleteEventTypeApiV1EventTypeEventTypeNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventTypeApiV1EventTypeEventTypeNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventTypeApiV1EventTypeEventTypeNameGetSignalErrorFull() instead")
    void getEventTypeApiV1EventTypeEventTypeNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventTypeApiV1EventTypeEventTypeNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEventTypesApiV1EventTypeGetSignalErrorFull() instead")
    void listEventTypesApiV1EventTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEventTypesApiV1EventTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEventTypeApiV1EventTypeEventTypeNamePutSignalErrorFull() instead")
    void updateEventTypeApiV1EventTypeEventTypeNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEventTypeApiV1EventTypeEventTypeNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
