/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointUpdate::OAIEndpointUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointUpdate::OAIEndpointUpdate() {
    this->initializeModel();
}

OAIEndpointUpdate::~OAIEndpointUpdate() {}

void OAIEndpointUpdate::initializeModel() {

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_filter_types_isSet = false;
    m_filter_types_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_rate_limit_isSet = false;
    m_rate_limit_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIEndpointUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointUpdate::fromJsonObject(QJsonObject json) {

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_filter_types_isValid = ::OpenAPI::fromJsonValue(m_filter_types, json[QString("filterTypes")]);
    m_filter_types_isSet = !json[QString("filterTypes")].isNull() && m_filter_types_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_rate_limit_isValid = ::OpenAPI::fromJsonValue(m_rate_limit, json[QString("rateLimit")]);
    m_rate_limit_isSet = !json[QString("rateLimit")].isNull() && m_rate_limit_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIEndpointUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_filter_types.size() > 0) {
        obj.insert(QString("filterTypes"), ::OpenAPI::toJsonValue(m_filter_types));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_rate_limit_isSet) {
        obj.insert(QString("rateLimit"), ::OpenAPI::toJsonValue(m_rate_limit));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QSet<QString> OAIEndpointUpdate::getChannels() const {
    return m_channels;
}
void OAIEndpointUpdate::setChannels(const QSet<QString> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIEndpointUpdate::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIEndpointUpdate::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAIEndpointUpdate::getDescription() const {
    return m_description;
}
void OAIEndpointUpdate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEndpointUpdate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEndpointUpdate::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIEndpointUpdate::isDisabled() const {
    return m_disabled;
}
void OAIEndpointUpdate::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIEndpointUpdate::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIEndpointUpdate::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QSet<QString> OAIEndpointUpdate::getFilterTypes() const {
    return m_filter_types;
}
void OAIEndpointUpdate::setFilterTypes(const QSet<QString> &filter_types) {
    m_filter_types = filter_types;
    m_filter_types_isSet = true;
}

bool OAIEndpointUpdate::is_filter_types_Set() const{
    return m_filter_types_isSet;
}

bool OAIEndpointUpdate::is_filter_types_Valid() const{
    return m_filter_types_isValid;
}

QMap<QString, QString> OAIEndpointUpdate::getMetadata() const {
    return m_metadata;
}
void OAIEndpointUpdate::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIEndpointUpdate::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIEndpointUpdate::is_metadata_Valid() const{
    return m_metadata_isValid;
}

qint32 OAIEndpointUpdate::getRateLimit() const {
    return m_rate_limit;
}
void OAIEndpointUpdate::setRateLimit(const qint32 &rate_limit) {
    m_rate_limit = rate_limit;
    m_rate_limit_isSet = true;
}

bool OAIEndpointUpdate::is_rate_limit_Set() const{
    return m_rate_limit_isSet;
}

bool OAIEndpointUpdate::is_rate_limit_Valid() const{
    return m_rate_limit_isValid;
}

QString OAIEndpointUpdate::getUid() const {
    return m_uid;
}
void OAIEndpointUpdate::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIEndpointUpdate::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIEndpointUpdate::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIEndpointUpdate::getUrl() const {
    return m_url;
}
void OAIEndpointUpdate::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEndpointUpdate::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEndpointUpdate::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIEndpointUpdate::getVersion() const {
    return m_version;
}
void OAIEndpointUpdate::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIEndpointUpdate::is_version_Set() const{
    return m_version_isSet;
}

bool OAIEndpointUpdate::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIEndpointUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
