/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMessageAttemptApi_H
#define OAI_OAIMessageAttemptApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPValidationError.h"
#include "OAIHttpErrorOut.h"
#include "OAIListResponse_EndpointMessageOut_.h"
#include "OAIListResponse_MessageAttemptEndpointOut_.h"
#include "OAIListResponse_MessageAttemptOut_.h"
#include "OAIListResponse_MessageEndpointOut_.h"
#include "OAIMessageAttemptOut.h"
#include "OAIMessageStatus.h"
#include "OAIStatusCodeClass.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMessageAttemptApi : public QObject {
    Q_OBJECT

public:
    OAIMessageAttemptApi(const int timeOut = 0);
    ~OAIMessageAttemptApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  attempt_id QString [required]
    * @param[in]  msg_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDelete(const QString &attempt_id, const QString &msg_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  attempt_id QString [required]
    * @param[in]  msg_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(const QString &attempt_id, const QString &msg_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  msg_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  iterator QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(const QString &msg_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &iterator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  iterator QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  status OAIMessageStatus [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  after QDateTime [optional]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(const QString &endpoint_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &iterator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIMessageStatus> &status = ::OpenAPI::OptionalParam<OAIMessageStatus>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  msg_id QString [required]
    * @param[in]  iterator QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  endpoint_id QString [optional]
    * @param[in]  event_types QList<QString> [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  status OAIMessageStatus [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  after QDateTime [optional]
    * @param[in]  idempotency_key QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(const QString &app_id, const QString &msg_id, const ::OpenAPI::OptionalParam<QString> &iterator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &endpoint_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &event_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIMessageStatus> &status = ::OpenAPI::OptionalParam<OAIMessageStatus>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  endpoint_id QString [required]
    * @param[in]  iterator QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  status OAIMessageStatus [optional]
    * @param[in]  status_code_class OAIStatusCodeClass [optional]
    * @param[in]  event_types QList<QString> [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  after QDateTime [optional]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet(const QString &app_id, const QString &endpoint_id, const ::OpenAPI::OptionalParam<QString> &iterator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIMessageStatus> &status = ::OpenAPI::OptionalParam<OAIMessageStatus>(), const ::OpenAPI::OptionalParam<OAIStatusCodeClass> &status_code_class = ::OpenAPI::OptionalParam<OAIStatusCodeClass>(), const ::OpenAPI::OptionalParam<QList<QString>> &event_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  msg_id QString [required]
    * @param[in]  endpoint_id QString [optional]
    * @param[in]  iterator QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  status OAIMessageStatus [optional]
    * @param[in]  status_code_class OAIStatusCodeClass [optional]
    * @param[in]  event_types QList<QString> [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  after QDateTime [optional]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet(const QString &app_id, const QString &msg_id, const ::OpenAPI::OptionalParam<QString> &endpoint_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &iterator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIMessageStatus> &status = ::OpenAPI::OptionalParam<OAIMessageStatus>(), const ::OpenAPI::OptionalParam<OAIStatusCodeClass> &status_code_class = ::OpenAPI::OptionalParam<OAIStatusCodeClass>(), const ::OpenAPI::OptionalParam<QList<QString>> &event_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  msg_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  endpoint_id QString [required]
    * @param[in]  iterator QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  event_types QList<QString> [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  status OAIMessageStatus [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  after QDateTime [optional]
    * @param[in]  idempotency_key QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(const QString &msg_id, const QString &app_id, const QString &endpoint_id, const ::OpenAPI::OptionalParam<QString> &iterator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &event_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIMessageStatus> &status = ::OpenAPI::OptionalParam<OAIMessageStatus>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  msg_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(const QString &endpoint_id, const QString &msg_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteCallback(OAIHttpRequestWorker *worker);
    void getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetCallback(OAIHttpRequestWorker *worker);
    void listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetCallback(OAIHttpRequestWorker *worker);
    void listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetCallback(OAIHttpRequestWorker *worker);
    void listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetCallback(OAIHttpRequestWorker *worker);
    void listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetCallback(OAIHttpRequestWorker *worker);
    void listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetCallback(OAIHttpRequestWorker *worker);
    void listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetCallback(OAIHttpRequestWorker *worker);
    void resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteSignal();
    void getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetSignal(OAIMessageAttemptOut summary);
    void listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetSignal(OAIListResponse_MessageEndpointOut_ summary);
    void listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetSignal(OAIListResponse_EndpointMessageOut_ summary);
    void listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetSignal(OAIListResponse_MessageAttemptOut_ summary);
    void listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetSignal(OAIListResponse_MessageAttemptOut_ summary);
    void listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetSignal(OAIListResponse_MessageAttemptOut_ summary);
    void listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetSignal(OAIListResponse_MessageAttemptEndpointOut_ summary);
    void resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostSignal();


    void expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteSignalFull(OAIHttpRequestWorker *worker);
    void getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetSignalFull(OAIHttpRequestWorker *worker, OAIMessageAttemptOut summary);
    void listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetSignalFull(OAIHttpRequestWorker *worker, OAIListResponse_MessageEndpointOut_ summary);
    void listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetSignalFull(OAIHttpRequestWorker *worker, OAIListResponse_EndpointMessageOut_ summary);
    void listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetSignalFull(OAIHttpRequestWorker *worker, OAIListResponse_MessageAttemptOut_ summary);
    void listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetSignalFull(OAIHttpRequestWorker *worker, OAIListResponse_MessageAttemptOut_ summary);
    void listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetSignalFull(OAIHttpRequestWorker *worker, OAIListResponse_MessageAttemptOut_ summary);
    void listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetSignalFull(OAIHttpRequestWorker *worker, OAIListResponse_MessageAttemptEndpointOut_ summary);
    void resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteSignalError() instead")
    void expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetSignalError() instead")
    void getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetSignalE(OAIMessageAttemptOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetSignalError(OAIMessageAttemptOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetSignalError() instead")
    void listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetSignalE(OAIListResponse_MessageEndpointOut_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetSignalError(OAIListResponse_MessageEndpointOut_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetSignalError() instead")
    void listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetSignalE(OAIListResponse_EndpointMessageOut_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetSignalError(OAIListResponse_EndpointMessageOut_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetSignalError() instead")
    void listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetSignalE(OAIListResponse_MessageAttemptOut_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetSignalError(OAIListResponse_MessageAttemptOut_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetSignalError() instead")
    void listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetSignalE(OAIListResponse_MessageAttemptOut_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetSignalError(OAIListResponse_MessageAttemptOut_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetSignalError() instead")
    void listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetSignalE(OAIListResponse_MessageAttemptOut_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetSignalError(OAIListResponse_MessageAttemptOut_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetSignalError() instead")
    void listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetSignalE(OAIListResponse_MessageAttemptEndpointOut_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetSignalError(OAIListResponse_MessageAttemptEndpointOut_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostSignalError() instead")
    void resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteSignalErrorFull() instead")
    void expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetSignalErrorFull() instead")
    void getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetSignalErrorFull() instead")
    void listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetSignalErrorFull() instead")
    void listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetSignalErrorFull() instead")
    void listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetSignalErrorFull() instead")
    void listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetSignalErrorFull() instead")
    void listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetSignalErrorFull() instead")
    void listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostSignalErrorFull() instead")
    void resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
