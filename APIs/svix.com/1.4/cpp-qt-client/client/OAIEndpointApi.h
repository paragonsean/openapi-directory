/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEndpointApi_H
#define OAI_OAIEndpointApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEndpointHeadersIn.h"
#include "OAIEndpointHeadersOut.h"
#include "OAIEndpointHeadersPatchIn.h"
#include "OAIEndpointIn.h"
#include "OAIEndpointOut.h"
#include "OAIEndpointSecretOut.h"
#include "OAIEndpointSecretRotateIn.h"
#include "OAIEndpointStats.h"
#include "OAIEndpointTransformationIn.h"
#include "OAIEndpointTransformationOut.h"
#include "OAIEndpointUpdate.h"
#include "OAIEventExampleIn.h"
#include "OAIHTTPValidationError.h"
#include "OAIHttpErrorOut.h"
#include "OAIListResponse_EndpointOut_.h"
#include "OAIMessageOut.h"
#include "OAIOrdering.h"
#include "OAIRecoverIn.h"
#include "OAIRecoverOut.h"
#include "OAIReplayIn.h"
#include "OAIReplayOut.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEndpointApi : public QObject {
    Q_OBJECT

public:
    OAIEndpointApi(const int timeOut = 0);
    ~OAIEndpointApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_endpoint_in OAIEndpointIn [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void createEndpointApiV1AppAppIdEndpointPost(const QString &app_id, const OAIEndpointIn &oai_endpoint_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(const QString &endpoint_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void getEndpointApiV1AppAppIdEndpointEndpointIdGet(const QString &endpoint_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet(const QString &endpoint_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(const QString &endpoint_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  since QDateTime [optional]
    * @param[in]  until QDateTime [optional]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(const QString &endpoint_id, const QString &app_id, const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &until = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet(const QString &endpoint_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  iterator QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  order OAIOrdering [optional]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void listEndpointsApiV1AppAppIdEndpointGet(const QString &app_id, const ::OpenAPI::OptionalParam<QString> &iterator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIOrdering> &order = ::OpenAPI::OptionalParam<OAIOrdering>(), const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  endpoint_id QString [required]
    * @param[in]  oai_endpoint_headers_patch_in OAIEndpointHeadersPatchIn [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch(const QString &app_id, const QString &endpoint_id, const OAIEndpointHeadersPatchIn &oai_endpoint_headers_patch_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  endpoint_id QString [required]
    * @param[in]  oai_recover_in OAIRecoverIn [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost(const QString &app_id, const QString &endpoint_id, const OAIRecoverIn &oai_recover_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  endpoint_id QString [required]
    * @param[in]  oai_replay_in OAIReplayIn [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost(const QString &app_id, const QString &endpoint_id, const OAIReplayIn &oai_replay_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_endpoint_secret_rotate_in OAIEndpointSecretRotateIn [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost(const QString &endpoint_id, const QString &app_id, const OAIEndpointSecretRotateIn &oai_endpoint_secret_rotate_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  endpoint_id QString [required]
    * @param[in]  oai_event_example_in OAIEventExampleIn [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost(const QString &app_id, const QString &endpoint_id, const OAIEventExampleIn &oai_event_example_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  endpoint_id QString [required]
    * @param[in]  oai_endpoint_transformation_in OAIEndpointTransformationIn [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch(const QString &app_id, const QString &endpoint_id, const OAIEndpointTransformationIn &oai_endpoint_transformation_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  endpoint_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_endpoint_update OAIEndpointUpdate [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void updateEndpointApiV1AppAppIdEndpointEndpointIdPut(const QString &endpoint_id, const QString &app_id, const OAIEndpointUpdate &oai_endpoint_update, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  endpoint_id QString [required]
    * @param[in]  oai_endpoint_headers_in OAIEndpointHeadersIn [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut(const QString &app_id, const QString &endpoint_id, const OAIEndpointHeadersIn &oai_endpoint_headers_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createEndpointApiV1AppAppIdEndpointPostCallback(OAIHttpRequestWorker *worker);
    void deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteCallback(OAIHttpRequestWorker *worker);
    void getEndpointApiV1AppAppIdEndpointEndpointIdGetCallback(OAIHttpRequestWorker *worker);
    void getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetCallback(OAIHttpRequestWorker *worker);
    void getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetCallback(OAIHttpRequestWorker *worker);
    void getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetCallback(OAIHttpRequestWorker *worker);
    void getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetCallback(OAIHttpRequestWorker *worker);
    void listEndpointsApiV1AppAppIdEndpointGetCallback(OAIHttpRequestWorker *worker);
    void patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchCallback(OAIHttpRequestWorker *worker);
    void recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostCallback(OAIHttpRequestWorker *worker);
    void replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostCallback(OAIHttpRequestWorker *worker);
    void rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostCallback(OAIHttpRequestWorker *worker);
    void sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostCallback(OAIHttpRequestWorker *worker);
    void setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchCallback(OAIHttpRequestWorker *worker);
    void updateEndpointApiV1AppAppIdEndpointEndpointIdPutCallback(OAIHttpRequestWorker *worker);
    void updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createEndpointApiV1AppAppIdEndpointPostSignal(OAIEndpointOut summary);
    void deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteSignal();
    void getEndpointApiV1AppAppIdEndpointEndpointIdGetSignal(OAIEndpointOut summary);
    void getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetSignal(OAIEndpointHeadersOut summary);
    void getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetSignal(OAIEndpointSecretOut summary);
    void getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetSignal(OAIEndpointStats summary);
    void getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetSignal(OAIEndpointTransformationOut summary);
    void listEndpointsApiV1AppAppIdEndpointGetSignal(OAIListResponse_EndpointOut_ summary);
    void patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchSignal();
    void recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostSignal(OAIRecoverOut summary);
    void replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostSignal(OAIReplayOut summary);
    void rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostSignal();
    void sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostSignal(OAIMessageOut summary);
    void setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchSignal();
    void updateEndpointApiV1AppAppIdEndpointEndpointIdPutSignal(OAIEndpointOut summary);
    void updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutSignal();


    void createEndpointApiV1AppAppIdEndpointPostSignalFull(OAIHttpRequestWorker *worker, OAIEndpointOut summary);
    void deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void getEndpointApiV1AppAppIdEndpointEndpointIdGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpointOut summary);
    void getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpointHeadersOut summary);
    void getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpointSecretOut summary);
    void getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpointStats summary);
    void getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetSignalFull(OAIHttpRequestWorker *worker, OAIEndpointTransformationOut summary);
    void listEndpointsApiV1AppAppIdEndpointGetSignalFull(OAIHttpRequestWorker *worker, OAIListResponse_EndpointOut_ summary);
    void patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchSignalFull(OAIHttpRequestWorker *worker);
    void recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostSignalFull(OAIHttpRequestWorker *worker, OAIRecoverOut summary);
    void replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostSignalFull(OAIHttpRequestWorker *worker, OAIReplayOut summary);
    void rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostSignalFull(OAIHttpRequestWorker *worker);
    void sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostSignalFull(OAIHttpRequestWorker *worker, OAIMessageOut summary);
    void setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchSignalFull(OAIHttpRequestWorker *worker);
    void updateEndpointApiV1AppAppIdEndpointEndpointIdPutSignalFull(OAIHttpRequestWorker *worker, OAIEndpointOut summary);
    void updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createEndpointApiV1AppAppIdEndpointPostSignalError() instead")
    void createEndpointApiV1AppAppIdEndpointPostSignalE(OAIEndpointOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEndpointApiV1AppAppIdEndpointPostSignalError(OAIEndpointOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteSignalError() instead")
    void deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEndpointApiV1AppAppIdEndpointEndpointIdGetSignalError() instead")
    void getEndpointApiV1AppAppIdEndpointEndpointIdGetSignalE(OAIEndpointOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointApiV1AppAppIdEndpointEndpointIdGetSignalError(OAIEndpointOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetSignalError() instead")
    void getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetSignalE(OAIEndpointHeadersOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetSignalError(OAIEndpointHeadersOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetSignalError() instead")
    void getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetSignalE(OAIEndpointSecretOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetSignalError(OAIEndpointSecretOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetSignalError() instead")
    void getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetSignalE(OAIEndpointStats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetSignalError(OAIEndpointStats summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetSignalError() instead")
    void getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetSignalE(OAIEndpointTransformationOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetSignalError(OAIEndpointTransformationOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEndpointsApiV1AppAppIdEndpointGetSignalError() instead")
    void listEndpointsApiV1AppAppIdEndpointGetSignalE(OAIListResponse_EndpointOut_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEndpointsApiV1AppAppIdEndpointGetSignalError(OAIListResponse_EndpointOut_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchSignalError() instead")
    void patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostSignalError() instead")
    void recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostSignalE(OAIRecoverOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostSignalError(OAIRecoverOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostSignalError() instead")
    void replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostSignalE(OAIReplayOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostSignalError(OAIReplayOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostSignalError() instead")
    void rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostSignalError() instead")
    void sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostSignalE(OAIMessageOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostSignalError(OAIMessageOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchSignalError() instead")
    void setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEndpointApiV1AppAppIdEndpointEndpointIdPutSignalError() instead")
    void updateEndpointApiV1AppAppIdEndpointEndpointIdPutSignalE(OAIEndpointOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEndpointApiV1AppAppIdEndpointEndpointIdPutSignalError(OAIEndpointOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutSignalError() instead")
    void updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createEndpointApiV1AppAppIdEndpointPostSignalErrorFull() instead")
    void createEndpointApiV1AppAppIdEndpointPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEndpointApiV1AppAppIdEndpointPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteSignalErrorFull() instead")
    void deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEndpointApiV1AppAppIdEndpointEndpointIdGetSignalErrorFull() instead")
    void getEndpointApiV1AppAppIdEndpointEndpointIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointApiV1AppAppIdEndpointEndpointIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetSignalErrorFull() instead")
    void getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetSignalErrorFull() instead")
    void getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetSignalErrorFull() instead")
    void getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetSignalErrorFull() instead")
    void getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEndpointsApiV1AppAppIdEndpointGetSignalErrorFull() instead")
    void listEndpointsApiV1AppAppIdEndpointGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEndpointsApiV1AppAppIdEndpointGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchSignalErrorFull() instead")
    void patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostSignalErrorFull() instead")
    void recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostSignalErrorFull() instead")
    void replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostSignalErrorFull() instead")
    void rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostSignalErrorFull() instead")
    void sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchSignalErrorFull() instead")
    void setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEndpointApiV1AppAppIdEndpointEndpointIdPutSignalErrorFull() instead")
    void updateEndpointApiV1AppAppIdEndpointEndpointIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEndpointApiV1AppAppIdEndpointEndpointIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutSignalErrorFull() instead")
    void updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
