/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIEndpointApi::OAIEndpointApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIEndpointApi::~OAIEndpointApi() {
}

void OAIEndpointApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createEndpointApiV1AppAppIdEndpointPost", defaultConf);
    _serverIndices.insert("createEndpointApiV1AppAppIdEndpointPost", 0);
    _serverConfigs.insert("deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete", defaultConf);
    _serverIndices.insert("deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete", 0);
    _serverConfigs.insert("getEndpointApiV1AppAppIdEndpointEndpointIdGet", defaultConf);
    _serverIndices.insert("getEndpointApiV1AppAppIdEndpointEndpointIdGet", 0);
    _serverConfigs.insert("getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet", defaultConf);
    _serverIndices.insert("getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet", 0);
    _serverConfigs.insert("getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet", defaultConf);
    _serverIndices.insert("getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet", 0);
    _serverConfigs.insert("getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet", defaultConf);
    _serverIndices.insert("getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet", 0);
    _serverConfigs.insert("getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet", defaultConf);
    _serverIndices.insert("getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet", 0);
    _serverConfigs.insert("listEndpointsApiV1AppAppIdEndpointGet", defaultConf);
    _serverIndices.insert("listEndpointsApiV1AppAppIdEndpointGet", 0);
    _serverConfigs.insert("patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch", defaultConf);
    _serverIndices.insert("patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch", 0);
    _serverConfigs.insert("recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost", defaultConf);
    _serverIndices.insert("recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost", 0);
    _serverConfigs.insert("replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost", defaultConf);
    _serverIndices.insert("replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost", 0);
    _serverConfigs.insert("rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost", defaultConf);
    _serverIndices.insert("rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost", 0);
    _serverConfigs.insert("sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost", defaultConf);
    _serverIndices.insert("sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost", 0);
    _serverConfigs.insert("setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch", defaultConf);
    _serverIndices.insert("setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch", 0);
    _serverConfigs.insert("updateEndpointApiV1AppAppIdEndpointEndpointIdPut", defaultConf);
    _serverIndices.insert("updateEndpointApiV1AppAppIdEndpointEndpointIdPut", 0);
    _serverConfigs.insert("updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut", defaultConf);
    _serverIndices.insert("updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIEndpointApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIEndpointApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIEndpointApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIEndpointApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIEndpointApi::setUsername(const QString &username) {
    _username = username;
}

void OAIEndpointApi::setPassword(const QString &password) {
    _password = password;
}


void OAIEndpointApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIEndpointApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIEndpointApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIEndpointApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEndpointApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEndpointApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIEndpointApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIEndpointApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIEndpointApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIEndpointApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIEndpointApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIEndpointApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIEndpointApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIEndpointApi::createEndpointApiV1AppAppIdEndpointPost(const QString &app_id, const OAIEndpointIn &oai_endpoint_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["createEndpointApiV1AppAppIdEndpointPost"][_serverIndices.value("createEndpointApiV1AppAppIdEndpointPost")].URL()+"/api/v1/app/{app_id}/endpoint/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_endpoint_in.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::createEndpointApiV1AppAppIdEndpointPostCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::createEndpointApiV1AppAppIdEndpointPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpointOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createEndpointApiV1AppAppIdEndpointPostSignal(output);
        Q_EMIT createEndpointApiV1AppAppIdEndpointPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createEndpointApiV1AppAppIdEndpointPostSignalE(output, error_type, error_str);
        Q_EMIT createEndpointApiV1AppAppIdEndpointPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createEndpointApiV1AppAppIdEndpointPostSignalError(output, error_type, error_str);
        Q_EMIT createEndpointApiV1AppAppIdEndpointPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(const QString &endpoint_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete"][_serverIndices.value("deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete")].URL()+"/api/v1/app/{app_id}/endpoint/{endpoint_id}/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString endpoint_idPathParam("{");
        endpoint_idPathParam.append("endpoint_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "endpoint_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"endpoint_id"+pathSuffix : pathPrefix;
        fullPath.replace(endpoint_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(endpoint_id)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteSignal();
        Q_EMIT deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteSignalE(error_type, error_str);
        Q_EMIT deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteSignalError(error_type, error_str);
        Q_EMIT deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::getEndpointApiV1AppAppIdEndpointEndpointIdGet(const QString &endpoint_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["getEndpointApiV1AppAppIdEndpointEndpointIdGet"][_serverIndices.value("getEndpointApiV1AppAppIdEndpointEndpointIdGet")].URL()+"/api/v1/app/{app_id}/endpoint/{endpoint_id}/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString endpoint_idPathParam("{");
        endpoint_idPathParam.append("endpoint_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "endpoint_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"endpoint_id"+pathSuffix : pathPrefix;
        fullPath.replace(endpoint_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(endpoint_id)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::getEndpointApiV1AppAppIdEndpointEndpointIdGetCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::getEndpointApiV1AppAppIdEndpointEndpointIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpointOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEndpointApiV1AppAppIdEndpointEndpointIdGetSignal(output);
        Q_EMIT getEndpointApiV1AppAppIdEndpointEndpointIdGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEndpointApiV1AppAppIdEndpointEndpointIdGetSignalE(output, error_type, error_str);
        Q_EMIT getEndpointApiV1AppAppIdEndpointEndpointIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEndpointApiV1AppAppIdEndpointEndpointIdGetSignalError(output, error_type, error_str);
        Q_EMIT getEndpointApiV1AppAppIdEndpointEndpointIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet(const QString &endpoint_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet"][_serverIndices.value("getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet")].URL()+"/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString endpoint_idPathParam("{");
        endpoint_idPathParam.append("endpoint_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "endpoint_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"endpoint_id"+pathSuffix : pathPrefix;
        fullPath.replace(endpoint_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(endpoint_id)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpointHeadersOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetSignal(output);
        Q_EMIT getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetSignalE(output, error_type, error_str);
        Q_EMIT getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetSignalError(output, error_type, error_str);
        Q_EMIT getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(const QString &endpoint_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet"][_serverIndices.value("getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet")].URL()+"/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString endpoint_idPathParam("{");
        endpoint_idPathParam.append("endpoint_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "endpoint_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"endpoint_id"+pathSuffix : pathPrefix;
        fullPath.replace(endpoint_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(endpoint_id)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpointSecretOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetSignal(output);
        Q_EMIT getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetSignalE(output, error_type, error_str);
        Q_EMIT getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetSignalError(output, error_type, error_str);
        Q_EMIT getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(const QString &endpoint_id, const QString &app_id, const ::OpenAPI::OptionalParam<QDateTime> &since, const ::OpenAPI::OptionalParam<QDateTime> &until, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet"][_serverIndices.value("getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet")].URL()+"/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString endpoint_idPathParam("{");
        endpoint_idPathParam.append("endpoint_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "endpoint_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"endpoint_id"+pathSuffix : pathPrefix;
        fullPath.replace(endpoint_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(endpoint_id)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (since.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "since", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("since")).append(querySuffix).append(QUrl::toPercentEncoding(since.stringValue()));
    }
    if (until.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "until", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("until")).append(querySuffix).append(QUrl::toPercentEncoding(until.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpointStats output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetSignal(output);
        Q_EMIT getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetSignalE(output, error_type, error_str);
        Q_EMIT getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetSignalError(output, error_type, error_str);
        Q_EMIT getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet(const QString &endpoint_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet"][_serverIndices.value("getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet")].URL()+"/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString endpoint_idPathParam("{");
        endpoint_idPathParam.append("endpoint_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "endpoint_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"endpoint_id"+pathSuffix : pathPrefix;
        fullPath.replace(endpoint_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(endpoint_id)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpointTransformationOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetSignal(output);
        Q_EMIT getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetSignalE(output, error_type, error_str);
        Q_EMIT getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetSignalError(output, error_type, error_str);
        Q_EMIT getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::listEndpointsApiV1AppAppIdEndpointGet(const QString &app_id, const ::OpenAPI::OptionalParam<QString> &iterator, const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<OAIOrdering> &order, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["listEndpointsApiV1AppAppIdEndpointGet"][_serverIndices.value("listEndpointsApiV1AppAppIdEndpointGet")].URL()+"/api/v1/app/{app_id}/endpoint/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (iterator.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "iterator", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("iterator")).append(querySuffix).append(QUrl::toPercentEncoding(iterator.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (order.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "order", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");
        QString paramString = (queryStyle == "form" && true) ? "" : (queryStyle == "form" && !(true)) ? "order"+querySuffix : "";
        QJsonObject parameter = order.value().asJsonObject();
        qint32 count = 0;
        for(const QString& key : parameter.keys()) {
            if (count > 0) {
                queryDelimiter =  ((queryStyle == "form" || queryStyle == "deepObject") && true) ? "&" : getParamStyleDelimiter(queryStyle, key, true);
                paramString.append(queryDelimiter);
            }
            QString assignOperator;
            if (queryStyle == "form")
                assignOperator = (true) ? "=" : ",";
            else if (queryStyle == "deepObject")
                assignOperator = (true) ? "=" : "none";
            switch(parameter.value(key).type()) {
                case QJsonValue::String:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("order").append("[").append(key).append("]"))+assignOperator+parameter.value(key).toString());
                    break;
                }
                case QJsonValue::Double:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("order").append("[").append(key).append("]"))+assignOperator+QString::number(parameter.value(key).toDouble()));
                    break;
                }
                case QJsonValue::Bool:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("order").append("[").append(key).append("]"))+assignOperator+QVariant(parameter.value(key).toBool()).toString());
                    break;
                }
                case QJsonValue::Array:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("order").append("[").append(key).append("]"))+assignOperator+QVariant(parameter.value(key).toArray()).toString());
                    break;
                }
                case QJsonValue::Object:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("order").append("[").append(key).append("]"))+assignOperator+QVariant(parameter.value(key).toObject()).toString());
                    break;
                }
                case QJsonValue::Null:
                case QJsonValue::Undefined:
                    break;
            }
            count++;
        }
        fullPath.append(paramString);
            }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::listEndpointsApiV1AppAppIdEndpointGetCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::listEndpointsApiV1AppAppIdEndpointGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListResponse_EndpointOut_ output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listEndpointsApiV1AppAppIdEndpointGetSignal(output);
        Q_EMIT listEndpointsApiV1AppAppIdEndpointGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listEndpointsApiV1AppAppIdEndpointGetSignalE(output, error_type, error_str);
        Q_EMIT listEndpointsApiV1AppAppIdEndpointGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listEndpointsApiV1AppAppIdEndpointGetSignalError(output, error_type, error_str);
        Q_EMIT listEndpointsApiV1AppAppIdEndpointGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch(const QString &app_id, const QString &endpoint_id, const OAIEndpointHeadersPatchIn &oai_endpoint_headers_patch_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch"][_serverIndices.value("patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch")].URL()+"/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString endpoint_idPathParam("{");
        endpoint_idPathParam.append("endpoint_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "endpoint_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"endpoint_id"+pathSuffix : pathPrefix;
        fullPath.replace(endpoint_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(endpoint_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_endpoint_headers_patch_in.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchSignal();
        Q_EMIT patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchSignalE(error_type, error_str);
        Q_EMIT patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchSignalError(error_type, error_str);
        Q_EMIT patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost(const QString &app_id, const QString &endpoint_id, const OAIRecoverIn &oai_recover_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost"][_serverIndices.value("recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost")].URL()+"/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString endpoint_idPathParam("{");
        endpoint_idPathParam.append("endpoint_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "endpoint_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"endpoint_id"+pathSuffix : pathPrefix;
        fullPath.replace(endpoint_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(endpoint_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_recover_in.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRecoverOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostSignal(output);
        Q_EMIT recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostSignalE(output, error_type, error_str);
        Q_EMIT recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostSignalError(output, error_type, error_str);
        Q_EMIT recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost(const QString &app_id, const QString &endpoint_id, const OAIReplayIn &oai_replay_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost"][_serverIndices.value("replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost")].URL()+"/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString endpoint_idPathParam("{");
        endpoint_idPathParam.append("endpoint_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "endpoint_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"endpoint_id"+pathSuffix : pathPrefix;
        fullPath.replace(endpoint_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(endpoint_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_replay_in.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIReplayOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostSignal(output);
        Q_EMIT replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostSignalE(output, error_type, error_str);
        Q_EMIT replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostSignalError(output, error_type, error_str);
        Q_EMIT replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost(const QString &endpoint_id, const QString &app_id, const OAIEndpointSecretRotateIn &oai_endpoint_secret_rotate_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost"][_serverIndices.value("rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost")].URL()+"/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString endpoint_idPathParam("{");
        endpoint_idPathParam.append("endpoint_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "endpoint_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"endpoint_id"+pathSuffix : pathPrefix;
        fullPath.replace(endpoint_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(endpoint_id)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_endpoint_secret_rotate_in.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostSignal();
        Q_EMIT rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostSignalE(error_type, error_str);
        Q_EMIT rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostSignalError(error_type, error_str);
        Q_EMIT rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost(const QString &app_id, const QString &endpoint_id, const OAIEventExampleIn &oai_event_example_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost"][_serverIndices.value("sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost")].URL()+"/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString endpoint_idPathParam("{");
        endpoint_idPathParam.append("endpoint_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "endpoint_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"endpoint_id"+pathSuffix : pathPrefix;
        fullPath.replace(endpoint_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(endpoint_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_event_example_in.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIMessageOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostSignal(output);
        Q_EMIT sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostSignalE(output, error_type, error_str);
        Q_EMIT sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostSignalError(output, error_type, error_str);
        Q_EMIT sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch(const QString &app_id, const QString &endpoint_id, const OAIEndpointTransformationIn &oai_endpoint_transformation_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch"][_serverIndices.value("setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch")].URL()+"/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString endpoint_idPathParam("{");
        endpoint_idPathParam.append("endpoint_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "endpoint_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"endpoint_id"+pathSuffix : pathPrefix;
        fullPath.replace(endpoint_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(endpoint_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_endpoint_transformation_in.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchSignal();
        Q_EMIT setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchSignalE(error_type, error_str);
        Q_EMIT setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchSignalError(error_type, error_str);
        Q_EMIT setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::updateEndpointApiV1AppAppIdEndpointEndpointIdPut(const QString &endpoint_id, const QString &app_id, const OAIEndpointUpdate &oai_endpoint_update, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["updateEndpointApiV1AppAppIdEndpointEndpointIdPut"][_serverIndices.value("updateEndpointApiV1AppAppIdEndpointEndpointIdPut")].URL()+"/api/v1/app/{app_id}/endpoint/{endpoint_id}/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString endpoint_idPathParam("{");
        endpoint_idPathParam.append("endpoint_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "endpoint_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"endpoint_id"+pathSuffix : pathPrefix;
        fullPath.replace(endpoint_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(endpoint_id)));
    }
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_endpoint_update.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::updateEndpointApiV1AppAppIdEndpointEndpointIdPutCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::updateEndpointApiV1AppAppIdEndpointEndpointIdPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEndpointOut output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateEndpointApiV1AppAppIdEndpointEndpointIdPutSignal(output);
        Q_EMIT updateEndpointApiV1AppAppIdEndpointEndpointIdPutSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateEndpointApiV1AppAppIdEndpointEndpointIdPutSignalE(output, error_type, error_str);
        Q_EMIT updateEndpointApiV1AppAppIdEndpointEndpointIdPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateEndpointApiV1AppAppIdEndpointEndpointIdPutSignalError(output, error_type, error_str);
        Q_EMIT updateEndpointApiV1AppAppIdEndpointEndpointIdPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut(const QString &app_id, const QString &endpoint_id, const OAIEndpointHeadersIn &oai_endpoint_headers_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key) {
    QString fullPath = QString(_serverConfigs["updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut"][_serverIndices.value("updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut")].URL()+"/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString app_idPathParam("{");
        app_idPathParam.append("app_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_id"+pathSuffix : pathPrefix;
        fullPath.replace(app_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_id)));
    }
    
    {
        QString endpoint_idPathParam("{");
        endpoint_idPathParam.append("endpoint_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "endpoint_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"endpoint_id"+pathSuffix : pathPrefix;
        fullPath.replace(endpoint_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(endpoint_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_endpoint_headers_in.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (idempotency_key.hasValue())
    {
        if (!::OpenAPI::toStringValue(idempotency_key.value()).isEmpty()) {
            input.headers.insert("idempotency-key", ::OpenAPI::toStringValue(idempotency_key.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEndpointApi::updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutCallback);
    connect(this, &OAIEndpointApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEndpointApi::updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutSignal();
        Q_EMIT updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutSignalE(error_type, error_str);
        Q_EMIT updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutSignalError(error_type, error_str);
        Q_EMIT updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEndpointApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
