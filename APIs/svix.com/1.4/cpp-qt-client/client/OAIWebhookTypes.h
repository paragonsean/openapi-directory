/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWebhookTypes.h
 *
 * All of the webhook types that we support
 */

#ifndef OAIWebhookTypes_H
#define OAIWebhookTypes_H

#include <QJsonObject>

#include "OAIBackgroundTaskFinishedEvent.h"
#include "OAIEndpointCreatedEvent.h"
#include "OAIEndpointDeletedEvent.h"
#include "OAIEndpointDisabledEvent.h"
#include "OAIEndpointUpdatedEvent.h"
#include "OAIMessageAttemptExhaustedEvent.h"
#include "OAIMessageAttemptFailingEvent.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEndpointDisabledEvent;
class OAIMessageAttemptFailingEvent;
class OAIBackgroundTaskFinishedEvent;
class OAIEndpointCreatedEvent;
class OAIEndpointUpdatedEvent;
class OAIEndpointDeletedEvent;
class OAIMessageAttemptExhaustedEvent;

class OAIWebhookTypes : public OAIObject {
public:
    OAIWebhookTypes();
    OAIWebhookTypes(QString json);
    ~OAIWebhookTypes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEndpointDisabledEvent getA() const;
    void setA(const OAIEndpointDisabledEvent &a);
    bool is_a_Set() const;
    bool is_a_Valid() const;

    OAIMessageAttemptFailingEvent getA1() const;
    void setA1(const OAIMessageAttemptFailingEvent &a1);
    bool is_a1_Set() const;
    bool is_a1_Valid() const;

    OAIBackgroundTaskFinishedEvent getA2() const;
    void setA2(const OAIBackgroundTaskFinishedEvent &a2);
    bool is_a2_Set() const;
    bool is_a2_Valid() const;

    OAIEndpointCreatedEvent getB() const;
    void setB(const OAIEndpointCreatedEvent &b);
    bool is_b_Set() const;
    bool is_b_Valid() const;

    OAIEndpointUpdatedEvent getC() const;
    void setC(const OAIEndpointUpdatedEvent &c);
    bool is_c_Set() const;
    bool is_c_Valid() const;

    OAIEndpointDeletedEvent getD() const;
    void setD(const OAIEndpointDeletedEvent &d);
    bool is_d_Set() const;
    bool is_d_Valid() const;

    OAIMessageAttemptExhaustedEvent getE() const;
    void setE(const OAIMessageAttemptExhaustedEvent &e);
    bool is_e_Set() const;
    bool is_e_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEndpointDisabledEvent m_a;
    bool m_a_isSet;
    bool m_a_isValid;

    OAIMessageAttemptFailingEvent m_a1;
    bool m_a1_isSet;
    bool m_a1_isValid;

    OAIBackgroundTaskFinishedEvent m_a2;
    bool m_a2_isSet;
    bool m_a2_isValid;

    OAIEndpointCreatedEvent m_b;
    bool m_b_isSet;
    bool m_b_isValid;

    OAIEndpointUpdatedEvent m_c;
    bool m_c_isSet;
    bool m_c_isValid;

    OAIEndpointDeletedEvent m_d;
    bool m_d_isSet;
    bool m_d_isValid;

    OAIMessageAttemptExhaustedEvent m_e;
    bool m_e_isSet;
    bool m_e_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWebhookTypes)

#endif // OAIWebhookTypes_H
