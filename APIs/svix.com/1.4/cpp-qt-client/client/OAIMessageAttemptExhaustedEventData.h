/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMessageAttemptExhaustedEventData.h
 *
 * 
 */

#ifndef OAIMessageAttemptExhaustedEventData_H
#define OAIMessageAttemptExhaustedEventData_H

#include <QJsonObject>

#include "OAIMessageAttemptFailedData.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMessageAttemptFailedData;

class OAIMessageAttemptExhaustedEventData : public OAIObject {
public:
    OAIMessageAttemptExhaustedEventData();
    OAIMessageAttemptExhaustedEventData(QString json);
    ~OAIMessageAttemptExhaustedEventData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAppId() const;
    void setAppId(const QString &app_id);
    bool is_app_id_Set() const;
    bool is_app_id_Valid() const;

    QString getAppUid() const;
    void setAppUid(const QString &app_uid);
    bool is_app_uid_Set() const;
    bool is_app_uid_Valid() const;

    QString getEndpointId() const;
    void setEndpointId(const QString &endpoint_id);
    bool is_endpoint_id_Set() const;
    bool is_endpoint_id_Valid() const;

    OAIMessageAttemptFailedData getLastAttempt() const;
    void setLastAttempt(const OAIMessageAttemptFailedData &last_attempt);
    bool is_last_attempt_Set() const;
    bool is_last_attempt_Valid() const;

    QString getMsgEventId() const;
    void setMsgEventId(const QString &msg_event_id);
    bool is_msg_event_id_Set() const;
    bool is_msg_event_id_Valid() const;

    QString getMsgId() const;
    void setMsgId(const QString &msg_id);
    bool is_msg_id_Set() const;
    bool is_msg_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_app_id;
    bool m_app_id_isSet;
    bool m_app_id_isValid;

    QString m_app_uid;
    bool m_app_uid_isSet;
    bool m_app_uid_isValid;

    QString m_endpoint_id;
    bool m_endpoint_id_isSet;
    bool m_endpoint_id_isValid;

    OAIMessageAttemptFailedData m_last_attempt;
    bool m_last_attempt_isSet;
    bool m_last_attempt_isValid;

    QString m_msg_event_id;
    bool m_msg_event_id_isSet;
    bool m_msg_event_id_isValid;

    QString m_msg_id;
    bool m_msg_id_isSet;
    bool m_msg_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMessageAttemptExhaustedEventData)

#endif // OAIMessageAttemptExhaustedEventData_H
