/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIntegrationApi_H
#define OAI_OAIIntegrationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPValidationError.h"
#include "OAIHttpErrorOut.h"
#include "OAIIntegrationIn.h"
#include "OAIIntegrationKeyOut.h"
#include "OAIIntegrationOut.h"
#include "OAIIntegrationUpdate.h"
#include "OAIListResponse_IntegrationOut_.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIntegrationApi : public QObject {
    Q_OBJECT

public:
    OAIIntegrationApi(const int timeOut = 0);
    ~OAIIntegrationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_integration_in OAIIntegrationIn [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void createIntegrationApiV1AppAppIdIntegrationPost(const QString &app_id, const OAIIntegrationIn &oai_integration_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  integ_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void deleteIntegrationApiV1AppAppIdIntegrationIntegIdDelete(const QString &integ_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  integ_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void getIntegrationApiV1AppAppIdIntegrationIntegIdGet(const QString &integ_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  integ_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGet(const QString &integ_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  iterator QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void listIntegrationsApiV1AppAppIdIntegrationGet(const QString &app_id, const ::OpenAPI::OptionalParam<QString> &iterator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  integ_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePost(const QString &integ_id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  integ_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_integration_update OAIIntegrationUpdate [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void updateIntegrationApiV1AppAppIdIntegrationIntegIdPut(const QString &integ_id, const QString &app_id, const OAIIntegrationUpdate &oai_integration_update, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createIntegrationApiV1AppAppIdIntegrationPostCallback(OAIHttpRequestWorker *worker);
    void deleteIntegrationApiV1AppAppIdIntegrationIntegIdDeleteCallback(OAIHttpRequestWorker *worker);
    void getIntegrationApiV1AppAppIdIntegrationIntegIdGetCallback(OAIHttpRequestWorker *worker);
    void getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGetCallback(OAIHttpRequestWorker *worker);
    void listIntegrationsApiV1AppAppIdIntegrationGetCallback(OAIHttpRequestWorker *worker);
    void rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePostCallback(OAIHttpRequestWorker *worker);
    void updateIntegrationApiV1AppAppIdIntegrationIntegIdPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createIntegrationApiV1AppAppIdIntegrationPostSignal(OAIIntegrationOut summary);
    void deleteIntegrationApiV1AppAppIdIntegrationIntegIdDeleteSignal();
    void getIntegrationApiV1AppAppIdIntegrationIntegIdGetSignal(OAIIntegrationOut summary);
    void getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGetSignal(OAIIntegrationKeyOut summary);
    void listIntegrationsApiV1AppAppIdIntegrationGetSignal(OAIListResponse_IntegrationOut_ summary);
    void rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePostSignal(OAIIntegrationKeyOut summary);
    void updateIntegrationApiV1AppAppIdIntegrationIntegIdPutSignal(OAIIntegrationOut summary);


    void createIntegrationApiV1AppAppIdIntegrationPostSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationOut summary);
    void deleteIntegrationApiV1AppAppIdIntegrationIntegIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void getIntegrationApiV1AppAppIdIntegrationIntegIdGetSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationOut summary);
    void getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationKeyOut summary);
    void listIntegrationsApiV1AppAppIdIntegrationGetSignalFull(OAIHttpRequestWorker *worker, OAIListResponse_IntegrationOut_ summary);
    void rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePostSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationKeyOut summary);
    void updateIntegrationApiV1AppAppIdIntegrationIntegIdPutSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationOut summary);

    Q_DECL_DEPRECATED_X("Use createIntegrationApiV1AppAppIdIntegrationPostSignalError() instead")
    void createIntegrationApiV1AppAppIdIntegrationPostSignalE(OAIIntegrationOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIntegrationApiV1AppAppIdIntegrationPostSignalError(OAIIntegrationOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIntegrationApiV1AppAppIdIntegrationIntegIdDeleteSignalError() instead")
    void deleteIntegrationApiV1AppAppIdIntegrationIntegIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIntegrationApiV1AppAppIdIntegrationIntegIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIntegrationApiV1AppAppIdIntegrationIntegIdGetSignalError() instead")
    void getIntegrationApiV1AppAppIdIntegrationIntegIdGetSignalE(OAIIntegrationOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIntegrationApiV1AppAppIdIntegrationIntegIdGetSignalError(OAIIntegrationOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGetSignalError() instead")
    void getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGetSignalE(OAIIntegrationKeyOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGetSignalError(OAIIntegrationKeyOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIntegrationsApiV1AppAppIdIntegrationGetSignalError() instead")
    void listIntegrationsApiV1AppAppIdIntegrationGetSignalE(OAIListResponse_IntegrationOut_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIntegrationsApiV1AppAppIdIntegrationGetSignalError(OAIListResponse_IntegrationOut_ summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePostSignalError() instead")
    void rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePostSignalE(OAIIntegrationKeyOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePostSignalError(OAIIntegrationKeyOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIntegrationApiV1AppAppIdIntegrationIntegIdPutSignalError() instead")
    void updateIntegrationApiV1AppAppIdIntegrationIntegIdPutSignalE(OAIIntegrationOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIntegrationApiV1AppAppIdIntegrationIntegIdPutSignalError(OAIIntegrationOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createIntegrationApiV1AppAppIdIntegrationPostSignalErrorFull() instead")
    void createIntegrationApiV1AppAppIdIntegrationPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIntegrationApiV1AppAppIdIntegrationPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIntegrationApiV1AppAppIdIntegrationIntegIdDeleteSignalErrorFull() instead")
    void deleteIntegrationApiV1AppAppIdIntegrationIntegIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIntegrationApiV1AppAppIdIntegrationIntegIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIntegrationApiV1AppAppIdIntegrationIntegIdGetSignalErrorFull() instead")
    void getIntegrationApiV1AppAppIdIntegrationIntegIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIntegrationApiV1AppAppIdIntegrationIntegIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGetSignalErrorFull() instead")
    void getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIntegrationsApiV1AppAppIdIntegrationGetSignalErrorFull() instead")
    void listIntegrationsApiV1AppAppIdIntegrationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIntegrationsApiV1AppAppIdIntegrationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePostSignalErrorFull() instead")
    void rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateIntegrationApiV1AppAppIdIntegrationIntegIdPutSignalErrorFull() instead")
    void updateIntegrationApiV1AppAppIdIntegrationIntegIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateIntegrationApiV1AppAppIdIntegrationIntegIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
