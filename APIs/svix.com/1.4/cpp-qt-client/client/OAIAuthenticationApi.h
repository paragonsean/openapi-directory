/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthenticationApi_H
#define OAI_OAIAuthenticationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppPortalAccessIn.h"
#include "OAIAppPortalAccessOut.h"
#include "OAIApplicationTokenExpireIn.h"
#include "OAIDashboardAccessOut.h"
#include "OAIHTTPValidationError.h"
#include "OAIHttpErrorOut.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthenticationApi : public QObject {
    Q_OBJECT

public:
    OAIAuthenticationApi(const int timeOut = 0);
    ~OAIAuthenticationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_application_token_expire_in OAIApplicationTokenExpireIn [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void expireAllApiV1AuthAppAppIdExpireAllPost(const QString &app_id, const OAIApplicationTokenExpireIn &oai_application_token_expire_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_app_portal_access_in OAIAppPortalAccessIn [required]
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void getAppPortalAccessApiV1AuthAppPortalAccessAppIdPost(const QString &app_id, const OAIAppPortalAccessIn &oai_app_portal_access_in, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  idempotency_key QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getDashboardAccessApiV1AuthDashboardAccessAppIdPost(const QString &app_id, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  idempotency_key QString [optional]
    */
    virtual void logoutApiV1AuthLogoutPost(const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void expireAllApiV1AuthAppAppIdExpireAllPostCallback(OAIHttpRequestWorker *worker);
    void getAppPortalAccessApiV1AuthAppPortalAccessAppIdPostCallback(OAIHttpRequestWorker *worker);
    void getDashboardAccessApiV1AuthDashboardAccessAppIdPostCallback(OAIHttpRequestWorker *worker);
    void logoutApiV1AuthLogoutPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void expireAllApiV1AuthAppAppIdExpireAllPostSignal();
    void getAppPortalAccessApiV1AuthAppPortalAccessAppIdPostSignal(OAIAppPortalAccessOut summary);
    void getDashboardAccessApiV1AuthDashboardAccessAppIdPostSignal(OAIDashboardAccessOut summary);
    void logoutApiV1AuthLogoutPostSignal();


    void expireAllApiV1AuthAppAppIdExpireAllPostSignalFull(OAIHttpRequestWorker *worker);
    void getAppPortalAccessApiV1AuthAppPortalAccessAppIdPostSignalFull(OAIHttpRequestWorker *worker, OAIAppPortalAccessOut summary);
    void getDashboardAccessApiV1AuthDashboardAccessAppIdPostSignalFull(OAIHttpRequestWorker *worker, OAIDashboardAccessOut summary);
    void logoutApiV1AuthLogoutPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use expireAllApiV1AuthAppAppIdExpireAllPostSignalError() instead")
    void expireAllApiV1AuthAppAppIdExpireAllPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void expireAllApiV1AuthAppAppIdExpireAllPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppPortalAccessApiV1AuthAppPortalAccessAppIdPostSignalError() instead")
    void getAppPortalAccessApiV1AuthAppPortalAccessAppIdPostSignalE(OAIAppPortalAccessOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppPortalAccessApiV1AuthAppPortalAccessAppIdPostSignalError(OAIAppPortalAccessOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardAccessApiV1AuthDashboardAccessAppIdPostSignalError() instead")
    void getDashboardAccessApiV1AuthDashboardAccessAppIdPostSignalE(OAIDashboardAccessOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardAccessApiV1AuthDashboardAccessAppIdPostSignalError(OAIDashboardAccessOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutApiV1AuthLogoutPostSignalError() instead")
    void logoutApiV1AuthLogoutPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logoutApiV1AuthLogoutPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use expireAllApiV1AuthAppAppIdExpireAllPostSignalErrorFull() instead")
    void expireAllApiV1AuthAppAppIdExpireAllPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expireAllApiV1AuthAppAppIdExpireAllPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppPortalAccessApiV1AuthAppPortalAccessAppIdPostSignalErrorFull() instead")
    void getAppPortalAccessApiV1AuthAppPortalAccessAppIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppPortalAccessApiV1AuthAppPortalAccessAppIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDashboardAccessApiV1AuthDashboardAccessAppIdPostSignalErrorFull() instead")
    void getDashboardAccessApiV1AuthDashboardAccessAppIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDashboardAccessApiV1AuthDashboardAccessAppIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutApiV1AuthLogoutPostSignalErrorFull() instead")
    void logoutApiV1AuthLogoutPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutApiV1AuthLogoutPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
