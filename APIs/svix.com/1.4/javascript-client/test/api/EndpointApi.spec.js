/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SvixApi);
  }
}(this, function(expect, SvixApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SvixApi.EndpointApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EndpointApi', function() {
    describe('createEndpointApiV1AppAppIdEndpointPost', function() {
      it('should call createEndpointApiV1AppAppIdEndpointPost successfully', function(done) {
        //uncomment below and update the code to test createEndpointApiV1AppAppIdEndpointPost
        //instance.createEndpointApiV1AppAppIdEndpointPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete', function() {
      it('should call deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete successfully', function(done) {
        //uncomment below and update the code to test deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete
        //instance.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEndpointApiV1AppAppIdEndpointEndpointIdGet', function() {
      it('should call getEndpointApiV1AppAppIdEndpointEndpointIdGet successfully', function(done) {
        //uncomment below and update the code to test getEndpointApiV1AppAppIdEndpointEndpointIdGet
        //instance.getEndpointApiV1AppAppIdEndpointEndpointIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet', function() {
      it('should call getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet successfully', function(done) {
        //uncomment below and update the code to test getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet
        //instance.getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet', function() {
      it('should call getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet successfully', function(done) {
        //uncomment below and update the code to test getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet
        //instance.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet', function() {
      it('should call getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet successfully', function(done) {
        //uncomment below and update the code to test getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet
        //instance.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet', function() {
      it('should call getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet successfully', function(done) {
        //uncomment below and update the code to test getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet
        //instance.getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEndpointsApiV1AppAppIdEndpointGet', function() {
      it('should call listEndpointsApiV1AppAppIdEndpointGet successfully', function(done) {
        //uncomment below and update the code to test listEndpointsApiV1AppAppIdEndpointGet
        //instance.listEndpointsApiV1AppAppIdEndpointGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch', function() {
      it('should call patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch successfully', function(done) {
        //uncomment below and update the code to test patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch
        //instance.patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost', function() {
      it('should call recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost successfully', function(done) {
        //uncomment below and update the code to test recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost
        //instance.recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost', function() {
      it('should call replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost successfully', function(done) {
        //uncomment below and update the code to test replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost
        //instance.replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost', function() {
      it('should call rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost successfully', function(done) {
        //uncomment below and update the code to test rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost
        //instance.rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost', function() {
      it('should call sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost successfully', function(done) {
        //uncomment below and update the code to test sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost
        //instance.sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch', function() {
      it('should call setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch successfully', function(done) {
        //uncomment below and update the code to test setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch
        //instance.setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEndpointApiV1AppAppIdEndpointEndpointIdPut', function() {
      it('should call updateEndpointApiV1AppAppIdEndpointEndpointIdPut successfully', function(done) {
        //uncomment below and update the code to test updateEndpointApiV1AppAppIdEndpointEndpointIdPut
        //instance.updateEndpointApiV1AppAppIdEndpointEndpointIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut', function() {
      it('should call updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut successfully', function(done) {
        //uncomment below and update the code to test updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut
        //instance.updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
