/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BackgroundTaskOut from './BackgroundTaskOut';

/**
 * The ListResponseBackgroundTaskOut model module.
 * @module model/ListResponseBackgroundTaskOut
 * @version 1.4
 */
class ListResponseBackgroundTaskOut {
    /**
     * Constructs a new <code>ListResponseBackgroundTaskOut</code>.
     * @alias module:model/ListResponseBackgroundTaskOut
     * @param data {Array.<module:model/BackgroundTaskOut>} 
     * @param done {Boolean} 
     */
    constructor(data, done) { 
        
        ListResponseBackgroundTaskOut.initialize(this, data, done);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, done) { 
        obj['data'] = data;
        obj['done'] = done;
    }

    /**
     * Constructs a <code>ListResponseBackgroundTaskOut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListResponseBackgroundTaskOut} obj Optional instance to populate.
     * @return {module:model/ListResponseBackgroundTaskOut} The populated <code>ListResponseBackgroundTaskOut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListResponseBackgroundTaskOut();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [BackgroundTaskOut]);
            }
            if (data.hasOwnProperty('done')) {
                obj['done'] = ApiClient.convertToType(data['done'], 'Boolean');
            }
            if (data.hasOwnProperty('iterator')) {
                obj['iterator'] = ApiClient.convertToType(data['iterator'], 'String');
            }
            if (data.hasOwnProperty('prevIterator')) {
                obj['prevIterator'] = ApiClient.convertToType(data['prevIterator'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListResponseBackgroundTaskOut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListResponseBackgroundTaskOut</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListResponseBackgroundTaskOut.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                BackgroundTaskOut.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['iterator'] && !(typeof data['iterator'] === 'string' || data['iterator'] instanceof String)) {
            throw new Error("Expected the field `iterator` to be a primitive type in the JSON string but got " + data['iterator']);
        }
        // ensure the json data is a string
        if (data['prevIterator'] && !(typeof data['prevIterator'] === 'string' || data['prevIterator'] instanceof String)) {
            throw new Error("Expected the field `prevIterator` to be a primitive type in the JSON string but got " + data['prevIterator']);
        }

        return true;
    }


}

ListResponseBackgroundTaskOut.RequiredProperties = ["data", "done"];

/**
 * @member {Array.<module:model/BackgroundTaskOut>} data
 */
ListResponseBackgroundTaskOut.prototype['data'] = undefined;

/**
 * @member {Boolean} done
 */
ListResponseBackgroundTaskOut.prototype['done'] = undefined;

/**
 * @member {String} iterator
 */
ListResponseBackgroundTaskOut.prototype['iterator'] = undefined;

/**
 * @member {String} prevIterator
 */
ListResponseBackgroundTaskOut.prototype['prevIterator'] = undefined;






export default ListResponseBackgroundTaskOut;

