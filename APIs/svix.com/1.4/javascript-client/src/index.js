/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AppPortalAccessIn from './model/AppPortalAccessIn';
import AppPortalAccessOut from './model/AppPortalAccessOut';
import ApplicationIn from './model/ApplicationIn';
import ApplicationOut from './model/ApplicationOut';
import ApplicationTokenExpireIn from './model/ApplicationTokenExpireIn';
import BackgroundTaskFinishedEvent from './model/BackgroundTaskFinishedEvent';
import BackgroundTaskFinishedEventData from './model/BackgroundTaskFinishedEventData';
import BackgroundTaskOpWebhookStatus from './model/BackgroundTaskOpWebhookStatus';
import BackgroundTaskOpWebhookType from './model/BackgroundTaskOpWebhookType';
import BackgroundTaskOut from './model/BackgroundTaskOut';
import BackgroundTaskStatus from './model/BackgroundTaskStatus';
import BackgroundTaskType from './model/BackgroundTaskType';
import DashboardAccessOut from './model/DashboardAccessOut';
import EndpointCreatedEvent from './model/EndpointCreatedEvent';
import EndpointCreatedEventData from './model/EndpointCreatedEventData';
import EndpointDeletedEvent from './model/EndpointDeletedEvent';
import EndpointDeletedEventData from './model/EndpointDeletedEventData';
import EndpointDisabledEvent from './model/EndpointDisabledEvent';
import EndpointDisabledEventData from './model/EndpointDisabledEventData';
import EndpointHeadersIn from './model/EndpointHeadersIn';
import EndpointHeadersOut from './model/EndpointHeadersOut';
import EndpointHeadersPatchIn from './model/EndpointHeadersPatchIn';
import EndpointIn from './model/EndpointIn';
import EndpointMessageOut from './model/EndpointMessageOut';
import EndpointOut from './model/EndpointOut';
import EndpointSecretOut from './model/EndpointSecretOut';
import EndpointSecretRotateIn from './model/EndpointSecretRotateIn';
import EndpointStats from './model/EndpointStats';
import EndpointTransformationIn from './model/EndpointTransformationIn';
import EndpointTransformationOut from './model/EndpointTransformationOut';
import EndpointUpdate from './model/EndpointUpdate';
import EndpointUpdatedEvent from './model/EndpointUpdatedEvent';
import EndpointUpdatedEventData from './model/EndpointUpdatedEventData';
import EventExampleIn from './model/EventExampleIn';
import EventTypeIn from './model/EventTypeIn';
import EventTypeOut from './model/EventTypeOut';
import EventTypeUpdate from './model/EventTypeUpdate';
import HTTPValidationError from './model/HTTPValidationError';
import HttpErrorOut from './model/HttpErrorOut';
import IntegrationIn from './model/IntegrationIn';
import IntegrationKeyOut from './model/IntegrationKeyOut';
import IntegrationOut from './model/IntegrationOut';
import IntegrationUpdate from './model/IntegrationUpdate';
import ListResponseApplicationOut from './model/ListResponseApplicationOut';
import ListResponseBackgroundTaskOut from './model/ListResponseBackgroundTaskOut';
import ListResponseEndpointMessageOut from './model/ListResponseEndpointMessageOut';
import ListResponseEndpointOut from './model/ListResponseEndpointOut';
import ListResponseEventTypeOut from './model/ListResponseEventTypeOut';
import ListResponseIntegrationOut from './model/ListResponseIntegrationOut';
import ListResponseMessageAttemptEndpointOut from './model/ListResponseMessageAttemptEndpointOut';
import ListResponseMessageAttemptOut from './model/ListResponseMessageAttemptOut';
import ListResponseMessageEndpointOut from './model/ListResponseMessageEndpointOut';
import ListResponseMessageOut from './model/ListResponseMessageOut';
import MessageAttemptEndpointOut from './model/MessageAttemptEndpointOut';
import MessageAttemptExhaustedEvent from './model/MessageAttemptExhaustedEvent';
import MessageAttemptExhaustedEventData from './model/MessageAttemptExhaustedEventData';
import MessageAttemptFailedData from './model/MessageAttemptFailedData';
import MessageAttemptFailingEvent from './model/MessageAttemptFailingEvent';
import MessageAttemptFailingEventData from './model/MessageAttemptFailingEventData';
import MessageAttemptOut from './model/MessageAttemptOut';
import MessageAttemptTriggerType from './model/MessageAttemptTriggerType';
import MessageEndpointOut from './model/MessageEndpointOut';
import MessageIn from './model/MessageIn';
import MessageOut from './model/MessageOut';
import MessageStatus from './model/MessageStatus';
import Ordering from './model/Ordering';
import RecoverIn from './model/RecoverIn';
import RecoverOut from './model/RecoverOut';
import ReplayIn from './model/ReplayIn';
import ReplayOut from './model/ReplayOut';
import StatusCodeClass from './model/StatusCodeClass';
import ValidationError from './model/ValidationError';
import WebhookTypes from './model/WebhookTypes';
import ApplicationApi from './api/ApplicationApi';
import AuthenticationApi from './api/AuthenticationApi';
import BackgroundTasksApi from './api/BackgroundTasksApi';
import EndpointApi from './api/EndpointApi';
import EventTypeApi from './api/EventTypeApi';
import HealthApi from './api/HealthApi';
import IntegrationApi from './api/IntegrationApi';
import MessageApi from './api/MessageApi';
import MessageAttemptApi from './api/MessageAttemptApi';


/**
* Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - &#x60;messages&#x60;: these are the webhooks being sent. They can have contents and a few other properties. - &#x60;application&#x60;: this is where &#x60;messages&#x60; are sent to. Usually you want to create one application for each user on your platform. - &#x60;endpoint&#x60;: endpoints are the URLs messages will be sent to. Each application can have multiple &#x60;endpoints&#x60; and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - &#x60;event-type&#x60;: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (&#x60;AUTH_TOKEN&#x60;) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the &#x60;Authorization&#x60; header as such: &#x60;Authorization: Bearer ${AUTH_TOKEN}&#x60;.  &lt;SecurityDefinitions /&gt;   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the &#x60;Idempotency-Key&#x60; header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix&#39;s idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for &#x60;POST&#x60; requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SvixApi = require('index'); // See note below*.
* var xxxSvc = new SvixApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SvixApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SvixApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SvixApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.4
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AppPortalAccessIn model constructor.
     * @property {module:model/AppPortalAccessIn}
     */
    AppPortalAccessIn,

    /**
     * The AppPortalAccessOut model constructor.
     * @property {module:model/AppPortalAccessOut}
     */
    AppPortalAccessOut,

    /**
     * The ApplicationIn model constructor.
     * @property {module:model/ApplicationIn}
     */
    ApplicationIn,

    /**
     * The ApplicationOut model constructor.
     * @property {module:model/ApplicationOut}
     */
    ApplicationOut,

    /**
     * The ApplicationTokenExpireIn model constructor.
     * @property {module:model/ApplicationTokenExpireIn}
     */
    ApplicationTokenExpireIn,

    /**
     * The BackgroundTaskFinishedEvent model constructor.
     * @property {module:model/BackgroundTaskFinishedEvent}
     */
    BackgroundTaskFinishedEvent,

    /**
     * The BackgroundTaskFinishedEventData model constructor.
     * @property {module:model/BackgroundTaskFinishedEventData}
     */
    BackgroundTaskFinishedEventData,

    /**
     * The BackgroundTaskOpWebhookStatus model constructor.
     * @property {module:model/BackgroundTaskOpWebhookStatus}
     */
    BackgroundTaskOpWebhookStatus,

    /**
     * The BackgroundTaskOpWebhookType model constructor.
     * @property {module:model/BackgroundTaskOpWebhookType}
     */
    BackgroundTaskOpWebhookType,

    /**
     * The BackgroundTaskOut model constructor.
     * @property {module:model/BackgroundTaskOut}
     */
    BackgroundTaskOut,

    /**
     * The BackgroundTaskStatus model constructor.
     * @property {module:model/BackgroundTaskStatus}
     */
    BackgroundTaskStatus,

    /**
     * The BackgroundTaskType model constructor.
     * @property {module:model/BackgroundTaskType}
     */
    BackgroundTaskType,

    /**
     * The DashboardAccessOut model constructor.
     * @property {module:model/DashboardAccessOut}
     */
    DashboardAccessOut,

    /**
     * The EndpointCreatedEvent model constructor.
     * @property {module:model/EndpointCreatedEvent}
     */
    EndpointCreatedEvent,

    /**
     * The EndpointCreatedEventData model constructor.
     * @property {module:model/EndpointCreatedEventData}
     */
    EndpointCreatedEventData,

    /**
     * The EndpointDeletedEvent model constructor.
     * @property {module:model/EndpointDeletedEvent}
     */
    EndpointDeletedEvent,

    /**
     * The EndpointDeletedEventData model constructor.
     * @property {module:model/EndpointDeletedEventData}
     */
    EndpointDeletedEventData,

    /**
     * The EndpointDisabledEvent model constructor.
     * @property {module:model/EndpointDisabledEvent}
     */
    EndpointDisabledEvent,

    /**
     * The EndpointDisabledEventData model constructor.
     * @property {module:model/EndpointDisabledEventData}
     */
    EndpointDisabledEventData,

    /**
     * The EndpointHeadersIn model constructor.
     * @property {module:model/EndpointHeadersIn}
     */
    EndpointHeadersIn,

    /**
     * The EndpointHeadersOut model constructor.
     * @property {module:model/EndpointHeadersOut}
     */
    EndpointHeadersOut,

    /**
     * The EndpointHeadersPatchIn model constructor.
     * @property {module:model/EndpointHeadersPatchIn}
     */
    EndpointHeadersPatchIn,

    /**
     * The EndpointIn model constructor.
     * @property {module:model/EndpointIn}
     */
    EndpointIn,

    /**
     * The EndpointMessageOut model constructor.
     * @property {module:model/EndpointMessageOut}
     */
    EndpointMessageOut,

    /**
     * The EndpointOut model constructor.
     * @property {module:model/EndpointOut}
     */
    EndpointOut,

    /**
     * The EndpointSecretOut model constructor.
     * @property {module:model/EndpointSecretOut}
     */
    EndpointSecretOut,

    /**
     * The EndpointSecretRotateIn model constructor.
     * @property {module:model/EndpointSecretRotateIn}
     */
    EndpointSecretRotateIn,

    /**
     * The EndpointStats model constructor.
     * @property {module:model/EndpointStats}
     */
    EndpointStats,

    /**
     * The EndpointTransformationIn model constructor.
     * @property {module:model/EndpointTransformationIn}
     */
    EndpointTransformationIn,

    /**
     * The EndpointTransformationOut model constructor.
     * @property {module:model/EndpointTransformationOut}
     */
    EndpointTransformationOut,

    /**
     * The EndpointUpdate model constructor.
     * @property {module:model/EndpointUpdate}
     */
    EndpointUpdate,

    /**
     * The EndpointUpdatedEvent model constructor.
     * @property {module:model/EndpointUpdatedEvent}
     */
    EndpointUpdatedEvent,

    /**
     * The EndpointUpdatedEventData model constructor.
     * @property {module:model/EndpointUpdatedEventData}
     */
    EndpointUpdatedEventData,

    /**
     * The EventExampleIn model constructor.
     * @property {module:model/EventExampleIn}
     */
    EventExampleIn,

    /**
     * The EventTypeIn model constructor.
     * @property {module:model/EventTypeIn}
     */
    EventTypeIn,

    /**
     * The EventTypeOut model constructor.
     * @property {module:model/EventTypeOut}
     */
    EventTypeOut,

    /**
     * The EventTypeUpdate model constructor.
     * @property {module:model/EventTypeUpdate}
     */
    EventTypeUpdate,

    /**
     * The HTTPValidationError model constructor.
     * @property {module:model/HTTPValidationError}
     */
    HTTPValidationError,

    /**
     * The HttpErrorOut model constructor.
     * @property {module:model/HttpErrorOut}
     */
    HttpErrorOut,

    /**
     * The IntegrationIn model constructor.
     * @property {module:model/IntegrationIn}
     */
    IntegrationIn,

    /**
     * The IntegrationKeyOut model constructor.
     * @property {module:model/IntegrationKeyOut}
     */
    IntegrationKeyOut,

    /**
     * The IntegrationOut model constructor.
     * @property {module:model/IntegrationOut}
     */
    IntegrationOut,

    /**
     * The IntegrationUpdate model constructor.
     * @property {module:model/IntegrationUpdate}
     */
    IntegrationUpdate,

    /**
     * The ListResponseApplicationOut model constructor.
     * @property {module:model/ListResponseApplicationOut}
     */
    ListResponseApplicationOut,

    /**
     * The ListResponseBackgroundTaskOut model constructor.
     * @property {module:model/ListResponseBackgroundTaskOut}
     */
    ListResponseBackgroundTaskOut,

    /**
     * The ListResponseEndpointMessageOut model constructor.
     * @property {module:model/ListResponseEndpointMessageOut}
     */
    ListResponseEndpointMessageOut,

    /**
     * The ListResponseEndpointOut model constructor.
     * @property {module:model/ListResponseEndpointOut}
     */
    ListResponseEndpointOut,

    /**
     * The ListResponseEventTypeOut model constructor.
     * @property {module:model/ListResponseEventTypeOut}
     */
    ListResponseEventTypeOut,

    /**
     * The ListResponseIntegrationOut model constructor.
     * @property {module:model/ListResponseIntegrationOut}
     */
    ListResponseIntegrationOut,

    /**
     * The ListResponseMessageAttemptEndpointOut model constructor.
     * @property {module:model/ListResponseMessageAttemptEndpointOut}
     */
    ListResponseMessageAttemptEndpointOut,

    /**
     * The ListResponseMessageAttemptOut model constructor.
     * @property {module:model/ListResponseMessageAttemptOut}
     */
    ListResponseMessageAttemptOut,

    /**
     * The ListResponseMessageEndpointOut model constructor.
     * @property {module:model/ListResponseMessageEndpointOut}
     */
    ListResponseMessageEndpointOut,

    /**
     * The ListResponseMessageOut model constructor.
     * @property {module:model/ListResponseMessageOut}
     */
    ListResponseMessageOut,

    /**
     * The MessageAttemptEndpointOut model constructor.
     * @property {module:model/MessageAttemptEndpointOut}
     */
    MessageAttemptEndpointOut,

    /**
     * The MessageAttemptExhaustedEvent model constructor.
     * @property {module:model/MessageAttemptExhaustedEvent}
     */
    MessageAttemptExhaustedEvent,

    /**
     * The MessageAttemptExhaustedEventData model constructor.
     * @property {module:model/MessageAttemptExhaustedEventData}
     */
    MessageAttemptExhaustedEventData,

    /**
     * The MessageAttemptFailedData model constructor.
     * @property {module:model/MessageAttemptFailedData}
     */
    MessageAttemptFailedData,

    /**
     * The MessageAttemptFailingEvent model constructor.
     * @property {module:model/MessageAttemptFailingEvent}
     */
    MessageAttemptFailingEvent,

    /**
     * The MessageAttemptFailingEventData model constructor.
     * @property {module:model/MessageAttemptFailingEventData}
     */
    MessageAttemptFailingEventData,

    /**
     * The MessageAttemptOut model constructor.
     * @property {module:model/MessageAttemptOut}
     */
    MessageAttemptOut,

    /**
     * The MessageAttemptTriggerType model constructor.
     * @property {module:model/MessageAttemptTriggerType}
     */
    MessageAttemptTriggerType,

    /**
     * The MessageEndpointOut model constructor.
     * @property {module:model/MessageEndpointOut}
     */
    MessageEndpointOut,

    /**
     * The MessageIn model constructor.
     * @property {module:model/MessageIn}
     */
    MessageIn,

    /**
     * The MessageOut model constructor.
     * @property {module:model/MessageOut}
     */
    MessageOut,

    /**
     * The MessageStatus model constructor.
     * @property {module:model/MessageStatus}
     */
    MessageStatus,

    /**
     * The Ordering model constructor.
     * @property {module:model/Ordering}
     */
    Ordering,

    /**
     * The RecoverIn model constructor.
     * @property {module:model/RecoverIn}
     */
    RecoverIn,

    /**
     * The RecoverOut model constructor.
     * @property {module:model/RecoverOut}
     */
    RecoverOut,

    /**
     * The ReplayIn model constructor.
     * @property {module:model/ReplayIn}
     */
    ReplayIn,

    /**
     * The ReplayOut model constructor.
     * @property {module:model/ReplayOut}
     */
    ReplayOut,

    /**
     * The StatusCodeClass model constructor.
     * @property {module:model/StatusCodeClass}
     */
    StatusCodeClass,

    /**
     * The ValidationError model constructor.
     * @property {module:model/ValidationError}
     */
    ValidationError,

    /**
     * The WebhookTypes model constructor.
     * @property {module:model/WebhookTypes}
     */
    WebhookTypes,

    /**
    * The ApplicationApi service constructor.
    * @property {module:api/ApplicationApi}
    */
    ApplicationApi,

    /**
    * The AuthenticationApi service constructor.
    * @property {module:api/AuthenticationApi}
    */
    AuthenticationApi,

    /**
    * The BackgroundTasksApi service constructor.
    * @property {module:api/BackgroundTasksApi}
    */
    BackgroundTasksApi,

    /**
    * The EndpointApi service constructor.
    * @property {module:api/EndpointApi}
    */
    EndpointApi,

    /**
    * The EventTypeApi service constructor.
    * @property {module:api/EventTypeApi}
    */
    EventTypeApi,

    /**
    * The HealthApi service constructor.
    * @property {module:api/HealthApi}
    */
    HealthApi,

    /**
    * The IntegrationApi service constructor.
    * @property {module:api/IntegrationApi}
    */
    IntegrationApi,

    /**
    * The MessageApi service constructor.
    * @property {module:api/MessageApi}
    */
    MessageApi,

    /**
    * The MessageAttemptApi service constructor.
    * @property {module:api/MessageAttemptApi}
    */
    MessageAttemptApi
};
