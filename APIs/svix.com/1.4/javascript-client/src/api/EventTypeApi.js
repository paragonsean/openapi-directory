/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventTypeIn from '../model/EventTypeIn';
import EventTypeOut from '../model/EventTypeOut';
import EventTypeUpdate from '../model/EventTypeUpdate';
import HTTPValidationError from '../model/HTTPValidationError';
import HttpErrorOut from '../model/HttpErrorOut';
import ListResponseEventTypeOut from '../model/ListResponseEventTypeOut';

/**
* EventType service.
* @module api/EventTypeApi
* @version 1.4
*/
export default class EventTypeApi {

    /**
    * Constructs a new EventTypeApi. 
    * @alias module:api/EventTypeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEventTypeApiV1EventTypePost operation.
     * @callback module:api/EventTypeApi~createEventTypeApiV1EventTypePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTypeOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Event Type
     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.
     * @param {module:model/EventTypeIn} eventTypeIn 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EventTypeApi~createEventTypeApiV1EventTypePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTypeOut}
     */
    createEventTypeApiV1EventTypePost(eventTypeIn, opts, callback) {
      opts = opts || {};
      let postBody = eventTypeIn;
      // verify the required parameter 'eventTypeIn' is set
      if (eventTypeIn === undefined || eventTypeIn === null) {
        throw new Error("Missing the required parameter 'eventTypeIn' when calling createEventTypeApiV1EventTypePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventTypeOut;
      return this.apiClient.callApi(
        '/api/v1/event-type/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEventTypeApiV1EventTypeEventTypeNameDelete operation.
     * @callback module:api/EventTypeApi~deleteEventTypeApiV1EventTypeEventTypeNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive Event Type
     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).  If `expunge=true` is set then the event type is deleted instead of archived. This can only be used in development environments.
     * @param {String} eventTypeName 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [expunge = false)] 
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EventTypeApi~deleteEventTypeApiV1EventTypeEventTypeNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEventTypeApiV1EventTypeEventTypeNameDelete(eventTypeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventTypeName' is set
      if (eventTypeName === undefined || eventTypeName === null) {
        throw new Error("Missing the required parameter 'eventTypeName' when calling deleteEventTypeApiV1EventTypeEventTypeNameDelete");
      }

      let pathParams = {
        'event_type_name': eventTypeName
      };
      let queryParams = {
        'expunge': opts['expunge']
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/event-type/{event_type_name}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventTypeApiV1EventTypeEventTypeNameGet operation.
     * @callback module:api/EventTypeApi~getEventTypeApiV1EventTypeEventTypeNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTypeOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Event Type
     * Get an event type.
     * @param {String} eventTypeName 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EventTypeApi~getEventTypeApiV1EventTypeEventTypeNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTypeOut}
     */
    getEventTypeApiV1EventTypeEventTypeNameGet(eventTypeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventTypeName' is set
      if (eventTypeName === undefined || eventTypeName === null) {
        throw new Error("Missing the required parameter 'eventTypeName' when calling getEventTypeApiV1EventTypeEventTypeNameGet");
      }

      let pathParams = {
        'event_type_name': eventTypeName
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventTypeOut;
      return this.apiClient.callApi(
        '/api/v1/event-type/{event_type_name}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEventTypesApiV1EventTypeGet operation.
     * @callback module:api/EventTypeApi~listEventTypesApiV1EventTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseEventTypeOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Event Types
     * Return the list of event types.
     * @param {Object} opts Optional parameters
     * @param {String} [iterator] 
     * @param {Number} [limit = 50)] 
     * @param {Boolean} [withContent = false)] 
     * @param {Boolean} [includeArchived = false)] 
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EventTypeApi~listEventTypesApiV1EventTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseEventTypeOut}
     */
    listEventTypesApiV1EventTypeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'iterator': opts['iterator'],
        'limit': opts['limit'],
        'with_content': opts['withContent'],
        'include_archived': opts['includeArchived']
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListResponseEventTypeOut;
      return this.apiClient.callApi(
        '/api/v1/event-type/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEventTypeApiV1EventTypeEventTypeNamePut operation.
     * @callback module:api/EventTypeApi~updateEventTypeApiV1EventTypeEventTypeNamePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTypeOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Event Type
     * Update an event type.
     * @param {String} eventTypeName 
     * @param {module:model/EventTypeUpdate} eventTypeUpdate 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EventTypeApi~updateEventTypeApiV1EventTypeEventTypeNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTypeOut}
     */
    updateEventTypeApiV1EventTypeEventTypeNamePut(eventTypeName, eventTypeUpdate, opts, callback) {
      opts = opts || {};
      let postBody = eventTypeUpdate;
      // verify the required parameter 'eventTypeName' is set
      if (eventTypeName === undefined || eventTypeName === null) {
        throw new Error("Missing the required parameter 'eventTypeName' when calling updateEventTypeApiV1EventTypeEventTypeNamePut");
      }
      // verify the required parameter 'eventTypeUpdate' is set
      if (eventTypeUpdate === undefined || eventTypeUpdate === null) {
        throw new Error("Missing the required parameter 'eventTypeUpdate' when calling updateEventTypeApiV1EventTypeEventTypeNamePut");
      }

      let pathParams = {
        'event_type_name': eventTypeName
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventTypeOut;
      return this.apiClient.callApi(
        '/api/v1/event-type/{event_type_name}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
