/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EndpointHeadersIn from '../model/EndpointHeadersIn';
import EndpointHeadersOut from '../model/EndpointHeadersOut';
import EndpointHeadersPatchIn from '../model/EndpointHeadersPatchIn';
import EndpointIn from '../model/EndpointIn';
import EndpointOut from '../model/EndpointOut';
import EndpointSecretOut from '../model/EndpointSecretOut';
import EndpointSecretRotateIn from '../model/EndpointSecretRotateIn';
import EndpointStats from '../model/EndpointStats';
import EndpointTransformationIn from '../model/EndpointTransformationIn';
import EndpointTransformationOut from '../model/EndpointTransformationOut';
import EndpointUpdate from '../model/EndpointUpdate';
import EventExampleIn from '../model/EventExampleIn';
import HTTPValidationError from '../model/HTTPValidationError';
import HttpErrorOut from '../model/HttpErrorOut';
import ListResponseEndpointOut from '../model/ListResponseEndpointOut';
import MessageOut from '../model/MessageOut';
import Ordering from '../model/Ordering';
import RecoverIn from '../model/RecoverIn';
import RecoverOut from '../model/RecoverOut';
import ReplayIn from '../model/ReplayIn';
import ReplayOut from '../model/ReplayOut';

/**
* Endpoint service.
* @module api/EndpointApi
* @version 1.4
*/
export default class EndpointApi {

    /**
    * Constructs a new EndpointApi. 
    * @alias module:api/EndpointApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEndpointApiV1AppAppIdEndpointPost operation.
     * @callback module:api/EndpointApi~createEndpointApiV1AppAppIdEndpointPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Endpoint
     * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended)
     * @param {String} appId 
     * @param {module:model/EndpointIn} endpointIn 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~createEndpointApiV1AppAppIdEndpointPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointOut}
     */
    createEndpointApiV1AppAppIdEndpointPost(appId, endpointIn, opts, callback) {
      opts = opts || {};
      let postBody = endpointIn;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createEndpointApiV1AppAppIdEndpointPost");
      }
      // verify the required parameter 'endpointIn' is set
      if (endpointIn === undefined || endpointIn === null) {
        throw new Error("Missing the required parameter 'endpointIn' when calling createEndpointApiV1AppAppIdEndpointPost");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EndpointOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete operation.
     * @callback module:api/EndpointApi~deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Endpoint
     * Delete an endpoint.
     * @param {String} endpointId 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(endpointId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete");
      }

      let pathParams = {
        'endpoint_id': endpointId,
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndpointApiV1AppAppIdEndpointEndpointIdGet operation.
     * @callback module:api/EndpointApi~getEndpointApiV1AppAppIdEndpointEndpointIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Endpoint
     * Get an application.
     * @param {String} endpointId 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~getEndpointApiV1AppAppIdEndpointEndpointIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointOut}
     */
    getEndpointApiV1AppAppIdEndpointEndpointIdGet(endpointId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling getEndpointApiV1AppAppIdEndpointEndpointIdGet");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getEndpointApiV1AppAppIdEndpointEndpointIdGet");
      }

      let pathParams = {
        'endpoint_id': endpointId,
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet operation.
     * @callback module:api/EndpointApi~getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointHeadersOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Endpoint Headers
     * Get the additional headers to be sent with the webhook
     * @param {String} endpointId 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointHeadersOut}
     */
    getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet(endpointId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet");
      }

      let pathParams = {
        'endpoint_id': endpointId,
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointHeadersOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet operation.
     * @callback module:api/EndpointApi~getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointSecretOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Endpoint Secret
     * Get the endpoint's signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).
     * @param {String} endpointId 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointSecretOut}
     */
    getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(endpointId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet");
      }

      let pathParams = {
        'endpoint_id': endpointId,
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointSecretOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet operation.
     * @callback module:api/EndpointApi~getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Endpoint Stats
     * Get basic statistics for the endpoint.
     * @param {String} endpointId 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {Date} [since] 
     * @param {Date} [until] 
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointStats}
     */
    getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(endpointId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet");
      }

      let pathParams = {
        'endpoint_id': endpointId,
        'app_id': appId
      };
      let queryParams = {
        'since': opts['since'],
        'until': opts['until']
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointStats;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet operation.
     * @callback module:api/EndpointApi~getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointTransformationOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Endpoint Transformation
     * Get the transformation code associated with this endpoint
     * @param {String} endpointId 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointTransformationOut}
     */
    getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet(endpointId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet");
      }

      let pathParams = {
        'endpoint_id': endpointId,
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointTransformationOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEndpointsApiV1AppAppIdEndpointGet operation.
     * @callback module:api/EndpointApi~listEndpointsApiV1AppAppIdEndpointGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseEndpointOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Endpoints
     * List the application's endpoints.
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [iterator] 
     * @param {Number} [limit = 50)] 
     * @param {module:model/Ordering} [order] 
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~listEndpointsApiV1AppAppIdEndpointGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseEndpointOut}
     */
    listEndpointsApiV1AppAppIdEndpointGet(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listEndpointsApiV1AppAppIdEndpointGet");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
        'iterator': opts['iterator'],
        'limit': opts['limit'],
        'order': opts['order']
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListResponseEndpointOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch operation.
     * @callback module:api/EndpointApi~patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch Endpoint Headers
     * Partially set the additional headers to be sent with the webhook
     * @param {String} appId 
     * @param {String} endpointId 
     * @param {module:model/EndpointHeadersPatchIn} endpointHeadersPatchIn 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch(appId, endpointId, endpointHeadersPatchIn, opts, callback) {
      opts = opts || {};
      let postBody = endpointHeadersPatchIn;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch");
      }
      // verify the required parameter 'endpointHeadersPatchIn' is set
      if (endpointHeadersPatchIn === undefined || endpointHeadersPatchIn === null) {
        throw new Error("Missing the required parameter 'endpointHeadersPatchIn' when calling patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch");
      }

      let pathParams = {
        'app_id': appId,
        'endpoint_id': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost operation.
     * @callback module:api/EndpointApi~recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoverOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recover Failed Webhooks
     * Resend all failed messages since a given time.
     * @param {String} appId 
     * @param {String} endpointId 
     * @param {module:model/RecoverIn} recoverIn 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoverOut}
     */
    recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost(appId, endpointId, recoverIn, opts, callback) {
      opts = opts || {};
      let postBody = recoverIn;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost");
      }
      // verify the required parameter 'recoverIn' is set
      if (recoverIn === undefined || recoverIn === null) {
        throw new Error("Missing the required parameter 'recoverIn' when calling recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost");
      }

      let pathParams = {
        'app_id': appId,
        'endpoint_id': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecoverOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost operation.
     * @callback module:api/EndpointApi~replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplayOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replay Missing Webhooks
     * Replays messages to the endpoint. Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.
     * @param {String} appId 
     * @param {String} endpointId 
     * @param {module:model/ReplayIn} replayIn 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplayOut}
     */
    replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost(appId, endpointId, replayIn, opts, callback) {
      opts = opts || {};
      let postBody = replayIn;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost");
      }
      // verify the required parameter 'replayIn' is set
      if (replayIn === undefined || replayIn === null) {
        throw new Error("Missing the required parameter 'replayIn' when calling replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost");
      }

      let pathParams = {
        'app_id': appId,
        'endpoint_id': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplayOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost operation.
     * @callback module:api/EndpointApi~rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rotate Endpoint Secret
     * Rotates the endpoint's signing secret.  The previous secret will be valid for the next 24 hours.
     * @param {String} endpointId 
     * @param {String} appId 
     * @param {module:model/EndpointSecretRotateIn} endpointSecretRotateIn 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost(endpointId, appId, endpointSecretRotateIn, opts, callback) {
      opts = opts || {};
      let postBody = endpointSecretRotateIn;
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost");
      }
      // verify the required parameter 'endpointSecretRotateIn' is set
      if (endpointSecretRotateIn === undefined || endpointSecretRotateIn === null) {
        throw new Error("Missing the required parameter 'endpointSecretRotateIn' when calling rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost");
      }

      let pathParams = {
        'endpoint_id': endpointId,
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost operation.
     * @callback module:api/EndpointApi~sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Event Type Example Message
     * Send an example message for event
     * @param {String} appId 
     * @param {String} endpointId 
     * @param {module:model/EventExampleIn} eventExampleIn 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageOut}
     */
    sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost(appId, endpointId, eventExampleIn, opts, callback) {
      opts = opts || {};
      let postBody = eventExampleIn;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost");
      }
      // verify the required parameter 'eventExampleIn' is set
      if (eventExampleIn === undefined || eventExampleIn === null) {
        throw new Error("Missing the required parameter 'eventExampleIn' when calling sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost");
      }

      let pathParams = {
        'app_id': appId,
        'endpoint_id': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MessageOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch operation.
     * @callback module:api/EndpointApi~setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Endpoint Transformation
     * Set or unset the transformation code associated with this endpoint
     * @param {String} appId 
     * @param {String} endpointId 
     * @param {module:model/EndpointTransformationIn} endpointTransformationIn 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch(appId, endpointId, endpointTransformationIn, opts, callback) {
      opts = opts || {};
      let postBody = endpointTransformationIn;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch");
      }
      // verify the required parameter 'endpointTransformationIn' is set
      if (endpointTransformationIn === undefined || endpointTransformationIn === null) {
        throw new Error("Missing the required parameter 'endpointTransformationIn' when calling setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch");
      }

      let pathParams = {
        'app_id': appId,
        'endpoint_id': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEndpointApiV1AppAppIdEndpointEndpointIdPut operation.
     * @callback module:api/EndpointApi~updateEndpointApiV1AppAppIdEndpointEndpointIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Endpoint
     * Update an endpoint.
     * @param {String} endpointId 
     * @param {String} appId 
     * @param {module:model/EndpointUpdate} endpointUpdate 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~updateEndpointApiV1AppAppIdEndpointEndpointIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointOut}
     */
    updateEndpointApiV1AppAppIdEndpointEndpointIdPut(endpointId, appId, endpointUpdate, opts, callback) {
      opts = opts || {};
      let postBody = endpointUpdate;
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling updateEndpointApiV1AppAppIdEndpointEndpointIdPut");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateEndpointApiV1AppAppIdEndpointEndpointIdPut");
      }
      // verify the required parameter 'endpointUpdate' is set
      if (endpointUpdate === undefined || endpointUpdate === null) {
        throw new Error("Missing the required parameter 'endpointUpdate' when calling updateEndpointApiV1AppAppIdEndpointEndpointIdPut");
      }

      let pathParams = {
        'endpoint_id': endpointId,
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EndpointOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut operation.
     * @callback module:api/EndpointApi~updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Endpoint Headers
     * Set the additional headers to be sent with the webhook
     * @param {String} appId 
     * @param {String} endpointId 
     * @param {module:model/EndpointHeadersIn} endpointHeadersIn 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/EndpointApi~updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut(appId, endpointId, endpointHeadersIn, opts, callback) {
      opts = opts || {};
      let postBody = endpointHeadersIn;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut");
      }
      // verify the required parameter 'endpointHeadersIn' is set
      if (endpointHeadersIn === undefined || endpointHeadersIn === null) {
        throw new Error("Missing the required parameter 'endpointHeadersIn' when calling updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut");
      }

      let pathParams = {
        'app_id': appId,
        'endpoint_id': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
