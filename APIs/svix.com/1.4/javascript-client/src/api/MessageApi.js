/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import HttpErrorOut from '../model/HttpErrorOut';
import ListResponseMessageOut from '../model/ListResponseMessageOut';
import MessageIn from '../model/MessageIn';
import MessageOut from '../model/MessageOut';

/**
* Message service.
* @module api/MessageApi
* @version 1.4
*/
export default class MessageApi {

    /**
    * Constructs a new MessageApi. 
    * @alias module:api/MessageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMessageApiV1AppAppIdMsgPost operation.
     * @callback module:api/MessageApi~createMessageApiV1AppAppIdMsgPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Message
     * Creates a new message and dispatches it to all of the application's endpoints.  The `eventId` is an optional custom unique ID. It's verified to be unique only up to a day, after that no verification will be made. If a message with the same `eventId` already exists for any application in your environment, a 409 conflict error will be returned.  The `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types. Messages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don't imply a specific message content or schema.  The `payload` property is the webhook's body (the actual webhook message). Svix supports payload sizes of up to ~350kb, though it's generally a good idea to keep webhook payloads small, probably no larger than 40kb.  The optional `application` property will be used to create an application if the application referenced in the path does not exist. If it does then this property is ignored.
     * @param {String} appId 
     * @param {module:model/MessageIn} messageIn 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withContent = true)] 
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/MessageApi~createMessageApiV1AppAppIdMsgPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageOut}
     */
    createMessageApiV1AppAppIdMsgPost(appId, messageIn, opts, callback) {
      opts = opts || {};
      let postBody = messageIn;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createMessageApiV1AppAppIdMsgPost");
      }
      // verify the required parameter 'messageIn' is set
      if (messageIn === undefined || messageIn === null) {
        throw new Error("Missing the required parameter 'messageIn' when calling createMessageApiV1AppAppIdMsgPost");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
        'with_content': opts['withContent']
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MessageOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/msg/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expungeMessagePayloadApiV1AppAppIdMsgMsgIdContentDelete operation.
     * @callback module:api/MessageApi~expungeMessagePayloadApiV1AppAppIdMsgMsgIdContentDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete message payload
     * Delete the given message's payload. Useful in cases when a message was accidentally sent with sensitive content.  The message can't be replayed or resent once its payload has been deleted or expired.
     * @param {String} msgId 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/MessageApi~expungeMessagePayloadApiV1AppAppIdMsgMsgIdContentDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    expungeMessagePayloadApiV1AppAppIdMsgMsgIdContentDelete(msgId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'msgId' is set
      if (msgId === undefined || msgId === null) {
        throw new Error("Missing the required parameter 'msgId' when calling expungeMessagePayloadApiV1AppAppIdMsgMsgIdContentDelete");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling expungeMessagePayloadApiV1AppAppIdMsgMsgIdContentDelete");
      }

      let pathParams = {
        'msg_id': msgId,
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/msg/{msg_id}/content/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessageApiV1AppAppIdMsgMsgIdGet operation.
     * @callback module:api/MessageApi~getMessageApiV1AppAppIdMsgMsgIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Message
     * Get a message by its ID or eventID.
     * @param {String} msgId 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/MessageApi~getMessageApiV1AppAppIdMsgMsgIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageOut}
     */
    getMessageApiV1AppAppIdMsgMsgIdGet(msgId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'msgId' is set
      if (msgId === undefined || msgId === null) {
        throw new Error("Missing the required parameter 'msgId' when calling getMessageApiV1AppAppIdMsgMsgIdGet");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getMessageApiV1AppAppIdMsgMsgIdGet");
      }

      let pathParams = {
        'msg_id': msgId,
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/msg/{msg_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMessagesApiV1AppAppIdMsgGet operation.
     * @callback module:api/MessageApi~listMessagesApiV1AppAppIdMsgGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseMessageOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Messages
     * List all of the application's messages.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed. The `after` parameter lets you filter all items created after a certain date and is ignored if an iterator is passed. `before` and `after` cannot be used simultaneously.
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [iterator] 
     * @param {Number} [limit = 50)] 
     * @param {Array.<String>} [eventTypes] 
     * @param {String} [channel] 
     * @param {Date} [before] 
     * @param {Date} [after] 
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/MessageApi~listMessagesApiV1AppAppIdMsgGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseMessageOut}
     */
    listMessagesApiV1AppAppIdMsgGet(appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listMessagesApiV1AppAppIdMsgGet");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
        'iterator': opts['iterator'],
        'limit': opts['limit'],
        'event_types': this.apiClient.buildCollectionParam(opts['eventTypes'], 'multi'),
        'channel': opts['channel'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListResponseMessageOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/msg/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
