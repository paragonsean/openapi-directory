/**
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import HttpErrorOut from '../model/HttpErrorOut';
import ListResponseEndpointMessageOut from '../model/ListResponseEndpointMessageOut';
import ListResponseMessageAttemptEndpointOut from '../model/ListResponseMessageAttemptEndpointOut';
import ListResponseMessageAttemptOut from '../model/ListResponseMessageAttemptOut';
import ListResponseMessageEndpointOut from '../model/ListResponseMessageEndpointOut';
import MessageAttemptOut from '../model/MessageAttemptOut';
import MessageStatus from '../model/MessageStatus';
import StatusCodeClass from '../model/StatusCodeClass';

/**
* MessageAttempt service.
* @module api/MessageAttemptApi
* @version 1.4
*/
export default class MessageAttemptApi {

    /**
    * Constructs a new MessageAttemptApi. 
    * @alias module:api/MessageAttemptApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDelete operation.
     * @callback module:api/MessageAttemptApi~expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete attempt response body
     * Deletes the given attempt's response body. Useful when an endpoint accidentally returned sensitive content.
     * @param {String} attemptId 
     * @param {String} msgId 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/MessageAttemptApi~expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDelete(attemptId, msgId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'attemptId' is set
      if (attemptId === undefined || attemptId === null) {
        throw new Error("Missing the required parameter 'attemptId' when calling expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDelete");
      }
      // verify the required parameter 'msgId' is set
      if (msgId === undefined || msgId === null) {
        throw new Error("Missing the required parameter 'msgId' when calling expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDelete");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDelete");
      }

      let pathParams = {
        'attempt_id': attemptId,
        'msg_id': msgId,
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet operation.
     * @callback module:api/MessageAttemptApi~getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageAttemptOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Attempt
     * `msg_id`: Use a message id or a message `eventId`
     * @param {String} attemptId 
     * @param {String} msgId 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/MessageAttemptApi~getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageAttemptOut}
     */
    getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(attemptId, msgId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'attemptId' is set
      if (attemptId === undefined || attemptId === null) {
        throw new Error("Missing the required parameter 'attemptId' when calling getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet");
      }
      // verify the required parameter 'msgId' is set
      if (msgId === undefined || msgId === null) {
        throw new Error("Missing the required parameter 'msgId' when calling getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet");
      }

      let pathParams = {
        'attempt_id': attemptId,
        'msg_id': msgId,
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageAttemptOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet operation.
     * @callback module:api/MessageAttemptApi~listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseMessageEndpointOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Attempted Destinations
     * `msg_id`: Use a message id or a message `eventId`
     * @param {String} msgId 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [iterator] 
     * @param {Number} [limit = 50)] 
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/MessageAttemptApi~listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseMessageEndpointOut}
     */
    listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(msgId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'msgId' is set
      if (msgId === undefined || msgId === null) {
        throw new Error("Missing the required parameter 'msgId' when calling listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet");
      }

      let pathParams = {
        'msg_id': msgId,
        'app_id': appId
      };
      let queryParams = {
        'iterator': opts['iterator'],
        'limit': opts['limit']
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListResponseMessageEndpointOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet operation.
     * @callback module:api/MessageAttemptApi~listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseEndpointMessageOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Attempted Messages
     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.
     * @param {String} endpointId 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [iterator] 
     * @param {Number} [limit = 50)] 
     * @param {String} [channel] 
     * @param {module:model/MessageStatus} [status] 
     * @param {Date} [before] 
     * @param {Date} [after] 
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/MessageAttemptApi~listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseEndpointMessageOut}
     */
    listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(endpointId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet");
      }

      let pathParams = {
        'endpoint_id': endpointId,
        'app_id': appId
      };
      let queryParams = {
        'iterator': opts['iterator'],
        'limit': opts['limit'],
        'channel': opts['channel'],
        'status': opts['status'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListResponseEndpointMessageOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet operation.
     * @callback module:api/MessageAttemptApi~listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseMessageAttemptOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Attempts
     * Deprecated: Please use \"List Attempts by Endpoint\" and \"List Attempts by Msg\" instead.  `msg_id`: Use a message id or a message `eventId`
     * @param {String} appId 
     * @param {String} msgId 
     * @param {Object} opts Optional parameters
     * @param {String} [iterator] 
     * @param {Number} [limit = 50)] 
     * @param {String} [endpointId] 
     * @param {Array.<String>} [eventTypes] 
     * @param {String} [channel] 
     * @param {module:model/MessageStatus} [status] 
     * @param {Date} [before] 
     * @param {Date} [after] 
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/MessageAttemptApi~listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseMessageAttemptOut}
     */
    listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(appId, msgId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet");
      }
      // verify the required parameter 'msgId' is set
      if (msgId === undefined || msgId === null) {
        throw new Error("Missing the required parameter 'msgId' when calling listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet");
      }

      let pathParams = {
        'app_id': appId,
        'msg_id': msgId
      };
      let queryParams = {
        'iterator': opts['iterator'],
        'limit': opts['limit'],
        'endpoint_id': opts['endpointId'],
        'event_types': this.apiClient.buildCollectionParam(opts['eventTypes'], 'multi'),
        'channel': opts['channel'],
        'status': opts['status'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListResponseMessageAttemptOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/msg/{msg_id}/attempt/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet operation.
     * @callback module:api/MessageAttemptApi~listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseMessageAttemptOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Attempts By Endpoint
     * List attempts by endpoint id
     * @param {String} appId 
     * @param {String} endpointId 
     * @param {Object} opts Optional parameters
     * @param {String} [iterator] 
     * @param {Number} [limit = 50)] 
     * @param {module:model/MessageStatus} [status] 
     * @param {module:model/StatusCodeClass} [statusCodeClass] 
     * @param {Array.<String>} [eventTypes] 
     * @param {String} [channel] 
     * @param {Date} [before] 
     * @param {Date} [after] 
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/MessageAttemptApi~listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseMessageAttemptOut}
     */
    listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet(appId, endpointId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet");
      }

      let pathParams = {
        'app_id': appId,
        'endpoint_id': endpointId
      };
      let queryParams = {
        'iterator': opts['iterator'],
        'limit': opts['limit'],
        'status': opts['status'],
        'status_code_class': opts['statusCodeClass'],
        'event_types': this.apiClient.buildCollectionParam(opts['eventTypes'], 'multi'),
        'channel': opts['channel'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListResponseMessageAttemptOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet operation.
     * @callback module:api/MessageAttemptApi~listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseMessageAttemptOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Attempts By Msg
     * List attempts by message id
     * @param {String} appId 
     * @param {String} msgId 
     * @param {Object} opts Optional parameters
     * @param {String} [endpointId] 
     * @param {String} [iterator] 
     * @param {Number} [limit = 50)] 
     * @param {module:model/MessageStatus} [status] 
     * @param {module:model/StatusCodeClass} [statusCodeClass] 
     * @param {Array.<String>} [eventTypes] 
     * @param {String} [channel] 
     * @param {Date} [before] 
     * @param {Date} [after] 
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/MessageAttemptApi~listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseMessageAttemptOut}
     */
    listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet(appId, msgId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet");
      }
      // verify the required parameter 'msgId' is set
      if (msgId === undefined || msgId === null) {
        throw new Error("Missing the required parameter 'msgId' when calling listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet");
      }

      let pathParams = {
        'app_id': appId,
        'msg_id': msgId
      };
      let queryParams = {
        'endpoint_id': opts['endpointId'],
        'iterator': opts['iterator'],
        'limit': opts['limit'],
        'status': opts['status'],
        'status_code_class': opts['statusCodeClass'],
        'event_types': this.apiClient.buildCollectionParam(opts['eventTypes'], 'multi'),
        'channel': opts['channel'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListResponseMessageAttemptOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/attempt/msg/{msg_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet operation.
     * @callback module:api/MessageAttemptApi~listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponseMessageAttemptEndpointOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Attempts For Endpoint
     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.
     * @param {String} msgId 
     * @param {String} appId 
     * @param {String} endpointId 
     * @param {Object} opts Optional parameters
     * @param {String} [iterator] 
     * @param {Number} [limit = 50)] 
     * @param {Array.<String>} [eventTypes] 
     * @param {String} [channel] 
     * @param {module:model/MessageStatus} [status] 
     * @param {Date} [before] 
     * @param {Date} [after] 
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/MessageAttemptApi~listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponseMessageAttemptEndpointOut}
     */
    listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(msgId, appId, endpointId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'msgId' is set
      if (msgId === undefined || msgId === null) {
        throw new Error("Missing the required parameter 'msgId' when calling listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet");
      }

      let pathParams = {
        'msg_id': msgId,
        'app_id': appId,
        'endpoint_id': endpointId
      };
      let queryParams = {
        'iterator': opts['iterator'],
        'limit': opts['limit'],
        'event_types': this.apiClient.buildCollectionParam(opts['eventTypes'], 'multi'),
        'channel': opts['channel'],
        'status': opts['status'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListResponseMessageAttemptEndpointOut;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost operation.
     * @callback module:api/MessageAttemptApi~resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend Webhook
     * Resend a message to the specified endpoint.
     * @param {String} endpointId 
     * @param {String} msgId 
     * @param {String} appId 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] The request's idempotency key
     * @param {module:api/MessageAttemptApi~resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(endpointId, msgId, appId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost");
      }
      // verify the required parameter 'msgId' is set
      if (msgId === undefined || msgId === null) {
        throw new Error("Missing the required parameter 'msgId' when calling resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost");
      }

      let pathParams = {
        'endpoint_id': endpointId,
        'msg_id': msgId,
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
        'idempotency-key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
