/*
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.HttpErrorOut;
import org.openapitools.client.model.ListResponseEndpointMessageOut;
import org.openapitools.client.model.ListResponseMessageAttemptEndpointOut;
import org.openapitools.client.model.ListResponseMessageAttemptOut;
import org.openapitools.client.model.ListResponseMessageEndpointOut;
import org.openapitools.client.model.MessageAttemptOut;
import org.openapitools.client.model.MessageStatus;
import java.time.OffsetDateTime;
import org.openapitools.client.model.StatusCodeClass;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessageAttemptApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessageAttemptApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageAttemptApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDelete
     * @param attemptId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteCall(String attemptId, String msgId, String appId, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content/"
            .replace("{" + "attempt_id" + "}", localVarApiClient.escapeString(attemptId.toString()))
            .replace("{" + "msg_id" + "}", localVarApiClient.escapeString(msgId.toString()))
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteValidateBeforeCall(String attemptId, String msgId, String appId, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attemptId' is set
        if (attemptId == null) {
            throw new ApiException("Missing the required parameter 'attemptId' when calling expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDelete(Async)");
        }

        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDelete(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDelete(Async)");
        }

        return expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteCall(attemptId, msgId, appId, idempotencyKey, _callback);

    }

    /**
     * Delete attempt response body
     * Deletes the given attempt&#39;s response body. Useful when an endpoint accidentally returned sensitive content.
     * @param attemptId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDelete(String attemptId, String msgId, String appId, String idempotencyKey) throws ApiException {
        expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteWithHttpInfo(attemptId, msgId, appId, idempotencyKey);
    }

    /**
     * Delete attempt response body
     * Deletes the given attempt&#39;s response body. Useful when an endpoint accidentally returned sensitive content.
     * @param attemptId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteWithHttpInfo(String attemptId, String msgId, String appId, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteValidateBeforeCall(attemptId, msgId, appId, idempotencyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete attempt response body (asynchronously)
     * Deletes the given attempt&#39;s response body. Useful when an endpoint accidentally returned sensitive content.
     * @param attemptId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteAsync(String attemptId, String msgId, String appId, String idempotencyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteValidateBeforeCall(attemptId, msgId, appId, idempotencyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet
     * @param attemptId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetCall(String attemptId, String msgId, String appId, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/"
            .replace("{" + "attempt_id" + "}", localVarApiClient.escapeString(attemptId.toString()))
            .replace("{" + "msg_id" + "}", localVarApiClient.escapeString(msgId.toString()))
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetValidateBeforeCall(String attemptId, String msgId, String appId, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attemptId' is set
        if (attemptId == null) {
            throw new ApiException("Missing the required parameter 'attemptId' when calling getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(Async)");
        }

        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(Async)");
        }

        return getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetCall(attemptId, msgId, appId, idempotencyKey, _callback);

    }

    /**
     * Get Attempt
     * &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param attemptId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return MessageAttemptOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public MessageAttemptOut getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(String attemptId, String msgId, String appId, String idempotencyKey) throws ApiException {
        ApiResponse<MessageAttemptOut> localVarResp = getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetWithHttpInfo(attemptId, msgId, appId, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Get Attempt
     * &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param attemptId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;MessageAttemptOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageAttemptOut> getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetWithHttpInfo(String attemptId, String msgId, String appId, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetValidateBeforeCall(attemptId, msgId, appId, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<MessageAttemptOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Attempt (asynchronously)
     * &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param attemptId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetAsync(String attemptId, String msgId, String appId, String idempotencyKey, final ApiCallback<MessageAttemptOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetValidateBeforeCall(attemptId, msgId, appId, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<MessageAttemptOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet
     * @param msgId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetCall(String msgId, String appId, String iterator, Integer limit, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/"
            .replace("{" + "msg_id" + "}", localVarApiClient.escapeString(msgId.toString()))
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetValidateBeforeCall(String msgId, String appId, String iterator, Integer limit, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(Async)");
        }

        return listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetCall(msgId, appId, iterator, limit, idempotencyKey, _callback);

    }

    /**
     * List Attempted Destinations
     * &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param msgId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ListResponseMessageEndpointOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseMessageEndpointOut listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(String msgId, String appId, String iterator, Integer limit, String idempotencyKey) throws ApiException {
        ApiResponse<ListResponseMessageEndpointOut> localVarResp = listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetWithHttpInfo(msgId, appId, iterator, limit, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * List Attempted Destinations
     * &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param msgId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;ListResponseMessageEndpointOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseMessageEndpointOut> listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetWithHttpInfo(String msgId, String appId, String iterator, Integer limit, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetValidateBeforeCall(msgId, appId, iterator, limit, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<ListResponseMessageEndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempted Destinations (asynchronously)
     * &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param msgId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetAsync(String msgId, String appId, String iterator, Integer limit, String idempotencyKey, final ApiCallback<ListResponseMessageEndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetValidateBeforeCall(msgId, appId, iterator, limit, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<ListResponseMessageEndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet
     * @param endpointId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param channel  (optional)
     * @param status  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetCall(String endpointId, String appId, String iterator, Integer limit, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/"
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()))
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetValidateBeforeCall(String endpointId, String appId, String iterator, Integer limit, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(Async)");
        }

        return listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetCall(endpointId, appId, iterator, limit, channel, status, before, after, idempotencyKey, _callback);

    }

    /**
     * List Attempted Messages
     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The &#x60;before&#x60; parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.
     * @param endpointId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param channel  (optional)
     * @param status  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ListResponseEndpointMessageOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseEndpointMessageOut listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(String endpointId, String appId, String iterator, Integer limit, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey) throws ApiException {
        ApiResponse<ListResponseEndpointMessageOut> localVarResp = listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetWithHttpInfo(endpointId, appId, iterator, limit, channel, status, before, after, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * List Attempted Messages
     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The &#x60;before&#x60; parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.
     * @param endpointId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param channel  (optional)
     * @param status  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;ListResponseEndpointMessageOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseEndpointMessageOut> listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetWithHttpInfo(String endpointId, String appId, String iterator, Integer limit, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetValidateBeforeCall(endpointId, appId, iterator, limit, channel, status, before, after, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<ListResponseEndpointMessageOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempted Messages (asynchronously)
     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The &#x60;before&#x60; parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.
     * @param endpointId  (required)
     * @param appId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param channel  (optional)
     * @param status  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetAsync(String endpointId, String appId, String iterator, Integer limit, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback<ListResponseEndpointMessageOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetValidateBeforeCall(endpointId, appId, iterator, limit, channel, status, before, after, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<ListResponseEndpointMessageOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet
     * @param appId  (required)
     * @param msgId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param endpointId  (optional)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param status  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetCall(String appId, String msgId, String iterator, Integer limit, String endpointId, List<String> eventTypes, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/attempt/"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "msg_id" + "}", localVarApiClient.escapeString(msgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (endpointId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endpoint_id", endpointId));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "event_types", eventTypes));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetValidateBeforeCall(String appId, String msgId, String iterator, Integer limit, String endpointId, List<String> eventTypes, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(Async)");
        }

        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(Async)");
        }

        return listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetCall(appId, msgId, iterator, limit, endpointId, eventTypes, channel, status, before, after, idempotencyKey, _callback);

    }

    /**
     * List Attempts
     * Deprecated: Please use \&quot;List Attempts by Endpoint\&quot; and \&quot;List Attempts by Msg\&quot; instead.  &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param appId  (required)
     * @param msgId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param endpointId  (optional)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param status  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ListResponseMessageAttemptOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListResponseMessageAttemptOut listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(String appId, String msgId, String iterator, Integer limit, String endpointId, List<String> eventTypes, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey) throws ApiException {
        ApiResponse<ListResponseMessageAttemptOut> localVarResp = listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetWithHttpInfo(appId, msgId, iterator, limit, endpointId, eventTypes, channel, status, before, after, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * List Attempts
     * Deprecated: Please use \&quot;List Attempts by Endpoint\&quot; and \&quot;List Attempts by Msg\&quot; instead.  &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param appId  (required)
     * @param msgId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param endpointId  (optional)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param status  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;ListResponseMessageAttemptOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListResponseMessageAttemptOut> listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetWithHttpInfo(String appId, String msgId, String iterator, Integer limit, String endpointId, List<String> eventTypes, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetValidateBeforeCall(appId, msgId, iterator, limit, endpointId, eventTypes, channel, status, before, after, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempts (asynchronously)
     * Deprecated: Please use \&quot;List Attempts by Endpoint\&quot; and \&quot;List Attempts by Msg\&quot; instead.  &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param appId  (required)
     * @param msgId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param endpointId  (optional)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param status  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetAsync(String appId, String msgId, String iterator, Integer limit, String endpointId, List<String> eventTypes, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback<ListResponseMessageAttemptOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetValidateBeforeCall(appId, msgId, iterator, limit, endpointId, eventTypes, channel, status, before, after, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet
     * @param appId  (required)
     * @param endpointId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @param statusCodeClass  (optional)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetCall(String appId, String endpointId, String iterator, Integer limit, MessageStatus status, StatusCodeClass statusCodeClass, List<String> eventTypes, String channel, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}/"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (statusCodeClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status_code_class", statusCodeClass));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "event_types", eventTypes));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetValidateBeforeCall(String appId, String endpointId, String iterator, Integer limit, MessageStatus status, StatusCodeClass statusCodeClass, List<String> eventTypes, String channel, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet(Async)");
        }

        return listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetCall(appId, endpointId, iterator, limit, status, statusCodeClass, eventTypes, channel, before, after, idempotencyKey, _callback);

    }

    /**
     * List Attempts By Endpoint
     * List attempts by endpoint id
     * @param appId  (required)
     * @param endpointId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @param statusCodeClass  (optional)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ListResponseMessageAttemptOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseMessageAttemptOut listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet(String appId, String endpointId, String iterator, Integer limit, MessageStatus status, StatusCodeClass statusCodeClass, List<String> eventTypes, String channel, OffsetDateTime before, OffsetDateTime after, String idempotencyKey) throws ApiException {
        ApiResponse<ListResponseMessageAttemptOut> localVarResp = listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetWithHttpInfo(appId, endpointId, iterator, limit, status, statusCodeClass, eventTypes, channel, before, after, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * List Attempts By Endpoint
     * List attempts by endpoint id
     * @param appId  (required)
     * @param endpointId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @param statusCodeClass  (optional)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;ListResponseMessageAttemptOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseMessageAttemptOut> listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetWithHttpInfo(String appId, String endpointId, String iterator, Integer limit, MessageStatus status, StatusCodeClass statusCodeClass, List<String> eventTypes, String channel, OffsetDateTime before, OffsetDateTime after, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetValidateBeforeCall(appId, endpointId, iterator, limit, status, statusCodeClass, eventTypes, channel, before, after, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempts By Endpoint (asynchronously)
     * List attempts by endpoint id
     * @param appId  (required)
     * @param endpointId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @param statusCodeClass  (optional)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetAsync(String appId, String endpointId, String iterator, Integer limit, MessageStatus status, StatusCodeClass statusCodeClass, List<String> eventTypes, String channel, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback<ListResponseMessageAttemptOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetValidateBeforeCall(appId, endpointId, iterator, limit, status, statusCodeClass, eventTypes, channel, before, after, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet
     * @param appId  (required)
     * @param msgId  (required)
     * @param endpointId  (optional)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @param statusCodeClass  (optional)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetCall(String appId, String msgId, String endpointId, String iterator, Integer limit, MessageStatus status, StatusCodeClass statusCodeClass, List<String> eventTypes, String channel, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/attempt/msg/{msg_id}/"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "msg_id" + "}", localVarApiClient.escapeString(msgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endpointId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endpoint_id", endpointId));
        }

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (statusCodeClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status_code_class", statusCodeClass));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "event_types", eventTypes));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetValidateBeforeCall(String appId, String msgId, String endpointId, String iterator, Integer limit, MessageStatus status, StatusCodeClass statusCodeClass, List<String> eventTypes, String channel, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet(Async)");
        }

        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet(Async)");
        }

        return listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetCall(appId, msgId, endpointId, iterator, limit, status, statusCodeClass, eventTypes, channel, before, after, idempotencyKey, _callback);

    }

    /**
     * List Attempts By Msg
     * List attempts by message id
     * @param appId  (required)
     * @param msgId  (required)
     * @param endpointId  (optional)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @param statusCodeClass  (optional)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ListResponseMessageAttemptOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseMessageAttemptOut listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet(String appId, String msgId, String endpointId, String iterator, Integer limit, MessageStatus status, StatusCodeClass statusCodeClass, List<String> eventTypes, String channel, OffsetDateTime before, OffsetDateTime after, String idempotencyKey) throws ApiException {
        ApiResponse<ListResponseMessageAttemptOut> localVarResp = listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetWithHttpInfo(appId, msgId, endpointId, iterator, limit, status, statusCodeClass, eventTypes, channel, before, after, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * List Attempts By Msg
     * List attempts by message id
     * @param appId  (required)
     * @param msgId  (required)
     * @param endpointId  (optional)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @param statusCodeClass  (optional)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;ListResponseMessageAttemptOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseMessageAttemptOut> listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetWithHttpInfo(String appId, String msgId, String endpointId, String iterator, Integer limit, MessageStatus status, StatusCodeClass statusCodeClass, List<String> eventTypes, String channel, OffsetDateTime before, OffsetDateTime after, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetValidateBeforeCall(appId, msgId, endpointId, iterator, limit, status, statusCodeClass, eventTypes, channel, before, after, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempts By Msg (asynchronously)
     * List attempts by message id
     * @param appId  (required)
     * @param msgId  (required)
     * @param endpointId  (optional)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param status  (optional)
     * @param statusCodeClass  (optional)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetAsync(String appId, String msgId, String endpointId, String iterator, Integer limit, MessageStatus status, StatusCodeClass statusCodeClass, List<String> eventTypes, String channel, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback<ListResponseMessageAttemptOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetValidateBeforeCall(appId, msgId, endpointId, iterator, limit, status, statusCodeClass, eventTypes, channel, before, after, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet
     * @param msgId  (required)
     * @param appId  (required)
     * @param endpointId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param status  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetCall(String msgId, String appId, String endpointId, String iterator, Integer limit, List<String> eventTypes, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt/"
            .replace("{" + "msg_id" + "}", localVarApiClient.escapeString(msgId.toString()))
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "event_types", eventTypes));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetValidateBeforeCall(String msgId, String appId, String endpointId, String iterator, Integer limit, List<String> eventTypes, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(Async)");
        }

        return listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetCall(msgId, appId, endpointId, iterator, limit, eventTypes, channel, status, before, after, idempotencyKey, _callback);

    }

    /**
     * List Attempts For Endpoint
     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The &#x60;before&#x60; parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.
     * @param msgId  (required)
     * @param appId  (required)
     * @param endpointId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param status  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ListResponseMessageAttemptEndpointOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListResponseMessageAttemptEndpointOut listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(String msgId, String appId, String endpointId, String iterator, Integer limit, List<String> eventTypes, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey) throws ApiException {
        ApiResponse<ListResponseMessageAttemptEndpointOut> localVarResp = listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetWithHttpInfo(msgId, appId, endpointId, iterator, limit, eventTypes, channel, status, before, after, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * List Attempts For Endpoint
     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The &#x60;before&#x60; parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.
     * @param msgId  (required)
     * @param appId  (required)
     * @param endpointId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param status  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;ListResponseMessageAttemptEndpointOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListResponseMessageAttemptEndpointOut> listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetWithHttpInfo(String msgId, String appId, String endpointId, String iterator, Integer limit, List<String> eventTypes, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetValidateBeforeCall(msgId, appId, endpointId, iterator, limit, eventTypes, channel, status, before, after, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptEndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempts For Endpoint (asynchronously)
     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The &#x60;before&#x60; parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.
     * @param msgId  (required)
     * @param appId  (required)
     * @param endpointId  (required)
     * @param iterator  (optional)
     * @param limit  (optional, default to 50)
     * @param eventTypes  (optional)
     * @param channel  (optional)
     * @param status  (optional)
     * @param before  (optional)
     * @param after  (optional)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetAsync(String msgId, String appId, String endpointId, String iterator, Integer limit, List<String> eventTypes, String channel, MessageStatus status, OffsetDateTime before, OffsetDateTime after, String idempotencyKey, final ApiCallback<ListResponseMessageAttemptEndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetValidateBeforeCall(msgId, appId, endpointId, iterator, limit, eventTypes, channel, status, before, after, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptEndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost
     * @param endpointId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostCall(String endpointId, String msgId, String appId, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend/"
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()))
            .replace("{" + "msg_id" + "}", localVarApiClient.escapeString(msgId.toString()))
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostValidateBeforeCall(String endpointId, String msgId, String appId, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(Async)");
        }

        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(Async)");
        }

        return resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostCall(endpointId, msgId, appId, idempotencyKey, _callback);

    }

    /**
     * Resend Webhook
     * Resend a message to the specified endpoint.
     * @param endpointId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(String endpointId, String msgId, String appId, String idempotencyKey) throws ApiException {
        resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostWithHttpInfo(endpointId, msgId, appId, idempotencyKey);
    }

    /**
     * Resend Webhook
     * Resend a message to the specified endpoint.
     * @param endpointId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostWithHttpInfo(String endpointId, String msgId, String appId, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostValidateBeforeCall(endpointId, msgId, appId, idempotencyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend Webhook (asynchronously)
     * Resend a message to the specified endpoint.
     * @param endpointId  (required)
     * @param msgId  (required)
     * @param appId  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostAsync(String endpointId, String msgId, String appId, String idempotencyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostValidateBeforeCall(endpointId, msgId, appId, idempotencyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
