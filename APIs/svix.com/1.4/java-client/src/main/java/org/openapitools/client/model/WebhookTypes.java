/*
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BackgroundTaskFinishedEvent;
import org.openapitools.client.model.EndpointCreatedEvent;
import org.openapitools.client.model.EndpointDeletedEvent;
import org.openapitools.client.model.EndpointDisabledEvent;
import org.openapitools.client.model.EndpointUpdatedEvent;
import org.openapitools.client.model.MessageAttemptExhaustedEvent;
import org.openapitools.client.model.MessageAttemptFailingEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * All of the webhook types that we support
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:40.646916-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebhookTypes {
  public static final String SERIALIZED_NAME_A = "a";
  @SerializedName(SERIALIZED_NAME_A)
  private EndpointDisabledEvent a;

  public static final String SERIALIZED_NAME_A1 = "a1";
  @SerializedName(SERIALIZED_NAME_A1)
  private MessageAttemptFailingEvent a1;

  public static final String SERIALIZED_NAME_A2 = "a2";
  @SerializedName(SERIALIZED_NAME_A2)
  private BackgroundTaskFinishedEvent a2;

  public static final String SERIALIZED_NAME_B = "b";
  @SerializedName(SERIALIZED_NAME_B)
  private EndpointCreatedEvent b;

  public static final String SERIALIZED_NAME_C = "c";
  @SerializedName(SERIALIZED_NAME_C)
  private EndpointUpdatedEvent c;

  public static final String SERIALIZED_NAME_D = "d";
  @SerializedName(SERIALIZED_NAME_D)
  private EndpointDeletedEvent d;

  public static final String SERIALIZED_NAME_E = "e";
  @SerializedName(SERIALIZED_NAME_E)
  private MessageAttemptExhaustedEvent e;

  public WebhookTypes() {
  }

  public WebhookTypes a(EndpointDisabledEvent a) {
    this.a = a;
    return this;
  }

  /**
   * Get a
   * @return a
   */
  @javax.annotation.Nonnull
  public EndpointDisabledEvent getA() {
    return a;
  }

  public void setA(EndpointDisabledEvent a) {
    this.a = a;
  }


  public WebhookTypes a1(MessageAttemptFailingEvent a1) {
    this.a1 = a1;
    return this;
  }

  /**
   * Get a1
   * @return a1
   */
  @javax.annotation.Nonnull
  public MessageAttemptFailingEvent getA1() {
    return a1;
  }

  public void setA1(MessageAttemptFailingEvent a1) {
    this.a1 = a1;
  }


  public WebhookTypes a2(BackgroundTaskFinishedEvent a2) {
    this.a2 = a2;
    return this;
  }

  /**
   * Get a2
   * @return a2
   */
  @javax.annotation.Nonnull
  public BackgroundTaskFinishedEvent getA2() {
    return a2;
  }

  public void setA2(BackgroundTaskFinishedEvent a2) {
    this.a2 = a2;
  }


  public WebhookTypes b(EndpointCreatedEvent b) {
    this.b = b;
    return this;
  }

  /**
   * Get b
   * @return b
   */
  @javax.annotation.Nonnull
  public EndpointCreatedEvent getB() {
    return b;
  }

  public void setB(EndpointCreatedEvent b) {
    this.b = b;
  }


  public WebhookTypes c(EndpointUpdatedEvent c) {
    this.c = c;
    return this;
  }

  /**
   * Get c
   * @return c
   */
  @javax.annotation.Nonnull
  public EndpointUpdatedEvent getC() {
    return c;
  }

  public void setC(EndpointUpdatedEvent c) {
    this.c = c;
  }


  public WebhookTypes d(EndpointDeletedEvent d) {
    this.d = d;
    return this;
  }

  /**
   * Get d
   * @return d
   */
  @javax.annotation.Nonnull
  public EndpointDeletedEvent getD() {
    return d;
  }

  public void setD(EndpointDeletedEvent d) {
    this.d = d;
  }


  public WebhookTypes e(MessageAttemptExhaustedEvent e) {
    this.e = e;
    return this;
  }

  /**
   * Get e
   * @return e
   */
  @javax.annotation.Nonnull
  public MessageAttemptExhaustedEvent getE() {
    return e;
  }

  public void setE(MessageAttemptExhaustedEvent e) {
    this.e = e;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookTypes webhookTypes = (WebhookTypes) o;
    return Objects.equals(this.a, webhookTypes.a) &&
        Objects.equals(this.a1, webhookTypes.a1) &&
        Objects.equals(this.a2, webhookTypes.a2) &&
        Objects.equals(this.b, webhookTypes.b) &&
        Objects.equals(this.c, webhookTypes.c) &&
        Objects.equals(this.d, webhookTypes.d) &&
        Objects.equals(this.e, webhookTypes.e);
  }

  @Override
  public int hashCode() {
    return Objects.hash(a, a1, a2, b, c, d, e);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookTypes {\n");
    sb.append("    a: ").append(toIndentedString(a)).append("\n");
    sb.append("    a1: ").append(toIndentedString(a1)).append("\n");
    sb.append("    a2: ").append(toIndentedString(a2)).append("\n");
    sb.append("    b: ").append(toIndentedString(b)).append("\n");
    sb.append("    c: ").append(toIndentedString(c)).append("\n");
    sb.append("    d: ").append(toIndentedString(d)).append("\n");
    sb.append("    e: ").append(toIndentedString(e)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("a");
    openapiFields.add("a1");
    openapiFields.add("a2");
    openapiFields.add("b");
    openapiFields.add("c");
    openapiFields.add("d");
    openapiFields.add("e");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("a");
    openapiRequiredFields.add("a1");
    openapiRequiredFields.add("a2");
    openapiRequiredFields.add("b");
    openapiRequiredFields.add("c");
    openapiRequiredFields.add("d");
    openapiRequiredFields.add("e");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookTypes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookTypes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookTypes is not found in the empty JSON string", WebhookTypes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookTypes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookTypes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookTypes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `a`
      EndpointDisabledEvent.validateJsonElement(jsonObj.get("a"));
      // validate the required field `a1`
      MessageAttemptFailingEvent.validateJsonElement(jsonObj.get("a1"));
      // validate the required field `a2`
      BackgroundTaskFinishedEvent.validateJsonElement(jsonObj.get("a2"));
      // validate the required field `b`
      EndpointCreatedEvent.validateJsonElement(jsonObj.get("b"));
      // validate the required field `c`
      EndpointUpdatedEvent.validateJsonElement(jsonObj.get("c"));
      // validate the required field `d`
      EndpointDeletedEvent.validateJsonElement(jsonObj.get("d"));
      // validate the required field `e`
      MessageAttemptExhaustedEvent.validateJsonElement(jsonObj.get("e"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookTypes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookTypes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookTypes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookTypes.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookTypes>() {
           @Override
           public void write(JsonWriter out, WebhookTypes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookTypes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookTypes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookTypes
   * @throws IOException if the JSON string is invalid with respect to WebhookTypes
   */
  public static WebhookTypes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookTypes.class);
  }

  /**
   * Convert an instance of WebhookTypes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

