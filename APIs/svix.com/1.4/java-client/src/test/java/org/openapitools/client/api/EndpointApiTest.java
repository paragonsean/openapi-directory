/*
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EndpointHeadersIn;
import org.openapitools.client.model.EndpointHeadersOut;
import org.openapitools.client.model.EndpointHeadersPatchIn;
import org.openapitools.client.model.EndpointIn;
import org.openapitools.client.model.EndpointOut;
import org.openapitools.client.model.EndpointSecretOut;
import org.openapitools.client.model.EndpointSecretRotateIn;
import org.openapitools.client.model.EndpointStats;
import org.openapitools.client.model.EndpointTransformationIn;
import org.openapitools.client.model.EndpointTransformationOut;
import org.openapitools.client.model.EndpointUpdate;
import org.openapitools.client.model.EventExampleIn;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.HttpErrorOut;
import org.openapitools.client.model.ListResponseEndpointOut;
import org.openapitools.client.model.MessageOut;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Ordering;
import org.openapitools.client.model.RecoverIn;
import org.openapitools.client.model.RecoverOut;
import org.openapitools.client.model.ReplayIn;
import org.openapitools.client.model.ReplayOut;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EndpointApi
 */
@Disabled
public class EndpointApiTest {

    private final EndpointApi api = new EndpointApi();

    /**
     * Create Endpoint
     *
     * Create a new endpoint for the application.  When &#x60;secret&#x60; is &#x60;null&#x60; the secret is automatically generated (recommended)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEndpointApiV1AppAppIdEndpointPostTest() throws ApiException {
        String appId = null;
        EndpointIn endpointIn = null;
        String idempotencyKey = null;
        EndpointOut response = api.createEndpointApiV1AppAppIdEndpointPost(appId, endpointIn, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Delete Endpoint
     *
     * Delete an endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteTest() throws ApiException {
        String endpointId = null;
        String appId = null;
        String idempotencyKey = null;
        api.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(endpointId, appId, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Get Endpoint
     *
     * Get an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEndpointApiV1AppAppIdEndpointEndpointIdGetTest() throws ApiException {
        String endpointId = null;
        String appId = null;
        String idempotencyKey = null;
        EndpointOut response = api.getEndpointApiV1AppAppIdEndpointEndpointIdGet(endpointId, appId, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Get Endpoint Headers
     *
     * Get the additional headers to be sent with the webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetTest() throws ApiException {
        String endpointId = null;
        String appId = null;
        String idempotencyKey = null;
        EndpointHeadersOut response = api.getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet(endpointId, appId, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Get Endpoint Secret
     *
     * Get the endpoint&#39;s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetTest() throws ApiException {
        String endpointId = null;
        String appId = null;
        String idempotencyKey = null;
        EndpointSecretOut response = api.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(endpointId, appId, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Get Endpoint Stats
     *
     * Get basic statistics for the endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetTest() throws ApiException {
        String endpointId = null;
        String appId = null;
        OffsetDateTime since = null;
        OffsetDateTime until = null;
        String idempotencyKey = null;
        EndpointStats response = api.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(endpointId, appId, since, until, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Get Endpoint Transformation
     *
     * Get the transformation code associated with this endpoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGetTest() throws ApiException {
        String endpointId = null;
        String appId = null;
        String idempotencyKey = null;
        EndpointTransformationOut response = api.getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet(endpointId, appId, idempotencyKey);
        // TODO: test validations
    }

    /**
     * List Endpoints
     *
     * List the application&#39;s endpoints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEndpointsApiV1AppAppIdEndpointGetTest() throws ApiException {
        String appId = null;
        String iterator = null;
        Integer limit = null;
        Ordering order = null;
        String idempotencyKey = null;
        ListResponseEndpointOut response = api.listEndpointsApiV1AppAppIdEndpointGet(appId, iterator, limit, order, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Patch Endpoint Headers
     *
     * Partially set the additional headers to be sent with the webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointHeadersPatchIn endpointHeadersPatchIn = null;
        String idempotencyKey = null;
        api.patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch(appId, endpointId, endpointHeadersPatchIn, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Recover Failed Webhooks
     *
     * Resend all failed messages since a given time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        RecoverIn recoverIn = null;
        String idempotencyKey = null;
        RecoverOut response = api.recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost(appId, endpointId, recoverIn, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Replay Missing Webhooks
     *
     * Replays messages to the endpoint. Only messages that were created after &#x60;since&#x60; will be sent. Messages that were previously sent to the endpoint are not resent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        ReplayIn replayIn = null;
        String idempotencyKey = null;
        ReplayOut response = api.replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost(appId, endpointId, replayIn, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Rotate Endpoint Secret
     *
     * Rotates the endpoint&#39;s signing secret.  The previous secret will be valid for the next 24 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostTest() throws ApiException {
        String endpointId = null;
        String appId = null;
        EndpointSecretRotateIn endpointSecretRotateIn = null;
        String idempotencyKey = null;
        api.rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost(endpointId, appId, endpointSecretRotateIn, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Send Event Type Example Message
     *
     * Send an example message for event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EventExampleIn eventExampleIn = null;
        String idempotencyKey = null;
        MessageOut response = api.sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost(appId, endpointId, eventExampleIn, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Set Endpoint Transformation
     *
     * Set or unset the transformation code associated with this endpoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatchTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointTransformationIn endpointTransformationIn = null;
        String idempotencyKey = null;
        api.setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch(appId, endpointId, endpointTransformationIn, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Update Endpoint
     *
     * Update an endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEndpointApiV1AppAppIdEndpointEndpointIdPutTest() throws ApiException {
        String endpointId = null;
        String appId = null;
        EndpointUpdate endpointUpdate = null;
        String idempotencyKey = null;
        EndpointOut response = api.updateEndpointApiV1AppAppIdEndpointEndpointIdPut(endpointId, appId, endpointUpdate, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Update Endpoint Headers
     *
     * Set the additional headers to be sent with the webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointHeadersIn endpointHeadersIn = null;
        String idempotencyKey = null;
        api.updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut(appId, endpointId, endpointHeadersIn, idempotencyKey);
        // TODO: test validations
    }

}
