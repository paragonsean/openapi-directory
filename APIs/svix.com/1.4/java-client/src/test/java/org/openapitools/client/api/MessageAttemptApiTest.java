/*
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.HttpErrorOut;
import org.openapitools.client.model.ListResponseEndpointMessageOut;
import org.openapitools.client.model.ListResponseMessageAttemptEndpointOut;
import org.openapitools.client.model.ListResponseMessageAttemptOut;
import org.openapitools.client.model.ListResponseMessageEndpointOut;
import org.openapitools.client.model.MessageAttemptOut;
import org.openapitools.client.model.MessageStatus;
import java.time.OffsetDateTime;
import org.openapitools.client.model.StatusCodeClass;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessageAttemptApi
 */
@Disabled
public class MessageAttemptApiTest {

    private final MessageAttemptApi api = new MessageAttemptApi();

    /**
     * Delete attempt response body
     *
     * Deletes the given attempt&#39;s response body. Useful when an endpoint accidentally returned sensitive content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDeleteTest() throws ApiException {
        String attemptId = null;
        String msgId = null;
        String appId = null;
        String idempotencyKey = null;
        api.expungeAttemptContentApiV1AppAppIdMsgMsgIdAttemptAttemptIdContentDelete(attemptId, msgId, appId, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Get Attempt
     *
     * &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetTest() throws ApiException {
        String attemptId = null;
        String msgId = null;
        String appId = null;
        String idempotencyKey = null;
        MessageAttemptOut response = api.getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(attemptId, msgId, appId, idempotencyKey);
        // TODO: test validations
    }

    /**
     * List Attempted Destinations
     *
     * &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetTest() throws ApiException {
        String msgId = null;
        String appId = null;
        String iterator = null;
        Integer limit = null;
        String idempotencyKey = null;
        ListResponseMessageEndpointOut response = api.listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(msgId, appId, iterator, limit, idempotencyKey);
        // TODO: test validations
    }

    /**
     * List Attempted Messages
     *
     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The &#x60;before&#x60; parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetTest() throws ApiException {
        String endpointId = null;
        String appId = null;
        String iterator = null;
        Integer limit = null;
        String channel = null;
        MessageStatus status = null;
        OffsetDateTime before = null;
        OffsetDateTime after = null;
        String idempotencyKey = null;
        ListResponseEndpointMessageOut response = api.listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(endpointId, appId, iterator, limit, channel, status, before, after, idempotencyKey);
        // TODO: test validations
    }

    /**
     * List Attempts
     *
     * Deprecated: Please use \&quot;List Attempts by Endpoint\&quot; and \&quot;List Attempts by Msg\&quot; instead.  &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetTest() throws ApiException {
        String appId = null;
        String msgId = null;
        String iterator = null;
        Integer limit = null;
        String endpointId = null;
        List<String> eventTypes = null;
        String channel = null;
        MessageStatus status = null;
        OffsetDateTime before = null;
        OffsetDateTime after = null;
        String idempotencyKey = null;
        ListResponseMessageAttemptOut response = api.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(appId, msgId, iterator, limit, endpointId, eventTypes, channel, status, before, after, idempotencyKey);
        // TODO: test validations
    }

    /**
     * List Attempts By Endpoint
     *
     * List attempts by endpoint id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        String iterator = null;
        Integer limit = null;
        MessageStatus status = null;
        StatusCodeClass statusCodeClass = null;
        List<String> eventTypes = null;
        String channel = null;
        OffsetDateTime before = null;
        OffsetDateTime after = null;
        String idempotencyKey = null;
        ListResponseMessageAttemptOut response = api.listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet(appId, endpointId, iterator, limit, status, statusCodeClass, eventTypes, channel, before, after, idempotencyKey);
        // TODO: test validations
    }

    /**
     * List Attempts By Msg
     *
     * List attempts by message id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetTest() throws ApiException {
        String appId = null;
        String msgId = null;
        String endpointId = null;
        String iterator = null;
        Integer limit = null;
        MessageStatus status = null;
        StatusCodeClass statusCodeClass = null;
        List<String> eventTypes = null;
        String channel = null;
        OffsetDateTime before = null;
        OffsetDateTime after = null;
        String idempotencyKey = null;
        ListResponseMessageAttemptOut response = api.listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet(appId, msgId, endpointId, iterator, limit, status, statusCodeClass, eventTypes, channel, before, after, idempotencyKey);
        // TODO: test validations
    }

    /**
     * List Attempts For Endpoint
     *
     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The &#x60;before&#x60; parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetTest() throws ApiException {
        String msgId = null;
        String appId = null;
        String endpointId = null;
        String iterator = null;
        Integer limit = null;
        List<String> eventTypes = null;
        String channel = null;
        MessageStatus status = null;
        OffsetDateTime before = null;
        OffsetDateTime after = null;
        String idempotencyKey = null;
        ListResponseMessageAttemptEndpointOut response = api.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(msgId, appId, endpointId, iterator, limit, eventTypes, channel, status, before, after, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Resend Webhook
     *
     * Resend a message to the specified endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostTest() throws ApiException {
        String endpointId = null;
        String msgId = null;
        String appId = null;
        String idempotencyKey = null;
        api.resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(endpointId, msgId, appId, idempotencyKey);
        // TODO: test validations
    }

}
