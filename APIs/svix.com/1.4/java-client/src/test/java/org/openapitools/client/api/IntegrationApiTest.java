/*
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.HttpErrorOut;
import org.openapitools.client.model.IntegrationIn;
import org.openapitools.client.model.IntegrationKeyOut;
import org.openapitools.client.model.IntegrationOut;
import org.openapitools.client.model.IntegrationUpdate;
import org.openapitools.client.model.ListResponseIntegrationOut;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IntegrationApi
 */
@Disabled
public class IntegrationApiTest {

    private final IntegrationApi api = new IntegrationApi();

    /**
     * Create Integration
     *
     * Create an integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIntegrationApiV1AppAppIdIntegrationPostTest() throws ApiException {
        String appId = null;
        IntegrationIn integrationIn = null;
        String idempotencyKey = null;
        IntegrationOut response = api.createIntegrationApiV1AppAppIdIntegrationPost(appId, integrationIn, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Delete Integration
     *
     * Delete an integration and revoke it&#39;s key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIntegrationApiV1AppAppIdIntegrationIntegIdDeleteTest() throws ApiException {
        String integId = null;
        String appId = null;
        String idempotencyKey = null;
        api.deleteIntegrationApiV1AppAppIdIntegrationIntegIdDelete(integId, appId, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Get Integration
     *
     * Get an integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIntegrationApiV1AppAppIdIntegrationIntegIdGetTest() throws ApiException {
        String integId = null;
        String appId = null;
        String idempotencyKey = null;
        IntegrationOut response = api.getIntegrationApiV1AppAppIdIntegrationIntegIdGet(integId, appId, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Get Integration Key
     *
     * Get an integration&#39;s key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGetTest() throws ApiException {
        String integId = null;
        String appId = null;
        String idempotencyKey = null;
        IntegrationKeyOut response = api.getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGet(integId, appId, idempotencyKey);
        // TODO: test validations
    }

    /**
     * List Integrations
     *
     * List the application&#39;s integrations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIntegrationsApiV1AppAppIdIntegrationGetTest() throws ApiException {
        String appId = null;
        String iterator = null;
        Integer limit = null;
        String idempotencyKey = null;
        ListResponseIntegrationOut response = api.listIntegrationsApiV1AppAppIdIntegrationGet(appId, iterator, limit, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Rotate Integration Key
     *
     * Rotate the integration&#39;s key. The previous key will be immediately revoked.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePostTest() throws ApiException {
        String integId = null;
        String appId = null;
        String idempotencyKey = null;
        IntegrationKeyOut response = api.rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePost(integId, appId, idempotencyKey);
        // TODO: test validations
    }

    /**
     * Update Integration
     *
     * Update an integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIntegrationApiV1AppAppIdIntegrationIntegIdPutTest() throws ApiException {
        String integId = null;
        String appId = null;
        IntegrationUpdate integrationUpdate = null;
        String idempotencyKey = null;
        IntegrationOut response = api.updateIntegrationApiV1AppAppIdIntegrationIntegIdPut(integId, appId, integrationUpdate, idempotencyKey);
        // TODO: test validations
    }

}
