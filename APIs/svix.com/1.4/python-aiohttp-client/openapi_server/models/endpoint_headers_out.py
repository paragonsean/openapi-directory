# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EndpointHeadersOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, headers: Dict[str, str]=None, sensitive: list[str]=None):
        """EndpointHeadersOut - a model defined in OpenAPI

        :param headers: The headers of this EndpointHeadersOut.
        :param sensitive: The sensitive of this EndpointHeadersOut.
        """
        self.openapi_types = {
            'headers': Dict[str, str],
            'sensitive': list[str]
        }

        self.attribute_map = {
            'headers': 'headers',
            'sensitive': 'sensitive'
        }

        self._headers = headers
        self._sensitive = sensitive

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointHeadersOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointHeadersOut of this EndpointHeadersOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def headers(self):
        """Gets the headers of this EndpointHeadersOut.


        :return: The headers of this EndpointHeadersOut.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this EndpointHeadersOut.


        :param headers: The headers of this EndpointHeadersOut.
        :type headers: Dict[str, str]
        """
        if headers is None:
            raise ValueError("Invalid value for `headers`, must not be `None`")

        self._headers = headers

    @property
    def sensitive(self):
        """Gets the sensitive of this EndpointHeadersOut.


        :return: The sensitive of this EndpointHeadersOut.
        :rtype: list[str]
        """
        return self._sensitive

    @sensitive.setter
    def sensitive(self, sensitive):
        """Sets the sensitive of this EndpointHeadersOut.


        :param sensitive: The sensitive of this EndpointHeadersOut.
        :type sensitive: list[str]
        """
        if sensitive is None:
            raise ValueError("Invalid value for `sensitive`, must not be `None`")

        self._sensitive = sensitive
