# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ApplicationOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, id: str=None, metadata: Dict[str, str]=None, name: str=None, rate_limit: int=None, uid: str=None, updated_at: datetime=None):
        """ApplicationOut - a model defined in OpenAPI

        :param created_at: The created_at of this ApplicationOut.
        :param id: The id of this ApplicationOut.
        :param metadata: The metadata of this ApplicationOut.
        :param name: The name of this ApplicationOut.
        :param rate_limit: The rate_limit of this ApplicationOut.
        :param uid: The uid of this ApplicationOut.
        :param updated_at: The updated_at of this ApplicationOut.
        """
        self.openapi_types = {
            'created_at': datetime,
            'id': str,
            'metadata': Dict[str, str],
            'name': str,
            'rate_limit': int,
            'uid': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'id': 'id',
            'metadata': 'metadata',
            'name': 'name',
            'rate_limit': 'rateLimit',
            'uid': 'uid',
            'updated_at': 'updatedAt'
        }

        self._created_at = created_at
        self._id = id
        self._metadata = metadata
        self._name = name
        self._rate_limit = rate_limit
        self._uid = uid
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationOut of this ApplicationOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ApplicationOut.


        :return: The created_at of this ApplicationOut.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ApplicationOut.


        :param created_at: The created_at of this ApplicationOut.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this ApplicationOut.


        :return: The id of this ApplicationOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationOut.


        :param id: The id of this ApplicationOut.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this ApplicationOut.


        :return: The metadata of this ApplicationOut.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ApplicationOut.


        :param metadata: The metadata of this ApplicationOut.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this ApplicationOut.


        :return: The name of this ApplicationOut.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationOut.


        :param name: The name of this ApplicationOut.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rate_limit(self):
        """Gets the rate_limit of this ApplicationOut.


        :return: The rate_limit of this ApplicationOut.
        :rtype: int
        """
        return self._rate_limit

    @rate_limit.setter
    def rate_limit(self, rate_limit):
        """Sets the rate_limit of this ApplicationOut.


        :param rate_limit: The rate_limit of this ApplicationOut.
        :type rate_limit: int
        """
        if rate_limit is not None and rate_limit <= 0:
            raise ValueError("Invalid value for `rate_limit`, must be a value greater than `0`")

        self._rate_limit = rate_limit

    @property
    def uid(self):
        """Gets the uid of this ApplicationOut.

        Optional unique identifier for the application

        :return: The uid of this ApplicationOut.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ApplicationOut.

        Optional unique identifier for the application

        :param uid: The uid of this ApplicationOut.
        :type uid: str
        """
        if uid is not None and len(uid) > 256:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `256`")
        if uid is not None and len(uid) < 1:
            raise ValueError("Invalid value for `uid`, length must be greater than or equal to `1`")
        if uid is not None and not re.search(r'^[a-zA-Z0-9\-_.]+$', uid):
            raise ValueError("Invalid value for `uid`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_.]+$/`")

        self._uid = uid

    @property
    def updated_at(self):
        """Gets the updated_at of this ApplicationOut.


        :return: The updated_at of this ApplicationOut.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ApplicationOut.


        :param updated_at: The updated_at of this ApplicationOut.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
