# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_attempt_failed_data import MessageAttemptFailedData
import re
from openapi_server import util


class MessageAttemptFailingEventData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, app_uid: str=None, endpoint_id: str=None, last_attempt: MessageAttemptFailedData=None, msg_event_id: str=None, msg_id: str=None):
        """MessageAttemptFailingEventData - a model defined in OpenAPI

        :param app_id: The app_id of this MessageAttemptFailingEventData.
        :param app_uid: The app_uid of this MessageAttemptFailingEventData.
        :param endpoint_id: The endpoint_id of this MessageAttemptFailingEventData.
        :param last_attempt: The last_attempt of this MessageAttemptFailingEventData.
        :param msg_event_id: The msg_event_id of this MessageAttemptFailingEventData.
        :param msg_id: The msg_id of this MessageAttemptFailingEventData.
        """
        self.openapi_types = {
            'app_id': str,
            'app_uid': str,
            'endpoint_id': str,
            'last_attempt': MessageAttemptFailedData,
            'msg_event_id': str,
            'msg_id': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'app_uid': 'appUid',
            'endpoint_id': 'endpointId',
            'last_attempt': 'lastAttempt',
            'msg_event_id': 'msgEventId',
            'msg_id': 'msgId'
        }

        self._app_id = app_id
        self._app_uid = app_uid
        self._endpoint_id = endpoint_id
        self._last_attempt = last_attempt
        self._msg_event_id = msg_event_id
        self._msg_id = msg_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageAttemptFailingEventData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageAttemptFailingEventData of this MessageAttemptFailingEventData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this MessageAttemptFailingEventData.


        :return: The app_id of this MessageAttemptFailingEventData.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this MessageAttemptFailingEventData.


        :param app_id: The app_id of this MessageAttemptFailingEventData.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def app_uid(self):
        """Gets the app_uid of this MessageAttemptFailingEventData.

        Optional unique identifier for the application

        :return: The app_uid of this MessageAttemptFailingEventData.
        :rtype: str
        """
        return self._app_uid

    @app_uid.setter
    def app_uid(self, app_uid):
        """Sets the app_uid of this MessageAttemptFailingEventData.

        Optional unique identifier for the application

        :param app_uid: The app_uid of this MessageAttemptFailingEventData.
        :type app_uid: str
        """
        if app_uid is not None and len(app_uid) > 256:
            raise ValueError("Invalid value for `app_uid`, length must be less than or equal to `256`")
        if app_uid is not None and len(app_uid) < 1:
            raise ValueError("Invalid value for `app_uid`, length must be greater than or equal to `1`")
        if app_uid is not None and not re.search(r'^[a-zA-Z0-9\-_.]+$', app_uid):
            raise ValueError("Invalid value for `app_uid`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_.]+$/`")

        self._app_uid = app_uid

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this MessageAttemptFailingEventData.


        :return: The endpoint_id of this MessageAttemptFailingEventData.
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this MessageAttemptFailingEventData.


        :param endpoint_id: The endpoint_id of this MessageAttemptFailingEventData.
        :type endpoint_id: str
        """
        if endpoint_id is None:
            raise ValueError("Invalid value for `endpoint_id`, must not be `None`")

        self._endpoint_id = endpoint_id

    @property
    def last_attempt(self):
        """Gets the last_attempt of this MessageAttemptFailingEventData.


        :return: The last_attempt of this MessageAttemptFailingEventData.
        :rtype: MessageAttemptFailedData
        """
        return self._last_attempt

    @last_attempt.setter
    def last_attempt(self, last_attempt):
        """Sets the last_attempt of this MessageAttemptFailingEventData.


        :param last_attempt: The last_attempt of this MessageAttemptFailingEventData.
        :type last_attempt: MessageAttemptFailedData
        """
        if last_attempt is None:
            raise ValueError("Invalid value for `last_attempt`, must not be `None`")

        self._last_attempt = last_attempt

    @property
    def msg_event_id(self):
        """Gets the msg_event_id of this MessageAttemptFailingEventData.

        Optional unique identifier for the message

        :return: The msg_event_id of this MessageAttemptFailingEventData.
        :rtype: str
        """
        return self._msg_event_id

    @msg_event_id.setter
    def msg_event_id(self, msg_event_id):
        """Sets the msg_event_id of this MessageAttemptFailingEventData.

        Optional unique identifier for the message

        :param msg_event_id: The msg_event_id of this MessageAttemptFailingEventData.
        :type msg_event_id: str
        """
        if msg_event_id is not None and len(msg_event_id) > 256:
            raise ValueError("Invalid value for `msg_event_id`, length must be less than or equal to `256`")
        if msg_event_id is not None and len(msg_event_id) < 1:
            raise ValueError("Invalid value for `msg_event_id`, length must be greater than or equal to `1`")
        if msg_event_id is not None and not re.search(r'^[a-zA-Z0-9\-_.]+$', msg_event_id):
            raise ValueError("Invalid value for `msg_event_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_.]+$/`")

        self._msg_event_id = msg_event_id

    @property
    def msg_id(self):
        """Gets the msg_id of this MessageAttemptFailingEventData.


        :return: The msg_id of this MessageAttemptFailingEventData.
        :rtype: str
        """
        return self._msg_id

    @msg_id.setter
    def msg_id(self, msg_id):
        """Sets the msg_id of this MessageAttemptFailingEventData.


        :param msg_id: The msg_id of this MessageAttemptFailingEventData.
        :type msg_id: str
        """
        if msg_id is None:
            raise ValueError("Invalid value for `msg_id`, must not be `None`")

        self._msg_id = msg_id
