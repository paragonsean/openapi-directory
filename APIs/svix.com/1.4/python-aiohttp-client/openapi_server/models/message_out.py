# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MessageOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channels: list[str]=None, event_id: str=None, event_type: str=None, id: str=None, payload: object=None, timestamp: datetime=None):
        """MessageOut - a model defined in OpenAPI

        :param channels: The channels of this MessageOut.
        :param event_id: The event_id of this MessageOut.
        :param event_type: The event_type of this MessageOut.
        :param id: The id of this MessageOut.
        :param payload: The payload of this MessageOut.
        :param timestamp: The timestamp of this MessageOut.
        """
        self.openapi_types = {
            'channels': list[str],
            'event_id': str,
            'event_type': str,
            'id': str,
            'payload': object,
            'timestamp': datetime
        }

        self.attribute_map = {
            'channels': 'channels',
            'event_id': 'eventId',
            'event_type': 'eventType',
            'id': 'id',
            'payload': 'payload',
            'timestamp': 'timestamp'
        }

        self._channels = channels
        self._event_id = event_id
        self._event_type = event_type
        self._id = id
        self._payload = payload
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageOut of this MessageOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channels(self):
        """Gets the channels of this MessageOut.

        List of free-form identifiers that endpoints can filter by

        :return: The channels of this MessageOut.
        :rtype: list[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this MessageOut.

        List of free-form identifiers that endpoints can filter by

        :param channels: The channels of this MessageOut.
        :type channels: list[str]
        """
        if channels is not None and len(channels) > 5:
            raise ValueError("Invalid value for `channels`, number of items must be less than or equal to `5`")
        if channels is not None and len(channels) < 1:
            raise ValueError("Invalid value for `channels`, number of items must be greater than or equal to `1`")

        self._channels = channels

    @property
    def event_id(self):
        """Gets the event_id of this MessageOut.

        Optional unique identifier for the message

        :return: The event_id of this MessageOut.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this MessageOut.

        Optional unique identifier for the message

        :param event_id: The event_id of this MessageOut.
        :type event_id: str
        """
        if event_id is not None and len(event_id) > 256:
            raise ValueError("Invalid value for `event_id`, length must be less than or equal to `256`")
        if event_id is not None and len(event_id) < 1:
            raise ValueError("Invalid value for `event_id`, length must be greater than or equal to `1`")
        if event_id is not None and not re.search(r'^[a-zA-Z0-9\-_.]+$', event_id):
            raise ValueError("Invalid value for `event_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_.]+$/`")

        self._event_id = event_id

    @property
    def event_type(self):
        """Gets the event_type of this MessageOut.


        :return: The event_type of this MessageOut.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this MessageOut.


        :param event_type: The event_type of this MessageOut.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")
        if event_type is not None and len(event_type) > 256:
            raise ValueError("Invalid value for `event_type`, length must be less than or equal to `256`")
        if event_type is not None and not re.search(r'^[a-zA-Z0-9\-_.]+$', event_type):
            raise ValueError("Invalid value for `event_type`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_.]+$/`")

        self._event_type = event_type

    @property
    def id(self):
        """Gets the id of this MessageOut.


        :return: The id of this MessageOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageOut.


        :param id: The id of this MessageOut.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def payload(self):
        """Gets the payload of this MessageOut.


        :return: The payload of this MessageOut.
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this MessageOut.


        :param payload: The payload of this MessageOut.
        :type payload: object
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")

        self._payload = payload

    @property
    def timestamp(self):
        """Gets the timestamp of this MessageOut.


        :return: The timestamp of this MessageOut.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MessageOut.


        :param timestamp: The timestamp of this MessageOut.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp
