# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.background_task_finished_event import BackgroundTaskFinishedEvent
from openapi_server.models.endpoint_created_event import EndpointCreatedEvent
from openapi_server.models.endpoint_deleted_event import EndpointDeletedEvent
from openapi_server.models.endpoint_disabled_event import EndpointDisabledEvent
from openapi_server.models.endpoint_updated_event import EndpointUpdatedEvent
from openapi_server.models.message_attempt_exhausted_event import MessageAttemptExhaustedEvent
from openapi_server.models.message_attempt_failing_event import MessageAttemptFailingEvent
from openapi_server import util


class WebhookTypes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, a: EndpointDisabledEvent=None, a1: MessageAttemptFailingEvent=None, a2: BackgroundTaskFinishedEvent=None, b: EndpointCreatedEvent=None, c: EndpointUpdatedEvent=None, d: EndpointDeletedEvent=None, e: MessageAttemptExhaustedEvent=None):
        """WebhookTypes - a model defined in OpenAPI

        :param a: The a of this WebhookTypes.
        :param a1: The a1 of this WebhookTypes.
        :param a2: The a2 of this WebhookTypes.
        :param b: The b of this WebhookTypes.
        :param c: The c of this WebhookTypes.
        :param d: The d of this WebhookTypes.
        :param e: The e of this WebhookTypes.
        """
        self.openapi_types = {
            'a': EndpointDisabledEvent,
            'a1': MessageAttemptFailingEvent,
            'a2': BackgroundTaskFinishedEvent,
            'b': EndpointCreatedEvent,
            'c': EndpointUpdatedEvent,
            'd': EndpointDeletedEvent,
            'e': MessageAttemptExhaustedEvent
        }

        self.attribute_map = {
            'a': 'a',
            'a1': 'a1',
            'a2': 'a2',
            'b': 'b',
            'c': 'c',
            'd': 'd',
            'e': 'e'
        }

        self._a = a
        self._a1 = a1
        self._a2 = a2
        self._b = b
        self._c = c
        self._d = d
        self._e = e

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookTypes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookTypes of this WebhookTypes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def a(self):
        """Gets the a of this WebhookTypes.


        :return: The a of this WebhookTypes.
        :rtype: EndpointDisabledEvent
        """
        return self._a

    @a.setter
    def a(self, a):
        """Sets the a of this WebhookTypes.


        :param a: The a of this WebhookTypes.
        :type a: EndpointDisabledEvent
        """
        if a is None:
            raise ValueError("Invalid value for `a`, must not be `None`")

        self._a = a

    @property
    def a1(self):
        """Gets the a1 of this WebhookTypes.


        :return: The a1 of this WebhookTypes.
        :rtype: MessageAttemptFailingEvent
        """
        return self._a1

    @a1.setter
    def a1(self, a1):
        """Sets the a1 of this WebhookTypes.


        :param a1: The a1 of this WebhookTypes.
        :type a1: MessageAttemptFailingEvent
        """
        if a1 is None:
            raise ValueError("Invalid value for `a1`, must not be `None`")

        self._a1 = a1

    @property
    def a2(self):
        """Gets the a2 of this WebhookTypes.


        :return: The a2 of this WebhookTypes.
        :rtype: BackgroundTaskFinishedEvent
        """
        return self._a2

    @a2.setter
    def a2(self, a2):
        """Sets the a2 of this WebhookTypes.


        :param a2: The a2 of this WebhookTypes.
        :type a2: BackgroundTaskFinishedEvent
        """
        if a2 is None:
            raise ValueError("Invalid value for `a2`, must not be `None`")

        self._a2 = a2

    @property
    def b(self):
        """Gets the b of this WebhookTypes.


        :return: The b of this WebhookTypes.
        :rtype: EndpointCreatedEvent
        """
        return self._b

    @b.setter
    def b(self, b):
        """Sets the b of this WebhookTypes.


        :param b: The b of this WebhookTypes.
        :type b: EndpointCreatedEvent
        """
        if b is None:
            raise ValueError("Invalid value for `b`, must not be `None`")

        self._b = b

    @property
    def c(self):
        """Gets the c of this WebhookTypes.


        :return: The c of this WebhookTypes.
        :rtype: EndpointUpdatedEvent
        """
        return self._c

    @c.setter
    def c(self, c):
        """Sets the c of this WebhookTypes.


        :param c: The c of this WebhookTypes.
        :type c: EndpointUpdatedEvent
        """
        if c is None:
            raise ValueError("Invalid value for `c`, must not be `None`")

        self._c = c

    @property
    def d(self):
        """Gets the d of this WebhookTypes.


        :return: The d of this WebhookTypes.
        :rtype: EndpointDeletedEvent
        """
        return self._d

    @d.setter
    def d(self, d):
        """Sets the d of this WebhookTypes.


        :param d: The d of this WebhookTypes.
        :type d: EndpointDeletedEvent
        """
        if d is None:
            raise ValueError("Invalid value for `d`, must not be `None`")

        self._d = d

    @property
    def e(self):
        """Gets the e of this WebhookTypes.


        :return: The e of this WebhookTypes.
        :rtype: MessageAttemptExhaustedEvent
        """
        return self._e

    @e.setter
    def e(self, e):
        """Sets the e of this WebhookTypes.


        :param e: The e of this WebhookTypes.
        :type e: MessageAttemptExhaustedEvent
        """
        if e is None:
            raise ValueError("Invalid value for `e`, must not be `None`")

        self._e = e
