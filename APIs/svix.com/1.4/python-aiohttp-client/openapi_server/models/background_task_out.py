# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.background_task_status import BackgroundTaskStatus
from openapi_server.models.background_task_type import BackgroundTaskType
from openapi_server import util


class BackgroundTaskOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: object=None, id: str=None, status: BackgroundTaskStatus=None, task: BackgroundTaskType=None):
        """BackgroundTaskOut - a model defined in OpenAPI

        :param data: The data of this BackgroundTaskOut.
        :param id: The id of this BackgroundTaskOut.
        :param status: The status of this BackgroundTaskOut.
        :param task: The task of this BackgroundTaskOut.
        """
        self.openapi_types = {
            'data': object,
            'id': str,
            'status': BackgroundTaskStatus,
            'task': BackgroundTaskType
        }

        self.attribute_map = {
            'data': 'data',
            'id': 'id',
            'status': 'status',
            'task': 'task'
        }

        self._data = data
        self._id = id
        self._status = status
        self._task = task

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackgroundTaskOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackgroundTaskOut of this BackgroundTaskOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this BackgroundTaskOut.


        :return: The data of this BackgroundTaskOut.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this BackgroundTaskOut.


        :param data: The data of this BackgroundTaskOut.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def id(self):
        """Gets the id of this BackgroundTaskOut.


        :return: The id of this BackgroundTaskOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BackgroundTaskOut.


        :param id: The id of this BackgroundTaskOut.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this BackgroundTaskOut.


        :return: The status of this BackgroundTaskOut.
        :rtype: BackgroundTaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BackgroundTaskOut.


        :param status: The status of this BackgroundTaskOut.
        :type status: BackgroundTaskStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def task(self):
        """Gets the task of this BackgroundTaskOut.


        :return: The task of this BackgroundTaskOut.
        :rtype: BackgroundTaskType
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this BackgroundTaskOut.


        :param task: The task of this BackgroundTaskOut.
        :type task: BackgroundTaskType
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")

        self._task = task
