# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_out import MessageOut
from openapi_server import util


class ListResponseMessageOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[MessageOut]=None, done: bool=None, iterator: str=None, prev_iterator: str=None):
        """ListResponseMessageOut - a model defined in OpenAPI

        :param data: The data of this ListResponseMessageOut.
        :param done: The done of this ListResponseMessageOut.
        :param iterator: The iterator of this ListResponseMessageOut.
        :param prev_iterator: The prev_iterator of this ListResponseMessageOut.
        """
        self.openapi_types = {
            'data': List[MessageOut],
            'done': bool,
            'iterator': str,
            'prev_iterator': str
        }

        self.attribute_map = {
            'data': 'data',
            'done': 'done',
            'iterator': 'iterator',
            'prev_iterator': 'prevIterator'
        }

        self._data = data
        self._done = done
        self._iterator = iterator
        self._prev_iterator = prev_iterator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListResponseMessageOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListResponse_MessageOut_ of this ListResponseMessageOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this ListResponseMessageOut.


        :return: The data of this ListResponseMessageOut.
        :rtype: List[MessageOut]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ListResponseMessageOut.


        :param data: The data of this ListResponseMessageOut.
        :type data: List[MessageOut]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def done(self):
        """Gets the done of this ListResponseMessageOut.


        :return: The done of this ListResponseMessageOut.
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this ListResponseMessageOut.


        :param done: The done of this ListResponseMessageOut.
        :type done: bool
        """
        if done is None:
            raise ValueError("Invalid value for `done`, must not be `None`")

        self._done = done

    @property
    def iterator(self):
        """Gets the iterator of this ListResponseMessageOut.


        :return: The iterator of this ListResponseMessageOut.
        :rtype: str
        """
        return self._iterator

    @iterator.setter
    def iterator(self, iterator):
        """Sets the iterator of this ListResponseMessageOut.


        :param iterator: The iterator of this ListResponseMessageOut.
        :type iterator: str
        """

        self._iterator = iterator

    @property
    def prev_iterator(self):
        """Gets the prev_iterator of this ListResponseMessageOut.


        :return: The prev_iterator of this ListResponseMessageOut.
        :rtype: str
        """
        return self._prev_iterator

    @prev_iterator.setter
    def prev_iterator(self, prev_iterator):
        """Sets the prev_iterator of this ListResponseMessageOut.


        :param prev_iterator: The prev_iterator of this ListResponseMessageOut.
        :type prev_iterator: str
        """

        self._prev_iterator = prev_iterator
