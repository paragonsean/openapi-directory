# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReplayIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, since: datetime=None, until: datetime=None):
        """ReplayIn - a model defined in OpenAPI

        :param since: The since of this ReplayIn.
        :param until: The until of this ReplayIn.
        """
        self.openapi_types = {
            'since': datetime,
            'until': datetime
        }

        self.attribute_map = {
            'since': 'since',
            'until': 'until'
        }

        self._since = since
        self._until = until

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplayIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplayIn of this ReplayIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def since(self):
        """Gets the since of this ReplayIn.


        :return: The since of this ReplayIn.
        :rtype: datetime
        """
        return self._since

    @since.setter
    def since(self, since):
        """Sets the since of this ReplayIn.


        :param since: The since of this ReplayIn.
        :type since: datetime
        """
        if since is None:
            raise ValueError("Invalid value for `since`, must not be `None`")

        self._since = since

    @property
    def until(self):
        """Gets the until of this ReplayIn.


        :return: The until of this ReplayIn.
        :rtype: datetime
        """
        return self._until

    @until.setter
    def until(self, until):
        """Sets the until of this ReplayIn.


        :param until: The until of this ReplayIn.
        :type until: datetime
        """

        self._until = until
