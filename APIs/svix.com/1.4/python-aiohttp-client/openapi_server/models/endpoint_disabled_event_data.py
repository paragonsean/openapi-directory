# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class EndpointDisabledEventData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, app_uid: str=None, endpoint_id: str=None, endpoint_uid: str=None, fail_since: datetime=None):
        """EndpointDisabledEventData - a model defined in OpenAPI

        :param app_id: The app_id of this EndpointDisabledEventData.
        :param app_uid: The app_uid of this EndpointDisabledEventData.
        :param endpoint_id: The endpoint_id of this EndpointDisabledEventData.
        :param endpoint_uid: The endpoint_uid of this EndpointDisabledEventData.
        :param fail_since: The fail_since of this EndpointDisabledEventData.
        """
        self.openapi_types = {
            'app_id': str,
            'app_uid': str,
            'endpoint_id': str,
            'endpoint_uid': str,
            'fail_since': datetime
        }

        self.attribute_map = {
            'app_id': 'appId',
            'app_uid': 'appUid',
            'endpoint_id': 'endpointId',
            'endpoint_uid': 'endpointUid',
            'fail_since': 'failSince'
        }

        self._app_id = app_id
        self._app_uid = app_uid
        self._endpoint_id = endpoint_id
        self._endpoint_uid = endpoint_uid
        self._fail_since = fail_since

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointDisabledEventData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointDisabledEventData of this EndpointDisabledEventData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this EndpointDisabledEventData.


        :return: The app_id of this EndpointDisabledEventData.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this EndpointDisabledEventData.


        :param app_id: The app_id of this EndpointDisabledEventData.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def app_uid(self):
        """Gets the app_uid of this EndpointDisabledEventData.

        Optional unique identifier for the application

        :return: The app_uid of this EndpointDisabledEventData.
        :rtype: str
        """
        return self._app_uid

    @app_uid.setter
    def app_uid(self, app_uid):
        """Sets the app_uid of this EndpointDisabledEventData.

        Optional unique identifier for the application

        :param app_uid: The app_uid of this EndpointDisabledEventData.
        :type app_uid: str
        """
        if app_uid is not None and len(app_uid) > 256:
            raise ValueError("Invalid value for `app_uid`, length must be less than or equal to `256`")
        if app_uid is not None and len(app_uid) < 1:
            raise ValueError("Invalid value for `app_uid`, length must be greater than or equal to `1`")
        if app_uid is not None and not re.search(r'^[a-zA-Z0-9\-_.]+$', app_uid):
            raise ValueError("Invalid value for `app_uid`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_.]+$/`")

        self._app_uid = app_uid

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this EndpointDisabledEventData.


        :return: The endpoint_id of this EndpointDisabledEventData.
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this EndpointDisabledEventData.


        :param endpoint_id: The endpoint_id of this EndpointDisabledEventData.
        :type endpoint_id: str
        """
        if endpoint_id is None:
            raise ValueError("Invalid value for `endpoint_id`, must not be `None`")

        self._endpoint_id = endpoint_id

    @property
    def endpoint_uid(self):
        """Gets the endpoint_uid of this EndpointDisabledEventData.

        Optional unique identifier for the endpoint

        :return: The endpoint_uid of this EndpointDisabledEventData.
        :rtype: str
        """
        return self._endpoint_uid

    @endpoint_uid.setter
    def endpoint_uid(self, endpoint_uid):
        """Sets the endpoint_uid of this EndpointDisabledEventData.

        Optional unique identifier for the endpoint

        :param endpoint_uid: The endpoint_uid of this EndpointDisabledEventData.
        :type endpoint_uid: str
        """
        if endpoint_uid is not None and len(endpoint_uid) > 256:
            raise ValueError("Invalid value for `endpoint_uid`, length must be less than or equal to `256`")
        if endpoint_uid is not None and len(endpoint_uid) < 1:
            raise ValueError("Invalid value for `endpoint_uid`, length must be greater than or equal to `1`")
        if endpoint_uid is not None and not re.search(r'^[a-zA-Z0-9\-_.]+$', endpoint_uid):
            raise ValueError("Invalid value for `endpoint_uid`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_.]+$/`")

        self._endpoint_uid = endpoint_uid

    @property
    def fail_since(self):
        """Gets the fail_since of this EndpointDisabledEventData.


        :return: The fail_since of this EndpointDisabledEventData.
        :rtype: datetime
        """
        return self._fail_since

    @fail_since.setter
    def fail_since(self, fail_since):
        """Sets the fail_since of this EndpointDisabledEventData.


        :param fail_since: The fail_since of this EndpointDisabledEventData.
        :type fail_since: datetime
        """
        if fail_since is None:
            raise ValueError("Invalid value for `fail_since`, must not be `None`")

        self._fail_since = fail_since
