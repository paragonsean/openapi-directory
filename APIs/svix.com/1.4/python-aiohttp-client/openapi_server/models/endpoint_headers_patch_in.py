# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EndpointHeadersPatchIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, headers: Dict[str, str]=None):
        """EndpointHeadersPatchIn - a model defined in OpenAPI

        :param headers: The headers of this EndpointHeadersPatchIn.
        """
        self.openapi_types = {
            'headers': Dict[str, str]
        }

        self.attribute_map = {
            'headers': 'headers'
        }

        self._headers = headers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointHeadersPatchIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointHeadersPatchIn of this EndpointHeadersPatchIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def headers(self):
        """Gets the headers of this EndpointHeadersPatchIn.


        :return: The headers of this EndpointHeadersPatchIn.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this EndpointHeadersPatchIn.


        :param headers: The headers of this EndpointHeadersPatchIn.
        :type headers: Dict[str, str]
        """
        if headers is None:
            raise ValueError("Invalid value for `headers`, must not be `None`")

        self._headers = headers
