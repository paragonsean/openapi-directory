# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.background_task_status import BackgroundTaskStatus
from openapi_server import util


class ReplayOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, status: BackgroundTaskStatus=None, task: str='endpoint.replay'):
        """ReplayOut - a model defined in OpenAPI

        :param id: The id of this ReplayOut.
        :param status: The status of this ReplayOut.
        :param task: The task of this ReplayOut.
        """
        self.openapi_types = {
            'id': str,
            'status': BackgroundTaskStatus,
            'task': str
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'task': 'task'
        }

        self._id = id
        self._status = status
        self._task = task

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplayOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplayOut of this ReplayOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ReplayOut.


        :return: The id of this ReplayOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReplayOut.


        :param id: The id of this ReplayOut.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this ReplayOut.


        :return: The status of this ReplayOut.
        :rtype: BackgroundTaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReplayOut.


        :param status: The status of this ReplayOut.
        :type status: BackgroundTaskStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def task(self):
        """Gets the task of this ReplayOut.


        :return: The task of this ReplayOut.
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this ReplayOut.


        :param task: The task of this ReplayOut.
        :type task: str
        """
        allowed_values = ["endpoint.replay"]  # noqa: E501
        if task not in allowed_values:
            raise ValueError(
                "Invalid value for `task` ({0}), must be one of {1}"
                .format(task, allowed_values)
            )

        self._task = task
