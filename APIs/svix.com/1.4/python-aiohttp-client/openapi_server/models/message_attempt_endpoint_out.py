# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_attempt_trigger_type import MessageAttemptTriggerType
from openapi_server.models.message_status import MessageStatus
from openapi_server import util


class MessageAttemptEndpointOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_id: str=None, id: str=None, msg_id: str=None, response: str=None, response_status_code: int=None, status: MessageStatus=None, timestamp: datetime=None, trigger_type: MessageAttemptTriggerType=None, url: str=None):
        """MessageAttemptEndpointOut - a model defined in OpenAPI

        :param endpoint_id: The endpoint_id of this MessageAttemptEndpointOut.
        :param id: The id of this MessageAttemptEndpointOut.
        :param msg_id: The msg_id of this MessageAttemptEndpointOut.
        :param response: The response of this MessageAttemptEndpointOut.
        :param response_status_code: The response_status_code of this MessageAttemptEndpointOut.
        :param status: The status of this MessageAttemptEndpointOut.
        :param timestamp: The timestamp of this MessageAttemptEndpointOut.
        :param trigger_type: The trigger_type of this MessageAttemptEndpointOut.
        :param url: The url of this MessageAttemptEndpointOut.
        """
        self.openapi_types = {
            'endpoint_id': str,
            'id': str,
            'msg_id': str,
            'response': str,
            'response_status_code': int,
            'status': MessageStatus,
            'timestamp': datetime,
            'trigger_type': MessageAttemptTriggerType,
            'url': str
        }

        self.attribute_map = {
            'endpoint_id': 'endpointId',
            'id': 'id',
            'msg_id': 'msgId',
            'response': 'response',
            'response_status_code': 'responseStatusCode',
            'status': 'status',
            'timestamp': 'timestamp',
            'trigger_type': 'triggerType',
            'url': 'url'
        }

        self._endpoint_id = endpoint_id
        self._id = id
        self._msg_id = msg_id
        self._response = response
        self._response_status_code = response_status_code
        self._status = status
        self._timestamp = timestamp
        self._trigger_type = trigger_type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageAttemptEndpointOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageAttemptEndpointOut of this MessageAttemptEndpointOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this MessageAttemptEndpointOut.


        :return: The endpoint_id of this MessageAttemptEndpointOut.
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this MessageAttemptEndpointOut.


        :param endpoint_id: The endpoint_id of this MessageAttemptEndpointOut.
        :type endpoint_id: str
        """
        if endpoint_id is None:
            raise ValueError("Invalid value for `endpoint_id`, must not be `None`")

        self._endpoint_id = endpoint_id

    @property
    def id(self):
        """Gets the id of this MessageAttemptEndpointOut.


        :return: The id of this MessageAttemptEndpointOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageAttemptEndpointOut.


        :param id: The id of this MessageAttemptEndpointOut.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def msg_id(self):
        """Gets the msg_id of this MessageAttemptEndpointOut.


        :return: The msg_id of this MessageAttemptEndpointOut.
        :rtype: str
        """
        return self._msg_id

    @msg_id.setter
    def msg_id(self, msg_id):
        """Sets the msg_id of this MessageAttemptEndpointOut.


        :param msg_id: The msg_id of this MessageAttemptEndpointOut.
        :type msg_id: str
        """
        if msg_id is None:
            raise ValueError("Invalid value for `msg_id`, must not be `None`")

        self._msg_id = msg_id

    @property
    def response(self):
        """Gets the response of this MessageAttemptEndpointOut.


        :return: The response of this MessageAttemptEndpointOut.
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this MessageAttemptEndpointOut.


        :param response: The response of this MessageAttemptEndpointOut.
        :type response: str
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response

    @property
    def response_status_code(self):
        """Gets the response_status_code of this MessageAttemptEndpointOut.


        :return: The response_status_code of this MessageAttemptEndpointOut.
        :rtype: int
        """
        return self._response_status_code

    @response_status_code.setter
    def response_status_code(self, response_status_code):
        """Sets the response_status_code of this MessageAttemptEndpointOut.


        :param response_status_code: The response_status_code of this MessageAttemptEndpointOut.
        :type response_status_code: int
        """
        if response_status_code is None:
            raise ValueError("Invalid value for `response_status_code`, must not be `None`")

        self._response_status_code = response_status_code

    @property
    def status(self):
        """Gets the status of this MessageAttemptEndpointOut.


        :return: The status of this MessageAttemptEndpointOut.
        :rtype: MessageStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MessageAttemptEndpointOut.


        :param status: The status of this MessageAttemptEndpointOut.
        :type status: MessageStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this MessageAttemptEndpointOut.


        :return: The timestamp of this MessageAttemptEndpointOut.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MessageAttemptEndpointOut.


        :param timestamp: The timestamp of this MessageAttemptEndpointOut.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def trigger_type(self):
        """Gets the trigger_type of this MessageAttemptEndpointOut.


        :return: The trigger_type of this MessageAttemptEndpointOut.
        :rtype: MessageAttemptTriggerType
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this MessageAttemptEndpointOut.


        :param trigger_type: The trigger_type of this MessageAttemptEndpointOut.
        :type trigger_type: MessageAttemptTriggerType
        """
        if trigger_type is None:
            raise ValueError("Invalid value for `trigger_type`, must not be `None`")

        self._trigger_type = trigger_type

    @property
    def url(self):
        """Gets the url of this MessageAttemptEndpointOut.


        :return: The url of this MessageAttemptEndpointOut.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MessageAttemptEndpointOut.


        :param url: The url of this MessageAttemptEndpointOut.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")
        if url is not None and len(url) > 65536:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `65536`")
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")

        self._url = url
