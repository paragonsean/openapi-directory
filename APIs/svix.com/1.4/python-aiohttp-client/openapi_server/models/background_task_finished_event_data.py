# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.background_task_op_webhook_status import BackgroundTaskOpWebhookStatus
from openapi_server.models.background_task_op_webhook_type import BackgroundTaskOpWebhookType
from openapi_server import util


class BackgroundTaskFinishedEventData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: object=None, status: BackgroundTaskOpWebhookStatus=None, task: BackgroundTaskOpWebhookType=None, task_id: str=None):
        """BackgroundTaskFinishedEventData - a model defined in OpenAPI

        :param data: The data of this BackgroundTaskFinishedEventData.
        :param status: The status of this BackgroundTaskFinishedEventData.
        :param task: The task of this BackgroundTaskFinishedEventData.
        :param task_id: The task_id of this BackgroundTaskFinishedEventData.
        """
        self.openapi_types = {
            'data': object,
            'status': BackgroundTaskOpWebhookStatus,
            'task': BackgroundTaskOpWebhookType,
            'task_id': str
        }

        self.attribute_map = {
            'data': 'data',
            'status': 'status',
            'task': 'task',
            'task_id': 'taskId'
        }

        self._data = data
        self._status = status
        self._task = task
        self._task_id = task_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackgroundTaskFinishedEventData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackgroundTaskFinishedEventData of this BackgroundTaskFinishedEventData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this BackgroundTaskFinishedEventData.


        :return: The data of this BackgroundTaskFinishedEventData.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this BackgroundTaskFinishedEventData.


        :param data: The data of this BackgroundTaskFinishedEventData.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def status(self):
        """Gets the status of this BackgroundTaskFinishedEventData.


        :return: The status of this BackgroundTaskFinishedEventData.
        :rtype: BackgroundTaskOpWebhookStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BackgroundTaskFinishedEventData.


        :param status: The status of this BackgroundTaskFinishedEventData.
        :type status: BackgroundTaskOpWebhookStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def task(self):
        """Gets the task of this BackgroundTaskFinishedEventData.


        :return: The task of this BackgroundTaskFinishedEventData.
        :rtype: BackgroundTaskOpWebhookType
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this BackgroundTaskFinishedEventData.


        :param task: The task of this BackgroundTaskFinishedEventData.
        :type task: BackgroundTaskOpWebhookType
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")

        self._task = task

    @property
    def task_id(self):
        """Gets the task_id of this BackgroundTaskFinishedEventData.


        :return: The task_id of this BackgroundTaskFinishedEventData.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this BackgroundTaskFinishedEventData.


        :param task_id: The task_id of this BackgroundTaskFinishedEventData.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")

        self._task_id = task_id
