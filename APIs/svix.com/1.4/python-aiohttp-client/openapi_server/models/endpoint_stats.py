# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EndpointStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fail: int=None, pending: int=None, sending: int=None, success: int=None):
        """EndpointStats - a model defined in OpenAPI

        :param fail: The fail of this EndpointStats.
        :param pending: The pending of this EndpointStats.
        :param sending: The sending of this EndpointStats.
        :param success: The success of this EndpointStats.
        """
        self.openapi_types = {
            'fail': int,
            'pending': int,
            'sending': int,
            'success': int
        }

        self.attribute_map = {
            'fail': 'fail',
            'pending': 'pending',
            'sending': 'sending',
            'success': 'success'
        }

        self._fail = fail
        self._pending = pending
        self._sending = sending
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointStats of this EndpointStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fail(self):
        """Gets the fail of this EndpointStats.


        :return: The fail of this EndpointStats.
        :rtype: int
        """
        return self._fail

    @fail.setter
    def fail(self, fail):
        """Sets the fail of this EndpointStats.


        :param fail: The fail of this EndpointStats.
        :type fail: int
        """
        if fail is None:
            raise ValueError("Invalid value for `fail`, must not be `None`")

        self._fail = fail

    @property
    def pending(self):
        """Gets the pending of this EndpointStats.


        :return: The pending of this EndpointStats.
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this EndpointStats.


        :param pending: The pending of this EndpointStats.
        :type pending: int
        """
        if pending is None:
            raise ValueError("Invalid value for `pending`, must not be `None`")

        self._pending = pending

    @property
    def sending(self):
        """Gets the sending of this EndpointStats.


        :return: The sending of this EndpointStats.
        :rtype: int
        """
        return self._sending

    @sending.setter
    def sending(self, sending):
        """Sets the sending of this EndpointStats.


        :param sending: The sending of this EndpointStats.
        :type sending: int
        """
        if sending is None:
            raise ValueError("Invalid value for `sending`, must not be `None`")

        self._sending = sending

    @property
    def success(self):
        """Gets the success of this EndpointStats.


        :return: The success of this EndpointStats.
        :rtype: int
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this EndpointStats.


        :param success: The success of this EndpointStats.
        :type success: int
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")

        self._success = success
