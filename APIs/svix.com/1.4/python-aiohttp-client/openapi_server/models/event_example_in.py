# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class EventExampleIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type: str=None):
        """EventExampleIn - a model defined in OpenAPI

        :param event_type: The event_type of this EventExampleIn.
        """
        self.openapi_types = {
            'event_type': str
        }

        self.attribute_map = {
            'event_type': 'eventType'
        }

        self._event_type = event_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventExampleIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventExampleIn of this EventExampleIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type(self):
        """Gets the event_type of this EventExampleIn.


        :return: The event_type of this EventExampleIn.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventExampleIn.


        :param event_type: The event_type of this EventExampleIn.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")
        if event_type is not None and len(event_type) > 256:
            raise ValueError("Invalid value for `event_type`, length must be less than or equal to `256`")
        if event_type is not None and not re.search(r'^[a-zA-Z0-9\-_.]+$', event_type):
            raise ValueError("Invalid value for `event_type`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_.]+$/`")

        self._event_type = event_type
