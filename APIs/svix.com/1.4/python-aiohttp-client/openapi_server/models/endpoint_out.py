# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class EndpointOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channels: list[str]=None, created_at: datetime=None, description: str='', disabled: bool=False, filter_types: list[str]=None, id: str=None, metadata: Dict[str, str]=None, rate_limit: int=None, uid: str=None, updated_at: datetime=None, url: str=None, version: int=None):
        """EndpointOut - a model defined in OpenAPI

        :param channels: The channels of this EndpointOut.
        :param created_at: The created_at of this EndpointOut.
        :param description: The description of this EndpointOut.
        :param disabled: The disabled of this EndpointOut.
        :param filter_types: The filter_types of this EndpointOut.
        :param id: The id of this EndpointOut.
        :param metadata: The metadata of this EndpointOut.
        :param rate_limit: The rate_limit of this EndpointOut.
        :param uid: The uid of this EndpointOut.
        :param updated_at: The updated_at of this EndpointOut.
        :param url: The url of this EndpointOut.
        :param version: The version of this EndpointOut.
        """
        self.openapi_types = {
            'channels': list[str],
            'created_at': datetime,
            'description': str,
            'disabled': bool,
            'filter_types': list[str],
            'id': str,
            'metadata': Dict[str, str],
            'rate_limit': int,
            'uid': str,
            'updated_at': datetime,
            'url': str,
            'version': int
        }

        self.attribute_map = {
            'channels': 'channels',
            'created_at': 'createdAt',
            'description': 'description',
            'disabled': 'disabled',
            'filter_types': 'filterTypes',
            'id': 'id',
            'metadata': 'metadata',
            'rate_limit': 'rateLimit',
            'uid': 'uid',
            'updated_at': 'updatedAt',
            'url': 'url',
            'version': 'version'
        }

        self._channels = channels
        self._created_at = created_at
        self._description = description
        self._disabled = disabled
        self._filter_types = filter_types
        self._id = id
        self._metadata = metadata
        self._rate_limit = rate_limit
        self._uid = uid
        self._updated_at = updated_at
        self._url = url
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointOut of this EndpointOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channels(self):
        """Gets the channels of this EndpointOut.

        List of message channels this endpoint listens to (omit for all)

        :return: The channels of this EndpointOut.
        :rtype: list[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this EndpointOut.

        List of message channels this endpoint listens to (omit for all)

        :param channels: The channels of this EndpointOut.
        :type channels: list[str]
        """
        if channels is not None and len(channels) > 10:
            raise ValueError("Invalid value for `channels`, number of items must be less than or equal to `10`")
        if channels is not None and len(channels) < 1:
            raise ValueError("Invalid value for `channels`, number of items must be greater than or equal to `1`")

        self._channels = channels

    @property
    def created_at(self):
        """Gets the created_at of this EndpointOut.


        :return: The created_at of this EndpointOut.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EndpointOut.


        :param created_at: The created_at of this EndpointOut.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this EndpointOut.


        :return: The description of this EndpointOut.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EndpointOut.


        :param description: The description of this EndpointOut.
        :type description: str
        """

        self._description = description

    @property
    def disabled(self):
        """Gets the disabled of this EndpointOut.


        :return: The disabled of this EndpointOut.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this EndpointOut.


        :param disabled: The disabled of this EndpointOut.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def filter_types(self):
        """Gets the filter_types of this EndpointOut.


        :return: The filter_types of this EndpointOut.
        :rtype: list[str]
        """
        return self._filter_types

    @filter_types.setter
    def filter_types(self, filter_types):
        """Sets the filter_types of this EndpointOut.


        :param filter_types: The filter_types of this EndpointOut.
        :type filter_types: list[str]
        """
        if filter_types is not None and len(filter_types) < 1:
            raise ValueError("Invalid value for `filter_types`, number of items must be greater than or equal to `1`")

        self._filter_types = filter_types

    @property
    def id(self):
        """Gets the id of this EndpointOut.


        :return: The id of this EndpointOut.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EndpointOut.


        :param id: The id of this EndpointOut.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this EndpointOut.


        :return: The metadata of this EndpointOut.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this EndpointOut.


        :param metadata: The metadata of this EndpointOut.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def rate_limit(self):
        """Gets the rate_limit of this EndpointOut.


        :return: The rate_limit of this EndpointOut.
        :rtype: int
        """
        return self._rate_limit

    @rate_limit.setter
    def rate_limit(self, rate_limit):
        """Sets the rate_limit of this EndpointOut.


        :param rate_limit: The rate_limit of this EndpointOut.
        :type rate_limit: int
        """
        if rate_limit is not None and rate_limit > 65535:
            raise ValueError("Invalid value for `rate_limit`, must be a value less than or equal to `65535`")
        if rate_limit is not None and rate_limit < 1:
            raise ValueError("Invalid value for `rate_limit`, must be a value greater than or equal to `1`")

        self._rate_limit = rate_limit

    @property
    def uid(self):
        """Gets the uid of this EndpointOut.

        Optional unique identifier for the endpoint

        :return: The uid of this EndpointOut.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this EndpointOut.

        Optional unique identifier for the endpoint

        :param uid: The uid of this EndpointOut.
        :type uid: str
        """
        if uid is not None and len(uid) > 256:
            raise ValueError("Invalid value for `uid`, length must be less than or equal to `256`")
        if uid is not None and len(uid) < 1:
            raise ValueError("Invalid value for `uid`, length must be greater than or equal to `1`")
        if uid is not None and not re.search(r'^[a-zA-Z0-9\-_.]+$', uid):
            raise ValueError("Invalid value for `uid`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_.]+$/`")

        self._uid = uid

    @property
    def updated_at(self):
        """Gets the updated_at of this EndpointOut.


        :return: The updated_at of this EndpointOut.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EndpointOut.


        :param updated_at: The updated_at of this EndpointOut.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this EndpointOut.


        :return: The url of this EndpointOut.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EndpointOut.


        :param url: The url of this EndpointOut.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")
        if url is not None and len(url) > 65536:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `65536`")
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")

        self._url = url

    @property
    def version(self):
        """Gets the version of this EndpointOut.


        :return: The version of this EndpointOut.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EndpointOut.


        :param version: The version of this EndpointOut.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and version <= 0:
            raise ValueError("Invalid value for `version`, must be a value greater than `0`")

        self._version = version
