# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class EventTypeOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=False, created_at: datetime=None, description: str=None, feature_flag: str=None, name: str=None, schemas: Dict[str, object]=None, updated_at: datetime=None):
        """EventTypeOut - a model defined in OpenAPI

        :param archived: The archived of this EventTypeOut.
        :param created_at: The created_at of this EventTypeOut.
        :param description: The description of this EventTypeOut.
        :param feature_flag: The feature_flag of this EventTypeOut.
        :param name: The name of this EventTypeOut.
        :param schemas: The schemas of this EventTypeOut.
        :param updated_at: The updated_at of this EventTypeOut.
        """
        self.openapi_types = {
            'archived': bool,
            'created_at': datetime,
            'description': str,
            'feature_flag': str,
            'name': str,
            'schemas': Dict[str, object],
            'updated_at': datetime
        }

        self.attribute_map = {
            'archived': 'archived',
            'created_at': 'createdAt',
            'description': 'description',
            'feature_flag': 'featureFlag',
            'name': 'name',
            'schemas': 'schemas',
            'updated_at': 'updatedAt'
        }

        self._archived = archived
        self._created_at = created_at
        self._description = description
        self._feature_flag = feature_flag
        self._name = name
        self._schemas = schemas
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventTypeOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventTypeOut of this EventTypeOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this EventTypeOut.


        :return: The archived of this EventTypeOut.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this EventTypeOut.


        :param archived: The archived of this EventTypeOut.
        :type archived: bool
        """

        self._archived = archived

    @property
    def created_at(self):
        """Gets the created_at of this EventTypeOut.


        :return: The created_at of this EventTypeOut.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EventTypeOut.


        :param created_at: The created_at of this EventTypeOut.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this EventTypeOut.


        :return: The description of this EventTypeOut.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventTypeOut.


        :param description: The description of this EventTypeOut.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def feature_flag(self):
        """Gets the feature_flag of this EventTypeOut.


        :return: The feature_flag of this EventTypeOut.
        :rtype: str
        """
        return self._feature_flag

    @feature_flag.setter
    def feature_flag(self, feature_flag):
        """Sets the feature_flag of this EventTypeOut.


        :param feature_flag: The feature_flag of this EventTypeOut.
        :type feature_flag: str
        """
        if feature_flag is not None and len(feature_flag) > 256:
            raise ValueError("Invalid value for `feature_flag`, length must be less than or equal to `256`")
        if feature_flag is not None and not re.search(r'^[a-zA-Z0-9\-_.]+$', feature_flag):
            raise ValueError("Invalid value for `feature_flag`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_.]+$/`")

        self._feature_flag = feature_flag

    @property
    def name(self):
        """Gets the name of this EventTypeOut.


        :return: The name of this EventTypeOut.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventTypeOut.


        :param name: The name of this EventTypeOut.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and not re.search(r'^[a-zA-Z0-9\-_.]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_.]+$/`")

        self._name = name

    @property
    def schemas(self):
        """Gets the schemas of this EventTypeOut.

        The schema for the event type for a specific version as a JSON schema.

        :return: The schemas of this EventTypeOut.
        :rtype: Dict[str, object]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this EventTypeOut.

        The schema for the event type for a specific version as a JSON schema.

        :param schemas: The schemas of this EventTypeOut.
        :type schemas: Dict[str, object]
        """

        self._schemas = schemas

    @property
    def updated_at(self):
        """Gets the updated_at of this EventTypeOut.


        :return: The updated_at of this EventTypeOut.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EventTypeOut.


        :param updated_at: The updated_at of this EventTypeOut.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
