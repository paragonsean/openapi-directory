# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_in import ApplicationIn
import re
from openapi_server import util


class MessageIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application: ApplicationIn=None, channels: list[str]=None, event_id: str=None, event_type: str=None, payload: object=None, payload_retention_period: int=90):
        """MessageIn - a model defined in OpenAPI

        :param application: The application of this MessageIn.
        :param channels: The channels of this MessageIn.
        :param event_id: The event_id of this MessageIn.
        :param event_type: The event_type of this MessageIn.
        :param payload: The payload of this MessageIn.
        :param payload_retention_period: The payload_retention_period of this MessageIn.
        """
        self.openapi_types = {
            'application': ApplicationIn,
            'channels': list[str],
            'event_id': str,
            'event_type': str,
            'payload': object,
            'payload_retention_period': int
        }

        self.attribute_map = {
            'application': 'application',
            'channels': 'channels',
            'event_id': 'eventId',
            'event_type': 'eventType',
            'payload': 'payload',
            'payload_retention_period': 'payloadRetentionPeriod'
        }

        self._application = application
        self._channels = channels
        self._event_id = event_id
        self._event_type = event_type
        self._payload = payload
        self._payload_retention_period = payload_retention_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageIn of this MessageIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self):
        """Gets the application of this MessageIn.


        :return: The application of this MessageIn.
        :rtype: ApplicationIn
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this MessageIn.


        :param application: The application of this MessageIn.
        :type application: ApplicationIn
        """

        self._application = application

    @property
    def channels(self):
        """Gets the channels of this MessageIn.

        List of free-form identifiers that endpoints can filter by

        :return: The channels of this MessageIn.
        :rtype: list[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this MessageIn.

        List of free-form identifiers that endpoints can filter by

        :param channels: The channels of this MessageIn.
        :type channels: list[str]
        """
        if channels is not None and len(channels) > 5:
            raise ValueError("Invalid value for `channels`, number of items must be less than or equal to `5`")
        if channels is not None and len(channels) < 1:
            raise ValueError("Invalid value for `channels`, number of items must be greater than or equal to `1`")

        self._channels = channels

    @property
    def event_id(self):
        """Gets the event_id of this MessageIn.

        Optional unique identifier for the message

        :return: The event_id of this MessageIn.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this MessageIn.

        Optional unique identifier for the message

        :param event_id: The event_id of this MessageIn.
        :type event_id: str
        """
        if event_id is not None and len(event_id) > 256:
            raise ValueError("Invalid value for `event_id`, length must be less than or equal to `256`")
        if event_id is not None and len(event_id) < 1:
            raise ValueError("Invalid value for `event_id`, length must be greater than or equal to `1`")
        if event_id is not None and not re.search(r'^[a-zA-Z0-9\-_.]+$', event_id):
            raise ValueError("Invalid value for `event_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_.]+$/`")

        self._event_id = event_id

    @property
    def event_type(self):
        """Gets the event_type of this MessageIn.


        :return: The event_type of this MessageIn.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this MessageIn.


        :param event_type: The event_type of this MessageIn.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")
        if event_type is not None and len(event_type) > 256:
            raise ValueError("Invalid value for `event_type`, length must be less than or equal to `256`")
        if event_type is not None and not re.search(r'^[a-zA-Z0-9\-_.]+$', event_type):
            raise ValueError("Invalid value for `event_type`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_.]+$/`")

        self._event_type = event_type

    @property
    def payload(self):
        """Gets the payload of this MessageIn.


        :return: The payload of this MessageIn.
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this MessageIn.


        :param payload: The payload of this MessageIn.
        :type payload: object
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")

        self._payload = payload

    @property
    def payload_retention_period(self):
        """Gets the payload_retention_period of this MessageIn.

        The retention period for the payload (in days).

        :return: The payload_retention_period of this MessageIn.
        :rtype: int
        """
        return self._payload_retention_period

    @payload_retention_period.setter
    def payload_retention_period(self, payload_retention_period):
        """Sets the payload_retention_period of this MessageIn.

        The retention period for the payload (in days).

        :param payload_retention_period: The payload_retention_period of this MessageIn.
        :type payload_retention_period: int
        """
        if payload_retention_period is not None and payload_retention_period > 90:
            raise ValueError("Invalid value for `payload_retention_period`, must be a value less than or equal to `90`")
        if payload_retention_period is not None and payload_retention_period < 5:
            raise ValueError("Invalid value for `payload_retention_period`, must be a value greater than or equal to `5`")

        self._payload_retention_period = payload_retention_period
