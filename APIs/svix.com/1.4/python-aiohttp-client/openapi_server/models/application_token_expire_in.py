# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationTokenExpireIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry: int=None):
        """ApplicationTokenExpireIn - a model defined in OpenAPI

        :param expiry: The expiry of this ApplicationTokenExpireIn.
        """
        self.openapi_types = {
            'expiry': int
        }

        self.attribute_map = {
            'expiry': 'expiry'
        }

        self._expiry = expiry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationTokenExpireIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationTokenExpireIn of this ApplicationTokenExpireIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry(self):
        """Gets the expiry of this ApplicationTokenExpireIn.

        How many seconds until the old key is expired.

        :return: The expiry of this ApplicationTokenExpireIn.
        :rtype: int
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this ApplicationTokenExpireIn.

        How many seconds until the old key is expired.

        :param expiry: The expiry of this ApplicationTokenExpireIn.
        :type expiry: int
        """
        if expiry is not None and expiry > 259200:
            raise ValueError("Invalid value for `expiry`, must be a value less than or equal to `259200`")
        if expiry is not None and expiry < 0:
            raise ValueError("Invalid value for `expiry`, must be a value greater than or equal to `0`")

        self._expiry = expiry
