/**
 * PasswordUtility.Web
 * Validate and generate passwords using open source tools
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Password service.
* @module api/PasswordApi
* @version v1
*/
export default class PasswordApi {

    /**
    * Constructs a new PasswordApi. 
    * @alias module:api/PasswordApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the passwordGenerate operation.
     * @callback module:api/PasswordApi~passwordGenerateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} length 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [upperCase] 
     * @param {Boolean} [digits] 
     * @param {Boolean} [specialCharacters] 
     * @param {module:api/PasswordApi~passwordGenerateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    passwordGenerate(length, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'length' is set
      if (length === undefined || length === null) {
        throw new Error("Missing the required parameter 'length' when calling passwordGenerate");
      }

      let pathParams = {
      };
      let queryParams = {
        'length': length,
        'upperCase': opts['upperCase'],
        'digits': opts['digits'],
        'specialCharacters': opts['specialCharacters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/password/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordValidate operation.
     * @callback module:api/PasswordApi~passwordValidateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} password 
     * @param {module:api/PasswordApi~passwordValidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    passwordValidate(password, callback) {
      let postBody = null;
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling passwordValidate");
      }

      let pathParams = {
      };
      let queryParams = {
        'password': password
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/password/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
