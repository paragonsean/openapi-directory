# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.upload_video_alt1_request_spatial_director_timeline_inner import UploadVideoAlt1RequestSpatialDirectorTimelineInner
from openapi_server import util


class UploadVideoAlt1RequestSpatial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, director_timeline: List[UploadVideoAlt1RequestSpatialDirectorTimelineInner]=None, field_of_view: float=None, projection: str=None, stereo_format: str=None):
        """UploadVideoAlt1RequestSpatial - a model defined in OpenAPI

        :param director_timeline: The director_timeline of this UploadVideoAlt1RequestSpatial.
        :param field_of_view: The field_of_view of this UploadVideoAlt1RequestSpatial.
        :param projection: The projection of this UploadVideoAlt1RequestSpatial.
        :param stereo_format: The stereo_format of this UploadVideoAlt1RequestSpatial.
        """
        self.openapi_types = {
            'director_timeline': List[UploadVideoAlt1RequestSpatialDirectorTimelineInner],
            'field_of_view': float,
            'projection': str,
            'stereo_format': str
        }

        self.attribute_map = {
            'director_timeline': 'director_timeline',
            'field_of_view': 'field_of_view',
            'projection': 'projection',
            'stereo_format': 'stereo_format'
        }

        self._director_timeline = director_timeline
        self._field_of_view = field_of_view
        self._projection = projection
        self._stereo_format = stereo_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadVideoAlt1RequestSpatial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The upload_video_alt1_request_spatial of this UploadVideoAlt1RequestSpatial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def director_timeline(self):
        """Gets the director_timeline of this UploadVideoAlt1RequestSpatial.

        The 360 director timeline.

        :return: The director_timeline of this UploadVideoAlt1RequestSpatial.
        :rtype: List[UploadVideoAlt1RequestSpatialDirectorTimelineInner]
        """
        return self._director_timeline

    @director_timeline.setter
    def director_timeline(self, director_timeline):
        """Sets the director_timeline of this UploadVideoAlt1RequestSpatial.

        The 360 director timeline.

        :param director_timeline: The director_timeline of this UploadVideoAlt1RequestSpatial.
        :type director_timeline: List[UploadVideoAlt1RequestSpatialDirectorTimelineInner]
        """

        self._director_timeline = director_timeline

    @property
    def field_of_view(self):
        """Gets the field_of_view of this UploadVideoAlt1RequestSpatial.

        The 360 field of view: default 50, minimum 30, maximum 90.

        :return: The field_of_view of this UploadVideoAlt1RequestSpatial.
        :rtype: float
        """
        return self._field_of_view

    @field_of_view.setter
    def field_of_view(self, field_of_view):
        """Sets the field_of_view of this UploadVideoAlt1RequestSpatial.

        The 360 field of view: default 50, minimum 30, maximum 90.

        :param field_of_view: The field_of_view of this UploadVideoAlt1RequestSpatial.
        :type field_of_view: float
        """

        self._field_of_view = field_of_view

    @property
    def projection(self):
        """Gets the projection of this UploadVideoAlt1RequestSpatial.

        The 360 spatial projection.

        :return: The projection of this UploadVideoAlt1RequestSpatial.
        :rtype: str
        """
        return self._projection

    @projection.setter
    def projection(self, projection):
        """Sets the projection of this UploadVideoAlt1RequestSpatial.

        The 360 spatial projection.

        :param projection: The projection of this UploadVideoAlt1RequestSpatial.
        :type projection: str
        """
        allowed_values = ["cubical", "cylindrical", "dome", "equirectangular", "pyramid"]  # noqa: E501
        if projection not in allowed_values:
            raise ValueError(
                "Invalid value for `projection` ({0}), must be one of {1}"
                .format(projection, allowed_values)
            )

        self._projection = projection

    @property
    def stereo_format(self):
        """Gets the stereo_format of this UploadVideoAlt1RequestSpatial.

        The 360 spatial stereo format.

        :return: The stereo_format of this UploadVideoAlt1RequestSpatial.
        :rtype: str
        """
        return self._stereo_format

    @stereo_format.setter
    def stereo_format(self, stereo_format):
        """Sets the stereo_format of this UploadVideoAlt1RequestSpatial.

        The 360 spatial stereo format.

        :param stereo_format: The stereo_format of this UploadVideoAlt1RequestSpatial.
        :type stereo_format: str
        """
        allowed_values = ["left-right", "mono", "top-bottom"]  # noqa: E501
        if stereo_format not in allowed_values:
            raise ValueError(
                "Invalid value for `stereo_format` ({0}), must be one of {1}"
                .format(stereo_format, allowed_values)
            )

        self._stereo_format = stereo_format
