# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embed_settings_buttons import EmbedSettingsButtons
from openapi_server.models.embed_settings_logos import EmbedSettingsLogos
from openapi_server.models.embed_settings_title import EmbedSettingsTitle
from openapi_server import util


class EmbedSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buttons: EmbedSettingsButtons=None, color: str=None, logos: EmbedSettingsLogos=None, playbar: bool=None, speed: bool=None, title: EmbedSettingsTitle=None, uri: str=None, volume: bool=None):
        """EmbedSettings - a model defined in OpenAPI

        :param buttons: The buttons of this EmbedSettings.
        :param color: The color of this EmbedSettings.
        :param logos: The logos of this EmbedSettings.
        :param playbar: The playbar of this EmbedSettings.
        :param speed: The speed of this EmbedSettings.
        :param title: The title of this EmbedSettings.
        :param uri: The uri of this EmbedSettings.
        :param volume: The volume of this EmbedSettings.
        """
        self.openapi_types = {
            'buttons': EmbedSettingsButtons,
            'color': str,
            'logos': EmbedSettingsLogos,
            'playbar': bool,
            'speed': bool,
            'title': EmbedSettingsTitle,
            'uri': str,
            'volume': bool
        }

        self.attribute_map = {
            'buttons': 'buttons',
            'color': 'color',
            'logos': 'logos',
            'playbar': 'playbar',
            'speed': 'speed',
            'title': 'title',
            'uri': 'uri',
            'volume': 'volume'
        }

        self._buttons = buttons
        self._color = color
        self._logos = logos
        self._playbar = playbar
        self._speed = speed
        self._title = title
        self._uri = uri
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmbedSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The embed-settings of this EmbedSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buttons(self):
        """Gets the buttons of this EmbedSettings.


        :return: The buttons of this EmbedSettings.
        :rtype: EmbedSettingsButtons
        """
        return self._buttons

    @buttons.setter
    def buttons(self, buttons):
        """Sets the buttons of this EmbedSettings.


        :param buttons: The buttons of this EmbedSettings.
        :type buttons: EmbedSettingsButtons
        """
        if buttons is None:
            raise ValueError("Invalid value for `buttons`, must not be `None`")

        self._buttons = buttons

    @property
    def color(self):
        """Gets the color of this EmbedSettings.

        The primary player color, which controls the color of the progress bar, buttons, and more.

        :return: The color of this EmbedSettings.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this EmbedSettings.

        The primary player color, which controls the color of the progress bar, buttons, and more.

        :param color: The color of this EmbedSettings.
        :type color: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")

        self._color = color

    @property
    def logos(self):
        """Gets the logos of this EmbedSettings.


        :return: The logos of this EmbedSettings.
        :rtype: EmbedSettingsLogos
        """
        return self._logos

    @logos.setter
    def logos(self, logos):
        """Sets the logos of this EmbedSettings.


        :param logos: The logos of this EmbedSettings.
        :type logos: EmbedSettingsLogos
        """
        if logos is None:
            raise ValueError("Invalid value for `logos`, must not be `None`")

        self._logos = logos

    @property
    def playbar(self):
        """Gets the playbar of this EmbedSettings.

        Whether the playbar appears in the embeddable player for this video.

        :return: The playbar of this EmbedSettings.
        :rtype: bool
        """
        return self._playbar

    @playbar.setter
    def playbar(self, playbar):
        """Sets the playbar of this EmbedSettings.

        Whether the playbar appears in the embeddable player for this video.

        :param playbar: The playbar of this EmbedSettings.
        :type playbar: bool
        """
        if playbar is None:
            raise ValueError("Invalid value for `playbar`, must not be `None`")

        self._playbar = playbar

    @property
    def speed(self):
        """Gets the speed of this EmbedSettings.

        Whether the speed controls appear in the embeddable player for this video.

        :return: The speed of this EmbedSettings.
        :rtype: bool
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this EmbedSettings.

        Whether the speed controls appear in the embeddable player for this video.

        :param speed: The speed of this EmbedSettings.
        :type speed: bool
        """
        if speed is None:
            raise ValueError("Invalid value for `speed`, must not be `None`")

        self._speed = speed

    @property
    def title(self):
        """Gets the title of this EmbedSettings.


        :return: The title of this EmbedSettings.
        :rtype: EmbedSettingsTitle
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EmbedSettings.


        :param title: The title of this EmbedSettings.
        :type title: EmbedSettingsTitle
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def uri(self):
        """Gets the uri of this EmbedSettings.

        The URI of the embed preset.

        :return: The uri of this EmbedSettings.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this EmbedSettings.

        The URI of the embed preset.

        :param uri: The uri of this EmbedSettings.
        :type uri: str
        """

        self._uri = uri

    @property
    def volume(self):
        """Gets the volume of this EmbedSettings.

        Whether the volume controls appear in the embeddable player for this video.

        :return: The volume of this EmbedSettings.
        :rtype: bool
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this EmbedSettings.

        Whether the volume controls appear in the embeddable player for this video.

        :param volume: The volume of this EmbedSettings.
        :type volume: bool
        """
        if volume is None:
            raise ValueError("Invalid value for `volume`, must not be `None`")

        self._volume = volume
