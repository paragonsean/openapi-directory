# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_versions_metadata_connections_video import VideoVersionsMetadataConnectionsVideo
from openapi_server import util


class VideoVersionsMetadataConnections(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, video: VideoVersionsMetadataConnectionsVideo=None):
        """VideoVersionsMetadataConnections - a model defined in OpenAPI

        :param video: The video of this VideoVersionsMetadataConnections.
        """
        self.openapi_types = {
            'video': VideoVersionsMetadataConnectionsVideo
        }

        self.attribute_map = {
            'video': 'video'
        }

        self._video = video

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoVersionsMetadataConnections':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video_versions_metadata_connections of this VideoVersionsMetadataConnections.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def video(self):
        """Gets the video of this VideoVersionsMetadataConnections.


        :return: The video of this VideoVersionsMetadataConnections.
        :rtype: VideoVersionsMetadataConnectionsVideo
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this VideoVersionsMetadataConnections.


        :param video: The video of this VideoVersionsMetadataConnections.
        :type video: VideoVersionsMetadataConnectionsVideo
        """
        if video is None:
            raise ValueError("Invalid value for `video`, must not be `None`")

        self._video = video
