# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConvertAccessTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, grant_type: str=None, token: str=None, token_secret: str=None):
        """ConvertAccessTokenRequest - a model defined in OpenAPI

        :param grant_type: The grant_type of this ConvertAccessTokenRequest.
        :param token: The token of this ConvertAccessTokenRequest.
        :param token_secret: The token_secret of this ConvertAccessTokenRequest.
        """
        self.openapi_types = {
            'grant_type': str,
            'token': str,
            'token_secret': str
        }

        self.attribute_map = {
            'grant_type': 'grant_type',
            'token': 'token',
            'token_secret': 'token_secret'
        }

        self._grant_type = grant_type
        self._token = token
        self._token_secret = token_secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConvertAccessTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The convert_access_token_request of this ConvertAccessTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grant_type(self):
        """Gets the grant_type of this ConvertAccessTokenRequest.

        The grant type. Must be set to `vimeo_oauth1`.

        :return: The grant_type of this ConvertAccessTokenRequest.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this ConvertAccessTokenRequest.

        The grant type. Must be set to `vimeo_oauth1`.

        :param grant_type: The grant_type of this ConvertAccessTokenRequest.
        :type grant_type: str
        """
        allowed_values = ["vimeo_oauth1"]  # noqa: E501
        if grant_type not in allowed_values:
            raise ValueError(
                "Invalid value for `grant_type` ({0}), must be one of {1}"
                .format(grant_type, allowed_values)
            )

        self._grant_type = grant_type

    @property
    def token(self):
        """Gets the token of this ConvertAccessTokenRequest.

        The OAuth 1 token.

        :return: The token of this ConvertAccessTokenRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ConvertAccessTokenRequest.

        The OAuth 1 token.

        :param token: The token of this ConvertAccessTokenRequest.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def token_secret(self):
        """Gets the token_secret of this ConvertAccessTokenRequest.

        The OAuth 1 token secret.

        :return: The token_secret of this ConvertAccessTokenRequest.
        :rtype: str
        """
        return self._token_secret

    @token_secret.setter
    def token_secret(self, token_secret):
        """Sets the token_secret of this ConvertAccessTokenRequest.

        The OAuth 1 token secret.

        :param token_secret: The token_secret of this ConvertAccessTokenRequest.
        :type token_secret: str
        """
        if token_secret is None:
            raise ValueError("Invalid value for `token_secret`, must not be `None`")

        self._token_secret = token_secret
