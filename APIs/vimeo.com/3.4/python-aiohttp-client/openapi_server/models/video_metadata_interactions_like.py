# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoMetadataInteractionsLike(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added: bool=None, added_time: str=None, options: List[str]=None, uri: str=None):
        """VideoMetadataInteractionsLike - a model defined in OpenAPI

        :param added: The added of this VideoMetadataInteractionsLike.
        :param added_time: The added_time of this VideoMetadataInteractionsLike.
        :param options: The options of this VideoMetadataInteractionsLike.
        :param uri: The uri of this VideoMetadataInteractionsLike.
        """
        self.openapi_types = {
            'added': bool,
            'added_time': str,
            'options': List[str],
            'uri': str
        }

        self.attribute_map = {
            'added': 'added',
            'added_time': 'added_time',
            'options': 'options',
            'uri': 'uri'
        }

        self._added = added
        self._added_time = added_time
        self._options = options
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoMetadataInteractionsLike':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video_metadata_interactions_like of this VideoMetadataInteractionsLike.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added(self):
        """Gets the added of this VideoMetadataInteractionsLike.

        Whether the user has liked the video.

        :return: The added of this VideoMetadataInteractionsLike.
        :rtype: bool
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this VideoMetadataInteractionsLike.

        Whether the user has liked the video.

        :param added: The added of this VideoMetadataInteractionsLike.
        :type added: bool
        """
        if added is None:
            raise ValueError("Invalid value for `added`, must not be `None`")

        self._added = added

    @property
    def added_time(self):
        """Gets the added_time of this VideoMetadataInteractionsLike.

        The time in ISO 8601 format when the user liked the video.

        :return: The added_time of this VideoMetadataInteractionsLike.
        :rtype: str
        """
        return self._added_time

    @added_time.setter
    def added_time(self, added_time):
        """Sets the added_time of this VideoMetadataInteractionsLike.

        The time in ISO 8601 format when the user liked the video.

        :param added_time: The added_time of this VideoMetadataInteractionsLike.
        :type added_time: str
        """
        if added_time is None:
            raise ValueError("Invalid value for `added_time`, must not be `None`")

        self._added_time = added_time

    @property
    def options(self):
        """Gets the options of this VideoMetadataInteractionsLike.

        An array of HTTP methods permitted on this URI.

        :return: The options of this VideoMetadataInteractionsLike.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this VideoMetadataInteractionsLike.

        An array of HTTP methods permitted on this URI.

        :param options: The options of this VideoMetadataInteractionsLike.
        :type options: List[str]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def uri(self):
        """Gets the uri of this VideoMetadataInteractionsLike.

        The API URI that resolves to the connection data.

        :return: The uri of this VideoMetadataInteractionsLike.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this VideoMetadataInteractionsLike.

        The API URI that resolves to the connection data.

        :param uri: The uri of this VideoMetadataInteractionsLike.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
