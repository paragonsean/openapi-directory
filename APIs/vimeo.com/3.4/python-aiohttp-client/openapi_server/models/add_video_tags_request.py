# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddVideoTagsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, page: float=None, per_page: float=None):
        """AddVideoTagsRequest - a model defined in OpenAPI

        :param name: The name of this AddVideoTagsRequest.
        :param page: The page of this AddVideoTagsRequest.
        :param per_page: The per_page of this AddVideoTagsRequest.
        """
        self.openapi_types = {
            'name': str,
            'page': float,
            'per_page': float
        }

        self.attribute_map = {
            'name': 'name',
            'page': 'page',
            'per_page': 'per_page'
        }

        self._name = name
        self._page = page
        self._per_page = per_page

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddVideoTagsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The add_video_tags_request of this AddVideoTagsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AddVideoTagsRequest.

        The name of the tag to apply. See our documentation on [batch requests](https://developer.vimeo.com/api/common-formats#batch-requests) for more information.

        :return: The name of this AddVideoTagsRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddVideoTagsRequest.

        The name of the tag to apply. See our documentation on [batch requests](https://developer.vimeo.com/api/common-formats#batch-requests) for more information.

        :param name: The name of this AddVideoTagsRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def page(self):
        """Gets the page of this AddVideoTagsRequest.

        The page number of the results to show.

        :return: The page of this AddVideoTagsRequest.
        :rtype: float
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this AddVideoTagsRequest.

        The page number of the results to show.

        :param page: The page of this AddVideoTagsRequest.
        :type page: float
        """

        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this AddVideoTagsRequest.

        The number of items to show on each page of results, up to a maximum of 100.

        :return: The per_page of this AddVideoTagsRequest.
        :rtype: float
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this AddVideoTagsRequest.

        The number of items to show on each page of results, up to a maximum of 100.

        :param per_page: The per_page of this AddVideoTagsRequest.
        :type per_page: float
        """

        self._per_page = per_page
