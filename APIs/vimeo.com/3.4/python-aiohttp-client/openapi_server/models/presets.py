# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.presets_metadata import PresetsMetadata
from openapi_server.models.presets_settings import PresetsSettings
from openapi_server.models.user import User
from openapi_server import util


class Presets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: PresetsMetadata=None, name: str=None, settings: PresetsSettings=None, uri: str=None, user: User=None):
        """Presets - a model defined in OpenAPI

        :param metadata: The metadata of this Presets.
        :param name: The name of this Presets.
        :param settings: The settings of this Presets.
        :param uri: The uri of this Presets.
        :param user: The user of this Presets.
        """
        self.openapi_types = {
            'metadata': PresetsMetadata,
            'name': str,
            'settings': PresetsSettings,
            'uri': str,
            'user': User
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'name': 'name',
            'settings': 'settings',
            'uri': 'uri',
            'user': 'user'
        }

        self._metadata = metadata
        self._name = name
        self._settings = settings
        self._uri = uri
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Presets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The presets of this Presets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this Presets.


        :return: The metadata of this Presets.
        :rtype: PresetsMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Presets.


        :param metadata: The metadata of this Presets.
        :type metadata: PresetsMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Presets.

        The display name of the presets group.

        :return: The name of this Presets.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Presets.

        The display name of the presets group.

        :param name: The name of this Presets.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def settings(self):
        """Gets the settings of this Presets.


        :return: The settings of this Presets.
        :rtype: PresetsSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Presets.


        :param settings: The settings of this Presets.
        :type settings: PresetsSettings
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings

    @property
    def uri(self):
        """Gets the uri of this Presets.

        The canonical relative URI of the presets object.

        :return: The uri of this Presets.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Presets.

        The canonical relative URI of the presets object.

        :param uri: The uri of this Presets.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def user(self):
        """Gets the user of this Presets.

        The owner of the preset.

        :return: The user of this Presets.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Presets.

        The owner of the preset.

        :param user: The user of this Presets.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
