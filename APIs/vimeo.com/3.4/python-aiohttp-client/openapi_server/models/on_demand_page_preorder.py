# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OnDemandPagePreorder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, cancel_time: str=None, publish_time: str=None, time: str=None):
        """OnDemandPagePreorder - a model defined in OpenAPI

        :param active: The active of this OnDemandPagePreorder.
        :param cancel_time: The cancel_time of this OnDemandPagePreorder.
        :param publish_time: The publish_time of this OnDemandPagePreorder.
        :param time: The time of this OnDemandPagePreorder.
        """
        self.openapi_types = {
            'active': bool,
            'cancel_time': str,
            'publish_time': str,
            'time': str
        }

        self.attribute_map = {
            'active': 'active',
            'cancel_time': 'cancel_time',
            'publish_time': 'publish_time',
            'time': 'time'
        }

        self._active = active
        self._cancel_time = cancel_time
        self._publish_time = publish_time
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnDemandPagePreorder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The on_demand_page_preorder of this OnDemandPagePreorder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this OnDemandPagePreorder.

        Whether this page is available for preorder.

        :return: The active of this OnDemandPagePreorder.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this OnDemandPagePreorder.

        Whether this page is available for preorder.

        :param active: The active of this OnDemandPagePreorder.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def cancel_time(self):
        """Gets the cancel_time of this OnDemandPagePreorder.

        The time in ISO 8601 format when the preorder was cancelled.

        :return: The cancel_time of this OnDemandPagePreorder.
        :rtype: str
        """
        return self._cancel_time

    @cancel_time.setter
    def cancel_time(self, cancel_time):
        """Sets the cancel_time of this OnDemandPagePreorder.

        The time in ISO 8601 format when the preorder was cancelled.

        :param cancel_time: The cancel_time of this OnDemandPagePreorder.
        :type cancel_time: str
        """
        if cancel_time is None:
            raise ValueError("Invalid value for `cancel_time`, must not be `None`")

        self._cancel_time = cancel_time

    @property
    def publish_time(self):
        """Gets the publish_time of this OnDemandPagePreorder.

        The time in ISO 8601 format when the preorder was released to the public.

        :return: The publish_time of this OnDemandPagePreorder.
        :rtype: str
        """
        return self._publish_time

    @publish_time.setter
    def publish_time(self, publish_time):
        """Sets the publish_time of this OnDemandPagePreorder.

        The time in ISO 8601 format when the preorder was released to the public.

        :param publish_time: The publish_time of this OnDemandPagePreorder.
        :type publish_time: str
        """
        if publish_time is None:
            raise ValueError("Invalid value for `publish_time`, must not be `None`")

        self._publish_time = publish_time

    @property
    def time(self):
        """Gets the time of this OnDemandPagePreorder.

        The time in ISO 8601 format when the preorder started.

        :return: The time of this OnDemandPagePreorder.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this OnDemandPagePreorder.

        The time in ISO 8601 format when the preorder started.

        :param time: The time of this OnDemandPagePreorder.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time
