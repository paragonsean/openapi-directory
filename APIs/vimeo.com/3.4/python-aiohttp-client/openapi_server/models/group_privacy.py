# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupPrivacy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, invite: str=None, join: str=None, videos: str=None, view: str=None):
        """GroupPrivacy - a model defined in OpenAPI

        :param comment: The comment of this GroupPrivacy.
        :param invite: The invite of this GroupPrivacy.
        :param join: The join of this GroupPrivacy.
        :param videos: The videos of this GroupPrivacy.
        :param view: The view of this GroupPrivacy.
        """
        self.openapi_types = {
            'comment': str,
            'invite': str,
            'join': str,
            'videos': str,
            'view': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'invite': 'invite',
            'join': 'join',
            'videos': 'videos',
            'view': 'view'
        }

        self._comment = comment
        self._invite = invite
        self._join = join
        self._videos = videos
        self._view = view

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupPrivacy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The group_privacy of this GroupPrivacy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this GroupPrivacy.

        Who can comment on the group:  Option descriptions:  * `all` - Anyone can comment on the group.  * `members` - Only members can comment on the group. 

        :return: The comment of this GroupPrivacy.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this GroupPrivacy.

        Who can comment on the group:  Option descriptions:  * `all` - Anyone can comment on the group.  * `members` - Only members can comment on the group. 

        :param comment: The comment of this GroupPrivacy.
        :type comment: str
        """
        allowed_values = ["all", "members"]  # noqa: E501
        if comment not in allowed_values:
            raise ValueError(
                "Invalid value for `comment` ({0}), must be one of {1}"
                .format(comment, allowed_values)
            )

        self._comment = comment

    @property
    def invite(self):
        """Gets the invite of this GroupPrivacy.

        Who can invite new members to the group:  Option descriptions:  * `all` - Anyone can invite new members to join.  * `members` - Only group members can invite new members to join. 

        :return: The invite of this GroupPrivacy.
        :rtype: str
        """
        return self._invite

    @invite.setter
    def invite(self, invite):
        """Sets the invite of this GroupPrivacy.

        Who can invite new members to the group:  Option descriptions:  * `all` - Anyone can invite new members to join.  * `members` - Only group members can invite new members to join. 

        :param invite: The invite of this GroupPrivacy.
        :type invite: str
        """
        allowed_values = ["all", "members"]  # noqa: E501
        if invite not in allowed_values:
            raise ValueError(
                "Invalid value for `invite` ({0}), must be one of {1}"
                .format(invite, allowed_values)
            )

        self._invite = invite

    @property
    def join(self):
        """Gets the join of this GroupPrivacy.

        Who can join the group:  Option descriptions:  * `anybody` - Anyone can join the group.  * `members` - Only people with a Vimeo account can join the group. 

        :return: The join of this GroupPrivacy.
        :rtype: str
        """
        return self._join

    @join.setter
    def join(self, join):
        """Sets the join of this GroupPrivacy.

        Who can join the group:  Option descriptions:  * `anybody` - Anyone can join the group.  * `members` - Only people with a Vimeo account can join the group. 

        :param join: The join of this GroupPrivacy.
        :type join: str
        """
        allowed_values = ["anybody", "members"]  # noqa: E501
        if join not in allowed_values:
            raise ValueError(
                "Invalid value for `join` ({0}), must be one of {1}"
                .format(join, allowed_values)
            )

        self._join = join

    @property
    def videos(self):
        """Gets the videos of this GroupPrivacy.

        Who can add videos to the group:  Option descriptions:  * `all` - Anyone can add videos to the group.  * `members` - Only group members can add videos to the group. 

        :return: The videos of this GroupPrivacy.
        :rtype: str
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this GroupPrivacy.

        Who can add videos to the group:  Option descriptions:  * `all` - Anyone can add videos to the group.  * `members` - Only group members can add videos to the group. 

        :param videos: The videos of this GroupPrivacy.
        :type videos: str
        """
        allowed_values = ["all", "members"]  # noqa: E501
        if videos not in allowed_values:
            raise ValueError(
                "Invalid value for `videos` ({0}), must be one of {1}"
                .format(videos, allowed_values)
            )

        self._videos = videos

    @property
    def view(self):
        """Gets the view of this GroupPrivacy.

        Who can view the group:  Option descriptions:  * `anybody` - Anyone can view the group.  * `members` - Only group members can view the group. 

        :return: The view of this GroupPrivacy.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this GroupPrivacy.

        Who can view the group:  Option descriptions:  * `anybody` - Anyone can view the group.  * `members` - Only group members can view the group. 

        :param view: The view of this GroupPrivacy.
        :type view: str
        """
        allowed_values = ["anybody", "members"]  # noqa: E501
        if view not in allowed_values:
            raise ValueError(
                "Invalid value for `view` ({0}), must be one of {1}"
                .format(view, allowed_values)
            )

        self._view = view
