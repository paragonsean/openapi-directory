# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlayProgressiveInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: str=None, fps: float=None, height: float=None, link: str=None, link_expiration_time: str=None, log: object=None, md5: str=None, size: float=None, type: str=None, width: float=None):
        """PlayProgressiveInner - a model defined in OpenAPI

        :param created_time: The created_time of this PlayProgressiveInner.
        :param fps: The fps of this PlayProgressiveInner.
        :param height: The height of this PlayProgressiveInner.
        :param link: The link of this PlayProgressiveInner.
        :param link_expiration_time: The link_expiration_time of this PlayProgressiveInner.
        :param log: The log of this PlayProgressiveInner.
        :param md5: The md5 of this PlayProgressiveInner.
        :param size: The size of this PlayProgressiveInner.
        :param type: The type of this PlayProgressiveInner.
        :param width: The width of this PlayProgressiveInner.
        """
        self.openapi_types = {
            'created_time': str,
            'fps': float,
            'height': float,
            'link': str,
            'link_expiration_time': str,
            'log': object,
            'md5': str,
            'size': float,
            'type': str,
            'width': float
        }

        self.attribute_map = {
            'created_time': 'created_time',
            'fps': 'fps',
            'height': 'height',
            'link': 'link',
            'link_expiration_time': 'link_expiration_time',
            'log': 'log',
            'md5': 'md5',
            'size': 'size',
            'type': 'type',
            'width': 'width'
        }

        self._created_time = created_time
        self._fps = fps
        self._height = height
        self._link = link
        self._link_expiration_time = link_expiration_time
        self._log = log
        self._md5 = md5
        self._size = size
        self._type = type
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayProgressiveInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The play_progressive_inner of this PlayProgressiveInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this PlayProgressiveInner.

        The time in ISO 8601 format when this video file was created.

        :return: The created_time of this PlayProgressiveInner.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this PlayProgressiveInner.

        The time in ISO 8601 format when this video file was created.

        :param created_time: The created_time of this PlayProgressiveInner.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def fps(self):
        """Gets the fps of this PlayProgressiveInner.

        The FPS of the video file.

        :return: The fps of this PlayProgressiveInner.
        :rtype: float
        """
        return self._fps

    @fps.setter
    def fps(self, fps):
        """Sets the fps of this PlayProgressiveInner.

        The FPS of the video file.

        :param fps: The fps of this PlayProgressiveInner.
        :type fps: float
        """
        if fps is None:
            raise ValueError("Invalid value for `fps`, must not be `None`")

        self._fps = fps

    @property
    def height(self):
        """Gets the height of this PlayProgressiveInner.

        The height in pixels of the video.

        :return: The height of this PlayProgressiveInner.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PlayProgressiveInner.

        The height in pixels of the video.

        :param height: The height of this PlayProgressiveInner.
        :type height: float
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def link(self):
        """Gets the link of this PlayProgressiveInner.

        The direct link to this video file.

        :return: The link of this PlayProgressiveInner.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this PlayProgressiveInner.

        The direct link to this video file.

        :param link: The link of this PlayProgressiveInner.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def link_expiration_time(self):
        """Gets the link_expiration_time of this PlayProgressiveInner.

        The time in ISO 8601 format when the link to this video file expires.

        :return: The link_expiration_time of this PlayProgressiveInner.
        :rtype: str
        """
        return self._link_expiration_time

    @link_expiration_time.setter
    def link_expiration_time(self, link_expiration_time):
        """Sets the link_expiration_time of this PlayProgressiveInner.

        The time in ISO 8601 format when the link to this video file expires.

        :param link_expiration_time: The link_expiration_time of this PlayProgressiveInner.
        :type link_expiration_time: str
        """
        if link_expiration_time is None:
            raise ValueError("Invalid value for `link_expiration_time`, must not be `None`")

        self._link_expiration_time = link_expiration_time

    @property
    def log(self):
        """Gets the log of this PlayProgressiveInner.

        The URLs for logging events.

        :return: The log of this PlayProgressiveInner.
        :rtype: object
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this PlayProgressiveInner.

        The URLs for logging events.

        :param log: The log of this PlayProgressiveInner.
        :type log: object
        """

        self._log = log

    @property
    def md5(self):
        """Gets the md5 of this PlayProgressiveInner.

        The MD5 hash of the video file.

        :return: The md5 of this PlayProgressiveInner.
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this PlayProgressiveInner.

        The MD5 hash of the video file.

        :param md5: The md5 of this PlayProgressiveInner.
        :type md5: str
        """
        if md5 is None:
            raise ValueError("Invalid value for `md5`, must not be `None`")

        self._md5 = md5

    @property
    def size(self):
        """Gets the size of this PlayProgressiveInner.

        The file size in bytes of this video.

        :return: The size of this PlayProgressiveInner.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PlayProgressiveInner.

        The file size in bytes of this video.

        :param size: The size of this PlayProgressiveInner.
        :type size: float
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def type(self):
        """Gets the type of this PlayProgressiveInner.

        The type of the video file:  Option descriptions:  * `source` - The video is a source file.  * `video/mp4` - The video is in MP4 format.  * `video/webm` - The video is in WebM format.  * `vp6/x-video` - The video is in VP6 format. 

        :return: The type of this PlayProgressiveInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlayProgressiveInner.

        The type of the video file:  Option descriptions:  * `source` - The video is a source file.  * `video/mp4` - The video is in MP4 format.  * `video/webm` - The video is in WebM format.  * `vp6/x-video` - The video is in VP6 format. 

        :param type: The type of this PlayProgressiveInner.
        :type type: str
        """
        allowed_values = [None,"source", "video/mp4", "video/webm", "vp6/x-video"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def width(self):
        """Gets the width of this PlayProgressiveInner.

        The width in pixels of the video.

        :return: The width of this PlayProgressiveInner.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this PlayProgressiveInner.

        The width in pixels of the video.

        :param width: The width of this PlayProgressiveInner.
        :type width: float
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
