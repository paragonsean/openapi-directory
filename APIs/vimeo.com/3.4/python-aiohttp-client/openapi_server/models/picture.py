# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.picture_sizes_inner import PictureSizesInner
from openapi_server import util


class Picture(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, link: str=None, resource_key: str=None, sizes: List[PictureSizesInner]=None, type: str=None, uri: str=None):
        """Picture - a model defined in OpenAPI

        :param active: The active of this Picture.
        :param link: The link of this Picture.
        :param resource_key: The resource_key of this Picture.
        :param sizes: The sizes of this Picture.
        :param type: The type of this Picture.
        :param uri: The uri of this Picture.
        """
        self.openapi_types = {
            'active': bool,
            'link': str,
            'resource_key': str,
            'sizes': List[PictureSizesInner],
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            'active': 'active',
            'link': 'link',
            'resource_key': 'resource_key',
            'sizes': 'sizes',
            'type': 'type',
            'uri': 'uri'
        }

        self._active = active
        self._link = link
        self._resource_key = resource_key
        self._sizes = sizes
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Picture':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The picture of this Picture.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Picture.

        Whether this picture is the active picture for its parent resource.

        :return: The active of this Picture.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Picture.

        Whether this picture is the active picture for its parent resource.

        :param active: The active of this Picture.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def link(self):
        """Gets the link of this Picture.

        The upload URL for the picture. This field appears when you create the picture resource for the first time.

        :return: The link of this Picture.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Picture.

        The upload URL for the picture. This field appears when you create the picture resource for the first time.

        :param link: The link of this Picture.
        :type link: str
        """

        self._link = link

    @property
    def resource_key(self):
        """Gets the resource_key of this Picture.

        The picture's resource key string.

        :return: The resource_key of this Picture.
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this Picture.

        The picture's resource key string.

        :param resource_key: The resource_key of this Picture.
        :type resource_key: str
        """
        if resource_key is None:
            raise ValueError("Invalid value for `resource_key`, must not be `None`")

        self._resource_key = resource_key

    @property
    def sizes(self):
        """Gets the sizes of this Picture.

        An array containing reference information about all available image files.

        :return: The sizes of this Picture.
        :rtype: List[PictureSizesInner]
        """
        return self._sizes

    @sizes.setter
    def sizes(self, sizes):
        """Sets the sizes of this Picture.

        An array containing reference information about all available image files.

        :param sizes: The sizes of this Picture.
        :type sizes: List[PictureSizesInner]
        """
        if sizes is None:
            raise ValueError("Invalid value for `sizes`, must not be `None`")

        self._sizes = sizes

    @property
    def type(self):
        """Gets the type of this Picture.

        The type of the picture:  Option descriptions:  * `caution` - An image that is appropriate for all ages.  * `custom` - A custom image for the video.  * `default` - The default image for the video. 

        :return: The type of this Picture.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Picture.

        The type of the picture:  Option descriptions:  * `caution` - An image that is appropriate for all ages.  * `custom` - A custom image for the video.  * `default` - The default image for the video. 

        :param type: The type of this Picture.
        :type type: str
        """
        allowed_values = ["caution", "custom", "default"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this Picture.

        The picture's URI.

        :return: The uri of this Picture.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Picture.

        The picture's URI.

        :param uri: The uri of this Picture.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
