# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.on_demand_page_metadata_connections_metadata_connections_comments import OnDemandPageMetadataConnectionsMetadataConnectionsComments
from openapi_server.models.on_demand_page_metadata_connections_metadata_connections_genres import OnDemandPageMetadataConnectionsMetadataConnectionsGenres
from openapi_server.models.on_demand_page_metadata_connections_metadata_connections_likes import OnDemandPageMetadataConnectionsMetadataConnectionsLikes
from openapi_server.models.on_demand_page_metadata_connections_metadata_connections_pictures import OnDemandPageMetadataConnectionsMetadataConnectionsPictures
from openapi_server.models.on_demand_page_metadata_connections_metadata_connections_seasons import OnDemandPageMetadataConnectionsMetadataConnectionsSeasons
from openapi_server.models.on_demand_page_metadata_connections_metadata_connections_videos import OnDemandPageMetadataConnectionsMetadataConnectionsVideos
from openapi_server import util


class OnDemandPageMetadataConnectionsMetadataConnections(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: OnDemandPageMetadataConnectionsMetadataConnectionsComments=None, genres: OnDemandPageMetadataConnectionsMetadataConnectionsGenres=None, likes: OnDemandPageMetadataConnectionsMetadataConnectionsLikes=None, pictures: OnDemandPageMetadataConnectionsMetadataConnectionsPictures=None, seasons: OnDemandPageMetadataConnectionsMetadataConnectionsSeasons=None, videos: OnDemandPageMetadataConnectionsMetadataConnectionsVideos=None):
        """OnDemandPageMetadataConnectionsMetadataConnections - a model defined in OpenAPI

        :param comments: The comments of this OnDemandPageMetadataConnectionsMetadataConnections.
        :param genres: The genres of this OnDemandPageMetadataConnectionsMetadataConnections.
        :param likes: The likes of this OnDemandPageMetadataConnectionsMetadataConnections.
        :param pictures: The pictures of this OnDemandPageMetadataConnectionsMetadataConnections.
        :param seasons: The seasons of this OnDemandPageMetadataConnectionsMetadataConnections.
        :param videos: The videos of this OnDemandPageMetadataConnectionsMetadataConnections.
        """
        self.openapi_types = {
            'comments': OnDemandPageMetadataConnectionsMetadataConnectionsComments,
            'genres': OnDemandPageMetadataConnectionsMetadataConnectionsGenres,
            'likes': OnDemandPageMetadataConnectionsMetadataConnectionsLikes,
            'pictures': OnDemandPageMetadataConnectionsMetadataConnectionsPictures,
            'seasons': OnDemandPageMetadataConnectionsMetadataConnectionsSeasons,
            'videos': OnDemandPageMetadataConnectionsMetadataConnectionsVideos
        }

        self.attribute_map = {
            'comments': 'comments',
            'genres': 'genres',
            'likes': 'likes',
            'pictures': 'pictures',
            'seasons': 'seasons',
            'videos': 'videos'
        }

        self._comments = comments
        self._genres = genres
        self._likes = likes
        self._pictures = pictures
        self._seasons = seasons
        self._videos = videos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnDemandPageMetadataConnectionsMetadataConnections':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The on_demand_page_metadata_connections_metadata_connections of this OnDemandPageMetadataConnectionsMetadataConnections.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this OnDemandPageMetadataConnectionsMetadataConnections.


        :return: The comments of this OnDemandPageMetadataConnectionsMetadataConnections.
        :rtype: OnDemandPageMetadataConnectionsMetadataConnectionsComments
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this OnDemandPageMetadataConnectionsMetadataConnections.


        :param comments: The comments of this OnDemandPageMetadataConnectionsMetadataConnections.
        :type comments: OnDemandPageMetadataConnectionsMetadataConnectionsComments
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")

        self._comments = comments

    @property
    def genres(self):
        """Gets the genres of this OnDemandPageMetadataConnectionsMetadataConnections.


        :return: The genres of this OnDemandPageMetadataConnectionsMetadataConnections.
        :rtype: OnDemandPageMetadataConnectionsMetadataConnectionsGenres
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this OnDemandPageMetadataConnectionsMetadataConnections.


        :param genres: The genres of this OnDemandPageMetadataConnectionsMetadataConnections.
        :type genres: OnDemandPageMetadataConnectionsMetadataConnectionsGenres
        """
        if genres is None:
            raise ValueError("Invalid value for `genres`, must not be `None`")

        self._genres = genres

    @property
    def likes(self):
        """Gets the likes of this OnDemandPageMetadataConnectionsMetadataConnections.


        :return: The likes of this OnDemandPageMetadataConnectionsMetadataConnections.
        :rtype: OnDemandPageMetadataConnectionsMetadataConnectionsLikes
        """
        return self._likes

    @likes.setter
    def likes(self, likes):
        """Sets the likes of this OnDemandPageMetadataConnectionsMetadataConnections.


        :param likes: The likes of this OnDemandPageMetadataConnectionsMetadataConnections.
        :type likes: OnDemandPageMetadataConnectionsMetadataConnectionsLikes
        """
        if likes is None:
            raise ValueError("Invalid value for `likes`, must not be `None`")

        self._likes = likes

    @property
    def pictures(self):
        """Gets the pictures of this OnDemandPageMetadataConnectionsMetadataConnections.


        :return: The pictures of this OnDemandPageMetadataConnectionsMetadataConnections.
        :rtype: OnDemandPageMetadataConnectionsMetadataConnectionsPictures
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this OnDemandPageMetadataConnectionsMetadataConnections.


        :param pictures: The pictures of this OnDemandPageMetadataConnectionsMetadataConnections.
        :type pictures: OnDemandPageMetadataConnectionsMetadataConnectionsPictures
        """
        if pictures is None:
            raise ValueError("Invalid value for `pictures`, must not be `None`")

        self._pictures = pictures

    @property
    def seasons(self):
        """Gets the seasons of this OnDemandPageMetadataConnectionsMetadataConnections.


        :return: The seasons of this OnDemandPageMetadataConnectionsMetadataConnections.
        :rtype: OnDemandPageMetadataConnectionsMetadataConnectionsSeasons
        """
        return self._seasons

    @seasons.setter
    def seasons(self, seasons):
        """Sets the seasons of this OnDemandPageMetadataConnectionsMetadataConnections.


        :param seasons: The seasons of this OnDemandPageMetadataConnectionsMetadataConnections.
        :type seasons: OnDemandPageMetadataConnectionsMetadataConnectionsSeasons
        """
        if seasons is None:
            raise ValueError("Invalid value for `seasons`, must not be `None`")

        self._seasons = seasons

    @property
    def videos(self):
        """Gets the videos of this OnDemandPageMetadataConnectionsMetadataConnections.


        :return: The videos of this OnDemandPageMetadataConnectionsMetadataConnections.
        :rtype: OnDemandPageMetadataConnectionsMetadataConnectionsVideos
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this OnDemandPageMetadataConnectionsMetadataConnections.


        :param videos: The videos of this OnDemandPageMetadataConnectionsMetadataConnections.
        :type videos: OnDemandPageMetadataConnectionsMetadataConnectionsVideos
        """
        if videos is None:
            raise ValueError("Invalid value for `videos`, must not be `None`")

        self._videos = videos
