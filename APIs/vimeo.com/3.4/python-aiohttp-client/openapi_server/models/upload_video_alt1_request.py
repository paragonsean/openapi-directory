# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.upload_video_alt1_request_embed import UploadVideoAlt1RequestEmbed
from openapi_server.models.upload_video_alt1_request_privacy import UploadVideoAlt1RequestPrivacy
from openapi_server.models.upload_video_alt1_request_ratings import UploadVideoAlt1RequestRatings
from openapi_server.models.upload_video_alt1_request_review_page import UploadVideoAlt1RequestReviewPage
from openapi_server.models.upload_video_alt1_request_spatial import UploadVideoAlt1RequestSpatial
from openapi_server.models.upload_video_alt1_request_upload import UploadVideoAlt1RequestUpload
from openapi_server import util


class UploadVideoAlt1Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_rating: List[str]=None, description: str=None, embed: UploadVideoAlt1RequestEmbed=None, license: str=None, locale: str=None, name: str=None, password: str=None, privacy: UploadVideoAlt1RequestPrivacy=None, ratings: UploadVideoAlt1RequestRatings=None, review_page: UploadVideoAlt1RequestReviewPage=None, spatial: UploadVideoAlt1RequestSpatial=None, upload: UploadVideoAlt1RequestUpload=None):
        """UploadVideoAlt1Request - a model defined in OpenAPI

        :param content_rating: The content_rating of this UploadVideoAlt1Request.
        :param description: The description of this UploadVideoAlt1Request.
        :param embed: The embed of this UploadVideoAlt1Request.
        :param license: The license of this UploadVideoAlt1Request.
        :param locale: The locale of this UploadVideoAlt1Request.
        :param name: The name of this UploadVideoAlt1Request.
        :param password: The password of this UploadVideoAlt1Request.
        :param privacy: The privacy of this UploadVideoAlt1Request.
        :param ratings: The ratings of this UploadVideoAlt1Request.
        :param review_page: The review_page of this UploadVideoAlt1Request.
        :param spatial: The spatial of this UploadVideoAlt1Request.
        :param upload: The upload of this UploadVideoAlt1Request.
        """
        self.openapi_types = {
            'content_rating': List[str],
            'description': str,
            'embed': UploadVideoAlt1RequestEmbed,
            'license': str,
            'locale': str,
            'name': str,
            'password': str,
            'privacy': UploadVideoAlt1RequestPrivacy,
            'ratings': UploadVideoAlt1RequestRatings,
            'review_page': UploadVideoAlt1RequestReviewPage,
            'spatial': UploadVideoAlt1RequestSpatial,
            'upload': UploadVideoAlt1RequestUpload
        }

        self.attribute_map = {
            'content_rating': 'content_rating',
            'description': 'description',
            'embed': 'embed',
            'license': 'license',
            'locale': 'locale',
            'name': 'name',
            'password': 'password',
            'privacy': 'privacy',
            'ratings': 'ratings',
            'review_page': 'review_page',
            'spatial': 'spatial',
            'upload': 'upload'
        }

        self._content_rating = content_rating
        self._description = description
        self._embed = embed
        self._license = license
        self._locale = locale
        self._name = name
        self._password = password
        self._privacy = privacy
        self._ratings = ratings
        self._review_page = review_page
        self._spatial = spatial
        self._upload = upload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadVideoAlt1Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The upload_video_alt1_request of this UploadVideoAlt1Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_rating(self):
        """Gets the content_rating of this UploadVideoAlt1Request.

        A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint.

        :return: The content_rating of this UploadVideoAlt1Request.
        :rtype: List[str]
        """
        return self._content_rating

    @content_rating.setter
    def content_rating(self, content_rating):
        """Sets the content_rating of this UploadVideoAlt1Request.

        A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint.

        :param content_rating: The content_rating of this UploadVideoAlt1Request.
        :type content_rating: List[str]
        """

        self._content_rating = content_rating

    @property
    def description(self):
        """Gets the description of this UploadVideoAlt1Request.

        The description of the video.

        :return: The description of this UploadVideoAlt1Request.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UploadVideoAlt1Request.

        The description of the video.

        :param description: The description of this UploadVideoAlt1Request.
        :type description: str
        """

        self._description = description

    @property
    def embed(self):
        """Gets the embed of this UploadVideoAlt1Request.


        :return: The embed of this UploadVideoAlt1Request.
        :rtype: UploadVideoAlt1RequestEmbed
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this UploadVideoAlt1Request.


        :param embed: The embed of this UploadVideoAlt1Request.
        :type embed: UploadVideoAlt1RequestEmbed
        """

        self._embed = embed

    @property
    def license(self):
        """Gets the license of this UploadVideoAlt1Request.

        The Creative Commons license.

        :return: The license of this UploadVideoAlt1Request.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this UploadVideoAlt1Request.

        The Creative Commons license.

        :param license: The license of this UploadVideoAlt1Request.
        :type license: str
        """
        allowed_values = ["by", "by-nc", "by-nc-nd", "by-nc-sa", "by-nd", "by-sa", "cc0"]  # noqa: E501
        if license not in allowed_values:
            raise ValueError(
                "Invalid value for `license` ({0}), must be one of {1}"
                .format(license, allowed_values)
            )

        self._license = license

    @property
    def locale(self):
        """Gets the locale of this UploadVideoAlt1Request.

        The video's default language. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.

        :return: The locale of this UploadVideoAlt1Request.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this UploadVideoAlt1Request.

        The video's default language. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.

        :param locale: The locale of this UploadVideoAlt1Request.
        :type locale: str
        """

        self._locale = locale

    @property
    def name(self):
        """Gets the name of this UploadVideoAlt1Request.

        The title of the video.

        :return: The name of this UploadVideoAlt1Request.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UploadVideoAlt1Request.

        The title of the video.

        :param name: The name of this UploadVideoAlt1Request.
        :type name: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this UploadVideoAlt1Request.

        The password. When you set `privacy.view` to `password`, you must provide the password as an additional parameter.

        :return: The password of this UploadVideoAlt1Request.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UploadVideoAlt1Request.

        The password. When you set `privacy.view` to `password`, you must provide the password as an additional parameter.

        :param password: The password of this UploadVideoAlt1Request.
        :type password: str
        """

        self._password = password

    @property
    def privacy(self):
        """Gets the privacy of this UploadVideoAlt1Request.


        :return: The privacy of this UploadVideoAlt1Request.
        :rtype: UploadVideoAlt1RequestPrivacy
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this UploadVideoAlt1Request.


        :param privacy: The privacy of this UploadVideoAlt1Request.
        :type privacy: UploadVideoAlt1RequestPrivacy
        """

        self._privacy = privacy

    @property
    def ratings(self):
        """Gets the ratings of this UploadVideoAlt1Request.


        :return: The ratings of this UploadVideoAlt1Request.
        :rtype: UploadVideoAlt1RequestRatings
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this UploadVideoAlt1Request.


        :param ratings: The ratings of this UploadVideoAlt1Request.
        :type ratings: UploadVideoAlt1RequestRatings
        """

        self._ratings = ratings

    @property
    def review_page(self):
        """Gets the review_page of this UploadVideoAlt1Request.


        :return: The review_page of this UploadVideoAlt1Request.
        :rtype: UploadVideoAlt1RequestReviewPage
        """
        return self._review_page

    @review_page.setter
    def review_page(self, review_page):
        """Sets the review_page of this UploadVideoAlt1Request.


        :param review_page: The review_page of this UploadVideoAlt1Request.
        :type review_page: UploadVideoAlt1RequestReviewPage
        """

        self._review_page = review_page

    @property
    def spatial(self):
        """Gets the spatial of this UploadVideoAlt1Request.


        :return: The spatial of this UploadVideoAlt1Request.
        :rtype: UploadVideoAlt1RequestSpatial
        """
        return self._spatial

    @spatial.setter
    def spatial(self, spatial):
        """Sets the spatial of this UploadVideoAlt1Request.


        :param spatial: The spatial of this UploadVideoAlt1Request.
        :type spatial: UploadVideoAlt1RequestSpatial
        """

        self._spatial = spatial

    @property
    def upload(self):
        """Gets the upload of this UploadVideoAlt1Request.


        :return: The upload of this UploadVideoAlt1Request.
        :rtype: UploadVideoAlt1RequestUpload
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this UploadVideoAlt1Request.


        :param upload: The upload of this UploadVideoAlt1Request.
        :type upload: UploadVideoAlt1RequestUpload
        """
        if upload is None:
            raise ValueError("Invalid value for `upload`, must not be `None`")

        self._upload = upload
