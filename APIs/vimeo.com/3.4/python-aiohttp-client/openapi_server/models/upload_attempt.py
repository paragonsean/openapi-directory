# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server.models.video import Video
from openapi_server import util


class UploadAttempt(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clip: Video=None, complete_uri: str=None, form: str=None, ticket_id: str=None, upload_link: str=None, uri: str=None, user: User=None):
        """UploadAttempt - a model defined in OpenAPI

        :param clip: The clip of this UploadAttempt.
        :param complete_uri: The complete_uri of this UploadAttempt.
        :param form: The form of this UploadAttempt.
        :param ticket_id: The ticket_id of this UploadAttempt.
        :param upload_link: The upload_link of this UploadAttempt.
        :param uri: The uri of this UploadAttempt.
        :param user: The user of this UploadAttempt.
        """
        self.openapi_types = {
            'clip': Video,
            'complete_uri': str,
            'form': str,
            'ticket_id': str,
            'upload_link': str,
            'uri': str,
            'user': User
        }

        self.attribute_map = {
            'clip': 'clip',
            'complete_uri': 'complete_uri',
            'form': 'form',
            'ticket_id': 'ticket_id',
            'upload_link': 'upload_link',
            'uri': 'uri',
            'user': 'user'
        }

        self._clip = clip
        self._complete_uri = complete_uri
        self._form = form
        self._ticket_id = ticket_id
        self._upload_link = upload_link
        self._uri = uri
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadAttempt':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The upload-attempt of this UploadAttempt.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clip(self):
        """Gets the clip of this UploadAttempt.

        The video to upload.

        :return: The clip of this UploadAttempt.
        :rtype: Video
        """
        return self._clip

    @clip.setter
    def clip(self, clip):
        """Sets the clip of this UploadAttempt.

        The video to upload.

        :param clip: The clip of this UploadAttempt.
        :type clip: Video
        """

        self._clip = clip

    @property
    def complete_uri(self):
        """Gets the complete_uri of this UploadAttempt.

        The completion URI of the upload.

        :return: The complete_uri of this UploadAttempt.
        :rtype: str
        """
        return self._complete_uri

    @complete_uri.setter
    def complete_uri(self, complete_uri):
        """Sets the complete_uri of this UploadAttempt.

        The completion URI of the upload.

        :param complete_uri: The complete_uri of this UploadAttempt.
        :type complete_uri: str
        """

        self._complete_uri = complete_uri

    @property
    def form(self):
        """Gets the form of this UploadAttempt.

        The HTML upload form.

        :return: The form of this UploadAttempt.
        :rtype: str
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this UploadAttempt.

        The HTML upload form.

        :param form: The form of this UploadAttempt.
        :type form: str
        """

        self._form = form

    @property
    def ticket_id(self):
        """Gets the ticket_id of this UploadAttempt.

        The ticket identifier string for the upload.

        :return: The ticket_id of this UploadAttempt.
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this UploadAttempt.

        The ticket identifier string for the upload.

        :param ticket_id: The ticket_id of this UploadAttempt.
        :type ticket_id: str
        """
        if ticket_id is None:
            raise ValueError("Invalid value for `ticket_id`, must not be `None`")

        self._ticket_id = ticket_id

    @property
    def upload_link(self):
        """Gets the upload_link of this UploadAttempt.

        The upload URL.

        :return: The upload_link of this UploadAttempt.
        :rtype: str
        """
        return self._upload_link

    @upload_link.setter
    def upload_link(self, upload_link):
        """Sets the upload_link of this UploadAttempt.

        The upload URL.

        :param upload_link: The upload_link of this UploadAttempt.
        :type upload_link: str
        """
        if upload_link is None:
            raise ValueError("Invalid value for `upload_link`, must not be `None`")

        self._upload_link = upload_link

    @property
    def uri(self):
        """Gets the uri of this UploadAttempt.

        The upload URI.

        :return: The uri of this UploadAttempt.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this UploadAttempt.

        The upload URI.

        :param uri: The uri of this UploadAttempt.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def user(self):
        """Gets the user of this UploadAttempt.

        The owner of the uploaded video.

        :return: The user of this UploadAttempt.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UploadAttempt.

        The owner of the uploaded video.

        :param user: The user of this UploadAttempt.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
