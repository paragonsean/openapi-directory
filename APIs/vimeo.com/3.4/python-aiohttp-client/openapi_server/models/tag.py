# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag_metadata import TagMetadata
from openapi_server import util


class Tag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canonical: str=None, metadata: TagMetadata=None, name: str=None, resource_key: str=None, uri: str=None):
        """Tag - a model defined in OpenAPI

        :param canonical: The canonical of this Tag.
        :param metadata: The metadata of this Tag.
        :param name: The name of this Tag.
        :param resource_key: The resource_key of this Tag.
        :param uri: The uri of this Tag.
        """
        self.openapi_types = {
            'canonical': str,
            'metadata': TagMetadata,
            'name': str,
            'resource_key': str,
            'uri': str
        }

        self.attribute_map = {
            'canonical': 'canonical',
            'metadata': 'metadata',
            'name': 'name',
            'resource_key': 'resource_key',
            'uri': 'uri'
        }

        self._canonical = canonical
        self._metadata = metadata
        self._name = name
        self._resource_key = resource_key
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tag of this Tag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canonical(self):
        """Gets the canonical of this Tag.

        The normalized canonical tag name.

        :return: The canonical of this Tag.
        :rtype: str
        """
        return self._canonical

    @canonical.setter
    def canonical(self, canonical):
        """Sets the canonical of this Tag.

        The normalized canonical tag name.

        :param canonical: The canonical of this Tag.
        :type canonical: str
        """
        if canonical is None:
            raise ValueError("Invalid value for `canonical`, must not be `None`")

        self._canonical = canonical

    @property
    def metadata(self):
        """Gets the metadata of this Tag.


        :return: The metadata of this Tag.
        :rtype: TagMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Tag.


        :param metadata: The metadata of this Tag.
        :type metadata: TagMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Tag.

        The tag value.

        :return: The name of this Tag.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tag.

        The tag value.

        :param name: The name of this Tag.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def resource_key(self):
        """Gets the resource_key of this Tag.

        The tag's resource key string.

        :return: The resource_key of this Tag.
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this Tag.

        The tag's resource key string.

        :param resource_key: The resource_key of this Tag.
        :type resource_key: str
        """
        if resource_key is None:
            raise ValueError("Invalid value for `resource_key`, must not be `None`")

        self._resource_key = resource_key

    @property
    def uri(self):
        """Gets the uri of this Tag.

        The canonical relative URI of the tag.

        :return: The uri of this Tag.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Tag.

        The canonical relative URI of the tag.

        :param uri: The uri of this Tag.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
