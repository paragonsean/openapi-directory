# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PurchaseInteractionSubscribe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, drm: bool=None, expires_time: str=None, link: str=None, purchase_time: str=None, stream: str=None, uri: str=None):
        """PurchaseInteractionSubscribe - a model defined in OpenAPI

        :param drm: The drm of this PurchaseInteractionSubscribe.
        :param expires_time: The expires_time of this PurchaseInteractionSubscribe.
        :param link: The link of this PurchaseInteractionSubscribe.
        :param purchase_time: The purchase_time of this PurchaseInteractionSubscribe.
        :param stream: The stream of this PurchaseInteractionSubscribe.
        :param uri: The uri of this PurchaseInteractionSubscribe.
        """
        self.openapi_types = {
            'drm': bool,
            'expires_time': str,
            'link': str,
            'purchase_time': str,
            'stream': str,
            'uri': str
        }

        self.attribute_map = {
            'drm': 'drm',
            'expires_time': 'expires_time',
            'link': 'link',
            'purchase_time': 'purchase_time',
            'stream': 'stream',
            'uri': 'uri'
        }

        self._drm = drm
        self._expires_time = expires_time
        self._link = link
        self._purchase_time = purchase_time
        self._stream = stream
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseInteractionSubscribe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The purchase_interaction_subscribe of this PurchaseInteractionSubscribe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drm(self):
        """Gets the drm of this PurchaseInteractionSubscribe.

        Whether the On Demand subscription has DRM.

        :return: The drm of this PurchaseInteractionSubscribe.
        :rtype: bool
        """
        return self._drm

    @drm.setter
    def drm(self, drm):
        """Sets the drm of this PurchaseInteractionSubscribe.

        Whether the On Demand subscription has DRM.

        :param drm: The drm of this PurchaseInteractionSubscribe.
        :type drm: bool
        """

        self._drm = drm

    @property
    def expires_time(self):
        """Gets the expires_time of this PurchaseInteractionSubscribe.

        The time in ISO 8601 format when the On Demand video will expire.

        :return: The expires_time of this PurchaseInteractionSubscribe.
        :rtype: str
        """
        return self._expires_time

    @expires_time.setter
    def expires_time(self, expires_time):
        """Sets the expires_time of this PurchaseInteractionSubscribe.

        The time in ISO 8601 format when the On Demand video will expire.

        :param expires_time: The expires_time of this PurchaseInteractionSubscribe.
        :type expires_time: str
        """

        self._expires_time = expires_time

    @property
    def link(self):
        """Gets the link of this PurchaseInteractionSubscribe.

        The URL to purchase this On Demand subscription on Vimeo.

        :return: The link of this PurchaseInteractionSubscribe.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this PurchaseInteractionSubscribe.

        The URL to purchase this On Demand subscription on Vimeo.

        :param link: The link of this PurchaseInteractionSubscribe.
        :type link: str
        """

        self._link = link

    @property
    def purchase_time(self):
        """Gets the purchase_time of this PurchaseInteractionSubscribe.

        The time in ISO 8601 format when the On Demand was purchased.

        :return: The purchase_time of this PurchaseInteractionSubscribe.
        :rtype: str
        """
        return self._purchase_time

    @purchase_time.setter
    def purchase_time(self, purchase_time):
        """Sets the purchase_time of this PurchaseInteractionSubscribe.

        The time in ISO 8601 format when the On Demand was purchased.

        :param purchase_time: The purchase_time of this PurchaseInteractionSubscribe.
        :type purchase_time: str
        """

        self._purchase_time = purchase_time

    @property
    def stream(self):
        """Gets the stream of this PurchaseInteractionSubscribe.

        The user's streaming access to this On Demand subscription:  Option descriptions:  * `available` - The On Demand subscription is available for streaming.  * `purchased` - The On Demand subscription has been purchased.  * `restricted` - Streaming for the On Demand subscription is restricted.  * `unavailable` - The On Demand subscription is unavailable. 

        :return: The stream of this PurchaseInteractionSubscribe.
        :rtype: str
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this PurchaseInteractionSubscribe.

        The user's streaming access to this On Demand subscription:  Option descriptions:  * `available` - The On Demand subscription is available for streaming.  * `purchased` - The On Demand subscription has been purchased.  * `restricted` - Streaming for the On Demand subscription is restricted.  * `unavailable` - The On Demand subscription is unavailable. 

        :param stream: The stream of this PurchaseInteractionSubscribe.
        :type stream: str
        """
        allowed_values = ["available", "purchased", "restricted", "unavailable"]  # noqa: E501
        if stream not in allowed_values:
            raise ValueError(
                "Invalid value for `stream` ({0}), must be one of {1}"
                .format(stream, allowed_values)
            )

        self._stream = stream

    @property
    def uri(self):
        """Gets the uri of this PurchaseInteractionSubscribe.

        The On Demand subscription's product URI.

        :return: The uri of this PurchaseInteractionSubscribe.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PurchaseInteractionSubscribe.

        The On Demand subscription's product URI.

        :param uri: The uri of this PurchaseInteractionSubscribe.
        :type uri: str
        """

        self._uri = uri
