# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.on_demand_promotion_metadata_connections_codes import OnDemandPromotionMetadataConnectionsCodes
from openapi_server import util


class OnDemandPromotionMetadataConnections(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codes: OnDemandPromotionMetadataConnectionsCodes=None):
        """OnDemandPromotionMetadataConnections - a model defined in OpenAPI

        :param codes: The codes of this OnDemandPromotionMetadataConnections.
        """
        self.openapi_types = {
            'codes': OnDemandPromotionMetadataConnectionsCodes
        }

        self.attribute_map = {
            'codes': 'codes'
        }

        self._codes = codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnDemandPromotionMetadataConnections':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The on_demand_promotion_metadata_connections of this OnDemandPromotionMetadataConnections.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codes(self):
        """Gets the codes of this OnDemandPromotionMetadataConnections.


        :return: The codes of this OnDemandPromotionMetadataConnections.
        :rtype: OnDemandPromotionMetadataConnectionsCodes
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this OnDemandPromotionMetadataConnections.


        :param codes: The codes of this OnDemandPromotionMetadataConnections.
        :type codes: OnDemandPromotionMetadataConnectionsCodes
        """
        if codes is None:
            raise ValueError("Invalid value for `codes`, must not be `None`")

        self._codes = codes
