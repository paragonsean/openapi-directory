# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_app import ApiApp
from openapi_server.models.user import User
from openapi_server import util


class Auth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, app: ApiApp=None, expires_on: str=None, refresh_token: str=None, scope: str=None, token_type: str=None, user: User=None):
        """Auth - a model defined in OpenAPI

        :param access_token: The access_token of this Auth.
        :param app: The app of this Auth.
        :param expires_on: The expires_on of this Auth.
        :param refresh_token: The refresh_token of this Auth.
        :param scope: The scope of this Auth.
        :param token_type: The token_type of this Auth.
        :param user: The user of this Auth.
        """
        self.openapi_types = {
            'access_token': str,
            'app': ApiApp,
            'expires_on': str,
            'refresh_token': str,
            'scope': str,
            'token_type': str,
            'user': User
        }

        self.attribute_map = {
            'access_token': 'access_token',
            'app': 'app',
            'expires_on': 'expires_on',
            'refresh_token': 'refresh_token',
            'scope': 'scope',
            'token_type': 'token_type',
            'user': 'user'
        }

        self._access_token = access_token
        self._app = app
        self._expires_on = expires_on
        self._refresh_token = refresh_token
        self._scope = scope
        self._token_type = token_type
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Auth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The auth of this Auth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this Auth.

        The access token string.

        :return: The access_token of this Auth.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this Auth.

        The access token string.

        :param access_token: The access_token of this Auth.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def app(self):
        """Gets the app of this Auth.

        The API application associated with the token.

        :return: The app of this Auth.
        :rtype: ApiApp
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this Auth.

        The API application associated with the token.

        :param app: The app of this Auth.
        :type app: ApiApp
        """
        if app is None:
            raise ValueError("Invalid value for `app`, must not be `None`")

        self._app = app

    @property
    def expires_on(self):
        """Gets the expires_on of this Auth.

        The date and time that the token expires.

        :return: The expires_on of this Auth.
        :rtype: str
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this Auth.

        The date and time that the token expires.

        :param expires_on: The expires_on of this Auth.
        :type expires_on: str
        """

        self._expires_on = expires_on

    @property
    def refresh_token(self):
        """Gets the refresh_token of this Auth.

        The refresh token string.

        :return: The refresh_token of this Auth.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this Auth.

        The refresh token string.

        :param refresh_token: The refresh_token of this Auth.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def scope(self):
        """Gets the scope of this Auth.

        The scope or scopes that the token supports.

        :return: The scope of this Auth.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Auth.

        The scope or scopes that the token supports.

        :param scope: The scope of this Auth.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope

    @property
    def token_type(self):
        """Gets the token_type of this Auth.

        The token type:  Option descriptions:  * `bearer` - The token is of the `bearer` type. 

        :return: The token_type of this Auth.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this Auth.

        The token type:  Option descriptions:  * `bearer` - The token is of the `bearer` type. 

        :param token_type: The token_type of this Auth.
        :type token_type: str
        """
        allowed_values = ["bearer"]  # noqa: E501
        if token_type not in allowed_values:
            raise ValueError(
                "Invalid value for `token_type` ({0}), must be one of {1}"
                .format(token_type, allowed_values)
            )

        self._token_type = token_type

    @property
    def user(self):
        """Gets the user of this Auth.

        The user associated with the token.

        :return: The user of this Auth.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Auth.

        The user associated with the token.

        :param user: The user of this Auth.
        :type user: User
        """

        self._user = user
