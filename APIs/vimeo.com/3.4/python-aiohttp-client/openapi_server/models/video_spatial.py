# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_spatial_director_timeline_inner import VideoSpatialDirectorTimelineInner
from openapi_server import util


class VideoSpatial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, director_timeline: List[VideoSpatialDirectorTimelineInner]=None, field_of_view: float=None, projection: str=None, stereo_format: str=None):
        """VideoSpatial - a model defined in OpenAPI

        :param director_timeline: The director_timeline of this VideoSpatial.
        :param field_of_view: The field_of_view of this VideoSpatial.
        :param projection: The projection of this VideoSpatial.
        :param stereo_format: The stereo_format of this VideoSpatial.
        """
        self.openapi_types = {
            'director_timeline': List[VideoSpatialDirectorTimelineInner],
            'field_of_view': float,
            'projection': str,
            'stereo_format': str
        }

        self.attribute_map = {
            'director_timeline': 'director_timeline',
            'field_of_view': 'field_of_view',
            'projection': 'projection',
            'stereo_format': 'stereo_format'
        }

        self._director_timeline = director_timeline
        self._field_of_view = field_of_view
        self._projection = projection
        self._stereo_format = stereo_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoSpatial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video_spatial of this VideoSpatial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def director_timeline(self):
        """Gets the director_timeline of this VideoSpatial.

        360 director timeline.

        :return: The director_timeline of this VideoSpatial.
        :rtype: List[VideoSpatialDirectorTimelineInner]
        """
        return self._director_timeline

    @director_timeline.setter
    def director_timeline(self, director_timeline):
        """Sets the director_timeline of this VideoSpatial.

        360 director timeline.

        :param director_timeline: The director_timeline of this VideoSpatial.
        :type director_timeline: List[VideoSpatialDirectorTimelineInner]
        """
        if director_timeline is None:
            raise ValueError("Invalid value for `director_timeline`, must not be `None`")

        self._director_timeline = director_timeline

    @property
    def field_of_view(self):
        """Gets the field_of_view of this VideoSpatial.

        The 360 field of view, from 30 (minimum) to 90 (maximum). The default is 50.

        :return: The field_of_view of this VideoSpatial.
        :rtype: float
        """
        return self._field_of_view

    @field_of_view.setter
    def field_of_view(self, field_of_view):
        """Sets the field_of_view of this VideoSpatial.

        The 360 field of view, from 30 (minimum) to 90 (maximum). The default is 50.

        :param field_of_view: The field_of_view of this VideoSpatial.
        :type field_of_view: float
        """
        if field_of_view is None:
            raise ValueError("Invalid value for `field_of_view`, must not be `None`")

        self._field_of_view = field_of_view

    @property
    def projection(self):
        """Gets the projection of this VideoSpatial.

        The 360 spatial projection:  Option descriptions:  * `cubical` - The spatial projection is cubical.  * `cylindrical` - The spatial projection is cylindrical.  * `dome` - The spatial projection is dome-shaped.  * `equirectangular` - The spatial projection is equirectangular.  * `pyramid` - The spatial projection is pyramid-shaped. 

        :return: The projection of this VideoSpatial.
        :rtype: str
        """
        return self._projection

    @projection.setter
    def projection(self, projection):
        """Sets the projection of this VideoSpatial.

        The 360 spatial projection:  Option descriptions:  * `cubical` - The spatial projection is cubical.  * `cylindrical` - The spatial projection is cylindrical.  * `dome` - The spatial projection is dome-shaped.  * `equirectangular` - The spatial projection is equirectangular.  * `pyramid` - The spatial projection is pyramid-shaped. 

        :param projection: The projection of this VideoSpatial.
        :type projection: str
        """
        allowed_values = [None,"cubical", "cylindrical", "dome", "equirectangular", "pyramid"]  # noqa: E501
        if projection not in allowed_values:
            raise ValueError(
                "Invalid value for `projection` ({0}), must be one of {1}"
                .format(projection, allowed_values)
            )

        self._projection = projection

    @property
    def stereo_format(self):
        """Gets the stereo_format of this VideoSpatial.

        The 360 stereo format:  Option descriptions:  * `left-right` - The stereo format is left-right.  * `mono` - The audio is monaural.  * `top-bottom` - The stereo format is top-bottom. 

        :return: The stereo_format of this VideoSpatial.
        :rtype: str
        """
        return self._stereo_format

    @stereo_format.setter
    def stereo_format(self, stereo_format):
        """Sets the stereo_format of this VideoSpatial.

        The 360 stereo format:  Option descriptions:  * `left-right` - The stereo format is left-right.  * `mono` - The audio is monaural.  * `top-bottom` - The stereo format is top-bottom. 

        :param stereo_format: The stereo_format of this VideoSpatial.
        :type stereo_format: str
        """
        allowed_values = [None,"left-right", "mono", "top-bottom"]  # noqa: E501
        if stereo_format not in allowed_values:
            raise ValueError(
                "Invalid value for `stereo_format` ({0}), must be one of {1}"
                .format(stereo_format, allowed_values)
            )

        self._stereo_format = stereo_format
