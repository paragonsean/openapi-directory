# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateTextTrackAlt1Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, language: str=None, name: str=None, type: str=None):
        """CreateTextTrackAlt1Request - a model defined in OpenAPI

        :param active: The active of this CreateTextTrackAlt1Request.
        :param language: The language of this CreateTextTrackAlt1Request.
        :param name: The name of this CreateTextTrackAlt1Request.
        :param type: The type of this CreateTextTrackAlt1Request.
        """
        self.openapi_types = {
            'active': bool,
            'language': str,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'active': 'active',
            'language': 'language',
            'name': 'name',
            'type': 'type'
        }

        self._active = active
        self._language = language
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTextTrackAlt1Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_text_track_alt1_request of this CreateTextTrackAlt1Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this CreateTextTrackAlt1Request.

        Active text tracks appear in the player and are visible to other users. Only one text track per language can be active.

        :return: The active of this CreateTextTrackAlt1Request.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CreateTextTrackAlt1Request.

        Active text tracks appear in the player and are visible to other users. Only one text track per language can be active.

        :param active: The active of this CreateTextTrackAlt1Request.
        :type active: bool
        """

        self._active = active

    @property
    def language(self):
        """Gets the language of this CreateTextTrackAlt1Request.

        The language of the text track. For a complete list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.

        :return: The language of this CreateTextTrackAlt1Request.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CreateTextTrackAlt1Request.

        The language of the text track. For a complete list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.

        :param language: The language of this CreateTextTrackAlt1Request.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def name(self):
        """Gets the name of this CreateTextTrackAlt1Request.

        The name of the text track.

        :return: The name of this CreateTextTrackAlt1Request.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTextTrackAlt1Request.

        The name of the text track.

        :param name: The name of this CreateTextTrackAlt1Request.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this CreateTextTrackAlt1Request.

        The type of the text track.

        :return: The type of this CreateTextTrackAlt1Request.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateTextTrackAlt1Request.

        The type of the text track.

        :param type: The type of this CreateTextTrackAlt1Request.
        :type type: str
        """
        allowed_values = ["captions", "chapters", "descriptions", "metadata", "subtitles"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
