# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.album_embed import AlbumEmbed
from openapi_server.models.album_metadata import AlbumMetadata
from openapi_server.models.album_privacy import AlbumPrivacy
from openapi_server.models.picture import Picture
from openapi_server.models.user import User
from openapi_server import util


class Album(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_continuous_play: bool=None, allow_downloads: bool=None, allow_share: bool=None, brand_color: str=None, created_time: str=None, custom_logo: Picture=None, description: str=None, domain: str=None, duration: float=None, embed: AlbumEmbed=None, embed_brand_color: bool=None, embed_custom_logo: bool=None, hide_nav: bool=None, hide_vimeo_logo: bool=None, layout: str=None, link: str=None, metadata: AlbumMetadata=None, modified_time: str=None, name: str=None, pictures: Picture=None, privacy: AlbumPrivacy=None, resource_key: str=None, review_mode: bool=None, sort: str=None, theme: str=None, uri: str=None, url: str=None, use_custom_domain: bool=None, user: User=None, web_brand_color: bool=None, web_custom_logo: bool=None):
        """Album - a model defined in OpenAPI

        :param allow_continuous_play: The allow_continuous_play of this Album.
        :param allow_downloads: The allow_downloads of this Album.
        :param allow_share: The allow_share of this Album.
        :param brand_color: The brand_color of this Album.
        :param created_time: The created_time of this Album.
        :param custom_logo: The custom_logo of this Album.
        :param description: The description of this Album.
        :param domain: The domain of this Album.
        :param duration: The duration of this Album.
        :param embed: The embed of this Album.
        :param embed_brand_color: The embed_brand_color of this Album.
        :param embed_custom_logo: The embed_custom_logo of this Album.
        :param hide_nav: The hide_nav of this Album.
        :param hide_vimeo_logo: The hide_vimeo_logo of this Album.
        :param layout: The layout of this Album.
        :param link: The link of this Album.
        :param metadata: The metadata of this Album.
        :param modified_time: The modified_time of this Album.
        :param name: The name of this Album.
        :param pictures: The pictures of this Album.
        :param privacy: The privacy of this Album.
        :param resource_key: The resource_key of this Album.
        :param review_mode: The review_mode of this Album.
        :param sort: The sort of this Album.
        :param theme: The theme of this Album.
        :param uri: The uri of this Album.
        :param url: The url of this Album.
        :param use_custom_domain: The use_custom_domain of this Album.
        :param user: The user of this Album.
        :param web_brand_color: The web_brand_color of this Album.
        :param web_custom_logo: The web_custom_logo of this Album.
        """
        self.openapi_types = {
            'allow_continuous_play': bool,
            'allow_downloads': bool,
            'allow_share': bool,
            'brand_color': str,
            'created_time': str,
            'custom_logo': Picture,
            'description': str,
            'domain': str,
            'duration': float,
            'embed': AlbumEmbed,
            'embed_brand_color': bool,
            'embed_custom_logo': bool,
            'hide_nav': bool,
            'hide_vimeo_logo': bool,
            'layout': str,
            'link': str,
            'metadata': AlbumMetadata,
            'modified_time': str,
            'name': str,
            'pictures': Picture,
            'privacy': AlbumPrivacy,
            'resource_key': str,
            'review_mode': bool,
            'sort': str,
            'theme': str,
            'uri': str,
            'url': str,
            'use_custom_domain': bool,
            'user': User,
            'web_brand_color': bool,
            'web_custom_logo': bool
        }

        self.attribute_map = {
            'allow_continuous_play': 'allow_continuous_play',
            'allow_downloads': 'allow_downloads',
            'allow_share': 'allow_share',
            'brand_color': 'brand_color',
            'created_time': 'created_time',
            'custom_logo': 'custom_logo',
            'description': 'description',
            'domain': 'domain',
            'duration': 'duration',
            'embed': 'embed',
            'embed_brand_color': 'embed_brand_color',
            'embed_custom_logo': 'embed_custom_logo',
            'hide_nav': 'hide_nav',
            'hide_vimeo_logo': 'hide_vimeo_logo',
            'layout': 'layout',
            'link': 'link',
            'metadata': 'metadata',
            'modified_time': 'modified_time',
            'name': 'name',
            'pictures': 'pictures',
            'privacy': 'privacy',
            'resource_key': 'resource_key',
            'review_mode': 'review_mode',
            'sort': 'sort',
            'theme': 'theme',
            'uri': 'uri',
            'url': 'url',
            'use_custom_domain': 'use_custom_domain',
            'user': 'user',
            'web_brand_color': 'web_brand_color',
            'web_custom_logo': 'web_custom_logo'
        }

        self._allow_continuous_play = allow_continuous_play
        self._allow_downloads = allow_downloads
        self._allow_share = allow_share
        self._brand_color = brand_color
        self._created_time = created_time
        self._custom_logo = custom_logo
        self._description = description
        self._domain = domain
        self._duration = duration
        self._embed = embed
        self._embed_brand_color = embed_brand_color
        self._embed_custom_logo = embed_custom_logo
        self._hide_nav = hide_nav
        self._hide_vimeo_logo = hide_vimeo_logo
        self._layout = layout
        self._link = link
        self._metadata = metadata
        self._modified_time = modified_time
        self._name = name
        self._pictures = pictures
        self._privacy = privacy
        self._resource_key = resource_key
        self._review_mode = review_mode
        self._sort = sort
        self._theme = theme
        self._uri = uri
        self._url = url
        self._use_custom_domain = use_custom_domain
        self._user = user
        self._web_brand_color = web_brand_color
        self._web_custom_logo = web_custom_logo

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Album':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The album of this Album.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_continuous_play(self):
        """Gets the allow_continuous_play of this Album.

        Whether an album should allow continuous play.

        :return: The allow_continuous_play of this Album.
        :rtype: bool
        """
        return self._allow_continuous_play

    @allow_continuous_play.setter
    def allow_continuous_play(self, allow_continuous_play):
        """Sets the allow_continuous_play of this Album.

        Whether an album should allow continuous play.

        :param allow_continuous_play: The allow_continuous_play of this Album.
        :type allow_continuous_play: bool
        """
        if allow_continuous_play is None:
            raise ValueError("Invalid value for `allow_continuous_play`, must not be `None`")

        self._allow_continuous_play = allow_continuous_play

    @property
    def allow_downloads(self):
        """Gets the allow_downloads of this Album.

        Whether an album should allow downloads.

        :return: The allow_downloads of this Album.
        :rtype: bool
        """
        return self._allow_downloads

    @allow_downloads.setter
    def allow_downloads(self, allow_downloads):
        """Sets the allow_downloads of this Album.

        Whether an album should allow downloads.

        :param allow_downloads: The allow_downloads of this Album.
        :type allow_downloads: bool
        """
        if allow_downloads is None:
            raise ValueError("Invalid value for `allow_downloads`, must not be `None`")

        self._allow_downloads = allow_downloads

    @property
    def allow_share(self):
        """Gets the allow_share of this Album.

        Whether an album should allow sharing.

        :return: The allow_share of this Album.
        :rtype: bool
        """
        return self._allow_share

    @allow_share.setter
    def allow_share(self, allow_share):
        """Sets the allow_share of this Album.

        Whether an album should allow sharing.

        :param allow_share: The allow_share of this Album.
        :type allow_share: bool
        """
        if allow_share is None:
            raise ValueError("Invalid value for `allow_share`, must not be `None`")

        self._allow_share = allow_share

    @property
    def brand_color(self):
        """Gets the brand_color of this Album.

        Hexadecimal color code for the decorative color. For example, album videos use this color for player buttons.

        :return: The brand_color of this Album.
        :rtype: str
        """
        return self._brand_color

    @brand_color.setter
    def brand_color(self, brand_color):
        """Sets the brand_color of this Album.

        Hexadecimal color code for the decorative color. For example, album videos use this color for player buttons.

        :param brand_color: The brand_color of this Album.
        :type brand_color: str
        """
        if brand_color is None:
            raise ValueError("Invalid value for `brand_color`, must not be `None`")

        self._brand_color = brand_color

    @property
    def created_time(self):
        """Gets the created_time of this Album.

        The time in ISO 8601 format that the album was created.

        :return: The created_time of this Album.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Album.

        The time in ISO 8601 format that the album was created.

        :param created_time: The created_time of this Album.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def custom_logo(self):
        """Gets the custom_logo of this Album.

        The custom logo for this album.

        :return: The custom_logo of this Album.
        :rtype: Picture
        """
        return self._custom_logo

    @custom_logo.setter
    def custom_logo(self, custom_logo):
        """Sets the custom_logo of this Album.

        The custom logo for this album.

        :param custom_logo: The custom_logo of this Album.
        :type custom_logo: Picture
        """
        if custom_logo is None:
            raise ValueError("Invalid value for `custom_logo`, must not be `None`")

        self._custom_logo = custom_logo

    @property
    def description(self):
        """Gets the description of this Album.

        A brief description of the album's content.

        :return: The description of this Album.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Album.

        A brief description of the album's content.

        :param description: The description of this Album.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def domain(self):
        """Gets the domain of this Album.

        The custom domain a user has selected for their album.

        :return: The domain of this Album.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Album.

        The custom domain a user has selected for their album.

        :param domain: The domain of this Album.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def duration(self):
        """Gets the duration of this Album.

        The total duration in seconds of all the videos in the album.

        :return: The duration of this Album.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Album.

        The total duration in seconds of all the videos in the album.

        :param duration: The duration of this Album.
        :type duration: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def embed(self):
        """Gets the embed of this Album.


        :return: The embed of this Album.
        :rtype: AlbumEmbed
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this Album.


        :param embed: The embed of this Album.
        :type embed: AlbumEmbed
        """
        if embed is None:
            raise ValueError("Invalid value for `embed`, must not be `None`")

        self._embed = embed

    @property
    def embed_brand_color(self):
        """Gets the embed_brand_color of this Album.

        Whether to show the album's custom brand color in the player of the album's embedded playlist.

        :return: The embed_brand_color of this Album.
        :rtype: bool
        """
        return self._embed_brand_color

    @embed_brand_color.setter
    def embed_brand_color(self, embed_brand_color):
        """Sets the embed_brand_color of this Album.

        Whether to show the album's custom brand color in the player of the album's embedded playlist.

        :param embed_brand_color: The embed_brand_color of this Album.
        :type embed_brand_color: bool
        """
        if embed_brand_color is None:
            raise ValueError("Invalid value for `embed_brand_color`, must not be `None`")

        self._embed_brand_color = embed_brand_color

    @property
    def embed_custom_logo(self):
        """Gets the embed_custom_logo of this Album.

        Whether to show the album's custom logo in the player of the album's embedded playlist.

        :return: The embed_custom_logo of this Album.
        :rtype: bool
        """
        return self._embed_custom_logo

    @embed_custom_logo.setter
    def embed_custom_logo(self, embed_custom_logo):
        """Sets the embed_custom_logo of this Album.

        Whether to show the album's custom logo in the player of the album's embedded playlist.

        :param embed_custom_logo: The embed_custom_logo of this Album.
        :type embed_custom_logo: bool
        """
        if embed_custom_logo is None:
            raise ValueError("Invalid value for `embed_custom_logo`, must not be `None`")

        self._embed_custom_logo = embed_custom_logo

    @property
    def hide_nav(self):
        """Gets the hide_nav of this Album.

        Whether to hide the Vimeo navigation when viewing the album.

        :return: The hide_nav of this Album.
        :rtype: bool
        """
        return self._hide_nav

    @hide_nav.setter
    def hide_nav(self, hide_nav):
        """Sets the hide_nav of this Album.

        Whether to hide the Vimeo navigation when viewing the album.

        :param hide_nav: The hide_nav of this Album.
        :type hide_nav: bool
        """
        if hide_nav is None:
            raise ValueError("Invalid value for `hide_nav`, must not be `None`")

        self._hide_nav = hide_nav

    @property
    def hide_vimeo_logo(self):
        """Gets the hide_vimeo_logo of this Album.

        Whether to hide the Vimeo logo in the player of the album's embedded playlist.

        :return: The hide_vimeo_logo of this Album.
        :rtype: bool
        """
        return self._hide_vimeo_logo

    @hide_vimeo_logo.setter
    def hide_vimeo_logo(self, hide_vimeo_logo):
        """Sets the hide_vimeo_logo of this Album.

        Whether to hide the Vimeo logo in the player of the album's embedded playlist.

        :param hide_vimeo_logo: The hide_vimeo_logo of this Album.
        :type hide_vimeo_logo: bool
        """
        if hide_vimeo_logo is None:
            raise ValueError("Invalid value for `hide_vimeo_logo`, must not be `None`")

        self._hide_vimeo_logo = hide_vimeo_logo

    @property
    def layout(self):
        """Gets the layout of this Album.

        The album's layout preference

        :return: The layout of this Album.
        :rtype: str
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this Album.

        The album's layout preference

        :param layout: The layout of this Album.
        :type layout: str
        """
        allowed_values = ["grid", "player"]  # noqa: E501
        if layout not in allowed_values:
            raise ValueError(
                "Invalid value for `layout` ({0}), must be one of {1}"
                .format(layout, allowed_values)
            )

        self._layout = layout

    @property
    def link(self):
        """Gets the link of this Album.

        The URL to access the album.

        :return: The link of this Album.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Album.

        The URL to access the album.

        :param link: The link of this Album.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def metadata(self):
        """Gets the metadata of this Album.


        :return: The metadata of this Album.
        :rtype: AlbumMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Album.


        :param metadata: The metadata of this Album.
        :type metadata: AlbumMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def modified_time(self):
        """Gets the modified_time of this Album.

        The time in ISO 8601 format when the album was last modified.

        :return: The modified_time of this Album.
        :rtype: str
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this Album.

        The time in ISO 8601 format when the album was last modified.

        :param modified_time: The modified_time of this Album.
        :type modified_time: str
        """
        if modified_time is None:
            raise ValueError("Invalid value for `modified_time`, must not be `None`")

        self._modified_time = modified_time

    @property
    def name(self):
        """Gets the name of this Album.

        The album's display name.

        :return: The name of this Album.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Album.

        The album's display name.

        :param name: The name of this Album.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pictures(self):
        """Gets the pictures of this Album.

        The active image for the album; defaults to the thumbnail of the last video added to the album.

        :return: The pictures of this Album.
        :rtype: Picture
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this Album.

        The active image for the album; defaults to the thumbnail of the last video added to the album.

        :param pictures: The pictures of this Album.
        :type pictures: Picture
        """
        if pictures is None:
            raise ValueError("Invalid value for `pictures`, must not be `None`")

        self._pictures = pictures

    @property
    def privacy(self):
        """Gets the privacy of this Album.


        :return: The privacy of this Album.
        :rtype: AlbumPrivacy
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this Album.


        :param privacy: The privacy of this Album.
        :type privacy: AlbumPrivacy
        """
        if privacy is None:
            raise ValueError("Invalid value for `privacy`, must not be `None`")

        self._privacy = privacy

    @property
    def resource_key(self):
        """Gets the resource_key of this Album.

        The album resource key.

        :return: The resource_key of this Album.
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this Album.

        The album resource key.

        :param resource_key: The resource_key of this Album.
        :type resource_key: str
        """
        if resource_key is None:
            raise ValueError("Invalid value for `resource_key`, must not be `None`")

        self._resource_key = resource_key

    @property
    def review_mode(self):
        """Gets the review_mode of this Album.

        Whether album videos should use the review mode URL.

        :return: The review_mode of this Album.
        :rtype: bool
        """
        return self._review_mode

    @review_mode.setter
    def review_mode(self, review_mode):
        """Sets the review_mode of this Album.

        Whether album videos should use the review mode URL.

        :param review_mode: The review_mode of this Album.
        :type review_mode: bool
        """
        if review_mode is None:
            raise ValueError("Invalid value for `review_mode`, must not be `None`")

        self._review_mode = review_mode

    @property
    def sort(self):
        """Gets the sort of this Album.

        Sort type of the album.

        :return: The sort of this Album.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Album.

        Sort type of the album.

        :param sort: The sort of this Album.
        :type sort: str
        """
        allowed_values = ["added_first", "added_last", "alphabetical", "arranged", "comments", "likes", "newest", "oldest", "plays"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"
                .format(sort, allowed_values)
            )

        self._sort = sort

    @property
    def theme(self):
        """Gets the theme of this Album.

        The album's color theme preference

        :return: The theme of this Album.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this Album.

        The album's color theme preference

        :param theme: The theme of this Album.
        :type theme: str
        """
        allowed_values = ["dark", "standard"]  # noqa: E501
        if theme not in allowed_values:
            raise ValueError(
                "Invalid value for `theme` ({0}), must be one of {1}"
                .format(theme, allowed_values)
            )

        self._theme = theme

    @property
    def uri(self):
        """Gets the uri of this Album.

        The album's URI.

        :return: The uri of this Album.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Album.

        The album's URI.

        :param uri: The uri of this Album.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def url(self):
        """Gets the url of this Album.

        The custom Vimeo URL a user has selected for their album.

        :return: The url of this Album.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Album.

        The custom Vimeo URL a user has selected for their album.

        :param url: The url of this Album.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def use_custom_domain(self):
        """Gets the use_custom_domain of this Album.

        Whether the user has opted in to use a custom domain for their album.

        :return: The use_custom_domain of this Album.
        :rtype: bool
        """
        return self._use_custom_domain

    @use_custom_domain.setter
    def use_custom_domain(self, use_custom_domain):
        """Sets the use_custom_domain of this Album.

        Whether the user has opted in to use a custom domain for their album.

        :param use_custom_domain: The use_custom_domain of this Album.
        :type use_custom_domain: bool
        """
        if use_custom_domain is None:
            raise ValueError("Invalid value for `use_custom_domain`, must not be `None`")

        self._use_custom_domain = use_custom_domain

    @property
    def user(self):
        """Gets the user of this Album.

        The owner of the album.

        :return: The user of this Album.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Album.

        The owner of the album.

        :param user: The user of this Album.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def web_brand_color(self):
        """Gets the web_brand_color of this Album.

        Whether an album should show the brand color in the web layout.

        :return: The web_brand_color of this Album.
        :rtype: bool
        """
        return self._web_brand_color

    @web_brand_color.setter
    def web_brand_color(self, web_brand_color):
        """Sets the web_brand_color of this Album.

        Whether an album should show the brand color in the web layout.

        :param web_brand_color: The web_brand_color of this Album.
        :type web_brand_color: bool
        """
        if web_brand_color is None:
            raise ValueError("Invalid value for `web_brand_color`, must not be `None`")

        self._web_brand_color = web_brand_color

    @property
    def web_custom_logo(self):
        """Gets the web_custom_logo of this Album.

        Whether an album's custom logo should be shown in the web layout.

        :return: The web_custom_logo of this Album.
        :rtype: bool
        """
        return self._web_custom_logo

    @web_custom_logo.setter
    def web_custom_logo(self, web_custom_logo):
        """Sets the web_custom_logo of this Album.

        Whether an album's custom logo should be shown in the web layout.

        :param web_custom_logo: The web_custom_logo of this Album.
        :type web_custom_logo: bool
        """
        if web_custom_logo is None:
            raise ValueError("Invalid value for `web_custom_logo`, must not be `None`")

        self._web_custom_logo = web_custom_logo
