# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OnDemandPagePublished(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, time: str=None):
        """OnDemandPagePublished - a model defined in OpenAPI

        :param enabled: The enabled of this OnDemandPagePublished.
        :param time: The time of this OnDemandPagePublished.
        """
        self.openapi_types = {
            'enabled': bool,
            'time': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'time': 'time'
        }

        self._enabled = enabled
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnDemandPagePublished':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The on_demand_page_published of this OnDemandPagePublished.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this OnDemandPagePublished.

        Whether this On Demand page has been published.

        :return: The enabled of this OnDemandPagePublished.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this OnDemandPagePublished.

        Whether this On Demand page has been published.

        :param enabled: The enabled of this OnDemandPagePublished.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def time(self):
        """Gets the time of this OnDemandPagePublished.

        The time in IS 8601 format when this page was published.

        :return: The time of this OnDemandPagePublished.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this OnDemandPagePublished.

        The time in IS 8601 format when this page was published.

        :param time: The time of this OnDemandPagePublished.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time
