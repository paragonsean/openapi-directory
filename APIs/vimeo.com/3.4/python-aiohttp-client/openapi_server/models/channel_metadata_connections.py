# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_metadata_connections_privacy_users import ChannelMetadataConnectionsPrivacyUsers
from openapi_server.models.channel_metadata_connections_users import ChannelMetadataConnectionsUsers
from openapi_server.models.channel_metadata_connections_videos import ChannelMetadataConnectionsVideos
from openapi_server import util


class ChannelMetadataConnections(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, privacy_users: ChannelMetadataConnectionsPrivacyUsers=None, users: ChannelMetadataConnectionsUsers=None, videos: ChannelMetadataConnectionsVideos=None):
        """ChannelMetadataConnections - a model defined in OpenAPI

        :param privacy_users: The privacy_users of this ChannelMetadataConnections.
        :param users: The users of this ChannelMetadataConnections.
        :param videos: The videos of this ChannelMetadataConnections.
        """
        self.openapi_types = {
            'privacy_users': ChannelMetadataConnectionsPrivacyUsers,
            'users': ChannelMetadataConnectionsUsers,
            'videos': ChannelMetadataConnectionsVideos
        }

        self.attribute_map = {
            'privacy_users': 'privacy_users',
            'users': 'users',
            'videos': 'videos'
        }

        self._privacy_users = privacy_users
        self._users = users
        self._videos = videos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelMetadataConnections':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channel_metadata_connections of this ChannelMetadataConnections.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def privacy_users(self):
        """Gets the privacy_users of this ChannelMetadataConnections.


        :return: The privacy_users of this ChannelMetadataConnections.
        :rtype: ChannelMetadataConnectionsPrivacyUsers
        """
        return self._privacy_users

    @privacy_users.setter
    def privacy_users(self, privacy_users):
        """Sets the privacy_users of this ChannelMetadataConnections.


        :param privacy_users: The privacy_users of this ChannelMetadataConnections.
        :type privacy_users: ChannelMetadataConnectionsPrivacyUsers
        """
        if privacy_users is None:
            raise ValueError("Invalid value for `privacy_users`, must not be `None`")

        self._privacy_users = privacy_users

    @property
    def users(self):
        """Gets the users of this ChannelMetadataConnections.


        :return: The users of this ChannelMetadataConnections.
        :rtype: ChannelMetadataConnectionsUsers
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ChannelMetadataConnections.


        :param users: The users of this ChannelMetadataConnections.
        :type users: ChannelMetadataConnectionsUsers
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users

    @property
    def videos(self):
        """Gets the videos of this ChannelMetadataConnections.


        :return: The videos of this ChannelMetadataConnections.
        :rtype: ChannelMetadataConnectionsVideos
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this ChannelMetadataConnections.


        :param videos: The videos of this ChannelMetadataConnections.
        :type videos: ChannelMetadataConnectionsVideos
        """
        if videos is None:
            raise ValueError("Invalid value for `videos`, must not be `None`")

        self._videos = videos
