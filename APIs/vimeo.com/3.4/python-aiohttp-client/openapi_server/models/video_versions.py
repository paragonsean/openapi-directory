# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_app import ApiApp
from openapi_server.models.play import Play
from openapi_server.models.user import User
from openapi_server.models.video_versions_metadata import VideoVersionsMetadata
from openapi_server.models.video_versions_upload import VideoVersionsUpload
from openapi_server import util


class VideoVersions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, app: ApiApp=None, created_time: str=None, duration: float=None, filename: str=None, filesize: float=None, metadata: VideoVersionsMetadata=None, modified_time: str=None, play: Play=None, upload: VideoVersionsUpload=None, upload_date: str=None, uri: str=None, user: User=None):
        """VideoVersions - a model defined in OpenAPI

        :param active: The active of this VideoVersions.
        :param app: The app of this VideoVersions.
        :param created_time: The created_time of this VideoVersions.
        :param duration: The duration of this VideoVersions.
        :param filename: The filename of this VideoVersions.
        :param filesize: The filesize of this VideoVersions.
        :param metadata: The metadata of this VideoVersions.
        :param modified_time: The modified_time of this VideoVersions.
        :param play: The play of this VideoVersions.
        :param upload: The upload of this VideoVersions.
        :param upload_date: The upload_date of this VideoVersions.
        :param uri: The uri of this VideoVersions.
        :param user: The user of this VideoVersions.
        """
        self.openapi_types = {
            'active': bool,
            'app': ApiApp,
            'created_time': str,
            'duration': float,
            'filename': str,
            'filesize': float,
            'metadata': VideoVersionsMetadata,
            'modified_time': str,
            'play': Play,
            'upload': VideoVersionsUpload,
            'upload_date': str,
            'uri': str,
            'user': User
        }

        self.attribute_map = {
            'active': 'active',
            'app': 'app',
            'created_time': 'created_time',
            'duration': 'duration',
            'filename': 'filename',
            'filesize': 'filesize',
            'metadata': 'metadata',
            'modified_time': 'modified_time',
            'play': 'play',
            'upload': 'upload',
            'upload_date': 'upload_date',
            'uri': 'uri',
            'user': 'user'
        }

        self._active = active
        self._app = app
        self._created_time = created_time
        self._duration = duration
        self._filename = filename
        self._filesize = filesize
        self._metadata = metadata
        self._modified_time = modified_time
        self._play = play
        self._upload = upload
        self._upload_date = upload_date
        self._uri = uri
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoVersions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video-versions of this VideoVersions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this VideoVersions.

        Whether this video version is the currently active one.

        :return: The active of this VideoVersions.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this VideoVersions.

        Whether this video version is the currently active one.

        :param active: The active of this VideoVersions.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def app(self):
        """Gets the app of this VideoVersions.

        The API app associated with the video version.

        :return: The app of this VideoVersions.
        :rtype: ApiApp
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this VideoVersions.

        The API app associated with the video version.

        :param app: The app of this VideoVersions.
        :type app: ApiApp
        """
        if app is None:
            raise ValueError("Invalid value for `app`, must not be `None`")

        self._app = app

    @property
    def created_time(self):
        """Gets the created_time of this VideoVersions.

        The time in ISO 8601 for when the video version was created.

        :return: The created_time of this VideoVersions.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this VideoVersions.

        The time in ISO 8601 for when the video version was created.

        :param created_time: The created_time of this VideoVersions.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def duration(self):
        """Gets the duration of this VideoVersions.

        The duration of the video version in seconds.

        :return: The duration of this VideoVersions.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VideoVersions.

        The duration of the video version in seconds.

        :param duration: The duration of this VideoVersions.
        :type duration: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def filename(self):
        """Gets the filename of this VideoVersions.

        The file name of the video version.

        :return: The filename of this VideoVersions.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this VideoVersions.

        The file name of the video version.

        :param filename: The filename of this VideoVersions.
        :type filename: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")

        self._filename = filename

    @property
    def filesize(self):
        """Gets the filesize of this VideoVersions.

        The size in byes of the video version file.

        :return: The filesize of this VideoVersions.
        :rtype: float
        """
        return self._filesize

    @filesize.setter
    def filesize(self, filesize):
        """Sets the filesize of this VideoVersions.

        The size in byes of the video version file.

        :param filesize: The filesize of this VideoVersions.
        :type filesize: float
        """
        if filesize is None:
            raise ValueError("Invalid value for `filesize`, must not be `None`")

        self._filesize = filesize

    @property
    def metadata(self):
        """Gets the metadata of this VideoVersions.


        :return: The metadata of this VideoVersions.
        :rtype: VideoVersionsMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this VideoVersions.


        :param metadata: The metadata of this VideoVersions.
        :type metadata: VideoVersionsMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def modified_time(self):
        """Gets the modified_time of this VideoVersions.

        The time in ISO 8601 format when the video version was last modified.

        :return: The modified_time of this VideoVersions.
        :rtype: str
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this VideoVersions.

        The time in ISO 8601 format when the video version was last modified.

        :param modified_time: The modified_time of this VideoVersions.
        :type modified_time: str
        """
        if modified_time is None:
            raise ValueError("Invalid value for `modified_time`, must not be `None`")

        self._modified_time = modified_time

    @property
    def play(self):
        """Gets the play of this VideoVersions.

        The Play representation.

        :return: The play of this VideoVersions.
        :rtype: Play
        """
        return self._play

    @play.setter
    def play(self, play):
        """Sets the play of this VideoVersions.

        The Play representation.

        :param play: The play of this VideoVersions.
        :type play: Play
        """
        if play is None:
            raise ValueError("Invalid value for `play`, must not be `None`")

        self._play = play

    @property
    def upload(self):
        """Gets the upload of this VideoVersions.


        :return: The upload of this VideoVersions.
        :rtype: VideoVersionsUpload
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this VideoVersions.


        :param upload: The upload of this VideoVersions.
        :type upload: VideoVersionsUpload
        """
        if upload is None:
            raise ValueError("Invalid value for `upload`, must not be `None`")

        self._upload = upload

    @property
    def upload_date(self):
        """Gets the upload_date of this VideoVersions.

        The time in ISO 8601 format when the video version was uploaded.

        :return: The upload_date of this VideoVersions.
        :rtype: str
        """
        return self._upload_date

    @upload_date.setter
    def upload_date(self, upload_date):
        """Sets the upload_date of this VideoVersions.

        The time in ISO 8601 format when the video version was uploaded.

        :param upload_date: The upload_date of this VideoVersions.
        :type upload_date: str
        """
        if upload_date is None:
            raise ValueError("Invalid value for `upload_date`, must not be `None`")

        self._upload_date = upload_date

    @property
    def uri(self):
        """Gets the uri of this VideoVersions.

        The version's canonical relative URI.

        :return: The uri of this VideoVersions.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this VideoVersions.

        The version's canonical relative URI.

        :param uri: The uri of this VideoVersions.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def user(self):
        """Gets the user of this VideoVersions.

        The owner of the video version.

        :return: The user of this VideoVersions.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this VideoVersions.

        The owner of the video version.

        :param user: The user of this VideoVersions.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
