# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_vod_alt1_request_rent_price import CreateVodAlt1RequestRentPrice
from openapi_server import util


class CreateVodAlt1RequestRent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, period: str=None, price: CreateVodAlt1RequestRentPrice=None):
        """CreateVodAlt1RequestRent - a model defined in OpenAPI

        :param active: The active of this CreateVodAlt1RequestRent.
        :param period: The period of this CreateVodAlt1RequestRent.
        :param price: The price of this CreateVodAlt1RequestRent.
        """
        self.openapi_types = {
            'active': bool,
            'period': str,
            'price': CreateVodAlt1RequestRentPrice
        }

        self.attribute_map = {
            'active': 'active',
            'period': 'period',
            'price': 'price'
        }

        self._active = active
        self._period = period
        self._price = price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVodAlt1RequestRent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_vod_alt1_request_rent of this CreateVodAlt1RequestRent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this CreateVodAlt1RequestRent.

        Whether the video can be rented. *Required if `buy.active` is false.

        :return: The active of this CreateVodAlt1RequestRent.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CreateVodAlt1RequestRent.

        Whether the video can be rented. *Required if `buy.active` is false.

        :param active: The active of this CreateVodAlt1RequestRent.
        :type active: bool
        """

        self._active = active

    @property
    def period(self):
        """Gets the period of this CreateVodAlt1RequestRent.

        The period in which this can be rented for.

        :return: The period of this CreateVodAlt1RequestRent.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CreateVodAlt1RequestRent.

        The period in which this can be rented for.

        :param period: The period of this CreateVodAlt1RequestRent.
        :type period: str
        """
        allowed_values = ["1 week", "1 year", "24 hour", "3 month", "30 day", "48 hour", "6 month", "72 hour"]  # noqa: E501
        if period not in allowed_values:
            raise ValueError(
                "Invalid value for `period` ({0}), must be one of {1}"
                .format(period, allowed_values)
            )

        self._period = period

    @property
    def price(self):
        """Gets the price of this CreateVodAlt1RequestRent.


        :return: The price of this CreateVodAlt1RequestRent.
        :rtype: CreateVodAlt1RequestRentPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CreateVodAlt1RequestRent.


        :param price: The price of this CreateVodAlt1RequestRent.
        :type price: CreateVodAlt1RequestRentPrice
        """

        self._price = price
