# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.edit_vod_request_preorder import EditVodRequestPreorder
from openapi_server.models.edit_vod_request_publish import EditVodRequestPublish
from openapi_server import util


class EditVodRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, link: str=None, preorder: EditVodRequestPreorder=None, publish: EditVodRequestPublish=None, publish_when_ready: bool=None):
        """EditVodRequest - a model defined in OpenAPI

        :param link: The link of this EditVodRequest.
        :param preorder: The preorder of this EditVodRequest.
        :param publish: The publish of this EditVodRequest.
        :param publish_when_ready: The publish_when_ready of this EditVodRequest.
        """
        self.openapi_types = {
            'link': str,
            'preorder': EditVodRequestPreorder,
            'publish': EditVodRequestPublish,
            'publish_when_ready': bool
        }

        self.attribute_map = {
            'link': 'link',
            'preorder': 'preorder',
            'publish': 'publish',
            'publish_when_ready': 'publish_when_ready'
        }

        self._link = link
        self._preorder = preorder
        self._publish = publish
        self._publish_when_ready = publish_when_ready

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditVodRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The edit_vod_request of this EditVodRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def link(self):
        """Gets the link of this EditVodRequest.

        The custom string to use in this On Demand page's Vimeo URL.

        :return: The link of this EditVodRequest.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this EditVodRequest.

        The custom string to use in this On Demand page's Vimeo URL.

        :param link: The link of this EditVodRequest.
        :type link: str
        """

        self._link = link

    @property
    def preorder(self):
        """Gets the preorder of this EditVodRequest.


        :return: The preorder of this EditVodRequest.
        :rtype: EditVodRequestPreorder
        """
        return self._preorder

    @preorder.setter
    def preorder(self, preorder):
        """Sets the preorder of this EditVodRequest.


        :param preorder: The preorder of this EditVodRequest.
        :type preorder: EditVodRequestPreorder
        """

        self._preorder = preorder

    @property
    def publish(self):
        """Gets the publish of this EditVodRequest.


        :return: The publish of this EditVodRequest.
        :rtype: EditVodRequestPublish
        """
        return self._publish

    @publish.setter
    def publish(self, publish):
        """Sets the publish of this EditVodRequest.


        :param publish: The publish of this EditVodRequest.
        :type publish: EditVodRequestPublish
        """

        self._publish = publish

    @property
    def publish_when_ready(self):
        """Gets the publish_when_ready of this EditVodRequest.

        Whether to publish the On Demand page automatically after all videos are finished transcoding.

        :return: The publish_when_ready of this EditVodRequest.
        :rtype: bool
        """
        return self._publish_when_ready

    @publish_when_ready.setter
    def publish_when_ready(self, publish_when_ready):
        """Sets the publish_when_ready of this EditVodRequest.

        Whether to publish the On Demand page automatically after all videos are finished transcoding.

        :param publish_when_ready: The publish_when_ready of this EditVodRequest.
        :type publish_when_ready: bool
        """

        self._publish_when_ready = publish_when_ready
