# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoMetadataInteractionsSubscribe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, drm: bool=None, expires_time: str=None, purchase_time: str=None, stream: str=None):
        """VideoMetadataInteractionsSubscribe - a model defined in OpenAPI

        :param drm: The drm of this VideoMetadataInteractionsSubscribe.
        :param expires_time: The expires_time of this VideoMetadataInteractionsSubscribe.
        :param purchase_time: The purchase_time of this VideoMetadataInteractionsSubscribe.
        :param stream: The stream of this VideoMetadataInteractionsSubscribe.
        """
        self.openapi_types = {
            'drm': bool,
            'expires_time': str,
            'purchase_time': str,
            'stream': str
        }

        self.attribute_map = {
            'drm': 'drm',
            'expires_time': 'expires_time',
            'purchase_time': 'purchase_time',
            'stream': 'stream'
        }

        self._drm = drm
        self._expires_time = expires_time
        self._purchase_time = purchase_time
        self._stream = stream

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoMetadataInteractionsSubscribe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video_metadata_interactions_subscribe of this VideoMetadataInteractionsSubscribe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drm(self):
        """Gets the drm of this VideoMetadataInteractionsSubscribe.

        Whether the video has DRM.

        :return: The drm of this VideoMetadataInteractionsSubscribe.
        :rtype: bool
        """
        return self._drm

    @drm.setter
    def drm(self, drm):
        """Sets the drm of this VideoMetadataInteractionsSubscribe.

        Whether the video has DRM.

        :param drm: The drm of this VideoMetadataInteractionsSubscribe.
        :type drm: bool
        """

        self._drm = drm

    @property
    def expires_time(self):
        """Gets the expires_time of this VideoMetadataInteractionsSubscribe.

        The time in ISO 8601 format when the subscription expires.

        :return: The expires_time of this VideoMetadataInteractionsSubscribe.
        :rtype: str
        """
        return self._expires_time

    @expires_time.setter
    def expires_time(self, expires_time):
        """Sets the expires_time of this VideoMetadataInteractionsSubscribe.

        The time in ISO 8601 format when the subscription expires.

        :param expires_time: The expires_time of this VideoMetadataInteractionsSubscribe.
        :type expires_time: str
        """

        self._expires_time = expires_time

    @property
    def purchase_time(self):
        """Gets the purchase_time of this VideoMetadataInteractionsSubscribe.

        The tine in ISO 8601 format when the subscription was purchased.

        :return: The purchase_time of this VideoMetadataInteractionsSubscribe.
        :rtype: str
        """
        return self._purchase_time

    @purchase_time.setter
    def purchase_time(self, purchase_time):
        """Sets the purchase_time of this VideoMetadataInteractionsSubscribe.

        The tine in ISO 8601 format when the subscription was purchased.

        :param purchase_time: The purchase_time of this VideoMetadataInteractionsSubscribe.
        :type purchase_time: str
        """

        self._purchase_time = purchase_time

    @property
    def stream(self):
        """Gets the stream of this VideoMetadataInteractionsSubscribe.

        The stream type.

        :return: The stream of this VideoMetadataInteractionsSubscribe.
        :rtype: str
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this VideoMetadataInteractionsSubscribe.

        The stream type.

        :param stream: The stream of this VideoMetadataInteractionsSubscribe.
        :type stream: str
        """

        self._stream = stream
