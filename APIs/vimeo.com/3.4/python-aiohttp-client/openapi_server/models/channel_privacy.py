# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelPrivacy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, view: str=None):
        """ChannelPrivacy - a model defined in OpenAPI

        :param view: The view of this ChannelPrivacy.
        """
        self.openapi_types = {
            'view': str
        }

        self.attribute_map = {
            'view': 'view'
        }

        self._view = view

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelPrivacy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channel_privacy of this ChannelPrivacy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def view(self):
        """Gets the view of this ChannelPrivacy.

        Who can view the channel:  Option descriptions:  * `anybody` - Anyone can view the channel.  * `moderators` - Only moderators can view the channel.  * `users` - Only registered users can view the channel. 

        :return: The view of this ChannelPrivacy.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this ChannelPrivacy.

        Who can view the channel:  Option descriptions:  * `anybody` - Anyone can view the channel.  * `moderators` - Only moderators can view the channel.  * `users` - Only registered users can view the channel. 

        :param view: The view of this ChannelPrivacy.
        :type view: str
        """
        allowed_values = ["anybody", "moderators", "users"]  # noqa: E501
        if view not in allowed_values:
            raise ValueError(
                "Invalid value for `view` ({0}), must be one of {1}"
                .format(view, allowed_values)
            )

        self._view = view
