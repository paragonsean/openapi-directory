# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreativeCommons(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, name: str=None, uri: str=None):
        """CreativeCommons - a model defined in OpenAPI

        :param code: The code of this CreativeCommons.
        :param name: The name of this CreativeCommons.
        :param uri: The uri of this CreativeCommons.
        """
        self.openapi_types = {
            'code': str,
            'name': str,
            'uri': str
        }

        self.attribute_map = {
            'code': 'code',
            'name': 'name',
            'uri': 'uri'
        }

        self._code = code
        self._name = name
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeCommons':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The creative-commons of this CreativeCommons.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this CreativeCommons.

        The code that uniquely identifies this Creative Commons license:  Option descriptions:  * `by` - Attribution  * `by-nc` - Attribution Non-Commercial  * `by-nc-nd` - Attribution Non-Commercial No Derivatives  * `by-nc-sa` - Attribution Non-Commercial Share Alike  * `by-nd` - Attribution No Derivatives  * `by-sa` - Attribution Share Alike  * `cc0` - Public Domain Dedication 

        :return: The code of this CreativeCommons.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CreativeCommons.

        The code that uniquely identifies this Creative Commons license:  Option descriptions:  * `by` - Attribution  * `by-nc` - Attribution Non-Commercial  * `by-nc-nd` - Attribution Non-Commercial No Derivatives  * `by-nc-sa` - Attribution Non-Commercial Share Alike  * `by-nd` - Attribution No Derivatives  * `by-sa` - Attribution Share Alike  * `cc0` - Public Domain Dedication 

        :param code: The code of this CreativeCommons.
        :type code: str
        """
        allowed_values = ["by", "by-nc", "by-nc-nd", "by-nc-sa", "by-nd", "by-sa", "cc0"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def name(self):
        """Gets the name of this CreativeCommons.

        The description of this Creative Commons license.

        :return: The name of this CreativeCommons.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreativeCommons.

        The description of this Creative Commons license.

        :param name: The name of this CreativeCommons.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def uri(self):
        """Gets the uri of this CreativeCommons.

        The canonical relative URI of the Creative Commons license.

        :return: The uri of this CreativeCommons.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CreativeCommons.

        The canonical relative URI of the Creative Commons license.

        :param uri: The uri of this CreativeCommons.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
