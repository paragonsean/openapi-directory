# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OnDemandPageEpisodesRent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, period: str=None, price: float=None):
        """OnDemandPageEpisodesRent - a model defined in OpenAPI

        :param active: The active of this OnDemandPageEpisodesRent.
        :param period: The period of this OnDemandPageEpisodesRent.
        :param price: The price of this OnDemandPageEpisodesRent.
        """
        self.openapi_types = {
            'active': bool,
            'period': str,
            'price': float
        }

        self.attribute_map = {
            'active': 'active',
            'period': 'period',
            'price': 'price'
        }

        self._active = active
        self._period = period
        self._price = price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnDemandPageEpisodesRent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The on_demand_page_episodes_rent of this OnDemandPageEpisodesRent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this OnDemandPageEpisodesRent.

        Whether all the videos on this On Demand page can be rented as a whole.

        :return: The active of this OnDemandPageEpisodesRent.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this OnDemandPageEpisodesRent.

        Whether all the videos on this On Demand page can be rented as a whole.

        :param active: The active of this OnDemandPageEpisodesRent.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def period(self):
        """Gets the period of this OnDemandPageEpisodesRent.

        The rental period for the video:  Option descriptions:  * `1 day` - The rental period is one day.  * `1 month` - The rental period is one month.  * `1 week` - The rental period is one week.  * `1 year` - The rental period is one year.  * `2 day` - The rental period is two days.  * `24 hour` - The rental period is 24 hours.  * `3 day` - The rental period is three days.  * `3 month` - The rental period is three months.  * `30 day` - The rental period is 30 days.  * `48 hour` - The rental period is 48 hours.  * `6 month` - The rental period is six months.  * `60 day` - The rental period is 60 days.  * `7 day` - The rental period is 7 days.  * `72 hour` - The rental period is 72 hours. 

        :return: The period of this OnDemandPageEpisodesRent.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this OnDemandPageEpisodesRent.

        The rental period for the video:  Option descriptions:  * `1 day` - The rental period is one day.  * `1 month` - The rental period is one month.  * `1 week` - The rental period is one week.  * `1 year` - The rental period is one year.  * `2 day` - The rental period is two days.  * `24 hour` - The rental period is 24 hours.  * `3 day` - The rental period is three days.  * `3 month` - The rental period is three months.  * `30 day` - The rental period is 30 days.  * `48 hour` - The rental period is 48 hours.  * `6 month` - The rental period is six months.  * `60 day` - The rental period is 60 days.  * `7 day` - The rental period is 7 days.  * `72 hour` - The rental period is 72 hours. 

        :param period: The period of this OnDemandPageEpisodesRent.
        :type period: str
        """
        allowed_values = [None,"1 day", "1 month", "1 week", "1 year", "2 day", "24 hour", "3 day", "3 month", "30 day", "48 hour", "6 month", "60 day", "7 day", "72 hour"]  # noqa: E501
        if period not in allowed_values:
            raise ValueError(
                "Invalid value for `period` ({0}), must be one of {1}"
                .format(period, allowed_values)
            )

        self._period = period

    @property
    def price(self):
        """Gets the price of this OnDemandPageEpisodesRent.

        The default price to rent an episode.

        :return: The price of this OnDemandPageEpisodesRent.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OnDemandPageEpisodesRent.

        The default price to rent an episode.

        :param price: The price of this OnDemandPageEpisodesRent.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price
