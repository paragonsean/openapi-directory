# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OnDemandPromotionCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, link: str=None, max_uses: float=None, uses: float=None):
        """OnDemandPromotionCode - a model defined in OpenAPI

        :param code: The code of this OnDemandPromotionCode.
        :param link: The link of this OnDemandPromotionCode.
        :param max_uses: The max_uses of this OnDemandPromotionCode.
        :param uses: The uses of this OnDemandPromotionCode.
        """
        self.openapi_types = {
            'code': str,
            'link': str,
            'max_uses': float,
            'uses': float
        }

        self.attribute_map = {
            'code': 'code',
            'link': 'link',
            'max_uses': 'max_uses',
            'uses': 'uses'
        }

        self._code = code
        self._link = link
        self._max_uses = max_uses
        self._uses = uses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnDemandPromotionCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The on-demand-promotion-code of this OnDemandPromotionCode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this OnDemandPromotionCode.

        A promotion code that can be redeemed on Vimeo.

        :return: The code of this OnDemandPromotionCode.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this OnDemandPromotionCode.

        A promotion code that can be redeemed on Vimeo.

        :param code: The code of this OnDemandPromotionCode.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def link(self):
        """Gets the link of this OnDemandPromotionCode.

        A link to redeem the promotion code instantly.

        :return: The link of this OnDemandPromotionCode.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this OnDemandPromotionCode.

        A link to redeem the promotion code instantly.

        :param link: The link of this OnDemandPromotionCode.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def max_uses(self):
        """Gets the max_uses of this OnDemandPromotionCode.

        The total amount of times this code can be used.

        :return: The max_uses of this OnDemandPromotionCode.
        :rtype: float
        """
        return self._max_uses

    @max_uses.setter
    def max_uses(self, max_uses):
        """Sets the max_uses of this OnDemandPromotionCode.

        The total amount of times this code can be used.

        :param max_uses: The max_uses of this OnDemandPromotionCode.
        :type max_uses: float
        """
        if max_uses is None:
            raise ValueError("Invalid value for `max_uses`, must not be `None`")

        self._max_uses = max_uses

    @property
    def uses(self):
        """Gets the uses of this OnDemandPromotionCode.

        The number of times that this code has been used.

        :return: The uses of this OnDemandPromotionCode.
        :rtype: float
        """
        return self._uses

    @uses.setter
    def uses(self, uses):
        """Sets the uses of this OnDemandPromotionCode.

        The number of times that this code has been used.

        :param uses: The uses of this OnDemandPromotionCode.
        :type uses: float
        """
        if uses is None:
            raise ValueError("Invalid value for `uses`, must not be `None`")

        self._uses = uses
