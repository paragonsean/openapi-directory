# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.presets_metadata_connections_videos import PresetsMetadataConnectionsVideos
from openapi_server import util


class PresetsMetadataConnections(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, videos: PresetsMetadataConnectionsVideos=None):
        """PresetsMetadataConnections - a model defined in OpenAPI

        :param videos: The videos of this PresetsMetadataConnections.
        """
        self.openapi_types = {
            'videos': PresetsMetadataConnectionsVideos
        }

        self.attribute_map = {
            'videos': 'videos'
        }

        self._videos = videos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PresetsMetadataConnections':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The presets_metadata_connections of this PresetsMetadataConnections.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def videos(self):
        """Gets the videos of this PresetsMetadataConnections.


        :return: The videos of this PresetsMetadataConnections.
        :rtype: PresetsMetadataConnectionsVideos
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this PresetsMetadataConnections.


        :param videos: The videos of this PresetsMetadataConnections.
        :type videos: PresetsMetadataConnectionsVideos
        """
        if videos is None:
            raise ValueError("Invalid value for `videos`, must not be `None`")

        self._videos = videos
