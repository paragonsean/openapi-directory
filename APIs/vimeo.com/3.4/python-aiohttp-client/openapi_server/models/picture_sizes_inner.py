# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PictureSizesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: float=None, link: str=None, link_with_play_button: str=None, width: float=None):
        """PictureSizesInner - a model defined in OpenAPI

        :param height: The height of this PictureSizesInner.
        :param link: The link of this PictureSizesInner.
        :param link_with_play_button: The link_with_play_button of this PictureSizesInner.
        :param width: The width of this PictureSizesInner.
        """
        self.openapi_types = {
            'height': float,
            'link': str,
            'link_with_play_button': str,
            'width': float
        }

        self.attribute_map = {
            'height': 'height',
            'link': 'link',
            'link_with_play_button': 'link_with_play_button',
            'width': 'width'
        }

        self._height = height
        self._link = link
        self._link_with_play_button = link_with_play_button
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PictureSizesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The picture_sizes_inner of this PictureSizesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this PictureSizesInner.

        The height of the image.

        :return: The height of this PictureSizesInner.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PictureSizesInner.

        The height of the image.

        :param height: The height of this PictureSizesInner.
        :type height: float
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def link(self):
        """Gets the link of this PictureSizesInner.

        The direct link to the image.

        :return: The link of this PictureSizesInner.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this PictureSizesInner.

        The direct link to the image.

        :param link: The link of this PictureSizesInner.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def link_with_play_button(self):
        """Gets the link_with_play_button of this PictureSizesInner.

        The direct link to the image with a play button overlay.

        :return: The link_with_play_button of this PictureSizesInner.
        :rtype: str
        """
        return self._link_with_play_button

    @link_with_play_button.setter
    def link_with_play_button(self, link_with_play_button):
        """Sets the link_with_play_button of this PictureSizesInner.

        The direct link to the image with a play button overlay.

        :param link_with_play_button: The link_with_play_button of this PictureSizesInner.
        :type link_with_play_button: str
        """

        self._link_with_play_button = link_with_play_button

    @property
    def width(self):
        """Gets the width of this PictureSizesInner.

        The width of the image.

        :return: The width of this PictureSizesInner.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this PictureSizesInner.

        The width of the image.

        :param width: The width of this PictureSizesInner.
        :type width: float
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
