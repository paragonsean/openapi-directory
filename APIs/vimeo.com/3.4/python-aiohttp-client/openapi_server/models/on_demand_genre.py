# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.on_demand_genre_interactions import OnDemandGenreInteractions
from openapi_server.models.on_demand_genre_metadata import OnDemandGenreMetadata
from openapi_server import util


class OnDemandGenre(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canonical: str=None, interactions: OnDemandGenreInteractions=None, link: str=None, metadata: OnDemandGenreMetadata=None, name: str=None, uri: str=None):
        """OnDemandGenre - a model defined in OpenAPI

        :param canonical: The canonical of this OnDemandGenre.
        :param interactions: The interactions of this OnDemandGenre.
        :param link: The link of this OnDemandGenre.
        :param metadata: The metadata of this OnDemandGenre.
        :param name: The name of this OnDemandGenre.
        :param uri: The uri of this OnDemandGenre.
        """
        self.openapi_types = {
            'canonical': str,
            'interactions': OnDemandGenreInteractions,
            'link': str,
            'metadata': OnDemandGenreMetadata,
            'name': str,
            'uri': str
        }

        self.attribute_map = {
            'canonical': 'canonical',
            'interactions': 'interactions',
            'link': 'link',
            'metadata': 'metadata',
            'name': 'name',
            'uri': 'uri'
        }

        self._canonical = canonical
        self._interactions = interactions
        self._link = link
        self._metadata = metadata
        self._name = name
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnDemandGenre':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The on-demand-genre of this OnDemandGenre.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canonical(self):
        """Gets the canonical of this OnDemandGenre.

        The canonical name or URL slug of the genre.

        :return: The canonical of this OnDemandGenre.
        :rtype: str
        """
        return self._canonical

    @canonical.setter
    def canonical(self, canonical):
        """Sets the canonical of this OnDemandGenre.

        The canonical name or URL slug of the genre.

        :param canonical: The canonical of this OnDemandGenre.
        :type canonical: str
        """
        if canonical is None:
            raise ValueError("Invalid value for `canonical`, must not be `None`")

        self._canonical = canonical

    @property
    def interactions(self):
        """Gets the interactions of this OnDemandGenre.


        :return: The interactions of this OnDemandGenre.
        :rtype: OnDemandGenreInteractions
        """
        return self._interactions

    @interactions.setter
    def interactions(self, interactions):
        """Sets the interactions of this OnDemandGenre.


        :param interactions: The interactions of this OnDemandGenre.
        :type interactions: OnDemandGenreInteractions
        """
        if interactions is None:
            raise ValueError("Invalid value for `interactions`, must not be `None`")

        self._interactions = interactions

    @property
    def link(self):
        """Gets the link of this OnDemandGenre.

        The Vimeo URL for this genre.

        :return: The link of this OnDemandGenre.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this OnDemandGenre.

        The Vimeo URL for this genre.

        :param link: The link of this OnDemandGenre.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def metadata(self):
        """Gets the metadata of this OnDemandGenre.


        :return: The metadata of this OnDemandGenre.
        :rtype: OnDemandGenreMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OnDemandGenre.


        :param metadata: The metadata of this OnDemandGenre.
        :type metadata: OnDemandGenreMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this OnDemandGenre.

        The descriptive name of the genre.

        :return: The name of this OnDemandGenre.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OnDemandGenre.

        The descriptive name of the genre.

        :param name: The name of this OnDemandGenre.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def uri(self):
        """Gets the uri of this OnDemandGenre.

        The relative URI of the On Demand genre.

        :return: The uri of this OnDemandGenre.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this OnDemandGenre.

        The relative URI of the On Demand genre.

        :param uri: The uri of this OnDemandGenre.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
