# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment_metadata_connections_replies import CommentMetadataConnectionsReplies
from openapi_server import util


class CommentMetadataConnections(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, replies: CommentMetadataConnectionsReplies=None):
        """CommentMetadataConnections - a model defined in OpenAPI

        :param replies: The replies of this CommentMetadataConnections.
        """
        self.openapi_types = {
            'replies': CommentMetadataConnectionsReplies
        }

        self.attribute_map = {
            'replies': 'replies'
        }

        self._replies = replies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommentMetadataConnections':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The comment_metadata_connections of this CommentMetadataConnections.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def replies(self):
        """Gets the replies of this CommentMetadataConnections.


        :return: The replies of this CommentMetadataConnections.
        :rtype: CommentMetadataConnectionsReplies
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this CommentMetadataConnections.


        :param replies: The replies of this CommentMetadataConnections.
        :type replies: CommentMetadataConnectionsReplies
        """
        if replies is None:
            raise ValueError("Invalid value for `replies`, must not be `None`")

        self._replies = replies
