# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoMetadataInteractionsReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, options: List[str]=None, reason: List[str]=None, uri: str=None):
        """VideoMetadataInteractionsReport - a model defined in OpenAPI

        :param options: The options of this VideoMetadataInteractionsReport.
        :param reason: The reason of this VideoMetadataInteractionsReport.
        :param uri: The uri of this VideoMetadataInteractionsReport.
        """
        self.openapi_types = {
            'options': List[str],
            'reason': List[str],
            'uri': str
        }

        self.attribute_map = {
            'options': 'options',
            'reason': 'reason',
            'uri': 'uri'
        }

        self._options = options
        self._reason = reason
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoMetadataInteractionsReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video_metadata_interactions_report of this VideoMetadataInteractionsReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def options(self):
        """Gets the options of this VideoMetadataInteractionsReport.

        An array of HTTP methods permitted on this URI.

        :return: The options of this VideoMetadataInteractionsReport.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this VideoMetadataInteractionsReport.

        An array of HTTP methods permitted on this URI.

        :param options: The options of this VideoMetadataInteractionsReport.
        :type options: List[str]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def reason(self):
        """Gets the reason of this VideoMetadataInteractionsReport.

        A list of valid reasons for reporting a video.

        :return: The reason of this VideoMetadataInteractionsReport.
        :rtype: List[str]
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this VideoMetadataInteractionsReport.

        A list of valid reasons for reporting a video.

        :param reason: The reason of this VideoMetadataInteractionsReport.
        :type reason: List[str]
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def uri(self):
        """Gets the uri of this VideoMetadataInteractionsReport.

        The API URI that resolves to the connection data.

        :return: The uri of this VideoMetadataInteractionsReport.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this VideoMetadataInteractionsReport.

        The API URI that resolves to the connection data.

        :param uri: The uri of this VideoMetadataInteractionsReport.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
