# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.on_demand_video_buy import OnDemandVideoBuy
from openapi_server.models.on_demand_video_interactions import OnDemandVideoInteractions
from openapi_server.models.on_demand_video_metadata import OnDemandVideoMetadata
from openapi_server.models.on_demand_video_rent import OnDemandVideoRent
from openapi_server.models.picture import Picture
from openapi_server.models.user import User
from openapi_server import util


class OnDemandVideo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buy: OnDemandVideoBuy=None, description: str=None, duration: str=None, episode: float=None, interactions: OnDemandVideoInteractions=None, link: str=None, metadata: OnDemandVideoMetadata=None, name: str=None, options: List[str]=None, pictures: Picture=None, play_progress: float=None, position: float=None, release_date: str=None, release_year: float=None, rent: OnDemandVideoRent=None, type: str=None, uri: str=None, user: User=None):
        """OnDemandVideo - a model defined in OpenAPI

        :param buy: The buy of this OnDemandVideo.
        :param description: The description of this OnDemandVideo.
        :param duration: The duration of this OnDemandVideo.
        :param episode: The episode of this OnDemandVideo.
        :param interactions: The interactions of this OnDemandVideo.
        :param link: The link of this OnDemandVideo.
        :param metadata: The metadata of this OnDemandVideo.
        :param name: The name of this OnDemandVideo.
        :param options: The options of this OnDemandVideo.
        :param pictures: The pictures of this OnDemandVideo.
        :param play_progress: The play_progress of this OnDemandVideo.
        :param position: The position of this OnDemandVideo.
        :param release_date: The release_date of this OnDemandVideo.
        :param release_year: The release_year of this OnDemandVideo.
        :param rent: The rent of this OnDemandVideo.
        :param type: The type of this OnDemandVideo.
        :param uri: The uri of this OnDemandVideo.
        :param user: The user of this OnDemandVideo.
        """
        self.openapi_types = {
            'buy': OnDemandVideoBuy,
            'description': str,
            'duration': str,
            'episode': float,
            'interactions': OnDemandVideoInteractions,
            'link': str,
            'metadata': OnDemandVideoMetadata,
            'name': str,
            'options': List[str],
            'pictures': Picture,
            'play_progress': float,
            'position': float,
            'release_date': str,
            'release_year': float,
            'rent': OnDemandVideoRent,
            'type': str,
            'uri': str,
            'user': User
        }

        self.attribute_map = {
            'buy': 'buy',
            'description': 'description',
            'duration': 'duration',
            'episode': 'episode',
            'interactions': 'interactions',
            'link': 'link',
            'metadata': 'metadata',
            'name': 'name',
            'options': 'options',
            'pictures': 'pictures',
            'play_progress': 'play_progress',
            'position': 'position',
            'release_date': 'release_date',
            'release_year': 'release_year',
            'rent': 'rent',
            'type': 'type',
            'uri': 'uri',
            'user': 'user'
        }

        self._buy = buy
        self._description = description
        self._duration = duration
        self._episode = episode
        self._interactions = interactions
        self._link = link
        self._metadata = metadata
        self._name = name
        self._options = options
        self._pictures = pictures
        self._play_progress = play_progress
        self._position = position
        self._release_date = release_date
        self._release_year = release_year
        self._rent = rent
        self._type = type
        self._uri = uri
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnDemandVideo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The on-demand-video of this OnDemandVideo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buy(self):
        """Gets the buy of this OnDemandVideo.


        :return: The buy of this OnDemandVideo.
        :rtype: OnDemandVideoBuy
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this OnDemandVideo.


        :param buy: The buy of this OnDemandVideo.
        :type buy: OnDemandVideoBuy
        """
        if buy is None:
            raise ValueError("Invalid value for `buy`, must not be `None`")

        self._buy = buy

    @property
    def description(self):
        """Gets the description of this OnDemandVideo.

        Description of the On Demand video.

        :return: The description of this OnDemandVideo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OnDemandVideo.

        Description of the On Demand video.

        :param description: The description of this OnDemandVideo.
        :type description: str
        """

        self._description = description

    @property
    def duration(self):
        """Gets the duration of this OnDemandVideo.

        The duration of the On Demand video.

        :return: The duration of this OnDemandVideo.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this OnDemandVideo.

        The duration of the On Demand video.

        :param duration: The duration of this OnDemandVideo.
        :type duration: str
        """

        self._duration = duration

    @property
    def episode(self):
        """Gets the episode of this OnDemandVideo.

        The episode number of the On Demand video.

        :return: The episode of this OnDemandVideo.
        :rtype: float
        """
        return self._episode

    @episode.setter
    def episode(self, episode):
        """Sets the episode of this OnDemandVideo.

        The episode number of the On Demand video.

        :param episode: The episode of this OnDemandVideo.
        :type episode: float
        """

        self._episode = episode

    @property
    def interactions(self):
        """Gets the interactions of this OnDemandVideo.


        :return: The interactions of this OnDemandVideo.
        :rtype: OnDemandVideoInteractions
        """
        return self._interactions

    @interactions.setter
    def interactions(self, interactions):
        """Sets the interactions of this OnDemandVideo.


        :param interactions: The interactions of this OnDemandVideo.
        :type interactions: OnDemandVideoInteractions
        """
        if interactions is None:
            raise ValueError("Invalid value for `interactions`, must not be `None`")

        self._interactions = interactions

    @property
    def link(self):
        """Gets the link of this OnDemandVideo.

        The link to this video on Vimeo.

        :return: The link of this OnDemandVideo.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this OnDemandVideo.

        The link to this video on Vimeo.

        :param link: The link of this OnDemandVideo.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def metadata(self):
        """Gets the metadata of this OnDemandVideo.


        :return: The metadata of this OnDemandVideo.
        :rtype: OnDemandVideoMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OnDemandVideo.


        :param metadata: The metadata of this OnDemandVideo.
        :type metadata: OnDemandVideoMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this OnDemandVideo.

        The title of the On Demand video.

        :return: The name of this OnDemandVideo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OnDemandVideo.

        The title of the On Demand video.

        :param name: The name of this OnDemandVideo.
        :type name: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this OnDemandVideo.

        An array of HTTP methods permitted on this URI.

        :return: The options of this OnDemandVideo.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this OnDemandVideo.

        An array of HTTP methods permitted on this URI.

        :param options: The options of this OnDemandVideo.
        :type options: List[str]
        """

        self._options = options

    @property
    def pictures(self):
        """Gets the pictures of this OnDemandVideo.

        The active picture for this video.

        :return: The pictures of this OnDemandVideo.
        :rtype: Picture
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this OnDemandVideo.

        The active picture for this video.

        :param pictures: The pictures of this OnDemandVideo.
        :type pictures: Picture
        """

        self._pictures = pictures

    @property
    def play_progress(self):
        """Gets the play_progress of this OnDemandVideo.

        The user's most recent play position in seconds for this video.

        :return: The play_progress of this OnDemandVideo.
        :rtype: float
        """
        return self._play_progress

    @play_progress.setter
    def play_progress(self, play_progress):
        """Sets the play_progress of this OnDemandVideo.

        The user's most recent play position in seconds for this video.

        :param play_progress: The play_progress of this OnDemandVideo.
        :type play_progress: float
        """
        if play_progress is None:
            raise ValueError("Invalid value for `play_progress`, must not be `None`")

        self._play_progress = play_progress

    @property
    def position(self):
        """Gets the position of this OnDemandVideo.

        Describes the manual position of this video relative to the other videos owned by this On Demand page.

        :return: The position of this OnDemandVideo.
        :rtype: float
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this OnDemandVideo.

        Describes the manual position of this video relative to the other videos owned by this On Demand page.

        :param position: The position of this OnDemandVideo.
        :type position: float
        """

        self._position = position

    @property
    def release_date(self):
        """Gets the release_date of this OnDemandVideo.

        The time in ISO 8601 format when the On Demand video was created or published.

        :return: The release_date of this OnDemandVideo.
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this OnDemandVideo.

        The time in ISO 8601 format when the On Demand video was created or published.

        :param release_date: The release_date of this OnDemandVideo.
        :type release_date: str
        """

        self._release_date = release_date

    @property
    def release_year(self):
        """Gets the release_year of this OnDemandVideo.

        The year that this On Demand video was released.

        :return: The release_year of this OnDemandVideo.
        :rtype: float
        """
        return self._release_year

    @release_year.setter
    def release_year(self, release_year):
        """Sets the release_year of this OnDemandVideo.

        The year that this On Demand video was released.

        :param release_year: The release_year of this OnDemandVideo.
        :type release_year: float
        """
        if release_year is None:
            raise ValueError("Invalid value for `release_year`, must not be `None`")

        self._release_year = release_year

    @property
    def rent(self):
        """Gets the rent of this OnDemandVideo.


        :return: The rent of this OnDemandVideo.
        :rtype: OnDemandVideoRent
        """
        return self._rent

    @rent.setter
    def rent(self, rent):
        """Sets the rent of this OnDemandVideo.


        :param rent: The rent of this OnDemandVideo.
        :type rent: OnDemandVideoRent
        """
        if rent is None:
            raise ValueError("Invalid value for `rent`, must not be `None`")

        self._rent = rent

    @property
    def type(self):
        """Gets the type of this OnDemandVideo.

        The type of the On Demand video:  Option descriptions:  * `extra` - The On Demand video is an extra feature.  * `main` - The On Demand video is a main feature.  * `trailer` - The On Demand video is a trailer. 

        :return: The type of this OnDemandVideo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OnDemandVideo.

        The type of the On Demand video:  Option descriptions:  * `extra` - The On Demand video is an extra feature.  * `main` - The On Demand video is a main feature.  * `trailer` - The On Demand video is a trailer. 

        :param type: The type of this OnDemandVideo.
        :type type: str
        """
        allowed_values = ["extra", "main", "trailer"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this OnDemandVideo.

        The video container's relative URI.

        :return: The uri of this OnDemandVideo.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this OnDemandVideo.

        The video container's relative URI.

        :param uri: The uri of this OnDemandVideo.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def user(self):
        """Gets the user of this OnDemandVideo.

        The owner of the video.

        :return: The user of this OnDemandVideo.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this OnDemandVideo.

        The owner of the video.

        :param user: The user of this OnDemandVideo.
        :type user: User
        """

        self._user = user
