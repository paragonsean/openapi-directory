# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddChannelModeratorsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_uri: str=None):
        """AddChannelModeratorsRequest - a model defined in OpenAPI

        :param user_uri: The user_uri of this AddChannelModeratorsRequest.
        """
        self.openapi_types = {
            'user_uri': str
        }

        self.attribute_map = {
            'user_uri': 'user_uri'
        }

        self._user_uri = user_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddChannelModeratorsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The add_channel_moderators_request of this AddChannelModeratorsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_uri(self):
        """Gets the user_uri of this AddChannelModeratorsRequest.

        The URI of a user to add as a moderator.

        :return: The user_uri of this AddChannelModeratorsRequest.
        :rtype: str
        """
        return self._user_uri

    @user_uri.setter
    def user_uri(self, user_uri):
        """Sets the user_uri of this AddChannelModeratorsRequest.

        The URI of a user to add as a moderator.

        :param user_uri: The user_uri of this AddChannelModeratorsRequest.
        :type user_uri: str
        """
        if user_uri is None:
            raise ValueError("Invalid value for `user_uri`, must not be `None`")

        self._user_uri = user_uri
