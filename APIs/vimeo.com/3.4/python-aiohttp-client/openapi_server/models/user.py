# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.picture import Picture
from openapi_server.models.user_metadata import UserMetadata
from openapi_server.models.user_preferences import UserPreferences
from openapi_server.models.user_upload_quota import UserUploadQuota
from openapi_server.models.user_websites_inner import UserWebsitesInner
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, bio: str=None, content_filter: List[str]=None, created_time: str=None, email: str=None, link: str=None, location: str=None, metadata: UserMetadata=None, name: str=None, pictures: Picture=None, preferences: UserPreferences=None, resource_key: str=None, upload_quota: UserUploadQuota=None, uri: str=None, websites: List[UserWebsitesInner]=None):
        """User - a model defined in OpenAPI

        :param account: The account of this User.
        :param bio: The bio of this User.
        :param content_filter: The content_filter of this User.
        :param created_time: The created_time of this User.
        :param email: The email of this User.
        :param link: The link of this User.
        :param location: The location of this User.
        :param metadata: The metadata of this User.
        :param name: The name of this User.
        :param pictures: The pictures of this User.
        :param preferences: The preferences of this User.
        :param resource_key: The resource_key of this User.
        :param upload_quota: The upload_quota of this User.
        :param uri: The uri of this User.
        :param websites: The websites of this User.
        """
        self.openapi_types = {
            'account': str,
            'bio': str,
            'content_filter': List[str],
            'created_time': str,
            'email': str,
            'link': str,
            'location': str,
            'metadata': UserMetadata,
            'name': str,
            'pictures': Picture,
            'preferences': UserPreferences,
            'resource_key': str,
            'upload_quota': UserUploadQuota,
            'uri': str,
            'websites': List[UserWebsitesInner]
        }

        self.attribute_map = {
            'account': 'account',
            'bio': 'bio',
            'content_filter': 'content_filter',
            'created_time': 'created_time',
            'email': 'email',
            'link': 'link',
            'location': 'location',
            'metadata': 'metadata',
            'name': 'name',
            'pictures': 'pictures',
            'preferences': 'preferences',
            'resource_key': 'resource_key',
            'upload_quota': 'upload_quota',
            'uri': 'uri',
            'websites': 'websites'
        }

        self._account = account
        self._bio = bio
        self._content_filter = content_filter
        self._created_time = created_time
        self._email = email
        self._link = link
        self._location = location
        self._metadata = metadata
        self._name = name
        self._pictures = pictures
        self._preferences = preferences
        self._resource_key = resource_key
        self._upload_quota = upload_quota
        self._uri = uri
        self._websites = websites

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The user of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this User.

        The user's account type:  Option descriptions:  * `basic` - The user has a Vimeo Basic subscription.  * `business` - The user has a Vimeo Business subscription.  * `live_business` - The user has a Vimeo Business Live subscription.  * `live_premium` - The user has a Vimeo Premium subscription.  * `live_pro` - The user has a Vimeo PRO Live subscription.  * `plus` - The user has a Vimeo Plus subscription.  * `pro` - The user has a Vimeo Pro subscription.  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.  * `producer` - The user has a Vimeo Producer subscription. 

        :return: The account of this User.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this User.

        The user's account type:  Option descriptions:  * `basic` - The user has a Vimeo Basic subscription.  * `business` - The user has a Vimeo Business subscription.  * `live_business` - The user has a Vimeo Business Live subscription.  * `live_premium` - The user has a Vimeo Premium subscription.  * `live_pro` - The user has a Vimeo PRO Live subscription.  * `plus` - The user has a Vimeo Plus subscription.  * `pro` - The user has a Vimeo Pro subscription.  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.  * `producer` - The user has a Vimeo Producer subscription. 

        :param account: The account of this User.
        :type account: str
        """
        allowed_values = ["basic", "business", "live_business", "live_premium", "live_pro", "plus", "pro", "pro_unlimited", "producer"]  # noqa: E501
        if account not in allowed_values:
            raise ValueError(
                "Invalid value for `account` ({0}), must be one of {1}"
                .format(account, allowed_values)
            )

        self._account = account

    @property
    def bio(self):
        """Gets the bio of this User.

        The user's bio.

        :return: The bio of this User.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this User.

        The user's bio.

        :param bio: The bio of this User.
        :type bio: str
        """
        if bio is None:
            raise ValueError("Invalid value for `bio`, must not be `None`")

        self._bio = bio

    @property
    def content_filter(self):
        """Gets the content_filter of this User.

        The user's content filters:  Option descriptions:  * `drugs` - Drugs or alcohol use.  * `language` - Profanity or sexually suggestive content.  * `nudity` - Nudity.  * `safe` - Suitable for all audiences.  * `unrated` - No rating.  * `violence` - Violent or graphic content. 

        :return: The content_filter of this User.
        :rtype: List[str]
        """
        return self._content_filter

    @content_filter.setter
    def content_filter(self, content_filter):
        """Sets the content_filter of this User.

        The user's content filters:  Option descriptions:  * `drugs` - Drugs or alcohol use.  * `language` - Profanity or sexually suggestive content.  * `nudity` - Nudity.  * `safe` - Suitable for all audiences.  * `unrated` - No rating.  * `violence` - Violent or graphic content. 

        :param content_filter: The content_filter of this User.
        :type content_filter: List[str]
        """
        allowed_values = ["drugs", "language", "nudity", "safe", "unrated", "violence"]  # noqa: E501
        if not set(content_filter).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `content_filter` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(content_filter) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._content_filter = content_filter

    @property
    def created_time(self):
        """Gets the created_time of this User.

        The time in ISO 8601 format when the user account was created.

        :return: The created_time of this User.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this User.

        The time in ISO 8601 format when the user account was created.

        :param created_time: The created_time of this User.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def email(self):
        """Gets the email of this User.

        The user's email address. This data requires a bearer token with the `email` scope.

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        The user's email address. This data requires a bearer token with the `email` scope.

        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def link(self):
        """Gets the link of this User.

        The absolute URL of this user's profile page.

        :return: The link of this User.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this User.

        The absolute URL of this user's profile page.

        :param link: The link of this User.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def location(self):
        """Gets the location of this User.

        The user's location.

        :return: The location of this User.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this User.

        The user's location.

        :param location: The location of this User.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def metadata(self):
        """Gets the metadata of this User.


        :return: The metadata of this User.
        :rtype: UserMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this User.


        :param metadata: The metadata of this User.
        :type metadata: UserMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this User.

        The user's display name.

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        The user's display name.

        :param name: The name of this User.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pictures(self):
        """Gets the pictures of this User.

        The active portrait of this user.

        :return: The pictures of this User.
        :rtype: Picture
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this User.

        The active portrait of this user.

        :param pictures: The pictures of this User.
        :type pictures: Picture
        """
        if pictures is None:
            raise ValueError("Invalid value for `pictures`, must not be `None`")

        self._pictures = pictures

    @property
    def preferences(self):
        """Gets the preferences of this User.


        :return: The preferences of this User.
        :rtype: UserPreferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this User.


        :param preferences: The preferences of this User.
        :type preferences: UserPreferences
        """

        self._preferences = preferences

    @property
    def resource_key(self):
        """Gets the resource_key of this User.

        The user's resource key string.

        :return: The resource_key of this User.
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this User.

        The user's resource key string.

        :param resource_key: The resource_key of this User.
        :type resource_key: str
        """
        if resource_key is None:
            raise ValueError("Invalid value for `resource_key`, must not be `None`")

        self._resource_key = resource_key

    @property
    def upload_quota(self):
        """Gets the upload_quota of this User.


        :return: The upload_quota of this User.
        :rtype: UserUploadQuota
        """
        return self._upload_quota

    @upload_quota.setter
    def upload_quota(self, upload_quota):
        """Sets the upload_quota of this User.


        :param upload_quota: The upload_quota of this User.
        :type upload_quota: UserUploadQuota
        """
        if upload_quota is None:
            raise ValueError("Invalid value for `upload_quota`, must not be `None`")

        self._upload_quota = upload_quota

    @property
    def uri(self):
        """Gets the uri of this User.

        The user's canonical relative URI.

        :return: The uri of this User.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this User.

        The user's canonical relative URI.

        :param uri: The uri of this User.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def websites(self):
        """Gets the websites of this User.

        The user's websites.

        :return: The websites of this User.
        :rtype: List[UserWebsitesInner]
        """
        return self._websites

    @websites.setter
    def websites(self, websites):
        """Sets the websites of this User.

        The user's websites.

        :param websites: The websites of this User.
        :type websites: List[UserWebsitesInner]
        """
        if websites is None:
            raise ValueError("Invalid value for `websites`, must not be `None`")

        self._websites = websites
