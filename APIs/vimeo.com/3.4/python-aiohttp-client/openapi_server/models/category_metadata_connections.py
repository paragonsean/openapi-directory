# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category_metadata_connections_channels import CategoryMetadataConnectionsChannels
from openapi_server.models.category_metadata_connections_groups import CategoryMetadataConnectionsGroups
from openapi_server.models.category_metadata_connections_users import CategoryMetadataConnectionsUsers
from openapi_server.models.category_metadata_connections_videos import CategoryMetadataConnectionsVideos
from openapi_server import util


class CategoryMetadataConnections(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channels: CategoryMetadataConnectionsChannels=None, groups: CategoryMetadataConnectionsGroups=None, users: CategoryMetadataConnectionsUsers=None, videos: CategoryMetadataConnectionsVideos=None):
        """CategoryMetadataConnections - a model defined in OpenAPI

        :param channels: The channels of this CategoryMetadataConnections.
        :param groups: The groups of this CategoryMetadataConnections.
        :param users: The users of this CategoryMetadataConnections.
        :param videos: The videos of this CategoryMetadataConnections.
        """
        self.openapi_types = {
            'channels': CategoryMetadataConnectionsChannels,
            'groups': CategoryMetadataConnectionsGroups,
            'users': CategoryMetadataConnectionsUsers,
            'videos': CategoryMetadataConnectionsVideos
        }

        self.attribute_map = {
            'channels': 'channels',
            'groups': 'groups',
            'users': 'users',
            'videos': 'videos'
        }

        self._channels = channels
        self._groups = groups
        self._users = users
        self._videos = videos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryMetadataConnections':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The category_metadata_connections of this CategoryMetadataConnections.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channels(self):
        """Gets the channels of this CategoryMetadataConnections.


        :return: The channels of this CategoryMetadataConnections.
        :rtype: CategoryMetadataConnectionsChannels
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this CategoryMetadataConnections.


        :param channels: The channels of this CategoryMetadataConnections.
        :type channels: CategoryMetadataConnectionsChannels
        """
        if channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")

        self._channels = channels

    @property
    def groups(self):
        """Gets the groups of this CategoryMetadataConnections.


        :return: The groups of this CategoryMetadataConnections.
        :rtype: CategoryMetadataConnectionsGroups
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this CategoryMetadataConnections.


        :param groups: The groups of this CategoryMetadataConnections.
        :type groups: CategoryMetadataConnectionsGroups
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")

        self._groups = groups

    @property
    def users(self):
        """Gets the users of this CategoryMetadataConnections.


        :return: The users of this CategoryMetadataConnections.
        :rtype: CategoryMetadataConnectionsUsers
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this CategoryMetadataConnections.


        :param users: The users of this CategoryMetadataConnections.
        :type users: CategoryMetadataConnectionsUsers
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users

    @property
    def videos(self):
        """Gets the videos of this CategoryMetadataConnections.


        :return: The videos of this CategoryMetadataConnections.
        :rtype: CategoryMetadataConnectionsVideos
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this CategoryMetadataConnections.


        :param videos: The videos of this CategoryMetadataConnections.
        :type videos: CategoryMetadataConnectionsVideos
        """
        if videos is None:
            raise ValueError("Invalid value for `videos`, must not be `None`")

        self._videos = videos
