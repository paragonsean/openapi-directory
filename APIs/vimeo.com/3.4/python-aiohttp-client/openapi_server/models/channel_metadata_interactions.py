# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_metadata_interactions_add_moderators import ChannelMetadataInteractionsAddModerators
from openapi_server.models.channel_metadata_interactions_add_to import ChannelMetadataInteractionsAddTo
from openapi_server.models.channel_metadata_interactions_follow import ChannelMetadataInteractionsFollow
from openapi_server.models.channel_metadata_interactions_moderate_videos import ChannelMetadataInteractionsModerateVideos
from openapi_server import util


class ChannelMetadataInteractions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_moderators: ChannelMetadataInteractionsAddModerators=None, add_to: ChannelMetadataInteractionsAddTo=None, follow: ChannelMetadataInteractionsFollow=None, moderate_videos: ChannelMetadataInteractionsModerateVideos=None):
        """ChannelMetadataInteractions - a model defined in OpenAPI

        :param add_moderators: The add_moderators of this ChannelMetadataInteractions.
        :param add_to: The add_to of this ChannelMetadataInteractions.
        :param follow: The follow of this ChannelMetadataInteractions.
        :param moderate_videos: The moderate_videos of this ChannelMetadataInteractions.
        """
        self.openapi_types = {
            'add_moderators': ChannelMetadataInteractionsAddModerators,
            'add_to': ChannelMetadataInteractionsAddTo,
            'follow': ChannelMetadataInteractionsFollow,
            'moderate_videos': ChannelMetadataInteractionsModerateVideos
        }

        self.attribute_map = {
            'add_moderators': 'add_moderators',
            'add_to': 'add_to',
            'follow': 'follow',
            'moderate_videos': 'moderate_videos'
        }

        self._add_moderators = add_moderators
        self._add_to = add_to
        self._follow = follow
        self._moderate_videos = moderate_videos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelMetadataInteractions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channel_metadata_interactions of this ChannelMetadataInteractions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_moderators(self):
        """Gets the add_moderators of this ChannelMetadataInteractions.


        :return: The add_moderators of this ChannelMetadataInteractions.
        :rtype: ChannelMetadataInteractionsAddModerators
        """
        return self._add_moderators

    @add_moderators.setter
    def add_moderators(self, add_moderators):
        """Sets the add_moderators of this ChannelMetadataInteractions.


        :param add_moderators: The add_moderators of this ChannelMetadataInteractions.
        :type add_moderators: ChannelMetadataInteractionsAddModerators
        """
        if add_moderators is None:
            raise ValueError("Invalid value for `add_moderators`, must not be `None`")

        self._add_moderators = add_moderators

    @property
    def add_to(self):
        """Gets the add_to of this ChannelMetadataInteractions.


        :return: The add_to of this ChannelMetadataInteractions.
        :rtype: ChannelMetadataInteractionsAddTo
        """
        return self._add_to

    @add_to.setter
    def add_to(self, add_to):
        """Sets the add_to of this ChannelMetadataInteractions.


        :param add_to: The add_to of this ChannelMetadataInteractions.
        :type add_to: ChannelMetadataInteractionsAddTo
        """
        if add_to is None:
            raise ValueError("Invalid value for `add_to`, must not be `None`")

        self._add_to = add_to

    @property
    def follow(self):
        """Gets the follow of this ChannelMetadataInteractions.


        :return: The follow of this ChannelMetadataInteractions.
        :rtype: ChannelMetadataInteractionsFollow
        """
        return self._follow

    @follow.setter
    def follow(self, follow):
        """Sets the follow of this ChannelMetadataInteractions.


        :param follow: The follow of this ChannelMetadataInteractions.
        :type follow: ChannelMetadataInteractionsFollow
        """
        if follow is None:
            raise ValueError("Invalid value for `follow`, must not be `None`")

        self._follow = follow

    @property
    def moderate_videos(self):
        """Gets the moderate_videos of this ChannelMetadataInteractions.


        :return: The moderate_videos of this ChannelMetadataInteractions.
        :rtype: ChannelMetadataInteractionsModerateVideos
        """
        return self._moderate_videos

    @moderate_videos.setter
    def moderate_videos(self, moderate_videos):
        """Sets the moderate_videos of this ChannelMetadataInteractions.


        :param moderate_videos: The moderate_videos of this ChannelMetadataInteractions.
        :type moderate_videos: ChannelMetadataInteractionsModerateVideos
        """
        if moderate_videos is None:
            raise ValueError("Invalid value for `moderate_videos`, must not be `None`")

        self._moderate_videos = moderate_videos
