# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlbumPrivacy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password: str=None, view: str=None):
        """AlbumPrivacy - a model defined in OpenAPI

        :param password: The password of this AlbumPrivacy.
        :param view: The view of this AlbumPrivacy.
        """
        self.openapi_types = {
            'password': str,
            'view': str
        }

        self.attribute_map = {
            'password': 'password',
            'view': 'view'
        }

        self._password = password
        self._view = view

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlbumPrivacy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The album_privacy of this AlbumPrivacy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password(self):
        """Gets the password of this AlbumPrivacy.

        The privacy-enabled password to see this album. Present only when `privacy.view` is `password`.

        :return: The password of this AlbumPrivacy.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AlbumPrivacy.

        The privacy-enabled password to see this album. Present only when `privacy.view` is `password`.

        :param password: The password of this AlbumPrivacy.
        :type password: str
        """

        self._password = password

    @property
    def view(self):
        """Gets the view of this AlbumPrivacy.

        Who can view the album:  Option descriptions:  * `anybody` - Anyone can view the album.  * `embed_only` - Only owner can see album, can be embedded off-site  * `password` - Only those with the password can view the album. 

        :return: The view of this AlbumPrivacy.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this AlbumPrivacy.

        Who can view the album:  Option descriptions:  * `anybody` - Anyone can view the album.  * `embed_only` - Only owner can see album, can be embedded off-site  * `password` - Only those with the password can view the album. 

        :param view: The view of this AlbumPrivacy.
        :type view: str
        """
        allowed_values = ["anybody", "embed_only", "password"]  # noqa: E501
        if view not in allowed_values:
            raise ValueError(
                "Invalid value for `view` ({0}), must be one of {1}"
                .format(view, allowed_values)
            )

        self._view = view
