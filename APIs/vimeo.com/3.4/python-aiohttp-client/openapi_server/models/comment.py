# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment_metadata import CommentMetadata
from openapi_server.models.user import User
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_on: str=None, metadata: CommentMetadata=None, resource_key: str=None, text: str=None, type: str=None, uri: str=None, user: User=None):
        """Comment - a model defined in OpenAPI

        :param created_on: The created_on of this Comment.
        :param metadata: The metadata of this Comment.
        :param resource_key: The resource_key of this Comment.
        :param text: The text of this Comment.
        :param type: The type of this Comment.
        :param uri: The uri of this Comment.
        :param user: The user of this Comment.
        """
        self.openapi_types = {
            'created_on': str,
            'metadata': CommentMetadata,
            'resource_key': str,
            'text': str,
            'type': str,
            'uri': str,
            'user': User
        }

        self.attribute_map = {
            'created_on': 'created_on',
            'metadata': 'metadata',
            'resource_key': 'resource_key',
            'text': 'text',
            'type': 'type',
            'uri': 'uri',
            'user': 'user'
        }

        self._created_on = created_on
        self._metadata = metadata
        self._resource_key = resource_key
        self._text = text
        self._type = type
        self._uri = uri
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_on(self):
        """Gets the created_on of this Comment.

        The time in ISO 8601 format when the comment was posted.

        :return: The created_on of this Comment.
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Comment.

        The time in ISO 8601 format when the comment was posted.

        :param created_on: The created_on of this Comment.
        :type created_on: str
        """
        if created_on is None:
            raise ValueError("Invalid value for `created_on`, must not be `None`")

        self._created_on = created_on

    @property
    def metadata(self):
        """Gets the metadata of this Comment.


        :return: The metadata of this Comment.
        :rtype: CommentMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Comment.


        :param metadata: The metadata of this Comment.
        :type metadata: CommentMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def resource_key(self):
        """Gets the resource_key of this Comment.

        The resource key string for the comment.

        :return: The resource_key of this Comment.
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this Comment.

        The resource key string for the comment.

        :param resource_key: The resource_key of this Comment.
        :type resource_key: str
        """
        if resource_key is None:
            raise ValueError("Invalid value for `resource_key`, must not be `None`")

        self._resource_key = resource_key

    @property
    def text(self):
        """Gets the text of this Comment.

        The content of the comment.

        :return: The text of this Comment.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Comment.

        The content of the comment.

        :param text: The text of this Comment.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def type(self):
        """Gets the type of this Comment.

        The Vimeo content to which the comment relates:  Option descriptions:  * `video` - The comment is about a video. 

        :return: The type of this Comment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Comment.

        The Vimeo content to which the comment relates:  Option descriptions:  * `video` - The comment is about a video. 

        :param type: The type of this Comment.
        :type type: str
        """
        allowed_values = ["video"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this Comment.

        The unique identifier to access the comment resource.

        :return: The uri of this Comment.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Comment.

        The unique identifier to access the comment resource.

        :param uri: The uri of this Comment.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def user(self):
        """Gets the user of this Comment.

        The user who posted the comment.

        :return: The user of this Comment.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Comment.

        The user who posted the comment.

        :param user: The user of this Comment.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
