# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TextTrack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, hls_link: str=None, hls_link_expires_time: str=None, language: str=None, link: str=None, link_expires_time: str=None, name: str=None, type: str=None, uri: str=None):
        """TextTrack - a model defined in OpenAPI

        :param active: The active of this TextTrack.
        :param hls_link: The hls_link of this TextTrack.
        :param hls_link_expires_time: The hls_link_expires_time of this TextTrack.
        :param language: The language of this TextTrack.
        :param link: The link of this TextTrack.
        :param link_expires_time: The link_expires_time of this TextTrack.
        :param name: The name of this TextTrack.
        :param type: The type of this TextTrack.
        :param uri: The uri of this TextTrack.
        """
        self.openapi_types = {
            'active': bool,
            'hls_link': str,
            'hls_link_expires_time': str,
            'language': str,
            'link': str,
            'link_expires_time': str,
            'name': str,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            'active': 'active',
            'hls_link': 'hls_link',
            'hls_link_expires_time': 'hls_link_expires_time',
            'language': 'language',
            'link': 'link',
            'link_expires_time': 'link_expires_time',
            'name': 'name',
            'type': 'type',
            'uri': 'uri'
        }

        self._active = active
        self._hls_link = hls_link
        self._hls_link_expires_time = hls_link_expires_time
        self._language = language
        self._link = link
        self._link_expires_time = link_expires_time
        self._name = name
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextTrack':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The text-track of this TextTrack.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this TextTrack.

        Whether this text track is active.

        :return: The active of this TextTrack.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TextTrack.

        Whether this text track is active.

        :param active: The active of this TextTrack.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def hls_link(self):
        """Gets the hls_link of this TextTrack.

        The read-only URL of the text track file, intended for use with HLS playback.

        :return: The hls_link of this TextTrack.
        :rtype: str
        """
        return self._hls_link

    @hls_link.setter
    def hls_link(self, hls_link):
        """Sets the hls_link of this TextTrack.

        The read-only URL of the text track file, intended for use with HLS playback.

        :param hls_link: The hls_link of this TextTrack.
        :type hls_link: str
        """
        if hls_link is None:
            raise ValueError("Invalid value for `hls_link`, must not be `None`")

        self._hls_link = hls_link

    @property
    def hls_link_expires_time(self):
        """Gets the hls_link_expires_time of this TextTrack.

        The time in ISO 8601 format when the read-only HLS playback text track file expires.

        :return: The hls_link_expires_time of this TextTrack.
        :rtype: str
        """
        return self._hls_link_expires_time

    @hls_link_expires_time.setter
    def hls_link_expires_time(self, hls_link_expires_time):
        """Sets the hls_link_expires_time of this TextTrack.

        The time in ISO 8601 format when the read-only HLS playback text track file expires.

        :param hls_link_expires_time: The hls_link_expires_time of this TextTrack.
        :type hls_link_expires_time: str
        """
        if hls_link_expires_time is None:
            raise ValueError("Invalid value for `hls_link_expires_time`, must not be `None`")

        self._hls_link_expires_time = hls_link_expires_time

    @property
    def language(self):
        """Gets the language of this TextTrack.

        The language code for this text track. To see a full list, request `/languages?filter=texttrack`.

        :return: The language of this TextTrack.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this TextTrack.

        The language code for this text track. To see a full list, request `/languages?filter=texttrack`.

        :param language: The language of this TextTrack.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def link(self):
        """Gets the link of this TextTrack.

        The read-only URL of the text track file. You can upload to this link when you create it for the first time.

        :return: The link of this TextTrack.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this TextTrack.

        The read-only URL of the text track file. You can upload to this link when you create it for the first time.

        :param link: The link of this TextTrack.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def link_expires_time(self):
        """Gets the link_expires_time of this TextTrack.

        The time in ISO 8601 format when the text track link expires.

        :return: The link_expires_time of this TextTrack.
        :rtype: str
        """
        return self._link_expires_time

    @link_expires_time.setter
    def link_expires_time(self, link_expires_time):
        """Sets the link_expires_time of this TextTrack.

        The time in ISO 8601 format when the text track link expires.

        :param link_expires_time: The link_expires_time of this TextTrack.
        :type link_expires_time: str
        """
        if link_expires_time is None:
            raise ValueError("Invalid value for `link_expires_time`, must not be `None`")

        self._link_expires_time = link_expires_time

    @property
    def name(self):
        """Gets the name of this TextTrack.

        The descriptive name of this text track.

        :return: The name of this TextTrack.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TextTrack.

        The descriptive name of this text track.

        :param name: The name of this TextTrack.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this TextTrack.

        The type of the text track:  Option descriptions:  * `captions` - The text track is for captions.  * `subtitles` - The text track is for subtitles. 

        :return: The type of this TextTrack.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TextTrack.

        The type of the text track:  Option descriptions:  * `captions` - The text track is for captions.  * `subtitles` - The text track is for subtitles. 

        :param type: The type of this TextTrack.
        :type type: str
        """
        allowed_values = [None,"captions", "subtitles"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this TextTrack.

        The relative URI of the text track.

        :return: The uri of this TextTrack.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this TextTrack.

        The relative URI of the text track.

        :param uri: The uri of this TextTrack.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
