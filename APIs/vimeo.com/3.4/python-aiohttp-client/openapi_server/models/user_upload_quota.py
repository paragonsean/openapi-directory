# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_upload_quota_lifetime import UserUploadQuotaLifetime
from openapi_server.models.user_upload_quota_periodic import UserUploadQuotaPeriodic
from openapi_server.models.user_upload_quota_space import UserUploadQuotaSpace
from openapi_server import util


class UserUploadQuota(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lifetime: UserUploadQuotaLifetime=None, periodic: UserUploadQuotaPeriodic=None, space: UserUploadQuotaSpace=None):
        """UserUploadQuota - a model defined in OpenAPI

        :param lifetime: The lifetime of this UserUploadQuota.
        :param periodic: The periodic of this UserUploadQuota.
        :param space: The space of this UserUploadQuota.
        """
        self.openapi_types = {
            'lifetime': UserUploadQuotaLifetime,
            'periodic': UserUploadQuotaPeriodic,
            'space': UserUploadQuotaSpace
        }

        self.attribute_map = {
            'lifetime': 'lifetime',
            'periodic': 'periodic',
            'space': 'space'
        }

        self._lifetime = lifetime
        self._periodic = periodic
        self._space = space

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserUploadQuota':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The user_upload_quota of this UserUploadQuota.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lifetime(self):
        """Gets the lifetime of this UserUploadQuota.


        :return: The lifetime of this UserUploadQuota.
        :rtype: UserUploadQuotaLifetime
        """
        return self._lifetime

    @lifetime.setter
    def lifetime(self, lifetime):
        """Sets the lifetime of this UserUploadQuota.


        :param lifetime: The lifetime of this UserUploadQuota.
        :type lifetime: UserUploadQuotaLifetime
        """
        if lifetime is None:
            raise ValueError("Invalid value for `lifetime`, must not be `None`")

        self._lifetime = lifetime

    @property
    def periodic(self):
        """Gets the periodic of this UserUploadQuota.


        :return: The periodic of this UserUploadQuota.
        :rtype: UserUploadQuotaPeriodic
        """
        return self._periodic

    @periodic.setter
    def periodic(self, periodic):
        """Sets the periodic of this UserUploadQuota.


        :param periodic: The periodic of this UserUploadQuota.
        :type periodic: UserUploadQuotaPeriodic
        """
        if periodic is None:
            raise ValueError("Invalid value for `periodic`, must not be `None`")

        self._periodic = periodic

    @property
    def space(self):
        """Gets the space of this UserUploadQuota.


        :return: The space of this UserUploadQuota.
        :rtype: UserUploadQuotaSpace
        """
        return self._space

    @space.setter
    def space(self, space):
        """Sets the space of this UserUploadQuota.


        :param space: The space of this UserUploadQuota.
        :type space: UserUploadQuotaSpace
        """
        if space is None:
            raise ValueError("Invalid value for `space`, must not be `None`")

        self._space = space
