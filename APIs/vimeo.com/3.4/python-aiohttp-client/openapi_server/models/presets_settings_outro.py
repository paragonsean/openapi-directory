# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.presets_settings_outro_link import PresetsSettingsOutroLink
from openapi_server import util


class PresetsSettingsOutro(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clips: str=None, link: PresetsSettingsOutroLink=None, text: str=None, type: str=None, videos: str=None):
        """PresetsSettingsOutro - a model defined in OpenAPI

        :param clips: The clips of this PresetsSettingsOutro.
        :param link: The link of this PresetsSettingsOutro.
        :param text: The text of this PresetsSettingsOutro.
        :param type: The type of this PresetsSettingsOutro.
        :param videos: The videos of this PresetsSettingsOutro.
        """
        self.openapi_types = {
            'clips': str,
            'link': PresetsSettingsOutroLink,
            'text': str,
            'type': str,
            'videos': str
        }

        self.attribute_map = {
            'clips': 'clips',
            'link': 'link',
            'text': 'text',
            'type': 'type',
            'videos': 'videos'
        }

        self._clips = clips
        self._link = link
        self._text = text
        self._type = type
        self._videos = videos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PresetsSettingsOutro':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The presets_settings_outro of this PresetsSettingsOutro.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clips(self):
        """Gets the clips of this PresetsSettingsOutro.

        A comma-separated list of video URIs. Present only if the type is `uploaded_clips`.

        :return: The clips of this PresetsSettingsOutro.
        :rtype: str
        """
        return self._clips

    @clips.setter
    def clips(self, clips):
        """Sets the clips of this PresetsSettingsOutro.

        A comma-separated list of video URIs. Present only if the type is `uploaded_clips`.

        :param clips: The clips of this PresetsSettingsOutro.
        :type clips: str
        """

        self._clips = clips

    @property
    def link(self):
        """Gets the link of this PresetsSettingsOutro.


        :return: The link of this PresetsSettingsOutro.
        :rtype: PresetsSettingsOutroLink
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this PresetsSettingsOutro.


        :param link: The link of this PresetsSettingsOutro.
        :type link: PresetsSettingsOutroLink
        """

        self._link = link

    @property
    def text(self):
        """Gets the text of this PresetsSettingsOutro.

        The outro text. Present only if the type is `text`.

        :return: The text of this PresetsSettingsOutro.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PresetsSettingsOutro.

        The outro text. Present only if the type is `text`.

        :param text: The text of this PresetsSettingsOutro.
        :type text: str
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this PresetsSettingsOutro.

        The preset outro type:

        :return: The type of this PresetsSettingsOutro.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PresetsSettingsOutro.

        The preset outro type:

        :param type: The type of this PresetsSettingsOutro.
        :type type: str
        """
        allowed_values = ["link", "no idea", "text", "uploaded_clips", "uploaded_videos"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def videos(self):
        """Gets the videos of this PresetsSettingsOutro.

        A comma-separated list of video URIs. Present only if type is `no idea`.

        :return: The videos of this PresetsSettingsOutro.
        :rtype: str
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this PresetsSettingsOutro.

        A comma-separated list of video URIs. Present only if type is `no idea`.

        :param videos: The videos of this PresetsSettingsOutro.
        :type videos: str
        """

        self._videos = videos
