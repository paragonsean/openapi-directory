# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.edit_user_alt1_request_videos import EditUserAlt1RequestVideos
from openapi_server import util


class EditUserAlt1Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bio: str=None, content_filter: List[str]=None, link: str=None, location: str=None, name: str=None, password: str=None, videos: EditUserAlt1RequestVideos=None):
        """EditUserAlt1Request - a model defined in OpenAPI

        :param bio: The bio of this EditUserAlt1Request.
        :param content_filter: The content_filter of this EditUserAlt1Request.
        :param link: The link of this EditUserAlt1Request.
        :param location: The location of this EditUserAlt1Request.
        :param name: The name of this EditUserAlt1Request.
        :param password: The password of this EditUserAlt1Request.
        :param videos: The videos of this EditUserAlt1Request.
        """
        self.openapi_types = {
            'bio': str,
            'content_filter': List[str],
            'link': str,
            'location': str,
            'name': str,
            'password': str,
            'videos': EditUserAlt1RequestVideos
        }

        self.attribute_map = {
            'bio': 'bio',
            'content_filter': 'content_filter',
            'link': 'link',
            'location': 'location',
            'name': 'name',
            'password': 'password',
            'videos': 'videos'
        }

        self._bio = bio
        self._content_filter = content_filter
        self._link = link
        self._location = location
        self._name = name
        self._password = password
        self._videos = videos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditUserAlt1Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The edit_user_alt1_request of this EditUserAlt1Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bio(self):
        """Gets the bio of this EditUserAlt1Request.

        The user's bio.

        :return: The bio of this EditUserAlt1Request.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this EditUserAlt1Request.

        The user's bio.

        :param bio: The bio of this EditUserAlt1Request.
        :type bio: str
        """

        self._bio = bio

    @property
    def content_filter(self):
        """Gets the content_filter of this EditUserAlt1Request.

        A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint. You must provide a comma-separated list if you are using a query string or an array if you are using JSON.

        :return: The content_filter of this EditUserAlt1Request.
        :rtype: List[str]
        """
        return self._content_filter

    @content_filter.setter
    def content_filter(self, content_filter):
        """Sets the content_filter of this EditUserAlt1Request.

        A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint. You must provide a comma-separated list if you are using a query string or an array if you are using JSON.

        :param content_filter: The content_filter of this EditUserAlt1Request.
        :type content_filter: List[str]
        """

        self._content_filter = content_filter

    @property
    def link(self):
        """Gets the link of this EditUserAlt1Request.

        The user's custom Vimeo URL slug.

        :return: The link of this EditUserAlt1Request.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this EditUserAlt1Request.

        The user's custom Vimeo URL slug.

        :param link: The link of this EditUserAlt1Request.
        :type link: str
        """

        self._link = link

    @property
    def location(self):
        """Gets the location of this EditUserAlt1Request.

        The user's location.

        :return: The location of this EditUserAlt1Request.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EditUserAlt1Request.

        The user's location.

        :param location: The location of this EditUserAlt1Request.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this EditUserAlt1Request.

        The user's display name.

        :return: The name of this EditUserAlt1Request.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditUserAlt1Request.

        The user's display name.

        :param name: The name of this EditUserAlt1Request.
        :type name: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this EditUserAlt1Request.

        The default password for all future videos that this user uploads. To use this field, the `videos.privacy.view` field must be `password`.

        :return: The password of this EditUserAlt1Request.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this EditUserAlt1Request.

        The default password for all future videos that this user uploads. To use this field, the `videos.privacy.view` field must be `password`.

        :param password: The password of this EditUserAlt1Request.
        :type password: str
        """

        self._password = password

    @property
    def videos(self):
        """Gets the videos of this EditUserAlt1Request.


        :return: The videos of this EditUserAlt1Request.
        :rtype: EditUserAlt1RequestVideos
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this EditUserAlt1Request.


        :param videos: The videos of this EditUserAlt1Request.
        :type videos: EditUserAlt1RequestVideos
        """

        self._videos = videos
