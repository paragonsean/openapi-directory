# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserUploadQuotaLifetime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, free: float=None, max: float=None, used: float=None):
        """UserUploadQuotaLifetime - a model defined in OpenAPI

        :param free: The free of this UserUploadQuotaLifetime.
        :param max: The max of this UserUploadQuotaLifetime.
        :param used: The used of this UserUploadQuotaLifetime.
        """
        self.openapi_types = {
            'free': float,
            'max': float,
            'used': float
        }

        self.attribute_map = {
            'free': 'free',
            'max': 'max',
            'used': 'used'
        }

        self._free = free
        self._max = max
        self._used = used

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserUploadQuotaLifetime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The user_upload_quota_lifetime of this UserUploadQuotaLifetime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def free(self):
        """Gets the free of this UserUploadQuotaLifetime.

        The number of bytes remaining in your lifetime maximum.

        :return: The free of this UserUploadQuotaLifetime.
        :rtype: float
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this UserUploadQuotaLifetime.

        The number of bytes remaining in your lifetime maximum.

        :param free: The free of this UserUploadQuotaLifetime.
        :type free: float
        """
        if free is None:
            raise ValueError("Invalid value for `free`, must not be `None`")

        self._free = free

    @property
    def max(self):
        """Gets the max of this UserUploadQuotaLifetime.

        The total number of bytes that you can upload across the lifetime of your account.

        :return: The max of this UserUploadQuotaLifetime.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this UserUploadQuotaLifetime.

        The total number of bytes that you can upload across the lifetime of your account.

        :param max: The max of this UserUploadQuotaLifetime.
        :type max: float
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")

        self._max = max

    @property
    def used(self):
        """Gets the used of this UserUploadQuotaLifetime.

        The number of bytes that you've already uploaded against your lifetime limit.

        :return: The used of this UserUploadQuotaLifetime.
        :rtype: float
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this UserUploadQuotaLifetime.

        The number of bytes that you've already uploaded against your lifetime limit.

        :param used: The used of this UserUploadQuotaLifetime.
        :type used: float
        """
        if used is None:
            raise ValueError("Invalid value for `used`, must not be `None`")

        self._used = used
