# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_metadata_interactions_add_privacy_user import UserMetadataInteractionsAddPrivacyUser
from openapi_server.models.user_metadata_interactions_block import UserMetadataInteractionsBlock
from openapi_server.models.user_metadata_interactions_follow import UserMetadataInteractionsFollow
from openapi_server.models.user_metadata_interactions_report import UserMetadataInteractionsReport
from openapi_server import util


class UserMetadataInteractions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_privacy_user: UserMetadataInteractionsAddPrivacyUser=None, block: UserMetadataInteractionsBlock=None, follow: UserMetadataInteractionsFollow=None, report: UserMetadataInteractionsReport=None):
        """UserMetadataInteractions - a model defined in OpenAPI

        :param add_privacy_user: The add_privacy_user of this UserMetadataInteractions.
        :param block: The block of this UserMetadataInteractions.
        :param follow: The follow of this UserMetadataInteractions.
        :param report: The report of this UserMetadataInteractions.
        """
        self.openapi_types = {
            'add_privacy_user': UserMetadataInteractionsAddPrivacyUser,
            'block': UserMetadataInteractionsBlock,
            'follow': UserMetadataInteractionsFollow,
            'report': UserMetadataInteractionsReport
        }

        self.attribute_map = {
            'add_privacy_user': 'add_privacy_user',
            'block': 'block',
            'follow': 'follow',
            'report': 'report'
        }

        self._add_privacy_user = add_privacy_user
        self._block = block
        self._follow = follow
        self._report = report

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserMetadataInteractions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The user_metadata_interactions of this UserMetadataInteractions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_privacy_user(self):
        """Gets the add_privacy_user of this UserMetadataInteractions.


        :return: The add_privacy_user of this UserMetadataInteractions.
        :rtype: UserMetadataInteractionsAddPrivacyUser
        """
        return self._add_privacy_user

    @add_privacy_user.setter
    def add_privacy_user(self, add_privacy_user):
        """Sets the add_privacy_user of this UserMetadataInteractions.


        :param add_privacy_user: The add_privacy_user of this UserMetadataInteractions.
        :type add_privacy_user: UserMetadataInteractionsAddPrivacyUser
        """

        self._add_privacy_user = add_privacy_user

    @property
    def block(self):
        """Gets the block of this UserMetadataInteractions.


        :return: The block of this UserMetadataInteractions.
        :rtype: UserMetadataInteractionsBlock
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this UserMetadataInteractions.


        :param block: The block of this UserMetadataInteractions.
        :type block: UserMetadataInteractionsBlock
        """
        if block is None:
            raise ValueError("Invalid value for `block`, must not be `None`")

        self._block = block

    @property
    def follow(self):
        """Gets the follow of this UserMetadataInteractions.


        :return: The follow of this UserMetadataInteractions.
        :rtype: UserMetadataInteractionsFollow
        """
        return self._follow

    @follow.setter
    def follow(self, follow):
        """Sets the follow of this UserMetadataInteractions.


        :param follow: The follow of this UserMetadataInteractions.
        :type follow: UserMetadataInteractionsFollow
        """
        if follow is None:
            raise ValueError("Invalid value for `follow`, must not be `None`")

        self._follow = follow

    @property
    def report(self):
        """Gets the report of this UserMetadataInteractions.


        :return: The report of this UserMetadataInteractions.
        :rtype: UserMetadataInteractionsReport
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this UserMetadataInteractions.


        :param report: The report of this UserMetadataInteractions.
        :type report: UserMetadataInteractionsReport
        """
        if report is None:
            raise ValueError("Invalid value for `report`, must not be `None`")

        self._report = report
