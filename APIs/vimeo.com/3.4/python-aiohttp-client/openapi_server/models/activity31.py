# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity31_metadata import Activity31Metadata
from openapi_server.models.category import Category
from openapi_server.models.channel import Channel
from openapi_server.models.group import Group
from openapi_server.models.tag import Tag
from openapi_server.models.user import User
from openapi_server.models.video import Video
from openapi_server import util


class Activity31(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: Category=None, channel: Channel=None, clip: Video=None, group: Group=None, metadata: Activity31Metadata=None, tag: Tag=None, time: str=None, type: str=None, user: User=None):
        """Activity31 - a model defined in OpenAPI

        :param category: The category of this Activity31.
        :param channel: The channel of this Activity31.
        :param clip: The clip of this Activity31.
        :param group: The group of this Activity31.
        :param metadata: The metadata of this Activity31.
        :param tag: The tag of this Activity31.
        :param time: The time of this Activity31.
        :param type: The type of this Activity31.
        :param user: The user of this Activity31.
        """
        self.openapi_types = {
            'category': Category,
            'channel': Channel,
            'clip': Video,
            'group': Group,
            'metadata': Activity31Metadata,
            'tag': Tag,
            'time': str,
            'type': str,
            'user': User
        }

        self.attribute_map = {
            'category': 'category',
            'channel': 'channel',
            'clip': 'clip',
            'group': 'group',
            'metadata': 'metadata',
            'tag': 'tag',
            'time': 'time',
            'type': 'type',
            'user': 'user'
        }

        self._category = category
        self._channel = channel
        self._clip = clip
        self._group = group
        self._metadata = metadata
        self._tag = tag
        self._time = time
        self._type = type
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Activity31':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The activity-3-1 of this Activity31.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Activity31.

        The category that this event occurred for. This will be preset for only \"category\" activity types.

        :return: The category of this Activity31.
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Activity31.

        The category that this event occurred for. This will be preset for only \"category\" activity types.

        :param category: The category of this Activity31.
        :type category: Category
        """

        self._category = category

    @property
    def channel(self):
        """Gets the channel of this Activity31.

        The channel that this event occurred for. This will be present for only \"channel\" activity types.

        :return: The channel of this Activity31.
        :rtype: Channel
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Activity31.

        The channel that this event occurred for. This will be present for only \"channel\" activity types.

        :param channel: The channel of this Activity31.
        :type channel: Channel
        """

        self._channel = channel

    @property
    def clip(self):
        """Gets the clip of this Activity31.

        Video associated with ths activity.

        :return: The clip of this Activity31.
        :rtype: Video
        """
        return self._clip

    @clip.setter
    def clip(self, clip):
        """Sets the clip of this Activity31.

        Video associated with ths activity.

        :param clip: The clip of this Activity31.
        :type clip: Video
        """
        if clip is None:
            raise ValueError("Invalid value for `clip`, must not be `None`")

        self._clip = clip

    @property
    def group(self):
        """Gets the group of this Activity31.

        The group that this event occurred for. This will be present for only \"group\" activity types.

        :return: The group of this Activity31.
        :rtype: Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Activity31.

        The group that this event occurred for. This will be present for only \"group\" activity types.

        :param group: The group of this Activity31.
        :type group: Group
        """

        self._group = group

    @property
    def metadata(self):
        """Gets the metadata of this Activity31.


        :return: The metadata of this Activity31.
        :rtype: Activity31Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Activity31.


        :param metadata: The metadata of this Activity31.
        :type metadata: Activity31Metadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def tag(self):
        """Gets the tag of this Activity31.

        The tag that this event occurred for. This will be present for only \"tag\" activity types.

        :return: The tag of this Activity31.
        :rtype: Tag
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Activity31.

        The tag that this event occurred for. This will be present for only \"tag\" activity types.

        :param tag: The tag of this Activity31.
        :type tag: Tag
        """

        self._tag = tag

    @property
    def time(self):
        """Gets the time of this Activity31.

        Time that the event occurred.

        :return: The time of this Activity31.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Activity31.

        Time that the event occurred.

        :param time: The time of this Activity31.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time

    @property
    def type(self):
        """Gets the type of this Activity31.

        Activity type

        :return: The type of this Activity31.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Activity31.

        Activity type

        :param type: The type of this Activity31.
        :type type: str
        """
        allowed_values = ["appearance", "category", "channel", "facebook_feed", "group", "like", "ondemand", "share", "tag", "twitter_timeline", "upload"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user(self):
        """Gets the user of this Activity31.

        The user that this event occurred for. This will be present for \"like\", \"appearance\", and \"share\" activity types.

        :return: The user of this Activity31.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Activity31.

        The user that this event occurred for. This will be present for \"like\", \"appearance\", and \"share\" activity types.

        :param user: The user of this Activity31.
        :type user: User
        """

        self._user = user
