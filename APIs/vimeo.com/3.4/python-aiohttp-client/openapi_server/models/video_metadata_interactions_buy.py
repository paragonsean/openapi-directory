# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoMetadataInteractionsBuy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, display_price: str=None, download: str=None, drm: bool=None, link: str=None, price: float=None, purchase_time: str=None, stream: str=None, uri: str=None):
        """VideoMetadataInteractionsBuy - a model defined in OpenAPI

        :param currency: The currency of this VideoMetadataInteractionsBuy.
        :param display_price: The display_price of this VideoMetadataInteractionsBuy.
        :param download: The download of this VideoMetadataInteractionsBuy.
        :param drm: The drm of this VideoMetadataInteractionsBuy.
        :param link: The link of this VideoMetadataInteractionsBuy.
        :param price: The price of this VideoMetadataInteractionsBuy.
        :param purchase_time: The purchase_time of this VideoMetadataInteractionsBuy.
        :param stream: The stream of this VideoMetadataInteractionsBuy.
        :param uri: The uri of this VideoMetadataInteractionsBuy.
        """
        self.openapi_types = {
            'currency': str,
            'display_price': str,
            'download': str,
            'drm': bool,
            'link': str,
            'price': float,
            'purchase_time': str,
            'stream': str,
            'uri': str
        }

        self.attribute_map = {
            'currency': 'currency',
            'display_price': 'display_price',
            'download': 'download',
            'drm': 'drm',
            'link': 'link',
            'price': 'price',
            'purchase_time': 'purchase_time',
            'stream': 'stream',
            'uri': 'uri'
        }

        self._currency = currency
        self._display_price = display_price
        self._download = download
        self._drm = drm
        self._link = link
        self._price = price
        self._purchase_time = purchase_time
        self._stream = stream
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoMetadataInteractionsBuy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video_metadata_interactions_buy of this VideoMetadataInteractionsBuy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this VideoMetadataInteractionsBuy.

        The currency code for the current user's region.

        :return: The currency of this VideoMetadataInteractionsBuy.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this VideoMetadataInteractionsBuy.

        The currency code for the current user's region.

        :param currency: The currency of this VideoMetadataInteractionsBuy.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def display_price(self):
        """Gets the display_price of this VideoMetadataInteractionsBuy.

        Formatted price to display to buy an On Demand video.

        :return: The display_price of this VideoMetadataInteractionsBuy.
        :rtype: str
        """
        return self._display_price

    @display_price.setter
    def display_price(self, display_price):
        """Sets the display_price of this VideoMetadataInteractionsBuy.

        Formatted price to display to buy an On Demand video.

        :param display_price: The display_price of this VideoMetadataInteractionsBuy.
        :type display_price: str
        """
        if display_price is None:
            raise ValueError("Invalid value for `display_price`, must not be `None`")

        self._display_price = display_price

    @property
    def download(self):
        """Gets the download of this VideoMetadataInteractionsBuy.

        The user's download access to this On Demand video:  Option descriptions:  * `available` - The video is available for download.  * `purchased` - The user has purchased the video.  * `restricted` - The user isn't permitted to download the video.  * `unavailable` - The video isn't available for download. 

        :return: The download of this VideoMetadataInteractionsBuy.
        :rtype: str
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this VideoMetadataInteractionsBuy.

        The user's download access to this On Demand video:  Option descriptions:  * `available` - The video is available for download.  * `purchased` - The user has purchased the video.  * `restricted` - The user isn't permitted to download the video.  * `unavailable` - The video isn't available for download. 

        :param download: The download of this VideoMetadataInteractionsBuy.
        :type download: str
        """
        allowed_values = ["available", "purchased", "restricted", "unavailable"]  # noqa: E501
        if download not in allowed_values:
            raise ValueError(
                "Invalid value for `download` ({0}), must be one of {1}"
                .format(download, allowed_values)
            )

        self._download = download

    @property
    def drm(self):
        """Gets the drm of this VideoMetadataInteractionsBuy.

        Whether the video has DRM.

        :return: The drm of this VideoMetadataInteractionsBuy.
        :rtype: bool
        """
        return self._drm

    @drm.setter
    def drm(self, drm):
        """Sets the drm of this VideoMetadataInteractionsBuy.

        Whether the video has DRM.

        :param drm: The drm of this VideoMetadataInteractionsBuy.
        :type drm: bool
        """
        if drm is None:
            raise ValueError("Invalid value for `drm`, must not be `None`")

        self._drm = drm

    @property
    def link(self):
        """Gets the link of this VideoMetadataInteractionsBuy.

        The URL to buy the On Demand video on Vimeo.

        :return: The link of this VideoMetadataInteractionsBuy.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this VideoMetadataInteractionsBuy.

        The URL to buy the On Demand video on Vimeo.

        :param link: The link of this VideoMetadataInteractionsBuy.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def price(self):
        """Gets the price of this VideoMetadataInteractionsBuy.

        The numeric value of the price for buying the On Demand video.

        :return: The price of this VideoMetadataInteractionsBuy.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this VideoMetadataInteractionsBuy.

        The numeric value of the price for buying the On Demand video.

        :param price: The price of this VideoMetadataInteractionsBuy.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def purchase_time(self):
        """Gets the purchase_time of this VideoMetadataInteractionsBuy.

        The time in ISO 8601 format when the On Demand video was purchased.

        :return: The purchase_time of this VideoMetadataInteractionsBuy.
        :rtype: str
        """
        return self._purchase_time

    @purchase_time.setter
    def purchase_time(self, purchase_time):
        """Sets the purchase_time of this VideoMetadataInteractionsBuy.

        The time in ISO 8601 format when the On Demand video was purchased.

        :param purchase_time: The purchase_time of this VideoMetadataInteractionsBuy.
        :type purchase_time: str
        """
        if purchase_time is None:
            raise ValueError("Invalid value for `purchase_time`, must not be `None`")

        self._purchase_time = purchase_time

    @property
    def stream(self):
        """Gets the stream of this VideoMetadataInteractionsBuy.

        The user's streaming access to this On Demand video:  Option descriptions:  * `available` - The video is available for streaming.  * `purchased` - The user has purchased the video.  * `restricted` - The user isn't permitted to stream the video.  * `unavailable` - The video isn't available for streaming 

        :return: The stream of this VideoMetadataInteractionsBuy.
        :rtype: str
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this VideoMetadataInteractionsBuy.

        The user's streaming access to this On Demand video:  Option descriptions:  * `available` - The video is available for streaming.  * `purchased` - The user has purchased the video.  * `restricted` - The user isn't permitted to stream the video.  * `unavailable` - The video isn't available for streaming 

        :param stream: The stream of this VideoMetadataInteractionsBuy.
        :type stream: str
        """
        allowed_values = ["available", "purchased", "restricted", "unavailable"]  # noqa: E501
        if stream not in allowed_values:
            raise ValueError(
                "Invalid value for `stream` ({0}), must be one of {1}"
                .format(stream, allowed_values)
            )

        self._stream = stream

    @property
    def uri(self):
        """Gets the uri of this VideoMetadataInteractionsBuy.

        The product URI to purchase the On Demand video.

        :return: The uri of this VideoMetadataInteractionsBuy.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this VideoMetadataInteractionsBuy.

        The product URI to purchase the On Demand video.

        :param uri: The uri of this VideoMetadataInteractionsBuy.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
