# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoUpload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approach: str=None, complete_uri: str=None, form: str=None, link: str=None, redirect_url: str=None, size: float=None, status: str=None, upload_link: str=None):
        """VideoUpload - a model defined in OpenAPI

        :param approach: The approach of this VideoUpload.
        :param complete_uri: The complete_uri of this VideoUpload.
        :param form: The form of this VideoUpload.
        :param link: The link of this VideoUpload.
        :param redirect_url: The redirect_url of this VideoUpload.
        :param size: The size of this VideoUpload.
        :param status: The status of this VideoUpload.
        :param upload_link: The upload_link of this VideoUpload.
        """
        self.openapi_types = {
            'approach': str,
            'complete_uri': str,
            'form': str,
            'link': str,
            'redirect_url': str,
            'size': float,
            'status': str,
            'upload_link': str
        }

        self.attribute_map = {
            'approach': 'approach',
            'complete_uri': 'complete_uri',
            'form': 'form',
            'link': 'link',
            'redirect_url': 'redirect_url',
            'size': 'size',
            'status': 'status',
            'upload_link': 'upload_link'
        }

        self._approach = approach
        self._complete_uri = complete_uri
        self._form = form
        self._link = link
        self._redirect_url = redirect_url
        self._size = size
        self._status = status
        self._upload_link = upload_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoUpload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video_upload of this VideoUpload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approach(self):
        """Gets the approach of this VideoUpload.

        The approach for uploading the video.

        :return: The approach of this VideoUpload.
        :rtype: str
        """
        return self._approach

    @approach.setter
    def approach(self, approach):
        """Sets the approach of this VideoUpload.

        The approach for uploading the video.

        :param approach: The approach of this VideoUpload.
        :type approach: str
        """
        allowed_values = ["post", "pull", "streaming", "tus"]  # noqa: E501
        if approach not in allowed_values:
            raise ValueError(
                "Invalid value for `approach` ({0}), must be one of {1}"
                .format(approach, allowed_values)
            )

        self._approach = approach

    @property
    def complete_uri(self):
        """Gets the complete_uri of this VideoUpload.

        The URI for completing the upload.

        :return: The complete_uri of this VideoUpload.
        :rtype: str
        """
        return self._complete_uri

    @complete_uri.setter
    def complete_uri(self, complete_uri):
        """Sets the complete_uri of this VideoUpload.

        The URI for completing the upload.

        :param complete_uri: The complete_uri of this VideoUpload.
        :type complete_uri: str
        """

        self._complete_uri = complete_uri

    @property
    def form(self):
        """Gets the form of this VideoUpload.

        The HTML form for uploading a video through the post approach.

        :return: The form of this VideoUpload.
        :rtype: str
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this VideoUpload.

        The HTML form for uploading a video through the post approach.

        :param form: The form of this VideoUpload.
        :type form: str
        """

        self._form = form

    @property
    def link(self):
        """Gets the link of this VideoUpload.

        The link of the video to capture through the pull approach.

        :return: The link of this VideoUpload.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this VideoUpload.

        The link of the video to capture through the pull approach.

        :param link: The link of this VideoUpload.
        :type link: str
        """

        self._link = link

    @property
    def redirect_url(self):
        """Gets the redirect_url of this VideoUpload.

        The redirect URL for the upload app.

        :return: The redirect_url of this VideoUpload.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this VideoUpload.

        The redirect URL for the upload app.

        :param redirect_url: The redirect_url of this VideoUpload.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def size(self):
        """Gets the size of this VideoUpload.

        The file size in bytes of the uploaded video.

        :return: The size of this VideoUpload.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this VideoUpload.

        The file size in bytes of the uploaded video.

        :param size: The size of this VideoUpload.
        :type size: float
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this VideoUpload.

        The status code for the availability of the uploaded video:  Option descriptions:  * `complete` - The upload is complete.  * `error` - The upload ended with an error.  * `in_progress` - The upload is underway. 

        :return: The status of this VideoUpload.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VideoUpload.

        The status code for the availability of the uploaded video:  Option descriptions:  * `complete` - The upload is complete.  * `error` - The upload ended with an error.  * `in_progress` - The upload is underway. 

        :param status: The status of this VideoUpload.
        :type status: str
        """
        allowed_values = ["complete", "error", "in_progress"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def upload_link(self):
        """Gets the upload_link of this VideoUpload.

        The link for sending video file data.

        :return: The upload_link of this VideoUpload.
        :rtype: str
        """
        return self._upload_link

    @upload_link.setter
    def upload_link(self, upload_link):
        """Sets the upload_link of this VideoUpload.

        The link for sending video file data.

        :param upload_link: The upload_link of this VideoUpload.
        :type upload_link: str
        """

        self._upload_link = upload_link
