# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.upload_video_alt1_request_embed_buttons import UploadVideoAlt1RequestEmbedButtons
from openapi_server.models.upload_video_alt1_request_embed_logos import UploadVideoAlt1RequestEmbedLogos
from openapi_server.models.upload_video_alt1_request_embed_title import UploadVideoAlt1RequestEmbedTitle
from openapi_server import util


class UploadVideoAlt1RequestEmbed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buttons: UploadVideoAlt1RequestEmbedButtons=None, color: str=None, logos: UploadVideoAlt1RequestEmbedLogos=None, playbar: bool=None, title: UploadVideoAlt1RequestEmbedTitle=None, volume: bool=None):
        """UploadVideoAlt1RequestEmbed - a model defined in OpenAPI

        :param buttons: The buttons of this UploadVideoAlt1RequestEmbed.
        :param color: The color of this UploadVideoAlt1RequestEmbed.
        :param logos: The logos of this UploadVideoAlt1RequestEmbed.
        :param playbar: The playbar of this UploadVideoAlt1RequestEmbed.
        :param title: The title of this UploadVideoAlt1RequestEmbed.
        :param volume: The volume of this UploadVideoAlt1RequestEmbed.
        """
        self.openapi_types = {
            'buttons': UploadVideoAlt1RequestEmbedButtons,
            'color': str,
            'logos': UploadVideoAlt1RequestEmbedLogos,
            'playbar': bool,
            'title': UploadVideoAlt1RequestEmbedTitle,
            'volume': bool
        }

        self.attribute_map = {
            'buttons': 'buttons',
            'color': 'color',
            'logos': 'logos',
            'playbar': 'playbar',
            'title': 'title',
            'volume': 'volume'
        }

        self._buttons = buttons
        self._color = color
        self._logos = logos
        self._playbar = playbar
        self._title = title
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadVideoAlt1RequestEmbed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The upload_video_alt1_request_embed of this UploadVideoAlt1RequestEmbed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buttons(self):
        """Gets the buttons of this UploadVideoAlt1RequestEmbed.


        :return: The buttons of this UploadVideoAlt1RequestEmbed.
        :rtype: UploadVideoAlt1RequestEmbedButtons
        """
        return self._buttons

    @buttons.setter
    def buttons(self, buttons):
        """Sets the buttons of this UploadVideoAlt1RequestEmbed.


        :param buttons: The buttons of this UploadVideoAlt1RequestEmbed.
        :type buttons: UploadVideoAlt1RequestEmbedButtons
        """

        self._buttons = buttons

    @property
    def color(self):
        """Gets the color of this UploadVideoAlt1RequestEmbed.

        The main color of the embed player.

        :return: The color of this UploadVideoAlt1RequestEmbed.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this UploadVideoAlt1RequestEmbed.

        The main color of the embed player.

        :param color: The color of this UploadVideoAlt1RequestEmbed.
        :type color: str
        """

        self._color = color

    @property
    def logos(self):
        """Gets the logos of this UploadVideoAlt1RequestEmbed.


        :return: The logos of this UploadVideoAlt1RequestEmbed.
        :rtype: UploadVideoAlt1RequestEmbedLogos
        """
        return self._logos

    @logos.setter
    def logos(self, logos):
        """Sets the logos of this UploadVideoAlt1RequestEmbed.


        :param logos: The logos of this UploadVideoAlt1RequestEmbed.
        :type logos: UploadVideoAlt1RequestEmbedLogos
        """

        self._logos = logos

    @property
    def playbar(self):
        """Gets the playbar of this UploadVideoAlt1RequestEmbed.

        Show or hide the playbar.

        :return: The playbar of this UploadVideoAlt1RequestEmbed.
        :rtype: bool
        """
        return self._playbar

    @playbar.setter
    def playbar(self, playbar):
        """Sets the playbar of this UploadVideoAlt1RequestEmbed.

        Show or hide the playbar.

        :param playbar: The playbar of this UploadVideoAlt1RequestEmbed.
        :type playbar: bool
        """

        self._playbar = playbar

    @property
    def title(self):
        """Gets the title of this UploadVideoAlt1RequestEmbed.


        :return: The title of this UploadVideoAlt1RequestEmbed.
        :rtype: UploadVideoAlt1RequestEmbedTitle
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UploadVideoAlt1RequestEmbed.


        :param title: The title of this UploadVideoAlt1RequestEmbed.
        :type title: UploadVideoAlt1RequestEmbedTitle
        """

        self._title = title

    @property
    def volume(self):
        """Gets the volume of this UploadVideoAlt1RequestEmbed.

        Show or hide the volume selector.

        :return: The volume of this UploadVideoAlt1RequestEmbed.
        :rtype: bool
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this UploadVideoAlt1RequestEmbed.

        Show or hide the volume selector.

        :param volume: The volume of this UploadVideoAlt1RequestEmbed.
        :type volume: bool
        """

        self._volume = volume
