# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserUploadQuotaPeriodic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, free: float=None, max: float=None, reset_date: str=None, used: float=None):
        """UserUploadQuotaPeriodic - a model defined in OpenAPI

        :param free: The free of this UserUploadQuotaPeriodic.
        :param max: The max of this UserUploadQuotaPeriodic.
        :param reset_date: The reset_date of this UserUploadQuotaPeriodic.
        :param used: The used of this UserUploadQuotaPeriodic.
        """
        self.openapi_types = {
            'free': float,
            'max': float,
            'reset_date': str,
            'used': float
        }

        self.attribute_map = {
            'free': 'free',
            'max': 'max',
            'reset_date': 'reset_date',
            'used': 'used'
        }

        self._free = free
        self._max = max
        self._reset_date = reset_date
        self._used = used

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserUploadQuotaPeriodic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The user_upload_quota_periodic of this UserUploadQuotaPeriodic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def free(self):
        """Gets the free of this UserUploadQuotaPeriodic.

        The number of bytes remaining in your upload quota for the current period.

        :return: The free of this UserUploadQuotaPeriodic.
        :rtype: float
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this UserUploadQuotaPeriodic.

        The number of bytes remaining in your upload quota for the current period.

        :param free: The free of this UserUploadQuotaPeriodic.
        :type free: float
        """
        if free is None:
            raise ValueError("Invalid value for `free`, must not be `None`")

        self._free = free

    @property
    def max(self):
        """Gets the max of this UserUploadQuotaPeriodic.

        The total number of bytes that you can upload per period.

        :return: The max of this UserUploadQuotaPeriodic.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this UserUploadQuotaPeriodic.

        The total number of bytes that you can upload per period.

        :param max: The max of this UserUploadQuotaPeriodic.
        :type max: float
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")

        self._max = max

    @property
    def reset_date(self):
        """Gets the reset_date of this UserUploadQuotaPeriodic.

        The time in ISO 8601 format when your upload quota resets.

        :return: The reset_date of this UserUploadQuotaPeriodic.
        :rtype: str
        """
        return self._reset_date

    @reset_date.setter
    def reset_date(self, reset_date):
        """Sets the reset_date of this UserUploadQuotaPeriodic.

        The time in ISO 8601 format when your upload quota resets.

        :param reset_date: The reset_date of this UserUploadQuotaPeriodic.
        :type reset_date: str
        """
        if reset_date is None:
            raise ValueError("Invalid value for `reset_date`, must not be `None`")

        self._reset_date = reset_date

    @property
    def used(self):
        """Gets the used of this UserUploadQuotaPeriodic.

        The number of bytes that you've already uploaded against your quota in the current period.

        :return: The used of this UserUploadQuotaPeriodic.
        :rtype: float
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this UserUploadQuotaPeriodic.

        The number of bytes that you've already uploaded against your quota in the current period.

        :param used: The used of this UserUploadQuotaPeriodic.
        :type used: float
        """
        if used is None:
            raise ValueError("Invalid value for `used`, must not be `None`")

        self._used = used
