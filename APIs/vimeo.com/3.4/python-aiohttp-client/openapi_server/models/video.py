# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category import Category
from openapi_server.models.embed_settings import EmbedSettings
from openapi_server.models.picture import Picture
from openapi_server.models.project import Project
from openapi_server.models.tag import Tag
from openapi_server.models.user import User
from openapi_server.models.video_context import VideoContext
from openapi_server.models.video_metadata import VideoMetadata
from openapi_server.models.video_privacy import VideoPrivacy
from openapi_server.models.video_spatial import VideoSpatial
from openapi_server.models.video_stats import VideoStats
from openapi_server.models.video_transcode import VideoTranscode
from openapi_server.models.video_upload import VideoUpload
from openapi_server import util


class Video(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List[Category]=None, content_rating: List[str]=None, context: VideoContext=None, created_time: str=None, description: str=None, duration: float=None, embed: EmbedSettings=None, height: float=None, language: str=None, last_user_action_event_date: str=None, license: str=None, link: str=None, metadata: VideoMetadata=None, modified_time: str=None, name: str=None, parent_folder: Project=None, password: str=None, pictures: Picture=None, privacy: VideoPrivacy=None, release_time: str=None, resource_key: str=None, spatial: VideoSpatial=None, stats: VideoStats=None, status: str=None, tags: List[Tag]=None, transcode: VideoTranscode=None, upload: VideoUpload=None, uri: str=None, user: User=None, width: float=None):
        """Video - a model defined in OpenAPI

        :param categories: The categories of this Video.
        :param content_rating: The content_rating of this Video.
        :param context: The context of this Video.
        :param created_time: The created_time of this Video.
        :param description: The description of this Video.
        :param duration: The duration of this Video.
        :param embed: The embed of this Video.
        :param height: The height of this Video.
        :param language: The language of this Video.
        :param last_user_action_event_date: The last_user_action_event_date of this Video.
        :param license: The license of this Video.
        :param link: The link of this Video.
        :param metadata: The metadata of this Video.
        :param modified_time: The modified_time of this Video.
        :param name: The name of this Video.
        :param parent_folder: The parent_folder of this Video.
        :param password: The password of this Video.
        :param pictures: The pictures of this Video.
        :param privacy: The privacy of this Video.
        :param release_time: The release_time of this Video.
        :param resource_key: The resource_key of this Video.
        :param spatial: The spatial of this Video.
        :param stats: The stats of this Video.
        :param status: The status of this Video.
        :param tags: The tags of this Video.
        :param transcode: The transcode of this Video.
        :param upload: The upload of this Video.
        :param uri: The uri of this Video.
        :param user: The user of this Video.
        :param width: The width of this Video.
        """
        self.openapi_types = {
            'categories': List[Category],
            'content_rating': List[str],
            'context': VideoContext,
            'created_time': str,
            'description': str,
            'duration': float,
            'embed': EmbedSettings,
            'height': float,
            'language': str,
            'last_user_action_event_date': str,
            'license': str,
            'link': str,
            'metadata': VideoMetadata,
            'modified_time': str,
            'name': str,
            'parent_folder': Project,
            'password': str,
            'pictures': Picture,
            'privacy': VideoPrivacy,
            'release_time': str,
            'resource_key': str,
            'spatial': VideoSpatial,
            'stats': VideoStats,
            'status': str,
            'tags': List[Tag],
            'transcode': VideoTranscode,
            'upload': VideoUpload,
            'uri': str,
            'user': User,
            'width': float
        }

        self.attribute_map = {
            'categories': 'categories',
            'content_rating': 'content_rating',
            'context': 'context',
            'created_time': 'created_time',
            'description': 'description',
            'duration': 'duration',
            'embed': 'embed',
            'height': 'height',
            'language': 'language',
            'last_user_action_event_date': 'last_user_action_event_date',
            'license': 'license',
            'link': 'link',
            'metadata': 'metadata',
            'modified_time': 'modified_time',
            'name': 'name',
            'parent_folder': 'parent_folder',
            'password': 'password',
            'pictures': 'pictures',
            'privacy': 'privacy',
            'release_time': 'release_time',
            'resource_key': 'resource_key',
            'spatial': 'spatial',
            'stats': 'stats',
            'status': 'status',
            'tags': 'tags',
            'transcode': 'transcode',
            'upload': 'upload',
            'uri': 'uri',
            'user': 'user',
            'width': 'width'
        }

        self._categories = categories
        self._content_rating = content_rating
        self._context = context
        self._created_time = created_time
        self._description = description
        self._duration = duration
        self._embed = embed
        self._height = height
        self._language = language
        self._last_user_action_event_date = last_user_action_event_date
        self._license = license
        self._link = link
        self._metadata = metadata
        self._modified_time = modified_time
        self._name = name
        self._parent_folder = parent_folder
        self._password = password
        self._pictures = pictures
        self._privacy = privacy
        self._release_time = release_time
        self._resource_key = resource_key
        self._spatial = spatial
        self._stats = stats
        self._status = status
        self._tags = tags
        self._transcode = transcode
        self._upload = upload
        self._uri = uri
        self._user = user
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Video':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video of this Video.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this Video.

        The categories to which this video belongs.

        :return: The categories of this Video.
        :rtype: List[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Video.

        The categories to which this video belongs.

        :param categories: The categories of this Video.
        :type categories: List[Category]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def content_rating(self):
        """Gets the content_rating of this Video.

        The content ratings of this video.

        :return: The content_rating of this Video.
        :rtype: List[str]
        """
        return self._content_rating

    @content_rating.setter
    def content_rating(self, content_rating):
        """Sets the content_rating of this Video.

        The content ratings of this video.

        :param content_rating: The content_rating of this Video.
        :type content_rating: List[str]
        """
        if content_rating is None:
            raise ValueError("Invalid value for `content_rating`, must not be `None`")

        self._content_rating = content_rating

    @property
    def context(self):
        """Gets the context of this Video.


        :return: The context of this Video.
        :rtype: VideoContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Video.


        :param context: The context of this Video.
        :type context: VideoContext
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def created_time(self):
        """Gets the created_time of this Video.

        The time in ISO 8601 format when the video was created.

        :return: The created_time of this Video.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Video.

        The time in ISO 8601 format when the video was created.

        :param created_time: The created_time of this Video.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this Video.

        A brief explanation of the video's content.

        :return: The description of this Video.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Video.

        A brief explanation of the video's content.

        :param description: The description of this Video.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def duration(self):
        """Gets the duration of this Video.

        The video's duration in seconds.

        :return: The duration of this Video.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Video.

        The video's duration in seconds.

        :param duration: The duration of this Video.
        :type duration: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def embed(self):
        """Gets the embed of this Video.

        Information about embedding this video.

        :return: The embed of this Video.
        :rtype: EmbedSettings
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this Video.

        Information about embedding this video.

        :param embed: The embed of this Video.
        :type embed: EmbedSettings
        """
        if embed is None:
            raise ValueError("Invalid value for `embed`, must not be `None`")

        self._embed = embed

    @property
    def height(self):
        """Gets the height of this Video.

        The video's height in pixels.

        :return: The height of this Video.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Video.

        The video's height in pixels.

        :param height: The height of this Video.
        :type height: float
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def language(self):
        """Gets the language of this Video.

        The video's primary language.

        :return: The language of this Video.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Video.

        The video's primary language.

        :param language: The language of this Video.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def last_user_action_event_date(self):
        """Gets the last_user_action_event_date of this Video.

        The time in ISO 8601 format when the user last modified the video.

        :return: The last_user_action_event_date of this Video.
        :rtype: str
        """
        return self._last_user_action_event_date

    @last_user_action_event_date.setter
    def last_user_action_event_date(self, last_user_action_event_date):
        """Sets the last_user_action_event_date of this Video.

        The time in ISO 8601 format when the user last modified the video.

        :param last_user_action_event_date: The last_user_action_event_date of this Video.
        :type last_user_action_event_date: str
        """

        self._last_user_action_event_date = last_user_action_event_date

    @property
    def license(self):
        """Gets the license of this Video.

        The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:  Option descriptions:  * `by` - Attribution  * `by-nc` - Attribution Non-Commercial  * `by-nc-nd` - Attribution Non-Commercial No Derivatives  * `by-nc-sa` - Attribution Non-Commercial Share Alike  * `by-nd` - Attribution No Derivatives  * `by-sa` - Attribution Share Alike  * `cc0` - Public Domain Dedication 

        :return: The license of this Video.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Video.

        The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:  Option descriptions:  * `by` - Attribution  * `by-nc` - Attribution Non-Commercial  * `by-nc-nd` - Attribution Non-Commercial No Derivatives  * `by-nc-sa` - Attribution Non-Commercial Share Alike  * `by-nd` - Attribution No Derivatives  * `by-sa` - Attribution Share Alike  * `cc0` - Public Domain Dedication 

        :param license: The license of this Video.
        :type license: str
        """
        allowed_values = ["by", "by-nc", "by-nc-nd", "by-nc-sa", "by-nd", "by-sa", "cc0"]  # noqa: E501
        if license not in allowed_values:
            raise ValueError(
                "Invalid value for `license` ({0}), must be one of {1}"
                .format(license, allowed_values)
            )

        self._license = license

    @property
    def link(self):
        """Gets the link of this Video.

        The link to the video.

        :return: The link of this Video.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Video.

        The link to the video.

        :param link: The link of this Video.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def metadata(self):
        """Gets the metadata of this Video.


        :return: The metadata of this Video.
        :rtype: VideoMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Video.


        :param metadata: The metadata of this Video.
        :type metadata: VideoMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def modified_time(self):
        """Gets the modified_time of this Video.

        The time in ISO 8601 format when the video metadata was last modified.

        :return: The modified_time of this Video.
        :rtype: str
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this Video.

        The time in ISO 8601 format when the video metadata was last modified.

        :param modified_time: The modified_time of this Video.
        :type modified_time: str
        """
        if modified_time is None:
            raise ValueError("Invalid value for `modified_time`, must not be `None`")

        self._modified_time = modified_time

    @property
    def name(self):
        """Gets the name of this Video.

        The video's title.

        :return: The name of this Video.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Video.

        The video's title.

        :param name: The name of this Video.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent_folder(self):
        """Gets the parent_folder of this Video.

        Information about the folder that contains this video.

        :return: The parent_folder of this Video.
        :rtype: Project
        """
        return self._parent_folder

    @parent_folder.setter
    def parent_folder(self, parent_folder):
        """Sets the parent_folder of this Video.

        Information about the folder that contains this video.

        :param parent_folder: The parent_folder of this Video.
        :type parent_folder: Project
        """

        self._parent_folder = parent_folder

    @property
    def password(self):
        """Gets the password of this Video.

        The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the `private` scope.

        :return: The password of this Video.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Video.

        The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the `private` scope.

        :param password: The password of this Video.
        :type password: str
        """

        self._password = password

    @property
    def pictures(self):
        """Gets the pictures of this Video.

        The active picture for this video.

        :return: The pictures of this Video.
        :rtype: Picture
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this Video.

        The active picture for this video.

        :param pictures: The pictures of this Video.
        :type pictures: Picture
        """
        if pictures is None:
            raise ValueError("Invalid value for `pictures`, must not be `None`")

        self._pictures = pictures

    @property
    def privacy(self):
        """Gets the privacy of this Video.


        :return: The privacy of this Video.
        :rtype: VideoPrivacy
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this Video.


        :param privacy: The privacy of this Video.
        :type privacy: VideoPrivacy
        """
        if privacy is None:
            raise ValueError("Invalid value for `privacy`, must not be `None`")

        self._privacy = privacy

    @property
    def release_time(self):
        """Gets the release_time of this Video.

        The time in ISO 8601 format when the video was released.

        :return: The release_time of this Video.
        :rtype: str
        """
        return self._release_time

    @release_time.setter
    def release_time(self, release_time):
        """Sets the release_time of this Video.

        The time in ISO 8601 format when the video was released.

        :param release_time: The release_time of this Video.
        :type release_time: str
        """
        if release_time is None:
            raise ValueError("Invalid value for `release_time`, must not be `None`")

        self._release_time = release_time

    @property
    def resource_key(self):
        """Gets the resource_key of this Video.

        The resource key string of the video.

        :return: The resource_key of this Video.
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this Video.

        The resource key string of the video.

        :param resource_key: The resource_key of this Video.
        :type resource_key: str
        """
        if resource_key is None:
            raise ValueError("Invalid value for `resource_key`, must not be `None`")

        self._resource_key = resource_key

    @property
    def spatial(self):
        """Gets the spatial of this Video.


        :return: The spatial of this Video.
        :rtype: VideoSpatial
        """
        return self._spatial

    @spatial.setter
    def spatial(self, spatial):
        """Sets the spatial of this Video.


        :param spatial: The spatial of this Video.
        :type spatial: VideoSpatial
        """
        if spatial is None:
            raise ValueError("Invalid value for `spatial`, must not be `None`")

        self._spatial = spatial

    @property
    def stats(self):
        """Gets the stats of this Video.


        :return: The stats of this Video.
        :rtype: VideoStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Video.


        :param stats: The stats of this Video.
        :type stats: VideoStats
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")

        self._stats = stats

    @property
    def status(self):
        """Gets the status of this Video.

        The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.  Option descriptions:  * `available` - The video is available.  * `quota_exceeded` - The user's quota is exceeded with this video.  * `total_cap_exceeded` - The user has exceeded their total cap with this video.  * `transcode_starting` - Transcoding is beginning for the video.  * `transcoding` - Transcoding is underway for the video.  * `transcoding_error` - There was an error in transcoding the video.  * `unavailable` - The video is unavailable.  * `uploading` - The video is being uploaded.  * `uploading_error` - There was an error in uploading the video. 

        :return: The status of this Video.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Video.

        The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.  Option descriptions:  * `available` - The video is available.  * `quota_exceeded` - The user's quota is exceeded with this video.  * `total_cap_exceeded` - The user has exceeded their total cap with this video.  * `transcode_starting` - Transcoding is beginning for the video.  * `transcoding` - Transcoding is underway for the video.  * `transcoding_error` - There was an error in transcoding the video.  * `unavailable` - The video is unavailable.  * `uploading` - The video is being uploaded.  * `uploading_error` - There was an error in uploading the video. 

        :param status: The status of this Video.
        :type status: str
        """
        allowed_values = [None,"available", "quota_exceeded", "total_cap_exceeded", "transcode_starting", "transcoding", "transcoding_error", "unavailable", "uploading", "uploading_error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Video.

        An array of all tags assigned to this video.

        :return: The tags of this Video.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Video.

        An array of all tags assigned to this video.

        :param tags: The tags of this Video.
        :type tags: List[Tag]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    @property
    def transcode(self):
        """Gets the transcode of this Video.


        :return: The transcode of this Video.
        :rtype: VideoTranscode
        """
        return self._transcode

    @transcode.setter
    def transcode(self, transcode):
        """Sets the transcode of this Video.


        :param transcode: The transcode of this Video.
        :type transcode: VideoTranscode
        """
        if transcode is None:
            raise ValueError("Invalid value for `transcode`, must not be `None`")

        self._transcode = transcode

    @property
    def upload(self):
        """Gets the upload of this Video.


        :return: The upload of this Video.
        :rtype: VideoUpload
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this Video.


        :param upload: The upload of this Video.
        :type upload: VideoUpload
        """
        if upload is None:
            raise ValueError("Invalid value for `upload`, must not be `None`")

        self._upload = upload

    @property
    def uri(self):
        """Gets the uri of this Video.

        The video's canonical relative URI.

        :return: The uri of this Video.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Video.

        The video's canonical relative URI.

        :param uri: The uri of this Video.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def user(self):
        """Gets the user of this Video.

        The video owner.

        :return: The user of this Video.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Video.

        The video owner.

        :param user: The user of this Video.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def width(self):
        """Gets the width of this Video.

        The video's width in pixels.

        :return: The width of this Video.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Video.

        The video's width in pixels.

        :param width: The width of this Video.
        :type width: float
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
