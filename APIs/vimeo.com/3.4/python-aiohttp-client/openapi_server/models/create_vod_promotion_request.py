# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateVodPromotionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_type: str=None, code: str=None, discount_type: str=None, download: bool=None, end_time: str=None, label: str=None, percent_off: float=None, product_type: str=None, start_time: str=None, stream_period: str=None, total: float=None, type: str=None):
        """CreateVodPromotionRequest - a model defined in OpenAPI

        :param access_type: The access_type of this CreateVodPromotionRequest.
        :param code: The code of this CreateVodPromotionRequest.
        :param discount_type: The discount_type of this CreateVodPromotionRequest.
        :param download: The download of this CreateVodPromotionRequest.
        :param end_time: The end_time of this CreateVodPromotionRequest.
        :param label: The label of this CreateVodPromotionRequest.
        :param percent_off: The percent_off of this CreateVodPromotionRequest.
        :param product_type: The product_type of this CreateVodPromotionRequest.
        :param start_time: The start_time of this CreateVodPromotionRequest.
        :param stream_period: The stream_period of this CreateVodPromotionRequest.
        :param total: The total of this CreateVodPromotionRequest.
        :param type: The type of this CreateVodPromotionRequest.
        """
        self.openapi_types = {
            'access_type': str,
            'code': str,
            'discount_type': str,
            'download': bool,
            'end_time': str,
            'label': str,
            'percent_off': float,
            'product_type': str,
            'start_time': str,
            'stream_period': str,
            'total': float,
            'type': str
        }

        self.attribute_map = {
            'access_type': 'access_type',
            'code': 'code',
            'discount_type': 'discount_type',
            'download': 'download',
            'end_time': 'end_time',
            'label': 'label',
            'percent_off': 'percent_off',
            'product_type': 'product_type',
            'start_time': 'start_time',
            'stream_period': 'stream_period',
            'total': 'total',
            'type': 'type'
        }

        self._access_type = access_type
        self._code = code
        self._discount_type = discount_type
        self._download = download
        self._end_time = end_time
        self._label = label
        self._percent_off = percent_off
        self._product_type = product_type
        self._start_time = start_time
        self._stream_period = stream_period
        self._total = total
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVodPromotionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_vod_promotion_request of this CreateVodPromotionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_type(self):
        """Gets the access_type of this CreateVodPromotionRequest.

        The promotion access type, which is a purchase option that isn't available on the container. VIP promotions always make the content free of charge. If you use this type, you must further define the promotion with the `download` or `stream_period` fields.  Option descriptions:  * `default` - Promotions grant discount on the existing purchase options for an On Demand Container.  * `vip` - Promotions can be used to grant free access to VOD content before it is released, or to offer a purchase option that isn't available on the container. \"vip\" promotions will always make the content free, and must be further defined with the `download` or `stream_period` fields. 

        :return: The access_type of this CreateVodPromotionRequest.
        :rtype: str
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this CreateVodPromotionRequest.

        The promotion access type, which is a purchase option that isn't available on the container. VIP promotions always make the content free of charge. If you use this type, you must further define the promotion with the `download` or `stream_period` fields.  Option descriptions:  * `default` - Promotions grant discount on the existing purchase options for an On Demand Container.  * `vip` - Promotions can be used to grant free access to VOD content before it is released, or to offer a purchase option that isn't available on the container. \"vip\" promotions will always make the content free, and must be further defined with the `download` or `stream_period` fields. 

        :param access_type: The access_type of this CreateVodPromotionRequest.
        :type access_type: str
        """
        allowed_values = ["default", "vip"]  # noqa: E501
        if access_type not in allowed_values:
            raise ValueError(
                "Invalid value for `access_type` ({0}), must be one of {1}"
                .format(access_type, allowed_values)
            )

        self._access_type = access_type

    @property
    def code(self):
        """Gets the code of this CreateVodPromotionRequest.

        The promotion code. This field is ignored for batch promotions.

        :return: The code of this CreateVodPromotionRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CreateVodPromotionRequest.

        The promotion code. This field is ignored for batch promotions.

        :param code: The code of this CreateVodPromotionRequest.
        :type code: str
        """

        self._code = code

    @property
    def discount_type(self):
        """Gets the discount_type of this CreateVodPromotionRequest.

        The type of discount offered by the promo code. When `access_type` is `vip`, the value of this field must be `free`.  Option descriptions:  * `free` - Reduces the price to zero.  * `percent` - Reduces the price by an amount defined in the \"percent_off\" field. 

        :return: The discount_type of this CreateVodPromotionRequest.
        :rtype: str
        """
        return self._discount_type

    @discount_type.setter
    def discount_type(self, discount_type):
        """Sets the discount_type of this CreateVodPromotionRequest.

        The type of discount offered by the promo code. When `access_type` is `vip`, the value of this field must be `free`.  Option descriptions:  * `free` - Reduces the price to zero.  * `percent` - Reduces the price by an amount defined in the \"percent_off\" field. 

        :param discount_type: The discount_type of this CreateVodPromotionRequest.
        :type discount_type: str
        """
        allowed_values = ["free", "percent"]  # noqa: E501
        if discount_type not in allowed_values:
            raise ValueError(
                "Invalid value for `discount_type` ({0}), must be one of {1}"
                .format(discount_type, allowed_values)
            )

        self._discount_type = discount_type

    @property
    def download(self):
        """Gets the download of this CreateVodPromotionRequest.

        Whether the promotion grants download access to VOD content. This is necessary only when not previously defined in the On Demand container or when `access_type` is `vip` or `product_type` is `buy`.

        :return: The download of this CreateVodPromotionRequest.
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this CreateVodPromotionRequest.

        Whether the promotion grants download access to VOD content. This is necessary only when not previously defined in the On Demand container or when `access_type` is `vip` or `product_type` is `buy`.

        :param download: The download of this CreateVodPromotionRequest.
        :type download: bool
        """
        if download is None:
            raise ValueError("Invalid value for `download`, must not be `None`")

        self._download = download

    @property
    def end_time(self):
        """Gets the end_time of this CreateVodPromotionRequest.

        The end of the promotion period. If you don't specify a value, the promotion will never expire.

        :return: The end_time of this CreateVodPromotionRequest.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CreateVodPromotionRequest.

        The end of the promotion period. If you don't specify a value, the promotion will never expire.

        :param end_time: The end_time of this CreateVodPromotionRequest.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def label(self):
        """Gets the label of this CreateVodPromotionRequest.

        The description of a batch promotion. This field is ignored for single promotions.

        :return: The label of this CreateVodPromotionRequest.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CreateVodPromotionRequest.

        The description of a batch promotion. This field is ignored for single promotions.

        :param label: The label of this CreateVodPromotionRequest.
        :type label: str
        """

        self._label = label

    @property
    def percent_off(self):
        """Gets the percent_off of this CreateVodPromotionRequest.

        The percentage of the discount by using this promo code. This field is applicable only when `discount_type` is `percent`.

        :return: The percent_off of this CreateVodPromotionRequest.
        :rtype: float
        """
        return self._percent_off

    @percent_off.setter
    def percent_off(self, percent_off):
        """Sets the percent_off of this CreateVodPromotionRequest.

        The percentage of the discount by using this promo code. This field is applicable only when `discount_type` is `percent`.

        :param percent_off: The percent_off of this CreateVodPromotionRequest.
        :type percent_off: float
        """

        self._percent_off = percent_off

    @property
    def product_type(self):
        """Gets the product_type of this CreateVodPromotionRequest.

        The type of transaction to which the promotion applies. When `access_type` is `default`, the default value is `any`, but the default value is `rent` when `access_type` is `vip`. Also, when `access_type` is `vip`, the only valid product types are `buy` and `rent`.

        :return: The product_type of this CreateVodPromotionRequest.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this CreateVodPromotionRequest.

        The type of transaction to which the promotion applies. When `access_type` is `default`, the default value is `any`, but the default value is `rent` when `access_type` is `vip`. Also, when `access_type` is `vip`, the only valid product types are `buy` and `rent`.

        :param product_type: The product_type of this CreateVodPromotionRequest.
        :type product_type: str
        """
        allowed_values = ["any", "buy", "buy_episode", "rent", "rent_episode", "subscribe"]  # noqa: E501
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def start_time(self):
        """Gets the start_time of this CreateVodPromotionRequest.

        The start of the promotion period. If you don't specify a value, the start time defaults to the time that the promotion was created.

        :return: The start_time of this CreateVodPromotionRequest.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CreateVodPromotionRequest.

        The start of the promotion period. If you don't specify a value, the start time defaults to the time that the promotion was created.

        :param start_time: The start_time of this CreateVodPromotionRequest.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def stream_period(self):
        """Gets the stream_period of this CreateVodPromotionRequest.

        The amount of time that a user has access to the VOD content upon redeeming a promo code. This field is necessary only when not defined in the On Demand container or when creating promotions when `access_type` is `vip` or `product_type` is `rent`.

        :return: The stream_period of this CreateVodPromotionRequest.
        :rtype: str
        """
        return self._stream_period

    @stream_period.setter
    def stream_period(self, stream_period):
        """Sets the stream_period of this CreateVodPromotionRequest.

        The amount of time that a user has access to the VOD content upon redeeming a promo code. This field is necessary only when not defined in the On Demand container or when creating promotions when `access_type` is `vip` or `product_type` is `rent`.

        :param stream_period: The stream_period of this CreateVodPromotionRequest.
        :type stream_period: str
        """
        allowed_values = ["1_week", "1_year", "24_hour", "30_day", "3_month", "48_hour", "6_month", "72_hour"]  # noqa: E501
        if stream_period not in allowed_values:
            raise ValueError(
                "Invalid value for `stream_period` ({0}), must be one of {1}"
                .format(stream_period, allowed_values)
            )

        self._stream_period = stream_period

    @property
    def total(self):
        """Gets the total of this CreateVodPromotionRequest.

        The number of promotions to generate when `type` is `batch`, or the number of uses of the promotion when `type` is `single`.

        :return: The total of this CreateVodPromotionRequest.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CreateVodPromotionRequest.

        The number of promotions to generate when `type` is `batch`, or the number of uses of the promotion when `type` is `single`.

        :param total: The total of this CreateVodPromotionRequest.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def type(self):
        """Gets the type of this CreateVodPromotionRequest.

        The type of promotion. When `access_type` is `vip`, the value for this field must be `batch`.  Option descriptions:  * `batch` - Generates many random promo codes with one use each.  * `single` - Generates one promo code that can be used many times. 

        :return: The type of this CreateVodPromotionRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateVodPromotionRequest.

        The type of promotion. When `access_type` is `vip`, the value for this field must be `batch`.  Option descriptions:  * `batch` - Generates many random promo codes with one use each.  * `single` - Generates one promo code that can be used many times. 

        :param type: The type of this CreateVodPromotionRequest.
        :type type: str
        """
        allowed_values = ["batch", "single"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
