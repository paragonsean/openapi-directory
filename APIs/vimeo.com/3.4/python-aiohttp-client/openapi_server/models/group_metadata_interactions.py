# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_metadata_interactions_join import GroupMetadataInteractionsJoin
from openapi_server import util


class GroupMetadataInteractions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, join: GroupMetadataInteractionsJoin=None):
        """GroupMetadataInteractions - a model defined in OpenAPI

        :param join: The join of this GroupMetadataInteractions.
        """
        self.openapi_types = {
            'join': GroupMetadataInteractionsJoin
        }

        self.attribute_map = {
            'join': 'join'
        }

        self._join = join

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupMetadataInteractions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The group_metadata_interactions of this GroupMetadataInteractions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def join(self):
        """Gets the join of this GroupMetadataInteractions.


        :return: The join of this GroupMetadataInteractions.
        :rtype: GroupMetadataInteractionsJoin
        """
        return self._join

    @join.setter
    def join(self, join):
        """Sets the join of this GroupMetadataInteractions.


        :param join: The join of this GroupMetadataInteractions.
        :type join: GroupMetadataInteractionsJoin
        """
        if join is None:
            raise ValueError("Invalid value for `join`, must not be `None`")

        self._join = join
