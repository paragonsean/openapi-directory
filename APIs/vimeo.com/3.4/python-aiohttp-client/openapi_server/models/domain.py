# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Domain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_hd: bool=None, domain: str=None, uri: str=None):
        """Domain - a model defined in OpenAPI

        :param allow_hd: The allow_hd of this Domain.
        :param domain: The domain of this Domain.
        :param uri: The uri of this Domain.
        """
        self.openapi_types = {
            'allow_hd': bool,
            'domain': str,
            'uri': str
        }

        self.attribute_map = {
            'allow_hd': 'allow_hd',
            'domain': 'domain',
            'uri': 'uri'
        }

        self._allow_hd = allow_hd
        self._domain = domain
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Domain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The domain of this Domain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_hd(self):
        """Gets the allow_hd of this Domain.

        Whether to permit HD embeds on this domain.

        :return: The allow_hd of this Domain.
        :rtype: bool
        """
        return self._allow_hd

    @allow_hd.setter
    def allow_hd(self, allow_hd):
        """Sets the allow_hd of this Domain.

        Whether to permit HD embeds on this domain.

        :param allow_hd: The allow_hd of this Domain.
        :type allow_hd: bool
        """
        if allow_hd is None:
            raise ValueError("Invalid value for `allow_hd`, must not be `None`")

        self._allow_hd = allow_hd

    @property
    def domain(self):
        """Gets the domain of this Domain.

        The domain name.

        :return: The domain of this Domain.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Domain.

        The domain name.

        :param domain: The domain of this Domain.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def uri(self):
        """Gets the uri of this Domain.

        The URI of the domain.

        :return: The uri of this Domain.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Domain.

        The URI of the domain.

        :param uri: The uri of this Domain.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
