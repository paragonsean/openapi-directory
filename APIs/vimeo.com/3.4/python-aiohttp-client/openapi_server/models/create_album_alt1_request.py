# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAlbumAlt1Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand_color: str=None, description: str=None, hide_nav: bool=None, layout: str=None, name: str=None, password: str=None, privacy: str=None, review_mode: bool=None, sort: str=None, theme: str=None):
        """CreateAlbumAlt1Request - a model defined in OpenAPI

        :param brand_color: The brand_color of this CreateAlbumAlt1Request.
        :param description: The description of this CreateAlbumAlt1Request.
        :param hide_nav: The hide_nav of this CreateAlbumAlt1Request.
        :param layout: The layout of this CreateAlbumAlt1Request.
        :param name: The name of this CreateAlbumAlt1Request.
        :param password: The password of this CreateAlbumAlt1Request.
        :param privacy: The privacy of this CreateAlbumAlt1Request.
        :param review_mode: The review_mode of this CreateAlbumAlt1Request.
        :param sort: The sort of this CreateAlbumAlt1Request.
        :param theme: The theme of this CreateAlbumAlt1Request.
        """
        self.openapi_types = {
            'brand_color': str,
            'description': str,
            'hide_nav': bool,
            'layout': str,
            'name': str,
            'password': str,
            'privacy': str,
            'review_mode': bool,
            'sort': str,
            'theme': str
        }

        self.attribute_map = {
            'brand_color': 'brand_color',
            'description': 'description',
            'hide_nav': 'hide_nav',
            'layout': 'layout',
            'name': 'name',
            'password': 'password',
            'privacy': 'privacy',
            'review_mode': 'review_mode',
            'sort': 'sort',
            'theme': 'theme'
        }

        self._brand_color = brand_color
        self._description = description
        self._hide_nav = hide_nav
        self._layout = layout
        self._name = name
        self._password = password
        self._privacy = privacy
        self._review_mode = review_mode
        self._sort = sort
        self._theme = theme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAlbumAlt1Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_album_alt1_request of this CreateAlbumAlt1Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand_color(self):
        """Gets the brand_color of this CreateAlbumAlt1Request.

        The hexadecimal code for the color of the player buttons.

        :return: The brand_color of this CreateAlbumAlt1Request.
        :rtype: str
        """
        return self._brand_color

    @brand_color.setter
    def brand_color(self, brand_color):
        """Sets the brand_color of this CreateAlbumAlt1Request.

        The hexadecimal code for the color of the player buttons.

        :param brand_color: The brand_color of this CreateAlbumAlt1Request.
        :type brand_color: str
        """

        self._brand_color = brand_color

    @property
    def description(self):
        """Gets the description of this CreateAlbumAlt1Request.

        The description of the album.

        :return: The description of this CreateAlbumAlt1Request.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAlbumAlt1Request.

        The description of the album.

        :param description: The description of this CreateAlbumAlt1Request.
        :type description: str
        """

        self._description = description

    @property
    def hide_nav(self):
        """Gets the hide_nav of this CreateAlbumAlt1Request.

        Whether to hide Vimeo navigation when displaying the album.

        :return: The hide_nav of this CreateAlbumAlt1Request.
        :rtype: bool
        """
        return self._hide_nav

    @hide_nav.setter
    def hide_nav(self, hide_nav):
        """Sets the hide_nav of this CreateAlbumAlt1Request.

        Whether to hide Vimeo navigation when displaying the album.

        :param hide_nav: The hide_nav of this CreateAlbumAlt1Request.
        :type hide_nav: bool
        """

        self._hide_nav = hide_nav

    @property
    def layout(self):
        """Gets the layout of this CreateAlbumAlt1Request.

        The type of layout for presenting the album.

        :return: The layout of this CreateAlbumAlt1Request.
        :rtype: str
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this CreateAlbumAlt1Request.

        The type of layout for presenting the album.

        :param layout: The layout of this CreateAlbumAlt1Request.
        :type layout: str
        """
        allowed_values = ["grid", "player"]  # noqa: E501
        if layout not in allowed_values:
            raise ValueError(
                "Invalid value for `layout` ({0}), must be one of {1}"
                .format(layout, allowed_values)
            )

        self._layout = layout

    @property
    def name(self):
        """Gets the name of this CreateAlbumAlt1Request.

        The name of the album.

        :return: The name of this CreateAlbumAlt1Request.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAlbumAlt1Request.

        The name of the album.

        :param name: The name of this CreateAlbumAlt1Request.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def password(self):
        """Gets the password of this CreateAlbumAlt1Request.

        The album's password. Required only if **privacy** is `password`.

        :return: The password of this CreateAlbumAlt1Request.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateAlbumAlt1Request.

        The album's password. Required only if **privacy** is `password`.

        :param password: The password of this CreateAlbumAlt1Request.
        :type password: str
        """

        self._password = password

    @property
    def privacy(self):
        """Gets the privacy of this CreateAlbumAlt1Request.

        The privacy level of the album.

        :return: The privacy of this CreateAlbumAlt1Request.
        :rtype: str
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this CreateAlbumAlt1Request.

        The privacy level of the album.

        :param privacy: The privacy of this CreateAlbumAlt1Request.
        :type privacy: str
        """
        allowed_values = ["anybody", "embed_only", "password"]  # noqa: E501
        if privacy not in allowed_values:
            raise ValueError(
                "Invalid value for `privacy` ({0}), must be one of {1}"
                .format(privacy, allowed_values)
            )

        self._privacy = privacy

    @property
    def review_mode(self):
        """Gets the review_mode of this CreateAlbumAlt1Request.

        Whether album videos should use the review mode URL.

        :return: The review_mode of this CreateAlbumAlt1Request.
        :rtype: bool
        """
        return self._review_mode

    @review_mode.setter
    def review_mode(self, review_mode):
        """Sets the review_mode of this CreateAlbumAlt1Request.

        Whether album videos should use the review mode URL.

        :param review_mode: The review_mode of this CreateAlbumAlt1Request.
        :type review_mode: bool
        """

        self._review_mode = review_mode

    @property
    def sort(self):
        """Gets the sort of this CreateAlbumAlt1Request.

        The default sort order of the album's videos.

        :return: The sort of this CreateAlbumAlt1Request.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this CreateAlbumAlt1Request.

        The default sort order of the album's videos.

        :param sort: The sort of this CreateAlbumAlt1Request.
        :type sort: str
        """
        allowed_values = ["added_first", "added_last", "alphabetical", "arranged", "comments", "likes", "newest", "oldest", "plays"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"
                .format(sort, allowed_values)
            )

        self._sort = sort

    @property
    def theme(self):
        """Gets the theme of this CreateAlbumAlt1Request.

        The color theme of the album.

        :return: The theme of this CreateAlbumAlt1Request.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this CreateAlbumAlt1Request.

        The color theme of the album.

        :param theme: The theme of this CreateAlbumAlt1Request.
        :type theme: str
        """
        allowed_values = ["dark", "standard"]  # noqa: E501
        if theme not in allowed_values:
            raise ValueError(
                "Invalid value for `theme` ({0}), must be one of {1}"
                .format(theme, allowed_values)
            )

        self._theme = theme
