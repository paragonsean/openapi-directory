# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.presets_settings_buttons import PresetsSettingsButtons
from openapi_server.models.presets_settings_logos import PresetsSettingsLogos
from openapi_server.models.presets_settings_outro import PresetsSettingsOutro
from openapi_server import util


class PresetsSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buttons: PresetsSettingsButtons=None, logos: PresetsSettingsLogos=None, outro: PresetsSettingsOutro=None):
        """PresetsSettings - a model defined in OpenAPI

        :param buttons: The buttons of this PresetsSettings.
        :param logos: The logos of this PresetsSettings.
        :param outro: The outro of this PresetsSettings.
        """
        self.openapi_types = {
            'buttons': PresetsSettingsButtons,
            'logos': PresetsSettingsLogos,
            'outro': PresetsSettingsOutro
        }

        self.attribute_map = {
            'buttons': 'buttons',
            'logos': 'logos',
            'outro': 'outro'
        }

        self._buttons = buttons
        self._logos = logos
        self._outro = outro

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PresetsSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The presets_settings of this PresetsSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buttons(self):
        """Gets the buttons of this PresetsSettings.


        :return: The buttons of this PresetsSettings.
        :rtype: PresetsSettingsButtons
        """
        return self._buttons

    @buttons.setter
    def buttons(self, buttons):
        """Sets the buttons of this PresetsSettings.


        :param buttons: The buttons of this PresetsSettings.
        :type buttons: PresetsSettingsButtons
        """
        if buttons is None:
            raise ValueError("Invalid value for `buttons`, must not be `None`")

        self._buttons = buttons

    @property
    def logos(self):
        """Gets the logos of this PresetsSettings.


        :return: The logos of this PresetsSettings.
        :rtype: PresetsSettingsLogos
        """
        return self._logos

    @logos.setter
    def logos(self, logos):
        """Sets the logos of this PresetsSettings.


        :param logos: The logos of this PresetsSettings.
        :type logos: PresetsSettingsLogos
        """
        if logos is None:
            raise ValueError("Invalid value for `logos`, must not be `None`")

        self._logos = logos

    @property
    def outro(self):
        """Gets the outro of this PresetsSettings.


        :return: The outro of this PresetsSettings.
        :rtype: PresetsSettingsOutro
        """
        return self._outro

    @outro.setter
    def outro(self, outro):
        """Sets the outro of this PresetsSettings.


        :param outro: The outro of this PresetsSettings.
        :type outro: PresetsSettingsOutro
        """
        if outro is None:
            raise ValueError("Invalid value for `outro`, must not be `None`")

        self._outro = outro
