# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoPrivacy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add: bool=None, comments: str=None, download: bool=None, embed: str=None, view: str=None):
        """VideoPrivacy - a model defined in OpenAPI

        :param add: The add of this VideoPrivacy.
        :param comments: The comments of this VideoPrivacy.
        :param download: The download of this VideoPrivacy.
        :param embed: The embed of this VideoPrivacy.
        :param view: The view of this VideoPrivacy.
        """
        self.openapi_types = {
            'add': bool,
            'comments': str,
            'download': bool,
            'embed': str,
            'view': str
        }

        self.attribute_map = {
            'add': 'add',
            'comments': 'comments',
            'download': 'download',
            'embed': 'embed',
            'view': 'view'
        }

        self._add = add
        self._comments = comments
        self._download = download
        self._embed = embed
        self._view = view

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoPrivacy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video_privacy of this VideoPrivacy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add(self):
        """Gets the add of this VideoPrivacy.

        Whether the video can be added to collections.

        :return: The add of this VideoPrivacy.
        :rtype: bool
        """
        return self._add

    @add.setter
    def add(self, add):
        """Sets the add of this VideoPrivacy.

        Whether the video can be added to collections.

        :param add: The add of this VideoPrivacy.
        :type add: bool
        """
        if add is None:
            raise ValueError("Invalid value for `add`, must not be `None`")

        self._add = add

    @property
    def comments(self):
        """Gets the comments of this VideoPrivacy.

        Who can comment on the video:  Option descriptions:  * `anybody` - Anyone can comment on the video.  * `contacts` - Only contacts can comment on the video.  * `nobody` - No one can comment on the video. 

        :return: The comments of this VideoPrivacy.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this VideoPrivacy.

        Who can comment on the video:  Option descriptions:  * `anybody` - Anyone can comment on the video.  * `contacts` - Only contacts can comment on the video.  * `nobody` - No one can comment on the video. 

        :param comments: The comments of this VideoPrivacy.
        :type comments: str
        """
        allowed_values = ["anybody", "contacts", "nobody"]  # noqa: E501
        if comments not in allowed_values:
            raise ValueError(
                "Invalid value for `comments` ({0}), must be one of {1}"
                .format(comments, allowed_values)
            )

        self._comments = comments

    @property
    def download(self):
        """Gets the download of this VideoPrivacy.

        The video's download permission setting.

        :return: The download of this VideoPrivacy.
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this VideoPrivacy.

        The video's download permission setting.

        :param download: The download of this VideoPrivacy.
        :type download: bool
        """
        if download is None:
            raise ValueError("Invalid value for `download`, must not be `None`")

        self._download = download

    @property
    def embed(self):
        """Gets the embed of this VideoPrivacy.

        The video's embed permission setting:  Option descriptions:  * `private` - The video is private.  * `public` - Anyone can embed the video. 

        :return: The embed of this VideoPrivacy.
        :rtype: str
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this VideoPrivacy.

        The video's embed permission setting:  Option descriptions:  * `private` - The video is private.  * `public` - Anyone can embed the video. 

        :param embed: The embed of this VideoPrivacy.
        :type embed: str
        """
        allowed_values = ["private", "public"]  # noqa: E501
        if embed not in allowed_values:
            raise ValueError(
                "Invalid value for `embed` ({0}), must be one of {1}"
                .format(embed, allowed_values)
            )

        self._embed = embed

    @property
    def view(self):
        """Gets the view of this VideoPrivacy.

        The general privacy setting for the video:  Option descriptions:  * `anybody` - Anyone can view the video.  * `contacts` - Only contacts can view the video.  * `disable` - Hide from vimeo  * `nobody` - No one besides the owner can view the video.  * `password` - Anyone with the video's password can view the video.  * `unlisted` - Not searchable from vimeo.com  * `users` - Only people with a Vimeo account can view the video. 

        :return: The view of this VideoPrivacy.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this VideoPrivacy.

        The general privacy setting for the video:  Option descriptions:  * `anybody` - Anyone can view the video.  * `contacts` - Only contacts can view the video.  * `disable` - Hide from vimeo  * `nobody` - No one besides the owner can view the video.  * `password` - Anyone with the video's password can view the video.  * `unlisted` - Not searchable from vimeo.com  * `users` - Only people with a Vimeo account can view the video. 

        :param view: The view of this VideoPrivacy.
        :type view: str
        """
        allowed_values = ["anybody", "contacts", "disable", "nobody", "password", "unlisted", "users"]  # noqa: E501
        if view not in allowed_values:
            raise ValueError(
                "Invalid value for `view` ({0}), must be one of {1}"
                .format(view, allowed_values)
            )

        self._view = view
