# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.on_demand_genre import OnDemandGenre
from openapi_server.models.on_demand_page_colors import OnDemandPageColors
from openapi_server.models.on_demand_page_episodes import OnDemandPageEpisodes
from openapi_server.models.on_demand_page_metadata import OnDemandPageMetadata
from openapi_server.models.on_demand_page_preorder import OnDemandPagePreorder
from openapi_server.models.on_demand_page_published import OnDemandPagePublished
from openapi_server.models.on_demand_page_subscription import OnDemandPageSubscription
from openapi_server.models.picture import Picture
from openapi_server.models.user import User
from openapi_server.models.video import Video
from openapi_server import util


class OnDemandPage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background: Picture=None, colors: OnDemandPageColors=None, content_rating: List[str]=None, created_time: str=None, description: str=None, domain_link: str=None, episodes: OnDemandPageEpisodes=None, film: Video=None, genres: List[OnDemandGenre]=None, link: str=None, metadata: OnDemandPageMetadata=None, modified_time: str=None, name: str=None, pictures: Picture=None, preorder: OnDemandPagePreorder=None, published: OnDemandPagePublished=None, rating: float=None, resource_key: str=None, sku: str=None, subscription: OnDemandPageSubscription=None, theme: str=None, thumbnail: Picture=None, trailer: Video=None, type: str=None, uri: str=None, user: User=None):
        """OnDemandPage - a model defined in OpenAPI

        :param background: The background of this OnDemandPage.
        :param colors: The colors of this OnDemandPage.
        :param content_rating: The content_rating of this OnDemandPage.
        :param created_time: The created_time of this OnDemandPage.
        :param description: The description of this OnDemandPage.
        :param domain_link: The domain_link of this OnDemandPage.
        :param episodes: The episodes of this OnDemandPage.
        :param film: The film of this OnDemandPage.
        :param genres: The genres of this OnDemandPage.
        :param link: The link of this OnDemandPage.
        :param metadata: The metadata of this OnDemandPage.
        :param modified_time: The modified_time of this OnDemandPage.
        :param name: The name of this OnDemandPage.
        :param pictures: The pictures of this OnDemandPage.
        :param preorder: The preorder of this OnDemandPage.
        :param published: The published of this OnDemandPage.
        :param rating: The rating of this OnDemandPage.
        :param resource_key: The resource_key of this OnDemandPage.
        :param sku: The sku of this OnDemandPage.
        :param subscription: The subscription of this OnDemandPage.
        :param theme: The theme of this OnDemandPage.
        :param thumbnail: The thumbnail of this OnDemandPage.
        :param trailer: The trailer of this OnDemandPage.
        :param type: The type of this OnDemandPage.
        :param uri: The uri of this OnDemandPage.
        :param user: The user of this OnDemandPage.
        """
        self.openapi_types = {
            'background': Picture,
            'colors': OnDemandPageColors,
            'content_rating': List[str],
            'created_time': str,
            'description': str,
            'domain_link': str,
            'episodes': OnDemandPageEpisodes,
            'film': Video,
            'genres': List[OnDemandGenre],
            'link': str,
            'metadata': OnDemandPageMetadata,
            'modified_time': str,
            'name': str,
            'pictures': Picture,
            'preorder': OnDemandPagePreorder,
            'published': OnDemandPagePublished,
            'rating': float,
            'resource_key': str,
            'sku': str,
            'subscription': OnDemandPageSubscription,
            'theme': str,
            'thumbnail': Picture,
            'trailer': Video,
            'type': str,
            'uri': str,
            'user': User
        }

        self.attribute_map = {
            'background': 'background',
            'colors': 'colors',
            'content_rating': 'content_rating',
            'created_time': 'created_time',
            'description': 'description',
            'domain_link': 'domain_link',
            'episodes': 'episodes',
            'film': 'film',
            'genres': 'genres',
            'link': 'link',
            'metadata': 'metadata',
            'modified_time': 'modified_time',
            'name': 'name',
            'pictures': 'pictures',
            'preorder': 'preorder',
            'published': 'published',
            'rating': 'rating',
            'resource_key': 'resource_key',
            'sku': 'sku',
            'subscription': 'subscription',
            'theme': 'theme',
            'thumbnail': 'thumbnail',
            'trailer': 'trailer',
            'type': 'type',
            'uri': 'uri',
            'user': 'user'
        }

        self._background = background
        self._colors = colors
        self._content_rating = content_rating
        self._created_time = created_time
        self._description = description
        self._domain_link = domain_link
        self._episodes = episodes
        self._film = film
        self._genres = genres
        self._link = link
        self._metadata = metadata
        self._modified_time = modified_time
        self._name = name
        self._pictures = pictures
        self._preorder = preorder
        self._published = published
        self._rating = rating
        self._resource_key = resource_key
        self._sku = sku
        self._subscription = subscription
        self._theme = theme
        self._thumbnail = thumbnail
        self._trailer = trailer
        self._type = type
        self._uri = uri
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnDemandPage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The on-demand-page of this OnDemandPage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background(self):
        """Gets the background of this OnDemandPage.

        The background image for the On Demand page on Vimeo.

        :return: The background of this OnDemandPage.
        :rtype: Picture
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this OnDemandPage.

        The background image for the On Demand page on Vimeo.

        :param background: The background of this OnDemandPage.
        :type background: Picture
        """
        if background is None:
            raise ValueError("Invalid value for `background`, must not be `None`")

        self._background = background

    @property
    def colors(self):
        """Gets the colors of this OnDemandPage.


        :return: The colors of this OnDemandPage.
        :rtype: OnDemandPageColors
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this OnDemandPage.


        :param colors: The colors of this OnDemandPage.
        :type colors: OnDemandPageColors
        """
        if colors is None:
            raise ValueError("Invalid value for `colors`, must not be `None`")

        self._colors = colors

    @property
    def content_rating(self):
        """Gets the content_rating of this OnDemandPage.

        An array of the page's content ratings.

        :return: The content_rating of this OnDemandPage.
        :rtype: List[str]
        """
        return self._content_rating

    @content_rating.setter
    def content_rating(self, content_rating):
        """Sets the content_rating of this OnDemandPage.

        An array of the page's content ratings.

        :param content_rating: The content_rating of this OnDemandPage.
        :type content_rating: List[str]
        """
        if content_rating is None:
            raise ValueError("Invalid value for `content_rating`, must not be `None`")

        self._content_rating = content_rating

    @property
    def created_time(self):
        """Gets the created_time of this OnDemandPage.

        The time in ISO 8601 format when the page was created.

        :return: The created_time of this OnDemandPage.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this OnDemandPage.

        The time in ISO 8601 format when the page was created.

        :param created_time: The created_time of this OnDemandPage.
        :type created_time: str
        """

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this OnDemandPage.

        The description of this On Demand page.

        :return: The description of this OnDemandPage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OnDemandPage.

        The description of this On Demand page.

        :param description: The description of this OnDemandPage.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def domain_link(self):
        """Gets the domain_link of this OnDemandPage.

        The link to this page on its own domain.

        :return: The domain_link of this OnDemandPage.
        :rtype: str
        """
        return self._domain_link

    @domain_link.setter
    def domain_link(self, domain_link):
        """Sets the domain_link of this OnDemandPage.

        The link to this page on its own domain.

        :param domain_link: The domain_link of this OnDemandPage.
        :type domain_link: str
        """
        if domain_link is None:
            raise ValueError("Invalid value for `domain_link`, must not be `None`")

        self._domain_link = domain_link

    @property
    def episodes(self):
        """Gets the episodes of this OnDemandPage.


        :return: The episodes of this OnDemandPage.
        :rtype: OnDemandPageEpisodes
        """
        return self._episodes

    @episodes.setter
    def episodes(self, episodes):
        """Sets the episodes of this OnDemandPage.


        :param episodes: The episodes of this OnDemandPage.
        :type episodes: OnDemandPageEpisodes
        """
        if episodes is None:
            raise ValueError("Invalid value for `episodes`, must not be `None`")

        self._episodes = episodes

    @property
    def film(self):
        """Gets the film of this OnDemandPage.

        This On Demand page's film, if it is a film.

        :return: The film of this OnDemandPage.
        :rtype: Video
        """
        return self._film

    @film.setter
    def film(self, film):
        """Sets the film of this OnDemandPage.

        This On Demand page's film, if it is a film.

        :param film: The film of this OnDemandPage.
        :type film: Video
        """

        self._film = film

    @property
    def genres(self):
        """Gets the genres of this OnDemandPage.

        All the genres assigned to this page.

        :return: The genres of this OnDemandPage.
        :rtype: List[OnDemandGenre]
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this OnDemandPage.

        All the genres assigned to this page.

        :param genres: The genres of this OnDemandPage.
        :type genres: List[OnDemandGenre]
        """
        if genres is None:
            raise ValueError("Invalid value for `genres`, must not be `None`")

        self._genres = genres

    @property
    def link(self):
        """Gets the link of this OnDemandPage.

        The link to the page on Vimeo.

        :return: The link of this OnDemandPage.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this OnDemandPage.

        The link to the page on Vimeo.

        :param link: The link of this OnDemandPage.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def metadata(self):
        """Gets the metadata of this OnDemandPage.


        :return: The metadata of this OnDemandPage.
        :rtype: OnDemandPageMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OnDemandPage.


        :param metadata: The metadata of this OnDemandPage.
        :type metadata: OnDemandPageMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def modified_time(self):
        """Gets the modified_time of this OnDemandPage.

        he time in ISO 8601 format when the page was last modified.

        :return: The modified_time of this OnDemandPage.
        :rtype: str
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this OnDemandPage.

        he time in ISO 8601 format when the page was last modified.

        :param modified_time: The modified_time of this OnDemandPage.
        :type modified_time: str
        """

        self._modified_time = modified_time

    @property
    def name(self):
        """Gets the name of this OnDemandPage.

        A descriptive title of this On Demand page.

        :return: The name of this OnDemandPage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OnDemandPage.

        A descriptive title of this On Demand page.

        :param name: The name of this OnDemandPage.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pictures(self):
        """Gets the pictures of this OnDemandPage.

        The active poster for this On Demand page.

        :return: The pictures of this OnDemandPage.
        :rtype: Picture
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this OnDemandPage.

        The active poster for this On Demand page.

        :param pictures: The pictures of this OnDemandPage.
        :type pictures: Picture
        """
        if pictures is None:
            raise ValueError("Invalid value for `pictures`, must not be `None`")

        self._pictures = pictures

    @property
    def preorder(self):
        """Gets the preorder of this OnDemandPage.


        :return: The preorder of this OnDemandPage.
        :rtype: OnDemandPagePreorder
        """
        return self._preorder

    @preorder.setter
    def preorder(self, preorder):
        """Sets the preorder of this OnDemandPage.


        :param preorder: The preorder of this OnDemandPage.
        :type preorder: OnDemandPagePreorder
        """
        if preorder is None:
            raise ValueError("Invalid value for `preorder`, must not be `None`")

        self._preorder = preorder

    @property
    def published(self):
        """Gets the published of this OnDemandPage.


        :return: The published of this OnDemandPage.
        :rtype: OnDemandPagePublished
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this OnDemandPage.


        :param published: The published of this OnDemandPage.
        :type published: OnDemandPagePublished
        """
        if published is None:
            raise ValueError("Invalid value for `published`, must not be `None`")

        self._published = published

    @property
    def rating(self):
        """Gets the rating of this OnDemandPage.

        The rating of this page.

        :return: The rating of this OnDemandPage.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this OnDemandPage.

        The rating of this page.

        :param rating: The rating of this OnDemandPage.
        :type rating: float
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")

        self._rating = rating

    @property
    def resource_key(self):
        """Gets the resource_key of this OnDemandPage.

        The VOD resource key.

        :return: The resource_key of this OnDemandPage.
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this OnDemandPage.

        The VOD resource key.

        :param resource_key: The resource_key of this OnDemandPage.
        :type resource_key: str
        """
        if resource_key is None:
            raise ValueError("Invalid value for `resource_key`, must not be `None`")

        self._resource_key = resource_key

    @property
    def sku(self):
        """Gets the sku of this OnDemandPage.

        The creator-designated SKU for this On Demand page.

        :return: The sku of this OnDemandPage.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this OnDemandPage.

        The creator-designated SKU for this On Demand page.

        :param sku: The sku of this OnDemandPage.
        :type sku: str
        """

        self._sku = sku

    @property
    def subscription(self):
        """Gets the subscription of this OnDemandPage.


        :return: The subscription of this OnDemandPage.
        :rtype: OnDemandPageSubscription
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this OnDemandPage.


        :param subscription: The subscription of this OnDemandPage.
        :type subscription: OnDemandPageSubscription
        """
        if subscription is None:
            raise ValueError("Invalid value for `subscription`, must not be `None`")

        self._subscription = subscription

    @property
    def theme(self):
        """Gets the theme of this OnDemandPage.

        The graphical theme for this On Demand page.

        :return: The theme of this OnDemandPage.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this OnDemandPage.

        The graphical theme for this On Demand page.

        :param theme: The theme of this OnDemandPage.
        :type theme: str
        """
        if theme is None:
            raise ValueError("Invalid value for `theme`, must not be `None`")

        self._theme = theme

    @property
    def thumbnail(self):
        """Gets the thumbnail of this OnDemandPage.

        The thumbnail image for the On Demand page on Vimeo.

        :return: The thumbnail of this OnDemandPage.
        :rtype: Picture
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this OnDemandPage.

        The thumbnail image for the On Demand page on Vimeo.

        :param thumbnail: The thumbnail of this OnDemandPage.
        :type thumbnail: Picture
        """
        if thumbnail is None:
            raise ValueError("Invalid value for `thumbnail`, must not be `None`")

        self._thumbnail = thumbnail

    @property
    def trailer(self):
        """Gets the trailer of this OnDemandPage.

        The trailer for this On Demand page.

        :return: The trailer of this OnDemandPage.
        :rtype: Video
        """
        return self._trailer

    @trailer.setter
    def trailer(self, trailer):
        """Sets the trailer of this OnDemandPage.

        The trailer for this On Demand page.

        :param trailer: The trailer of this OnDemandPage.
        :type trailer: Video
        """
        if trailer is None:
            raise ValueError("Invalid value for `trailer`, must not be `None`")

        self._trailer = trailer

    @property
    def type(self):
        """Gets the type of this OnDemandPage.

        Whether this On Demand page is for a film or a series.  Option descriptions:  * `film` - The On Demand page is for a film.  * `series` - The On Demand page is for a series. 

        :return: The type of this OnDemandPage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OnDemandPage.

        Whether this On Demand page is for a film or a series.  Option descriptions:  * `film` - The On Demand page is for a film.  * `series` - The On Demand page is for a series. 

        :param type: The type of this OnDemandPage.
        :type type: str
        """
        allowed_values = ["film", "series"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this OnDemandPage.

        The relative URI of the On Demand page.

        :return: The uri of this OnDemandPage.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this OnDemandPage.

        The relative URI of the On Demand page.

        :param uri: The uri of this OnDemandPage.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def user(self):
        """Gets the user of this OnDemandPage.

        The user who created this On Demand page.

        :return: The user of this OnDemandPage.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this OnDemandPage.

        The user who created this On Demand page.

        :param user: The user of this OnDemandPage.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
