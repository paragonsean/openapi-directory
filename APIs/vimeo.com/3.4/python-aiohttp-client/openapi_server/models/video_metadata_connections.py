# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_metadata_connections_comments import VideoMetadataConnectionsComments
from openapi_server.models.video_metadata_connections_credits import VideoMetadataConnectionsCredits
from openapi_server.models.video_metadata_connections_likes import VideoMetadataConnectionsLikes
from openapi_server.models.video_metadata_connections_ondemand import VideoMetadataConnectionsOndemand
from openapi_server.models.video_metadata_connections_pictures import VideoMetadataConnectionsPictures
from openapi_server.models.video_metadata_connections_playback import VideoMetadataConnectionsPlayback
from openapi_server.models.video_metadata_connections_recommendations import VideoMetadataConnectionsRecommendations
from openapi_server.models.video_metadata_connections_related import VideoMetadataConnectionsRelated
from openapi_server.models.video_metadata_connections_season import VideoMetadataConnectionsSeason
from openapi_server.models.video_metadata_connections_texttracks import VideoMetadataConnectionsTexttracks
from openapi_server.models.video_metadata_connections_trailer import VideoMetadataConnectionsTrailer
from openapi_server.models.video_metadata_connections_users_with_access import VideoMetadataConnectionsUsersWithAccess
from openapi_server.models.video_metadata_connections_versions import VideoMetadataConnectionsVersions
from openapi_server import util


class VideoMetadataConnections(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: VideoMetadataConnectionsComments=None, credits: VideoMetadataConnectionsCredits=None, likes: VideoMetadataConnectionsLikes=None, ondemand: VideoMetadataConnectionsOndemand=None, pictures: VideoMetadataConnectionsPictures=None, playback: VideoMetadataConnectionsPlayback=None, recommendations: VideoMetadataConnectionsRecommendations=None, related: VideoMetadataConnectionsRelated=None, season: VideoMetadataConnectionsSeason=None, texttracks: VideoMetadataConnectionsTexttracks=None, trailer: VideoMetadataConnectionsTrailer=None, users_with_access: VideoMetadataConnectionsUsersWithAccess=None, versions: VideoMetadataConnectionsVersions=None):
        """VideoMetadataConnections - a model defined in OpenAPI

        :param comments: The comments of this VideoMetadataConnections.
        :param credits: The credits of this VideoMetadataConnections.
        :param likes: The likes of this VideoMetadataConnections.
        :param ondemand: The ondemand of this VideoMetadataConnections.
        :param pictures: The pictures of this VideoMetadataConnections.
        :param playback: The playback of this VideoMetadataConnections.
        :param recommendations: The recommendations of this VideoMetadataConnections.
        :param related: The related of this VideoMetadataConnections.
        :param season: The season of this VideoMetadataConnections.
        :param texttracks: The texttracks of this VideoMetadataConnections.
        :param trailer: The trailer of this VideoMetadataConnections.
        :param users_with_access: The users_with_access of this VideoMetadataConnections.
        :param versions: The versions of this VideoMetadataConnections.
        """
        self.openapi_types = {
            'comments': VideoMetadataConnectionsComments,
            'credits': VideoMetadataConnectionsCredits,
            'likes': VideoMetadataConnectionsLikes,
            'ondemand': VideoMetadataConnectionsOndemand,
            'pictures': VideoMetadataConnectionsPictures,
            'playback': VideoMetadataConnectionsPlayback,
            'recommendations': VideoMetadataConnectionsRecommendations,
            'related': VideoMetadataConnectionsRelated,
            'season': VideoMetadataConnectionsSeason,
            'texttracks': VideoMetadataConnectionsTexttracks,
            'trailer': VideoMetadataConnectionsTrailer,
            'users_with_access': VideoMetadataConnectionsUsersWithAccess,
            'versions': VideoMetadataConnectionsVersions
        }

        self.attribute_map = {
            'comments': 'comments',
            'credits': 'credits',
            'likes': 'likes',
            'ondemand': 'ondemand',
            'pictures': 'pictures',
            'playback': 'playback',
            'recommendations': 'recommendations',
            'related': 'related',
            'season': 'season',
            'texttracks': 'texttracks',
            'trailer': 'trailer',
            'users_with_access': 'users_with_access',
            'versions': 'versions'
        }

        self._comments = comments
        self._credits = credits
        self._likes = likes
        self._ondemand = ondemand
        self._pictures = pictures
        self._playback = playback
        self._recommendations = recommendations
        self._related = related
        self._season = season
        self._texttracks = texttracks
        self._trailer = trailer
        self._users_with_access = users_with_access
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoMetadataConnections':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video_metadata_connections of this VideoMetadataConnections.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this VideoMetadataConnections.


        :return: The comments of this VideoMetadataConnections.
        :rtype: VideoMetadataConnectionsComments
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this VideoMetadataConnections.


        :param comments: The comments of this VideoMetadataConnections.
        :type comments: VideoMetadataConnectionsComments
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")

        self._comments = comments

    @property
    def credits(self):
        """Gets the credits of this VideoMetadataConnections.


        :return: The credits of this VideoMetadataConnections.
        :rtype: VideoMetadataConnectionsCredits
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this VideoMetadataConnections.


        :param credits: The credits of this VideoMetadataConnections.
        :type credits: VideoMetadataConnectionsCredits
        """
        if credits is None:
            raise ValueError("Invalid value for `credits`, must not be `None`")

        self._credits = credits

    @property
    def likes(self):
        """Gets the likes of this VideoMetadataConnections.


        :return: The likes of this VideoMetadataConnections.
        :rtype: VideoMetadataConnectionsLikes
        """
        return self._likes

    @likes.setter
    def likes(self, likes):
        """Sets the likes of this VideoMetadataConnections.


        :param likes: The likes of this VideoMetadataConnections.
        :type likes: VideoMetadataConnectionsLikes
        """
        if likes is None:
            raise ValueError("Invalid value for `likes`, must not be `None`")

        self._likes = likes

    @property
    def ondemand(self):
        """Gets the ondemand of this VideoMetadataConnections.


        :return: The ondemand of this VideoMetadataConnections.
        :rtype: VideoMetadataConnectionsOndemand
        """
        return self._ondemand

    @ondemand.setter
    def ondemand(self, ondemand):
        """Sets the ondemand of this VideoMetadataConnections.


        :param ondemand: The ondemand of this VideoMetadataConnections.
        :type ondemand: VideoMetadataConnectionsOndemand
        """
        if ondemand is None:
            raise ValueError("Invalid value for `ondemand`, must not be `None`")

        self._ondemand = ondemand

    @property
    def pictures(self):
        """Gets the pictures of this VideoMetadataConnections.


        :return: The pictures of this VideoMetadataConnections.
        :rtype: VideoMetadataConnectionsPictures
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this VideoMetadataConnections.


        :param pictures: The pictures of this VideoMetadataConnections.
        :type pictures: VideoMetadataConnectionsPictures
        """
        if pictures is None:
            raise ValueError("Invalid value for `pictures`, must not be `None`")

        self._pictures = pictures

    @property
    def playback(self):
        """Gets the playback of this VideoMetadataConnections.


        :return: The playback of this VideoMetadataConnections.
        :rtype: VideoMetadataConnectionsPlayback
        """
        return self._playback

    @playback.setter
    def playback(self, playback):
        """Sets the playback of this VideoMetadataConnections.


        :param playback: The playback of this VideoMetadataConnections.
        :type playback: VideoMetadataConnectionsPlayback
        """
        if playback is None:
            raise ValueError("Invalid value for `playback`, must not be `None`")

        self._playback = playback

    @property
    def recommendations(self):
        """Gets the recommendations of this VideoMetadataConnections.


        :return: The recommendations of this VideoMetadataConnections.
        :rtype: VideoMetadataConnectionsRecommendations
        """
        return self._recommendations

    @recommendations.setter
    def recommendations(self, recommendations):
        """Sets the recommendations of this VideoMetadataConnections.


        :param recommendations: The recommendations of this VideoMetadataConnections.
        :type recommendations: VideoMetadataConnectionsRecommendations
        """
        if recommendations is None:
            raise ValueError("Invalid value for `recommendations`, must not be `None`")

        self._recommendations = recommendations

    @property
    def related(self):
        """Gets the related of this VideoMetadataConnections.


        :return: The related of this VideoMetadataConnections.
        :rtype: VideoMetadataConnectionsRelated
        """
        return self._related

    @related.setter
    def related(self, related):
        """Sets the related of this VideoMetadataConnections.


        :param related: The related of this VideoMetadataConnections.
        :type related: VideoMetadataConnectionsRelated
        """
        if related is None:
            raise ValueError("Invalid value for `related`, must not be `None`")

        self._related = related

    @property
    def season(self):
        """Gets the season of this VideoMetadataConnections.


        :return: The season of this VideoMetadataConnections.
        :rtype: VideoMetadataConnectionsSeason
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this VideoMetadataConnections.


        :param season: The season of this VideoMetadataConnections.
        :type season: VideoMetadataConnectionsSeason
        """
        if season is None:
            raise ValueError("Invalid value for `season`, must not be `None`")

        self._season = season

    @property
    def texttracks(self):
        """Gets the texttracks of this VideoMetadataConnections.


        :return: The texttracks of this VideoMetadataConnections.
        :rtype: VideoMetadataConnectionsTexttracks
        """
        return self._texttracks

    @texttracks.setter
    def texttracks(self, texttracks):
        """Sets the texttracks of this VideoMetadataConnections.


        :param texttracks: The texttracks of this VideoMetadataConnections.
        :type texttracks: VideoMetadataConnectionsTexttracks
        """
        if texttracks is None:
            raise ValueError("Invalid value for `texttracks`, must not be `None`")

        self._texttracks = texttracks

    @property
    def trailer(self):
        """Gets the trailer of this VideoMetadataConnections.


        :return: The trailer of this VideoMetadataConnections.
        :rtype: VideoMetadataConnectionsTrailer
        """
        return self._trailer

    @trailer.setter
    def trailer(self, trailer):
        """Sets the trailer of this VideoMetadataConnections.


        :param trailer: The trailer of this VideoMetadataConnections.
        :type trailer: VideoMetadataConnectionsTrailer
        """
        if trailer is None:
            raise ValueError("Invalid value for `trailer`, must not be `None`")

        self._trailer = trailer

    @property
    def users_with_access(self):
        """Gets the users_with_access of this VideoMetadataConnections.


        :return: The users_with_access of this VideoMetadataConnections.
        :rtype: VideoMetadataConnectionsUsersWithAccess
        """
        return self._users_with_access

    @users_with_access.setter
    def users_with_access(self, users_with_access):
        """Sets the users_with_access of this VideoMetadataConnections.


        :param users_with_access: The users_with_access of this VideoMetadataConnections.
        :type users_with_access: VideoMetadataConnectionsUsersWithAccess
        """
        if users_with_access is None:
            raise ValueError("Invalid value for `users_with_access`, must not be `None`")

        self._users_with_access = users_with_access

    @property
    def versions(self):
        """Gets the versions of this VideoMetadataConnections.


        :return: The versions of this VideoMetadataConnections.
        :rtype: VideoMetadataConnectionsVersions
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this VideoMetadataConnections.


        :param versions: The versions of this VideoMetadataConnections.
        :type versions: VideoMetadataConnectionsVersions
        """
        if versions is None:
            raise ValueError("Invalid value for `versions`, must not be `None`")

        self._versions = versions
