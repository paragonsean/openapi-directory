# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupMetadataInteractionsJoin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added: bool=None, added_time: str=None, title: str=None, type: str=None, uri: str=None):
        """GroupMetadataInteractionsJoin - a model defined in OpenAPI

        :param added: The added of this GroupMetadataInteractionsJoin.
        :param added_time: The added_time of this GroupMetadataInteractionsJoin.
        :param title: The title of this GroupMetadataInteractionsJoin.
        :param type: The type of this GroupMetadataInteractionsJoin.
        :param uri: The uri of this GroupMetadataInteractionsJoin.
        """
        self.openapi_types = {
            'added': bool,
            'added_time': str,
            'title': str,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            'added': 'added',
            'added_time': 'added_time',
            'title': 'title',
            'type': 'type',
            'uri': 'uri'
        }

        self._added = added
        self._added_time = added_time
        self._title = title
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupMetadataInteractionsJoin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The group_metadata_interactions_join of this GroupMetadataInteractionsJoin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added(self):
        """Gets the added of this GroupMetadataInteractionsJoin.

        Whether the authenticated user has followed this group. This data requires a bearer token with the `private` scope.

        :return: The added of this GroupMetadataInteractionsJoin.
        :rtype: bool
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this GroupMetadataInteractionsJoin.

        Whether the authenticated user has followed this group. This data requires a bearer token with the `private` scope.

        :param added: The added of this GroupMetadataInteractionsJoin.
        :type added: bool
        """
        if added is None:
            raise ValueError("Invalid value for `added`, must not be `None`")

        self._added = added

    @property
    def added_time(self):
        """Gets the added_time of this GroupMetadataInteractionsJoin.

        The time in ISO 8601 format when the user joined this group. This data requires a bearer token with the `private` scope.

        :return: The added_time of this GroupMetadataInteractionsJoin.
        :rtype: str
        """
        return self._added_time

    @added_time.setter
    def added_time(self, added_time):
        """Sets the added_time of this GroupMetadataInteractionsJoin.

        The time in ISO 8601 format when the user joined this group. This data requires a bearer token with the `private` scope.

        :param added_time: The added_time of this GroupMetadataInteractionsJoin.
        :type added_time: str
        """
        if added_time is None:
            raise ValueError("Invalid value for `added_time`, must not be `None`")

        self._added_time = added_time

    @property
    def title(self):
        """Gets the title of this GroupMetadataInteractionsJoin.

        The user's title, or the null value if not applicable. This data requires a bearer token with the `private` scope.

        :return: The title of this GroupMetadataInteractionsJoin.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GroupMetadataInteractionsJoin.

        The user's title, or the null value if not applicable. This data requires a bearer token with the `private` scope.

        :param title: The title of this GroupMetadataInteractionsJoin.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this GroupMetadataInteractionsJoin.

        Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.  Option descriptions:  * `member` - The authenticated user is a member.  * `moderator` - The authenticated user is a moderator. 

        :return: The type of this GroupMetadataInteractionsJoin.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GroupMetadataInteractionsJoin.

        Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.  Option descriptions:  * `member` - The authenticated user is a member.  * `moderator` - The authenticated user is a moderator. 

        :param type: The type of this GroupMetadataInteractionsJoin.
        :type type: str
        """
        allowed_values = [None,"member", "moderator"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this GroupMetadataInteractionsJoin.

        The URI for following. PUT to this URI to follow, or DELETE to this URI to unfollow. This data requires a bearer token with the `private` scope.

        :return: The uri of this GroupMetadataInteractionsJoin.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this GroupMetadataInteractionsJoin.

        The URI for following. PUT to this URI to follow, or DELETE to this URI to unfollow. This data requires a bearer token with the `private` scope.

        :param uri: The uri of this GroupMetadataInteractionsJoin.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
