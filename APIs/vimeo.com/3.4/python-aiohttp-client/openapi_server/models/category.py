# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category_metadata import CategoryMetadata
from openapi_server.models.category_parent import CategoryParent
from openapi_server.models.category_subcategories_inner import CategorySubcategoriesInner
from openapi_server.models.picture import Picture
from openapi_server import util


class Category(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, icon: Picture=None, last_video_featured_time: str=None, link: str=None, metadata: CategoryMetadata=None, name: str=None, parent: CategoryParent=None, pictures: Picture=None, resource_key: str=None, subcategories: List[CategorySubcategoriesInner]=None, top_level: bool=None, uri: str=None):
        """Category - a model defined in OpenAPI

        :param icon: The icon of this Category.
        :param last_video_featured_time: The last_video_featured_time of this Category.
        :param link: The link of this Category.
        :param metadata: The metadata of this Category.
        :param name: The name of this Category.
        :param parent: The parent of this Category.
        :param pictures: The pictures of this Category.
        :param resource_key: The resource_key of this Category.
        :param subcategories: The subcategories of this Category.
        :param top_level: The top_level of this Category.
        :param uri: The uri of this Category.
        """
        self.openapi_types = {
            'icon': Picture,
            'last_video_featured_time': str,
            'link': str,
            'metadata': CategoryMetadata,
            'name': str,
            'parent': CategoryParent,
            'pictures': Picture,
            'resource_key': str,
            'subcategories': List[CategorySubcategoriesInner],
            'top_level': bool,
            'uri': str
        }

        self.attribute_map = {
            'icon': 'icon',
            'last_video_featured_time': 'last_video_featured_time',
            'link': 'link',
            'metadata': 'metadata',
            'name': 'name',
            'parent': 'parent',
            'pictures': 'pictures',
            'resource_key': 'resource_key',
            'subcategories': 'subcategories',
            'top_level': 'top_level',
            'uri': 'uri'
        }

        self._icon = icon
        self._last_video_featured_time = last_video_featured_time
        self._link = link
        self._metadata = metadata
        self._name = name
        self._parent = parent
        self._pictures = pictures
        self._resource_key = resource_key
        self._subcategories = subcategories
        self._top_level = top_level
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Category':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The category of this Category.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def icon(self):
        """Gets the icon of this Category.

        The active icon for the category.

        :return: The icon of this Category.
        :rtype: Picture
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Category.

        The active icon for the category.

        :param icon: The icon of this Category.
        :type icon: Picture
        """

        self._icon = icon

    @property
    def last_video_featured_time(self):
        """Gets the last_video_featured_time of this Category.

        The last time, in ISO 8601 format, that a video was featured.

        :return: The last_video_featured_time of this Category.
        :rtype: str
        """
        return self._last_video_featured_time

    @last_video_featured_time.setter
    def last_video_featured_time(self, last_video_featured_time):
        """Sets the last_video_featured_time of this Category.

        The last time, in ISO 8601 format, that a video was featured.

        :param last_video_featured_time: The last_video_featured_time of this Category.
        :type last_video_featured_time: str
        """
        if last_video_featured_time is None:
            raise ValueError("Invalid value for `last_video_featured_time`, must not be `None`")

        self._last_video_featured_time = last_video_featured_time

    @property
    def link(self):
        """Gets the link of this Category.

        The URL to access the category in a browser.

        :return: The link of this Category.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Category.

        The URL to access the category in a browser.

        :param link: The link of this Category.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def metadata(self):
        """Gets the metadata of this Category.


        :return: The metadata of this Category.
        :rtype: CategoryMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Category.


        :param metadata: The metadata of this Category.
        :type metadata: CategoryMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Category.

        The display name that identifies the category.

        :return: The name of this Category.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Category.

        The display name that identifies the category.

        :param name: The name of this Category.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this Category.


        :return: The parent of this Category.
        :rtype: CategoryParent
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Category.


        :param parent: The parent of this Category.
        :type parent: CategoryParent
        """
        if parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")

        self._parent = parent

    @property
    def pictures(self):
        """Gets the pictures of this Category.

        The active picture for this category; defaults to vertical color bars.

        :return: The pictures of this Category.
        :rtype: Picture
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this Category.

        The active picture for this category; defaults to vertical color bars.

        :param pictures: The pictures of this Category.
        :type pictures: Picture
        """
        if pictures is None:
            raise ValueError("Invalid value for `pictures`, must not be `None`")

        self._pictures = pictures

    @property
    def resource_key(self):
        """Gets the resource_key of this Category.

        The resource key of the category.

        :return: The resource_key of this Category.
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this Category.

        The resource key of the category.

        :param resource_key: The resource_key of this Category.
        :type resource_key: str
        """
        if resource_key is None:
            raise ValueError("Invalid value for `resource_key`, must not be `None`")

        self._resource_key = resource_key

    @property
    def subcategories(self):
        """Gets the subcategories of this Category.

        All the subcategories that belong to this category, if the current category is a top-level parent.

        :return: The subcategories of this Category.
        :rtype: List[CategorySubcategoriesInner]
        """
        return self._subcategories

    @subcategories.setter
    def subcategories(self, subcategories):
        """Sets the subcategories of this Category.

        All the subcategories that belong to this category, if the current category is a top-level parent.

        :param subcategories: The subcategories of this Category.
        :type subcategories: List[CategorySubcategoriesInner]
        """

        self._subcategories = subcategories

    @property
    def top_level(self):
        """Gets the top_level of this Category.

        Whether the category isn't a subcategory of another category.

        :return: The top_level of this Category.
        :rtype: bool
        """
        return self._top_level

    @top_level.setter
    def top_level(self, top_level):
        """Sets the top_level of this Category.

        Whether the category isn't a subcategory of another category.

        :param top_level: The top_level of this Category.
        :type top_level: bool
        """
        if top_level is None:
            raise ValueError("Invalid value for `top_level`, must not be `None`")

        self._top_level = top_level

    @property
    def uri(self):
        """Gets the uri of this Category.

        The unique identifier to access the category resource.

        :return: The uri of this Category.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Category.

        The unique identifier to access the category resource.

        :param uri: The uri of this Category.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
