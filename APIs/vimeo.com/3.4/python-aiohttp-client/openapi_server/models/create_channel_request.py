# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateChannelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, link: str=None, name: str=None, privacy: str=None):
        """CreateChannelRequest - a model defined in OpenAPI

        :param description: The description of this CreateChannelRequest.
        :param link: The link of this CreateChannelRequest.
        :param name: The name of this CreateChannelRequest.
        :param privacy: The privacy of this CreateChannelRequest.
        """
        self.openapi_types = {
            'description': str,
            'link': str,
            'name': str,
            'privacy': str
        }

        self.attribute_map = {
            'description': 'description',
            'link': 'link',
            'name': 'name',
            'privacy': 'privacy'
        }

        self._description = description
        self._link = link
        self._name = name
        self._privacy = privacy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChannelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_channel_request of this CreateChannelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateChannelRequest.

        The description of the channel.

        :return: The description of this CreateChannelRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateChannelRequest.

        The description of the channel.

        :param description: The description of this CreateChannelRequest.
        :type description: str
        """

        self._description = description

    @property
    def link(self):
        """Gets the link of this CreateChannelRequest.

        The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`.

        :return: The link of this CreateChannelRequest.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this CreateChannelRequest.

        The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`.

        :param link: The link of this CreateChannelRequest.
        :type link: str
        """

        self._link = link

    @property
    def name(self):
        """Gets the name of this CreateChannelRequest.

        The name of the channel.

        :return: The name of this CreateChannelRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateChannelRequest.

        The name of the channel.

        :param name: The name of this CreateChannelRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def privacy(self):
        """Gets the privacy of this CreateChannelRequest.

        The privacy level of the channel.

        :return: The privacy of this CreateChannelRequest.
        :rtype: str
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this CreateChannelRequest.

        The privacy level of the channel.

        :param privacy: The privacy of this CreateChannelRequest.
        :type privacy: str
        """
        allowed_values = ["anybody", "moderators", "user"]  # noqa: E501
        if privacy not in allowed_values:
            raise ValueError(
                "Invalid value for `privacy` ({0}), must be one of {1}"
                .format(privacy, allowed_values)
            )

        self._privacy = privacy
