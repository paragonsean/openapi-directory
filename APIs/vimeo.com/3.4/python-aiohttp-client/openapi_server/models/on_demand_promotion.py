# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.on_demand_promotion_metadata import OnDemandPromotionMetadata
from openapi_server import util


class OnDemandPromotion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_type: str=None, discount_type: str=None, download: bool=None, label: str=None, metadata: OnDemandPromotionMetadata=None, percent_off: float=None, product_type: str=None, stream_period: str=None, total: float=None, type: str=None, uri: str=None):
        """OnDemandPromotion - a model defined in OpenAPI

        :param access_type: The access_type of this OnDemandPromotion.
        :param discount_type: The discount_type of this OnDemandPromotion.
        :param download: The download of this OnDemandPromotion.
        :param label: The label of this OnDemandPromotion.
        :param metadata: The metadata of this OnDemandPromotion.
        :param percent_off: The percent_off of this OnDemandPromotion.
        :param product_type: The product_type of this OnDemandPromotion.
        :param stream_period: The stream_period of this OnDemandPromotion.
        :param total: The total of this OnDemandPromotion.
        :param type: The type of this OnDemandPromotion.
        :param uri: The uri of this OnDemandPromotion.
        """
        self.openapi_types = {
            'access_type': str,
            'discount_type': str,
            'download': bool,
            'label': str,
            'metadata': OnDemandPromotionMetadata,
            'percent_off': float,
            'product_type': str,
            'stream_period': str,
            'total': float,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            'access_type': 'access_type',
            'discount_type': 'discount_type',
            'download': 'download',
            'label': 'label',
            'metadata': 'metadata',
            'percent_off': 'percent_off',
            'product_type': 'product_type',
            'stream_period': 'stream_period',
            'total': 'total',
            'type': 'type',
            'uri': 'uri'
        }

        self._access_type = access_type
        self._discount_type = discount_type
        self._download = download
        self._label = label
        self._metadata = metadata
        self._percent_off = percent_off
        self._product_type = product_type
        self._stream_period = stream_period
        self._total = total
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnDemandPromotion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The on-demand-promotion of this OnDemandPromotion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_type(self):
        """Gets the access_type of this OnDemandPromotion.

        The type of access that this promotion grants:  Option descriptions:  * `default` - Grants discounts on existing product offerings.  * `vip` - Grants free access either to VOD content before it is released or to access types that aren't part of the existing product offerings. 

        :return: The access_type of this OnDemandPromotion.
        :rtype: str
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this OnDemandPromotion.

        The type of access that this promotion grants:  Option descriptions:  * `default` - Grants discounts on existing product offerings.  * `vip` - Grants free access either to VOD content before it is released or to access types that aren't part of the existing product offerings. 

        :param access_type: The access_type of this OnDemandPromotion.
        :type access_type: str
        """
        allowed_values = ["default", "vip"]  # noqa: E501
        if access_type not in allowed_values:
            raise ValueError(
                "Invalid value for `access_type` ({0}), must be one of {1}"
                .format(access_type, allowed_values)
            )

        self._access_type = access_type

    @property
    def discount_type(self):
        """Gets the discount_type of this OnDemandPromotion.

        The type of discount for which this promotion can be used.  Option descriptions:  * `dollars` - The discount is a certain fixed amount.  * `free` - The discount is the full purchase price. VIP access promotions always use this discount type.  * `percent` - The discount is a certain percentage of the full price. 

        :return: The discount_type of this OnDemandPromotion.
        :rtype: str
        """
        return self._discount_type

    @discount_type.setter
    def discount_type(self, discount_type):
        """Sets the discount_type of this OnDemandPromotion.

        The type of discount for which this promotion can be used.  Option descriptions:  * `dollars` - The discount is a certain fixed amount.  * `free` - The discount is the full purchase price. VIP access promotions always use this discount type.  * `percent` - The discount is a certain percentage of the full price. 

        :param discount_type: The discount_type of this OnDemandPromotion.
        :type discount_type: str
        """
        allowed_values = ["dollars", "free", "percent"]  # noqa: E501
        if discount_type not in allowed_values:
            raise ValueError(
                "Invalid value for `discount_type` ({0}), must be one of {1}"
                .format(discount_type, allowed_values)
            )

        self._discount_type = discount_type

    @property
    def download(self):
        """Gets the download of this OnDemandPromotion.

        Whether this promotion grants download access to On Demand content.

        :return: The download of this OnDemandPromotion.
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this OnDemandPromotion.

        Whether this promotion grants download access to On Demand content.

        :param download: The download of this OnDemandPromotion.
        :type download: bool
        """
        if download is None:
            raise ValueError("Invalid value for `download`, must not be `None`")

        self._download = download

    @property
    def label(self):
        """Gets the label of this OnDemandPromotion.

        The prefix string for batch codes, or the null value for single codes.

        :return: The label of this OnDemandPromotion.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this OnDemandPromotion.

        The prefix string for batch codes, or the null value for single codes.

        :param label: The label of this OnDemandPromotion.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def metadata(self):
        """Gets the metadata of this OnDemandPromotion.


        :return: The metadata of this OnDemandPromotion.
        :rtype: OnDemandPromotionMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OnDemandPromotion.


        :param metadata: The metadata of this OnDemandPromotion.
        :type metadata: OnDemandPromotionMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def percent_off(self):
        """Gets the percent_off of this OnDemandPromotion.

        The percentage amount that is deducted from the product price.

        :return: The percent_off of this OnDemandPromotion.
        :rtype: float
        """
        return self._percent_off

    @percent_off.setter
    def percent_off(self, percent_off):
        """Sets the percent_off of this OnDemandPromotion.

        The percentage amount that is deducted from the product price.

        :param percent_off: The percent_off of this OnDemandPromotion.
        :type percent_off: float
        """
        if percent_off is None:
            raise ValueError("Invalid value for `percent_off`, must not be `None`")

        self._percent_off = percent_off

    @property
    def product_type(self):
        """Gets the product_type of this OnDemandPromotion.

        The type of product to which this promotion can be applied. Only `buy` and `rent` are available for the VIP access type:  Option descriptions:  * `any` - The promotion can be applied to any product.  * `buy` - The promotion can be applied to a buyable single video.  * `buy_episode` - The promotion can be applied to a buyable single episode.  * `rent` - The promotion can be applied to a rentable single video.  * `rent_episode` - The promotion can be applied to a rentable single episode.  * `subscribe` - The promotion can be applied to a subscription. 

        :return: The product_type of this OnDemandPromotion.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this OnDemandPromotion.

        The type of product to which this promotion can be applied. Only `buy` and `rent` are available for the VIP access type:  Option descriptions:  * `any` - The promotion can be applied to any product.  * `buy` - The promotion can be applied to a buyable single video.  * `buy_episode` - The promotion can be applied to a buyable single episode.  * `rent` - The promotion can be applied to a rentable single video.  * `rent_episode` - The promotion can be applied to a rentable single episode.  * `subscribe` - The promotion can be applied to a subscription. 

        :param product_type: The product_type of this OnDemandPromotion.
        :type product_type: str
        """
        allowed_values = ["any", "buy", "buy_episode", "rent", "rent_episode", "subscribe"]  # noqa: E501
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def stream_period(self):
        """Gets the stream_period of this OnDemandPromotion.

        The amount of time that the user has access to the VOD content after redeeming a promo code.  Option descriptions:  * `1_week` - Access lasts for one week.  * `1_year` - Access lasts for one year.  * `24_hour` - Access lasts for 24 hours.  * `30_days` - Access lasts for 30 days.  * `3_month` - Access lasts for 3 months.  * `48_hour` - Access lasts for 48 hours.  * `6_month` - Access lasts for 6 months.  * `72_hour` - Access lasts for 72 hours. 

        :return: The stream_period of this OnDemandPromotion.
        :rtype: str
        """
        return self._stream_period

    @stream_period.setter
    def stream_period(self, stream_period):
        """Sets the stream_period of this OnDemandPromotion.

        The amount of time that the user has access to the VOD content after redeeming a promo code.  Option descriptions:  * `1_week` - Access lasts for one week.  * `1_year` - Access lasts for one year.  * `24_hour` - Access lasts for 24 hours.  * `30_days` - Access lasts for 30 days.  * `3_month` - Access lasts for 3 months.  * `48_hour` - Access lasts for 48 hours.  * `6_month` - Access lasts for 6 months.  * `72_hour` - Access lasts for 72 hours. 

        :param stream_period: The stream_period of this OnDemandPromotion.
        :type stream_period: str
        """
        allowed_values = [None,"1_week", "1_year", "24_hour", "30_days", "3_month", "48_hour", "6_month", "72_hour"]  # noqa: E501
        if stream_period not in allowed_values:
            raise ValueError(
                "Invalid value for `stream_period` ({0}), must be one of {1}"
                .format(stream_period, allowed_values)
            )

        self._stream_period = stream_period

    @property
    def total(self):
        """Gets the total of this OnDemandPromotion.

        The total amount of times that this promotion can be used.

        :return: The total of this OnDemandPromotion.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OnDemandPromotion.

        The total amount of times that this promotion can be used.

        :param total: The total of this OnDemandPromotion.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def type(self):
        """Gets the type of this OnDemandPromotion.

        The way in which this promotion can generate promo codes:  Option descriptions:  * `batch` - Provides many unique promo codes that can only be used once each.  * `batch_prefix` - Similar to `batch`, except that all codes have a similar prefix string. This mode is deprecated, yet it may still appear for some users.  * `single` - Provides a single promo code with many uses. 

        :return: The type of this OnDemandPromotion.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OnDemandPromotion.

        The way in which this promotion can generate promo codes:  Option descriptions:  * `batch` - Provides many unique promo codes that can only be used once each.  * `batch_prefix` - Similar to `batch`, except that all codes have a similar prefix string. This mode is deprecated, yet it may still appear for some users.  * `single` - Provides a single promo code with many uses. 

        :param type: The type of this OnDemandPromotion.
        :type type: str
        """
        allowed_values = ["batch", "batch_prefix", "single"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this OnDemandPromotion.

        The promotion's canonical relative URI.

        :return: The uri of this OnDemandPromotion.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this OnDemandPromotion.

        The promotion's canonical relative URI.

        :param uri: The uri of this OnDemandPromotion.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
