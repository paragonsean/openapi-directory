# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server.models.video import Video
from openapi_server import util


class Credit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, role: str=None, uri: str=None, user: User=None, video: Video=None):
        """Credit - a model defined in OpenAPI

        :param name: The name of this Credit.
        :param role: The role of this Credit.
        :param uri: The uri of this Credit.
        :param user: The user of this Credit.
        :param video: The video of this Credit.
        """
        self.openapi_types = {
            'name': str,
            'role': str,
            'uri': str,
            'user': User,
            'video': Video
        }

        self.attribute_map = {
            'name': 'name',
            'role': 'role',
            'uri': 'uri',
            'user': 'user',
            'video': 'video'
        }

        self._name = name
        self._role = role
        self._uri = uri
        self._user = user
        self._video = video

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Credit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The credit of this Credit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Credit.

        The name of the person credited.

        :return: The name of this Credit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Credit.

        The name of the person credited.

        :param name: The name of this Credit.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def role(self):
        """Gets the role of this Credit.

        The character that this person portrayed, or the job that this person performed.

        :return: The role of this Credit.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Credit.

        The character that this person portrayed, or the job that this person performed.

        :param role: The role of this Credit.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def uri(self):
        """Gets the uri of this Credit.

        The unique identifier to access the credits resource.

        :return: The uri of this Credit.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Credit.

        The unique identifier to access the credits resource.

        :param uri: The uri of this Credit.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def user(self):
        """Gets the user of this Credit.

        The Vimeo user associated with this credit.

        :return: The user of this Credit.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Credit.

        The Vimeo user associated with this credit.

        :param user: The user of this Credit.
        :type user: User
        """

        self._user = user

    @property
    def video(self):
        """Gets the video of this Credit.

        The video associated with this credit.

        :return: The video of this Credit.
        :rtype: Video
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this Credit.

        The video associated with this credit.

        :param video: The video of this Credit.
        :type video: Video
        """

        self._video = video
