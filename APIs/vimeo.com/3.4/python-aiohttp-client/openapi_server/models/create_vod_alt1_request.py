# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_vod_alt1_request_buy import CreateVodAlt1RequestBuy
from openapi_server.models.create_vod_alt1_request_episodes import CreateVodAlt1RequestEpisodes
from openapi_server.models.create_vod_alt1_request_rent import CreateVodAlt1RequestRent
from openapi_server.models.create_vod_alt1_request_subscription import CreateVodAlt1RequestSubscription
from openapi_server import util


class CreateVodAlt1Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_currencies: str=None, buy: CreateVodAlt1RequestBuy=None, content_rating: str=None, description: str=None, domain_link: str=None, episodes: CreateVodAlt1RequestEpisodes=None, link: str=None, name: str=None, rent: CreateVodAlt1RequestRent=None, subscription: CreateVodAlt1RequestSubscription=None, type: str=None):
        """CreateVodAlt1Request - a model defined in OpenAPI

        :param accepted_currencies: The accepted_currencies of this CreateVodAlt1Request.
        :param buy: The buy of this CreateVodAlt1Request.
        :param content_rating: The content_rating of this CreateVodAlt1Request.
        :param description: The description of this CreateVodAlt1Request.
        :param domain_link: The domain_link of this CreateVodAlt1Request.
        :param episodes: The episodes of this CreateVodAlt1Request.
        :param link: The link of this CreateVodAlt1Request.
        :param name: The name of this CreateVodAlt1Request.
        :param rent: The rent of this CreateVodAlt1Request.
        :param subscription: The subscription of this CreateVodAlt1Request.
        :param type: The type of this CreateVodAlt1Request.
        """
        self.openapi_types = {
            'accepted_currencies': str,
            'buy': CreateVodAlt1RequestBuy,
            'content_rating': str,
            'description': str,
            'domain_link': str,
            'episodes': CreateVodAlt1RequestEpisodes,
            'link': str,
            'name': str,
            'rent': CreateVodAlt1RequestRent,
            'subscription': CreateVodAlt1RequestSubscription,
            'type': str
        }

        self.attribute_map = {
            'accepted_currencies': 'accepted_currencies',
            'buy': 'buy',
            'content_rating': 'content_rating',
            'description': 'description',
            'domain_link': 'domain_link',
            'episodes': 'episodes',
            'link': 'link',
            'name': 'name',
            'rent': 'rent',
            'subscription': 'subscription',
            'type': 'type'
        }

        self._accepted_currencies = accepted_currencies
        self._buy = buy
        self._content_rating = content_rating
        self._description = description
        self._domain_link = domain_link
        self._episodes = episodes
        self._link = link
        self._name = name
        self._rent = rent
        self._subscription = subscription
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVodAlt1Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_vod_alt1_request of this CreateVodAlt1Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_currencies(self):
        """Gets the accepted_currencies of this CreateVodAlt1Request.

        An array of accepted currencies.  Option descriptions:  * `AUD` - Australian Dollar  * `CAD` - Canadian Dollar  * `CHF` - Swiss Franc  * `DKK` - Danish Krone  * `EUR` - Euro  * `GBP` - British Pound  * `JPY` - Japanese Yen  * `KRW` - South Korean Won  * `NOK` - Norwegian Krone  * `PLN` - Polish Zloty  * `SEK` - Swedish Krona  * `USD` - US Dollar 

        :return: The accepted_currencies of this CreateVodAlt1Request.
        :rtype: str
        """
        return self._accepted_currencies

    @accepted_currencies.setter
    def accepted_currencies(self, accepted_currencies):
        """Sets the accepted_currencies of this CreateVodAlt1Request.

        An array of accepted currencies.  Option descriptions:  * `AUD` - Australian Dollar  * `CAD` - Canadian Dollar  * `CHF` - Swiss Franc  * `DKK` - Danish Krone  * `EUR` - Euro  * `GBP` - British Pound  * `JPY` - Japanese Yen  * `KRW` - South Korean Won  * `NOK` - Norwegian Krone  * `PLN` - Polish Zloty  * `SEK` - Swedish Krona  * `USD` - US Dollar 

        :param accepted_currencies: The accepted_currencies of this CreateVodAlt1Request.
        :type accepted_currencies: str
        """
        allowed_values = ["AUD", "CAD", "CHF", "DKK", "EUR", "GBP", "JPY", "KRW", "NOK", "PLN", "SEK", "USD"]  # noqa: E501
        if accepted_currencies not in allowed_values:
            raise ValueError(
                "Invalid value for `accepted_currencies` ({0}), must be one of {1}"
                .format(accepted_currencies, allowed_values)
            )

        self._accepted_currencies = accepted_currencies

    @property
    def buy(self):
        """Gets the buy of this CreateVodAlt1Request.


        :return: The buy of this CreateVodAlt1Request.
        :rtype: CreateVodAlt1RequestBuy
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this CreateVodAlt1Request.


        :param buy: The buy of this CreateVodAlt1Request.
        :type buy: CreateVodAlt1RequestBuy
        """

        self._buy = buy

    @property
    def content_rating(self):
        """Gets the content_rating of this CreateVodAlt1Request.

        One or more ratings, either as a comma-separated list or as a JSON array depending on the request format.

        :return: The content_rating of this CreateVodAlt1Request.
        :rtype: str
        """
        return self._content_rating

    @content_rating.setter
    def content_rating(self, content_rating):
        """Sets the content_rating of this CreateVodAlt1Request.

        One or more ratings, either as a comma-separated list or as a JSON array depending on the request format.

        :param content_rating: The content_rating of this CreateVodAlt1Request.
        :type content_rating: str
        """
        allowed_values = ["drugs", "language", "nudity", "safe", "unrated", "violence"]  # noqa: E501
        if content_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `content_rating` ({0}), must be one of {1}"
                .format(content_rating, allowed_values)
            )

        self._content_rating = content_rating

    @property
    def description(self):
        """Gets the description of this CreateVodAlt1Request.

        The description of the On Demand page.

        :return: The description of this CreateVodAlt1Request.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateVodAlt1Request.

        The description of the On Demand page.

        :param description: The description of this CreateVodAlt1Request.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def domain_link(self):
        """Gets the domain_link of this CreateVodAlt1Request.

        The custom domain of the On Demand page.

        :return: The domain_link of this CreateVodAlt1Request.
        :rtype: str
        """
        return self._domain_link

    @domain_link.setter
    def domain_link(self, domain_link):
        """Sets the domain_link of this CreateVodAlt1Request.

        The custom domain of the On Demand page.

        :param domain_link: The domain_link of this CreateVodAlt1Request.
        :type domain_link: str
        """

        self._domain_link = domain_link

    @property
    def episodes(self):
        """Gets the episodes of this CreateVodAlt1Request.


        :return: The episodes of this CreateVodAlt1Request.
        :rtype: CreateVodAlt1RequestEpisodes
        """
        return self._episodes

    @episodes.setter
    def episodes(self, episodes):
        """Sets the episodes of this CreateVodAlt1Request.


        :param episodes: The episodes of this CreateVodAlt1Request.
        :type episodes: CreateVodAlt1RequestEpisodes
        """

        self._episodes = episodes

    @property
    def link(self):
        """Gets the link of this CreateVodAlt1Request.

        The custom string to use in this On Demand page's Vimeo URL.

        :return: The link of this CreateVodAlt1Request.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this CreateVodAlt1Request.

        The custom string to use in this On Demand page's Vimeo URL.

        :param link: The link of this CreateVodAlt1Request.
        :type link: str
        """

        self._link = link

    @property
    def name(self):
        """Gets the name of this CreateVodAlt1Request.

        The name of the On Demand page.

        :return: The name of this CreateVodAlt1Request.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateVodAlt1Request.

        The name of the On Demand page.

        :param name: The name of this CreateVodAlt1Request.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rent(self):
        """Gets the rent of this CreateVodAlt1Request.


        :return: The rent of this CreateVodAlt1Request.
        :rtype: CreateVodAlt1RequestRent
        """
        return self._rent

    @rent.setter
    def rent(self, rent):
        """Sets the rent of this CreateVodAlt1Request.


        :param rent: The rent of this CreateVodAlt1Request.
        :type rent: CreateVodAlt1RequestRent
        """

        self._rent = rent

    @property
    def subscription(self):
        """Gets the subscription of this CreateVodAlt1Request.


        :return: The subscription of this CreateVodAlt1Request.
        :rtype: CreateVodAlt1RequestSubscription
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this CreateVodAlt1Request.


        :param subscription: The subscription of this CreateVodAlt1Request.
        :type subscription: CreateVodAlt1RequestSubscription
        """

        self._subscription = subscription

    @property
    def type(self):
        """Gets the type of this CreateVodAlt1Request.

        The type of On Demand page.

        :return: The type of this CreateVodAlt1Request.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateVodAlt1Request.

        The type of On Demand page.

        :param type: The type of this CreateVodAlt1Request.
        :type type: str
        """
        allowed_values = ["film", "series"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
