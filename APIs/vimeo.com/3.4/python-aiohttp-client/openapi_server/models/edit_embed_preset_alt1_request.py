# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EditEmbedPresetAlt1Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, outro: str=None):
        """EditEmbedPresetAlt1Request - a model defined in OpenAPI

        :param outro: The outro of this EditEmbedPresetAlt1Request.
        """
        self.openapi_types = {
            'outro': str
        }

        self.attribute_map = {
            'outro': 'outro'
        }

        self._outro = outro

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditEmbedPresetAlt1Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The edit_embed_preset_alt1_request of this EditEmbedPresetAlt1Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def outro(self):
        """Gets the outro of this EditEmbedPresetAlt1Request.

        Disable the outro.

        :return: The outro of this EditEmbedPresetAlt1Request.
        :rtype: str
        """
        return self._outro

    @outro.setter
    def outro(self, outro):
        """Sets the outro of this EditEmbedPresetAlt1Request.

        Disable the outro.

        :param outro: The outro of this EditEmbedPresetAlt1Request.
        :type outro: str
        """
        allowed_values = ["nothing"]  # noqa: E501
        if outro not in allowed_values:
            raise ValueError(
                "Invalid value for `outro` ({0}), must be one of {1}"
                .format(outro, allowed_values)
            )

        self._outro = outro
