# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_metadata import GroupMetadata
from openapi_server.models.group_privacy import GroupPrivacy
from openapi_server.models.picture import Picture
from openapi_server.models.user import User
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: str=None, description: str=None, link: str=None, metadata: GroupMetadata=None, modified_time: str=None, name: str=None, pictures: Picture=None, privacy: GroupPrivacy=None, resource_key: str=None, uri: str=None, user: User=None):
        """Group - a model defined in OpenAPI

        :param created_time: The created_time of this Group.
        :param description: The description of this Group.
        :param link: The link of this Group.
        :param metadata: The metadata of this Group.
        :param modified_time: The modified_time of this Group.
        :param name: The name of this Group.
        :param pictures: The pictures of this Group.
        :param privacy: The privacy of this Group.
        :param resource_key: The resource_key of this Group.
        :param uri: The uri of this Group.
        :param user: The user of this Group.
        """
        self.openapi_types = {
            'created_time': str,
            'description': str,
            'link': str,
            'metadata': GroupMetadata,
            'modified_time': str,
            'name': str,
            'pictures': Picture,
            'privacy': GroupPrivacy,
            'resource_key': str,
            'uri': str,
            'user': User
        }

        self.attribute_map = {
            'created_time': 'created_time',
            'description': 'description',
            'link': 'link',
            'metadata': 'metadata',
            'modified_time': 'modified_time',
            'name': 'name',
            'pictures': 'pictures',
            'privacy': 'privacy',
            'resource_key': 'resource_key',
            'uri': 'uri',
            'user': 'user'
        }

        self._created_time = created_time
        self._description = description
        self._link = link
        self._metadata = metadata
        self._modified_time = modified_time
        self._name = name
        self._pictures = pictures
        self._privacy = privacy
        self._resource_key = resource_key
        self._uri = uri
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this Group.

        The time in ISO 8601 format when the group was created.

        :return: The created_time of this Group.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Group.

        The time in ISO 8601 format when the group was created.

        :param created_time: The created_time of this Group.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this Group.

        The group's description.

        :return: The description of this Group.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Group.

        The group's description.

        :param description: The description of this Group.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def link(self):
        """Gets the link of this Group.

        The link to the group.

        :return: The link of this Group.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Group.

        The link to the group.

        :param link: The link of this Group.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def metadata(self):
        """Gets the metadata of this Group.


        :return: The metadata of this Group.
        :rtype: GroupMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Group.


        :param metadata: The metadata of this Group.
        :type metadata: GroupMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def modified_time(self):
        """Gets the modified_time of this Group.

        The time in ISO 8601 format when the group was last modified.

        :return: The modified_time of this Group.
        :rtype: str
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this Group.

        The time in ISO 8601 format when the group was last modified.

        :param modified_time: The modified_time of this Group.
        :type modified_time: str
        """
        if modified_time is None:
            raise ValueError("Invalid value for `modified_time`, must not be `None`")

        self._modified_time = modified_time

    @property
    def name(self):
        """Gets the name of this Group.

        The group's display name.

        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        The group's display name.

        :param name: The name of this Group.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pictures(self):
        """Gets the pictures of this Group.

        The active picture for this group.

        :return: The pictures of this Group.
        :rtype: Picture
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this Group.

        The active picture for this group.

        :param pictures: The pictures of this Group.
        :type pictures: Picture
        """
        if pictures is None:
            raise ValueError("Invalid value for `pictures`, must not be `None`")

        self._pictures = pictures

    @property
    def privacy(self):
        """Gets the privacy of this Group.


        :return: The privacy of this Group.
        :rtype: GroupPrivacy
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this Group.


        :param privacy: The privacy of this Group.
        :type privacy: GroupPrivacy
        """
        if privacy is None:
            raise ValueError("Invalid value for `privacy`, must not be `None`")

        self._privacy = privacy

    @property
    def resource_key(self):
        """Gets the resource_key of this Group.

        The resource key of the group.

        :return: The resource_key of this Group.
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this Group.

        The resource key of the group.

        :param resource_key: The resource_key of this Group.
        :type resource_key: str
        """
        if resource_key is None:
            raise ValueError("Invalid value for `resource_key`, must not be `None`")

        self._resource_key = resource_key

    @property
    def uri(self):
        """Gets the uri of this Group.

        The canonical relative URI of this group.

        :return: The uri of this Group.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Group.

        The canonical relative URI of this group.

        :param uri: The uri of this Group.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def user(self):
        """Gets the user of this Group.

        The owner of the group.

        :return: The user of this Group.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Group.

        The owner of the group.

        :param user: The user of this Group.
        :type user: User
        """

        self._user = user
