# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.video_metadata_interactions_buy import VideoMetadataInteractionsBuy
from openapi_server.models.video_metadata_interactions_channel import VideoMetadataInteractionsChannel
from openapi_server.models.video_metadata_interactions_like import VideoMetadataInteractionsLike
from openapi_server.models.video_metadata_interactions_rent import VideoMetadataInteractionsRent
from openapi_server.models.video_metadata_interactions_report import VideoMetadataInteractionsReport
from openapi_server.models.video_metadata_interactions_subscribe import VideoMetadataInteractionsSubscribe
from openapi_server.models.video_metadata_interactions_watched import VideoMetadataInteractionsWatched
from openapi_server.models.video_metadata_interactions_watchlater import VideoMetadataInteractionsWatchlater
from openapi_server import util


class VideoMetadataInteractions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buy: VideoMetadataInteractionsBuy=None, channel: VideoMetadataInteractionsChannel=None, like: VideoMetadataInteractionsLike=None, rent: VideoMetadataInteractionsRent=None, report: VideoMetadataInteractionsReport=None, subscribe: VideoMetadataInteractionsSubscribe=None, watched: VideoMetadataInteractionsWatched=None, watchlater: VideoMetadataInteractionsWatchlater=None):
        """VideoMetadataInteractions - a model defined in OpenAPI

        :param buy: The buy of this VideoMetadataInteractions.
        :param channel: The channel of this VideoMetadataInteractions.
        :param like: The like of this VideoMetadataInteractions.
        :param rent: The rent of this VideoMetadataInteractions.
        :param report: The report of this VideoMetadataInteractions.
        :param subscribe: The subscribe of this VideoMetadataInteractions.
        :param watched: The watched of this VideoMetadataInteractions.
        :param watchlater: The watchlater of this VideoMetadataInteractions.
        """
        self.openapi_types = {
            'buy': VideoMetadataInteractionsBuy,
            'channel': VideoMetadataInteractionsChannel,
            'like': VideoMetadataInteractionsLike,
            'rent': VideoMetadataInteractionsRent,
            'report': VideoMetadataInteractionsReport,
            'subscribe': VideoMetadataInteractionsSubscribe,
            'watched': VideoMetadataInteractionsWatched,
            'watchlater': VideoMetadataInteractionsWatchlater
        }

        self.attribute_map = {
            'buy': 'buy',
            'channel': 'channel',
            'like': 'like',
            'rent': 'rent',
            'report': 'report',
            'subscribe': 'subscribe',
            'watched': 'watched',
            'watchlater': 'watchlater'
        }

        self._buy = buy
        self._channel = channel
        self._like = like
        self._rent = rent
        self._report = report
        self._subscribe = subscribe
        self._watched = watched
        self._watchlater = watchlater

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoMetadataInteractions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video_metadata_interactions of this VideoMetadataInteractions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buy(self):
        """Gets the buy of this VideoMetadataInteractions.


        :return: The buy of this VideoMetadataInteractions.
        :rtype: VideoMetadataInteractionsBuy
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this VideoMetadataInteractions.


        :param buy: The buy of this VideoMetadataInteractions.
        :type buy: VideoMetadataInteractionsBuy
        """
        if buy is None:
            raise ValueError("Invalid value for `buy`, must not be `None`")

        self._buy = buy

    @property
    def channel(self):
        """Gets the channel of this VideoMetadataInteractions.


        :return: The channel of this VideoMetadataInteractions.
        :rtype: VideoMetadataInteractionsChannel
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this VideoMetadataInteractions.


        :param channel: The channel of this VideoMetadataInteractions.
        :type channel: VideoMetadataInteractionsChannel
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def like(self):
        """Gets the like of this VideoMetadataInteractions.


        :return: The like of this VideoMetadataInteractions.
        :rtype: VideoMetadataInteractionsLike
        """
        return self._like

    @like.setter
    def like(self, like):
        """Sets the like of this VideoMetadataInteractions.


        :param like: The like of this VideoMetadataInteractions.
        :type like: VideoMetadataInteractionsLike
        """
        if like is None:
            raise ValueError("Invalid value for `like`, must not be `None`")

        self._like = like

    @property
    def rent(self):
        """Gets the rent of this VideoMetadataInteractions.


        :return: The rent of this VideoMetadataInteractions.
        :rtype: VideoMetadataInteractionsRent
        """
        return self._rent

    @rent.setter
    def rent(self, rent):
        """Sets the rent of this VideoMetadataInteractions.


        :param rent: The rent of this VideoMetadataInteractions.
        :type rent: VideoMetadataInteractionsRent
        """
        if rent is None:
            raise ValueError("Invalid value for `rent`, must not be `None`")

        self._rent = rent

    @property
    def report(self):
        """Gets the report of this VideoMetadataInteractions.


        :return: The report of this VideoMetadataInteractions.
        :rtype: VideoMetadataInteractionsReport
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this VideoMetadataInteractions.


        :param report: The report of this VideoMetadataInteractions.
        :type report: VideoMetadataInteractionsReport
        """
        if report is None:
            raise ValueError("Invalid value for `report`, must not be `None`")

        self._report = report

    @property
    def subscribe(self):
        """Gets the subscribe of this VideoMetadataInteractions.


        :return: The subscribe of this VideoMetadataInteractions.
        :rtype: VideoMetadataInteractionsSubscribe
        """
        return self._subscribe

    @subscribe.setter
    def subscribe(self, subscribe):
        """Sets the subscribe of this VideoMetadataInteractions.


        :param subscribe: The subscribe of this VideoMetadataInteractions.
        :type subscribe: VideoMetadataInteractionsSubscribe
        """

        self._subscribe = subscribe

    @property
    def watched(self):
        """Gets the watched of this VideoMetadataInteractions.


        :return: The watched of this VideoMetadataInteractions.
        :rtype: VideoMetadataInteractionsWatched
        """
        return self._watched

    @watched.setter
    def watched(self, watched):
        """Sets the watched of this VideoMetadataInteractions.


        :param watched: The watched of this VideoMetadataInteractions.
        :type watched: VideoMetadataInteractionsWatched
        """
        if watched is None:
            raise ValueError("Invalid value for `watched`, must not be `None`")

        self._watched = watched

    @property
    def watchlater(self):
        """Gets the watchlater of this VideoMetadataInteractions.


        :return: The watchlater of this VideoMetadataInteractions.
        :rtype: VideoMetadataInteractionsWatchlater
        """
        return self._watchlater

    @watchlater.setter
    def watchlater(self, watchlater):
        """Sets the watchlater of this VideoMetadataInteractions.


        :param watchlater: The watchlater of this VideoMetadataInteractions.
        :type watchlater: VideoMetadataInteractionsWatchlater
        """
        if watchlater is None:
            raise ValueError("Invalid value for `watchlater`, must not be `None`")

        self._watchlater = watchlater
