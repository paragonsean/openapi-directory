# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UploadVideoAlt1RequestUpload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approach: str=None, link: str=None, redirect_url: str=None, size: str=None):
        """UploadVideoAlt1RequestUpload - a model defined in OpenAPI

        :param approach: The approach of this UploadVideoAlt1RequestUpload.
        :param link: The link of this UploadVideoAlt1RequestUpload.
        :param redirect_url: The redirect_url of this UploadVideoAlt1RequestUpload.
        :param size: The size of this UploadVideoAlt1RequestUpload.
        """
        self.openapi_types = {
            'approach': str,
            'link': str,
            'redirect_url': str,
            'size': str
        }

        self.attribute_map = {
            'approach': 'approach',
            'link': 'link',
            'redirect_url': 'redirect_url',
            'size': 'size'
        }

        self._approach = approach
        self._link = link
        self._redirect_url = redirect_url
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadVideoAlt1RequestUpload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The upload_video_alt1_request_upload of this UploadVideoAlt1RequestUpload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approach(self):
        """Gets the approach of this UploadVideoAlt1RequestUpload.

        The upload approach.

        :return: The approach of this UploadVideoAlt1RequestUpload.
        :rtype: str
        """
        return self._approach

    @approach.setter
    def approach(self, approach):
        """Sets the approach of this UploadVideoAlt1RequestUpload.

        The upload approach.

        :param approach: The approach of this UploadVideoAlt1RequestUpload.
        :type approach: str
        """
        allowed_values = ["post", "pull", "streaming", "tus"]  # noqa: E501
        if approach not in allowed_values:
            raise ValueError(
                "Invalid value for `approach` ({0}), must be one of {1}"
                .format(approach, allowed_values)
            )

        self._approach = approach

    @property
    def link(self):
        """Gets the link of this UploadVideoAlt1RequestUpload.

        The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when `approach` is `pull`.

        :return: The link of this UploadVideoAlt1RequestUpload.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this UploadVideoAlt1RequestUpload.

        The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when `approach` is `pull`.

        :param link: The link of this UploadVideoAlt1RequestUpload.
        :type link: str
        """

        self._link = link

    @property
    def redirect_url(self):
        """Gets the redirect_url of this UploadVideoAlt1RequestUpload.

        The app's redirect URL. Use this parameter when `approach` is `post`.

        :return: The redirect_url of this UploadVideoAlt1RequestUpload.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this UploadVideoAlt1RequestUpload.

        The app's redirect URL. Use this parameter when `approach` is `post`.

        :param redirect_url: The redirect_url of this UploadVideoAlt1RequestUpload.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def size(self):
        """Gets the size of this UploadVideoAlt1RequestUpload.

        The size in bytes of the video to upload.

        :return: The size of this UploadVideoAlt1RequestUpload.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this UploadVideoAlt1RequestUpload.

        The size in bytes of the video to upload.

        :param size: The size of this UploadVideoAlt1RequestUpload.
        :type size: str
        """

        self._size = size
