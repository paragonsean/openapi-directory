# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, resource: object=None, resource_type: str=None):
        """VideoContext - a model defined in OpenAPI

        :param action: The action of this VideoContext.
        :param resource: The resource of this VideoContext.
        :param resource_type: The resource_type of this VideoContext.
        """
        self.openapi_types = {
            'action': str,
            'resource': object,
            'resource_type': str
        }

        self.attribute_map = {
            'action': 'action',
            'resource': 'resource',
            'resource_type': 'resource_type'
        }

        self._action = action
        self._resource = resource
        self._resource_type = resource_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The video_context of this VideoContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this VideoContext.

        The contextual action:  Option descriptions:  * `Added to` - An Added To action.  * `Appearance by` - An Appearance By action.  * `Liked by` - A Liked By action.  * `Uploaded by` - An Unloaded By action. 

        :return: The action of this VideoContext.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this VideoContext.

        The contextual action:  Option descriptions:  * `Added to` - An Added To action.  * `Appearance by` - An Appearance By action.  * `Liked by` - A Liked By action.  * `Uploaded by` - An Unloaded By action. 

        :param action: The action of this VideoContext.
        :type action: str
        """
        allowed_values = ["Added to", "Appearance by", "Liked by", "Uploaded by"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def resource(self):
        """Gets the resource of this VideoContext.

        The contextual resource: a user, group, or channel representation, or an object of a tag.

        :return: The resource of this VideoContext.
        :rtype: object
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this VideoContext.

        The contextual resource: a user, group, or channel representation, or an object of a tag.

        :param resource: The resource of this VideoContext.
        :type resource: object
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    @property
    def resource_type(self):
        """Gets the resource_type of this VideoContext.

        The contextual resource type.

        :return: The resource_type of this VideoContext.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this VideoContext.

        The contextual resource type.

        :param resource_type: The resource_type of this VideoContext.
        :type resource_type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type
