# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OnDemandPageMetadataConnectionsMetadataConnectionsVideos(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extra_total: float=None, main_total: float=None, options: List[str]=None, total: float=None, uri: str=None, viewable_total: float=None):
        """OnDemandPageMetadataConnectionsMetadataConnectionsVideos - a model defined in OpenAPI

        :param extra_total: The extra_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :param main_total: The main_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :param options: The options of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :param total: The total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :param uri: The uri of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :param viewable_total: The viewable_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        """
        self.openapi_types = {
            'extra_total': float,
            'main_total': float,
            'options': List[str],
            'total': float,
            'uri': str,
            'viewable_total': float
        }

        self.attribute_map = {
            'extra_total': 'extra_total',
            'main_total': 'main_total',
            'options': 'options',
            'total': 'total',
            'uri': 'uri',
            'viewable_total': 'viewable_total'
        }

        self._extra_total = extra_total
        self._main_total = main_total
        self._options = options
        self._total = total
        self._uri = uri
        self._viewable_total = viewable_total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnDemandPageMetadataConnectionsMetadataConnectionsVideos':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The on_demand_page_metadata_connections_metadata_connections_videos of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extra_total(self):
        """Gets the extra_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.

        The total number of extra videos.

        :return: The extra_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :rtype: float
        """
        return self._extra_total

    @extra_total.setter
    def extra_total(self, extra_total):
        """Sets the extra_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.

        The total number of extra videos.

        :param extra_total: The extra_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :type extra_total: float
        """
        if extra_total is None:
            raise ValueError("Invalid value for `extra_total`, must not be `None`")

        self._extra_total = extra_total

    @property
    def main_total(self):
        """Gets the main_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.

        The total number of main videos.

        :return: The main_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :rtype: float
        """
        return self._main_total

    @main_total.setter
    def main_total(self, main_total):
        """Sets the main_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.

        The total number of main videos.

        :param main_total: The main_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :type main_total: float
        """
        if main_total is None:
            raise ValueError("Invalid value for `main_total`, must not be `None`")

        self._main_total = main_total

    @property
    def options(self):
        """Gets the options of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.

        An array of HTTP methods permitted on this URI.

        :return: The options of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.

        An array of HTTP methods permitted on this URI.

        :param options: The options of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :type options: List[str]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def total(self):
        """Gets the total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.

        The total number of videos on this connection.

        :return: The total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.

        The total number of videos on this connection.

        :param total: The total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def uri(self):
        """Gets the uri of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.

        The API URI that resolves to the connection data.

        :return: The uri of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.

        The API URI that resolves to the connection data.

        :param uri: The uri of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def viewable_total(self):
        """Gets the viewable_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.

        The total number of viewable videos.

        :return: The viewable_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :rtype: float
        """
        return self._viewable_total

    @viewable_total.setter
    def viewable_total(self, viewable_total):
        """Sets the viewable_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.

        The total number of viewable videos.

        :param viewable_total: The viewable_total of this OnDemandPageMetadataConnectionsMetadataConnectionsVideos.
        :type viewable_total: float
        """
        if viewable_total is None:
            raise ValueError("Invalid value for `viewable_total`, must not be `None`")

        self._viewable_total = viewable_total
