# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelMetadataInteractionsFollow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added: bool=None, added_time: str=None, type: str=None, uri: str=None):
        """ChannelMetadataInteractionsFollow - a model defined in OpenAPI

        :param added: The added of this ChannelMetadataInteractionsFollow.
        :param added_time: The added_time of this ChannelMetadataInteractionsFollow.
        :param type: The type of this ChannelMetadataInteractionsFollow.
        :param uri: The uri of this ChannelMetadataInteractionsFollow.
        """
        self.openapi_types = {
            'added': bool,
            'added_time': str,
            'type': str,
            'uri': str
        }

        self.attribute_map = {
            'added': 'added',
            'added_time': 'added_time',
            'type': 'type',
            'uri': 'uri'
        }

        self._added = added
        self._added_time = added_time
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelMetadataInteractionsFollow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channel_metadata_interactions_follow of this ChannelMetadataInteractionsFollow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added(self):
        """Gets the added of this ChannelMetadataInteractionsFollow.

        Whether the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.

        :return: The added of this ChannelMetadataInteractionsFollow.
        :rtype: bool
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this ChannelMetadataInteractionsFollow.

        Whether the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.

        :param added: The added of this ChannelMetadataInteractionsFollow.
        :type added: bool
        """
        if added is None:
            raise ValueError("Invalid value for `added`, must not be `None`")

        self._added = added

    @property
    def added_time(self):
        """Gets the added_time of this ChannelMetadataInteractionsFollow.

        The time in ISO 8601 format that the user followed this channel, or the null value if the user hasn't followed the channel. This data requires a bearer token with the `private` scope.

        :return: The added_time of this ChannelMetadataInteractionsFollow.
        :rtype: str
        """
        return self._added_time

    @added_time.setter
    def added_time(self, added_time):
        """Sets the added_time of this ChannelMetadataInteractionsFollow.

        The time in ISO 8601 format that the user followed this channel, or the null value if the user hasn't followed the channel. This data requires a bearer token with the `private` scope.

        :param added_time: The added_time of this ChannelMetadataInteractionsFollow.
        :type added_time: str
        """
        if added_time is None:
            raise ValueError("Invalid value for `added_time`, must not be `None`")

        self._added_time = added_time

    @property
    def type(self):
        """Gets the type of this ChannelMetadataInteractionsFollow.

        Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.  Option descriptions:  * `moderator` - The authenticated user is a moderator.  * `subscriber` - The authenticated user is a subscriber. 

        :return: The type of this ChannelMetadataInteractionsFollow.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChannelMetadataInteractionsFollow.

        Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.  Option descriptions:  * `moderator` - The authenticated user is a moderator.  * `subscriber` - The authenticated user is a subscriber. 

        :param type: The type of this ChannelMetadataInteractionsFollow.
        :type type: str
        """
        allowed_values = [None,"moderator", "subscriber"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this ChannelMetadataInteractionsFollow.

        The URI for following or unfollowing this channel. PUT to this URI to follow the channel, or DELETE to this URI to unfollow the channel. This data requires a bearer token with the `private` scope.

        :return: The uri of this ChannelMetadataInteractionsFollow.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ChannelMetadataInteractionsFollow.

        The URI for following or unfollowing this channel. PUT to this URI to follow the channel, or DELETE to this URI to unfollow the channel. This data requires a bearer token with the `private` scope.

        :param uri: The uri of this ChannelMetadataInteractionsFollow.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
