# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PresetsSettingsLogos(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom: bool=None, sticky_custom: bool=None, vimeo: bool=None):
        """PresetsSettingsLogos - a model defined in OpenAPI

        :param custom: The custom of this PresetsSettingsLogos.
        :param sticky_custom: The sticky_custom of this PresetsSettingsLogos.
        :param vimeo: The vimeo of this PresetsSettingsLogos.
        """
        self.openapi_types = {
            'custom': bool,
            'sticky_custom': bool,
            'vimeo': bool
        }

        self.attribute_map = {
            'custom': 'custom',
            'sticky_custom': 'sticky_custom',
            'vimeo': 'vimeo'
        }

        self._custom = custom
        self._sticky_custom = sticky_custom
        self._vimeo = vimeo

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PresetsSettingsLogos':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The presets_settings_logos of this PresetsSettingsLogos.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom(self):
        """Gets the custom of this PresetsSettingsLogos.

        Whether the preset includes custom logo settings.

        :return: The custom of this PresetsSettingsLogos.
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this PresetsSettingsLogos.

        Whether the preset includes custom logo settings.

        :param custom: The custom of this PresetsSettingsLogos.
        :type custom: bool
        """
        if custom is None:
            raise ValueError("Invalid value for `custom`, must not be `None`")

        self._custom = custom

    @property
    def sticky_custom(self):
        """Gets the sticky_custom of this PresetsSettingsLogos.

        Whether the present includes sticky custom logo settings.

        :return: The sticky_custom of this PresetsSettingsLogos.
        :rtype: bool
        """
        return self._sticky_custom

    @sticky_custom.setter
    def sticky_custom(self, sticky_custom):
        """Sets the sticky_custom of this PresetsSettingsLogos.

        Whether the present includes sticky custom logo settings.

        :param sticky_custom: The sticky_custom of this PresetsSettingsLogos.
        :type sticky_custom: bool
        """
        if sticky_custom is None:
            raise ValueError("Invalid value for `sticky_custom`, must not be `None`")

        self._sticky_custom = sticky_custom

    @property
    def vimeo(self):
        """Gets the vimeo of this PresetsSettingsLogos.

        Whether the preset includes Vimeo logo settings.

        :return: The vimeo of this PresetsSettingsLogos.
        :rtype: bool
        """
        return self._vimeo

    @vimeo.setter
    def vimeo(self, vimeo):
        """Sets the vimeo of this PresetsSettingsLogos.

        Whether the preset includes Vimeo logo settings.

        :param vimeo: The vimeo of this PresetsSettingsLogos.
        :type vimeo: bool
        """
        if vimeo is None:
            raise ValueError("Invalid value for `vimeo`, must not be `None`")

        self._vimeo = vimeo
