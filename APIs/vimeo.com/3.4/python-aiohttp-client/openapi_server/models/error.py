# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, developer_message: str=None, error: str=None, error_code: float=None, link: str=None):
        """Error - a model defined in OpenAPI

        :param developer_message: The developer_message of this Error.
        :param error: The error of this Error.
        :param error_code: The error_code of this Error.
        :param link: The link of this Error.
        """
        self.openapi_types = {
            'developer_message': str,
            'error': str,
            'error_code': float,
            'link': str
        }

        self.attribute_map = {
            'developer_message': 'developer_message',
            'error': 'error',
            'error_code': 'error_code',
            'link': 'link'
        }

        self._developer_message = developer_message
        self._error = error
        self._error_code = error_code
        self._link = link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def developer_message(self):
        """Gets the developer_message of this Error.

        The error message that developers receive.

        :return: The developer_message of this Error.
        :rtype: str
        """
        return self._developer_message

    @developer_message.setter
    def developer_message(self, developer_message):
        """Sets the developer_message of this Error.

        The error message that developers receive.

        :param developer_message: The developer_message of this Error.
        :type developer_message: str
        """
        if developer_message is None:
            raise ValueError("Invalid value for `developer_message`, must not be `None`")

        self._developer_message = developer_message

    @property
    def error(self):
        """Gets the error of this Error.

        The error message that non-developer users receive.

        :return: The error of this Error.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Error.

        The error message that non-developer users receive.

        :param error: The error of this Error.
        :type error: str
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")

        self._error = error

    @property
    def error_code(self):
        """Gets the error_code of this Error.

        The error code.

        :return: The error_code of this Error.
        :rtype: float
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this Error.

        The error code.

        :param error_code: The error_code of this Error.
        :type error_code: float
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def link(self):
        """Gets the link of this Error.

        A link to more information about the error.

        :return: The link of this Error.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Error.

        A link to more information about the error.

        :param link: The link of this Error.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link
