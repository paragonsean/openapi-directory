# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientAuthRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, grant_type: str=None, scope: str=None):
        """ClientAuthRequest - a model defined in OpenAPI

        :param grant_type: The grant_type of this ClientAuthRequest.
        :param scope: The scope of this ClientAuthRequest.
        """
        self.openapi_types = {
            'grant_type': str,
            'scope': str
        }

        self.attribute_map = {
            'grant_type': 'grant_type',
            'scope': 'scope'
        }

        self._grant_type = grant_type
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientAuthRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The client_auth_request of this ClientAuthRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grant_type(self):
        """Gets the grant_type of this ClientAuthRequest.

        The grant type. Must be set to `client_credentials`.

        :return: The grant_type of this ClientAuthRequest.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this ClientAuthRequest.

        The grant type. Must be set to `client_credentials`.

        :param grant_type: The grant_type of this ClientAuthRequest.
        :type grant_type: str
        """
        allowed_values = ["client_credentials"]  # noqa: E501
        if grant_type not in allowed_values:
            raise ValueError(
                "Invalid value for `grant_type` ({0}), must be one of {1}"
                .format(grant_type, allowed_values)
            )

        self._grant_type = grant_type

    @property
    def scope(self):
        """Gets the scope of this ClientAuthRequest.

        A space-separated list of the authentication [scopes](https://developer.vimeo.com/api/authentication#supported-scopes) that you want to access. The default is `public`.

        :return: The scope of this ClientAuthRequest.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ClientAuthRequest.

        A space-separated list of the authentication [scopes](https://developer.vimeo.com/api/authentication#supported-scopes) that you want to access. The default is `public`.

        :param scope: The scope of this ClientAuthRequest.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope
