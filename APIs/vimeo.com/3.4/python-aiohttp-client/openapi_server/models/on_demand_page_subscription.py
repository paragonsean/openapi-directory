# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OnDemandPageSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, link: str=None, period: str=None, price: object=None):
        """OnDemandPageSubscription - a model defined in OpenAPI

        :param active: The active of this OnDemandPageSubscription.
        :param link: The link of this OnDemandPageSubscription.
        :param period: The period of this OnDemandPageSubscription.
        :param price: The price of this OnDemandPageSubscription.
        """
        self.openapi_types = {
            'active': bool,
            'link': str,
            'period': str,
            'price': object
        }

        self.attribute_map = {
            'active': 'active',
            'link': 'link',
            'period': 'period',
            'price': 'price'
        }

        self._active = active
        self._link = link
        self._period = period
        self._price = price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnDemandPageSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The on_demand_page_subscription of this OnDemandPageSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this OnDemandPageSubscription.

        Whether this product is active.

        :return: The active of this OnDemandPageSubscription.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this OnDemandPageSubscription.

        Whether this product is active.

        :param active: The active of this OnDemandPageSubscription.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def link(self):
        """Gets the link of this OnDemandPageSubscription.

        The link to this product on Vimeo.

        :return: The link of this OnDemandPageSubscription.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this OnDemandPageSubscription.

        The link to this product on Vimeo.

        :param link: The link of this OnDemandPageSubscription.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def period(self):
        """Gets the period of this OnDemandPageSubscription.

        The product's rental period.

        :return: The period of this OnDemandPageSubscription.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this OnDemandPageSubscription.

        The product's rental period.

        :param period: The period of this OnDemandPageSubscription.
        :type period: str
        """

        self._period = period

    @property
    def price(self):
        """Gets the price of this OnDemandPageSubscription.

        The accepted currencies and respective pricing for this product.

        :return: The price of this OnDemandPageSubscription.
        :rtype: object
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OnDemandPageSubscription.

        The accepted currencies and respective pricing for this product.

        :param price: The price of this OnDemandPageSubscription.
        :type price: object
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price
