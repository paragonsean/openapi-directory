# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExchangeAuthCodeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, grant_type: str=None, redirect_uri: str=None):
        """ExchangeAuthCodeRequest - a model defined in OpenAPI

        :param code: The code of this ExchangeAuthCodeRequest.
        :param grant_type: The grant_type of this ExchangeAuthCodeRequest.
        :param redirect_uri: The redirect_uri of this ExchangeAuthCodeRequest.
        """
        self.openapi_types = {
            'code': str,
            'grant_type': str,
            'redirect_uri': str
        }

        self.attribute_map = {
            'code': 'code',
            'grant_type': 'grant_type',
            'redirect_uri': 'redirect_uri'
        }

        self._code = code
        self._grant_type = grant_type
        self._redirect_uri = redirect_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExchangeAuthCodeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The exchange_auth_code_request of this ExchangeAuthCodeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ExchangeAuthCodeRequest.

        The authorization code received from the authorization server.

        :return: The code of this ExchangeAuthCodeRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ExchangeAuthCodeRequest.

        The authorization code received from the authorization server.

        :param code: The code of this ExchangeAuthCodeRequest.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def grant_type(self):
        """Gets the grant_type of this ExchangeAuthCodeRequest.

        The grant type. Must be set to `authorization_code`.

        :return: The grant_type of this ExchangeAuthCodeRequest.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this ExchangeAuthCodeRequest.

        The grant type. Must be set to `authorization_code`.

        :param grant_type: The grant_type of this ExchangeAuthCodeRequest.
        :type grant_type: str
        """
        allowed_values = ["authorization_code"]  # noqa: E501
        if grant_type not in allowed_values:
            raise ValueError(
                "Invalid value for `grant_type` ({0}), must be one of {1}"
                .format(grant_type, allowed_values)
            )

        self._grant_type = grant_type

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this ExchangeAuthCodeRequest.

        The redirect URI. Must match the URI from `/oauth/authorize`.

        :return: The redirect_uri of this ExchangeAuthCodeRequest.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this ExchangeAuthCodeRequest.

        The redirect URI. Must match the URI from `/oauth/authorize`.

        :param redirect_uri: The redirect_uri of this ExchangeAuthCodeRequest.
        :type redirect_uri: str
        """
        if redirect_uri is None:
            raise ValueError("Invalid value for `redirect_uri`, must not be `None`")

        self._redirect_uri = redirect_uri
