# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelMetadataConnectionsPrivacyUsers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, options: List[str]=None, total: float=None, uri: str=None):
        """ChannelMetadataConnectionsPrivacyUsers - a model defined in OpenAPI

        :param options: The options of this ChannelMetadataConnectionsPrivacyUsers.
        :param total: The total of this ChannelMetadataConnectionsPrivacyUsers.
        :param uri: The uri of this ChannelMetadataConnectionsPrivacyUsers.
        """
        self.openapi_types = {
            'options': List[str],
            'total': float,
            'uri': str
        }

        self.attribute_map = {
            'options': 'options',
            'total': 'total',
            'uri': 'uri'
        }

        self._options = options
        self._total = total
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelMetadataConnectionsPrivacyUsers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The channel_metadata_connections_privacy_users of this ChannelMetadataConnectionsPrivacyUsers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def options(self):
        """Gets the options of this ChannelMetadataConnectionsPrivacyUsers.

        An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.

        :return: The options of this ChannelMetadataConnectionsPrivacyUsers.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ChannelMetadataConnectionsPrivacyUsers.

        An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.

        :param options: The options of this ChannelMetadataConnectionsPrivacyUsers.
        :type options: List[str]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options

    @property
    def total(self):
        """Gets the total of this ChannelMetadataConnectionsPrivacyUsers.

        The total number of users on this connection. This data requires a bearer token with the `private` scope.

        :return: The total of this ChannelMetadataConnectionsPrivacyUsers.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ChannelMetadataConnectionsPrivacyUsers.

        The total number of users on this connection. This data requires a bearer token with the `private` scope.

        :param total: The total of this ChannelMetadataConnectionsPrivacyUsers.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def uri(self):
        """Gets the uri of this ChannelMetadataConnectionsPrivacyUsers.

        The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.

        :return: The uri of this ChannelMetadataConnectionsPrivacyUsers.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ChannelMetadataConnectionsPrivacyUsers.

        The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.

        :param uri: The uri of this ChannelMetadataConnectionsPrivacyUsers.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
