# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmbedSettingsTitle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, owner: str=None, portrait: str=None):
        """EmbedSettingsTitle - a model defined in OpenAPI

        :param name: The name of this EmbedSettingsTitle.
        :param owner: The owner of this EmbedSettingsTitle.
        :param portrait: The portrait of this EmbedSettingsTitle.
        """
        self.openapi_types = {
            'name': str,
            'owner': str,
            'portrait': str
        }

        self.attribute_map = {
            'name': 'name',
            'owner': 'owner',
            'portrait': 'portrait'
        }

        self._name = name
        self._owner = owner
        self._portrait = portrait

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmbedSettingsTitle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The embed_settings_title of this EmbedSettingsTitle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this EmbedSettingsTitle.

        How the embeddable player handles the video title:  Option descriptions:  * `hide` - The title is hidden.  * `show` - The title is shown. 

        :return: The name of this EmbedSettingsTitle.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmbedSettingsTitle.

        How the embeddable player handles the video title:  Option descriptions:  * `hide` - The title is hidden.  * `show` - The title is shown. 

        :param name: The name of this EmbedSettingsTitle.
        :type name: str
        """
        allowed_values = ["hide", "show", "user"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this EmbedSettingsTitle.

        How the embeddable player handles the video owner's information:  Option descriptions:  * `hide` - The owner's information is hidden.  * `show` - The owner's information is shown. 

        :return: The owner of this EmbedSettingsTitle.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this EmbedSettingsTitle.

        How the embeddable player handles the video owner's information:  Option descriptions:  * `hide` - The owner's information is hidden.  * `show` - The owner's information is shown. 

        :param owner: The owner of this EmbedSettingsTitle.
        :type owner: str
        """
        allowed_values = ["hide", "show", "user"]  # noqa: E501
        if owner not in allowed_values:
            raise ValueError(
                "Invalid value for `owner` ({0}), must be one of {1}"
                .format(owner, allowed_values)
            )

        self._owner = owner

    @property
    def portrait(self):
        """Gets the portrait of this EmbedSettingsTitle.

        How the embeddable player handles the video owner's portrait:  Option descriptions:  * `hide` - The owner's portrait is hidden  * `show` - The owner's portrait is shown. 

        :return: The portrait of this EmbedSettingsTitle.
        :rtype: str
        """
        return self._portrait

    @portrait.setter
    def portrait(self, portrait):
        """Sets the portrait of this EmbedSettingsTitle.

        How the embeddable player handles the video owner's portrait:  Option descriptions:  * `hide` - The owner's portrait is hidden  * `show` - The owner's portrait is shown. 

        :param portrait: The portrait of this EmbedSettingsTitle.
        :type portrait: str
        """
        allowed_values = ["hide", "show", "user"]  # noqa: E501
        if portrait not in allowed_values:
            raise ValueError(
                "Invalid value for `portrait` ({0}), must be one of {1}"
                .format(portrait, allowed_values)
            )

        self._portrait = portrait
