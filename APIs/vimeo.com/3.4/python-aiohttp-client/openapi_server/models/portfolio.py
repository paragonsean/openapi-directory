# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.portfolio_metadata import PortfolioMetadata
from openapi_server import util


class Portfolio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: str=None, description: str=None, link: str=None, metadata: PortfolioMetadata=None, modified_time: str=None, name: str=None, sort: str=None, uri: str=None):
        """Portfolio - a model defined in OpenAPI

        :param created_time: The created_time of this Portfolio.
        :param description: The description of this Portfolio.
        :param link: The link of this Portfolio.
        :param metadata: The metadata of this Portfolio.
        :param modified_time: The modified_time of this Portfolio.
        :param name: The name of this Portfolio.
        :param sort: The sort of this Portfolio.
        :param uri: The uri of this Portfolio.
        """
        self.openapi_types = {
            'created_time': str,
            'description': str,
            'link': str,
            'metadata': PortfolioMetadata,
            'modified_time': str,
            'name': str,
            'sort': str,
            'uri': str
        }

        self.attribute_map = {
            'created_time': 'created_time',
            'description': 'description',
            'link': 'link',
            'metadata': 'metadata',
            'modified_time': 'modified_time',
            'name': 'name',
            'sort': 'sort',
            'uri': 'uri'
        }

        self._created_time = created_time
        self._description = description
        self._link = link
        self._metadata = metadata
        self._modified_time = modified_time
        self._name = name
        self._sort = sort
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Portfolio':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The portfolio of this Portfolio.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this Portfolio.

        The time in ISO 8601 format when the portfolio was created.

        :return: The created_time of this Portfolio.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Portfolio.

        The time in ISO 8601 format when the portfolio was created.

        :param created_time: The created_time of this Portfolio.
        :type created_time: str
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this Portfolio.

        The portfolio's description.

        :return: The description of this Portfolio.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Portfolio.

        The portfolio's description.

        :param description: The description of this Portfolio.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def link(self):
        """Gets the link of this Portfolio.

        The link to the portfolio.

        :return: The link of this Portfolio.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Portfolio.

        The link to the portfolio.

        :param link: The link of this Portfolio.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def metadata(self):
        """Gets the metadata of this Portfolio.


        :return: The metadata of this Portfolio.
        :rtype: PortfolioMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Portfolio.


        :param metadata: The metadata of this Portfolio.
        :type metadata: PortfolioMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def modified_time(self):
        """Gets the modified_time of this Portfolio.

        The time in ISO 8601 format when the portfolio's data was last modified.

        :return: The modified_time of this Portfolio.
        :rtype: str
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this Portfolio.

        The time in ISO 8601 format when the portfolio's data was last modified.

        :param modified_time: The modified_time of this Portfolio.
        :type modified_time: str
        """
        if modified_time is None:
            raise ValueError("Invalid value for `modified_time`, must not be `None`")

        self._modified_time = modified_time

    @property
    def name(self):
        """Gets the name of this Portfolio.

        The display name of the portfolio.

        :return: The name of this Portfolio.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Portfolio.

        The display name of the portfolio.

        :param name: The name of this Portfolio.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def sort(self):
        """Gets the sort of this Portfolio.

        The default video sort order for the portfolio:  Option descriptions:  * `alphabetical` - The default sort order is alphabetical by name.  * `clips` - The default sort order is video creation date.  * `modified` - The default sort order is the order in which the videos were modified.  * `recent` - The default sort order is the order in which the videos were added. 

        :return: The sort of this Portfolio.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Portfolio.

        The default video sort order for the portfolio:  Option descriptions:  * `alphabetical` - The default sort order is alphabetical by name.  * `clips` - The default sort order is video creation date.  * `modified` - The default sort order is the order in which the videos were modified.  * `recent` - The default sort order is the order in which the videos were added. 

        :param sort: The sort of this Portfolio.
        :type sort: str
        """
        allowed_values = ["alphabetical", "clips", "modified", "recent"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"
                .format(sort, allowed_values)
            )

        self._sort = sort

    @property
    def uri(self):
        """Gets the uri of this Portfolio.

        The canonical relative URI of the portfolio.

        :return: The uri of this Portfolio.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Portfolio.

        The canonical relative URI of the portfolio.

        :param uri: The uri of this Portfolio.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
