# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.on_demand_season_metadata import OnDemandSeasonMetadata
from openapi_server.models.user import User
from openapi_server import util


class OnDemandSeason(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, metadata: OnDemandSeasonMetadata=None, name: str=None, position: float=None, resource_key: str=None, type: str=None, uri: str=None, user: User=None):
        """OnDemandSeason - a model defined in OpenAPI

        :param description: The description of this OnDemandSeason.
        :param metadata: The metadata of this OnDemandSeason.
        :param name: The name of this OnDemandSeason.
        :param position: The position of this OnDemandSeason.
        :param resource_key: The resource_key of this OnDemandSeason.
        :param type: The type of this OnDemandSeason.
        :param uri: The uri of this OnDemandSeason.
        :param user: The user of this OnDemandSeason.
        """
        self.openapi_types = {
            'description': str,
            'metadata': OnDemandSeasonMetadata,
            'name': str,
            'position': float,
            'resource_key': str,
            'type': str,
            'uri': str,
            'user': User
        }

        self.attribute_map = {
            'description': 'description',
            'metadata': 'metadata',
            'name': 'name',
            'position': 'position',
            'resource_key': 'resource_key',
            'type': 'type',
            'uri': 'uri',
            'user': 'user'
        }

        self._description = description
        self._metadata = metadata
        self._name = name
        self._position = position
        self._resource_key = resource_key
        self._type = type
        self._uri = uri
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnDemandSeason':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The on-demand-season of this OnDemandSeason.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this OnDemandSeason.

        The description for this season.

        :return: The description of this OnDemandSeason.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OnDemandSeason.

        The description for this season.

        :param description: The description of this OnDemandSeason.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this OnDemandSeason.


        :return: The metadata of this OnDemandSeason.
        :rtype: OnDemandSeasonMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OnDemandSeason.


        :param metadata: The metadata of this OnDemandSeason.
        :type metadata: OnDemandSeasonMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this OnDemandSeason.

        The descriptive name of the season.

        :return: The name of this OnDemandSeason.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OnDemandSeason.

        The descriptive name of the season.

        :param name: The name of this OnDemandSeason.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def position(self):
        """Gets the position of this OnDemandSeason.

        The position of the season relative to other seasons in the series.

        :return: The position of this OnDemandSeason.
        :rtype: float
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this OnDemandSeason.

        The position of the season relative to other seasons in the series.

        :param position: The position of this OnDemandSeason.
        :type position: float
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def resource_key(self):
        """Gets the resource_key of this OnDemandSeason.

        The unique identifier for this On Demand season.

        :return: The resource_key of this OnDemandSeason.
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this OnDemandSeason.

        The unique identifier for this On Demand season.

        :param resource_key: The resource_key of this OnDemandSeason.
        :type resource_key: str
        """
        if resource_key is None:
            raise ValueError("Invalid value for `resource_key`, must not be `None`")

        self._resource_key = resource_key

    @property
    def type(self):
        """Gets the type of this OnDemandSeason.

        The type of season.

        :return: The type of this OnDemandSeason.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OnDemandSeason.

        The type of season.

        :param type: The type of this OnDemandSeason.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this OnDemandSeason.

        The season container's relative URI.

        :return: The uri of this OnDemandSeason.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this OnDemandSeason.

        The season container's relative URI.

        :param uri: The uri of this OnDemandSeason.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def user(self):
        """Gets the user of this OnDemandSeason.

        The creator of this On Demand page.

        :return: The user of this OnDemandSeason.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this OnDemandSeason.

        The creator of this On Demand page.

        :param user: The user of this OnDemandSeason.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
