# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UploadVideoAlt1RequestEmbedButtons(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embed: bool=None, fullscreen: bool=None, hd: bool=None, like: bool=None, scaling: bool=None, share: bool=None, watchlater: bool=None):
        """UploadVideoAlt1RequestEmbedButtons - a model defined in OpenAPI

        :param embed: The embed of this UploadVideoAlt1RequestEmbedButtons.
        :param fullscreen: The fullscreen of this UploadVideoAlt1RequestEmbedButtons.
        :param hd: The hd of this UploadVideoAlt1RequestEmbedButtons.
        :param like: The like of this UploadVideoAlt1RequestEmbedButtons.
        :param scaling: The scaling of this UploadVideoAlt1RequestEmbedButtons.
        :param share: The share of this UploadVideoAlt1RequestEmbedButtons.
        :param watchlater: The watchlater of this UploadVideoAlt1RequestEmbedButtons.
        """
        self.openapi_types = {
            'embed': bool,
            'fullscreen': bool,
            'hd': bool,
            'like': bool,
            'scaling': bool,
            'share': bool,
            'watchlater': bool
        }

        self.attribute_map = {
            'embed': 'embed',
            'fullscreen': 'fullscreen',
            'hd': 'hd',
            'like': 'like',
            'scaling': 'scaling',
            'share': 'share',
            'watchlater': 'watchlater'
        }

        self._embed = embed
        self._fullscreen = fullscreen
        self._hd = hd
        self._like = like
        self._scaling = scaling
        self._share = share
        self._watchlater = watchlater

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadVideoAlt1RequestEmbedButtons':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The upload_video_alt1_request_embed_buttons of this UploadVideoAlt1RequestEmbedButtons.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embed(self):
        """Gets the embed of this UploadVideoAlt1RequestEmbedButtons.

        Show or hide the Embed button.

        :return: The embed of this UploadVideoAlt1RequestEmbedButtons.
        :rtype: bool
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this UploadVideoAlt1RequestEmbedButtons.

        Show or hide the Embed button.

        :param embed: The embed of this UploadVideoAlt1RequestEmbedButtons.
        :type embed: bool
        """

        self._embed = embed

    @property
    def fullscreen(self):
        """Gets the fullscreen of this UploadVideoAlt1RequestEmbedButtons.

        Show or hide the Fullscreen button.

        :return: The fullscreen of this UploadVideoAlt1RequestEmbedButtons.
        :rtype: bool
        """
        return self._fullscreen

    @fullscreen.setter
    def fullscreen(self, fullscreen):
        """Sets the fullscreen of this UploadVideoAlt1RequestEmbedButtons.

        Show or hide the Fullscreen button.

        :param fullscreen: The fullscreen of this UploadVideoAlt1RequestEmbedButtons.
        :type fullscreen: bool
        """

        self._fullscreen = fullscreen

    @property
    def hd(self):
        """Gets the hd of this UploadVideoAlt1RequestEmbedButtons.

        Show or hide the HD button.

        :return: The hd of this UploadVideoAlt1RequestEmbedButtons.
        :rtype: bool
        """
        return self._hd

    @hd.setter
    def hd(self, hd):
        """Sets the hd of this UploadVideoAlt1RequestEmbedButtons.

        Show or hide the HD button.

        :param hd: The hd of this UploadVideoAlt1RequestEmbedButtons.
        :type hd: bool
        """

        self._hd = hd

    @property
    def like(self):
        """Gets the like of this UploadVideoAlt1RequestEmbedButtons.

        Show or hide the Like button.

        :return: The like of this UploadVideoAlt1RequestEmbedButtons.
        :rtype: bool
        """
        return self._like

    @like.setter
    def like(self, like):
        """Sets the like of this UploadVideoAlt1RequestEmbedButtons.

        Show or hide the Like button.

        :param like: The like of this UploadVideoAlt1RequestEmbedButtons.
        :type like: bool
        """

        self._like = like

    @property
    def scaling(self):
        """Gets the scaling of this UploadVideoAlt1RequestEmbedButtons.

        Show or hide the Scaling button (shown only in Fullscreen mode).

        :return: The scaling of this UploadVideoAlt1RequestEmbedButtons.
        :rtype: bool
        """
        return self._scaling

    @scaling.setter
    def scaling(self, scaling):
        """Sets the scaling of this UploadVideoAlt1RequestEmbedButtons.

        Show or hide the Scaling button (shown only in Fullscreen mode).

        :param scaling: The scaling of this UploadVideoAlt1RequestEmbedButtons.
        :type scaling: bool
        """

        self._scaling = scaling

    @property
    def share(self):
        """Gets the share of this UploadVideoAlt1RequestEmbedButtons.

        Show or hide the Share button.

        :return: The share of this UploadVideoAlt1RequestEmbedButtons.
        :rtype: bool
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this UploadVideoAlt1RequestEmbedButtons.

        Show or hide the Share button.

        :param share: The share of this UploadVideoAlt1RequestEmbedButtons.
        :type share: bool
        """

        self._share = share

    @property
    def watchlater(self):
        """Gets the watchlater of this UploadVideoAlt1RequestEmbedButtons.

        Show or hide the Watch Later button.

        :return: The watchlater of this UploadVideoAlt1RequestEmbedButtons.
        :rtype: bool
        """
        return self._watchlater

    @watchlater.setter
    def watchlater(self, watchlater):
        """Sets the watchlater of this UploadVideoAlt1RequestEmbedButtons.

        Show or hide the Watch Later button.

        :param watchlater: The watchlater of this UploadVideoAlt1RequestEmbedButtons.
        :type watchlater: bool
        """

        self._watchlater = watchlater
