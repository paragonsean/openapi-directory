# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.portfolio_metadata_connections import PortfolioMetadataConnections
from openapi_server import util


class PortfolioMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connections: PortfolioMetadataConnections=None):
        """PortfolioMetadata - a model defined in OpenAPI

        :param connections: The connections of this PortfolioMetadata.
        """
        self.openapi_types = {
            'connections': PortfolioMetadataConnections
        }

        self.attribute_map = {
            'connections': 'connections'
        }

        self._connections = connections

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortfolioMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The portfolio_metadata of this PortfolioMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connections(self):
        """Gets the connections of this PortfolioMetadata.


        :return: The connections of this PortfolioMetadata.
        :rtype: PortfolioMetadataConnections
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this PortfolioMetadata.


        :param connections: The connections of this PortfolioMetadata.
        :type connections: PortfolioMetadataConnections
        """
        if connections is None:
            raise ValueError("Invalid value for `connections`, must not be `None`")

        self._connections = connections
