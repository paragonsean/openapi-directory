# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_metadata_connections_albums import UserMetadataConnectionsAlbums
from openapi_server.models.user_metadata_connections_appearances import UserMetadataConnectionsAppearances
from openapi_server.models.user_metadata_connections_block import UserMetadataConnectionsBlock
from openapi_server.models.user_metadata_connections_categories import UserMetadataConnectionsCategories
from openapi_server.models.user_metadata_connections_channels import UserMetadataConnectionsChannels
from openapi_server.models.user_metadata_connections_feed import UserMetadataConnectionsFeed
from openapi_server.models.user_metadata_connections_folders import UserMetadataConnectionsFolders
from openapi_server.models.user_metadata_connections_followers import UserMetadataConnectionsFollowers
from openapi_server.models.user_metadata_connections_following import UserMetadataConnectionsFollowing
from openapi_server.models.user_metadata_connections_groups import UserMetadataConnectionsGroups
from openapi_server.models.user_metadata_connections_likes import UserMetadataConnectionsLikes
from openapi_server.models.user_metadata_connections_moderated_channels import UserMetadataConnectionsModeratedChannels
from openapi_server.models.user_metadata_connections_pictures import UserMetadataConnectionsPictures
from openapi_server.models.user_metadata_connections_portfolios import UserMetadataConnectionsPortfolios
from openapi_server.models.user_metadata_connections_recommended_channels import UserMetadataConnectionsRecommendedChannels
from openapi_server.models.user_metadata_connections_recommended_users import UserMetadataConnectionsRecommendedUsers
from openapi_server.models.user_metadata_connections_shared import UserMetadataConnectionsShared
from openapi_server.models.user_metadata_connections_videos import UserMetadataConnectionsVideos
from openapi_server.models.user_metadata_connections_watched_videos import UserMetadataConnectionsWatchedVideos
from openapi_server.models.user_metadata_connections_watchlater import UserMetadataConnectionsWatchlater
from openapi_server import util


class UserMetadataConnections(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, albums: UserMetadataConnectionsAlbums=None, appearances: UserMetadataConnectionsAppearances=None, block: UserMetadataConnectionsBlock=None, categories: UserMetadataConnectionsCategories=None, channels: UserMetadataConnectionsChannels=None, feed: UserMetadataConnectionsFeed=None, folders: UserMetadataConnectionsFolders=None, followers: UserMetadataConnectionsFollowers=None, following: UserMetadataConnectionsFollowing=None, groups: UserMetadataConnectionsGroups=None, likes: UserMetadataConnectionsLikes=None, moderated_channels: UserMetadataConnectionsModeratedChannels=None, pictures: UserMetadataConnectionsPictures=None, portfolios: UserMetadataConnectionsPortfolios=None, recommended_channels: UserMetadataConnectionsRecommendedChannels=None, recommended_users: UserMetadataConnectionsRecommendedUsers=None, shared: UserMetadataConnectionsShared=None, videos: UserMetadataConnectionsVideos=None, watched_videos: UserMetadataConnectionsWatchedVideos=None, watchlater: UserMetadataConnectionsWatchlater=None):
        """UserMetadataConnections - a model defined in OpenAPI

        :param albums: The albums of this UserMetadataConnections.
        :param appearances: The appearances of this UserMetadataConnections.
        :param block: The block of this UserMetadataConnections.
        :param categories: The categories of this UserMetadataConnections.
        :param channels: The channels of this UserMetadataConnections.
        :param feed: The feed of this UserMetadataConnections.
        :param folders: The folders of this UserMetadataConnections.
        :param followers: The followers of this UserMetadataConnections.
        :param following: The following of this UserMetadataConnections.
        :param groups: The groups of this UserMetadataConnections.
        :param likes: The likes of this UserMetadataConnections.
        :param moderated_channels: The moderated_channels of this UserMetadataConnections.
        :param pictures: The pictures of this UserMetadataConnections.
        :param portfolios: The portfolios of this UserMetadataConnections.
        :param recommended_channels: The recommended_channels of this UserMetadataConnections.
        :param recommended_users: The recommended_users of this UserMetadataConnections.
        :param shared: The shared of this UserMetadataConnections.
        :param videos: The videos of this UserMetadataConnections.
        :param watched_videos: The watched_videos of this UserMetadataConnections.
        :param watchlater: The watchlater of this UserMetadataConnections.
        """
        self.openapi_types = {
            'albums': UserMetadataConnectionsAlbums,
            'appearances': UserMetadataConnectionsAppearances,
            'block': UserMetadataConnectionsBlock,
            'categories': UserMetadataConnectionsCategories,
            'channels': UserMetadataConnectionsChannels,
            'feed': UserMetadataConnectionsFeed,
            'folders': UserMetadataConnectionsFolders,
            'followers': UserMetadataConnectionsFollowers,
            'following': UserMetadataConnectionsFollowing,
            'groups': UserMetadataConnectionsGroups,
            'likes': UserMetadataConnectionsLikes,
            'moderated_channels': UserMetadataConnectionsModeratedChannels,
            'pictures': UserMetadataConnectionsPictures,
            'portfolios': UserMetadataConnectionsPortfolios,
            'recommended_channels': UserMetadataConnectionsRecommendedChannels,
            'recommended_users': UserMetadataConnectionsRecommendedUsers,
            'shared': UserMetadataConnectionsShared,
            'videos': UserMetadataConnectionsVideos,
            'watched_videos': UserMetadataConnectionsWatchedVideos,
            'watchlater': UserMetadataConnectionsWatchlater
        }

        self.attribute_map = {
            'albums': 'albums',
            'appearances': 'appearances',
            'block': 'block',
            'categories': 'categories',
            'channels': 'channels',
            'feed': 'feed',
            'folders': 'folders',
            'followers': 'followers',
            'following': 'following',
            'groups': 'groups',
            'likes': 'likes',
            'moderated_channels': 'moderated_channels',
            'pictures': 'pictures',
            'portfolios': 'portfolios',
            'recommended_channels': 'recommended_channels',
            'recommended_users': 'recommended_users',
            'shared': 'shared',
            'videos': 'videos',
            'watched_videos': 'watched_videos',
            'watchlater': 'watchlater'
        }

        self._albums = albums
        self._appearances = appearances
        self._block = block
        self._categories = categories
        self._channels = channels
        self._feed = feed
        self._folders = folders
        self._followers = followers
        self._following = following
        self._groups = groups
        self._likes = likes
        self._moderated_channels = moderated_channels
        self._pictures = pictures
        self._portfolios = portfolios
        self._recommended_channels = recommended_channels
        self._recommended_users = recommended_users
        self._shared = shared
        self._videos = videos
        self._watched_videos = watched_videos
        self._watchlater = watchlater

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserMetadataConnections':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The user_metadata_connections of this UserMetadataConnections.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def albums(self):
        """Gets the albums of this UserMetadataConnections.


        :return: The albums of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsAlbums
        """
        return self._albums

    @albums.setter
    def albums(self, albums):
        """Sets the albums of this UserMetadataConnections.


        :param albums: The albums of this UserMetadataConnections.
        :type albums: UserMetadataConnectionsAlbums
        """
        if albums is None:
            raise ValueError("Invalid value for `albums`, must not be `None`")

        self._albums = albums

    @property
    def appearances(self):
        """Gets the appearances of this UserMetadataConnections.


        :return: The appearances of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsAppearances
        """
        return self._appearances

    @appearances.setter
    def appearances(self, appearances):
        """Sets the appearances of this UserMetadataConnections.


        :param appearances: The appearances of this UserMetadataConnections.
        :type appearances: UserMetadataConnectionsAppearances
        """
        if appearances is None:
            raise ValueError("Invalid value for `appearances`, must not be `None`")

        self._appearances = appearances

    @property
    def block(self):
        """Gets the block of this UserMetadataConnections.


        :return: The block of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsBlock
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this UserMetadataConnections.


        :param block: The block of this UserMetadataConnections.
        :type block: UserMetadataConnectionsBlock
        """
        if block is None:
            raise ValueError("Invalid value for `block`, must not be `None`")

        self._block = block

    @property
    def categories(self):
        """Gets the categories of this UserMetadataConnections.


        :return: The categories of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsCategories
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this UserMetadataConnections.


        :param categories: The categories of this UserMetadataConnections.
        :type categories: UserMetadataConnectionsCategories
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def channels(self):
        """Gets the channels of this UserMetadataConnections.


        :return: The channels of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsChannels
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this UserMetadataConnections.


        :param channels: The channels of this UserMetadataConnections.
        :type channels: UserMetadataConnectionsChannels
        """
        if channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")

        self._channels = channels

    @property
    def feed(self):
        """Gets the feed of this UserMetadataConnections.


        :return: The feed of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsFeed
        """
        return self._feed

    @feed.setter
    def feed(self, feed):
        """Sets the feed of this UserMetadataConnections.


        :param feed: The feed of this UserMetadataConnections.
        :type feed: UserMetadataConnectionsFeed
        """
        if feed is None:
            raise ValueError("Invalid value for `feed`, must not be `None`")

        self._feed = feed

    @property
    def folders(self):
        """Gets the folders of this UserMetadataConnections.


        :return: The folders of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsFolders
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """Sets the folders of this UserMetadataConnections.


        :param folders: The folders of this UserMetadataConnections.
        :type folders: UserMetadataConnectionsFolders
        """
        if folders is None:
            raise ValueError("Invalid value for `folders`, must not be `None`")

        self._folders = folders

    @property
    def followers(self):
        """Gets the followers of this UserMetadataConnections.


        :return: The followers of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsFollowers
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this UserMetadataConnections.


        :param followers: The followers of this UserMetadataConnections.
        :type followers: UserMetadataConnectionsFollowers
        """
        if followers is None:
            raise ValueError("Invalid value for `followers`, must not be `None`")

        self._followers = followers

    @property
    def following(self):
        """Gets the following of this UserMetadataConnections.


        :return: The following of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsFollowing
        """
        return self._following

    @following.setter
    def following(self, following):
        """Sets the following of this UserMetadataConnections.


        :param following: The following of this UserMetadataConnections.
        :type following: UserMetadataConnectionsFollowing
        """
        if following is None:
            raise ValueError("Invalid value for `following`, must not be `None`")

        self._following = following

    @property
    def groups(self):
        """Gets the groups of this UserMetadataConnections.


        :return: The groups of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsGroups
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserMetadataConnections.


        :param groups: The groups of this UserMetadataConnections.
        :type groups: UserMetadataConnectionsGroups
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")

        self._groups = groups

    @property
    def likes(self):
        """Gets the likes of this UserMetadataConnections.


        :return: The likes of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsLikes
        """
        return self._likes

    @likes.setter
    def likes(self, likes):
        """Sets the likes of this UserMetadataConnections.


        :param likes: The likes of this UserMetadataConnections.
        :type likes: UserMetadataConnectionsLikes
        """
        if likes is None:
            raise ValueError("Invalid value for `likes`, must not be `None`")

        self._likes = likes

    @property
    def moderated_channels(self):
        """Gets the moderated_channels of this UserMetadataConnections.


        :return: The moderated_channels of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsModeratedChannels
        """
        return self._moderated_channels

    @moderated_channels.setter
    def moderated_channels(self, moderated_channels):
        """Sets the moderated_channels of this UserMetadataConnections.


        :param moderated_channels: The moderated_channels of this UserMetadataConnections.
        :type moderated_channels: UserMetadataConnectionsModeratedChannels
        """
        if moderated_channels is None:
            raise ValueError("Invalid value for `moderated_channels`, must not be `None`")

        self._moderated_channels = moderated_channels

    @property
    def pictures(self):
        """Gets the pictures of this UserMetadataConnections.


        :return: The pictures of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsPictures
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this UserMetadataConnections.


        :param pictures: The pictures of this UserMetadataConnections.
        :type pictures: UserMetadataConnectionsPictures
        """
        if pictures is None:
            raise ValueError("Invalid value for `pictures`, must not be `None`")

        self._pictures = pictures

    @property
    def portfolios(self):
        """Gets the portfolios of this UserMetadataConnections.


        :return: The portfolios of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsPortfolios
        """
        return self._portfolios

    @portfolios.setter
    def portfolios(self, portfolios):
        """Sets the portfolios of this UserMetadataConnections.


        :param portfolios: The portfolios of this UserMetadataConnections.
        :type portfolios: UserMetadataConnectionsPortfolios
        """
        if portfolios is None:
            raise ValueError("Invalid value for `portfolios`, must not be `None`")

        self._portfolios = portfolios

    @property
    def recommended_channels(self):
        """Gets the recommended_channels of this UserMetadataConnections.


        :return: The recommended_channels of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsRecommendedChannels
        """
        return self._recommended_channels

    @recommended_channels.setter
    def recommended_channels(self, recommended_channels):
        """Sets the recommended_channels of this UserMetadataConnections.


        :param recommended_channels: The recommended_channels of this UserMetadataConnections.
        :type recommended_channels: UserMetadataConnectionsRecommendedChannels
        """
        if recommended_channels is None:
            raise ValueError("Invalid value for `recommended_channels`, must not be `None`")

        self._recommended_channels = recommended_channels

    @property
    def recommended_users(self):
        """Gets the recommended_users of this UserMetadataConnections.


        :return: The recommended_users of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsRecommendedUsers
        """
        return self._recommended_users

    @recommended_users.setter
    def recommended_users(self, recommended_users):
        """Sets the recommended_users of this UserMetadataConnections.


        :param recommended_users: The recommended_users of this UserMetadataConnections.
        :type recommended_users: UserMetadataConnectionsRecommendedUsers
        """
        if recommended_users is None:
            raise ValueError("Invalid value for `recommended_users`, must not be `None`")

        self._recommended_users = recommended_users

    @property
    def shared(self):
        """Gets the shared of this UserMetadataConnections.


        :return: The shared of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsShared
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this UserMetadataConnections.


        :param shared: The shared of this UserMetadataConnections.
        :type shared: UserMetadataConnectionsShared
        """
        if shared is None:
            raise ValueError("Invalid value for `shared`, must not be `None`")

        self._shared = shared

    @property
    def videos(self):
        """Gets the videos of this UserMetadataConnections.


        :return: The videos of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsVideos
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this UserMetadataConnections.


        :param videos: The videos of this UserMetadataConnections.
        :type videos: UserMetadataConnectionsVideos
        """
        if videos is None:
            raise ValueError("Invalid value for `videos`, must not be `None`")

        self._videos = videos

    @property
    def watched_videos(self):
        """Gets the watched_videos of this UserMetadataConnections.


        :return: The watched_videos of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsWatchedVideos
        """
        return self._watched_videos

    @watched_videos.setter
    def watched_videos(self, watched_videos):
        """Sets the watched_videos of this UserMetadataConnections.


        :param watched_videos: The watched_videos of this UserMetadataConnections.
        :type watched_videos: UserMetadataConnectionsWatchedVideos
        """
        if watched_videos is None:
            raise ValueError("Invalid value for `watched_videos`, must not be `None`")

        self._watched_videos = watched_videos

    @property
    def watchlater(self):
        """Gets the watchlater of this UserMetadataConnections.


        :return: The watchlater of this UserMetadataConnections.
        :rtype: UserMetadataConnectionsWatchlater
        """
        return self._watchlater

    @watchlater.setter
    def watchlater(self, watchlater):
        """Sets the watchlater of this UserMetadataConnections.


        :param watchlater: The watchlater of this UserMetadataConnections.
        :type watchlater: UserMetadataConnectionsWatchlater
        """
        if watchlater is None:
            raise ValueError("Invalid value for `watchlater`, must not be `None`")

        self._watchlater = watchlater
