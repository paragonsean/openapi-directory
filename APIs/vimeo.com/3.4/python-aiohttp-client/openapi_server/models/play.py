# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.play_progressive_inner import PlayProgressiveInner
from openapi_server import util


class Play(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, progressive: List[PlayProgressiveInner]=None, status: str=None):
        """Play - a model defined in OpenAPI

        :param progressive: The progressive of this Play.
        :param status: The status of this Play.
        """
        self.openapi_types = {
            'progressive': List[PlayProgressiveInner],
            'status': str
        }

        self.attribute_map = {
            'progressive': 'progressive',
            'status': 'status'
        }

        self._progressive = progressive
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Play':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The play of this Play.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def progressive(self):
        """Gets the progressive of this Play.

        Progressive files.

        :return: The progressive of this Play.
        :rtype: List[PlayProgressiveInner]
        """
        return self._progressive

    @progressive.setter
    def progressive(self, progressive):
        """Sets the progressive of this Play.

        Progressive files.

        :param progressive: The progressive of this Play.
        :type progressive: List[PlayProgressiveInner]
        """

        self._progressive = progressive

    @property
    def status(self):
        """Gets the status of this Play.

        The play status of the video:  Option descriptions:  * `playable` - The video is playable.  * `purchase_required` - The video must be purchased.  * `restricted` - Playback for the video is restricted.  * `unavailable` - The video is unavailable. 

        :return: The status of this Play.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Play.

        The play status of the video:  Option descriptions:  * `playable` - The video is playable.  * `purchase_required` - The video must be purchased.  * `restricted` - Playback for the video is restricted.  * `unavailable` - The video is unavailable. 

        :param status: The status of this Play.
        :type status: str
        """
        allowed_values = ["playable", "purchase_required", "restricted", "unavailable"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
