/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Vimeo);
  }
}(this, function(expect, Vimeo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Vimeo.UserMetadataConnections();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserMetadataConnections', function() {
    it('should create an instance of UserMetadataConnections', function() {
      // uncomment below and update the code to test UserMetadataConnections
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be.a(Vimeo.UserMetadataConnections);
    });

    it('should have the property albums (base name: "albums")', function() {
      // uncomment below and update the code to test the property albums
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property appearances (base name: "appearances")', function() {
      // uncomment below and update the code to test the property appearances
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property block (base name: "block")', function() {
      // uncomment below and update the code to test the property block
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property categories (base name: "categories")', function() {
      // uncomment below and update the code to test the property categories
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property channels (base name: "channels")', function() {
      // uncomment below and update the code to test the property channels
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property feed (base name: "feed")', function() {
      // uncomment below and update the code to test the property feed
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property folders (base name: "folders")', function() {
      // uncomment below and update the code to test the property folders
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property followers (base name: "followers")', function() {
      // uncomment below and update the code to test the property followers
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property following (base name: "following")', function() {
      // uncomment below and update the code to test the property following
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property groups (base name: "groups")', function() {
      // uncomment below and update the code to test the property groups
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property likes (base name: "likes")', function() {
      // uncomment below and update the code to test the property likes
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property moderatedChannels (base name: "moderated_channels")', function() {
      // uncomment below and update the code to test the property moderatedChannels
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property pictures (base name: "pictures")', function() {
      // uncomment below and update the code to test the property pictures
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property portfolios (base name: "portfolios")', function() {
      // uncomment below and update the code to test the property portfolios
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property recommendedChannels (base name: "recommended_channels")', function() {
      // uncomment below and update the code to test the property recommendedChannels
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property recommendedUsers (base name: "recommended_users")', function() {
      // uncomment below and update the code to test the property recommendedUsers
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property shared (base name: "shared")', function() {
      // uncomment below and update the code to test the property shared
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property videos (base name: "videos")', function() {
      // uncomment below and update the code to test the property videos
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property watchedVideos (base name: "watched_videos")', function() {
      // uncomment below and update the code to test the property watchedVideos
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

    it('should have the property watchlater (base name: "watchlater")', function() {
      // uncomment below and update the code to test the property watchlater
      //var instance = new Vimeo.UserMetadataConnections();
      //expect(instance).to.be();
    });

  });

}));
