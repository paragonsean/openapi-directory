/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VideoMetadataInteractionsBuy from './VideoMetadataInteractionsBuy';
import VideoMetadataInteractionsChannel from './VideoMetadataInteractionsChannel';
import VideoMetadataInteractionsLike from './VideoMetadataInteractionsLike';
import VideoMetadataInteractionsRent from './VideoMetadataInteractionsRent';
import VideoMetadataInteractionsReport from './VideoMetadataInteractionsReport';
import VideoMetadataInteractionsSubscribe from './VideoMetadataInteractionsSubscribe';
import VideoMetadataInteractionsWatched from './VideoMetadataInteractionsWatched';
import VideoMetadataInteractionsWatchlater from './VideoMetadataInteractionsWatchlater';

/**
 * The VideoMetadataInteractions model module.
 * @module model/VideoMetadataInteractions
 * @version 3.4
 */
class VideoMetadataInteractions {
    /**
     * Constructs a new <code>VideoMetadataInteractions</code>.
     * A list of resource URIs related to the video.
     * @alias module:model/VideoMetadataInteractions
     * @param buy {module:model/VideoMetadataInteractionsBuy} 
     * @param channel {module:model/VideoMetadataInteractionsChannel} 
     * @param like {module:model/VideoMetadataInteractionsLike} 
     * @param rent {module:model/VideoMetadataInteractionsRent} 
     * @param report {module:model/VideoMetadataInteractionsReport} 
     * @param watched {module:model/VideoMetadataInteractionsWatched} 
     * @param watchlater {module:model/VideoMetadataInteractionsWatchlater} 
     */
    constructor(buy, channel, like, rent, report, watched, watchlater) { 
        
        VideoMetadataInteractions.initialize(this, buy, channel, like, rent, report, watched, watchlater);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, buy, channel, like, rent, report, watched, watchlater) { 
        obj['buy'] = buy;
        obj['channel'] = channel;
        obj['like'] = like;
        obj['rent'] = rent;
        obj['report'] = report;
        obj['watched'] = watched;
        obj['watchlater'] = watchlater;
    }

    /**
     * Constructs a <code>VideoMetadataInteractions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoMetadataInteractions} obj Optional instance to populate.
     * @return {module:model/VideoMetadataInteractions} The populated <code>VideoMetadataInteractions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoMetadataInteractions();

            if (data.hasOwnProperty('buy')) {
                obj['buy'] = VideoMetadataInteractionsBuy.constructFromObject(data['buy']);
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = VideoMetadataInteractionsChannel.constructFromObject(data['channel']);
            }
            if (data.hasOwnProperty('like')) {
                obj['like'] = VideoMetadataInteractionsLike.constructFromObject(data['like']);
            }
            if (data.hasOwnProperty('rent')) {
                obj['rent'] = VideoMetadataInteractionsRent.constructFromObject(data['rent']);
            }
            if (data.hasOwnProperty('report')) {
                obj['report'] = VideoMetadataInteractionsReport.constructFromObject(data['report']);
            }
            if (data.hasOwnProperty('subscribe')) {
                obj['subscribe'] = VideoMetadataInteractionsSubscribe.constructFromObject(data['subscribe']);
            }
            if (data.hasOwnProperty('watched')) {
                obj['watched'] = VideoMetadataInteractionsWatched.constructFromObject(data['watched']);
            }
            if (data.hasOwnProperty('watchlater')) {
                obj['watchlater'] = VideoMetadataInteractionsWatchlater.constructFromObject(data['watchlater']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoMetadataInteractions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoMetadataInteractions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VideoMetadataInteractions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `buy`
        if (data['buy']) { // data not null
          VideoMetadataInteractionsBuy.validateJSON(data['buy']);
        }
        // validate the optional field `channel`
        if (data['channel']) { // data not null
          VideoMetadataInteractionsChannel.validateJSON(data['channel']);
        }
        // validate the optional field `like`
        if (data['like']) { // data not null
          VideoMetadataInteractionsLike.validateJSON(data['like']);
        }
        // validate the optional field `rent`
        if (data['rent']) { // data not null
          VideoMetadataInteractionsRent.validateJSON(data['rent']);
        }
        // validate the optional field `report`
        if (data['report']) { // data not null
          VideoMetadataInteractionsReport.validateJSON(data['report']);
        }
        // validate the optional field `subscribe`
        if (data['subscribe']) { // data not null
          VideoMetadataInteractionsSubscribe.validateJSON(data['subscribe']);
        }
        // validate the optional field `watched`
        if (data['watched']) { // data not null
          VideoMetadataInteractionsWatched.validateJSON(data['watched']);
        }
        // validate the optional field `watchlater`
        if (data['watchlater']) { // data not null
          VideoMetadataInteractionsWatchlater.validateJSON(data['watchlater']);
        }

        return true;
    }


}

VideoMetadataInteractions.RequiredProperties = ["buy", "channel", "like", "rent", "report", "watched", "watchlater"];

/**
 * @member {module:model/VideoMetadataInteractionsBuy} buy
 */
VideoMetadataInteractions.prototype['buy'] = undefined;

/**
 * @member {module:model/VideoMetadataInteractionsChannel} channel
 */
VideoMetadataInteractions.prototype['channel'] = undefined;

/**
 * @member {module:model/VideoMetadataInteractionsLike} like
 */
VideoMetadataInteractions.prototype['like'] = undefined;

/**
 * @member {module:model/VideoMetadataInteractionsRent} rent
 */
VideoMetadataInteractions.prototype['rent'] = undefined;

/**
 * @member {module:model/VideoMetadataInteractionsReport} report
 */
VideoMetadataInteractions.prototype['report'] = undefined;

/**
 * @member {module:model/VideoMetadataInteractionsSubscribe} subscribe
 */
VideoMetadataInteractions.prototype['subscribe'] = undefined;

/**
 * @member {module:model/VideoMetadataInteractionsWatched} watched
 */
VideoMetadataInteractions.prototype['watched'] = undefined;

/**
 * @member {module:model/VideoMetadataInteractionsWatchlater} watchlater
 */
VideoMetadataInteractions.prototype['watchlater'] = undefined;






export default VideoMetadataInteractions;

