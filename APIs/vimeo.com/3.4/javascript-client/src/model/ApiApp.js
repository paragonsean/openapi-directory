/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiApp model module.
 * @module model/ApiApp
 * @version 3.4
 */
class ApiApp {
    /**
     * Constructs a new <code>ApiApp</code>.
     * @alias module:model/ApiApp
     * @param name {String} The name of the API app.
     * @param uri {String} The canonical URI of the API app.
     */
    constructor(name, uri) { 
        
        ApiApp.initialize(this, name, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, uri) { 
        obj['name'] = name;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>ApiApp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiApp} obj Optional instance to populate.
     * @return {module:model/ApiApp} The populated <code>ApiApp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiApp();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiApp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiApp</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiApp.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

ApiApp.RequiredProperties = ["name", "uri"];

/**
 * The name of the API app.
 * @member {String} name
 */
ApiApp.prototype['name'] = undefined;

/**
 * The canonical URI of the API app.
 * @member {String} uri
 */
ApiApp.prototype['uri'] = undefined;






export default ApiApp;

