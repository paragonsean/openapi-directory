/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommentMetadata from './CommentMetadata';
import User from './User';

/**
 * The Comment model module.
 * @module model/Comment
 * @version 3.4
 */
class Comment {
    /**
     * Constructs a new <code>Comment</code>.
     * @alias module:model/Comment
     * @param createdOn {String} The time in ISO 8601 format when the comment was posted.
     * @param metadata {module:model/CommentMetadata} 
     * @param resourceKey {String} The resource key string for the comment.
     * @param text {String} The content of the comment.
     * @param type {module:model/Comment.TypeEnum} The Vimeo content to which the comment relates:  Option descriptions:  * `video` - The comment is about a video. 
     * @param uri {String} The unique identifier to access the comment resource.
     * @param user {module:model/User} The user who posted the comment.
     */
    constructor(createdOn, metadata, resourceKey, text, type, uri, user) { 
        
        Comment.initialize(this, createdOn, metadata, resourceKey, text, type, uri, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdOn, metadata, resourceKey, text, type, uri, user) { 
        obj['created_on'] = createdOn;
        obj['metadata'] = metadata;
        obj['resource_key'] = resourceKey;
        obj['text'] = text;
        obj['type'] = type;
        obj['uri'] = uri;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>Comment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Comment} obj Optional instance to populate.
     * @return {module:model/Comment} The populated <code>Comment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Comment();

            if (data.hasOwnProperty('created_on')) {
                obj['created_on'] = ApiClient.convertToType(data['created_on'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = CommentMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('resource_key')) {
                obj['resource_key'] = ApiClient.convertToType(data['resource_key'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], User);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Comment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Comment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Comment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created_on'] && !(typeof data['created_on'] === 'string' || data['created_on'] instanceof String)) {
            throw new Error("Expected the field `created_on` to be a primitive type in the JSON string but got " + data['created_on']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          CommentMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['resource_key'] && !(typeof data['resource_key'] === 'string' || data['resource_key'] instanceof String)) {
            throw new Error("Expected the field `resource_key` to be a primitive type in the JSON string but got " + data['resource_key']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

Comment.RequiredProperties = ["created_on", "metadata", "resource_key", "text", "type", "uri", "user"];

/**
 * The time in ISO 8601 format when the comment was posted.
 * @member {String} created_on
 */
Comment.prototype['created_on'] = undefined;

/**
 * @member {module:model/CommentMetadata} metadata
 */
Comment.prototype['metadata'] = undefined;

/**
 * The resource key string for the comment.
 * @member {String} resource_key
 */
Comment.prototype['resource_key'] = undefined;

/**
 * The content of the comment.
 * @member {String} text
 */
Comment.prototype['text'] = undefined;

/**
 * The Vimeo content to which the comment relates:  Option descriptions:  * `video` - The comment is about a video. 
 * @member {module:model/Comment.TypeEnum} type
 */
Comment.prototype['type'] = undefined;

/**
 * The unique identifier to access the comment resource.
 * @member {String} uri
 */
Comment.prototype['uri'] = undefined;

/**
 * The user who posted the comment.
 * @member {module:model/User} user
 */
Comment.prototype['user'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Comment['TypeEnum'] = {

    /**
     * value: "video"
     * @const
     */
    "video": "video"
};



export default Comment;

