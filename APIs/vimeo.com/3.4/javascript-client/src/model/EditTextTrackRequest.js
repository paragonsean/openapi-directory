/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EditTextTrackRequest model module.
 * @module model/EditTextTrackRequest
 * @version 3.4
 */
class EditTextTrackRequest {
    /**
     * Constructs a new <code>EditTextTrackRequest</code>.
     * @alias module:model/EditTextTrackRequest
     */
    constructor() { 
        
        EditTextTrackRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EditTextTrackRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EditTextTrackRequest} obj Optional instance to populate.
     * @return {module:model/EditTextTrackRequest} The populated <code>EditTextTrackRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EditTextTrackRequest();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EditTextTrackRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EditTextTrackRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Whether the text track is active, meaning that it appears in the player. Only one text track per language, and type, can be active.
 * @member {Boolean} active
 */
EditTextTrackRequest.prototype['active'] = undefined;

/**
 * The language of the text track. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.
 * @member {String} language
 */
EditTextTrackRequest.prototype['language'] = undefined;

/**
 * The name of the text track.
 * @member {String} name
 */
EditTextTrackRequest.prototype['name'] = undefined;

/**
 * The text track type.
 * @member {module:model/EditTextTrackRequest.TypeEnum} type
 */
EditTextTrackRequest.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
EditTextTrackRequest['TypeEnum'] = {

    /**
     * value: "captions"
     * @const
     */
    "captions": "captions",

    /**
     * value: "chapters"
     * @const
     */
    "chapters": "chapters",

    /**
     * value: "descriptions"
     * @const
     */
    "descriptions": "descriptions",

    /**
     * value: "metadata"
     * @const
     */
    "metadata": "metadata",

    /**
     * value: "subtitles"
     * @const
     */
    "subtitles": "subtitles"
};



export default EditTextTrackRequest;

