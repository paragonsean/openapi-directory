/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VideoVersionsUpload model module.
 * @module model/VideoVersionsUpload
 * @version 3.4
 */
class VideoVersionsUpload {
    /**
     * Constructs a new <code>VideoVersionsUpload</code>.
     * The upload information for this version.
     * @alias module:model/VideoVersionsUpload
     * @param status {module:model/VideoVersionsUpload.StatusEnum} The status code for the availability of the uploaded video:  Option descriptions:  * `complete` - The upload is complete.  * `error` - The upload ended with an error.  * `in_progress` - The upload is underway. 
     */
    constructor(status) { 
        
        VideoVersionsUpload.initialize(this, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status) { 
        obj['status'] = status;
    }

    /**
     * Constructs a <code>VideoVersionsUpload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoVersionsUpload} obj Optional instance to populate.
     * @return {module:model/VideoVersionsUpload} The populated <code>VideoVersionsUpload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoVersionsUpload();

            if (data.hasOwnProperty('approach')) {
                obj['approach'] = ApiClient.convertToType(data['approach'], 'String');
            }
            if (data.hasOwnProperty('complete_uri')) {
                obj['complete_uri'] = ApiClient.convertToType(data['complete_uri'], 'String');
            }
            if (data.hasOwnProperty('form')) {
                obj['form'] = ApiClient.convertToType(data['form'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('redirect_url')) {
                obj['redirect_url'] = ApiClient.convertToType(data['redirect_url'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('upload_link')) {
                obj['upload_link'] = ApiClient.convertToType(data['upload_link'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoVersionsUpload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoVersionsUpload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VideoVersionsUpload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['approach'] && !(typeof data['approach'] === 'string' || data['approach'] instanceof String)) {
            throw new Error("Expected the field `approach` to be a primitive type in the JSON string but got " + data['approach']);
        }
        // ensure the json data is a string
        if (data['complete_uri'] && !(typeof data['complete_uri'] === 'string' || data['complete_uri'] instanceof String)) {
            throw new Error("Expected the field `complete_uri` to be a primitive type in the JSON string but got " + data['complete_uri']);
        }
        // ensure the json data is a string
        if (data['form'] && !(typeof data['form'] === 'string' || data['form'] instanceof String)) {
            throw new Error("Expected the field `form` to be a primitive type in the JSON string but got " + data['form']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['redirect_url'] && !(typeof data['redirect_url'] === 'string' || data['redirect_url'] instanceof String)) {
            throw new Error("Expected the field `redirect_url` to be a primitive type in the JSON string but got " + data['redirect_url']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['upload_link'] && !(typeof data['upload_link'] === 'string' || data['upload_link'] instanceof String)) {
            throw new Error("Expected the field `upload_link` to be a primitive type in the JSON string but got " + data['upload_link']);
        }

        return true;
    }


}

VideoVersionsUpload.RequiredProperties = ["status"];

/**
 * The approach for uploading the video.
 * @member {module:model/VideoVersionsUpload.ApproachEnum} approach
 */
VideoVersionsUpload.prototype['approach'] = undefined;

/**
 * The URI for completing the upload.
 * @member {String} complete_uri
 */
VideoVersionsUpload.prototype['complete_uri'] = undefined;

/**
 * The HTML form for uploading a video through the post approach.
 * @member {String} form
 */
VideoVersionsUpload.prototype['form'] = undefined;

/**
 * The link of the video to capture through the pull approach.
 * @member {String} link
 */
VideoVersionsUpload.prototype['link'] = undefined;

/**
 * The redirect URL for the upload app.
 * @member {String} redirect_url
 */
VideoVersionsUpload.prototype['redirect_url'] = undefined;

/**
 * The file size in bytes of the uploaded video.
 * @member {Number} size
 */
VideoVersionsUpload.prototype['size'] = undefined;

/**
 * The status code for the availability of the uploaded video:  Option descriptions:  * `complete` - The upload is complete.  * `error` - The upload ended with an error.  * `in_progress` - The upload is underway. 
 * @member {module:model/VideoVersionsUpload.StatusEnum} status
 */
VideoVersionsUpload.prototype['status'] = undefined;

/**
 * The link for sending video file data.
 * @member {String} upload_link
 */
VideoVersionsUpload.prototype['upload_link'] = undefined;





/**
 * Allowed values for the <code>approach</code> property.
 * @enum {String}
 * @readonly
 */
VideoVersionsUpload['ApproachEnum'] = {

    /**
     * value: "post"
     * @const
     */
    "post": "post",

    /**
     * value: "pull"
     * @const
     */
    "pull": "pull",

    /**
     * value: "streaming"
     * @const
     */
    "streaming": "streaming",

    /**
     * value: "tus"
     * @const
     */
    "tus": "tus"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
VideoVersionsUpload['StatusEnum'] = {

    /**
     * value: "complete"
     * @const
     */
    "complete": "complete",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "in_progress"
     * @const
     */
    "in_progress": "in_progress"
};



export default VideoVersionsUpload;

