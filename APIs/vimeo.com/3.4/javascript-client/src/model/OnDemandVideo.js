/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OnDemandVideoBuy from './OnDemandVideoBuy';
import OnDemandVideoInteractions from './OnDemandVideoInteractions';
import OnDemandVideoMetadata from './OnDemandVideoMetadata';
import OnDemandVideoRent from './OnDemandVideoRent';
import Picture from './Picture';
import User from './User';

/**
 * The OnDemandVideo model module.
 * @module model/OnDemandVideo
 * @version 3.4
 */
class OnDemandVideo {
    /**
     * Constructs a new <code>OnDemandVideo</code>.
     * @alias module:model/OnDemandVideo
     * @param buy {module:model/OnDemandVideoBuy} 
     * @param interactions {module:model/OnDemandVideoInteractions} 
     * @param link {String} The link to this video on Vimeo.
     * @param metadata {module:model/OnDemandVideoMetadata} 
     * @param playProgress {Number} The user's most recent play position in seconds for this video.
     * @param releaseYear {Number} The year that this On Demand video was released.
     * @param rent {module:model/OnDemandVideoRent} 
     * @param type {module:model/OnDemandVideo.TypeEnum} The type of the On Demand video:  Option descriptions:  * `extra` - The On Demand video is an extra feature.  * `main` - The On Demand video is a main feature.  * `trailer` - The On Demand video is a trailer. 
     * @param uri {String} The video container's relative URI.
     */
    constructor(buy, interactions, link, metadata, playProgress, releaseYear, rent, type, uri) { 
        
        OnDemandVideo.initialize(this, buy, interactions, link, metadata, playProgress, releaseYear, rent, type, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, buy, interactions, link, metadata, playProgress, releaseYear, rent, type, uri) { 
        obj['buy'] = buy;
        obj['interactions'] = interactions;
        obj['link'] = link;
        obj['metadata'] = metadata;
        obj['play_progress'] = playProgress;
        obj['release_year'] = releaseYear;
        obj['rent'] = rent;
        obj['type'] = type;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>OnDemandVideo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OnDemandVideo} obj Optional instance to populate.
     * @return {module:model/OnDemandVideo} The populated <code>OnDemandVideo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OnDemandVideo();

            if (data.hasOwnProperty('buy')) {
                obj['buy'] = OnDemandVideoBuy.constructFromObject(data['buy']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('episode')) {
                obj['episode'] = ApiClient.convertToType(data['episode'], 'Number');
            }
            if (data.hasOwnProperty('interactions')) {
                obj['interactions'] = OnDemandVideoInteractions.constructFromObject(data['interactions']);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = OnDemandVideoMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], ['String']);
            }
            if (data.hasOwnProperty('pictures')) {
                obj['pictures'] = ApiClient.convertToType(data['pictures'], Picture);
            }
            if (data.hasOwnProperty('play_progress')) {
                obj['play_progress'] = ApiClient.convertToType(data['play_progress'], 'Number');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('release_date')) {
                obj['release_date'] = ApiClient.convertToType(data['release_date'], 'String');
            }
            if (data.hasOwnProperty('release_year')) {
                obj['release_year'] = ApiClient.convertToType(data['release_year'], 'Number');
            }
            if (data.hasOwnProperty('rent')) {
                obj['rent'] = OnDemandVideoRent.constructFromObject(data['rent']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], User);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OnDemandVideo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OnDemandVideo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OnDemandVideo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `buy`
        if (data['buy']) { // data not null
          OnDemandVideoBuy.validateJSON(data['buy']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // validate the optional field `interactions`
        if (data['interactions']) { // data not null
          OnDemandVideoInteractions.validateJSON(data['interactions']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          OnDemandVideoMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['options'])) {
            throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
        }
        // validate the optional field `pictures`
        if (data['pictures']) { // data not null
          Picture.validateJSON(data['pictures']);
        }
        // ensure the json data is a string
        if (data['release_date'] && !(typeof data['release_date'] === 'string' || data['release_date'] instanceof String)) {
            throw new Error("Expected the field `release_date` to be a primitive type in the JSON string but got " + data['release_date']);
        }
        // validate the optional field `rent`
        if (data['rent']) { // data not null
          OnDemandVideoRent.validateJSON(data['rent']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

OnDemandVideo.RequiredProperties = ["buy", "interactions", "link", "metadata", "play_progress", "release_year", "rent", "type", "uri"];

/**
 * @member {module:model/OnDemandVideoBuy} buy
 */
OnDemandVideo.prototype['buy'] = undefined;

/**
 * Description of the On Demand video.
 * @member {String} description
 */
OnDemandVideo.prototype['description'] = undefined;

/**
 * The duration of the On Demand video.
 * @member {String} duration
 */
OnDemandVideo.prototype['duration'] = undefined;

/**
 * The episode number of the On Demand video.
 * @member {Number} episode
 */
OnDemandVideo.prototype['episode'] = undefined;

/**
 * @member {module:model/OnDemandVideoInteractions} interactions
 */
OnDemandVideo.prototype['interactions'] = undefined;

/**
 * The link to this video on Vimeo.
 * @member {String} link
 */
OnDemandVideo.prototype['link'] = undefined;

/**
 * @member {module:model/OnDemandVideoMetadata} metadata
 */
OnDemandVideo.prototype['metadata'] = undefined;

/**
 * The title of the On Demand video.
 * @member {String} name
 */
OnDemandVideo.prototype['name'] = undefined;

/**
 * An array of HTTP methods permitted on this URI.
 * @member {Array.<String>} options
 */
OnDemandVideo.prototype['options'] = undefined;

/**
 * The active picture for this video.
 * @member {module:model/Picture} pictures
 */
OnDemandVideo.prototype['pictures'] = undefined;

/**
 * The user's most recent play position in seconds for this video.
 * @member {Number} play_progress
 */
OnDemandVideo.prototype['play_progress'] = undefined;

/**
 * Describes the manual position of this video relative to the other videos owned by this On Demand page.
 * @member {Number} position
 */
OnDemandVideo.prototype['position'] = undefined;

/**
 * The time in ISO 8601 format when the On Demand video was created or published.
 * @member {String} release_date
 */
OnDemandVideo.prototype['release_date'] = undefined;

/**
 * The year that this On Demand video was released.
 * @member {Number} release_year
 */
OnDemandVideo.prototype['release_year'] = undefined;

/**
 * @member {module:model/OnDemandVideoRent} rent
 */
OnDemandVideo.prototype['rent'] = undefined;

/**
 * The type of the On Demand video:  Option descriptions:  * `extra` - The On Demand video is an extra feature.  * `main` - The On Demand video is a main feature.  * `trailer` - The On Demand video is a trailer. 
 * @member {module:model/OnDemandVideo.TypeEnum} type
 */
OnDemandVideo.prototype['type'] = undefined;

/**
 * The video container's relative URI.
 * @member {String} uri
 */
OnDemandVideo.prototype['uri'] = undefined;

/**
 * The owner of the video.
 * @member {module:model/User} user
 */
OnDemandVideo.prototype['user'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
OnDemandVideo['TypeEnum'] = {

    /**
     * value: "extra"
     * @const
     */
    "extra": "extra",

    /**
     * value: "main"
     * @const
     */
    "main": "main",

    /**
     * value: "trailer"
     * @const
     */
    "trailer": "trailer"
};



export default OnDemandVideo;

