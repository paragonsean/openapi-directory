/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbedSettingsButtons from './EmbedSettingsButtons';
import EmbedSettingsLogos from './EmbedSettingsLogos';
import EmbedSettingsTitle from './EmbedSettingsTitle';

/**
 * The EmbedSettings model module.
 * @module model/EmbedSettings
 * @version 3.4
 */
class EmbedSettings {
    /**
     * Constructs a new <code>EmbedSettings</code>.
     * @alias module:model/EmbedSettings
     * @param buttons {module:model/EmbedSettingsButtons} 
     * @param color {String} The primary player color, which controls the color of the progress bar, buttons, and more.
     * @param logos {module:model/EmbedSettingsLogos} 
     * @param playbar {Boolean} Whether the playbar appears in the embeddable player for this video.
     * @param speed {Boolean} Whether the speed controls appear in the embeddable player for this video.
     * @param title {module:model/EmbedSettingsTitle} 
     * @param volume {Boolean} Whether the volume controls appear in the embeddable player for this video.
     */
    constructor(buttons, color, logos, playbar, speed, title, volume) { 
        
        EmbedSettings.initialize(this, buttons, color, logos, playbar, speed, title, volume);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, buttons, color, logos, playbar, speed, title, volume) { 
        obj['buttons'] = buttons;
        obj['color'] = color;
        obj['logos'] = logos;
        obj['playbar'] = playbar;
        obj['speed'] = speed;
        obj['title'] = title;
        obj['volume'] = volume;
    }

    /**
     * Constructs a <code>EmbedSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmbedSettings} obj Optional instance to populate.
     * @return {module:model/EmbedSettings} The populated <code>EmbedSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmbedSettings();

            if (data.hasOwnProperty('buttons')) {
                obj['buttons'] = EmbedSettingsButtons.constructFromObject(data['buttons']);
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('logos')) {
                obj['logos'] = EmbedSettingsLogos.constructFromObject(data['logos']);
            }
            if (data.hasOwnProperty('playbar')) {
                obj['playbar'] = ApiClient.convertToType(data['playbar'], 'Boolean');
            }
            if (data.hasOwnProperty('speed')) {
                obj['speed'] = ApiClient.convertToType(data['speed'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = EmbedSettingsTitle.constructFromObject(data['title']);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('volume')) {
                obj['volume'] = ApiClient.convertToType(data['volume'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmbedSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmbedSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EmbedSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `buttons`
        if (data['buttons']) { // data not null
          EmbedSettingsButtons.validateJSON(data['buttons']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // validate the optional field `logos`
        if (data['logos']) { // data not null
          EmbedSettingsLogos.validateJSON(data['logos']);
        }
        // validate the optional field `title`
        if (data['title']) { // data not null
          EmbedSettingsTitle.validateJSON(data['title']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

EmbedSettings.RequiredProperties = ["buttons", "color", "logos", "playbar", "speed", "title", "volume"];

/**
 * @member {module:model/EmbedSettingsButtons} buttons
 */
EmbedSettings.prototype['buttons'] = undefined;

/**
 * The primary player color, which controls the color of the progress bar, buttons, and more.
 * @member {String} color
 */
EmbedSettings.prototype['color'] = undefined;

/**
 * @member {module:model/EmbedSettingsLogos} logos
 */
EmbedSettings.prototype['logos'] = undefined;

/**
 * Whether the playbar appears in the embeddable player for this video.
 * @member {Boolean} playbar
 */
EmbedSettings.prototype['playbar'] = undefined;

/**
 * Whether the speed controls appear in the embeddable player for this video.
 * @member {Boolean} speed
 */
EmbedSettings.prototype['speed'] = undefined;

/**
 * @member {module:model/EmbedSettingsTitle} title
 */
EmbedSettings.prototype['title'] = undefined;

/**
 * The URI of the embed preset.
 * @member {String} uri
 */
EmbedSettings.prototype['uri'] = undefined;

/**
 * Whether the volume controls appear in the embeddable player for this video.
 * @member {Boolean} volume
 */
EmbedSettings.prototype['volume'] = undefined;






export default EmbedSettings;

