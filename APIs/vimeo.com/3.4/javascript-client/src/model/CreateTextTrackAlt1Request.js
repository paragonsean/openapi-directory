/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateTextTrackAlt1Request model module.
 * @module model/CreateTextTrackAlt1Request
 * @version 3.4
 */
class CreateTextTrackAlt1Request {
    /**
     * Constructs a new <code>CreateTextTrackAlt1Request</code>.
     * @alias module:model/CreateTextTrackAlt1Request
     * @param language {String} The language of the text track. For a complete list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.
     * @param name {String} The name of the text track.
     * @param type {module:model/CreateTextTrackAlt1Request.TypeEnum} The type of the text track.
     */
    constructor(language, name, type) { 
        
        CreateTextTrackAlt1Request.initialize(this, language, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, language, name, type) { 
        obj['language'] = language;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CreateTextTrackAlt1Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateTextTrackAlt1Request} obj Optional instance to populate.
     * @return {module:model/CreateTextTrackAlt1Request} The populated <code>CreateTextTrackAlt1Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateTextTrackAlt1Request();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateTextTrackAlt1Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateTextTrackAlt1Request</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateTextTrackAlt1Request.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

CreateTextTrackAlt1Request.RequiredProperties = ["language", "name", "type"];

/**
 * Active text tracks appear in the player and are visible to other users. Only one text track per language can be active.
 * @member {Boolean} active
 */
CreateTextTrackAlt1Request.prototype['active'] = undefined;

/**
 * The language of the text track. For a complete list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.
 * @member {String} language
 */
CreateTextTrackAlt1Request.prototype['language'] = undefined;

/**
 * The name of the text track.
 * @member {String} name
 */
CreateTextTrackAlt1Request.prototype['name'] = undefined;

/**
 * The type of the text track.
 * @member {module:model/CreateTextTrackAlt1Request.TypeEnum} type
 */
CreateTextTrackAlt1Request.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CreateTextTrackAlt1Request['TypeEnum'] = {

    /**
     * value: "captions"
     * @const
     */
    "captions": "captions",

    /**
     * value: "chapters"
     * @const
     */
    "chapters": "chapters",

    /**
     * value: "descriptions"
     * @const
     */
    "descriptions": "descriptions",

    /**
     * value: "metadata"
     * @const
     */
    "metadata": "metadata",

    /**
     * value: "subtitles"
     * @const
     */
    "subtitles": "subtitles"
};



export default CreateTextTrackAlt1Request;

