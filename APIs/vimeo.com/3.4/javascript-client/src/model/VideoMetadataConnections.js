/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VideoMetadataConnectionsComments from './VideoMetadataConnectionsComments';
import VideoMetadataConnectionsCredits from './VideoMetadataConnectionsCredits';
import VideoMetadataConnectionsLikes from './VideoMetadataConnectionsLikes';
import VideoMetadataConnectionsOndemand from './VideoMetadataConnectionsOndemand';
import VideoMetadataConnectionsPictures from './VideoMetadataConnectionsPictures';
import VideoMetadataConnectionsPlayback from './VideoMetadataConnectionsPlayback';
import VideoMetadataConnectionsRecommendations from './VideoMetadataConnectionsRecommendations';
import VideoMetadataConnectionsRelated from './VideoMetadataConnectionsRelated';
import VideoMetadataConnectionsSeason from './VideoMetadataConnectionsSeason';
import VideoMetadataConnectionsTexttracks from './VideoMetadataConnectionsTexttracks';
import VideoMetadataConnectionsTrailer from './VideoMetadataConnectionsTrailer';
import VideoMetadataConnectionsUsersWithAccess from './VideoMetadataConnectionsUsersWithAccess';
import VideoMetadataConnectionsVersions from './VideoMetadataConnectionsVersions';

/**
 * The VideoMetadataConnections model module.
 * @module model/VideoMetadataConnections
 * @version 3.4
 */
class VideoMetadataConnections {
    /**
     * Constructs a new <code>VideoMetadataConnections</code>.
     * A list of resource URIs related to the video.
     * @alias module:model/VideoMetadataConnections
     * @param comments {module:model/VideoMetadataConnectionsComments} 
     * @param credits {module:model/VideoMetadataConnectionsCredits} 
     * @param likes {module:model/VideoMetadataConnectionsLikes} 
     * @param ondemand {module:model/VideoMetadataConnectionsOndemand} 
     * @param pictures {module:model/VideoMetadataConnectionsPictures} 
     * @param playback {module:model/VideoMetadataConnectionsPlayback} 
     * @param recommendations {module:model/VideoMetadataConnectionsRecommendations} 
     * @param related {module:model/VideoMetadataConnectionsRelated} 
     * @param season {module:model/VideoMetadataConnectionsSeason} 
     * @param texttracks {module:model/VideoMetadataConnectionsTexttracks} 
     * @param trailer {module:model/VideoMetadataConnectionsTrailer} 
     * @param usersWithAccess {module:model/VideoMetadataConnectionsUsersWithAccess} 
     * @param versions {module:model/VideoMetadataConnectionsVersions} 
     */
    constructor(comments, credits, likes, ondemand, pictures, playback, recommendations, related, season, texttracks, trailer, usersWithAccess, versions) { 
        
        VideoMetadataConnections.initialize(this, comments, credits, likes, ondemand, pictures, playback, recommendations, related, season, texttracks, trailer, usersWithAccess, versions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, comments, credits, likes, ondemand, pictures, playback, recommendations, related, season, texttracks, trailer, usersWithAccess, versions) { 
        obj['comments'] = comments;
        obj['credits'] = credits;
        obj['likes'] = likes;
        obj['ondemand'] = ondemand;
        obj['pictures'] = pictures;
        obj['playback'] = playback;
        obj['recommendations'] = recommendations;
        obj['related'] = related;
        obj['season'] = season;
        obj['texttracks'] = texttracks;
        obj['trailer'] = trailer;
        obj['users_with_access'] = usersWithAccess;
        obj['versions'] = versions;
    }

    /**
     * Constructs a <code>VideoMetadataConnections</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoMetadataConnections} obj Optional instance to populate.
     * @return {module:model/VideoMetadataConnections} The populated <code>VideoMetadataConnections</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoMetadataConnections();

            if (data.hasOwnProperty('comments')) {
                obj['comments'] = VideoMetadataConnectionsComments.constructFromObject(data['comments']);
            }
            if (data.hasOwnProperty('credits')) {
                obj['credits'] = VideoMetadataConnectionsCredits.constructFromObject(data['credits']);
            }
            if (data.hasOwnProperty('likes')) {
                obj['likes'] = VideoMetadataConnectionsLikes.constructFromObject(data['likes']);
            }
            if (data.hasOwnProperty('ondemand')) {
                obj['ondemand'] = VideoMetadataConnectionsOndemand.constructFromObject(data['ondemand']);
            }
            if (data.hasOwnProperty('pictures')) {
                obj['pictures'] = VideoMetadataConnectionsPictures.constructFromObject(data['pictures']);
            }
            if (data.hasOwnProperty('playback')) {
                obj['playback'] = VideoMetadataConnectionsPlayback.constructFromObject(data['playback']);
            }
            if (data.hasOwnProperty('recommendations')) {
                obj['recommendations'] = VideoMetadataConnectionsRecommendations.constructFromObject(data['recommendations']);
            }
            if (data.hasOwnProperty('related')) {
                obj['related'] = VideoMetadataConnectionsRelated.constructFromObject(data['related']);
            }
            if (data.hasOwnProperty('season')) {
                obj['season'] = VideoMetadataConnectionsSeason.constructFromObject(data['season']);
            }
            if (data.hasOwnProperty('texttracks')) {
                obj['texttracks'] = VideoMetadataConnectionsTexttracks.constructFromObject(data['texttracks']);
            }
            if (data.hasOwnProperty('trailer')) {
                obj['trailer'] = VideoMetadataConnectionsTrailer.constructFromObject(data['trailer']);
            }
            if (data.hasOwnProperty('users_with_access')) {
                obj['users_with_access'] = VideoMetadataConnectionsUsersWithAccess.constructFromObject(data['users_with_access']);
            }
            if (data.hasOwnProperty('versions')) {
                obj['versions'] = VideoMetadataConnectionsVersions.constructFromObject(data['versions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoMetadataConnections</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoMetadataConnections</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VideoMetadataConnections.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `comments`
        if (data['comments']) { // data not null
          VideoMetadataConnectionsComments.validateJSON(data['comments']);
        }
        // validate the optional field `credits`
        if (data['credits']) { // data not null
          VideoMetadataConnectionsCredits.validateJSON(data['credits']);
        }
        // validate the optional field `likes`
        if (data['likes']) { // data not null
          VideoMetadataConnectionsLikes.validateJSON(data['likes']);
        }
        // validate the optional field `ondemand`
        if (data['ondemand']) { // data not null
          VideoMetadataConnectionsOndemand.validateJSON(data['ondemand']);
        }
        // validate the optional field `pictures`
        if (data['pictures']) { // data not null
          VideoMetadataConnectionsPictures.validateJSON(data['pictures']);
        }
        // validate the optional field `playback`
        if (data['playback']) { // data not null
          VideoMetadataConnectionsPlayback.validateJSON(data['playback']);
        }
        // validate the optional field `recommendations`
        if (data['recommendations']) { // data not null
          VideoMetadataConnectionsRecommendations.validateJSON(data['recommendations']);
        }
        // validate the optional field `related`
        if (data['related']) { // data not null
          VideoMetadataConnectionsRelated.validateJSON(data['related']);
        }
        // validate the optional field `season`
        if (data['season']) { // data not null
          VideoMetadataConnectionsSeason.validateJSON(data['season']);
        }
        // validate the optional field `texttracks`
        if (data['texttracks']) { // data not null
          VideoMetadataConnectionsTexttracks.validateJSON(data['texttracks']);
        }
        // validate the optional field `trailer`
        if (data['trailer']) { // data not null
          VideoMetadataConnectionsTrailer.validateJSON(data['trailer']);
        }
        // validate the optional field `users_with_access`
        if (data['users_with_access']) { // data not null
          VideoMetadataConnectionsUsersWithAccess.validateJSON(data['users_with_access']);
        }
        // validate the optional field `versions`
        if (data['versions']) { // data not null
          VideoMetadataConnectionsVersions.validateJSON(data['versions']);
        }

        return true;
    }


}

VideoMetadataConnections.RequiredProperties = ["comments", "credits", "likes", "ondemand", "pictures", "playback", "recommendations", "related", "season", "texttracks", "trailer", "users_with_access", "versions"];

/**
 * @member {module:model/VideoMetadataConnectionsComments} comments
 */
VideoMetadataConnections.prototype['comments'] = undefined;

/**
 * @member {module:model/VideoMetadataConnectionsCredits} credits
 */
VideoMetadataConnections.prototype['credits'] = undefined;

/**
 * @member {module:model/VideoMetadataConnectionsLikes} likes
 */
VideoMetadataConnections.prototype['likes'] = undefined;

/**
 * @member {module:model/VideoMetadataConnectionsOndemand} ondemand
 */
VideoMetadataConnections.prototype['ondemand'] = undefined;

/**
 * @member {module:model/VideoMetadataConnectionsPictures} pictures
 */
VideoMetadataConnections.prototype['pictures'] = undefined;

/**
 * @member {module:model/VideoMetadataConnectionsPlayback} playback
 */
VideoMetadataConnections.prototype['playback'] = undefined;

/**
 * @member {module:model/VideoMetadataConnectionsRecommendations} recommendations
 */
VideoMetadataConnections.prototype['recommendations'] = undefined;

/**
 * @member {module:model/VideoMetadataConnectionsRelated} related
 */
VideoMetadataConnections.prototype['related'] = undefined;

/**
 * @member {module:model/VideoMetadataConnectionsSeason} season
 */
VideoMetadataConnections.prototype['season'] = undefined;

/**
 * @member {module:model/VideoMetadataConnectionsTexttracks} texttracks
 */
VideoMetadataConnections.prototype['texttracks'] = undefined;

/**
 * @member {module:model/VideoMetadataConnectionsTrailer} trailer
 */
VideoMetadataConnections.prototype['trailer'] = undefined;

/**
 * @member {module:model/VideoMetadataConnectionsUsersWithAccess} users_with_access
 */
VideoMetadataConnections.prototype['users_with_access'] = undefined;

/**
 * @member {module:model/VideoMetadataConnectionsVersions} versions
 */
VideoMetadataConnections.prototype['versions'] = undefined;






export default VideoMetadataConnections;

