/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GroupPrivacy model module.
 * @module model/GroupPrivacy
 * @version 3.4
 */
class GroupPrivacy {
    /**
     * Constructs a new <code>GroupPrivacy</code>.
     * The group&#39;s privacy settings.
     * @alias module:model/GroupPrivacy
     * @param comment {module:model/GroupPrivacy.CommentEnum} Who can comment on the group:  Option descriptions:  * `all` - Anyone can comment on the group.  * `members` - Only members can comment on the group. 
     * @param invite {module:model/GroupPrivacy.InviteEnum} Who can invite new members to the group:  Option descriptions:  * `all` - Anyone can invite new members to join.  * `members` - Only group members can invite new members to join. 
     * @param join {module:model/GroupPrivacy.JoinEnum} Who can join the group:  Option descriptions:  * `anybody` - Anyone can join the group.  * `members` - Only people with a Vimeo account can join the group. 
     * @param videos {module:model/GroupPrivacy.VideosEnum} Who can add videos to the group:  Option descriptions:  * `all` - Anyone can add videos to the group.  * `members` - Only group members can add videos to the group. 
     * @param view {module:model/GroupPrivacy.ViewEnum} Who can view the group:  Option descriptions:  * `anybody` - Anyone can view the group.  * `members` - Only group members can view the group. 
     */
    constructor(comment, invite, join, videos, view) { 
        
        GroupPrivacy.initialize(this, comment, invite, join, videos, view);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, comment, invite, join, videos, view) { 
        obj['comment'] = comment;
        obj['invite'] = invite;
        obj['join'] = join;
        obj['videos'] = videos;
        obj['view'] = view;
    }

    /**
     * Constructs a <code>GroupPrivacy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupPrivacy} obj Optional instance to populate.
     * @return {module:model/GroupPrivacy} The populated <code>GroupPrivacy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupPrivacy();

            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('invite')) {
                obj['invite'] = ApiClient.convertToType(data['invite'], 'String');
            }
            if (data.hasOwnProperty('join')) {
                obj['join'] = ApiClient.convertToType(data['join'], 'String');
            }
            if (data.hasOwnProperty('videos')) {
                obj['videos'] = ApiClient.convertToType(data['videos'], 'String');
            }
            if (data.hasOwnProperty('view')) {
                obj['view'] = ApiClient.convertToType(data['view'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupPrivacy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupPrivacy</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GroupPrivacy.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['invite'] && !(typeof data['invite'] === 'string' || data['invite'] instanceof String)) {
            throw new Error("Expected the field `invite` to be a primitive type in the JSON string but got " + data['invite']);
        }
        // ensure the json data is a string
        if (data['join'] && !(typeof data['join'] === 'string' || data['join'] instanceof String)) {
            throw new Error("Expected the field `join` to be a primitive type in the JSON string but got " + data['join']);
        }
        // ensure the json data is a string
        if (data['videos'] && !(typeof data['videos'] === 'string' || data['videos'] instanceof String)) {
            throw new Error("Expected the field `videos` to be a primitive type in the JSON string but got " + data['videos']);
        }
        // ensure the json data is a string
        if (data['view'] && !(typeof data['view'] === 'string' || data['view'] instanceof String)) {
            throw new Error("Expected the field `view` to be a primitive type in the JSON string but got " + data['view']);
        }

        return true;
    }


}

GroupPrivacy.RequiredProperties = ["comment", "invite", "join", "videos", "view"];

/**
 * Who can comment on the group:  Option descriptions:  * `all` - Anyone can comment on the group.  * `members` - Only members can comment on the group. 
 * @member {module:model/GroupPrivacy.CommentEnum} comment
 */
GroupPrivacy.prototype['comment'] = undefined;

/**
 * Who can invite new members to the group:  Option descriptions:  * `all` - Anyone can invite new members to join.  * `members` - Only group members can invite new members to join. 
 * @member {module:model/GroupPrivacy.InviteEnum} invite
 */
GroupPrivacy.prototype['invite'] = undefined;

/**
 * Who can join the group:  Option descriptions:  * `anybody` - Anyone can join the group.  * `members` - Only people with a Vimeo account can join the group. 
 * @member {module:model/GroupPrivacy.JoinEnum} join
 */
GroupPrivacy.prototype['join'] = undefined;

/**
 * Who can add videos to the group:  Option descriptions:  * `all` - Anyone can add videos to the group.  * `members` - Only group members can add videos to the group. 
 * @member {module:model/GroupPrivacy.VideosEnum} videos
 */
GroupPrivacy.prototype['videos'] = undefined;

/**
 * Who can view the group:  Option descriptions:  * `anybody` - Anyone can view the group.  * `members` - Only group members can view the group. 
 * @member {module:model/GroupPrivacy.ViewEnum} view
 */
GroupPrivacy.prototype['view'] = undefined;





/**
 * Allowed values for the <code>comment</code> property.
 * @enum {String}
 * @readonly
 */
GroupPrivacy['CommentEnum'] = {

    /**
     * value: "all"
     * @const
     */
    "all": "all",

    /**
     * value: "members"
     * @const
     */
    "members": "members"
};


/**
 * Allowed values for the <code>invite</code> property.
 * @enum {String}
 * @readonly
 */
GroupPrivacy['InviteEnum'] = {

    /**
     * value: "all"
     * @const
     */
    "all": "all",

    /**
     * value: "members"
     * @const
     */
    "members": "members"
};


/**
 * Allowed values for the <code>join</code> property.
 * @enum {String}
 * @readonly
 */
GroupPrivacy['JoinEnum'] = {

    /**
     * value: "anybody"
     * @const
     */
    "anybody": "anybody",

    /**
     * value: "members"
     * @const
     */
    "members": "members"
};


/**
 * Allowed values for the <code>videos</code> property.
 * @enum {String}
 * @readonly
 */
GroupPrivacy['VideosEnum'] = {

    /**
     * value: "all"
     * @const
     */
    "all": "all",

    /**
     * value: "members"
     * @const
     */
    "members": "members"
};


/**
 * Allowed values for the <code>view</code> property.
 * @enum {String}
 * @readonly
 */
GroupPrivacy['ViewEnum'] = {

    /**
     * value: "anybody"
     * @const
     */
    "anybody": "anybody",

    /**
     * value: "members"
     * @const
     */
    "members": "members"
};



export default GroupPrivacy;

