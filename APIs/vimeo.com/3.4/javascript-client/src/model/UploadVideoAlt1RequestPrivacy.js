/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadVideoAlt1RequestPrivacy model module.
 * @module model/UploadVideoAlt1RequestPrivacy
 * @version 3.4
 */
class UploadVideoAlt1RequestPrivacy {
    /**
     * Constructs a new <code>UploadVideoAlt1RequestPrivacy</code>.
     * @alias module:model/UploadVideoAlt1RequestPrivacy
     */
    constructor() { 
        
        UploadVideoAlt1RequestPrivacy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UploadVideoAlt1RequestPrivacy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadVideoAlt1RequestPrivacy} obj Optional instance to populate.
     * @return {module:model/UploadVideoAlt1RequestPrivacy} The populated <code>UploadVideoAlt1RequestPrivacy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadVideoAlt1RequestPrivacy();

            if (data.hasOwnProperty('add')) {
                obj['add'] = ApiClient.convertToType(data['add'], 'Boolean');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('download')) {
                obj['download'] = ApiClient.convertToType(data['download'], 'Boolean');
            }
            if (data.hasOwnProperty('embed')) {
                obj['embed'] = ApiClient.convertToType(data['embed'], 'String');
            }
            if (data.hasOwnProperty('view')) {
                obj['view'] = ApiClient.convertToType(data['view'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadVideoAlt1RequestPrivacy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadVideoAlt1RequestPrivacy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['embed'] && !(typeof data['embed'] === 'string' || data['embed'] instanceof String)) {
            throw new Error("Expected the field `embed` to be a primitive type in the JSON string but got " + data['embed']);
        }
        // ensure the json data is a string
        if (data['view'] && !(typeof data['view'] === 'string' || data['view'] instanceof String)) {
            throw new Error("Expected the field `view` to be a primitive type in the JSON string but got " + data['view']);
        }

        return true;
    }


}



/**
 * Whether a user can add the video to an album, channel, or group.
 * @member {Boolean} add
 */
UploadVideoAlt1RequestPrivacy.prototype['add'] = undefined;

/**
 * The privacy level required to comment on the video.
 * @member {module:model/UploadVideoAlt1RequestPrivacy.CommentsEnum} comments
 */
UploadVideoAlt1RequestPrivacy.prototype['comments'] = undefined;

/**
 * Whether a user can download the video. Not available to users with a Basic membership
 * @member {Boolean} download
 */
UploadVideoAlt1RequestPrivacy.prototype['download'] = undefined;

/**
 * The video's embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains.
 * @member {module:model/UploadVideoAlt1RequestPrivacy.EmbedEnum} embed
 */
UploadVideoAlt1RequestPrivacy.prototype['embed'] = undefined;

/**
 * The video's privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`.
 * @member {module:model/UploadVideoAlt1RequestPrivacy.ViewEnum} view
 */
UploadVideoAlt1RequestPrivacy.prototype['view'] = undefined;





/**
 * Allowed values for the <code>comments</code> property.
 * @enum {String}
 * @readonly
 */
UploadVideoAlt1RequestPrivacy['CommentsEnum'] = {

    /**
     * value: "anybody"
     * @const
     */
    "anybody": "anybody",

    /**
     * value: "contacts"
     * @const
     */
    "contacts": "contacts",

    /**
     * value: "nobody"
     * @const
     */
    "nobody": "nobody"
};


/**
 * Allowed values for the <code>embed</code> property.
 * @enum {String}
 * @readonly
 */
UploadVideoAlt1RequestPrivacy['EmbedEnum'] = {

    /**
     * value: "private"
     * @const
     */
    "private": "private",

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "whitelist"
     * @const
     */
    "whitelist": "whitelist"
};


/**
 * Allowed values for the <code>view</code> property.
 * @enum {String}
 * @readonly
 */
UploadVideoAlt1RequestPrivacy['ViewEnum'] = {

    /**
     * value: "anybody"
     * @const
     */
    "anybody": "anybody",

    /**
     * value: "contacts"
     * @const
     */
    "contacts": "contacts",

    /**
     * value: "disable"
     * @const
     */
    "disable": "disable",

    /**
     * value: "nobody"
     * @const
     */
    "nobody": "nobody",

    /**
     * value: "password"
     * @const
     */
    "password": "password",

    /**
     * value: "unlisted"
     * @const
     */
    "unlisted": "unlisted",

    /**
     * value: "users"
     * @const
     */
    "users": "users"
};



export default UploadVideoAlt1RequestPrivacy;

