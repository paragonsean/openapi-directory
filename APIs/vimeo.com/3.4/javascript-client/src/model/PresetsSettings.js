/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PresetsSettingsButtons from './PresetsSettingsButtons';
import PresetsSettingsLogos from './PresetsSettingsLogos';
import PresetsSettingsOutro from './PresetsSettingsOutro';

/**
 * The PresetsSettings model module.
 * @module model/PresetsSettings
 * @version 3.4
 */
class PresetsSettings {
    /**
     * Constructs a new <code>PresetsSettings</code>.
     * The contents of the presets group.
     * @alias module:model/PresetsSettings
     * @param buttons {module:model/PresetsSettingsButtons} 
     * @param logos {module:model/PresetsSettingsLogos} 
     * @param outro {module:model/PresetsSettingsOutro} 
     */
    constructor(buttons, logos, outro) { 
        
        PresetsSettings.initialize(this, buttons, logos, outro);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, buttons, logos, outro) { 
        obj['buttons'] = buttons;
        obj['logos'] = logos;
        obj['outro'] = outro;
    }

    /**
     * Constructs a <code>PresetsSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PresetsSettings} obj Optional instance to populate.
     * @return {module:model/PresetsSettings} The populated <code>PresetsSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PresetsSettings();

            if (data.hasOwnProperty('buttons')) {
                obj['buttons'] = PresetsSettingsButtons.constructFromObject(data['buttons']);
            }
            if (data.hasOwnProperty('logos')) {
                obj['logos'] = PresetsSettingsLogos.constructFromObject(data['logos']);
            }
            if (data.hasOwnProperty('outro')) {
                obj['outro'] = PresetsSettingsOutro.constructFromObject(data['outro']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PresetsSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PresetsSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PresetsSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `buttons`
        if (data['buttons']) { // data not null
          PresetsSettingsButtons.validateJSON(data['buttons']);
        }
        // validate the optional field `logos`
        if (data['logos']) { // data not null
          PresetsSettingsLogos.validateJSON(data['logos']);
        }
        // validate the optional field `outro`
        if (data['outro']) { // data not null
          PresetsSettingsOutro.validateJSON(data['outro']);
        }

        return true;
    }


}

PresetsSettings.RequiredProperties = ["buttons", "logos", "outro"];

/**
 * @member {module:model/PresetsSettingsButtons} buttons
 */
PresetsSettings.prototype['buttons'] = undefined;

/**
 * @member {module:model/PresetsSettingsLogos} logos
 */
PresetsSettings.prototype['logos'] = undefined;

/**
 * @member {module:model/PresetsSettingsOutro} outro
 */
PresetsSettings.prototype['outro'] = undefined;






export default PresetsSettings;

