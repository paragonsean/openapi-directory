/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UploadVideoAlt1RequestEmbedButtons from './UploadVideoAlt1RequestEmbedButtons';
import UploadVideoAlt1RequestEmbedLogos from './UploadVideoAlt1RequestEmbedLogos';
import UploadVideoAlt1RequestEmbedTitle from './UploadVideoAlt1RequestEmbedTitle';

/**
 * The UploadVideoAlt1RequestEmbed model module.
 * @module model/UploadVideoAlt1RequestEmbed
 * @version 3.4
 */
class UploadVideoAlt1RequestEmbed {
    /**
     * Constructs a new <code>UploadVideoAlt1RequestEmbed</code>.
     * @alias module:model/UploadVideoAlt1RequestEmbed
     */
    constructor() { 
        
        UploadVideoAlt1RequestEmbed.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UploadVideoAlt1RequestEmbed</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadVideoAlt1RequestEmbed} obj Optional instance to populate.
     * @return {module:model/UploadVideoAlt1RequestEmbed} The populated <code>UploadVideoAlt1RequestEmbed</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadVideoAlt1RequestEmbed();

            if (data.hasOwnProperty('buttons')) {
                obj['buttons'] = UploadVideoAlt1RequestEmbedButtons.constructFromObject(data['buttons']);
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('logos')) {
                obj['logos'] = UploadVideoAlt1RequestEmbedLogos.constructFromObject(data['logos']);
            }
            if (data.hasOwnProperty('playbar')) {
                obj['playbar'] = ApiClient.convertToType(data['playbar'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = UploadVideoAlt1RequestEmbedTitle.constructFromObject(data['title']);
            }
            if (data.hasOwnProperty('volume')) {
                obj['volume'] = ApiClient.convertToType(data['volume'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadVideoAlt1RequestEmbed</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadVideoAlt1RequestEmbed</code>.
     */
    static validateJSON(data) {
        // validate the optional field `buttons`
        if (data['buttons']) { // data not null
          UploadVideoAlt1RequestEmbedButtons.validateJSON(data['buttons']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // validate the optional field `logos`
        if (data['logos']) { // data not null
          UploadVideoAlt1RequestEmbedLogos.validateJSON(data['logos']);
        }
        // validate the optional field `title`
        if (data['title']) { // data not null
          UploadVideoAlt1RequestEmbedTitle.validateJSON(data['title']);
        }

        return true;
    }


}



/**
 * @member {module:model/UploadVideoAlt1RequestEmbedButtons} buttons
 */
UploadVideoAlt1RequestEmbed.prototype['buttons'] = undefined;

/**
 * The main color of the embed player.
 * @member {String} color
 */
UploadVideoAlt1RequestEmbed.prototype['color'] = undefined;

/**
 * @member {module:model/UploadVideoAlt1RequestEmbedLogos} logos
 */
UploadVideoAlt1RequestEmbed.prototype['logos'] = undefined;

/**
 * Show or hide the playbar.
 * @member {Boolean} playbar
 */
UploadVideoAlt1RequestEmbed.prototype['playbar'] = undefined;

/**
 * @member {module:model/UploadVideoAlt1RequestEmbedTitle} title
 */
UploadVideoAlt1RequestEmbed.prototype['title'] = undefined;

/**
 * Show or hide the volume selector.
 * @member {Boolean} volume
 */
UploadVideoAlt1RequestEmbed.prototype['volume'] = undefined;






export default UploadVideoAlt1RequestEmbed;

