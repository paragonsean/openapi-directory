/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AlbumPrivacy model module.
 * @module model/AlbumPrivacy
 * @version 3.4
 */
class AlbumPrivacy {
    /**
     * Constructs a new <code>AlbumPrivacy</code>.
     * The privacy settings of the album.
     * @alias module:model/AlbumPrivacy
     * @param view {module:model/AlbumPrivacy.ViewEnum} Who can view the album:  Option descriptions:  * `anybody` - Anyone can view the album.  * `embed_only` - Only owner can see album, can be embedded off-site  * `password` - Only those with the password can view the album. 
     */
    constructor(view) { 
        
        AlbumPrivacy.initialize(this, view);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, view) { 
        obj['view'] = view;
    }

    /**
     * Constructs a <code>AlbumPrivacy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlbumPrivacy} obj Optional instance to populate.
     * @return {module:model/AlbumPrivacy} The populated <code>AlbumPrivacy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlbumPrivacy();

            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('view')) {
                obj['view'] = ApiClient.convertToType(data['view'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlbumPrivacy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlbumPrivacy</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AlbumPrivacy.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['view'] && !(typeof data['view'] === 'string' || data['view'] instanceof String)) {
            throw new Error("Expected the field `view` to be a primitive type in the JSON string but got " + data['view']);
        }

        return true;
    }


}

AlbumPrivacy.RequiredProperties = ["view"];

/**
 * The privacy-enabled password to see this album. Present only when `privacy.view` is `password`.
 * @member {String} password
 */
AlbumPrivacy.prototype['password'] = undefined;

/**
 * Who can view the album:  Option descriptions:  * `anybody` - Anyone can view the album.  * `embed_only` - Only owner can see album, can be embedded off-site  * `password` - Only those with the password can view the album. 
 * @member {module:model/AlbumPrivacy.ViewEnum} view
 */
AlbumPrivacy.prototype['view'] = undefined;





/**
 * Allowed values for the <code>view</code> property.
 * @enum {String}
 * @readonly
 */
AlbumPrivacy['ViewEnum'] = {

    /**
     * value: "anybody"
     * @const
     */
    "anybody": "anybody",

    /**
     * value: "embed_only"
     * @const
     */
    "embed_only": "embed_only",

    /**
     * value: "password"
     * @const
     */
    "password": "password"
};



export default AlbumPrivacy;

