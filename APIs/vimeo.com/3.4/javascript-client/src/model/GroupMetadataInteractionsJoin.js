/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GroupMetadataInteractionsJoin model module.
 * @module model/GroupMetadataInteractionsJoin
 * @version 3.4
 */
class GroupMetadataInteractionsJoin {
    /**
     * Constructs a new <code>GroupMetadataInteractionsJoin</code>.
     * An action indicating that someone has joined the group. This data requires a bearer token with the &#x60;private&#x60; scope.
     * @alias module:model/GroupMetadataInteractionsJoin
     * @param added {Boolean} Whether the authenticated user has followed this group. This data requires a bearer token with the `private` scope.
     * @param addedTime {String} The time in ISO 8601 format when the user joined this group. This data requires a bearer token with the `private` scope.
     * @param title {String} The user's title, or the null value if not applicable. This data requires a bearer token with the `private` scope.
     * @param type {module:model/GroupMetadataInteractionsJoin.TypeEnum} Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.  Option descriptions:  * `member` - The authenticated user is a member.  * `moderator` - The authenticated user is a moderator. 
     * @param uri {String} The URI for following. PUT to this URI to follow, or DELETE to this URI to unfollow. This data requires a bearer token with the `private` scope.
     */
    constructor(added, addedTime, title, type, uri) { 
        
        GroupMetadataInteractionsJoin.initialize(this, added, addedTime, title, type, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, added, addedTime, title, type, uri) { 
        obj['added'] = added;
        obj['added_time'] = addedTime;
        obj['title'] = title;
        obj['type'] = type;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>GroupMetadataInteractionsJoin</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupMetadataInteractionsJoin} obj Optional instance to populate.
     * @return {module:model/GroupMetadataInteractionsJoin} The populated <code>GroupMetadataInteractionsJoin</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupMetadataInteractionsJoin();

            if (data.hasOwnProperty('added')) {
                obj['added'] = ApiClient.convertToType(data['added'], 'Boolean');
            }
            if (data.hasOwnProperty('added_time')) {
                obj['added_time'] = ApiClient.convertToType(data['added_time'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupMetadataInteractionsJoin</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupMetadataInteractionsJoin</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GroupMetadataInteractionsJoin.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['added_time'] && !(typeof data['added_time'] === 'string' || data['added_time'] instanceof String)) {
            throw new Error("Expected the field `added_time` to be a primitive type in the JSON string but got " + data['added_time']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

GroupMetadataInteractionsJoin.RequiredProperties = ["added", "added_time", "title", "type", "uri"];

/**
 * Whether the authenticated user has followed this group. This data requires a bearer token with the `private` scope.
 * @member {Boolean} added
 */
GroupMetadataInteractionsJoin.prototype['added'] = undefined;

/**
 * The time in ISO 8601 format when the user joined this group. This data requires a bearer token with the `private` scope.
 * @member {String} added_time
 */
GroupMetadataInteractionsJoin.prototype['added_time'] = undefined;

/**
 * The user's title, or the null value if not applicable. This data requires a bearer token with the `private` scope.
 * @member {String} title
 */
GroupMetadataInteractionsJoin.prototype['title'] = undefined;

/**
 * Whether the authenticated user is a moderator or subscriber. This data requires a bearer token with the `private` scope.  Option descriptions:  * `member` - The authenticated user is a member.  * `moderator` - The authenticated user is a moderator. 
 * @member {module:model/GroupMetadataInteractionsJoin.TypeEnum} type
 */
GroupMetadataInteractionsJoin.prototype['type'] = undefined;

/**
 * The URI for following. PUT to this URI to follow, or DELETE to this URI to unfollow. This data requires a bearer token with the `private` scope.
 * @member {String} uri
 */
GroupMetadataInteractionsJoin.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GroupMetadataInteractionsJoin['TypeEnum'] = {

    /**
     * value: "member"
     * @const
     */
    "member": "member",

    /**
     * value: "moderator"
     * @const
     */
    "moderator": "moderator"
};



export default GroupMetadataInteractionsJoin;

