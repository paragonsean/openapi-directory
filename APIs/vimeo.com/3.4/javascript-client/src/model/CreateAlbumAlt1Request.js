/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateAlbumAlt1Request model module.
 * @module model/CreateAlbumAlt1Request
 * @version 3.4
 */
class CreateAlbumAlt1Request {
    /**
     * Constructs a new <code>CreateAlbumAlt1Request</code>.
     * @alias module:model/CreateAlbumAlt1Request
     * @param name {String} The name of the album.
     */
    constructor(name) { 
        
        CreateAlbumAlt1Request.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateAlbumAlt1Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAlbumAlt1Request} obj Optional instance to populate.
     * @return {module:model/CreateAlbumAlt1Request} The populated <code>CreateAlbumAlt1Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateAlbumAlt1Request();

            if (data.hasOwnProperty('brand_color')) {
                obj['brand_color'] = ApiClient.convertToType(data['brand_color'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('hide_nav')) {
                obj['hide_nav'] = ApiClient.convertToType(data['hide_nav'], 'Boolean');
            }
            if (data.hasOwnProperty('layout')) {
                obj['layout'] = ApiClient.convertToType(data['layout'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('privacy')) {
                obj['privacy'] = ApiClient.convertToType(data['privacy'], 'String');
            }
            if (data.hasOwnProperty('review_mode')) {
                obj['review_mode'] = ApiClient.convertToType(data['review_mode'], 'Boolean');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], 'String');
            }
            if (data.hasOwnProperty('theme')) {
                obj['theme'] = ApiClient.convertToType(data['theme'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAlbumAlt1Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAlbumAlt1Request</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateAlbumAlt1Request.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['brand_color'] && !(typeof data['brand_color'] === 'string' || data['brand_color'] instanceof String)) {
            throw new Error("Expected the field `brand_color` to be a primitive type in the JSON string but got " + data['brand_color']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['layout'] && !(typeof data['layout'] === 'string' || data['layout'] instanceof String)) {
            throw new Error("Expected the field `layout` to be a primitive type in the JSON string but got " + data['layout']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['privacy'] && !(typeof data['privacy'] === 'string' || data['privacy'] instanceof String)) {
            throw new Error("Expected the field `privacy` to be a primitive type in the JSON string but got " + data['privacy']);
        }
        // ensure the json data is a string
        if (data['sort'] && !(typeof data['sort'] === 'string' || data['sort'] instanceof String)) {
            throw new Error("Expected the field `sort` to be a primitive type in the JSON string but got " + data['sort']);
        }
        // ensure the json data is a string
        if (data['theme'] && !(typeof data['theme'] === 'string' || data['theme'] instanceof String)) {
            throw new Error("Expected the field `theme` to be a primitive type in the JSON string but got " + data['theme']);
        }

        return true;
    }


}

CreateAlbumAlt1Request.RequiredProperties = ["name"];

/**
 * The hexadecimal code for the color of the player buttons.
 * @member {String} brand_color
 */
CreateAlbumAlt1Request.prototype['brand_color'] = undefined;

/**
 * The description of the album.
 * @member {String} description
 */
CreateAlbumAlt1Request.prototype['description'] = undefined;

/**
 * Whether to hide Vimeo navigation when displaying the album.
 * @member {Boolean} hide_nav
 */
CreateAlbumAlt1Request.prototype['hide_nav'] = undefined;

/**
 * The type of layout for presenting the album.
 * @member {module:model/CreateAlbumAlt1Request.LayoutEnum} layout
 */
CreateAlbumAlt1Request.prototype['layout'] = undefined;

/**
 * The name of the album.
 * @member {String} name
 */
CreateAlbumAlt1Request.prototype['name'] = undefined;

/**
 * The album's password. Required only if **privacy** is `password`.
 * @member {String} password
 */
CreateAlbumAlt1Request.prototype['password'] = undefined;

/**
 * The privacy level of the album.
 * @member {module:model/CreateAlbumAlt1Request.PrivacyEnum} privacy
 */
CreateAlbumAlt1Request.prototype['privacy'] = undefined;

/**
 * Whether album videos should use the review mode URL.
 * @member {Boolean} review_mode
 */
CreateAlbumAlt1Request.prototype['review_mode'] = undefined;

/**
 * The default sort order of the album's videos.
 * @member {module:model/CreateAlbumAlt1Request.SortEnum} sort
 */
CreateAlbumAlt1Request.prototype['sort'] = undefined;

/**
 * The color theme of the album.
 * @member {module:model/CreateAlbumAlt1Request.ThemeEnum} theme
 */
CreateAlbumAlt1Request.prototype['theme'] = undefined;





/**
 * Allowed values for the <code>layout</code> property.
 * @enum {String}
 * @readonly
 */
CreateAlbumAlt1Request['LayoutEnum'] = {

    /**
     * value: "grid"
     * @const
     */
    "grid": "grid",

    /**
     * value: "player"
     * @const
     */
    "player": "player"
};


/**
 * Allowed values for the <code>privacy</code> property.
 * @enum {String}
 * @readonly
 */
CreateAlbumAlt1Request['PrivacyEnum'] = {

    /**
     * value: "anybody"
     * @const
     */
    "anybody": "anybody",

    /**
     * value: "embed_only"
     * @const
     */
    "embed_only": "embed_only",

    /**
     * value: "password"
     * @const
     */
    "password": "password"
};


/**
 * Allowed values for the <code>sort</code> property.
 * @enum {String}
 * @readonly
 */
CreateAlbumAlt1Request['SortEnum'] = {

    /**
     * value: "added_first"
     * @const
     */
    "added_first": "added_first",

    /**
     * value: "added_last"
     * @const
     */
    "added_last": "added_last",

    /**
     * value: "alphabetical"
     * @const
     */
    "alphabetical": "alphabetical",

    /**
     * value: "arranged"
     * @const
     */
    "arranged": "arranged",

    /**
     * value: "comments"
     * @const
     */
    "comments": "comments",

    /**
     * value: "likes"
     * @const
     */
    "likes": "likes",

    /**
     * value: "newest"
     * @const
     */
    "newest": "newest",

    /**
     * value: "oldest"
     * @const
     */
    "oldest": "oldest",

    /**
     * value: "plays"
     * @const
     */
    "plays": "plays"
};


/**
 * Allowed values for the <code>theme</code> property.
 * @enum {String}
 * @readonly
 */
CreateAlbumAlt1Request['ThemeEnum'] = {

    /**
     * value: "dark"
     * @const
     */
    "dark": "dark",

    /**
     * value: "standard"
     * @const
     */
    "standard": "standard"
};



export default CreateAlbumAlt1Request;

