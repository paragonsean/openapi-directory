/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelMetadataConnectionsPrivacyUsers from './ChannelMetadataConnectionsPrivacyUsers';
import ChannelMetadataConnectionsUsers from './ChannelMetadataConnectionsUsers';
import ChannelMetadataConnectionsVideos from './ChannelMetadataConnectionsVideos';

/**
 * The ChannelMetadataConnections model module.
 * @module model/ChannelMetadataConnections
 * @version 3.4
 */
class ChannelMetadataConnections {
    /**
     * Constructs a new <code>ChannelMetadataConnections</code>.
     * A collection of information that is connected to this resource.
     * @alias module:model/ChannelMetadataConnections
     * @param privacyUsers {module:model/ChannelMetadataConnectionsPrivacyUsers} 
     * @param users {module:model/ChannelMetadataConnectionsUsers} 
     * @param videos {module:model/ChannelMetadataConnectionsVideos} 
     */
    constructor(privacyUsers, users, videos) { 
        
        ChannelMetadataConnections.initialize(this, privacyUsers, users, videos);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, privacyUsers, users, videos) { 
        obj['privacy_users'] = privacyUsers;
        obj['users'] = users;
        obj['videos'] = videos;
    }

    /**
     * Constructs a <code>ChannelMetadataConnections</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelMetadataConnections} obj Optional instance to populate.
     * @return {module:model/ChannelMetadataConnections} The populated <code>ChannelMetadataConnections</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelMetadataConnections();

            if (data.hasOwnProperty('privacy_users')) {
                obj['privacy_users'] = ChannelMetadataConnectionsPrivacyUsers.constructFromObject(data['privacy_users']);
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ChannelMetadataConnectionsUsers.constructFromObject(data['users']);
            }
            if (data.hasOwnProperty('videos')) {
                obj['videos'] = ChannelMetadataConnectionsVideos.constructFromObject(data['videos']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelMetadataConnections</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelMetadataConnections</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChannelMetadataConnections.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `privacy_users`
        if (data['privacy_users']) { // data not null
          ChannelMetadataConnectionsPrivacyUsers.validateJSON(data['privacy_users']);
        }
        // validate the optional field `users`
        if (data['users']) { // data not null
          ChannelMetadataConnectionsUsers.validateJSON(data['users']);
        }
        // validate the optional field `videos`
        if (data['videos']) { // data not null
          ChannelMetadataConnectionsVideos.validateJSON(data['videos']);
        }

        return true;
    }


}

ChannelMetadataConnections.RequiredProperties = ["privacy_users", "users", "videos"];

/**
 * @member {module:model/ChannelMetadataConnectionsPrivacyUsers} privacy_users
 */
ChannelMetadataConnections.prototype['privacy_users'] = undefined;

/**
 * @member {module:model/ChannelMetadataConnectionsUsers} users
 */
ChannelMetadataConnections.prototype['users'] = undefined;

/**
 * @member {module:model/ChannelMetadataConnectionsVideos} videos
 */
ChannelMetadataConnections.prototype['videos'] = undefined;






export default ChannelMetadataConnections;

