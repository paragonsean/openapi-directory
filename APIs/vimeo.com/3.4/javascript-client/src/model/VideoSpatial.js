/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VideoSpatialDirectorTimelineInner from './VideoSpatialDirectorTimelineInner';

/**
 * The VideoSpatial model module.
 * @module model/VideoSpatial
 * @version 3.4
 */
class VideoSpatial {
    /**
     * Constructs a new <code>VideoSpatial</code>.
     * 360 spatial data.
     * @alias module:model/VideoSpatial
     * @param directorTimeline {Array.<module:model/VideoSpatialDirectorTimelineInner>} 360 director timeline.
     * @param fieldOfView {Number} The 360 field of view, from 30 (minimum) to 90 (maximum). The default is 50.
     * @param projection {module:model/VideoSpatial.ProjectionEnum} The 360 spatial projection:  Option descriptions:  * `cubical` - The spatial projection is cubical.  * `cylindrical` - The spatial projection is cylindrical.  * `dome` - The spatial projection is dome-shaped.  * `equirectangular` - The spatial projection is equirectangular.  * `pyramid` - The spatial projection is pyramid-shaped. 
     * @param stereoFormat {module:model/VideoSpatial.StereoFormatEnum} The 360 stereo format:  Option descriptions:  * `left-right` - The stereo format is left-right.  * `mono` - The audio is monaural.  * `top-bottom` - The stereo format is top-bottom. 
     */
    constructor(directorTimeline, fieldOfView, projection, stereoFormat) { 
        
        VideoSpatial.initialize(this, directorTimeline, fieldOfView, projection, stereoFormat);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, directorTimeline, fieldOfView, projection, stereoFormat) { 
        obj['director_timeline'] = directorTimeline;
        obj['field_of_view'] = fieldOfView;
        obj['projection'] = projection;
        obj['stereo_format'] = stereoFormat;
    }

    /**
     * Constructs a <code>VideoSpatial</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoSpatial} obj Optional instance to populate.
     * @return {module:model/VideoSpatial} The populated <code>VideoSpatial</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoSpatial();

            if (data.hasOwnProperty('director_timeline')) {
                obj['director_timeline'] = ApiClient.convertToType(data['director_timeline'], [VideoSpatialDirectorTimelineInner]);
            }
            if (data.hasOwnProperty('field_of_view')) {
                obj['field_of_view'] = ApiClient.convertToType(data['field_of_view'], 'Number');
            }
            if (data.hasOwnProperty('projection')) {
                obj['projection'] = ApiClient.convertToType(data['projection'], 'String');
            }
            if (data.hasOwnProperty('stereo_format')) {
                obj['stereo_format'] = ApiClient.convertToType(data['stereo_format'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoSpatial</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoSpatial</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VideoSpatial.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['director_timeline']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['director_timeline'])) {
                throw new Error("Expected the field `director_timeline` to be an array in the JSON data but got " + data['director_timeline']);
            }
            // validate the optional field `director_timeline` (array)
            for (const item of data['director_timeline']) {
                VideoSpatialDirectorTimelineInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['projection'] && !(typeof data['projection'] === 'string' || data['projection'] instanceof String)) {
            throw new Error("Expected the field `projection` to be a primitive type in the JSON string but got " + data['projection']);
        }
        // ensure the json data is a string
        if (data['stereo_format'] && !(typeof data['stereo_format'] === 'string' || data['stereo_format'] instanceof String)) {
            throw new Error("Expected the field `stereo_format` to be a primitive type in the JSON string but got " + data['stereo_format']);
        }

        return true;
    }


}

VideoSpatial.RequiredProperties = ["director_timeline", "field_of_view", "projection", "stereo_format"];

/**
 * 360 director timeline.
 * @member {Array.<module:model/VideoSpatialDirectorTimelineInner>} director_timeline
 */
VideoSpatial.prototype['director_timeline'] = undefined;

/**
 * The 360 field of view, from 30 (minimum) to 90 (maximum). The default is 50.
 * @member {Number} field_of_view
 */
VideoSpatial.prototype['field_of_view'] = undefined;

/**
 * The 360 spatial projection:  Option descriptions:  * `cubical` - The spatial projection is cubical.  * `cylindrical` - The spatial projection is cylindrical.  * `dome` - The spatial projection is dome-shaped.  * `equirectangular` - The spatial projection is equirectangular.  * `pyramid` - The spatial projection is pyramid-shaped. 
 * @member {module:model/VideoSpatial.ProjectionEnum} projection
 */
VideoSpatial.prototype['projection'] = undefined;

/**
 * The 360 stereo format:  Option descriptions:  * `left-right` - The stereo format is left-right.  * `mono` - The audio is monaural.  * `top-bottom` - The stereo format is top-bottom. 
 * @member {module:model/VideoSpatial.StereoFormatEnum} stereo_format
 */
VideoSpatial.prototype['stereo_format'] = undefined;





/**
 * Allowed values for the <code>projection</code> property.
 * @enum {String}
 * @readonly
 */
VideoSpatial['ProjectionEnum'] = {

    /**
     * value: "cubical"
     * @const
     */
    "cubical": "cubical",

    /**
     * value: "cylindrical"
     * @const
     */
    "cylindrical": "cylindrical",

    /**
     * value: "dome"
     * @const
     */
    "dome": "dome",

    /**
     * value: "equirectangular"
     * @const
     */
    "equirectangular": "equirectangular",

    /**
     * value: "pyramid"
     * @const
     */
    "pyramid": "pyramid"
};


/**
 * Allowed values for the <code>stereo_format</code> property.
 * @enum {String}
 * @readonly
 */
VideoSpatial['StereoFormatEnum'] = {

    /**
     * value: "left-right"
     * @const
     */
    "left-right": "left-right",

    /**
     * value: "mono"
     * @const
     */
    "mono": "mono",

    /**
     * value: "top-bottom"
     * @const
     */
    "top-bottom": "top-bottom"
};



export default VideoSpatial;

