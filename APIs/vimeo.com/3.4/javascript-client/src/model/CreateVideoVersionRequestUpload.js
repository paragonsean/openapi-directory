/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateVideoVersionRequestUpload model module.
 * @module model/CreateVideoVersionRequestUpload
 * @version 3.4
 */
class CreateVideoVersionRequestUpload {
    /**
     * Constructs a new <code>CreateVideoVersionRequestUpload</code>.
     * @alias module:model/CreateVideoVersionRequestUpload
     * @param approach {module:model/CreateVideoVersionRequestUpload.ApproachEnum} Upload approach
     */
    constructor(approach) { 
        
        CreateVideoVersionRequestUpload.initialize(this, approach);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, approach) { 
        obj['approach'] = approach;
    }

    /**
     * Constructs a <code>CreateVideoVersionRequestUpload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateVideoVersionRequestUpload} obj Optional instance to populate.
     * @return {module:model/CreateVideoVersionRequestUpload} The populated <code>CreateVideoVersionRequestUpload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateVideoVersionRequestUpload();

            if (data.hasOwnProperty('approach')) {
                obj['approach'] = ApiClient.convertToType(data['approach'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('redirect_url')) {
                obj['redirect_url'] = ApiClient.convertToType(data['redirect_url'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateVideoVersionRequestUpload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateVideoVersionRequestUpload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateVideoVersionRequestUpload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['approach'] && !(typeof data['approach'] === 'string' || data['approach'] instanceof String)) {
            throw new Error("Expected the field `approach` to be a primitive type in the JSON string but got " + data['approach']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['redirect_url'] && !(typeof data['redirect_url'] === 'string' || data['redirect_url'] instanceof String)) {
            throw new Error("Expected the field `redirect_url` to be a primitive type in the JSON string but got " + data['redirect_url']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }

        return true;
    }


}

CreateVideoVersionRequestUpload.RequiredProperties = ["approach"];

/**
 * Upload approach
 * @member {module:model/CreateVideoVersionRequestUpload.ApproachEnum} approach
 */
CreateVideoVersionRequestUpload.prototype['approach'] = undefined;

/**
 * If your upload approach is pull, Vimeo will download the video hosted at this public URL. This URL must be valid for at least 24 hours.
 * @member {String} link
 */
CreateVideoVersionRequestUpload.prototype['link'] = undefined;

/**
 * The app's redirect URL. Use this parameter when `approach` is `post`.
 * @member {String} redirect_url
 */
CreateVideoVersionRequestUpload.prototype['redirect_url'] = undefined;

/**
 * Upload size
 * @member {String} size
 */
CreateVideoVersionRequestUpload.prototype['size'] = undefined;





/**
 * Allowed values for the <code>approach</code> property.
 * @enum {String}
 * @readonly
 */
CreateVideoVersionRequestUpload['ApproachEnum'] = {

    /**
     * value: "post"
     * @const
     */
    "post": "post",

    /**
     * value: "pull"
     * @const
     */
    "pull": "pull",

    /**
     * value: "streaming"
     * @const
     */
    "streaming": "streaming",

    /**
     * value: "tus"
     * @const
     */
    "tus": "tus"
};



export default CreateVideoVersionRequestUpload;

