/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserMetadataConnectionsAlbums from './UserMetadataConnectionsAlbums';
import UserMetadataConnectionsAppearances from './UserMetadataConnectionsAppearances';
import UserMetadataConnectionsBlock from './UserMetadataConnectionsBlock';
import UserMetadataConnectionsCategories from './UserMetadataConnectionsCategories';
import UserMetadataConnectionsChannels from './UserMetadataConnectionsChannels';
import UserMetadataConnectionsFeed from './UserMetadataConnectionsFeed';
import UserMetadataConnectionsFolders from './UserMetadataConnectionsFolders';
import UserMetadataConnectionsFollowers from './UserMetadataConnectionsFollowers';
import UserMetadataConnectionsFollowing from './UserMetadataConnectionsFollowing';
import UserMetadataConnectionsGroups from './UserMetadataConnectionsGroups';
import UserMetadataConnectionsLikes from './UserMetadataConnectionsLikes';
import UserMetadataConnectionsModeratedChannels from './UserMetadataConnectionsModeratedChannels';
import UserMetadataConnectionsPictures from './UserMetadataConnectionsPictures';
import UserMetadataConnectionsPortfolios from './UserMetadataConnectionsPortfolios';
import UserMetadataConnectionsRecommendedChannels from './UserMetadataConnectionsRecommendedChannels';
import UserMetadataConnectionsRecommendedUsers from './UserMetadataConnectionsRecommendedUsers';
import UserMetadataConnectionsShared from './UserMetadataConnectionsShared';
import UserMetadataConnectionsVideos from './UserMetadataConnectionsVideos';
import UserMetadataConnectionsWatchedVideos from './UserMetadataConnectionsWatchedVideos';
import UserMetadataConnectionsWatchlater from './UserMetadataConnectionsWatchlater';

/**
 * The UserMetadataConnections model module.
 * @module model/UserMetadataConnections
 * @version 3.4
 */
class UserMetadataConnections {
    /**
     * Constructs a new <code>UserMetadataConnections</code>.
     * The list of resource URIs related to the user.
     * @alias module:model/UserMetadataConnections
     * @param albums {module:model/UserMetadataConnectionsAlbums} 
     * @param appearances {module:model/UserMetadataConnectionsAppearances} 
     * @param block {module:model/UserMetadataConnectionsBlock} 
     * @param categories {module:model/UserMetadataConnectionsCategories} 
     * @param channels {module:model/UserMetadataConnectionsChannels} 
     * @param feed {module:model/UserMetadataConnectionsFeed} 
     * @param folders {module:model/UserMetadataConnectionsFolders} 
     * @param followers {module:model/UserMetadataConnectionsFollowers} 
     * @param following {module:model/UserMetadataConnectionsFollowing} 
     * @param groups {module:model/UserMetadataConnectionsGroups} 
     * @param likes {module:model/UserMetadataConnectionsLikes} 
     * @param moderatedChannels {module:model/UserMetadataConnectionsModeratedChannels} 
     * @param pictures {module:model/UserMetadataConnectionsPictures} 
     * @param portfolios {module:model/UserMetadataConnectionsPortfolios} 
     * @param recommendedChannels {module:model/UserMetadataConnectionsRecommendedChannels} 
     * @param recommendedUsers {module:model/UserMetadataConnectionsRecommendedUsers} 
     * @param shared {module:model/UserMetadataConnectionsShared} 
     * @param videos {module:model/UserMetadataConnectionsVideos} 
     * @param watchedVideos {module:model/UserMetadataConnectionsWatchedVideos} 
     * @param watchlater {module:model/UserMetadataConnectionsWatchlater} 
     */
    constructor(albums, appearances, block, categories, channels, feed, folders, followers, following, groups, likes, moderatedChannels, pictures, portfolios, recommendedChannels, recommendedUsers, shared, videos, watchedVideos, watchlater) { 
        
        UserMetadataConnections.initialize(this, albums, appearances, block, categories, channels, feed, folders, followers, following, groups, likes, moderatedChannels, pictures, portfolios, recommendedChannels, recommendedUsers, shared, videos, watchedVideos, watchlater);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, albums, appearances, block, categories, channels, feed, folders, followers, following, groups, likes, moderatedChannels, pictures, portfolios, recommendedChannels, recommendedUsers, shared, videos, watchedVideos, watchlater) { 
        obj['albums'] = albums;
        obj['appearances'] = appearances;
        obj['block'] = block;
        obj['categories'] = categories;
        obj['channels'] = channels;
        obj['feed'] = feed;
        obj['folders'] = folders;
        obj['followers'] = followers;
        obj['following'] = following;
        obj['groups'] = groups;
        obj['likes'] = likes;
        obj['moderated_channels'] = moderatedChannels;
        obj['pictures'] = pictures;
        obj['portfolios'] = portfolios;
        obj['recommended_channels'] = recommendedChannels;
        obj['recommended_users'] = recommendedUsers;
        obj['shared'] = shared;
        obj['videos'] = videos;
        obj['watched_videos'] = watchedVideos;
        obj['watchlater'] = watchlater;
    }

    /**
     * Constructs a <code>UserMetadataConnections</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserMetadataConnections} obj Optional instance to populate.
     * @return {module:model/UserMetadataConnections} The populated <code>UserMetadataConnections</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserMetadataConnections();

            if (data.hasOwnProperty('albums')) {
                obj['albums'] = UserMetadataConnectionsAlbums.constructFromObject(data['albums']);
            }
            if (data.hasOwnProperty('appearances')) {
                obj['appearances'] = UserMetadataConnectionsAppearances.constructFromObject(data['appearances']);
            }
            if (data.hasOwnProperty('block')) {
                obj['block'] = UserMetadataConnectionsBlock.constructFromObject(data['block']);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = UserMetadataConnectionsCategories.constructFromObject(data['categories']);
            }
            if (data.hasOwnProperty('channels')) {
                obj['channels'] = UserMetadataConnectionsChannels.constructFromObject(data['channels']);
            }
            if (data.hasOwnProperty('feed')) {
                obj['feed'] = UserMetadataConnectionsFeed.constructFromObject(data['feed']);
            }
            if (data.hasOwnProperty('folders')) {
                obj['folders'] = UserMetadataConnectionsFolders.constructFromObject(data['folders']);
            }
            if (data.hasOwnProperty('followers')) {
                obj['followers'] = UserMetadataConnectionsFollowers.constructFromObject(data['followers']);
            }
            if (data.hasOwnProperty('following')) {
                obj['following'] = UserMetadataConnectionsFollowing.constructFromObject(data['following']);
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = UserMetadataConnectionsGroups.constructFromObject(data['groups']);
            }
            if (data.hasOwnProperty('likes')) {
                obj['likes'] = UserMetadataConnectionsLikes.constructFromObject(data['likes']);
            }
            if (data.hasOwnProperty('moderated_channels')) {
                obj['moderated_channels'] = UserMetadataConnectionsModeratedChannels.constructFromObject(data['moderated_channels']);
            }
            if (data.hasOwnProperty('pictures')) {
                obj['pictures'] = UserMetadataConnectionsPictures.constructFromObject(data['pictures']);
            }
            if (data.hasOwnProperty('portfolios')) {
                obj['portfolios'] = UserMetadataConnectionsPortfolios.constructFromObject(data['portfolios']);
            }
            if (data.hasOwnProperty('recommended_channels')) {
                obj['recommended_channels'] = UserMetadataConnectionsRecommendedChannels.constructFromObject(data['recommended_channels']);
            }
            if (data.hasOwnProperty('recommended_users')) {
                obj['recommended_users'] = UserMetadataConnectionsRecommendedUsers.constructFromObject(data['recommended_users']);
            }
            if (data.hasOwnProperty('shared')) {
                obj['shared'] = UserMetadataConnectionsShared.constructFromObject(data['shared']);
            }
            if (data.hasOwnProperty('videos')) {
                obj['videos'] = UserMetadataConnectionsVideos.constructFromObject(data['videos']);
            }
            if (data.hasOwnProperty('watched_videos')) {
                obj['watched_videos'] = UserMetadataConnectionsWatchedVideos.constructFromObject(data['watched_videos']);
            }
            if (data.hasOwnProperty('watchlater')) {
                obj['watchlater'] = UserMetadataConnectionsWatchlater.constructFromObject(data['watchlater']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserMetadataConnections</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserMetadataConnections</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserMetadataConnections.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `albums`
        if (data['albums']) { // data not null
          UserMetadataConnectionsAlbums.validateJSON(data['albums']);
        }
        // validate the optional field `appearances`
        if (data['appearances']) { // data not null
          UserMetadataConnectionsAppearances.validateJSON(data['appearances']);
        }
        // validate the optional field `block`
        if (data['block']) { // data not null
          UserMetadataConnectionsBlock.validateJSON(data['block']);
        }
        // validate the optional field `categories`
        if (data['categories']) { // data not null
          UserMetadataConnectionsCategories.validateJSON(data['categories']);
        }
        // validate the optional field `channels`
        if (data['channels']) { // data not null
          UserMetadataConnectionsChannels.validateJSON(data['channels']);
        }
        // validate the optional field `feed`
        if (data['feed']) { // data not null
          UserMetadataConnectionsFeed.validateJSON(data['feed']);
        }
        // validate the optional field `folders`
        if (data['folders']) { // data not null
          UserMetadataConnectionsFolders.validateJSON(data['folders']);
        }
        // validate the optional field `followers`
        if (data['followers']) { // data not null
          UserMetadataConnectionsFollowers.validateJSON(data['followers']);
        }
        // validate the optional field `following`
        if (data['following']) { // data not null
          UserMetadataConnectionsFollowing.validateJSON(data['following']);
        }
        // validate the optional field `groups`
        if (data['groups']) { // data not null
          UserMetadataConnectionsGroups.validateJSON(data['groups']);
        }
        // validate the optional field `likes`
        if (data['likes']) { // data not null
          UserMetadataConnectionsLikes.validateJSON(data['likes']);
        }
        // validate the optional field `moderated_channels`
        if (data['moderated_channels']) { // data not null
          UserMetadataConnectionsModeratedChannels.validateJSON(data['moderated_channels']);
        }
        // validate the optional field `pictures`
        if (data['pictures']) { // data not null
          UserMetadataConnectionsPictures.validateJSON(data['pictures']);
        }
        // validate the optional field `portfolios`
        if (data['portfolios']) { // data not null
          UserMetadataConnectionsPortfolios.validateJSON(data['portfolios']);
        }
        // validate the optional field `recommended_channels`
        if (data['recommended_channels']) { // data not null
          UserMetadataConnectionsRecommendedChannels.validateJSON(data['recommended_channels']);
        }
        // validate the optional field `recommended_users`
        if (data['recommended_users']) { // data not null
          UserMetadataConnectionsRecommendedUsers.validateJSON(data['recommended_users']);
        }
        // validate the optional field `shared`
        if (data['shared']) { // data not null
          UserMetadataConnectionsShared.validateJSON(data['shared']);
        }
        // validate the optional field `videos`
        if (data['videos']) { // data not null
          UserMetadataConnectionsVideos.validateJSON(data['videos']);
        }
        // validate the optional field `watched_videos`
        if (data['watched_videos']) { // data not null
          UserMetadataConnectionsWatchedVideos.validateJSON(data['watched_videos']);
        }
        // validate the optional field `watchlater`
        if (data['watchlater']) { // data not null
          UserMetadataConnectionsWatchlater.validateJSON(data['watchlater']);
        }

        return true;
    }


}

UserMetadataConnections.RequiredProperties = ["albums", "appearances", "block", "categories", "channels", "feed", "folders", "followers", "following", "groups", "likes", "moderated_channels", "pictures", "portfolios", "recommended_channels", "recommended_users", "shared", "videos", "watched_videos", "watchlater"];

/**
 * @member {module:model/UserMetadataConnectionsAlbums} albums
 */
UserMetadataConnections.prototype['albums'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsAppearances} appearances
 */
UserMetadataConnections.prototype['appearances'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsBlock} block
 */
UserMetadataConnections.prototype['block'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsCategories} categories
 */
UserMetadataConnections.prototype['categories'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsChannels} channels
 */
UserMetadataConnections.prototype['channels'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsFeed} feed
 */
UserMetadataConnections.prototype['feed'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsFolders} folders
 */
UserMetadataConnections.prototype['folders'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsFollowers} followers
 */
UserMetadataConnections.prototype['followers'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsFollowing} following
 */
UserMetadataConnections.prototype['following'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsGroups} groups
 */
UserMetadataConnections.prototype['groups'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsLikes} likes
 */
UserMetadataConnections.prototype['likes'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsModeratedChannels} moderated_channels
 */
UserMetadataConnections.prototype['moderated_channels'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsPictures} pictures
 */
UserMetadataConnections.prototype['pictures'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsPortfolios} portfolios
 */
UserMetadataConnections.prototype['portfolios'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsRecommendedChannels} recommended_channels
 */
UserMetadataConnections.prototype['recommended_channels'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsRecommendedUsers} recommended_users
 */
UserMetadataConnections.prototype['recommended_users'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsShared} shared
 */
UserMetadataConnections.prototype['shared'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsVideos} videos
 */
UserMetadataConnections.prototype['videos'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsWatchedVideos} watched_videos
 */
UserMetadataConnections.prototype['watched_videos'] = undefined;

/**
 * @member {module:model/UserMetadataConnectionsWatchlater} watchlater
 */
UserMetadataConnections.prototype['watchlater'] = undefined;






export default UserMetadataConnections;

