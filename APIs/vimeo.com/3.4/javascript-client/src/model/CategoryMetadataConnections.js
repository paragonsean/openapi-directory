/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategoryMetadataConnectionsChannels from './CategoryMetadataConnectionsChannels';
import CategoryMetadataConnectionsGroups from './CategoryMetadataConnectionsGroups';
import CategoryMetadataConnectionsUsers from './CategoryMetadataConnectionsUsers';
import CategoryMetadataConnectionsVideos from './CategoryMetadataConnectionsVideos';

/**
 * The CategoryMetadataConnections model module.
 * @module model/CategoryMetadataConnections
 * @version 3.4
 */
class CategoryMetadataConnections {
    /**
     * Constructs a new <code>CategoryMetadataConnections</code>.
     * A collection of information that is connected to this resource.
     * @alias module:model/CategoryMetadataConnections
     * @param channels {module:model/CategoryMetadataConnectionsChannels} 
     * @param groups {module:model/CategoryMetadataConnectionsGroups} 
     * @param users {module:model/CategoryMetadataConnectionsUsers} 
     * @param videos {module:model/CategoryMetadataConnectionsVideos} 
     */
    constructor(channels, groups, users, videos) { 
        
        CategoryMetadataConnections.initialize(this, channels, groups, users, videos);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channels, groups, users, videos) { 
        obj['channels'] = channels;
        obj['groups'] = groups;
        obj['users'] = users;
        obj['videos'] = videos;
    }

    /**
     * Constructs a <code>CategoryMetadataConnections</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CategoryMetadataConnections} obj Optional instance to populate.
     * @return {module:model/CategoryMetadataConnections} The populated <code>CategoryMetadataConnections</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CategoryMetadataConnections();

            if (data.hasOwnProperty('channels')) {
                obj['channels'] = CategoryMetadataConnectionsChannels.constructFromObject(data['channels']);
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = CategoryMetadataConnectionsGroups.constructFromObject(data['groups']);
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = CategoryMetadataConnectionsUsers.constructFromObject(data['users']);
            }
            if (data.hasOwnProperty('videos')) {
                obj['videos'] = CategoryMetadataConnectionsVideos.constructFromObject(data['videos']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CategoryMetadataConnections</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CategoryMetadataConnections</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CategoryMetadataConnections.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `channels`
        if (data['channels']) { // data not null
          CategoryMetadataConnectionsChannels.validateJSON(data['channels']);
        }
        // validate the optional field `groups`
        if (data['groups']) { // data not null
          CategoryMetadataConnectionsGroups.validateJSON(data['groups']);
        }
        // validate the optional field `users`
        if (data['users']) { // data not null
          CategoryMetadataConnectionsUsers.validateJSON(data['users']);
        }
        // validate the optional field `videos`
        if (data['videos']) { // data not null
          CategoryMetadataConnectionsVideos.validateJSON(data['videos']);
        }

        return true;
    }


}

CategoryMetadataConnections.RequiredProperties = ["channels", "groups", "users", "videos"];

/**
 * @member {module:model/CategoryMetadataConnectionsChannels} channels
 */
CategoryMetadataConnections.prototype['channels'] = undefined;

/**
 * @member {module:model/CategoryMetadataConnectionsGroups} groups
 */
CategoryMetadataConnections.prototype['groups'] = undefined;

/**
 * @member {module:model/CategoryMetadataConnectionsUsers} users
 */
CategoryMetadataConnections.prototype['users'] = undefined;

/**
 * @member {module:model/CategoryMetadataConnectionsVideos} videos
 */
CategoryMetadataConnections.prototype['videos'] = undefined;






export default CategoryMetadataConnections;

