/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Picture from './Picture';
import UserMetadata from './UserMetadata';
import UserPreferences from './UserPreferences';
import UserUploadQuota from './UserUploadQuota';
import UserWebsitesInner from './UserWebsitesInner';

/**
 * The User model module.
 * @module model/User
 * @version 3.4
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     * @param account {module:model/User.AccountEnum} The user's account type:  Option descriptions:  * `basic` - The user has a Vimeo Basic subscription.  * `business` - The user has a Vimeo Business subscription.  * `live_business` - The user has a Vimeo Business Live subscription.  * `live_premium` - The user has a Vimeo Premium subscription.  * `live_pro` - The user has a Vimeo PRO Live subscription.  * `plus` - The user has a Vimeo Plus subscription.  * `pro` - The user has a Vimeo Pro subscription.  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.  * `producer` - The user has a Vimeo Producer subscription. 
     * @param bio {String} The user's bio.
     * @param createdTime {String} The time in ISO 8601 format when the user account was created.
     * @param link {String} The absolute URL of this user's profile page.
     * @param location {String} The user's location.
     * @param metadata {module:model/UserMetadata} 
     * @param name {String} The user's display name.
     * @param pictures {module:model/Picture} The active portrait of this user.
     * @param resourceKey {String} The user's resource key string.
     * @param uploadQuota {module:model/UserUploadQuota} 
     * @param uri {String} The user's canonical relative URI.
     * @param websites {Array.<module:model/UserWebsitesInner>} The user's websites.
     */
    constructor(account, bio, createdTime, link, location, metadata, name, pictures, resourceKey, uploadQuota, uri, websites) { 
        
        User.initialize(this, account, bio, createdTime, link, location, metadata, name, pictures, resourceKey, uploadQuota, uri, websites);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, account, bio, createdTime, link, location, metadata, name, pictures, resourceKey, uploadQuota, uri, websites) { 
        obj['account'] = account;
        obj['bio'] = bio;
        obj['created_time'] = createdTime;
        obj['link'] = link;
        obj['location'] = location;
        obj['metadata'] = metadata;
        obj['name'] = name;
        obj['pictures'] = pictures;
        obj['resource_key'] = resourceKey;
        obj['upload_quota'] = uploadQuota;
        obj['uri'] = uri;
        obj['websites'] = websites;
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('bio')) {
                obj['bio'] = ApiClient.convertToType(data['bio'], 'String');
            }
            if (data.hasOwnProperty('content_filter')) {
                obj['content_filter'] = ApiClient.convertToType(data['content_filter'], ['String']);
            }
            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = ApiClient.convertToType(data['created_time'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = UserMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pictures')) {
                obj['pictures'] = ApiClient.convertToType(data['pictures'], Picture);
            }
            if (data.hasOwnProperty('preferences')) {
                obj['preferences'] = UserPreferences.constructFromObject(data['preferences']);
            }
            if (data.hasOwnProperty('resource_key')) {
                obj['resource_key'] = ApiClient.convertToType(data['resource_key'], 'String');
            }
            if (data.hasOwnProperty('upload_quota')) {
                obj['upload_quota'] = UserUploadQuota.constructFromObject(data['upload_quota']);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('websites')) {
                obj['websites'] = ApiClient.convertToType(data['websites'], [UserWebsitesInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of User.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['bio'] && !(typeof data['bio'] === 'string' || data['bio'] instanceof String)) {
            throw new Error("Expected the field `bio` to be a primitive type in the JSON string but got " + data['bio']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['content_filter'])) {
            throw new Error("Expected the field `content_filter` to be an array in the JSON data but got " + data['content_filter']);
        }
        // ensure the json data is a string
        if (data['created_time'] && !(typeof data['created_time'] === 'string' || data['created_time'] instanceof String)) {
            throw new Error("Expected the field `created_time` to be a primitive type in the JSON string but got " + data['created_time']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          UserMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `pictures`
        if (data['pictures']) { // data not null
          Picture.validateJSON(data['pictures']);
        }
        // validate the optional field `preferences`
        if (data['preferences']) { // data not null
          UserPreferences.validateJSON(data['preferences']);
        }
        // ensure the json data is a string
        if (data['resource_key'] && !(typeof data['resource_key'] === 'string' || data['resource_key'] instanceof String)) {
            throw new Error("Expected the field `resource_key` to be a primitive type in the JSON string but got " + data['resource_key']);
        }
        // validate the optional field `upload_quota`
        if (data['upload_quota']) { // data not null
          UserUploadQuota.validateJSON(data['upload_quota']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        if (data['websites']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['websites'])) {
                throw new Error("Expected the field `websites` to be an array in the JSON data but got " + data['websites']);
            }
            // validate the optional field `websites` (array)
            for (const item of data['websites']) {
                UserWebsitesInner.validateJSON(item);
            };
        }

        return true;
    }


}

User.RequiredProperties = ["account", "bio", "created_time", "link", "location", "metadata", "name", "pictures", "resource_key", "upload_quota", "uri", "websites"];

/**
 * The user's account type:  Option descriptions:  * `basic` - The user has a Vimeo Basic subscription.  * `business` - The user has a Vimeo Business subscription.  * `live_business` - The user has a Vimeo Business Live subscription.  * `live_premium` - The user has a Vimeo Premium subscription.  * `live_pro` - The user has a Vimeo PRO Live subscription.  * `plus` - The user has a Vimeo Plus subscription.  * `pro` - The user has a Vimeo Pro subscription.  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.  * `producer` - The user has a Vimeo Producer subscription. 
 * @member {module:model/User.AccountEnum} account
 */
User.prototype['account'] = undefined;

/**
 * The user's bio.
 * @member {String} bio
 */
User.prototype['bio'] = undefined;

/**
 * The user's content filters:  Option descriptions:  * `drugs` - Drugs or alcohol use.  * `language` - Profanity or sexually suggestive content.  * `nudity` - Nudity.  * `safe` - Suitable for all audiences.  * `unrated` - No rating.  * `violence` - Violent or graphic content. 
 * @member {Array.<String>} content_filter
 */
User.prototype['content_filter'] = undefined;

/**
 * The time in ISO 8601 format when the user account was created.
 * @member {String} created_time
 */
User.prototype['created_time'] = undefined;

/**
 * The user's email address. This data requires a bearer token with the `email` scope.
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * The absolute URL of this user's profile page.
 * @member {String} link
 */
User.prototype['link'] = undefined;

/**
 * The user's location.
 * @member {String} location
 */
User.prototype['location'] = undefined;

/**
 * @member {module:model/UserMetadata} metadata
 */
User.prototype['metadata'] = undefined;

/**
 * The user's display name.
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * The active portrait of this user.
 * @member {module:model/Picture} pictures
 */
User.prototype['pictures'] = undefined;

/**
 * @member {module:model/UserPreferences} preferences
 */
User.prototype['preferences'] = undefined;

/**
 * The user's resource key string.
 * @member {String} resource_key
 */
User.prototype['resource_key'] = undefined;

/**
 * @member {module:model/UserUploadQuota} upload_quota
 */
User.prototype['upload_quota'] = undefined;

/**
 * The user's canonical relative URI.
 * @member {String} uri
 */
User.prototype['uri'] = undefined;

/**
 * The user's websites.
 * @member {Array.<module:model/UserWebsitesInner>} websites
 */
User.prototype['websites'] = undefined;





/**
 * Allowed values for the <code>account</code> property.
 * @enum {String}
 * @readonly
 */
User['AccountEnum'] = {

    /**
     * value: "basic"
     * @const
     */
    "basic": "basic",

    /**
     * value: "business"
     * @const
     */
    "business": "business",

    /**
     * value: "live_business"
     * @const
     */
    "live_business": "live_business",

    /**
     * value: "live_premium"
     * @const
     */
    "live_premium": "live_premium",

    /**
     * value: "live_pro"
     * @const
     */
    "live_pro": "live_pro",

    /**
     * value: "plus"
     * @const
     */
    "plus": "plus",

    /**
     * value: "pro"
     * @const
     */
    "pro": "pro",

    /**
     * value: "pro_unlimited"
     * @const
     */
    "pro_unlimited": "pro_unlimited",

    /**
     * value: "producer"
     * @const
     */
    "producer": "producer"
};



export default User;

