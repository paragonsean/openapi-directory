/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';
import Video from './Video';

/**
 * The UploadAttempt model module.
 * @module model/UploadAttempt
 * @version 3.4
 */
class UploadAttempt {
    /**
     * Constructs a new <code>UploadAttempt</code>.
     * @alias module:model/UploadAttempt
     * @param ticketId {String} The ticket identifier string for the upload.
     * @param uploadLink {String} The upload URL.
     * @param uri {String} The upload URI.
     * @param user {module:model/User} The owner of the uploaded video.
     */
    constructor(ticketId, uploadLink, uri, user) { 
        
        UploadAttempt.initialize(this, ticketId, uploadLink, uri, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ticketId, uploadLink, uri, user) { 
        obj['ticket_id'] = ticketId;
        obj['upload_link'] = uploadLink;
        obj['uri'] = uri;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>UploadAttempt</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadAttempt} obj Optional instance to populate.
     * @return {module:model/UploadAttempt} The populated <code>UploadAttempt</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadAttempt();

            if (data.hasOwnProperty('clip')) {
                obj['clip'] = ApiClient.convertToType(data['clip'], Video);
            }
            if (data.hasOwnProperty('complete_uri')) {
                obj['complete_uri'] = ApiClient.convertToType(data['complete_uri'], 'String');
            }
            if (data.hasOwnProperty('form')) {
                obj['form'] = ApiClient.convertToType(data['form'], 'String');
            }
            if (data.hasOwnProperty('ticket_id')) {
                obj['ticket_id'] = ApiClient.convertToType(data['ticket_id'], 'String');
            }
            if (data.hasOwnProperty('upload_link')) {
                obj['upload_link'] = ApiClient.convertToType(data['upload_link'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], User);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadAttempt</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadAttempt</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UploadAttempt.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `clip`
        if (data['clip']) { // data not null
          Video.validateJSON(data['clip']);
        }
        // ensure the json data is a string
        if (data['complete_uri'] && !(typeof data['complete_uri'] === 'string' || data['complete_uri'] instanceof String)) {
            throw new Error("Expected the field `complete_uri` to be a primitive type in the JSON string but got " + data['complete_uri']);
        }
        // ensure the json data is a string
        if (data['form'] && !(typeof data['form'] === 'string' || data['form'] instanceof String)) {
            throw new Error("Expected the field `form` to be a primitive type in the JSON string but got " + data['form']);
        }
        // ensure the json data is a string
        if (data['ticket_id'] && !(typeof data['ticket_id'] === 'string' || data['ticket_id'] instanceof String)) {
            throw new Error("Expected the field `ticket_id` to be a primitive type in the JSON string but got " + data['ticket_id']);
        }
        // ensure the json data is a string
        if (data['upload_link'] && !(typeof data['upload_link'] === 'string' || data['upload_link'] instanceof String)) {
            throw new Error("Expected the field `upload_link` to be a primitive type in the JSON string but got " + data['upload_link']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

UploadAttempt.RequiredProperties = ["ticket_id", "upload_link", "uri", "user"];

/**
 * The video to upload.
 * @member {module:model/Video} clip
 */
UploadAttempt.prototype['clip'] = undefined;

/**
 * The completion URI of the upload.
 * @member {String} complete_uri
 */
UploadAttempt.prototype['complete_uri'] = undefined;

/**
 * The HTML upload form.
 * @member {String} form
 */
UploadAttempt.prototype['form'] = undefined;

/**
 * The ticket identifier string for the upload.
 * @member {String} ticket_id
 */
UploadAttempt.prototype['ticket_id'] = undefined;

/**
 * The upload URL.
 * @member {String} upload_link
 */
UploadAttempt.prototype['upload_link'] = undefined;

/**
 * The upload URI.
 * @member {String} uri
 */
UploadAttempt.prototype['uri'] = undefined;

/**
 * The owner of the uploaded video.
 * @member {module:model/User} user
 */
UploadAttempt.prototype['user'] = undefined;






export default UploadAttempt;

