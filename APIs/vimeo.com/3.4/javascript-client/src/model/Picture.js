/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PictureSizesInner from './PictureSizesInner';

/**
 * The Picture model module.
 * @module model/Picture
 * @version 3.4
 */
class Picture {
    /**
     * Constructs a new <code>Picture</code>.
     * @alias module:model/Picture
     * @param active {Boolean} Whether this picture is the active picture for its parent resource.
     * @param resourceKey {String} The picture's resource key string.
     * @param sizes {Array.<module:model/PictureSizesInner>} An array containing reference information about all available image files.
     * @param type {module:model/Picture.TypeEnum} The type of the picture:  Option descriptions:  * `caution` - An image that is appropriate for all ages.  * `custom` - A custom image for the video.  * `default` - The default image for the video. 
     * @param uri {String} The picture's URI.
     */
    constructor(active, resourceKey, sizes, type, uri) { 
        
        Picture.initialize(this, active, resourceKey, sizes, type, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, active, resourceKey, sizes, type, uri) { 
        obj['active'] = active;
        obj['resource_key'] = resourceKey;
        obj['sizes'] = sizes;
        obj['type'] = type;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>Picture</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Picture} obj Optional instance to populate.
     * @return {module:model/Picture} The populated <code>Picture</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Picture();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('resource_key')) {
                obj['resource_key'] = ApiClient.convertToType(data['resource_key'], 'String');
            }
            if (data.hasOwnProperty('sizes')) {
                obj['sizes'] = ApiClient.convertToType(data['sizes'], [PictureSizesInner]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Picture</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Picture</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Picture.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['resource_key'] && !(typeof data['resource_key'] === 'string' || data['resource_key'] instanceof String)) {
            throw new Error("Expected the field `resource_key` to be a primitive type in the JSON string but got " + data['resource_key']);
        }
        if (data['sizes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sizes'])) {
                throw new Error("Expected the field `sizes` to be an array in the JSON data but got " + data['sizes']);
            }
            // validate the optional field `sizes` (array)
            for (const item of data['sizes']) {
                PictureSizesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

Picture.RequiredProperties = ["active", "resource_key", "sizes", "type", "uri"];

/**
 * Whether this picture is the active picture for its parent resource.
 * @member {Boolean} active
 */
Picture.prototype['active'] = undefined;

/**
 * The upload URL for the picture. This field appears when you create the picture resource for the first time.
 * @member {String} link
 */
Picture.prototype['link'] = undefined;

/**
 * The picture's resource key string.
 * @member {String} resource_key
 */
Picture.prototype['resource_key'] = undefined;

/**
 * An array containing reference information about all available image files.
 * @member {Array.<module:model/PictureSizesInner>} sizes
 */
Picture.prototype['sizes'] = undefined;

/**
 * The type of the picture:  Option descriptions:  * `caution` - An image that is appropriate for all ages.  * `custom` - A custom image for the video.  * `default` - The default image for the video. 
 * @member {module:model/Picture.TypeEnum} type
 */
Picture.prototype['type'] = undefined;

/**
 * The picture's URI.
 * @member {String} uri
 */
Picture.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Picture['TypeEnum'] = {

    /**
     * value: "caution"
     * @const
     */
    "caution": "caution",

    /**
     * value: "custom"
     * @const
     */
    "custom": "custom",

    /**
     * value: "default"
     * @const
     */
    "default": "default"
};



export default Picture;

