/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EditUserAlt1RequestVideos from './EditUserAlt1RequestVideos';

/**
 * The EditUserAlt1Request model module.
 * @module model/EditUserAlt1Request
 * @version 3.4
 */
class EditUserAlt1Request {
    /**
     * Constructs a new <code>EditUserAlt1Request</code>.
     * @alias module:model/EditUserAlt1Request
     */
    constructor() { 
        
        EditUserAlt1Request.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EditUserAlt1Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EditUserAlt1Request} obj Optional instance to populate.
     * @return {module:model/EditUserAlt1Request} The populated <code>EditUserAlt1Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EditUserAlt1Request();

            if (data.hasOwnProperty('bio')) {
                obj['bio'] = ApiClient.convertToType(data['bio'], 'String');
            }
            if (data.hasOwnProperty('content_filter')) {
                obj['content_filter'] = ApiClient.convertToType(data['content_filter'], ['String']);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('videos')) {
                obj['videos'] = EditUserAlt1RequestVideos.constructFromObject(data['videos']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EditUserAlt1Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EditUserAlt1Request</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bio'] && !(typeof data['bio'] === 'string' || data['bio'] instanceof String)) {
            throw new Error("Expected the field `bio` to be a primitive type in the JSON string but got " + data['bio']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['content_filter'])) {
            throw new Error("Expected the field `content_filter` to be an array in the JSON data but got " + data['content_filter']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // validate the optional field `videos`
        if (data['videos']) { // data not null
          EditUserAlt1RequestVideos.validateJSON(data['videos']);
        }

        return true;
    }


}



/**
 * The user's bio.
 * @member {String} bio
 */
EditUserAlt1Request.prototype['bio'] = undefined;

/**
 * A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint. You must provide a comma-separated list if you are using a query string or an array if you are using JSON.
 * @member {Array.<String>} content_filter
 */
EditUserAlt1Request.prototype['content_filter'] = undefined;

/**
 * The user's custom Vimeo URL slug.
 * @member {String} link
 */
EditUserAlt1Request.prototype['link'] = undefined;

/**
 * The user's location.
 * @member {String} location
 */
EditUserAlt1Request.prototype['location'] = undefined;

/**
 * The user's display name.
 * @member {String} name
 */
EditUserAlt1Request.prototype['name'] = undefined;

/**
 * The default password for all future videos that this user uploads. To use this field, the `videos.privacy.view` field must be `password`.
 * @member {String} password
 */
EditUserAlt1Request.prototype['password'] = undefined;

/**
 * @member {module:model/EditUserAlt1RequestVideos} videos
 */
EditUserAlt1Request.prototype['videos'] = undefined;






export default EditUserAlt1Request;

