/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreativeCommons model module.
 * @module model/CreativeCommons
 * @version 3.4
 */
class CreativeCommons {
    /**
     * Constructs a new <code>CreativeCommons</code>.
     * @alias module:model/CreativeCommons
     * @param code {module:model/CreativeCommons.CodeEnum} The code that uniquely identifies this Creative Commons license:  Option descriptions:  * `by` - Attribution  * `by-nc` - Attribution Non-Commercial  * `by-nc-nd` - Attribution Non-Commercial No Derivatives  * `by-nc-sa` - Attribution Non-Commercial Share Alike  * `by-nd` - Attribution No Derivatives  * `by-sa` - Attribution Share Alike  * `cc0` - Public Domain Dedication 
     * @param name {String} The description of this Creative Commons license.
     * @param uri {String} The canonical relative URI of the Creative Commons license.
     */
    constructor(code, name, uri) { 
        
        CreativeCommons.initialize(this, code, name, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, name, uri) { 
        obj['code'] = code;
        obj['name'] = name;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>CreativeCommons</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreativeCommons} obj Optional instance to populate.
     * @return {module:model/CreativeCommons} The populated <code>CreativeCommons</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreativeCommons();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreativeCommons</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreativeCommons</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreativeCommons.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

CreativeCommons.RequiredProperties = ["code", "name", "uri"];

/**
 * The code that uniquely identifies this Creative Commons license:  Option descriptions:  * `by` - Attribution  * `by-nc` - Attribution Non-Commercial  * `by-nc-nd` - Attribution Non-Commercial No Derivatives  * `by-nc-sa` - Attribution Non-Commercial Share Alike  * `by-nd` - Attribution No Derivatives  * `by-sa` - Attribution Share Alike  * `cc0` - Public Domain Dedication 
 * @member {module:model/CreativeCommons.CodeEnum} code
 */
CreativeCommons.prototype['code'] = undefined;

/**
 * The description of this Creative Commons license.
 * @member {String} name
 */
CreativeCommons.prototype['name'] = undefined;

/**
 * The canonical relative URI of the Creative Commons license.
 * @member {String} uri
 */
CreativeCommons.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
CreativeCommons['CodeEnum'] = {

    /**
     * value: "by"
     * @const
     */
    "by": "by",

    /**
     * value: "by-nc"
     * @const
     */
    "by-nc": "by-nc",

    /**
     * value: "by-nc-nd"
     * @const
     */
    "by-nc-nd": "by-nc-nd",

    /**
     * value: "by-nc-sa"
     * @const
     */
    "by-nc-sa": "by-nc-sa",

    /**
     * value: "by-nd"
     * @const
     */
    "by-nd": "by-nd",

    /**
     * value: "by-sa"
     * @const
     */
    "by-sa": "by-sa",

    /**
     * value: "cc0"
     * @const
     */
    "cc0": "cc0"
};



export default CreativeCommons;

