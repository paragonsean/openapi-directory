/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadVideoAlt1RequestEmbedButtons model module.
 * @module model/UploadVideoAlt1RequestEmbedButtons
 * @version 3.4
 */
class UploadVideoAlt1RequestEmbedButtons {
    /**
     * Constructs a new <code>UploadVideoAlt1RequestEmbedButtons</code>.
     * @alias module:model/UploadVideoAlt1RequestEmbedButtons
     */
    constructor() { 
        
        UploadVideoAlt1RequestEmbedButtons.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UploadVideoAlt1RequestEmbedButtons</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadVideoAlt1RequestEmbedButtons} obj Optional instance to populate.
     * @return {module:model/UploadVideoAlt1RequestEmbedButtons} The populated <code>UploadVideoAlt1RequestEmbedButtons</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadVideoAlt1RequestEmbedButtons();

            if (data.hasOwnProperty('embed')) {
                obj['embed'] = ApiClient.convertToType(data['embed'], 'Boolean');
            }
            if (data.hasOwnProperty('fullscreen')) {
                obj['fullscreen'] = ApiClient.convertToType(data['fullscreen'], 'Boolean');
            }
            if (data.hasOwnProperty('hd')) {
                obj['hd'] = ApiClient.convertToType(data['hd'], 'Boolean');
            }
            if (data.hasOwnProperty('like')) {
                obj['like'] = ApiClient.convertToType(data['like'], 'Boolean');
            }
            if (data.hasOwnProperty('scaling')) {
                obj['scaling'] = ApiClient.convertToType(data['scaling'], 'Boolean');
            }
            if (data.hasOwnProperty('share')) {
                obj['share'] = ApiClient.convertToType(data['share'], 'Boolean');
            }
            if (data.hasOwnProperty('watchlater')) {
                obj['watchlater'] = ApiClient.convertToType(data['watchlater'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadVideoAlt1RequestEmbedButtons</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadVideoAlt1RequestEmbedButtons</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Show or hide the Embed button.
 * @member {Boolean} embed
 */
UploadVideoAlt1RequestEmbedButtons.prototype['embed'] = undefined;

/**
 * Show or hide the Fullscreen button.
 * @member {Boolean} fullscreen
 */
UploadVideoAlt1RequestEmbedButtons.prototype['fullscreen'] = undefined;

/**
 * Show or hide the HD button.
 * @member {Boolean} hd
 */
UploadVideoAlt1RequestEmbedButtons.prototype['hd'] = undefined;

/**
 * Show or hide the Like button.
 * @member {Boolean} like
 */
UploadVideoAlt1RequestEmbedButtons.prototype['like'] = undefined;

/**
 * Show or hide the Scaling button (shown only in Fullscreen mode).
 * @member {Boolean} scaling
 */
UploadVideoAlt1RequestEmbedButtons.prototype['scaling'] = undefined;

/**
 * Show or hide the Share button.
 * @member {Boolean} share
 */
UploadVideoAlt1RequestEmbedButtons.prototype['share'] = undefined;

/**
 * Show or hide the Watch Later button.
 * @member {Boolean} watchlater
 */
UploadVideoAlt1RequestEmbedButtons.prototype['watchlater'] = undefined;






export default UploadVideoAlt1RequestEmbedButtons;

