/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserUploadQuotaSpace model module.
 * @module model/UserUploadQuotaSpace
 * @version 3.4
 */
class UserUploadQuotaSpace {
    /**
     * Constructs a new <code>UserUploadQuotaSpace</code>.
     * Information about the user&#39;s upload space remaining for the current period.
     * @alias module:model/UserUploadQuotaSpace
     * @param free {Number} The number of bytes remaining in your upload quota.
     * @param max {Number} The maximum number of bytes allotted to your upload quota.
     * @param showing {module:model/UserUploadQuotaSpace.ShowingEnum} Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
     * @param used {Number} The number of bytes that you've already uploaded against your quota.
     */
    constructor(free, max, showing, used) { 
        
        UserUploadQuotaSpace.initialize(this, free, max, showing, used);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, free, max, showing, used) { 
        obj['free'] = free;
        obj['max'] = max;
        obj['showing'] = showing;
        obj['used'] = used;
    }

    /**
     * Constructs a <code>UserUploadQuotaSpace</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserUploadQuotaSpace} obj Optional instance to populate.
     * @return {module:model/UserUploadQuotaSpace} The populated <code>UserUploadQuotaSpace</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserUploadQuotaSpace();

            if (data.hasOwnProperty('free')) {
                obj['free'] = ApiClient.convertToType(data['free'], 'Number');
            }
            if (data.hasOwnProperty('max')) {
                obj['max'] = ApiClient.convertToType(data['max'], 'Number');
            }
            if (data.hasOwnProperty('showing')) {
                obj['showing'] = ApiClient.convertToType(data['showing'], 'String');
            }
            if (data.hasOwnProperty('used')) {
                obj['used'] = ApiClient.convertToType(data['used'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserUploadQuotaSpace</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserUploadQuotaSpace</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserUploadQuotaSpace.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['showing'] && !(typeof data['showing'] === 'string' || data['showing'] instanceof String)) {
            throw new Error("Expected the field `showing` to be a primitive type in the JSON string but got " + data['showing']);
        }

        return true;
    }


}

UserUploadQuotaSpace.RequiredProperties = ["free", "max", "showing", "used"];

/**
 * The number of bytes remaining in your upload quota.
 * @member {Number} free
 */
UserUploadQuotaSpace.prototype['free'] = undefined;

/**
 * The maximum number of bytes allotted to your upload quota.
 * @member {Number} max
 */
UserUploadQuotaSpace.prototype['max'] = undefined;

/**
 * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
 * @member {module:model/UserUploadQuotaSpace.ShowingEnum} showing
 */
UserUploadQuotaSpace.prototype['showing'] = undefined;

/**
 * The number of bytes that you've already uploaded against your quota.
 * @member {Number} used
 */
UserUploadQuotaSpace.prototype['used'] = undefined;





/**
 * Allowed values for the <code>showing</code> property.
 * @enum {String}
 * @readonly
 */
UserUploadQuotaSpace['ShowingEnum'] = {

    /**
     * value: "lifetime"
     * @const
     */
    "lifetime": "lifetime",

    /**
     * value: "periodic"
     * @const
     */
    "periodic": "periodic"
};



export default UserUploadQuotaSpace;

