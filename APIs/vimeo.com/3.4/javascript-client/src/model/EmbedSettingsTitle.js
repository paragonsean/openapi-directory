/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EmbedSettingsTitle model module.
 * @module model/EmbedSettingsTitle
 * @version 3.4
 */
class EmbedSettingsTitle {
    /**
     * Constructs a new <code>EmbedSettingsTitle</code>.
     * A collection of information relating to the embeddable player&#39;s title bar.
     * @alias module:model/EmbedSettingsTitle
     * @param name {module:model/EmbedSettingsTitle.NameEnum} How the embeddable player handles the video title:  Option descriptions:  * `hide` - The title is hidden.  * `show` - The title is shown. 
     * @param owner {module:model/EmbedSettingsTitle.OwnerEnum} How the embeddable player handles the video owner's information:  Option descriptions:  * `hide` - The owner's information is hidden.  * `show` - The owner's information is shown. 
     * @param portrait {module:model/EmbedSettingsTitle.PortraitEnum} How the embeddable player handles the video owner's portrait:  Option descriptions:  * `hide` - The owner's portrait is hidden  * `show` - The owner's portrait is shown. 
     */
    constructor(name, owner, portrait) { 
        
        EmbedSettingsTitle.initialize(this, name, owner, portrait);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, owner, portrait) { 
        obj['name'] = name;
        obj['owner'] = owner;
        obj['portrait'] = portrait;
    }

    /**
     * Constructs a <code>EmbedSettingsTitle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmbedSettingsTitle} obj Optional instance to populate.
     * @return {module:model/EmbedSettingsTitle} The populated <code>EmbedSettingsTitle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmbedSettingsTitle();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('portrait')) {
                obj['portrait'] = ApiClient.convertToType(data['portrait'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmbedSettingsTitle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmbedSettingsTitle</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EmbedSettingsTitle.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['portrait'] && !(typeof data['portrait'] === 'string' || data['portrait'] instanceof String)) {
            throw new Error("Expected the field `portrait` to be a primitive type in the JSON string but got " + data['portrait']);
        }

        return true;
    }


}

EmbedSettingsTitle.RequiredProperties = ["name", "owner", "portrait"];

/**
 * How the embeddable player handles the video title:  Option descriptions:  * `hide` - The title is hidden.  * `show` - The title is shown. 
 * @member {module:model/EmbedSettingsTitle.NameEnum} name
 */
EmbedSettingsTitle.prototype['name'] = undefined;

/**
 * How the embeddable player handles the video owner's information:  Option descriptions:  * `hide` - The owner's information is hidden.  * `show` - The owner's information is shown. 
 * @member {module:model/EmbedSettingsTitle.OwnerEnum} owner
 */
EmbedSettingsTitle.prototype['owner'] = undefined;

/**
 * How the embeddable player handles the video owner's portrait:  Option descriptions:  * `hide` - The owner's portrait is hidden  * `show` - The owner's portrait is shown. 
 * @member {module:model/EmbedSettingsTitle.PortraitEnum} portrait
 */
EmbedSettingsTitle.prototype['portrait'] = undefined;





/**
 * Allowed values for the <code>name</code> property.
 * @enum {String}
 * @readonly
 */
EmbedSettingsTitle['NameEnum'] = {

    /**
     * value: "hide"
     * @const
     */
    "hide": "hide",

    /**
     * value: "show"
     * @const
     */
    "show": "show",

    /**
     * value: "user"
     * @const
     */
    "user": "user"
};


/**
 * Allowed values for the <code>owner</code> property.
 * @enum {String}
 * @readonly
 */
EmbedSettingsTitle['OwnerEnum'] = {

    /**
     * value: "hide"
     * @const
     */
    "hide": "hide",

    /**
     * value: "show"
     * @const
     */
    "show": "show",

    /**
     * value: "user"
     * @const
     */
    "user": "user"
};


/**
 * Allowed values for the <code>portrait</code> property.
 * @enum {String}
 * @readonly
 */
EmbedSettingsTitle['PortraitEnum'] = {

    /**
     * value: "hide"
     * @const
     */
    "hide": "hide",

    /**
     * value: "show"
     * @const
     */
    "show": "show",

    /**
     * value: "user"
     * @const
     */
    "user": "user"
};



export default EmbedSettingsTitle;

