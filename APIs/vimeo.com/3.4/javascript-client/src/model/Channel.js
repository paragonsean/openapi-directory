/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import ChannelMetadata from './ChannelMetadata';
import ChannelPrivacy from './ChannelPrivacy';
import Picture from './Picture';
import Tag from './Tag';
import User from './User';

/**
 * The Channel model module.
 * @module model/Channel
 * @version 3.4
 */
class Channel {
    /**
     * Constructs a new <code>Channel</code>.
     * @alias module:model/Channel
     * @param categories {Array.<module:model/Category>} The categories to which this channel belongs as specified by the channel moderators.
     * @param createdTime {String} The time in ISO 8601 format when the channel was created.
     * @param description {String} A brief explanation of the channel's content.
     * @param header {module:model/Picture} The banner that appears by default at the top of the channel page.
     * @param link {String} The URL to access the channel in a browser.
     * @param metadata {module:model/ChannelMetadata} 
     * @param modifiedTime {String} The time in ISO 8601 format when the album was last modified.
     * @param name {String} The display name that identifies the channel.
     * @param pictures {module:model/Picture} The active image for the channel; defaults to the thumbnail of the last video added to the channel.
     * @param privacy {module:model/ChannelPrivacy} 
     * @param resourceKey {String} The channel resource key.
     * @param tags {Array.<module:model/Tag>} An array of all tags assigned to this channel.
     * @param uri {String} The unique identifier to access the channel resource.
     * @param user {module:model/User} The Vimeo user who owns the channel.
     */
    constructor(categories, createdTime, description, header, link, metadata, modifiedTime, name, pictures, privacy, resourceKey, tags, uri, user) { 
        
        Channel.initialize(this, categories, createdTime, description, header, link, metadata, modifiedTime, name, pictures, privacy, resourceKey, tags, uri, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, categories, createdTime, description, header, link, metadata, modifiedTime, name, pictures, privacy, resourceKey, tags, uri, user) { 
        obj['categories'] = categories;
        obj['created_time'] = createdTime;
        obj['description'] = description;
        obj['header'] = header;
        obj['link'] = link;
        obj['metadata'] = metadata;
        obj['modified_time'] = modifiedTime;
        obj['name'] = name;
        obj['pictures'] = pictures;
        obj['privacy'] = privacy;
        obj['resource_key'] = resourceKey;
        obj['tags'] = tags;
        obj['uri'] = uri;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>Channel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Channel} obj Optional instance to populate.
     * @return {module:model/Channel} The populated <code>Channel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Channel();

            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Category]);
            }
            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = ApiClient.convertToType(data['created_time'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = ApiClient.convertToType(data['header'], Picture);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ChannelMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('modified_time')) {
                obj['modified_time'] = ApiClient.convertToType(data['modified_time'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pictures')) {
                obj['pictures'] = ApiClient.convertToType(data['pictures'], Picture);
            }
            if (data.hasOwnProperty('privacy')) {
                obj['privacy'] = ChannelPrivacy.constructFromObject(data['privacy']);
            }
            if (data.hasOwnProperty('resource_key')) {
                obj['resource_key'] = ApiClient.convertToType(data['resource_key'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], User);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Channel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Channel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Channel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                Category.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['created_time'] && !(typeof data['created_time'] === 'string' || data['created_time'] instanceof String)) {
            throw new Error("Expected the field `created_time` to be a primitive type in the JSON string but got " + data['created_time']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `header`
        if (data['header']) { // data not null
          Picture.validateJSON(data['header']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          ChannelMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['modified_time'] && !(typeof data['modified_time'] === 'string' || data['modified_time'] instanceof String)) {
            throw new Error("Expected the field `modified_time` to be a primitive type in the JSON string but got " + data['modified_time']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `pictures`
        if (data['pictures']) { // data not null
          Picture.validateJSON(data['pictures']);
        }
        // validate the optional field `privacy`
        if (data['privacy']) { // data not null
          ChannelPrivacy.validateJSON(data['privacy']);
        }
        // ensure the json data is a string
        if (data['resource_key'] && !(typeof data['resource_key'] === 'string' || data['resource_key'] instanceof String)) {
            throw new Error("Expected the field `resource_key` to be a primitive type in the JSON string but got " + data['resource_key']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                Tag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

Channel.RequiredProperties = ["categories", "created_time", "description", "header", "link", "metadata", "modified_time", "name", "pictures", "privacy", "resource_key", "tags", "uri", "user"];

/**
 * The categories to which this channel belongs as specified by the channel moderators.
 * @member {Array.<module:model/Category>} categories
 */
Channel.prototype['categories'] = undefined;

/**
 * The time in ISO 8601 format when the channel was created.
 * @member {String} created_time
 */
Channel.prototype['created_time'] = undefined;

/**
 * A brief explanation of the channel's content.
 * @member {String} description
 */
Channel.prototype['description'] = undefined;

/**
 * The banner that appears by default at the top of the channel page.
 * @member {module:model/Picture} header
 */
Channel.prototype['header'] = undefined;

/**
 * The URL to access the channel in a browser.
 * @member {String} link
 */
Channel.prototype['link'] = undefined;

/**
 * @member {module:model/ChannelMetadata} metadata
 */
Channel.prototype['metadata'] = undefined;

/**
 * The time in ISO 8601 format when the album was last modified.
 * @member {String} modified_time
 */
Channel.prototype['modified_time'] = undefined;

/**
 * The display name that identifies the channel.
 * @member {String} name
 */
Channel.prototype['name'] = undefined;

/**
 * The active image for the channel; defaults to the thumbnail of the last video added to the channel.
 * @member {module:model/Picture} pictures
 */
Channel.prototype['pictures'] = undefined;

/**
 * @member {module:model/ChannelPrivacy} privacy
 */
Channel.prototype['privacy'] = undefined;

/**
 * The channel resource key.
 * @member {String} resource_key
 */
Channel.prototype['resource_key'] = undefined;

/**
 * An array of all tags assigned to this channel.
 * @member {Array.<module:model/Tag>} tags
 */
Channel.prototype['tags'] = undefined;

/**
 * The unique identifier to access the channel resource.
 * @member {String} uri
 */
Channel.prototype['uri'] = undefined;

/**
 * The Vimeo user who owns the channel.
 * @member {module:model/User} user
 */
Channel.prototype['user'] = undefined;






export default Channel;

