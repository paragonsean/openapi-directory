/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategoryMetadata from './CategoryMetadata';
import CategoryParent from './CategoryParent';
import CategorySubcategoriesInner from './CategorySubcategoriesInner';
import Picture from './Picture';

/**
 * The Category model module.
 * @module model/Category
 * @version 3.4
 */
class Category {
    /**
     * Constructs a new <code>Category</code>.
     * @alias module:model/Category
     * @param lastVideoFeaturedTime {String} The last time, in ISO 8601 format, that a video was featured.
     * @param link {String} The URL to access the category in a browser.
     * @param metadata {module:model/CategoryMetadata} 
     * @param name {String} The display name that identifies the category.
     * @param parent {module:model/CategoryParent} 
     * @param pictures {module:model/Picture} The active picture for this category; defaults to vertical color bars.
     * @param resourceKey {String} The resource key of the category.
     * @param topLevel {Boolean} Whether the category isn't a subcategory of another category.
     * @param uri {String} The unique identifier to access the category resource.
     */
    constructor(lastVideoFeaturedTime, link, metadata, name, parent, pictures, resourceKey, topLevel, uri) { 
        
        Category.initialize(this, lastVideoFeaturedTime, link, metadata, name, parent, pictures, resourceKey, topLevel, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lastVideoFeaturedTime, link, metadata, name, parent, pictures, resourceKey, topLevel, uri) { 
        obj['last_video_featured_time'] = lastVideoFeaturedTime;
        obj['link'] = link;
        obj['metadata'] = metadata;
        obj['name'] = name;
        obj['parent'] = parent;
        obj['pictures'] = pictures;
        obj['resource_key'] = resourceKey;
        obj['top_level'] = topLevel;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>Category</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Category} obj Optional instance to populate.
     * @return {module:model/Category} The populated <code>Category</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Category();

            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], Picture);
            }
            if (data.hasOwnProperty('last_video_featured_time')) {
                obj['last_video_featured_time'] = ApiClient.convertToType(data['last_video_featured_time'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = CategoryMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = CategoryParent.constructFromObject(data['parent']);
            }
            if (data.hasOwnProperty('pictures')) {
                obj['pictures'] = ApiClient.convertToType(data['pictures'], Picture);
            }
            if (data.hasOwnProperty('resource_key')) {
                obj['resource_key'] = ApiClient.convertToType(data['resource_key'], 'String');
            }
            if (data.hasOwnProperty('subcategories')) {
                obj['subcategories'] = ApiClient.convertToType(data['subcategories'], [CategorySubcategoriesInner]);
            }
            if (data.hasOwnProperty('top_level')) {
                obj['top_level'] = ApiClient.convertToType(data['top_level'], 'Boolean');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Category</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Category</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Category.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `icon`
        if (data['icon']) { // data not null
          Picture.validateJSON(data['icon']);
        }
        // ensure the json data is a string
        if (data['last_video_featured_time'] && !(typeof data['last_video_featured_time'] === 'string' || data['last_video_featured_time'] instanceof String)) {
            throw new Error("Expected the field `last_video_featured_time` to be a primitive type in the JSON string but got " + data['last_video_featured_time']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          CategoryMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `parent`
        if (data['parent']) { // data not null
          CategoryParent.validateJSON(data['parent']);
        }
        // validate the optional field `pictures`
        if (data['pictures']) { // data not null
          Picture.validateJSON(data['pictures']);
        }
        // ensure the json data is a string
        if (data['resource_key'] && !(typeof data['resource_key'] === 'string' || data['resource_key'] instanceof String)) {
            throw new Error("Expected the field `resource_key` to be a primitive type in the JSON string but got " + data['resource_key']);
        }
        if (data['subcategories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subcategories'])) {
                throw new Error("Expected the field `subcategories` to be an array in the JSON data but got " + data['subcategories']);
            }
            // validate the optional field `subcategories` (array)
            for (const item of data['subcategories']) {
                CategorySubcategoriesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

Category.RequiredProperties = ["last_video_featured_time", "link", "metadata", "name", "parent", "pictures", "resource_key", "top_level", "uri"];

/**
 * The active icon for the category.
 * @member {module:model/Picture} icon
 */
Category.prototype['icon'] = undefined;

/**
 * The last time, in ISO 8601 format, that a video was featured.
 * @member {String} last_video_featured_time
 */
Category.prototype['last_video_featured_time'] = undefined;

/**
 * The URL to access the category in a browser.
 * @member {String} link
 */
Category.prototype['link'] = undefined;

/**
 * @member {module:model/CategoryMetadata} metadata
 */
Category.prototype['metadata'] = undefined;

/**
 * The display name that identifies the category.
 * @member {String} name
 */
Category.prototype['name'] = undefined;

/**
 * @member {module:model/CategoryParent} parent
 */
Category.prototype['parent'] = undefined;

/**
 * The active picture for this category; defaults to vertical color bars.
 * @member {module:model/Picture} pictures
 */
Category.prototype['pictures'] = undefined;

/**
 * The resource key of the category.
 * @member {String} resource_key
 */
Category.prototype['resource_key'] = undefined;

/**
 * All the subcategories that belong to this category, if the current category is a top-level parent.
 * @member {Array.<module:model/CategorySubcategoriesInner>} subcategories
 */
Category.prototype['subcategories'] = undefined;

/**
 * Whether the category isn't a subcategory of another category.
 * @member {Boolean} top_level
 */
Category.prototype['top_level'] = undefined;

/**
 * The unique identifier to access the category resource.
 * @member {String} uri
 */
Category.prototype['uri'] = undefined;






export default Category;

