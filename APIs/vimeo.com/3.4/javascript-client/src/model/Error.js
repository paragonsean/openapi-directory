/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Error model module.
 * @module model/Error
 * @version 3.4
 */
class Error {
    /**
     * Constructs a new <code>Error</code>.
     * @alias module:model/Error
     * @param developerMessage {String} The error message that developers receive.
     * @param error {String} The error message that non-developer users receive.
     * @param errorCode {Number} The error code.
     * @param link {String} A link to more information about the error.
     */
    constructor(developerMessage, error, errorCode, link) { 
        
        Error.initialize(this, developerMessage, error, errorCode, link);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, developerMessage, error, errorCode, link) { 
        obj['developer_message'] = developerMessage;
        obj['error'] = error;
        obj['error_code'] = errorCode;
        obj['link'] = link;
    }

    /**
     * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Error} obj Optional instance to populate.
     * @return {module:model/Error} The populated <code>Error</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Error();

            if (data.hasOwnProperty('developer_message')) {
                obj['developer_message'] = ApiClient.convertToType(data['developer_message'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('error_code')) {
                obj['error_code'] = ApiClient.convertToType(data['error_code'], 'Number');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Error</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Error</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Error.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['developer_message'] && !(typeof data['developer_message'] === 'string' || data['developer_message'] instanceof String)) {
            throw new Error("Expected the field `developer_message` to be a primitive type in the JSON string but got " + data['developer_message']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }

        return true;
    }


}

Error.RequiredProperties = ["developer_message", "error", "error_code", "link"];

/**
 * The error message that developers receive.
 * @member {String} developer_message
 */
Error.prototype['developer_message'] = undefined;

/**
 * The error message that non-developer users receive.
 * @member {String} error
 */
Error.prototype['error'] = undefined;

/**
 * The error code.
 * @member {Number} error_code
 */
Error.prototype['error_code'] = undefined;

/**
 * A link to more information about the error.
 * @member {String} link
 */
Error.prototype['link'] = undefined;






export default Error;

