/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VideoPrivacy model module.
 * @module model/VideoPrivacy
 * @version 3.4
 */
class VideoPrivacy {
    /**
     * Constructs a new <code>VideoPrivacy</code>.
     * The video&#39;s privacy setting.
     * @alias module:model/VideoPrivacy
     * @param add {Boolean} Whether the video can be added to collections.
     * @param comments {module:model/VideoPrivacy.CommentsEnum} Who can comment on the video:  Option descriptions:  * `anybody` - Anyone can comment on the video.  * `contacts` - Only contacts can comment on the video.  * `nobody` - No one can comment on the video. 
     * @param download {Boolean} The video's download permission setting.
     * @param embed {module:model/VideoPrivacy.EmbedEnum} The video's embed permission setting:  Option descriptions:  * `private` - The video is private.  * `public` - Anyone can embed the video. 
     * @param view {module:model/VideoPrivacy.ViewEnum} The general privacy setting for the video:  Option descriptions:  * `anybody` - Anyone can view the video.  * `contacts` - Only contacts can view the video.  * `disable` - Hide from vimeo  * `nobody` - No one besides the owner can view the video.  * `password` - Anyone with the video's password can view the video.  * `unlisted` - Not searchable from vimeo.com  * `users` - Only people with a Vimeo account can view the video. 
     */
    constructor(add, comments, download, embed, view) { 
        
        VideoPrivacy.initialize(this, add, comments, download, embed, view);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, add, comments, download, embed, view) { 
        obj['add'] = add;
        obj['comments'] = comments;
        obj['download'] = download;
        obj['embed'] = embed;
        obj['view'] = view;
    }

    /**
     * Constructs a <code>VideoPrivacy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoPrivacy} obj Optional instance to populate.
     * @return {module:model/VideoPrivacy} The populated <code>VideoPrivacy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoPrivacy();

            if (data.hasOwnProperty('add')) {
                obj['add'] = ApiClient.convertToType(data['add'], 'Boolean');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('download')) {
                obj['download'] = ApiClient.convertToType(data['download'], 'Boolean');
            }
            if (data.hasOwnProperty('embed')) {
                obj['embed'] = ApiClient.convertToType(data['embed'], 'String');
            }
            if (data.hasOwnProperty('view')) {
                obj['view'] = ApiClient.convertToType(data['view'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoPrivacy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoPrivacy</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VideoPrivacy.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['embed'] && !(typeof data['embed'] === 'string' || data['embed'] instanceof String)) {
            throw new Error("Expected the field `embed` to be a primitive type in the JSON string but got " + data['embed']);
        }
        // ensure the json data is a string
        if (data['view'] && !(typeof data['view'] === 'string' || data['view'] instanceof String)) {
            throw new Error("Expected the field `view` to be a primitive type in the JSON string but got " + data['view']);
        }

        return true;
    }


}

VideoPrivacy.RequiredProperties = ["add", "comments", "download", "embed", "view"];

/**
 * Whether the video can be added to collections.
 * @member {Boolean} add
 */
VideoPrivacy.prototype['add'] = undefined;

/**
 * Who can comment on the video:  Option descriptions:  * `anybody` - Anyone can comment on the video.  * `contacts` - Only contacts can comment on the video.  * `nobody` - No one can comment on the video. 
 * @member {module:model/VideoPrivacy.CommentsEnum} comments
 */
VideoPrivacy.prototype['comments'] = undefined;

/**
 * The video's download permission setting.
 * @member {Boolean} download
 */
VideoPrivacy.prototype['download'] = undefined;

/**
 * The video's embed permission setting:  Option descriptions:  * `private` - The video is private.  * `public` - Anyone can embed the video. 
 * @member {module:model/VideoPrivacy.EmbedEnum} embed
 */
VideoPrivacy.prototype['embed'] = undefined;

/**
 * The general privacy setting for the video:  Option descriptions:  * `anybody` - Anyone can view the video.  * `contacts` - Only contacts can view the video.  * `disable` - Hide from vimeo  * `nobody` - No one besides the owner can view the video.  * `password` - Anyone with the video's password can view the video.  * `unlisted` - Not searchable from vimeo.com  * `users` - Only people with a Vimeo account can view the video. 
 * @member {module:model/VideoPrivacy.ViewEnum} view
 */
VideoPrivacy.prototype['view'] = undefined;





/**
 * Allowed values for the <code>comments</code> property.
 * @enum {String}
 * @readonly
 */
VideoPrivacy['CommentsEnum'] = {

    /**
     * value: "anybody"
     * @const
     */
    "anybody": "anybody",

    /**
     * value: "contacts"
     * @const
     */
    "contacts": "contacts",

    /**
     * value: "nobody"
     * @const
     */
    "nobody": "nobody"
};


/**
 * Allowed values for the <code>embed</code> property.
 * @enum {String}
 * @readonly
 */
VideoPrivacy['EmbedEnum'] = {

    /**
     * value: "private"
     * @const
     */
    "private": "private",

    /**
     * value: "public"
     * @const
     */
    "public": "public"
};


/**
 * Allowed values for the <code>view</code> property.
 * @enum {String}
 * @readonly
 */
VideoPrivacy['ViewEnum'] = {

    /**
     * value: "anybody"
     * @const
     */
    "anybody": "anybody",

    /**
     * value: "contacts"
     * @const
     */
    "contacts": "contacts",

    /**
     * value: "disable"
     * @const
     */
    "disable": "disable",

    /**
     * value: "nobody"
     * @const
     */
    "nobody": "nobody",

    /**
     * value: "password"
     * @const
     */
    "password": "password",

    /**
     * value: "unlisted"
     * @const
     */
    "unlisted": "unlisted",

    /**
     * value: "users"
     * @const
     */
    "users": "users"
};



export default VideoPrivacy;

