/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProjectMetadata from './ProjectMetadata';
import User from './User';

/**
 * The Project model module.
 * @module model/Project
 * @version 3.4
 */
class Project {
    /**
     * Constructs a new <code>Project</code>.
     * @alias module:model/Project
     * @param createdTime {String} The time in ISO 8601 format when the project was created.
     * @param metadata {module:model/ProjectMetadata} 
     * @param modifiedTime {String} The time in ISO 8601 format when the project was last modified.
     * @param name {String} The name of the folder.
     * @param resourceKey {String} The resource key string of the project.
     * @param uri {String} The URI of the project.
     * @param user {module:model/User} The owner of the project.
     */
    constructor(createdTime, metadata, modifiedTime, name, resourceKey, uri, user) { 
        
        Project.initialize(this, createdTime, metadata, modifiedTime, name, resourceKey, uri, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdTime, metadata, modifiedTime, name, resourceKey, uri, user) { 
        obj['created_time'] = createdTime;
        obj['metadata'] = metadata;
        obj['modified_time'] = modifiedTime;
        obj['name'] = name;
        obj['resource_key'] = resourceKey;
        obj['uri'] = uri;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>Project</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Project} obj Optional instance to populate.
     * @return {module:model/Project} The populated <code>Project</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Project();

            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = ApiClient.convertToType(data['created_time'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ProjectMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('modified_time')) {
                obj['modified_time'] = ApiClient.convertToType(data['modified_time'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resource_key')) {
                obj['resource_key'] = ApiClient.convertToType(data['resource_key'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], User);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Project</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Project</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Project.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created_time'] && !(typeof data['created_time'] === 'string' || data['created_time'] instanceof String)) {
            throw new Error("Expected the field `created_time` to be a primitive type in the JSON string but got " + data['created_time']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          ProjectMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['modified_time'] && !(typeof data['modified_time'] === 'string' || data['modified_time'] instanceof String)) {
            throw new Error("Expected the field `modified_time` to be a primitive type in the JSON string but got " + data['modified_time']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resource_key'] && !(typeof data['resource_key'] === 'string' || data['resource_key'] instanceof String)) {
            throw new Error("Expected the field `resource_key` to be a primitive type in the JSON string but got " + data['resource_key']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

Project.RequiredProperties = ["created_time", "metadata", "modified_time", "name", "resource_key", "uri", "user"];

/**
 * The time in ISO 8601 format when the project was created.
 * @member {String} created_time
 */
Project.prototype['created_time'] = undefined;

/**
 * @member {module:model/ProjectMetadata} metadata
 */
Project.prototype['metadata'] = undefined;

/**
 * The time in ISO 8601 format when the project was last modified.
 * @member {String} modified_time
 */
Project.prototype['modified_time'] = undefined;

/**
 * The name of the folder.
 * @member {String} name
 */
Project.prototype['name'] = undefined;

/**
 * The resource key string of the project.
 * @member {String} resource_key
 */
Project.prototype['resource_key'] = undefined;

/**
 * The URI of the project.
 * @member {String} uri
 */
Project.prototype['uri'] = undefined;

/**
 * The owner of the project.
 * @member {module:model/User} user
 */
Project.prototype['user'] = undefined;






export default Project;

