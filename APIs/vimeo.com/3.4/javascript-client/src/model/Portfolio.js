/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PortfolioMetadata from './PortfolioMetadata';

/**
 * The Portfolio model module.
 * @module model/Portfolio
 * @version 3.4
 */
class Portfolio {
    /**
     * Constructs a new <code>Portfolio</code>.
     * @alias module:model/Portfolio
     * @param createdTime {String} The time in ISO 8601 format when the portfolio was created.
     * @param description {String} The portfolio's description.
     * @param link {String} The link to the portfolio.
     * @param metadata {module:model/PortfolioMetadata} 
     * @param modifiedTime {String} The time in ISO 8601 format when the portfolio's data was last modified.
     * @param name {String} The display name of the portfolio.
     * @param sort {module:model/Portfolio.SortEnum} The default video sort order for the portfolio:  Option descriptions:  * `alphabetical` - The default sort order is alphabetical by name.  * `clips` - The default sort order is video creation date.  * `modified` - The default sort order is the order in which the videos were modified.  * `recent` - The default sort order is the order in which the videos were added. 
     * @param uri {String} The canonical relative URI of the portfolio.
     */
    constructor(createdTime, description, link, metadata, modifiedTime, name, sort, uri) { 
        
        Portfolio.initialize(this, createdTime, description, link, metadata, modifiedTime, name, sort, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdTime, description, link, metadata, modifiedTime, name, sort, uri) { 
        obj['created_time'] = createdTime;
        obj['description'] = description;
        obj['link'] = link;
        obj['metadata'] = metadata;
        obj['modified_time'] = modifiedTime;
        obj['name'] = name;
        obj['sort'] = sort;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>Portfolio</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Portfolio} obj Optional instance to populate.
     * @return {module:model/Portfolio} The populated <code>Portfolio</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Portfolio();

            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = ApiClient.convertToType(data['created_time'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = PortfolioMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('modified_time')) {
                obj['modified_time'] = ApiClient.convertToType(data['modified_time'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Portfolio</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Portfolio</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Portfolio.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created_time'] && !(typeof data['created_time'] === 'string' || data['created_time'] instanceof String)) {
            throw new Error("Expected the field `created_time` to be a primitive type in the JSON string but got " + data['created_time']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          PortfolioMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['modified_time'] && !(typeof data['modified_time'] === 'string' || data['modified_time'] instanceof String)) {
            throw new Error("Expected the field `modified_time` to be a primitive type in the JSON string but got " + data['modified_time']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['sort'] && !(typeof data['sort'] === 'string' || data['sort'] instanceof String)) {
            throw new Error("Expected the field `sort` to be a primitive type in the JSON string but got " + data['sort']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

Portfolio.RequiredProperties = ["created_time", "description", "link", "metadata", "modified_time", "name", "sort", "uri"];

/**
 * The time in ISO 8601 format when the portfolio was created.
 * @member {String} created_time
 */
Portfolio.prototype['created_time'] = undefined;

/**
 * The portfolio's description.
 * @member {String} description
 */
Portfolio.prototype['description'] = undefined;

/**
 * The link to the portfolio.
 * @member {String} link
 */
Portfolio.prototype['link'] = undefined;

/**
 * @member {module:model/PortfolioMetadata} metadata
 */
Portfolio.prototype['metadata'] = undefined;

/**
 * The time in ISO 8601 format when the portfolio's data was last modified.
 * @member {String} modified_time
 */
Portfolio.prototype['modified_time'] = undefined;

/**
 * The display name of the portfolio.
 * @member {String} name
 */
Portfolio.prototype['name'] = undefined;

/**
 * The default video sort order for the portfolio:  Option descriptions:  * `alphabetical` - The default sort order is alphabetical by name.  * `clips` - The default sort order is video creation date.  * `modified` - The default sort order is the order in which the videos were modified.  * `recent` - The default sort order is the order in which the videos were added. 
 * @member {module:model/Portfolio.SortEnum} sort
 */
Portfolio.prototype['sort'] = undefined;

/**
 * The canonical relative URI of the portfolio.
 * @member {String} uri
 */
Portfolio.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>sort</code> property.
 * @enum {String}
 * @readonly
 */
Portfolio['SortEnum'] = {

    /**
     * value: "alphabetical"
     * @const
     */
    "alphabetical": "alphabetical",

    /**
     * value: "clips"
     * @const
     */
    "clips": "clips",

    /**
     * value: "modified"
     * @const
     */
    "modified": "modified",

    /**
     * value: "recent"
     * @const
     */
    "recent": "recent"
};



export default Portfolio;

