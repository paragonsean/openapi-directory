/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OnDemandGenre from './OnDemandGenre';
import OnDemandPageColors from './OnDemandPageColors';
import OnDemandPageEpisodes from './OnDemandPageEpisodes';
import OnDemandPageMetadata from './OnDemandPageMetadata';
import OnDemandPagePreorder from './OnDemandPagePreorder';
import OnDemandPagePublished from './OnDemandPagePublished';
import OnDemandPageSubscription from './OnDemandPageSubscription';
import Picture from './Picture';
import User from './User';
import Video from './Video';

/**
 * The OnDemandPage model module.
 * @module model/OnDemandPage
 * @version 3.4
 */
class OnDemandPage {
    /**
     * Constructs a new <code>OnDemandPage</code>.
     * @alias module:model/OnDemandPage
     * @param background {module:model/Picture} The background image for the On Demand page on Vimeo.
     * @param colors {module:model/OnDemandPageColors} 
     * @param contentRating {Array.<String>} An array of the page's content ratings.
     * @param description {String} The description of this On Demand page.
     * @param domainLink {String} The link to this page on its own domain.
     * @param episodes {module:model/OnDemandPageEpisodes} 
     * @param genres {Array.<module:model/OnDemandGenre>} All the genres assigned to this page.
     * @param link {String} The link to the page on Vimeo.
     * @param metadata {module:model/OnDemandPageMetadata} 
     * @param name {String} A descriptive title of this On Demand page.
     * @param pictures {module:model/Picture} The active poster for this On Demand page.
     * @param preorder {module:model/OnDemandPagePreorder} 
     * @param published {module:model/OnDemandPagePublished} 
     * @param rating {Number} The rating of this page.
     * @param resourceKey {String} The VOD resource key.
     * @param subscription {module:model/OnDemandPageSubscription} 
     * @param theme {String} The graphical theme for this On Demand page.
     * @param thumbnail {module:model/Picture} The thumbnail image for the On Demand page on Vimeo.
     * @param trailer {module:model/Video} The trailer for this On Demand page.
     * @param type {module:model/OnDemandPage.TypeEnum} Whether this On Demand page is for a film or a series.  Option descriptions:  * `film` - The On Demand page is for a film.  * `series` - The On Demand page is for a series. 
     * @param uri {String} The relative URI of the On Demand page.
     * @param user {module:model/User} The user who created this On Demand page.
     */
    constructor(background, colors, contentRating, description, domainLink, episodes, genres, link, metadata, name, pictures, preorder, published, rating, resourceKey, subscription, theme, thumbnail, trailer, type, uri, user) { 
        
        OnDemandPage.initialize(this, background, colors, contentRating, description, domainLink, episodes, genres, link, metadata, name, pictures, preorder, published, rating, resourceKey, subscription, theme, thumbnail, trailer, type, uri, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, background, colors, contentRating, description, domainLink, episodes, genres, link, metadata, name, pictures, preorder, published, rating, resourceKey, subscription, theme, thumbnail, trailer, type, uri, user) { 
        obj['background'] = background;
        obj['colors'] = colors;
        obj['content_rating'] = contentRating;
        obj['description'] = description;
        obj['domain_link'] = domainLink;
        obj['episodes'] = episodes;
        obj['genres'] = genres;
        obj['link'] = link;
        obj['metadata'] = metadata;
        obj['name'] = name;
        obj['pictures'] = pictures;
        obj['preorder'] = preorder;
        obj['published'] = published;
        obj['rating'] = rating;
        obj['resource_key'] = resourceKey;
        obj['subscription'] = subscription;
        obj['theme'] = theme;
        obj['thumbnail'] = thumbnail;
        obj['trailer'] = trailer;
        obj['type'] = type;
        obj['uri'] = uri;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>OnDemandPage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OnDemandPage} obj Optional instance to populate.
     * @return {module:model/OnDemandPage} The populated <code>OnDemandPage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OnDemandPage();

            if (data.hasOwnProperty('background')) {
                obj['background'] = ApiClient.convertToType(data['background'], Picture);
            }
            if (data.hasOwnProperty('colors')) {
                obj['colors'] = OnDemandPageColors.constructFromObject(data['colors']);
            }
            if (data.hasOwnProperty('content_rating')) {
                obj['content_rating'] = ApiClient.convertToType(data['content_rating'], ['String']);
            }
            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = ApiClient.convertToType(data['created_time'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('domain_link')) {
                obj['domain_link'] = ApiClient.convertToType(data['domain_link'], 'String');
            }
            if (data.hasOwnProperty('episodes')) {
                obj['episodes'] = OnDemandPageEpisodes.constructFromObject(data['episodes']);
            }
            if (data.hasOwnProperty('film')) {
                obj['film'] = ApiClient.convertToType(data['film'], Video);
            }
            if (data.hasOwnProperty('genres')) {
                obj['genres'] = ApiClient.convertToType(data['genres'], [OnDemandGenre]);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = OnDemandPageMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('modified_time')) {
                obj['modified_time'] = ApiClient.convertToType(data['modified_time'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pictures')) {
                obj['pictures'] = ApiClient.convertToType(data['pictures'], Picture);
            }
            if (data.hasOwnProperty('preorder')) {
                obj['preorder'] = OnDemandPagePreorder.constructFromObject(data['preorder']);
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = OnDemandPagePublished.constructFromObject(data['published']);
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');
            }
            if (data.hasOwnProperty('resource_key')) {
                obj['resource_key'] = ApiClient.convertToType(data['resource_key'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('subscription')) {
                obj['subscription'] = OnDemandPageSubscription.constructFromObject(data['subscription']);
            }
            if (data.hasOwnProperty('theme')) {
                obj['theme'] = ApiClient.convertToType(data['theme'], 'String');
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = ApiClient.convertToType(data['thumbnail'], Picture);
            }
            if (data.hasOwnProperty('trailer')) {
                obj['trailer'] = ApiClient.convertToType(data['trailer'], Video);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], User);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OnDemandPage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OnDemandPage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OnDemandPage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `background`
        if (data['background']) { // data not null
          Picture.validateJSON(data['background']);
        }
        // validate the optional field `colors`
        if (data['colors']) { // data not null
          OnDemandPageColors.validateJSON(data['colors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['content_rating'])) {
            throw new Error("Expected the field `content_rating` to be an array in the JSON data but got " + data['content_rating']);
        }
        // ensure the json data is a string
        if (data['created_time'] && !(typeof data['created_time'] === 'string' || data['created_time'] instanceof String)) {
            throw new Error("Expected the field `created_time` to be a primitive type in the JSON string but got " + data['created_time']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['domain_link'] && !(typeof data['domain_link'] === 'string' || data['domain_link'] instanceof String)) {
            throw new Error("Expected the field `domain_link` to be a primitive type in the JSON string but got " + data['domain_link']);
        }
        // validate the optional field `episodes`
        if (data['episodes']) { // data not null
          OnDemandPageEpisodes.validateJSON(data['episodes']);
        }
        // validate the optional field `film`
        if (data['film']) { // data not null
          Video.validateJSON(data['film']);
        }
        if (data['genres']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['genres'])) {
                throw new Error("Expected the field `genres` to be an array in the JSON data but got " + data['genres']);
            }
            // validate the optional field `genres` (array)
            for (const item of data['genres']) {
                OnDemandGenre.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          OnDemandPageMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['modified_time'] && !(typeof data['modified_time'] === 'string' || data['modified_time'] instanceof String)) {
            throw new Error("Expected the field `modified_time` to be a primitive type in the JSON string but got " + data['modified_time']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `pictures`
        if (data['pictures']) { // data not null
          Picture.validateJSON(data['pictures']);
        }
        // validate the optional field `preorder`
        if (data['preorder']) { // data not null
          OnDemandPagePreorder.validateJSON(data['preorder']);
        }
        // validate the optional field `published`
        if (data['published']) { // data not null
          OnDemandPagePublished.validateJSON(data['published']);
        }
        // ensure the json data is a string
        if (data['resource_key'] && !(typeof data['resource_key'] === 'string' || data['resource_key'] instanceof String)) {
            throw new Error("Expected the field `resource_key` to be a primitive type in the JSON string but got " + data['resource_key']);
        }
        // ensure the json data is a string
        if (data['sku'] && !(typeof data['sku'] === 'string' || data['sku'] instanceof String)) {
            throw new Error("Expected the field `sku` to be a primitive type in the JSON string but got " + data['sku']);
        }
        // validate the optional field `subscription`
        if (data['subscription']) { // data not null
          OnDemandPageSubscription.validateJSON(data['subscription']);
        }
        // ensure the json data is a string
        if (data['theme'] && !(typeof data['theme'] === 'string' || data['theme'] instanceof String)) {
            throw new Error("Expected the field `theme` to be a primitive type in the JSON string but got " + data['theme']);
        }
        // validate the optional field `thumbnail`
        if (data['thumbnail']) { // data not null
          Picture.validateJSON(data['thumbnail']);
        }
        // validate the optional field `trailer`
        if (data['trailer']) { // data not null
          Video.validateJSON(data['trailer']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

OnDemandPage.RequiredProperties = ["background", "colors", "content_rating", "description", "domain_link", "episodes", "genres", "link", "metadata", "name", "pictures", "preorder", "published", "rating", "resource_key", "subscription", "theme", "thumbnail", "trailer", "type", "uri", "user"];

/**
 * The background image for the On Demand page on Vimeo.
 * @member {module:model/Picture} background
 */
OnDemandPage.prototype['background'] = undefined;

/**
 * @member {module:model/OnDemandPageColors} colors
 */
OnDemandPage.prototype['colors'] = undefined;

/**
 * An array of the page's content ratings.
 * @member {Array.<String>} content_rating
 */
OnDemandPage.prototype['content_rating'] = undefined;

/**
 * The time in ISO 8601 format when the page was created.
 * @member {String} created_time
 */
OnDemandPage.prototype['created_time'] = undefined;

/**
 * The description of this On Demand page.
 * @member {String} description
 */
OnDemandPage.prototype['description'] = undefined;

/**
 * The link to this page on its own domain.
 * @member {String} domain_link
 */
OnDemandPage.prototype['domain_link'] = undefined;

/**
 * @member {module:model/OnDemandPageEpisodes} episodes
 */
OnDemandPage.prototype['episodes'] = undefined;

/**
 * This On Demand page's film, if it is a film.
 * @member {module:model/Video} film
 */
OnDemandPage.prototype['film'] = undefined;

/**
 * All the genres assigned to this page.
 * @member {Array.<module:model/OnDemandGenre>} genres
 */
OnDemandPage.prototype['genres'] = undefined;

/**
 * The link to the page on Vimeo.
 * @member {String} link
 */
OnDemandPage.prototype['link'] = undefined;

/**
 * @member {module:model/OnDemandPageMetadata} metadata
 */
OnDemandPage.prototype['metadata'] = undefined;

/**
 * he time in ISO 8601 format when the page was last modified.
 * @member {String} modified_time
 */
OnDemandPage.prototype['modified_time'] = undefined;

/**
 * A descriptive title of this On Demand page.
 * @member {String} name
 */
OnDemandPage.prototype['name'] = undefined;

/**
 * The active poster for this On Demand page.
 * @member {module:model/Picture} pictures
 */
OnDemandPage.prototype['pictures'] = undefined;

/**
 * @member {module:model/OnDemandPagePreorder} preorder
 */
OnDemandPage.prototype['preorder'] = undefined;

/**
 * @member {module:model/OnDemandPagePublished} published
 */
OnDemandPage.prototype['published'] = undefined;

/**
 * The rating of this page.
 * @member {Number} rating
 */
OnDemandPage.prototype['rating'] = undefined;

/**
 * The VOD resource key.
 * @member {String} resource_key
 */
OnDemandPage.prototype['resource_key'] = undefined;

/**
 * The creator-designated SKU for this On Demand page.
 * @member {String} sku
 */
OnDemandPage.prototype['sku'] = undefined;

/**
 * @member {module:model/OnDemandPageSubscription} subscription
 */
OnDemandPage.prototype['subscription'] = undefined;

/**
 * The graphical theme for this On Demand page.
 * @member {String} theme
 */
OnDemandPage.prototype['theme'] = undefined;

/**
 * The thumbnail image for the On Demand page on Vimeo.
 * @member {module:model/Picture} thumbnail
 */
OnDemandPage.prototype['thumbnail'] = undefined;

/**
 * The trailer for this On Demand page.
 * @member {module:model/Video} trailer
 */
OnDemandPage.prototype['trailer'] = undefined;

/**
 * Whether this On Demand page is for a film or a series.  Option descriptions:  * `film` - The On Demand page is for a film.  * `series` - The On Demand page is for a series. 
 * @member {module:model/OnDemandPage.TypeEnum} type
 */
OnDemandPage.prototype['type'] = undefined;

/**
 * The relative URI of the On Demand page.
 * @member {String} uri
 */
OnDemandPage.prototype['uri'] = undefined;

/**
 * The user who created this On Demand page.
 * @member {module:model/User} user
 */
OnDemandPage.prototype['user'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
OnDemandPage['TypeEnum'] = {

    /**
     * value: "film"
     * @const
     */
    "film": "film",

    /**
     * value: "series"
     * @const
     */
    "series": "series"
};



export default OnDemandPage;

