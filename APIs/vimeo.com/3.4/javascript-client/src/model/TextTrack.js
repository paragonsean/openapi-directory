/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TextTrack model module.
 * @module model/TextTrack
 * @version 3.4
 */
class TextTrack {
    /**
     * Constructs a new <code>TextTrack</code>.
     * @alias module:model/TextTrack
     * @param active {Boolean} Whether this text track is active.
     * @param hlsLink {String} The read-only URL of the text track file, intended for use with HLS playback.
     * @param hlsLinkExpiresTime {String} The time in ISO 8601 format when the read-only HLS playback text track file expires.
     * @param language {String} The language code for this text track. To see a full list, request `/languages?filter=texttrack`.
     * @param link {String} The read-only URL of the text track file. You can upload to this link when you create it for the first time.
     * @param linkExpiresTime {String} The time in ISO 8601 format when the text track link expires.
     * @param name {String} The descriptive name of this text track.
     * @param type {module:model/TextTrack.TypeEnum} The type of the text track:  Option descriptions:  * `captions` - The text track is for captions.  * `subtitles` - The text track is for subtitles. 
     * @param uri {String} The relative URI of the text track.
     */
    constructor(active, hlsLink, hlsLinkExpiresTime, language, link, linkExpiresTime, name, type, uri) { 
        
        TextTrack.initialize(this, active, hlsLink, hlsLinkExpiresTime, language, link, linkExpiresTime, name, type, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, active, hlsLink, hlsLinkExpiresTime, language, link, linkExpiresTime, name, type, uri) { 
        obj['active'] = active;
        obj['hls_link'] = hlsLink;
        obj['hls_link_expires_time'] = hlsLinkExpiresTime;
        obj['language'] = language;
        obj['link'] = link;
        obj['link_expires_time'] = linkExpiresTime;
        obj['name'] = name;
        obj['type'] = type;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>TextTrack</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextTrack} obj Optional instance to populate.
     * @return {module:model/TextTrack} The populated <code>TextTrack</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextTrack();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('hls_link')) {
                obj['hls_link'] = ApiClient.convertToType(data['hls_link'], 'String');
            }
            if (data.hasOwnProperty('hls_link_expires_time')) {
                obj['hls_link_expires_time'] = ApiClient.convertToType(data['hls_link_expires_time'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('link_expires_time')) {
                obj['link_expires_time'] = ApiClient.convertToType(data['link_expires_time'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextTrack</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextTrack</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TextTrack.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['hls_link'] && !(typeof data['hls_link'] === 'string' || data['hls_link'] instanceof String)) {
            throw new Error("Expected the field `hls_link` to be a primitive type in the JSON string but got " + data['hls_link']);
        }
        // ensure the json data is a string
        if (data['hls_link_expires_time'] && !(typeof data['hls_link_expires_time'] === 'string' || data['hls_link_expires_time'] instanceof String)) {
            throw new Error("Expected the field `hls_link_expires_time` to be a primitive type in the JSON string but got " + data['hls_link_expires_time']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['link_expires_time'] && !(typeof data['link_expires_time'] === 'string' || data['link_expires_time'] instanceof String)) {
            throw new Error("Expected the field `link_expires_time` to be a primitive type in the JSON string but got " + data['link_expires_time']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

TextTrack.RequiredProperties = ["active", "hls_link", "hls_link_expires_time", "language", "link", "link_expires_time", "name", "type", "uri"];

/**
 * Whether this text track is active.
 * @member {Boolean} active
 */
TextTrack.prototype['active'] = undefined;

/**
 * The read-only URL of the text track file, intended for use with HLS playback.
 * @member {String} hls_link
 */
TextTrack.prototype['hls_link'] = undefined;

/**
 * The time in ISO 8601 format when the read-only HLS playback text track file expires.
 * @member {String} hls_link_expires_time
 */
TextTrack.prototype['hls_link_expires_time'] = undefined;

/**
 * The language code for this text track. To see a full list, request `/languages?filter=texttrack`.
 * @member {String} language
 */
TextTrack.prototype['language'] = undefined;

/**
 * The read-only URL of the text track file. You can upload to this link when you create it for the first time.
 * @member {String} link
 */
TextTrack.prototype['link'] = undefined;

/**
 * The time in ISO 8601 format when the text track link expires.
 * @member {String} link_expires_time
 */
TextTrack.prototype['link_expires_time'] = undefined;

/**
 * The descriptive name of this text track.
 * @member {String} name
 */
TextTrack.prototype['name'] = undefined;

/**
 * The type of the text track:  Option descriptions:  * `captions` - The text track is for captions.  * `subtitles` - The text track is for subtitles. 
 * @member {module:model/TextTrack.TypeEnum} type
 */
TextTrack.prototype['type'] = undefined;

/**
 * The relative URI of the text track.
 * @member {String} uri
 */
TextTrack.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
TextTrack['TypeEnum'] = {

    /**
     * value: "captions"
     * @const
     */
    "captions": "captions",

    /**
     * value: "subtitles"
     * @const
     */
    "subtitles": "subtitles"
};



export default TextTrack;

