/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiApp from './ApiApp';
import User from './User';

/**
 * The Auth model module.
 * @module model/Auth
 * @version 3.4
 */
class Auth {
    /**
     * Constructs a new <code>Auth</code>.
     * @alias module:model/Auth
     * @param accessToken {String} The access token string.
     * @param app {module:model/ApiApp} The API application associated with the token.
     * @param scope {String} The scope or scopes that the token supports.
     * @param tokenType {module:model/Auth.TokenTypeEnum} The token type:  Option descriptions:  * `bearer` - The token is of the `bearer` type. 
     */
    constructor(accessToken, app, scope, tokenType) { 
        
        Auth.initialize(this, accessToken, app, scope, tokenType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessToken, app, scope, tokenType) { 
        obj['access_token'] = accessToken;
        obj['app'] = app;
        obj['scope'] = scope;
        obj['token_type'] = tokenType;
    }

    /**
     * Constructs a <code>Auth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Auth} obj Optional instance to populate.
     * @return {module:model/Auth} The populated <code>Auth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Auth();

            if (data.hasOwnProperty('access_token')) {
                obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
            }
            if (data.hasOwnProperty('app')) {
                obj['app'] = ApiClient.convertToType(data['app'], ApiApp);
            }
            if (data.hasOwnProperty('expires_on')) {
                obj['expires_on'] = ApiClient.convertToType(data['expires_on'], 'String');
            }
            if (data.hasOwnProperty('refresh_token')) {
                obj['refresh_token'] = ApiClient.convertToType(data['refresh_token'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('token_type')) {
                obj['token_type'] = ApiClient.convertToType(data['token_type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], User);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Auth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Auth</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Auth.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['access_token'] && !(typeof data['access_token'] === 'string' || data['access_token'] instanceof String)) {
            throw new Error("Expected the field `access_token` to be a primitive type in the JSON string but got " + data['access_token']);
        }
        // validate the optional field `app`
        if (data['app']) { // data not null
          ApiApp.validateJSON(data['app']);
        }
        // ensure the json data is a string
        if (data['expires_on'] && !(typeof data['expires_on'] === 'string' || data['expires_on'] instanceof String)) {
            throw new Error("Expected the field `expires_on` to be a primitive type in the JSON string but got " + data['expires_on']);
        }
        // ensure the json data is a string
        if (data['refresh_token'] && !(typeof data['refresh_token'] === 'string' || data['refresh_token'] instanceof String)) {
            throw new Error("Expected the field `refresh_token` to be a primitive type in the JSON string but got " + data['refresh_token']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['token_type'] && !(typeof data['token_type'] === 'string' || data['token_type'] instanceof String)) {
            throw new Error("Expected the field `token_type` to be a primitive type in the JSON string but got " + data['token_type']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

Auth.RequiredProperties = ["access_token", "app", "scope", "token_type"];

/**
 * The access token string.
 * @member {String} access_token
 */
Auth.prototype['access_token'] = undefined;

/**
 * The API application associated with the token.
 * @member {module:model/ApiApp} app
 */
Auth.prototype['app'] = undefined;

/**
 * The date and time that the token expires.
 * @member {String} expires_on
 */
Auth.prototype['expires_on'] = undefined;

/**
 * The refresh token string.
 * @member {String} refresh_token
 */
Auth.prototype['refresh_token'] = undefined;

/**
 * The scope or scopes that the token supports.
 * @member {String} scope
 */
Auth.prototype['scope'] = undefined;

/**
 * The token type:  Option descriptions:  * `bearer` - The token is of the `bearer` type. 
 * @member {module:model/Auth.TokenTypeEnum} token_type
 */
Auth.prototype['token_type'] = undefined;

/**
 * The user associated with the token.
 * @member {module:model/User} user
 */
Auth.prototype['user'] = undefined;





/**
 * Allowed values for the <code>token_type</code> property.
 * @enum {String}
 * @readonly
 */
Auth['TokenTypeEnum'] = {

    /**
     * value: "bearer"
     * @const
     */
    "bearer": "bearer"
};



export default Auth;

