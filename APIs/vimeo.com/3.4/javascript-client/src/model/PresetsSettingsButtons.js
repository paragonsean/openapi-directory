/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PresetsSettingsButtons model module.
 * @module model/PresetsSettingsButtons
 * @version 3.4
 */
class PresetsSettingsButtons {
    /**
     * Constructs a new <code>PresetsSettingsButtons</code>.
     * @alias module:model/PresetsSettingsButtons
     * @param embed {Boolean} Whether the preset includes Embed button settings.
     * @param hd {Boolean} Whether the preset includes HD button settings.
     * @param like {Boolean} Whether the preset includes Like button settings.
     * @param share {Boolean} Whether the present includes Share button settings.
     * @param vote {Boolean} Whether the preset includes Vote button settings.
     * @param watchlater {Boolean} Whether the preset includes Watch Later button settings.
     */
    constructor(embed, hd, like, share, vote, watchlater) { 
        
        PresetsSettingsButtons.initialize(this, embed, hd, like, share, vote, watchlater);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, embed, hd, like, share, vote, watchlater) { 
        obj['embed'] = embed;
        obj['hd'] = hd;
        obj['like'] = like;
        obj['share'] = share;
        obj['vote'] = vote;
        obj['watchlater'] = watchlater;
    }

    /**
     * Constructs a <code>PresetsSettingsButtons</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PresetsSettingsButtons} obj Optional instance to populate.
     * @return {module:model/PresetsSettingsButtons} The populated <code>PresetsSettingsButtons</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PresetsSettingsButtons();

            if (data.hasOwnProperty('embed')) {
                obj['embed'] = ApiClient.convertToType(data['embed'], 'Boolean');
            }
            if (data.hasOwnProperty('hd')) {
                obj['hd'] = ApiClient.convertToType(data['hd'], 'Boolean');
            }
            if (data.hasOwnProperty('like')) {
                obj['like'] = ApiClient.convertToType(data['like'], 'Boolean');
            }
            if (data.hasOwnProperty('share')) {
                obj['share'] = ApiClient.convertToType(data['share'], 'Boolean');
            }
            if (data.hasOwnProperty('vote')) {
                obj['vote'] = ApiClient.convertToType(data['vote'], 'Boolean');
            }
            if (data.hasOwnProperty('watchlater')) {
                obj['watchlater'] = ApiClient.convertToType(data['watchlater'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PresetsSettingsButtons</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PresetsSettingsButtons</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PresetsSettingsButtons.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

PresetsSettingsButtons.RequiredProperties = ["embed", "hd", "like", "share", "vote", "watchlater"];

/**
 * Whether the preset includes Embed button settings.
 * @member {Boolean} embed
 */
PresetsSettingsButtons.prototype['embed'] = undefined;

/**
 * Whether the preset includes HD button settings.
 * @member {Boolean} hd
 */
PresetsSettingsButtons.prototype['hd'] = undefined;

/**
 * Whether the preset includes Like button settings.
 * @member {Boolean} like
 */
PresetsSettingsButtons.prototype['like'] = undefined;

/**
 * Whether the present includes Share button settings.
 * @member {Boolean} share
 */
PresetsSettingsButtons.prototype['share'] = undefined;

/**
 * Whether the preset includes Vote button settings.
 * @member {Boolean} vote
 */
PresetsSettingsButtons.prototype['vote'] = undefined;

/**
 * Whether the preset includes Watch Later button settings.
 * @member {Boolean} watchlater
 */
PresetsSettingsButtons.prototype['watchlater'] = undefined;






export default PresetsSettingsButtons;

