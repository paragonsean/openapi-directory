/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TagMetadata from './TagMetadata';

/**
 * The Tag model module.
 * @module model/Tag
 * @version 3.4
 */
class Tag {
    /**
     * Constructs a new <code>Tag</code>.
     * @alias module:model/Tag
     * @param canonical {String} The normalized canonical tag name.
     * @param metadata {module:model/TagMetadata} 
     * @param name {String} The tag value.
     * @param resourceKey {String} The tag's resource key string.
     * @param uri {String} The canonical relative URI of the tag.
     */
    constructor(canonical, metadata, name, resourceKey, uri) { 
        
        Tag.initialize(this, canonical, metadata, name, resourceKey, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, canonical, metadata, name, resourceKey, uri) { 
        obj['canonical'] = canonical;
        obj['metadata'] = metadata;
        obj['name'] = name;
        obj['resource_key'] = resourceKey;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>Tag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tag} obj Optional instance to populate.
     * @return {module:model/Tag} The populated <code>Tag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tag();

            if (data.hasOwnProperty('canonical')) {
                obj['canonical'] = ApiClient.convertToType(data['canonical'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = TagMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resource_key')) {
                obj['resource_key'] = ApiClient.convertToType(data['resource_key'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tag</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tag</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Tag.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['canonical'] && !(typeof data['canonical'] === 'string' || data['canonical'] instanceof String)) {
            throw new Error("Expected the field `canonical` to be a primitive type in the JSON string but got " + data['canonical']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          TagMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resource_key'] && !(typeof data['resource_key'] === 'string' || data['resource_key'] instanceof String)) {
            throw new Error("Expected the field `resource_key` to be a primitive type in the JSON string but got " + data['resource_key']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

Tag.RequiredProperties = ["canonical", "metadata", "name", "resource_key", "uri"];

/**
 * The normalized canonical tag name.
 * @member {String} canonical
 */
Tag.prototype['canonical'] = undefined;

/**
 * @member {module:model/TagMetadata} metadata
 */
Tag.prototype['metadata'] = undefined;

/**
 * The tag value.
 * @member {String} name
 */
Tag.prototype['name'] = undefined;

/**
 * The tag's resource key string.
 * @member {String} resource_key
 */
Tag.prototype['resource_key'] = undefined;

/**
 * The canonical relative URI of the tag.
 * @member {String} uri
 */
Tag.prototype['uri'] = undefined;






export default Tag;

