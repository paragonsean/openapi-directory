/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContentRating model module.
 * @module model/ContentRating
 * @version 3.4
 */
class ContentRating {
    /**
     * Constructs a new <code>ContentRating</code>.
     * @alias module:model/ContentRating
     * @param code {module:model/ContentRating.CodeEnum} The code that uniquely identifies this content rating:  Option descriptions:  * `drugs` - Drug or alcohol use.  * `language` - Profanity or sexually suggestive content.  * `nudity` - Nudity.  * `safe` - Suitable for all audiences.  * `unrated` - No rating.  * `violence` - Violent or graphic content. 
     * @param name {String} The description of this content rating.
     * @param uri {String} The canonical relative URI of the content rating.
     */
    constructor(code, name, uri) { 
        
        ContentRating.initialize(this, code, name, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, name, uri) { 
        obj['code'] = code;
        obj['name'] = name;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>ContentRating</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentRating} obj Optional instance to populate.
     * @return {module:model/ContentRating} The populated <code>ContentRating</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentRating();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentRating</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentRating</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContentRating.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

ContentRating.RequiredProperties = ["code", "name", "uri"];

/**
 * The code that uniquely identifies this content rating:  Option descriptions:  * `drugs` - Drug or alcohol use.  * `language` - Profanity or sexually suggestive content.  * `nudity` - Nudity.  * `safe` - Suitable for all audiences.  * `unrated` - No rating.  * `violence` - Violent or graphic content. 
 * @member {module:model/ContentRating.CodeEnum} code
 */
ContentRating.prototype['code'] = undefined;

/**
 * The description of this content rating.
 * @member {String} name
 */
ContentRating.prototype['name'] = undefined;

/**
 * The canonical relative URI of the content rating.
 * @member {String} uri
 */
ContentRating.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
ContentRating['CodeEnum'] = {

    /**
     * value: "drugs"
     * @const
     */
    "drugs": "drugs",

    /**
     * value: "language"
     * @const
     */
    "language": "language",

    /**
     * value: "nudity"
     * @const
     */
    "nudity": "nudity",

    /**
     * value: "safe"
     * @const
     */
    "safe": "safe",

    /**
     * value: "unrated"
     * @const
     */
    "unrated": "unrated",

    /**
     * value: "violence"
     * @const
     */
    "violence": "violence"
};



export default ContentRating;

