/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlbumEmbed from './AlbumEmbed';
import AlbumMetadata from './AlbumMetadata';
import AlbumPrivacy from './AlbumPrivacy';
import Picture from './Picture';
import User from './User';

/**
 * The Album model module.
 * @module model/Album
 * @version 3.4
 */
class Album {
    /**
     * Constructs a new <code>Album</code>.
     * @alias module:model/Album
     * @param allowContinuousPlay {Boolean} Whether an album should allow continuous play.
     * @param allowDownloads {Boolean} Whether an album should allow downloads.
     * @param allowShare {Boolean} Whether an album should allow sharing.
     * @param brandColor {String} Hexadecimal color code for the decorative color. For example, album videos use this color for player buttons.
     * @param createdTime {String} The time in ISO 8601 format that the album was created.
     * @param customLogo {module:model/Picture} The custom logo for this album.
     * @param description {String} A brief description of the album's content.
     * @param domain {String} The custom domain a user has selected for their album.
     * @param duration {Number} The total duration in seconds of all the videos in the album.
     * @param embed {module:model/AlbumEmbed} 
     * @param embedBrandColor {Boolean} Whether to show the album's custom brand color in the player of the album's embedded playlist.
     * @param embedCustomLogo {Boolean} Whether to show the album's custom logo in the player of the album's embedded playlist.
     * @param hideNav {Boolean} Whether to hide the Vimeo navigation when viewing the album.
     * @param hideVimeoLogo {Boolean} Whether to hide the Vimeo logo in the player of the album's embedded playlist.
     * @param layout {module:model/Album.LayoutEnum} The album's layout preference
     * @param link {String} The URL to access the album.
     * @param metadata {module:model/AlbumMetadata} 
     * @param modifiedTime {String} The time in ISO 8601 format when the album was last modified.
     * @param name {String} The album's display name.
     * @param pictures {module:model/Picture} The active image for the album; defaults to the thumbnail of the last video added to the album.
     * @param privacy {module:model/AlbumPrivacy} 
     * @param resourceKey {String} The album resource key.
     * @param reviewMode {Boolean} Whether album videos should use the review mode URL.
     * @param sort {module:model/Album.SortEnum} Sort type of the album.
     * @param theme {module:model/Album.ThemeEnum} The album's color theme preference
     * @param uri {String} The album's URI.
     * @param url {String} The custom Vimeo URL a user has selected for their album.
     * @param useCustomDomain {Boolean} Whether the user has opted in to use a custom domain for their album.
     * @param user {module:model/User} The owner of the album.
     * @param webBrandColor {Boolean} Whether an album should show the brand color in the web layout.
     * @param webCustomLogo {Boolean} Whether an album's custom logo should be shown in the web layout.
     */
    constructor(allowContinuousPlay, allowDownloads, allowShare, brandColor, createdTime, customLogo, description, domain, duration, embed, embedBrandColor, embedCustomLogo, hideNav, hideVimeoLogo, layout, link, metadata, modifiedTime, name, pictures, privacy, resourceKey, reviewMode, sort, theme, uri, url, useCustomDomain, user, webBrandColor, webCustomLogo) { 
        
        Album.initialize(this, allowContinuousPlay, allowDownloads, allowShare, brandColor, createdTime, customLogo, description, domain, duration, embed, embedBrandColor, embedCustomLogo, hideNav, hideVimeoLogo, layout, link, metadata, modifiedTime, name, pictures, privacy, resourceKey, reviewMode, sort, theme, uri, url, useCustomDomain, user, webBrandColor, webCustomLogo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allowContinuousPlay, allowDownloads, allowShare, brandColor, createdTime, customLogo, description, domain, duration, embed, embedBrandColor, embedCustomLogo, hideNav, hideVimeoLogo, layout, link, metadata, modifiedTime, name, pictures, privacy, resourceKey, reviewMode, sort, theme, uri, url, useCustomDomain, user, webBrandColor, webCustomLogo) { 
        obj['allow_continuous_play'] = allowContinuousPlay;
        obj['allow_downloads'] = allowDownloads;
        obj['allow_share'] = allowShare;
        obj['brand_color'] = brandColor;
        obj['created_time'] = createdTime;
        obj['custom_logo'] = customLogo;
        obj['description'] = description;
        obj['domain'] = domain;
        obj['duration'] = duration;
        obj['embed'] = embed;
        obj['embed_brand_color'] = embedBrandColor;
        obj['embed_custom_logo'] = embedCustomLogo;
        obj['hide_nav'] = hideNav;
        obj['hide_vimeo_logo'] = hideVimeoLogo;
        obj['layout'] = layout;
        obj['link'] = link;
        obj['metadata'] = metadata;
        obj['modified_time'] = modifiedTime;
        obj['name'] = name;
        obj['pictures'] = pictures;
        obj['privacy'] = privacy;
        obj['resource_key'] = resourceKey;
        obj['review_mode'] = reviewMode;
        obj['sort'] = sort;
        obj['theme'] = theme;
        obj['uri'] = uri;
        obj['url'] = url;
        obj['use_custom_domain'] = useCustomDomain;
        obj['user'] = user;
        obj['web_brand_color'] = webBrandColor;
        obj['web_custom_logo'] = webCustomLogo;
    }

    /**
     * Constructs a <code>Album</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Album} obj Optional instance to populate.
     * @return {module:model/Album} The populated <code>Album</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Album();

            if (data.hasOwnProperty('allow_continuous_play')) {
                obj['allow_continuous_play'] = ApiClient.convertToType(data['allow_continuous_play'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_downloads')) {
                obj['allow_downloads'] = ApiClient.convertToType(data['allow_downloads'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_share')) {
                obj['allow_share'] = ApiClient.convertToType(data['allow_share'], 'Boolean');
            }
            if (data.hasOwnProperty('brand_color')) {
                obj['brand_color'] = ApiClient.convertToType(data['brand_color'], 'String');
            }
            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = ApiClient.convertToType(data['created_time'], 'String');
            }
            if (data.hasOwnProperty('custom_logo')) {
                obj['custom_logo'] = ApiClient.convertToType(data['custom_logo'], Picture);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('embed')) {
                obj['embed'] = AlbumEmbed.constructFromObject(data['embed']);
            }
            if (data.hasOwnProperty('embed_brand_color')) {
                obj['embed_brand_color'] = ApiClient.convertToType(data['embed_brand_color'], 'Boolean');
            }
            if (data.hasOwnProperty('embed_custom_logo')) {
                obj['embed_custom_logo'] = ApiClient.convertToType(data['embed_custom_logo'], 'Boolean');
            }
            if (data.hasOwnProperty('hide_nav')) {
                obj['hide_nav'] = ApiClient.convertToType(data['hide_nav'], 'Boolean');
            }
            if (data.hasOwnProperty('hide_vimeo_logo')) {
                obj['hide_vimeo_logo'] = ApiClient.convertToType(data['hide_vimeo_logo'], 'Boolean');
            }
            if (data.hasOwnProperty('layout')) {
                obj['layout'] = ApiClient.convertToType(data['layout'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = AlbumMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('modified_time')) {
                obj['modified_time'] = ApiClient.convertToType(data['modified_time'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pictures')) {
                obj['pictures'] = ApiClient.convertToType(data['pictures'], Picture);
            }
            if (data.hasOwnProperty('privacy')) {
                obj['privacy'] = AlbumPrivacy.constructFromObject(data['privacy']);
            }
            if (data.hasOwnProperty('resource_key')) {
                obj['resource_key'] = ApiClient.convertToType(data['resource_key'], 'String');
            }
            if (data.hasOwnProperty('review_mode')) {
                obj['review_mode'] = ApiClient.convertToType(data['review_mode'], 'Boolean');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], 'String');
            }
            if (data.hasOwnProperty('theme')) {
                obj['theme'] = ApiClient.convertToType(data['theme'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('use_custom_domain')) {
                obj['use_custom_domain'] = ApiClient.convertToType(data['use_custom_domain'], 'Boolean');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], User);
            }
            if (data.hasOwnProperty('web_brand_color')) {
                obj['web_brand_color'] = ApiClient.convertToType(data['web_brand_color'], 'Boolean');
            }
            if (data.hasOwnProperty('web_custom_logo')) {
                obj['web_custom_logo'] = ApiClient.convertToType(data['web_custom_logo'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Album</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Album</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Album.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['brand_color'] && !(typeof data['brand_color'] === 'string' || data['brand_color'] instanceof String)) {
            throw new Error("Expected the field `brand_color` to be a primitive type in the JSON string but got " + data['brand_color']);
        }
        // ensure the json data is a string
        if (data['created_time'] && !(typeof data['created_time'] === 'string' || data['created_time'] instanceof String)) {
            throw new Error("Expected the field `created_time` to be a primitive type in the JSON string but got " + data['created_time']);
        }
        // validate the optional field `custom_logo`
        if (data['custom_logo']) { // data not null
          Picture.validateJSON(data['custom_logo']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // validate the optional field `embed`
        if (data['embed']) { // data not null
          AlbumEmbed.validateJSON(data['embed']);
        }
        // ensure the json data is a string
        if (data['layout'] && !(typeof data['layout'] === 'string' || data['layout'] instanceof String)) {
            throw new Error("Expected the field `layout` to be a primitive type in the JSON string but got " + data['layout']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          AlbumMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['modified_time'] && !(typeof data['modified_time'] === 'string' || data['modified_time'] instanceof String)) {
            throw new Error("Expected the field `modified_time` to be a primitive type in the JSON string but got " + data['modified_time']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `pictures`
        if (data['pictures']) { // data not null
          Picture.validateJSON(data['pictures']);
        }
        // validate the optional field `privacy`
        if (data['privacy']) { // data not null
          AlbumPrivacy.validateJSON(data['privacy']);
        }
        // ensure the json data is a string
        if (data['resource_key'] && !(typeof data['resource_key'] === 'string' || data['resource_key'] instanceof String)) {
            throw new Error("Expected the field `resource_key` to be a primitive type in the JSON string but got " + data['resource_key']);
        }
        // ensure the json data is a string
        if (data['sort'] && !(typeof data['sort'] === 'string' || data['sort'] instanceof String)) {
            throw new Error("Expected the field `sort` to be a primitive type in the JSON string but got " + data['sort']);
        }
        // ensure the json data is a string
        if (data['theme'] && !(typeof data['theme'] === 'string' || data['theme'] instanceof String)) {
            throw new Error("Expected the field `theme` to be a primitive type in the JSON string but got " + data['theme']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

Album.RequiredProperties = ["allow_continuous_play", "allow_downloads", "allow_share", "brand_color", "created_time", "custom_logo", "description", "domain", "duration", "embed", "embed_brand_color", "embed_custom_logo", "hide_nav", "hide_vimeo_logo", "layout", "link", "metadata", "modified_time", "name", "pictures", "privacy", "resource_key", "review_mode", "sort", "theme", "uri", "url", "use_custom_domain", "user", "web_brand_color", "web_custom_logo"];

/**
 * Whether an album should allow continuous play.
 * @member {Boolean} allow_continuous_play
 */
Album.prototype['allow_continuous_play'] = undefined;

/**
 * Whether an album should allow downloads.
 * @member {Boolean} allow_downloads
 */
Album.prototype['allow_downloads'] = undefined;

/**
 * Whether an album should allow sharing.
 * @member {Boolean} allow_share
 */
Album.prototype['allow_share'] = undefined;

/**
 * Hexadecimal color code for the decorative color. For example, album videos use this color for player buttons.
 * @member {String} brand_color
 */
Album.prototype['brand_color'] = undefined;

/**
 * The time in ISO 8601 format that the album was created.
 * @member {String} created_time
 */
Album.prototype['created_time'] = undefined;

/**
 * The custom logo for this album.
 * @member {module:model/Picture} custom_logo
 */
Album.prototype['custom_logo'] = undefined;

/**
 * A brief description of the album's content.
 * @member {String} description
 */
Album.prototype['description'] = undefined;

/**
 * The custom domain a user has selected for their album.
 * @member {String} domain
 */
Album.prototype['domain'] = undefined;

/**
 * The total duration in seconds of all the videos in the album.
 * @member {Number} duration
 */
Album.prototype['duration'] = undefined;

/**
 * @member {module:model/AlbumEmbed} embed
 */
Album.prototype['embed'] = undefined;

/**
 * Whether to show the album's custom brand color in the player of the album's embedded playlist.
 * @member {Boolean} embed_brand_color
 */
Album.prototype['embed_brand_color'] = undefined;

/**
 * Whether to show the album's custom logo in the player of the album's embedded playlist.
 * @member {Boolean} embed_custom_logo
 */
Album.prototype['embed_custom_logo'] = undefined;

/**
 * Whether to hide the Vimeo navigation when viewing the album.
 * @member {Boolean} hide_nav
 */
Album.prototype['hide_nav'] = undefined;

/**
 * Whether to hide the Vimeo logo in the player of the album's embedded playlist.
 * @member {Boolean} hide_vimeo_logo
 */
Album.prototype['hide_vimeo_logo'] = undefined;

/**
 * The album's layout preference
 * @member {module:model/Album.LayoutEnum} layout
 */
Album.prototype['layout'] = undefined;

/**
 * The URL to access the album.
 * @member {String} link
 */
Album.prototype['link'] = undefined;

/**
 * @member {module:model/AlbumMetadata} metadata
 */
Album.prototype['metadata'] = undefined;

/**
 * The time in ISO 8601 format when the album was last modified.
 * @member {String} modified_time
 */
Album.prototype['modified_time'] = undefined;

/**
 * The album's display name.
 * @member {String} name
 */
Album.prototype['name'] = undefined;

/**
 * The active image for the album; defaults to the thumbnail of the last video added to the album.
 * @member {module:model/Picture} pictures
 */
Album.prototype['pictures'] = undefined;

/**
 * @member {module:model/AlbumPrivacy} privacy
 */
Album.prototype['privacy'] = undefined;

/**
 * The album resource key.
 * @member {String} resource_key
 */
Album.prototype['resource_key'] = undefined;

/**
 * Whether album videos should use the review mode URL.
 * @member {Boolean} review_mode
 */
Album.prototype['review_mode'] = undefined;

/**
 * Sort type of the album.
 * @member {module:model/Album.SortEnum} sort
 */
Album.prototype['sort'] = undefined;

/**
 * The album's color theme preference
 * @member {module:model/Album.ThemeEnum} theme
 */
Album.prototype['theme'] = undefined;

/**
 * The album's URI.
 * @member {String} uri
 */
Album.prototype['uri'] = undefined;

/**
 * The custom Vimeo URL a user has selected for their album.
 * @member {String} url
 */
Album.prototype['url'] = undefined;

/**
 * Whether the user has opted in to use a custom domain for their album.
 * @member {Boolean} use_custom_domain
 */
Album.prototype['use_custom_domain'] = undefined;

/**
 * The owner of the album.
 * @member {module:model/User} user
 */
Album.prototype['user'] = undefined;

/**
 * Whether an album should show the brand color in the web layout.
 * @member {Boolean} web_brand_color
 */
Album.prototype['web_brand_color'] = undefined;

/**
 * Whether an album's custom logo should be shown in the web layout.
 * @member {Boolean} web_custom_logo
 */
Album.prototype['web_custom_logo'] = undefined;





/**
 * Allowed values for the <code>layout</code> property.
 * @enum {String}
 * @readonly
 */
Album['LayoutEnum'] = {

    /**
     * value: "grid"
     * @const
     */
    "grid": "grid",

    /**
     * value: "player"
     * @const
     */
    "player": "player"
};


/**
 * Allowed values for the <code>sort</code> property.
 * @enum {String}
 * @readonly
 */
Album['SortEnum'] = {

    /**
     * value: "added_first"
     * @const
     */
    "added_first": "added_first",

    /**
     * value: "added_last"
     * @const
     */
    "added_last": "added_last",

    /**
     * value: "alphabetical"
     * @const
     */
    "alphabetical": "alphabetical",

    /**
     * value: "arranged"
     * @const
     */
    "arranged": "arranged",

    /**
     * value: "comments"
     * @const
     */
    "comments": "comments",

    /**
     * value: "likes"
     * @const
     */
    "likes": "likes",

    /**
     * value: "newest"
     * @const
     */
    "newest": "newest",

    /**
     * value: "oldest"
     * @const
     */
    "oldest": "oldest",

    /**
     * value: "plays"
     * @const
     */
    "plays": "plays"
};


/**
 * Allowed values for the <code>theme</code> property.
 * @enum {String}
 * @readonly
 */
Album['ThemeEnum'] = {

    /**
     * value: "dark"
     * @const
     */
    "dark": "dark",

    /**
     * value: "standard"
     * @const
     */
    "standard": "standard"
};



export default Album;

