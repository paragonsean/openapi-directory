/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PresetsSettingsOutroLink from './PresetsSettingsOutroLink';

/**
 * The PresetsSettingsOutro model module.
 * @module model/PresetsSettingsOutro
 * @version 3.4
 */
class PresetsSettingsOutro {
    /**
     * Constructs a new <code>PresetsSettingsOutro</code>.
     * @alias module:model/PresetsSettingsOutro
     * @param type {module:model/PresetsSettingsOutro.TypeEnum} The preset outro type:
     */
    constructor(type) { 
        
        PresetsSettingsOutro.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>PresetsSettingsOutro</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PresetsSettingsOutro} obj Optional instance to populate.
     * @return {module:model/PresetsSettingsOutro} The populated <code>PresetsSettingsOutro</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PresetsSettingsOutro();

            if (data.hasOwnProperty('clips')) {
                obj['clips'] = ApiClient.convertToType(data['clips'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = PresetsSettingsOutroLink.constructFromObject(data['link']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('videos')) {
                obj['videos'] = ApiClient.convertToType(data['videos'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PresetsSettingsOutro</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PresetsSettingsOutro</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PresetsSettingsOutro.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clips'] && !(typeof data['clips'] === 'string' || data['clips'] instanceof String)) {
            throw new Error("Expected the field `clips` to be a primitive type in the JSON string but got " + data['clips']);
        }
        // validate the optional field `link`
        if (data['link']) { // data not null
          PresetsSettingsOutroLink.validateJSON(data['link']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['videos'] && !(typeof data['videos'] === 'string' || data['videos'] instanceof String)) {
            throw new Error("Expected the field `videos` to be a primitive type in the JSON string but got " + data['videos']);
        }

        return true;
    }


}

PresetsSettingsOutro.RequiredProperties = ["type"];

/**
 * A comma-separated list of video URIs. Present only if the type is `uploaded_clips`.
 * @member {String} clips
 */
PresetsSettingsOutro.prototype['clips'] = undefined;

/**
 * @member {module:model/PresetsSettingsOutroLink} link
 */
PresetsSettingsOutro.prototype['link'] = undefined;

/**
 * The outro text. Present only if the type is `text`.
 * @member {String} text
 */
PresetsSettingsOutro.prototype['text'] = undefined;

/**
 * The preset outro type:
 * @member {module:model/PresetsSettingsOutro.TypeEnum} type
 */
PresetsSettingsOutro.prototype['type'] = undefined;

/**
 * A comma-separated list of video URIs. Present only if type is `no idea`.
 * @member {String} videos
 */
PresetsSettingsOutro.prototype['videos'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PresetsSettingsOutro['TypeEnum'] = {

    /**
     * value: "link"
     * @const
     */
    "link": "link",

    /**
     * value: "no idea"
     * @const
     */
    "no idea": "no idea",

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "uploaded_clips"
     * @const
     */
    "uploaded_clips": "uploaded_clips",

    /**
     * value: "uploaded_videos"
     * @const
     */
    "uploaded_videos": "uploaded_videos"
};



export default PresetsSettingsOutro;

