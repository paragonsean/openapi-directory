/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import EmbedSettings from './EmbedSettings';
import Picture from './Picture';
import Project from './Project';
import Tag from './Tag';
import User from './User';
import VideoContext from './VideoContext';
import VideoMetadata from './VideoMetadata';
import VideoPrivacy from './VideoPrivacy';
import VideoSpatial from './VideoSpatial';
import VideoStats from './VideoStats';
import VideoTranscode from './VideoTranscode';
import VideoUpload from './VideoUpload';

/**
 * The Video model module.
 * @module model/Video
 * @version 3.4
 */
class Video {
    /**
     * Constructs a new <code>Video</code>.
     * @alias module:model/Video
     * @param categories {Array.<module:model/Category>} The categories to which this video belongs.
     * @param contentRating {Array.<String>} The content ratings of this video.
     * @param context {module:model/VideoContext} 
     * @param createdTime {String} The time in ISO 8601 format when the video was created.
     * @param description {String} A brief explanation of the video's content.
     * @param duration {Number} The video's duration in seconds.
     * @param embed {module:model/EmbedSettings} Information about embedding this video.
     * @param height {Number} The video's height in pixels.
     * @param language {String} The video's primary language.
     * @param license {module:model/Video.LicenseEnum} The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:  Option descriptions:  * `by` - Attribution  * `by-nc` - Attribution Non-Commercial  * `by-nc-nd` - Attribution Non-Commercial No Derivatives  * `by-nc-sa` - Attribution Non-Commercial Share Alike  * `by-nd` - Attribution No Derivatives  * `by-sa` - Attribution Share Alike  * `cc0` - Public Domain Dedication 
     * @param link {String} The link to the video.
     * @param metadata {module:model/VideoMetadata} 
     * @param modifiedTime {String} The time in ISO 8601 format when the video metadata was last modified.
     * @param name {String} The video's title.
     * @param pictures {module:model/Picture} The active picture for this video.
     * @param privacy {module:model/VideoPrivacy} 
     * @param releaseTime {String} The time in ISO 8601 format when the video was released.
     * @param resourceKey {String} The resource key string of the video.
     * @param spatial {module:model/VideoSpatial} 
     * @param stats {module:model/VideoStats} 
     * @param status {module:model/Video.StatusEnum} The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.  Option descriptions:  * `available` - The video is available.  * `quota_exceeded` - The user's quota is exceeded with this video.  * `total_cap_exceeded` - The user has exceeded their total cap with this video.  * `transcode_starting` - Transcoding is beginning for the video.  * `transcoding` - Transcoding is underway for the video.  * `transcoding_error` - There was an error in transcoding the video.  * `unavailable` - The video is unavailable.  * `uploading` - The video is being uploaded.  * `uploading_error` - There was an error in uploading the video. 
     * @param tags {Array.<module:model/Tag>} An array of all tags assigned to this video.
     * @param transcode {module:model/VideoTranscode} 
     * @param upload {module:model/VideoUpload} 
     * @param uri {String} The video's canonical relative URI.
     * @param user {module:model/User} The video owner.
     * @param width {Number} The video's width in pixels.
     */
    constructor(categories, contentRating, context, createdTime, description, duration, embed, height, language, license, link, metadata, modifiedTime, name, pictures, privacy, releaseTime, resourceKey, spatial, stats, status, tags, transcode, upload, uri, user, width) { 
        
        Video.initialize(this, categories, contentRating, context, createdTime, description, duration, embed, height, language, license, link, metadata, modifiedTime, name, pictures, privacy, releaseTime, resourceKey, spatial, stats, status, tags, transcode, upload, uri, user, width);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, categories, contentRating, context, createdTime, description, duration, embed, height, language, license, link, metadata, modifiedTime, name, pictures, privacy, releaseTime, resourceKey, spatial, stats, status, tags, transcode, upload, uri, user, width) { 
        obj['categories'] = categories;
        obj['content_rating'] = contentRating;
        obj['context'] = context;
        obj['created_time'] = createdTime;
        obj['description'] = description;
        obj['duration'] = duration;
        obj['embed'] = embed;
        obj['height'] = height;
        obj['language'] = language;
        obj['license'] = license;
        obj['link'] = link;
        obj['metadata'] = metadata;
        obj['modified_time'] = modifiedTime;
        obj['name'] = name;
        obj['pictures'] = pictures;
        obj['privacy'] = privacy;
        obj['release_time'] = releaseTime;
        obj['resource_key'] = resourceKey;
        obj['spatial'] = spatial;
        obj['stats'] = stats;
        obj['status'] = status;
        obj['tags'] = tags;
        obj['transcode'] = transcode;
        obj['upload'] = upload;
        obj['uri'] = uri;
        obj['user'] = user;
        obj['width'] = width;
    }

    /**
     * Constructs a <code>Video</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Video} obj Optional instance to populate.
     * @return {module:model/Video} The populated <code>Video</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Video();

            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Category]);
            }
            if (data.hasOwnProperty('content_rating')) {
                obj['content_rating'] = ApiClient.convertToType(data['content_rating'], ['String']);
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = VideoContext.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = ApiClient.convertToType(data['created_time'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('embed')) {
                obj['embed'] = ApiClient.convertToType(data['embed'], EmbedSettings);
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('last_user_action_event_date')) {
                obj['last_user_action_event_date'] = ApiClient.convertToType(data['last_user_action_event_date'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = VideoMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('modified_time')) {
                obj['modified_time'] = ApiClient.convertToType(data['modified_time'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parent_folder')) {
                obj['parent_folder'] = ApiClient.convertToType(data['parent_folder'], Project);
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('pictures')) {
                obj['pictures'] = ApiClient.convertToType(data['pictures'], Picture);
            }
            if (data.hasOwnProperty('privacy')) {
                obj['privacy'] = VideoPrivacy.constructFromObject(data['privacy']);
            }
            if (data.hasOwnProperty('release_time')) {
                obj['release_time'] = ApiClient.convertToType(data['release_time'], 'String');
            }
            if (data.hasOwnProperty('resource_key')) {
                obj['resource_key'] = ApiClient.convertToType(data['resource_key'], 'String');
            }
            if (data.hasOwnProperty('spatial')) {
                obj['spatial'] = VideoSpatial.constructFromObject(data['spatial']);
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = VideoStats.constructFromObject(data['stats']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
            if (data.hasOwnProperty('transcode')) {
                obj['transcode'] = VideoTranscode.constructFromObject(data['transcode']);
            }
            if (data.hasOwnProperty('upload')) {
                obj['upload'] = VideoUpload.constructFromObject(data['upload']);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], User);
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Video</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Video</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Video.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                Category.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['content_rating'])) {
            throw new Error("Expected the field `content_rating` to be an array in the JSON data but got " + data['content_rating']);
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          VideoContext.validateJSON(data['context']);
        }
        // ensure the json data is a string
        if (data['created_time'] && !(typeof data['created_time'] === 'string' || data['created_time'] instanceof String)) {
            throw new Error("Expected the field `created_time` to be a primitive type in the JSON string but got " + data['created_time']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `embed`
        if (data['embed']) { // data not null
          EmbedSettings.validateJSON(data['embed']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['last_user_action_event_date'] && !(typeof data['last_user_action_event_date'] === 'string' || data['last_user_action_event_date'] instanceof String)) {
            throw new Error("Expected the field `last_user_action_event_date` to be a primitive type in the JSON string but got " + data['last_user_action_event_date']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          VideoMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['modified_time'] && !(typeof data['modified_time'] === 'string' || data['modified_time'] instanceof String)) {
            throw new Error("Expected the field `modified_time` to be a primitive type in the JSON string but got " + data['modified_time']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `parent_folder`
        if (data['parent_folder']) { // data not null
          Project.validateJSON(data['parent_folder']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // validate the optional field `pictures`
        if (data['pictures']) { // data not null
          Picture.validateJSON(data['pictures']);
        }
        // validate the optional field `privacy`
        if (data['privacy']) { // data not null
          VideoPrivacy.validateJSON(data['privacy']);
        }
        // ensure the json data is a string
        if (data['release_time'] && !(typeof data['release_time'] === 'string' || data['release_time'] instanceof String)) {
            throw new Error("Expected the field `release_time` to be a primitive type in the JSON string but got " + data['release_time']);
        }
        // ensure the json data is a string
        if (data['resource_key'] && !(typeof data['resource_key'] === 'string' || data['resource_key'] instanceof String)) {
            throw new Error("Expected the field `resource_key` to be a primitive type in the JSON string but got " + data['resource_key']);
        }
        // validate the optional field `spatial`
        if (data['spatial']) { // data not null
          VideoSpatial.validateJSON(data['spatial']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          VideoStats.validateJSON(data['stats']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                Tag.validateJSON(item);
            };
        }
        // validate the optional field `transcode`
        if (data['transcode']) { // data not null
          VideoTranscode.validateJSON(data['transcode']);
        }
        // validate the optional field `upload`
        if (data['upload']) { // data not null
          VideoUpload.validateJSON(data['upload']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

Video.RequiredProperties = ["categories", "content_rating", "context", "created_time", "description", "duration", "embed", "height", "language", "license", "link", "metadata", "modified_time", "name", "pictures", "privacy", "release_time", "resource_key", "spatial", "stats", "status", "tags", "transcode", "upload", "uri", "user", "width"];

/**
 * The categories to which this video belongs.
 * @member {Array.<module:model/Category>} categories
 */
Video.prototype['categories'] = undefined;

/**
 * The content ratings of this video.
 * @member {Array.<String>} content_rating
 */
Video.prototype['content_rating'] = undefined;

/**
 * @member {module:model/VideoContext} context
 */
Video.prototype['context'] = undefined;

/**
 * The time in ISO 8601 format when the video was created.
 * @member {String} created_time
 */
Video.prototype['created_time'] = undefined;

/**
 * A brief explanation of the video's content.
 * @member {String} description
 */
Video.prototype['description'] = undefined;

/**
 * The video's duration in seconds.
 * @member {Number} duration
 */
Video.prototype['duration'] = undefined;

/**
 * Information about embedding this video.
 * @member {module:model/EmbedSettings} embed
 */
Video.prototype['embed'] = undefined;

/**
 * The video's height in pixels.
 * @member {Number} height
 */
Video.prototype['height'] = undefined;

/**
 * The video's primary language.
 * @member {String} language
 */
Video.prototype['language'] = undefined;

/**
 * The time in ISO 8601 format when the user last modified the video.
 * @member {String} last_user_action_event_date
 */
Video.prototype['last_user_action_event_date'] = undefined;

/**
 * The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:  Option descriptions:  * `by` - Attribution  * `by-nc` - Attribution Non-Commercial  * `by-nc-nd` - Attribution Non-Commercial No Derivatives  * `by-nc-sa` - Attribution Non-Commercial Share Alike  * `by-nd` - Attribution No Derivatives  * `by-sa` - Attribution Share Alike  * `cc0` - Public Domain Dedication 
 * @member {module:model/Video.LicenseEnum} license
 */
Video.prototype['license'] = undefined;

/**
 * The link to the video.
 * @member {String} link
 */
Video.prototype['link'] = undefined;

/**
 * @member {module:model/VideoMetadata} metadata
 */
Video.prototype['metadata'] = undefined;

/**
 * The time in ISO 8601 format when the video metadata was last modified.
 * @member {String} modified_time
 */
Video.prototype['modified_time'] = undefined;

/**
 * The video's title.
 * @member {String} name
 */
Video.prototype['name'] = undefined;

/**
 * Information about the folder that contains this video.
 * @member {module:model/Project} parent_folder
 */
Video.prototype['parent_folder'] = undefined;

/**
 * The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the `private` scope.
 * @member {String} password
 */
Video.prototype['password'] = undefined;

/**
 * The active picture for this video.
 * @member {module:model/Picture} pictures
 */
Video.prototype['pictures'] = undefined;

/**
 * @member {module:model/VideoPrivacy} privacy
 */
Video.prototype['privacy'] = undefined;

/**
 * The time in ISO 8601 format when the video was released.
 * @member {String} release_time
 */
Video.prototype['release_time'] = undefined;

/**
 * The resource key string of the video.
 * @member {String} resource_key
 */
Video.prototype['resource_key'] = undefined;

/**
 * @member {module:model/VideoSpatial} spatial
 */
Video.prototype['spatial'] = undefined;

/**
 * @member {module:model/VideoStats} stats
 */
Video.prototype['stats'] = undefined;

/**
 * The status code for the availability of the video. This field is deprecated in favor of `upload` and `transcode`.  Option descriptions:  * `available` - The video is available.  * `quota_exceeded` - The user's quota is exceeded with this video.  * `total_cap_exceeded` - The user has exceeded their total cap with this video.  * `transcode_starting` - Transcoding is beginning for the video.  * `transcoding` - Transcoding is underway for the video.  * `transcoding_error` - There was an error in transcoding the video.  * `unavailable` - The video is unavailable.  * `uploading` - The video is being uploaded.  * `uploading_error` - There was an error in uploading the video. 
 * @member {module:model/Video.StatusEnum} status
 */
Video.prototype['status'] = undefined;

/**
 * An array of all tags assigned to this video.
 * @member {Array.<module:model/Tag>} tags
 */
Video.prototype['tags'] = undefined;

/**
 * @member {module:model/VideoTranscode} transcode
 */
Video.prototype['transcode'] = undefined;

/**
 * @member {module:model/VideoUpload} upload
 */
Video.prototype['upload'] = undefined;

/**
 * The video's canonical relative URI.
 * @member {String} uri
 */
Video.prototype['uri'] = undefined;

/**
 * The video owner.
 * @member {module:model/User} user
 */
Video.prototype['user'] = undefined;

/**
 * The video's width in pixels.
 * @member {Number} width
 */
Video.prototype['width'] = undefined;





/**
 * Allowed values for the <code>license</code> property.
 * @enum {String}
 * @readonly
 */
Video['LicenseEnum'] = {

    /**
     * value: "by"
     * @const
     */
    "by": "by",

    /**
     * value: "by-nc"
     * @const
     */
    "by-nc": "by-nc",

    /**
     * value: "by-nc-nd"
     * @const
     */
    "by-nc-nd": "by-nc-nd",

    /**
     * value: "by-nc-sa"
     * @const
     */
    "by-nc-sa": "by-nc-sa",

    /**
     * value: "by-nd"
     * @const
     */
    "by-nd": "by-nd",

    /**
     * value: "by-sa"
     * @const
     */
    "by-sa": "by-sa",

    /**
     * value: "cc0"
     * @const
     */
    "cc0": "cc0"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Video['StatusEnum'] = {

    /**
     * value: "available"
     * @const
     */
    "available": "available",

    /**
     * value: "quota_exceeded"
     * @const
     */
    "quota_exceeded": "quota_exceeded",

    /**
     * value: "total_cap_exceeded"
     * @const
     */
    "total_cap_exceeded": "total_cap_exceeded",

    /**
     * value: "transcode_starting"
     * @const
     */
    "transcode_starting": "transcode_starting",

    /**
     * value: "transcoding"
     * @const
     */
    "transcoding": "transcoding",

    /**
     * value: "transcoding_error"
     * @const
     */
    "transcoding_error": "transcoding_error",

    /**
     * value: "unavailable"
     * @const
     */
    "unavailable": "unavailable",

    /**
     * value: "uploading"
     * @const
     */
    "uploading": "uploading",

    /**
     * value: "uploading_error"
     * @const
     */
    "uploading_error": "uploading_error"
};



export default Video;

