/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UploadVideoAlt1RequestEmbed from './UploadVideoAlt1RequestEmbed';
import UploadVideoAlt1RequestPrivacy from './UploadVideoAlt1RequestPrivacy';
import UploadVideoAlt1RequestRatings from './UploadVideoAlt1RequestRatings';
import UploadVideoAlt1RequestReviewPage from './UploadVideoAlt1RequestReviewPage';
import UploadVideoAlt1RequestSpatial from './UploadVideoAlt1RequestSpatial';
import UploadVideoAlt1RequestUpload from './UploadVideoAlt1RequestUpload';

/**
 * The UploadVideoAlt1Request model module.
 * @module model/UploadVideoAlt1Request
 * @version 3.4
 */
class UploadVideoAlt1Request {
    /**
     * Constructs a new <code>UploadVideoAlt1Request</code>.
     * @alias module:model/UploadVideoAlt1Request
     * @param upload {module:model/UploadVideoAlt1RequestUpload} 
     */
    constructor(upload) { 
        
        UploadVideoAlt1Request.initialize(this, upload);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, upload) { 
        obj['upload'] = upload;
    }

    /**
     * Constructs a <code>UploadVideoAlt1Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadVideoAlt1Request} obj Optional instance to populate.
     * @return {module:model/UploadVideoAlt1Request} The populated <code>UploadVideoAlt1Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadVideoAlt1Request();

            if (data.hasOwnProperty('content_rating')) {
                obj['content_rating'] = ApiClient.convertToType(data['content_rating'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('embed')) {
                obj['embed'] = UploadVideoAlt1RequestEmbed.constructFromObject(data['embed']);
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('privacy')) {
                obj['privacy'] = UploadVideoAlt1RequestPrivacy.constructFromObject(data['privacy']);
            }
            if (data.hasOwnProperty('ratings')) {
                obj['ratings'] = UploadVideoAlt1RequestRatings.constructFromObject(data['ratings']);
            }
            if (data.hasOwnProperty('review_page')) {
                obj['review_page'] = UploadVideoAlt1RequestReviewPage.constructFromObject(data['review_page']);
            }
            if (data.hasOwnProperty('spatial')) {
                obj['spatial'] = UploadVideoAlt1RequestSpatial.constructFromObject(data['spatial']);
            }
            if (data.hasOwnProperty('upload')) {
                obj['upload'] = UploadVideoAlt1RequestUpload.constructFromObject(data['upload']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadVideoAlt1Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadVideoAlt1Request</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UploadVideoAlt1Request.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['content_rating'])) {
            throw new Error("Expected the field `content_rating` to be an array in the JSON data but got " + data['content_rating']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `embed`
        if (data['embed']) { // data not null
          UploadVideoAlt1RequestEmbed.validateJSON(data['embed']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // validate the optional field `privacy`
        if (data['privacy']) { // data not null
          UploadVideoAlt1RequestPrivacy.validateJSON(data['privacy']);
        }
        // validate the optional field `ratings`
        if (data['ratings']) { // data not null
          UploadVideoAlt1RequestRatings.validateJSON(data['ratings']);
        }
        // validate the optional field `review_page`
        if (data['review_page']) { // data not null
          UploadVideoAlt1RequestReviewPage.validateJSON(data['review_page']);
        }
        // validate the optional field `spatial`
        if (data['spatial']) { // data not null
          UploadVideoAlt1RequestSpatial.validateJSON(data['spatial']);
        }
        // validate the optional field `upload`
        if (data['upload']) { // data not null
          UploadVideoAlt1RequestUpload.validateJSON(data['upload']);
        }

        return true;
    }


}

UploadVideoAlt1Request.RequiredProperties = ["upload"];

/**
 * A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint.
 * @member {Array.<String>} content_rating
 */
UploadVideoAlt1Request.prototype['content_rating'] = undefined;

/**
 * The description of the video.
 * @member {String} description
 */
UploadVideoAlt1Request.prototype['description'] = undefined;

/**
 * @member {module:model/UploadVideoAlt1RequestEmbed} embed
 */
UploadVideoAlt1Request.prototype['embed'] = undefined;

/**
 * The Creative Commons license.
 * @member {module:model/UploadVideoAlt1Request.LicenseEnum} license
 */
UploadVideoAlt1Request.prototype['license'] = undefined;

/**
 * The video's default language. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.
 * @member {String} locale
 */
UploadVideoAlt1Request.prototype['locale'] = undefined;

/**
 * The title of the video.
 * @member {String} name
 */
UploadVideoAlt1Request.prototype['name'] = undefined;

/**
 * The password. When you set `privacy.view` to `password`, you must provide the password as an additional parameter.
 * @member {String} password
 */
UploadVideoAlt1Request.prototype['password'] = undefined;

/**
 * @member {module:model/UploadVideoAlt1RequestPrivacy} privacy
 */
UploadVideoAlt1Request.prototype['privacy'] = undefined;

/**
 * @member {module:model/UploadVideoAlt1RequestRatings} ratings
 */
UploadVideoAlt1Request.prototype['ratings'] = undefined;

/**
 * @member {module:model/UploadVideoAlt1RequestReviewPage} review_page
 */
UploadVideoAlt1Request.prototype['review_page'] = undefined;

/**
 * @member {module:model/UploadVideoAlt1RequestSpatial} spatial
 */
UploadVideoAlt1Request.prototype['spatial'] = undefined;

/**
 * @member {module:model/UploadVideoAlt1RequestUpload} upload
 */
UploadVideoAlt1Request.prototype['upload'] = undefined;





/**
 * Allowed values for the <code>license</code> property.
 * @enum {String}
 * @readonly
 */
UploadVideoAlt1Request['LicenseEnum'] = {

    /**
     * value: "by"
     * @const
     */
    "by": "by",

    /**
     * value: "by-nc"
     * @const
     */
    "by-nc": "by-nc",

    /**
     * value: "by-nc-nd"
     * @const
     */
    "by-nc-nd": "by-nc-nd",

    /**
     * value: "by-nc-sa"
     * @const
     */
    "by-nc-sa": "by-nc-sa",

    /**
     * value: "by-nd"
     * @const
     */
    "by-nd": "by-nd",

    /**
     * value: "by-sa"
     * @const
     */
    "by-sa": "by-sa",

    /**
     * value: "cc0"
     * @const
     */
    "cc0": "cc0"
};



export default UploadVideoAlt1Request;

