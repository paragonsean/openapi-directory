/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import UploadAttempt from '../model/UploadAttempt';
import UploadVideoAlt1Request from '../model/UploadVideoAlt1Request';
import Video from '../model/Video';

/**
* VideosUpload service.
* @module api/VideosUploadApi
* @version 3.4
*/
export default class VideosUploadApi {

    /**
    * Constructs a new VideosUploadApi. 
    * @alias module:api/VideosUploadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the completeStreamingUpload operation.
     * @callback module:api/VideosUploadApi~completeStreamingUploadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete a user's streaming upload
     * @param {Number} upload The ID of the upload attempt.
     * @param {Number} userId The ID of the user.
     * @param {String} signature The crypto signature of the completed upload.
     * @param {Number} videoFileId The ID of the uploaded file.
     * @param {module:api/VideosUploadApi~completeStreamingUploadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    completeStreamingUpload(upload, userId, signature, videoFileId, callback) {
      let postBody = null;
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling completeStreamingUpload");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling completeStreamingUpload");
      }
      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling completeStreamingUpload");
      }
      // verify the required parameter 'videoFileId' is set
      if (videoFileId === undefined || videoFileId === null) {
        throw new Error("Missing the required parameter 'videoFileId' when calling completeStreamingUpload");
      }

      let pathParams = {
        'upload': upload,
        'user_id': userId
      };
      let queryParams = {
        'signature': signature,
        'video_file_id': videoFileId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/uploads/{upload}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUploadAttempt operation.
     * @callback module:api/VideosUploadApi~getUploadAttemptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadAttempt} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user's upload attempt
     * @param {Number} upload The ID of the upload attempt.
     * @param {Number} userId The ID of the user.
     * @param {module:api/VideosUploadApi~getUploadAttemptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadAttempt}
     */
    getUploadAttempt(upload, userId, callback) {
      let postBody = null;
      // verify the required parameter 'upload' is set
      if (upload === undefined || upload === null) {
        throw new Error("Missing the required parameter 'upload' when calling getUploadAttempt");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUploadAttempt");
      }

      let pathParams = {
        'upload': upload,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.uploadattempt+json'];
      let returnType = UploadAttempt;
      return this.apiClient.callApi(
        '/users/{user_id}/uploads/{upload}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadVideo operation.
     * @callback module:api/VideosUploadApi~uploadVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a video
     * Begin the video upload process. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
     * @param {Number} userId The ID of the user.
     * @param {module:model/UploadVideoAlt1Request} uploadVideoAlt1Request 
     * @param {module:api/VideosUploadApi~uploadVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    uploadVideo(userId, uploadVideoAlt1Request, callback) {
      let postBody = uploadVideoAlt1Request;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling uploadVideo");
      }
      // verify the required parameter 'uploadVideoAlt1Request' is set
      if (uploadVideoAlt1Request === undefined || uploadVideoAlt1Request === null) {
        throw new Error("Missing the required parameter 'uploadVideoAlt1Request' when calling uploadVideo");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.video+json'];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/users/{user_id}/videos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadVideoAlt1 operation.
     * @callback module:api/VideosUploadApi~uploadVideoAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a video
     * Begin the video upload process. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).
     * @param {module:model/UploadVideoAlt1Request} uploadVideoAlt1Request 
     * @param {module:api/VideosUploadApi~uploadVideoAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    uploadVideoAlt1(uploadVideoAlt1Request, callback) {
      let postBody = uploadVideoAlt1Request;
      // verify the required parameter 'uploadVideoAlt1Request' is set
      if (uploadVideoAlt1Request === undefined || uploadVideoAlt1Request === null) {
        throw new Error("Missing the required parameter 'uploadVideoAlt1Request' when calling uploadVideoAlt1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.video+json'];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/me/videos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
