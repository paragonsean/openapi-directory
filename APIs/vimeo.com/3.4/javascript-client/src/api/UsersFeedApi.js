/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Activity31 from '../model/Activity31';

/**
* UsersFeed service.
* @module api/UsersFeedApi
* @version 3.4
*/
export default class UsersFeedApi {

    /**
    * Constructs a new UsersFeedApi. 
    * @alias module:api/UsersFeedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getFeed operation.
     * @callback module:api/UsersFeedApi~getFeedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Activity31>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all videos in a user's feed
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {String} [offset] Necessary for proper pagination. You shouldn't provide this value yourself, and instead use the pagination links in the feed response. Please see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter) for more information.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:model/String} [type] The feed type.
     * @param {module:api/UsersFeedApi~getFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Activity31>}
     */
    getFeed(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getFeed");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'offset': opts['offset'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.activity+json'];
      let returnType = [Activity31];
      return this.apiClient.callApi(
        '/users/{user_id}/feed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedAlt1 operation.
     * @callback module:api/UsersFeedApi~getFeedAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Activity31>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all videos in a user's feed
     * @param {Object} opts Optional parameters
     * @param {String} [offset] Necessary for proper pagination. You shouldn't provide this value yourself, and instead use the pagination links in the feed response. Please see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter) for more information.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:model/String} [type] The feed type.
     * @param {module:api/UsersFeedApi~getFeedAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Activity31>}
     */
    getFeedAlt1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.activity+json'];
      let returnType = [Activity31];
      return this.apiClient.callApi(
        '/me/feed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
