/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddChannelModeratorsRequest from '../model/AddChannelModeratorsRequest';
import Error from '../model/Error';
import LegacyError from '../model/LegacyError';
import RemoveChannelModeratorsRequest from '../model/RemoveChannelModeratorsRequest';
import ReplaceChannelModeratorsRequest from '../model/ReplaceChannelModeratorsRequest';
import User from '../model/User';

/**
* ChannelsModerators service.
* @module api/ChannelsModeratorsApi
* @version 3.4
*/
export default class ChannelsModeratorsApi {

    /**
    * Constructs a new ChannelsModeratorsApi. 
    * @alias module:api/ChannelsModeratorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addChannelModerator operation.
     * @callback module:api/ChannelsModeratorsApi~addChannelModeratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a specific channel moderator
     * @param {Number} channelId The ID of the channel.
     * @param {Number} userId The ID of the user.
     * @param {module:api/ChannelsModeratorsApi~addChannelModeratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addChannelModerator(channelId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling addChannelModerator");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addChannelModerator");
      }

      let pathParams = {
        'channel_id': channelId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channel_id}/moderators/{user_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addChannelModerators operation.
     * @callback module:api/ChannelsModeratorsApi~addChannelModeratorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a list of channel moderators
     * @param {Number} channelId The ID of the channel.
     * @param {module:model/AddChannelModeratorsRequest} addChannelModeratorsRequest 
     * @param {module:api/ChannelsModeratorsApi~addChannelModeratorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addChannelModerators(channelId, addChannelModeratorsRequest, callback) {
      let postBody = addChannelModeratorsRequest;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling addChannelModerators");
      }
      // verify the required parameter 'addChannelModeratorsRequest' is set
      if (addChannelModeratorsRequest === undefined || addChannelModeratorsRequest === null) {
        throw new Error("Missing the required parameter 'addChannelModeratorsRequest' when calling addChannelModerators");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channel_id}/moderators', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelModerator operation.
     * @callback module:api/ChannelsModeratorsApi~getChannelModeratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific channel moderator
     * @param {Number} channelId The ID of the channel.
     * @param {Number} userId The ID of the user.
     * @param {module:api/ChannelsModeratorsApi~getChannelModeratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getChannelModerator(channelId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelModerator");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getChannelModerator");
      }

      let pathParams = {
        'channel_id': channelId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/channels/{channel_id}/moderators/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelModerators operation.
     * @callback module:api/ChannelsModeratorsApi~getChannelModeratorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the moderators in a channel
     * @param {Number} channelId The ID of the channel.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/ChannelsModeratorsApi~getChannelModeratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    getChannelModerators(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelModerators");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/channels/{channel_id}/moderators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeChannelModerator operation.
     * @callback module:api/ChannelsModeratorsApi~removeChannelModeratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a specific channel moderator
     * @param {Number} channelId The ID of the channel.
     * @param {Number} userId The ID of the user.
     * @param {module:api/ChannelsModeratorsApi~removeChannelModeratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeChannelModerator(channelId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling removeChannelModerator");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeChannelModerator");
      }

      let pathParams = {
        'channel_id': channelId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channel_id}/moderators/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeChannelModerators operation.
     * @callback module:api/ChannelsModeratorsApi~removeChannelModeratorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a list of channel moderators
     * @param {Number} channelId The ID of the channel.
     * @param {module:model/RemoveChannelModeratorsRequest} removeChannelModeratorsRequest 
     * @param {module:api/ChannelsModeratorsApi~removeChannelModeratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    removeChannelModerators(channelId, removeChannelModeratorsRequest, callback) {
      let postBody = removeChannelModeratorsRequest;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling removeChannelModerators");
      }
      // verify the required parameter 'removeChannelModeratorsRequest' is set
      if (removeChannelModeratorsRequest === undefined || removeChannelModeratorsRequest === null) {
        throw new Error("Missing the required parameter 'removeChannelModeratorsRequest' when calling removeChannelModerators");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.user+json'];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/channels/{channel_id}/moderators', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceChannelModerators operation.
     * @callback module:api/ChannelsModeratorsApi~replaceChannelModeratorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace the moderators of a channel
     * @param {Number} channelId The ID of the channel.
     * @param {module:model/ReplaceChannelModeratorsRequest} replaceChannelModeratorsRequest 
     * @param {module:api/ChannelsModeratorsApi~replaceChannelModeratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    replaceChannelModerators(channelId, replaceChannelModeratorsRequest, callback) {
      let postBody = replaceChannelModeratorsRequest;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling replaceChannelModerators");
      }
      // verify the required parameter 'replaceChannelModeratorsRequest' is set
      if (replaceChannelModeratorsRequest === undefined || replaceChannelModeratorsRequest === null) {
        throw new Error("Missing the required parameter 'replaceChannelModeratorsRequest' when calling replaceChannelModerators");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/channels/{channel_id}/moderators', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
