/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateVodPromotionRequest from '../model/CreateVodPromotionRequest';
import LegacyError from '../model/LegacyError';
import OnDemandPromotion from '../model/OnDemandPromotion';
import OnDemandPromotionCode from '../model/OnDemandPromotionCode';

/**
* OnDemandPromotions service.
* @module api/OnDemandPromotionsApi
* @version 3.4
*/
export default class OnDemandPromotionsApi {

    /**
    * Constructs a new OnDemandPromotionsApi. 
    * @alias module:api/OnDemandPromotionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createVodPromotion operation.
     * @callback module:api/OnDemandPromotionsApi~createVodPromotionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnDemandPromotion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a promotion to an On Demand page
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {module:model/CreateVodPromotionRequest} createVodPromotionRequest 
     * @param {module:api/OnDemandPromotionsApi~createVodPromotionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnDemandPromotion}
     */
    createVodPromotion(ondemandId, createVodPromotionRequest, callback) {
      let postBody = createVodPromotionRequest;
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling createVodPromotion");
      }
      // verify the required parameter 'createVodPromotionRequest' is set
      if (createVodPromotionRequest === undefined || createVodPromotionRequest === null) {
        throw new Error("Missing the required parameter 'createVodPromotionRequest' when calling createVodPromotion");
      }

      let pathParams = {
        'ondemand_id': ondemandId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.ondemand.promotion+json'];
      let accepts = ['application/vnd.vimeo.ondemand.promotion+json'];
      let returnType = OnDemandPromotion;
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/promotions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVodPromotion operation.
     * @callback module:api/OnDemandPromotionsApi~deleteVodPromotionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a promotion from an On Demand page
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {Number} promotionId The ID of the promotion.
     * @param {module:api/OnDemandPromotionsApi~deleteVodPromotionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVodPromotion(ondemandId, promotionId, callback) {
      let postBody = null;
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling deleteVodPromotion");
      }
      // verify the required parameter 'promotionId' is set
      if (promotionId === undefined || promotionId === null) {
        throw new Error("Missing the required parameter 'promotionId' when calling deleteVodPromotion");
      }

      let pathParams = {
        'ondemand_id': ondemandId,
        'promotion_id': promotionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/promotions/{promotion_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVodPromotion operation.
     * @callback module:api/OnDemandPromotionsApi~getVodPromotionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnDemandPromotion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific promotion on an On Demand page
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {Number} promotionId The ID of the promotion.
     * @param {module:api/OnDemandPromotionsApi~getVodPromotionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnDemandPromotion}
     */
    getVodPromotion(ondemandId, promotionId, callback) {
      let postBody = null;
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling getVodPromotion");
      }
      // verify the required parameter 'promotionId' is set
      if (promotionId === undefined || promotionId === null) {
        throw new Error("Missing the required parameter 'promotionId' when calling getVodPromotion");
      }

      let pathParams = {
        'ondemand_id': ondemandId,
        'promotion_id': promotionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.promotion+json'];
      let returnType = OnDemandPromotion;
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/promotions/{promotion_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVodPromotionCodes operation.
     * @callback module:api/OnDemandPromotionsApi~getVodPromotionCodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnDemandPromotionCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the codes of a promotion on an On Demand page
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {Number} promotionId The ID of the promotion.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/OnDemandPromotionsApi~getVodPromotionCodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnDemandPromotionCode}
     */
    getVodPromotionCodes(ondemandId, promotionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling getVodPromotionCodes");
      }
      // verify the required parameter 'promotionId' is set
      if (promotionId === undefined || promotionId === null) {
        throw new Error("Missing the required parameter 'promotionId' when calling getVodPromotionCodes");
      }

      let pathParams = {
        'ondemand_id': ondemandId,
        'promotion_id': promotionId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.promocode+json'];
      let returnType = OnDemandPromotionCode;
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVodPromotions operation.
     * @callback module:api/OnDemandPromotionsApi~getVodPromotionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnDemandPromotion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the promotions on an On Demand page
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {module:model/String} filter The filter to apply to the results.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/OnDemandPromotionsApi~getVodPromotionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnDemandPromotion}
     */
    getVodPromotions(ondemandId, filter, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling getVodPromotions");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getVodPromotions");
      }

      let pathParams = {
        'ondemand_id': ondemandId
      };
      let queryParams = {
        'filter': filter,
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.promotion+json'];
      let returnType = OnDemandPromotion;
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/promotions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
