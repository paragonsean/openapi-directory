/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LegacyError from '../model/LegacyError';
import Picture from '../model/Picture';

/**
* EmbedPresetsCustomLogos service.
* @module api/EmbedPresetsCustomLogosApi
* @version 3.4
*/
export default class EmbedPresetsCustomLogosApi {

    /**
    * Constructs a new EmbedPresetsCustomLogosApi. 
    * @alias module:api/EmbedPresetsCustomLogosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCustomLogo operation.
     * @callback module:api/EmbedPresetsCustomLogosApi~createCustomLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a custom logo
     * @param {Number} userId The ID of the user.
     * @param {module:api/EmbedPresetsCustomLogosApi~createCustomLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    createCustomLogo(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createCustomLogo");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/users/{user_id}/customlogos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCustomLogoAlt1 operation.
     * @callback module:api/EmbedPresetsCustomLogosApi~createCustomLogoAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a custom logo
     * @param {module:api/EmbedPresetsCustomLogosApi~createCustomLogoAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    createCustomLogoAlt1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/me/customlogos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomLogo operation.
     * @callback module:api/EmbedPresetsCustomLogosApi~getCustomLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific custom logo
     * @param {Number} logoId The ID of the custom logo.
     * @param {Number} userId The ID of the user.
     * @param {module:api/EmbedPresetsCustomLogosApi~getCustomLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    getCustomLogo(logoId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'logoId' is set
      if (logoId === undefined || logoId === null) {
        throw new Error("Missing the required parameter 'logoId' when calling getCustomLogo");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getCustomLogo");
      }

      let pathParams = {
        'logo_id': logoId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/users/{user_id}/customlogos/{logo_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomLogoAlt1 operation.
     * @callback module:api/EmbedPresetsCustomLogosApi~getCustomLogoAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific custom logo
     * @param {Number} logoId The ID of the custom logo.
     * @param {module:api/EmbedPresetsCustomLogosApi~getCustomLogoAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    getCustomLogoAlt1(logoId, callback) {
      let postBody = null;
      // verify the required parameter 'logoId' is set
      if (logoId === undefined || logoId === null) {
        throw new Error("Missing the required parameter 'logoId' when calling getCustomLogoAlt1");
      }

      let pathParams = {
        'logo_id': logoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/me/customlogos/{logo_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomLogos operation.
     * @callback module:api/EmbedPresetsCustomLogosApi~getCustomLogosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Picture>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the custom logos that belong to a user
     * @param {Number} userId The ID of the user.
     * @param {module:api/EmbedPresetsCustomLogosApi~getCustomLogosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Picture>}
     */
    getCustomLogos(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getCustomLogos");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = [Picture];
      return this.apiClient.callApi(
        '/users/{user_id}/customlogos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomLogosAlt1 operation.
     * @callback module:api/EmbedPresetsCustomLogosApi~getCustomLogosAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Picture>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the custom logos that belong to a user
     * @param {module:api/EmbedPresetsCustomLogosApi~getCustomLogosAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Picture>}
     */
    getCustomLogosAlt1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = [Picture];
      return this.apiClient.callApi(
        '/me/customlogos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
