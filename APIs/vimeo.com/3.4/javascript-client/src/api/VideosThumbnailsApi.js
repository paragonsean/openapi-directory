/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateVideoThumbnailAlt1Request from '../model/CreateVideoThumbnailAlt1Request';
import EditVideoThumbnailRequest from '../model/EditVideoThumbnailRequest';
import Picture from '../model/Picture';

/**
* VideosThumbnails service.
* @module api/VideosThumbnailsApi
* @version 3.4
*/
export default class VideosThumbnailsApi {

    /**
    * Constructs a new VideosThumbnailsApi. 
    * @alias module:api/VideosThumbnailsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createVideoThumbnail operation.
     * @callback module:api/VideosThumbnailsApi~createVideoThumbnailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a video thumbnail
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateVideoThumbnailAlt1Request} [createVideoThumbnailAlt1Request] 
     * @param {module:api/VideosThumbnailsApi~createVideoThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    createVideoThumbnail(videoId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createVideoThumbnailAlt1Request'];
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling createVideoThumbnail");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.picture+json'];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/videos/{video_id}/pictures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVideoThumbnailAlt1 operation.
     * @callback module:api/VideosThumbnailsApi~createVideoThumbnailAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a video thumbnail
     * @param {Number} channelId The ID of the channel.
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateVideoThumbnailAlt1Request} [createVideoThumbnailAlt1Request] 
     * @param {module:api/VideosThumbnailsApi~createVideoThumbnailAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    createVideoThumbnailAlt1(channelId, videoId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createVideoThumbnailAlt1Request'];
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling createVideoThumbnailAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling createVideoThumbnailAlt1");
      }

      let pathParams = {
        'channel_id': channelId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.picture+json'];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos/{video_id}/pictures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVideoThumbnail operation.
     * @callback module:api/VideosThumbnailsApi~deleteVideoThumbnailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a video thumbnail
     * @param {Number} pictureId The ID of the picture.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosThumbnailsApi~deleteVideoThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVideoThumbnail(pictureId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'pictureId' is set
      if (pictureId === undefined || pictureId === null) {
        throw new Error("Missing the required parameter 'pictureId' when calling deleteVideoThumbnail");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoThumbnail");
      }

      let pathParams = {
        'picture_id': pictureId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/videos/{video_id}/pictures/{picture_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editVideoThumbnail operation.
     * @callback module:api/VideosThumbnailsApi~editVideoThumbnailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a video thumbnail
     * @param {Number} pictureId The ID of the picture.
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditVideoThumbnailRequest} [editVideoThumbnailRequest] 
     * @param {module:api/VideosThumbnailsApi~editVideoThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    editVideoThumbnail(pictureId, videoId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editVideoThumbnailRequest'];
      // verify the required parameter 'pictureId' is set
      if (pictureId === undefined || pictureId === null) {
        throw new Error("Missing the required parameter 'pictureId' when calling editVideoThumbnail");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling editVideoThumbnail");
      }

      let pathParams = {
        'picture_id': pictureId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.picture+json'];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/videos/{video_id}/pictures/{picture_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoThumbnail operation.
     * @callback module:api/VideosThumbnailsApi~getVideoThumbnailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a video thumbnail
     * @param {Number} pictureId The ID of the picture.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosThumbnailsApi~getVideoThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    getVideoThumbnail(pictureId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'pictureId' is set
      if (pictureId === undefined || pictureId === null) {
        throw new Error("Missing the required parameter 'pictureId' when calling getVideoThumbnail");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoThumbnail");
      }

      let pathParams = {
        'picture_id': pictureId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/videos/{video_id}/pictures/{picture_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoThumbnails operation.
     * @callback module:api/VideosThumbnailsApi~getVideoThumbnailsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Picture>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the thumbnails of a video
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/VideosThumbnailsApi~getVideoThumbnailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Picture>}
     */
    getVideoThumbnails(videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoThumbnails");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = [Picture];
      return this.apiClient.callApi(
        '/videos/{video_id}/pictures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoThumbnailsAlt1 operation.
     * @callback module:api/VideosThumbnailsApi~getVideoThumbnailsAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Picture>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the thumbnails of a video
     * @param {Number} channelId The ID of the channel.
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/VideosThumbnailsApi~getVideoThumbnailsAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Picture>}
     */
    getVideoThumbnailsAlt1(channelId, videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getVideoThumbnailsAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoThumbnailsAlt1");
      }

      let pathParams = {
        'channel_id': channelId,
        'video_id': videoId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = [Picture];
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos/{video_id}/pictures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
