/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LegacyError from '../model/LegacyError';
import Picture from '../model/Picture';
import ReplaceAlbumLogoRequest from '../model/ReplaceAlbumLogoRequest';

/**
* AlbumsCustomAlbumLogos service.
* @module api/AlbumsCustomAlbumLogosApi
* @version 3.4
*/
export default class AlbumsCustomAlbumLogosApi {

    /**
    * Constructs a new AlbumsCustomAlbumLogosApi. 
    * @alias module:api/AlbumsCustomAlbumLogosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAlbumLogo operation.
     * @callback module:api/AlbumsCustomAlbumLogosApi~createAlbumLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a custom album logo
     * @param {Number} albumId The ID of the album.
     * @param {Number} userId The ID of the user.
     * @param {module:api/AlbumsCustomAlbumLogosApi~createAlbumLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    createAlbumLogo(albumId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling createAlbumLogo");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createAlbumLogo");
      }

      let pathParams = {
        'album_id': albumId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/logos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAlbumLogo operation.
     * @callback module:api/AlbumsCustomAlbumLogosApi~deleteAlbumLogoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a custom album logo
     * This method removes a custom logo from the specified album.
     * @param {Number} albumId The ID of the album.
     * @param {Number} logoId The ID of the custom logo.
     * @param {Number} userId The ID of the user.
     * @param {module:api/AlbumsCustomAlbumLogosApi~deleteAlbumLogoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAlbumLogo(albumId, logoId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling deleteAlbumLogo");
      }
      // verify the required parameter 'logoId' is set
      if (logoId === undefined || logoId === null) {
        throw new Error("Missing the required parameter 'logoId' when calling deleteAlbumLogo");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteAlbumLogo");
      }

      let pathParams = {
        'album_id': albumId,
        'logo_id': logoId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/logos/{logo_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbumLogo operation.
     * @callback module:api/AlbumsCustomAlbumLogosApi~getAlbumLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific custom album logo
     * @param {Number} albumId The ID of the album.
     * @param {Number} logoId The ID of the custom logo.
     * @param {Number} userId The ID of the user.
     * @param {module:api/AlbumsCustomAlbumLogosApi~getAlbumLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    getAlbumLogo(albumId, logoId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling getAlbumLogo");
      }
      // verify the required parameter 'logoId' is set
      if (logoId === undefined || logoId === null) {
        throw new Error("Missing the required parameter 'logoId' when calling getAlbumLogo");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAlbumLogo");
      }

      let pathParams = {
        'album_id': albumId,
        'logo_id': logoId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/logos/{logo_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbumLogos operation.
     * @callback module:api/AlbumsCustomAlbumLogosApi~getAlbumLogosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Picture>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the custom logos of an album
     * @param {Number} albumId The ID of the album.
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/AlbumsCustomAlbumLogosApi~getAlbumLogosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Picture>}
     */
    getAlbumLogos(albumId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling getAlbumLogos");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAlbumLogos");
      }

      let pathParams = {
        'album_id': albumId,
        'user_id': userId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = [Picture];
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/logos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceAlbumLogo operation.
     * @callback module:api/AlbumsCustomAlbumLogosApi~replaceAlbumLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a custom album logo
     * @param {Number} albumId The ID of the album.
     * @param {Number} logoId The ID of the custom logo.
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/ReplaceAlbumLogoRequest} [replaceAlbumLogoRequest] 
     * @param {module:api/AlbumsCustomAlbumLogosApi~replaceAlbumLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    replaceAlbumLogo(albumId, logoId, userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['replaceAlbumLogoRequest'];
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling replaceAlbumLogo");
      }
      // verify the required parameter 'logoId' is set
      if (logoId === undefined || logoId === null) {
        throw new Error("Missing the required parameter 'logoId' when calling replaceAlbumLogo");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling replaceAlbumLogo");
      }

      let pathParams = {
        'album_id': albumId,
        'logo_id': logoId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.picture+json'];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/logos/{logo_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
