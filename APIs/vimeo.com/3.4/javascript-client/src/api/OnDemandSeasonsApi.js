/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LegacyError from '../model/LegacyError';
import OnDemandSeason from '../model/OnDemandSeason';
import Video from '../model/Video';

/**
* OnDemandSeasons service.
* @module api/OnDemandSeasonsApi
* @version 3.4
*/
export default class OnDemandSeasonsApi {

    /**
    * Constructs a new OnDemandSeasonsApi. 
    * @alias module:api/OnDemandSeasonsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getVodSeason operation.
     * @callback module:api/OnDemandSeasonsApi~getVodSeasonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnDemandSeason} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific season on an On Demand page
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {Number} seasonId The ID of the season.
     * @param {module:api/OnDemandSeasonsApi~getVodSeasonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnDemandSeason}
     */
    getVodSeason(ondemandId, seasonId, callback) {
      let postBody = null;
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling getVodSeason");
      }
      // verify the required parameter 'seasonId' is set
      if (seasonId === undefined || seasonId === null) {
        throw new Error("Missing the required parameter 'seasonId' when calling getVodSeason");
      }

      let pathParams = {
        'ondemand_id': ondemandId,
        'season_id': seasonId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.season+json'];
      let returnType = OnDemandSeason;
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/seasons/{season_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVodSeasonVideos operation.
     * @callback module:api/OnDemandSeasonsApi~getVodSeasonVideosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos in a season on an On Demand page
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {Number} seasonId The ID of the season.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/OnDemandSeasonsApi~getVodSeasonVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getVodSeasonVideos(ondemandId, seasonId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling getVodSeasonVideos");
      }
      // verify the required parameter 'seasonId' is set
      if (seasonId === undefined || seasonId === null) {
        throw new Error("Missing the required parameter 'seasonId' when calling getVodSeasonVideos");
      }

      let pathParams = {
        'ondemand_id': ondemandId,
        'season_id': seasonId
      };
      let queryParams = {
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/seasons/{season_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVodSeasons operation.
     * @callback module:api/OnDemandSeasonsApi~getVodSeasonsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OnDemandSeason>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the seasons on an On Demand page
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/OnDemandSeasonsApi~getVodSeasonsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OnDemandSeason>}
     */
    getVodSeasons(ondemandId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling getVodSeasons");
      }

      let pathParams = {
        'ondemand_id': ondemandId
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.season+json'];
      let returnType = [OnDemandSeason];
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/seasons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
