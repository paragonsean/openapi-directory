/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LegacyError from '../model/LegacyError';
import Picture from '../model/Picture';
import ReplaceAlbumCustomThumbRequest from '../model/ReplaceAlbumCustomThumbRequest';

/**
* AlbumsCustomAlbumThumbnails service.
* @module api/AlbumsCustomAlbumThumbnailsApi
* @version 3.4
*/
export default class AlbumsCustomAlbumThumbnailsApi {

    /**
    * Constructs a new AlbumsCustomAlbumThumbnailsApi. 
    * @alias module:api/AlbumsCustomAlbumThumbnailsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAlbumCustomThumb operation.
     * @callback module:api/AlbumsCustomAlbumThumbnailsApi~createAlbumCustomThumbCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a custom uploaded thumbnail
     * @param {Number} albumId The ID of the album.
     * @param {Number} userId The ID of the user.
     * @param {module:api/AlbumsCustomAlbumThumbnailsApi~createAlbumCustomThumbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    createAlbumCustomThumb(albumId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling createAlbumCustomThumb");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createAlbumCustomThumb");
      }

      let pathParams = {
        'album_id': albumId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/custom_thumbnails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAlbumCustomThumbnail operation.
     * @callback module:api/AlbumsCustomAlbumThumbnailsApi~deleteAlbumCustomThumbnailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a custom uploaded album thumbnail
     * This method removes a custom uploaded thumbnail from the specified album.
     * @param {Number} albumId The ID of the album.
     * @param {Number} thumbnailId The ID of the custom thumbnail.
     * @param {Number} userId The ID of the user.
     * @param {module:api/AlbumsCustomAlbumThumbnailsApi~deleteAlbumCustomThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAlbumCustomThumbnail(albumId, thumbnailId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling deleteAlbumCustomThumbnail");
      }
      // verify the required parameter 'thumbnailId' is set
      if (thumbnailId === undefined || thumbnailId === null) {
        throw new Error("Missing the required parameter 'thumbnailId' when calling deleteAlbumCustomThumbnail");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteAlbumCustomThumbnail");
      }

      let pathParams = {
        'album_id': albumId,
        'thumbnail_id': thumbnailId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbumCustomThumbnail operation.
     * @callback module:api/AlbumsCustomAlbumThumbnailsApi~getAlbumCustomThumbnailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific custom uploaded album thumbnail
     * @param {Number} albumId The ID of the album.
     * @param {Number} thumbnailId The ID of the custom thumbnail.
     * @param {Number} userId The ID of the user.
     * @param {module:api/AlbumsCustomAlbumThumbnailsApi~getAlbumCustomThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    getAlbumCustomThumbnail(albumId, thumbnailId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling getAlbumCustomThumbnail");
      }
      // verify the required parameter 'thumbnailId' is set
      if (thumbnailId === undefined || thumbnailId === null) {
        throw new Error("Missing the required parameter 'thumbnailId' when calling getAlbumCustomThumbnail");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAlbumCustomThumbnail");
      }

      let pathParams = {
        'album_id': albumId,
        'thumbnail_id': thumbnailId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbumCustomThumbs operation.
     * @callback module:api/AlbumsCustomAlbumThumbnailsApi~getAlbumCustomThumbsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Picture>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the custom upload thumbnails of an album
     * @param {Number} albumId The ID of the album.
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/AlbumsCustomAlbumThumbnailsApi~getAlbumCustomThumbsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Picture>}
     */
    getAlbumCustomThumbs(albumId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling getAlbumCustomThumbs");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAlbumCustomThumbs");
      }

      let pathParams = {
        'album_id': albumId,
        'user_id': userId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = [Picture];
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/custom_thumbnails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceAlbumCustomThumb operation.
     * @callback module:api/AlbumsCustomAlbumThumbnailsApi~replaceAlbumCustomThumbCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a custom uploaded album thumbnail
     * @param {Number} albumId The ID of the album.
     * @param {Number} thumbnailId The ID of the custom thumbnail.
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/ReplaceAlbumCustomThumbRequest} [replaceAlbumCustomThumbRequest] 
     * @param {module:api/AlbumsCustomAlbumThumbnailsApi~replaceAlbumCustomThumbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    replaceAlbumCustomThumb(albumId, thumbnailId, userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['replaceAlbumCustomThumbRequest'];
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling replaceAlbumCustomThumb");
      }
      // verify the required parameter 'thumbnailId' is set
      if (thumbnailId === undefined || thumbnailId === null) {
        throw new Error("Missing the required parameter 'thumbnailId' when calling replaceAlbumCustomThumb");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling replaceAlbumCustomThumb");
      }

      let pathParams = {
        'album_id': albumId,
        'thumbnail_id': thumbnailId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.picture+json'];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
