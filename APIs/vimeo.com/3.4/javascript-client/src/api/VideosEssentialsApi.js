/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EditVideoRequest from '../model/EditVideoRequest';
import Error from '../model/Error';
import LegacyError from '../model/LegacyError';
import Video from '../model/Video';

/**
* VideosEssentials service.
* @module api/VideosEssentialsApi
* @version 3.4
*/
export default class VideosEssentialsApi {

    /**
    * Constructs a new VideosEssentialsApi. 
    * @alias module:api/VideosEssentialsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkIfUserOwnsVideo operation.
     * @callback module:api/VideosEssentialsApi~checkIfUserOwnsVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a user owns a video
     * @param {Number} userId The ID of the user.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosEssentialsApi~checkIfUserOwnsVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    checkIfUserOwnsVideo(userId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling checkIfUserOwnsVideo");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling checkIfUserOwnsVideo");
      }

      let pathParams = {
        'user_id': userId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/users/{user_id}/videos/{video_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkIfUserOwnsVideoAlt1 operation.
     * @callback module:api/VideosEssentialsApi~checkIfUserOwnsVideoAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a user owns a video
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosEssentialsApi~checkIfUserOwnsVideoAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    checkIfUserOwnsVideoAlt1(videoId, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling checkIfUserOwnsVideoAlt1");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/me/videos/{video_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVideo operation.
     * @callback module:api/VideosEssentialsApi~deleteVideoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a video
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosEssentialsApi~deleteVideoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVideo(videoId, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideo");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/videos/{video_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editVideo operation.
     * @callback module:api/VideosEssentialsApi~editVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a video
     * @param {Number} videoId The ID of the video.
     * @param {module:model/EditVideoRequest} editVideoRequest 
     * @param {module:api/VideosEssentialsApi~editVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    editVideo(videoId, editVideoRequest, callback) {
      let postBody = editVideoRequest;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling editVideo");
      }
      // verify the required parameter 'editVideoRequest' is set
      if (editVideoRequest === undefined || editVideoRequest === null) {
        throw new Error("Missing the required parameter 'editVideoRequest' when calling editVideo");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.video+json'];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/videos/{video_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppearances operation.
     * @callback module:api/VideosEssentialsApi~getAppearancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos in which a user appears
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/VideosEssentialsApi~getAppearancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getAppearances(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAppearances");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': opts['filter'],
        'filter_embeddable': opts['filterEmbeddable'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/users/{user_id}/appearances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppearancesAlt1 operation.
     * @callback module:api/VideosEssentialsApi~getAppearancesAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos in which a user appears
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/VideosEssentialsApi~getAppearancesAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getAppearancesAlt1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': opts['filter'],
        'filter_embeddable': opts['filterEmbeddable'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/me/appearances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideo operation.
     * @callback module:api/VideosEssentialsApi~getVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific video
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosEssentialsApi~getVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    getVideo(videoId, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideo");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/videos/{video_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideos operation.
     * @callback module:api/VideosEssentialsApi~getVideosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos that a user has uploaded
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {String} [containingUri] The page that contains the video URI. Only available when not paired with `query`.
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
     * @param {Boolean} [filterPlayable] Whether to filter by all playable videos or by all videos that are not  playable.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/VideosEssentialsApi~getVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getVideos(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getVideos");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'containing_uri': opts['containingUri'],
        'direction': opts['direction'],
        'filter': opts['filter'],
        'filter_embeddable': opts['filterEmbeddable'],
        'filter_playable': opts['filterPlayable'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/users/{user_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideosAlt1 operation.
     * @callback module:api/VideosEssentialsApi~getVideosAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos that a user has uploaded
     * @param {Object} opts Optional parameters
     * @param {String} [containingUri] The page that contains the video URI. Only available when not paired with `query`.
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
     * @param {Boolean} [filterPlayable] Whether to filter by all playable videos or by all videos that are not  playable.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/VideosEssentialsApi~getVideosAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getVideosAlt1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'containing_uri': opts['containingUri'],
        'direction': opts['direction'],
        'filter': opts['filter'],
        'filter_embeddable': opts['filterEmbeddable'],
        'filter_playable': opts['filterPlayable'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/me/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVideos operation.
     * @callback module:api/VideosEssentialsApi~searchVideosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for videos
     * @param {String} query Search query.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results. `CC` and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.
     * @param {String} [links] A comma-separated list of video URLs to find.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {String} [uris] The comma-separated list of videos to find.
     * @param {module:api/VideosEssentialsApi~searchVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    searchVideos(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchVideos");
      }

      let pathParams = {
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': opts['filter'],
        'links': opts['links'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': query,
        'sort': opts['sort'],
        'uris': opts['uris']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
