/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddVideoTagsRequest from '../model/AddVideoTagsRequest';
import LegacyError from '../model/LegacyError';
import Tag from '../model/Tag';
import Video from '../model/Video';

/**
* VideosTags service.
* @module api/VideosTagsApi
* @version 3.4
*/
export default class VideosTagsApi {

    /**
    * Constructs a new VideosTagsApi. 
    * @alias module:api/VideosTagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVideoTag operation.
     * @callback module:api/VideosTagsApi~addVideoTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a specific tag to a video
     * @param {Number} videoId The ID of the video.
     * @param {String} word The tag word.
     * @param {module:api/VideosTagsApi~addVideoTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    addVideoTag(videoId, word, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoTag");
      }
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling addVideoTag");
      }

      let pathParams = {
        'video_id': videoId,
        'word': word
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.tag+json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/videos/{video_id}/tags/{word}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVideoTags operation.
     * @callback module:api/VideosTagsApi~addVideoTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a list of tags to a video
     * @param {Number} videoId The ID of the video.
     * @param {module:model/AddVideoTagsRequest} addVideoTagsRequest 
     * @param {module:api/VideosTagsApi~addVideoTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Tag>}
     */
    addVideoTags(videoId, addVideoTagsRequest, callback) {
      let postBody = addVideoTagsRequest;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoTags");
      }
      // verify the required parameter 'addVideoTagsRequest' is set
      if (addVideoTagsRequest === undefined || addVideoTagsRequest === null) {
        throw new Error("Missing the required parameter 'addVideoTagsRequest' when calling addVideoTags");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.tag+json'];
      let accepts = ['application/vnd.vimeo.tag+json'];
      let returnType = [Tag];
      return this.apiClient.callApi(
        '/videos/{video_id}/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkVideoForTag operation.
     * @callback module:api/VideosTagsApi~checkVideoForTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a tag has been added to a video
     * @param {Number} videoId The ID of the video.
     * @param {String} word The tag word.
     * @param {module:api/VideosTagsApi~checkVideoForTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    checkVideoForTag(videoId, word, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling checkVideoForTag");
      }
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling checkVideoForTag");
      }

      let pathParams = {
        'video_id': videoId,
        'word': word
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.tag+json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/videos/{video_id}/tags/{word}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVideoTag operation.
     * @callback module:api/VideosTagsApi~deleteVideoTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a tag from a video
     * @param {Number} videoId The ID of the video.
     * @param {String} word The tag word.
     * @param {module:api/VideosTagsApi~deleteVideoTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVideoTag(videoId, word, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoTag");
      }
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling deleteVideoTag");
      }

      let pathParams = {
        'video_id': videoId,
        'word': word
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.tag+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/videos/{video_id}/tags/{word}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoTags operation.
     * @callback module:api/VideosTagsApi~getVideoTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the tags of a video
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosTagsApi~getVideoTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Tag>}
     */
    getVideoTags(videoId, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoTags");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.tag+json'];
      let returnType = [Tag];
      return this.apiClient.callApi(
        '/videos/{video_id}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideosWithTag operation.
     * @callback module:api/VideosTagsApi~getVideosWithTagCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos with a specific tag
     * @param {String} word The tag word.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/VideosTagsApi~getVideosWithTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getVideosWithTag(word, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling getVideosWithTag");
      }

      let pathParams = {
        'word': word
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/tags/{word}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
