/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Auth from '../model/Auth';
import AuthError from '../model/AuthError';
import ClientAuthRequest from '../model/ClientAuthRequest';
import ConvertAccessTokenRequest from '../model/ConvertAccessTokenRequest';
import Error from '../model/Error';
import ExchangeAuthCodeRequest from '../model/ExchangeAuthCodeRequest';
import LegacyError from '../model/LegacyError';

/**
* AuthenticationExtrasEssentials service.
* @module api/AuthenticationExtrasEssentialsApi
* @version 3.4
*/
export default class AuthenticationExtrasEssentialsApi {

    /**
    * Constructs a new AuthenticationExtrasEssentialsApi. 
    * @alias module:api/AuthenticationExtrasEssentialsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clientAuth operation.
     * @callback module:api/AuthenticationExtrasEssentialsApi~clientAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Auth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize a client with OAuth
     * For information on utilizing OAuth client authorization, see our [authentication](/api/authentication#generate-unauthenticated-tokens) documentation or the [Client Credentials Grant](https://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.4) section of the [OAuth spec](https://tools.ietf.org/html/draft-ietf-oauth-v2-31.
     * @param {module:model/ClientAuthRequest} clientAuthRequest 
     * @param {module:api/AuthenticationExtrasEssentialsApi~clientAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Auth}
     */
    clientAuth(clientAuthRequest, callback) {
      let postBody = clientAuthRequest;
      // verify the required parameter 'clientAuthRequest' is set
      if (clientAuthRequest === undefined || clientAuthRequest === null) {
        throw new Error("Missing the required parameter 'clientAuthRequest' when calling clientAuth");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.auth+json'];
      let accepts = ['application/vnd.vimeo.auth+json'];
      let returnType = Auth;
      return this.apiClient.callApi(
        '/oauth/authorize/client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the convertAccessToken operation.
     * @callback module:api/AuthenticationExtrasEssentialsApi~convertAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Auth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert OAuth 1 access tokens to OAuth 2 access tokens
     * @param {module:model/ConvertAccessTokenRequest} convertAccessTokenRequest 
     * @param {module:api/AuthenticationExtrasEssentialsApi~convertAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Auth}
     */
    convertAccessToken(convertAccessTokenRequest, callback) {
      let postBody = convertAccessTokenRequest;
      // verify the required parameter 'convertAccessTokenRequest' is set
      if (convertAccessTokenRequest === undefined || convertAccessTokenRequest === null) {
        throw new Error("Missing the required parameter 'convertAccessTokenRequest' when calling convertAccessToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.auth+json'];
      let accepts = ['application/vnd.vimeo.auth+json'];
      let returnType = Auth;
      return this.apiClient.callApi(
        '/oauth/authorize/vimeo_oauth1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteToken operation.
     * @callback module:api/AuthenticationExtrasEssentialsApi~deleteTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Auth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke the current access token
     * This method enables an app to notify the API that it is done with a token and that the token can be discarded.
     * @param {module:api/AuthenticationExtrasEssentialsApi~deleteTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Auth}
     */
    deleteToken(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.auth+json'];
      let returnType = Auth;
      return this.apiClient.callApi(
        '/tokens', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exchangeAuthCode operation.
     * @callback module:api/AuthenticationExtrasEssentialsApi~exchangeAuthCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Auth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchange an authorization code for an access token
     * @param {module:model/ExchangeAuthCodeRequest} exchangeAuthCodeRequest 
     * @param {module:api/AuthenticationExtrasEssentialsApi~exchangeAuthCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Auth}
     */
    exchangeAuthCode(exchangeAuthCodeRequest, callback) {
      let postBody = exchangeAuthCodeRequest;
      // verify the required parameter 'exchangeAuthCodeRequest' is set
      if (exchangeAuthCodeRequest === undefined || exchangeAuthCodeRequest === null) {
        throw new Error("Missing the required parameter 'exchangeAuthCodeRequest' when calling exchangeAuthCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.auth+json'];
      let accepts = ['application/vnd.vimeo.auth+json'];
      let returnType = Auth;
      return this.apiClient.callApi(
        '/oauth/access_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyToken operation.
     * @callback module:api/AuthenticationExtrasEssentialsApi~verifyTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Auth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify an OAuth 2 token
     * @param {module:api/AuthenticationExtrasEssentialsApi~verifyTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Auth}
     */
    verifyToken(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.auth+json'];
      let returnType = Auth;
      return this.apiClient.callApi(
        '/oauth/verify', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
