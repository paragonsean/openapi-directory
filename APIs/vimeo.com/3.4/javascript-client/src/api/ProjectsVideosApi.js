/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Video from '../model/Video';

/**
* ProjectsVideos service.
* @module api/ProjectsVideosApi
* @version 3.4
*/
export default class ProjectsVideosApi {

    /**
    * Constructs a new ProjectsVideosApi. 
    * @alias module:api/ProjectsVideosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVideoToProject operation.
     * @callback module:api/ProjectsVideosApi~addVideoToProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a specific video to a project
     * This method adds a single video to the specified project.
     * @param {Number} projectId The ID of the project.
     * @param {Number} userId The ID of the user.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/ProjectsVideosApi~addVideoToProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addVideoToProject(projectId, userId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling addVideoToProject");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addVideoToProject");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoToProject");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/projects/{project_id}/videos/{video_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVideoToProjectAlt1 operation.
     * @callback module:api/ProjectsVideosApi~addVideoToProjectAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a specific video to a project
     * This method adds a single video to the specified project.
     * @param {Number} projectId The ID of the project.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/ProjectsVideosApi~addVideoToProjectAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    addVideoToProjectAlt1(projectId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling addVideoToProjectAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoToProjectAlt1");
      }

      let pathParams = {
        'project_id': projectId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/projects/{project_id}/videos/{video_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVideosToProject operation.
     * @callback module:api/ProjectsVideosApi~addVideosToProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a list of videos to a project
     * This method adds multiple videos to the specified project.
     * @param {Number} projectId The ID of the project.
     * @param {Number} userId The ID of the user.
     * @param {String} uris A comma-separated list of video URIs to add.
     * @param {module:api/ProjectsVideosApi~addVideosToProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addVideosToProject(projectId, userId, uris, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling addVideosToProject");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addVideosToProject");
      }
      // verify the required parameter 'uris' is set
      if (uris === undefined || uris === null) {
        throw new Error("Missing the required parameter 'uris' when calling addVideosToProject");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'uris': uris
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/projects/{project_id}/videos', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVideosToProjectAlt1 operation.
     * @callback module:api/ProjectsVideosApi~addVideosToProjectAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a list of videos to a project
     * This method adds multiple videos to the specified project.
     * @param {Number} projectId The ID of the project.
     * @param {String} uris A comma-separated list of video URIs to add.
     * @param {module:api/ProjectsVideosApi~addVideosToProjectAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    addVideosToProjectAlt1(projectId, uris, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling addVideosToProjectAlt1");
      }
      // verify the required parameter 'uris' is set
      if (uris === undefined || uris === null) {
        throw new Error("Missing the required parameter 'uris' when calling addVideosToProjectAlt1");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
        'uris': uris
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/projects/{project_id}/videos', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectVideos operation.
     * @callback module:api/ProjectsVideosApi~getProjectVideosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos in a project
     * This method gets all the videos that belong to the specified project.
     * @param {Number} projectId The ID of the project.
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/ProjectsVideosApi~getProjectVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getProjectVideos(projectId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectVideos");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getProjectVideos");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/users/{user_id}/projects/{project_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectVideosAlt1 operation.
     * @callback module:api/ProjectsVideosApi~getProjectVideosAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos in a project
     * This method gets all the videos that belong to the specified project.
     * @param {Number} projectId The ID of the project.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/ProjectsVideosApi~getProjectVideosAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getProjectVideosAlt1(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectVideosAlt1");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/me/projects/{project_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVideoFromProject operation.
     * @callback module:api/ProjectsVideosApi~removeVideoFromProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a specific video from a project
     * This method removes a single video from the specified project.
     * @param {Number} projectId The ID of the project.
     * @param {Number} userId The ID of the user.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/ProjectsVideosApi~removeVideoFromProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeVideoFromProject(projectId, userId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling removeVideoFromProject");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeVideoFromProject");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling removeVideoFromProject");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/projects/{project_id}/videos/{video_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVideoFromProjectAlt1 operation.
     * @callback module:api/ProjectsVideosApi~removeVideoFromProjectAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a specific video from a project
     * This method removes a single video from the specified project.
     * @param {Number} projectId The ID of the project.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/ProjectsVideosApi~removeVideoFromProjectAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    removeVideoFromProjectAlt1(projectId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling removeVideoFromProjectAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling removeVideoFromProjectAlt1");
      }

      let pathParams = {
        'project_id': projectId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/projects/{project_id}/videos/{video_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVideosFromProject operation.
     * @callback module:api/ProjectsVideosApi~removeVideosFromProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a list of videos from a project
     * This method removed multiple videos from the specified project.
     * @param {Number} projectId The ID of the project.
     * @param {Number} userId The ID of the user.
     * @param {String} uris A comma-separated list of the video URIs to remove.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [shouldDeleteClips] Whether to delete the videos when removing them from the project.
     * @param {module:api/ProjectsVideosApi~removeVideosFromProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeVideosFromProject(projectId, userId, uris, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling removeVideosFromProject");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeVideosFromProject");
      }
      // verify the required parameter 'uris' is set
      if (uris === undefined || uris === null) {
        throw new Error("Missing the required parameter 'uris' when calling removeVideosFromProject");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'should_delete_clips': opts['shouldDeleteClips'],
        'uris': uris
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/projects/{project_id}/videos', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVideosFromProjectAlt1 operation.
     * @callback module:api/ProjectsVideosApi~removeVideosFromProjectAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a list of videos from a project
     * This method removed multiple videos from the specified project.
     * @param {Number} projectId The ID of the project.
     * @param {String} uris A comma-separated list of the video URIs to remove.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [shouldDeleteClips] Whether to delete the videos when removing them from the project.
     * @param {module:api/ProjectsVideosApi~removeVideosFromProjectAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    removeVideosFromProjectAlt1(projectId, uris, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling removeVideosFromProjectAlt1");
      }
      // verify the required parameter 'uris' is set
      if (uris === undefined || uris === null) {
        throw new Error("Missing the required parameter 'uris' when calling removeVideosFromProjectAlt1");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
        'should_delete_clips': opts['shouldDeleteClips'],
        'uris': uris
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/projects/{project_id}/videos', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
