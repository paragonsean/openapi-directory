/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Group from '../model/Group';
import LegacyError from '../model/LegacyError';
import User from '../model/User';

/**
* GroupsUsers service.
* @module api/GroupsUsersApi
* @version 3.4
*/
export default class GroupsUsersApi {

    /**
    * Constructs a new GroupsUsersApi. 
    * @alias module:api/GroupsUsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkIfUserJoinedGroup operation.
     * @callback module:api/GroupsUsersApi~checkIfUserJoinedGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a user has joined a group
     * @param {Number} groupId The ID of the group.
     * @param {Number} userId The ID of the user.
     * @param {module:api/GroupsUsersApi~checkIfUserJoinedGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    checkIfUserJoinedGroup(groupId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling checkIfUserJoinedGroup");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling checkIfUserJoinedGroup");
      }

      let pathParams = {
        'group_id': groupId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/groups/{group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkIfUserJoinedGroupAlt1 operation.
     * @callback module:api/GroupsUsersApi~checkIfUserJoinedGroupAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a user has joined a group
     * @param {Number} groupId The ID of the group.
     * @param {module:api/GroupsUsersApi~checkIfUserJoinedGroupAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    checkIfUserJoinedGroupAlt1(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling checkIfUserJoinedGroupAlt1");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/groups/{group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupMembers operation.
     * @callback module:api/GroupsUsersApi~getGroupMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the members of a group
     * @param {Number} groupId The ID of the group.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/GroupsUsersApi~getGroupMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    getGroupMembers(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupMembers");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/groups/{group_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserGroups operation.
     * @callback module:api/GroupsUsersApi~getUserGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the groups that a user has joined
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/GroupsUsersApi~getUserGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    getUserGroups(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserGroups");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.group+json'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/users/{user_id}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserGroupsAlt1 operation.
     * @callback module:api/GroupsUsersApi~getUserGroupsAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the groups that a user has joined
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/GroupsUsersApi~getUserGroupsAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    getUserGroupsAlt1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.group+json'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/me/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
