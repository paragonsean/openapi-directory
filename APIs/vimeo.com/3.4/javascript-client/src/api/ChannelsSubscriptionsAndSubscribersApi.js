/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LegacyError from '../model/LegacyError';
import User from '../model/User';

/**
* ChannelsSubscriptionsAndSubscribers service.
* @module api/ChannelsSubscriptionsAndSubscribersApi
* @version 3.4
*/
export default class ChannelsSubscriptionsAndSubscribersApi {

    /**
    * Constructs a new ChannelsSubscriptionsAndSubscribersApi. 
    * @alias module:api/ChannelsSubscriptionsAndSubscribersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkIfUserSubscribedToChannel operation.
     * @callback module:api/ChannelsSubscriptionsAndSubscribersApi~checkIfUserSubscribedToChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a user follows a channel
     * @param {Number} channelId The ID of the channel.
     * @param {Number} userId The ID of the user.
     * @param {module:api/ChannelsSubscriptionsAndSubscribersApi~checkIfUserSubscribedToChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    checkIfUserSubscribedToChannel(channelId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling checkIfUserSubscribedToChannel");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling checkIfUserSubscribedToChannel");
      }

      let pathParams = {
        'channel_id': channelId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/channels/{channel_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkIfUserSubscribedToChannelAlt1 operation.
     * @callback module:api/ChannelsSubscriptionsAndSubscribersApi~checkIfUserSubscribedToChannelAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a user follows a channel
     * @param {Number} channelId The ID of the channel.
     * @param {module:api/ChannelsSubscriptionsAndSubscribersApi~checkIfUserSubscribedToChannelAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    checkIfUserSubscribedToChannelAlt1(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling checkIfUserSubscribedToChannelAlt1");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/channels/{channel_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelSubscribers operation.
     * @callback module:api/ChannelsSubscriptionsAndSubscribersApi~getChannelSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the followers of a channel
     * @param {Number} channelId The ID of the channel.
     * @param {module:model/String} filter The attribute by which to filter the results.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/ChannelsSubscriptionsAndSubscribersApi~getChannelSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    getChannelSubscribers(channelId, filter, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelSubscribers");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getChannelSubscribers");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': filter,
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/channels/{channel_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeToChannel operation.
     * @callback module:api/ChannelsSubscriptionsAndSubscribersApi~subscribeToChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe a user to a specific channel
     * @param {Number} channelId The ID of the channel.
     * @param {Number} userId The ID of the user.
     * @param {module:api/ChannelsSubscriptionsAndSubscribersApi~subscribeToChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscribeToChannel(channelId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling subscribeToChannel");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling subscribeToChannel");
      }

      let pathParams = {
        'channel_id': channelId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/channels/{channel_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeToChannelAlt1 operation.
     * @callback module:api/ChannelsSubscriptionsAndSubscribersApi~subscribeToChannelAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe a user to a specific channel
     * @param {Number} channelId The ID of the channel.
     * @param {module:api/ChannelsSubscriptionsAndSubscribersApi~subscribeToChannelAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    subscribeToChannelAlt1(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling subscribeToChannelAlt1");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/channels/{channel_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribeFromChannel operation.
     * @callback module:api/ChannelsSubscriptionsAndSubscribersApi~unsubscribeFromChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe a user from a specific channel
     * @param {Number} channelId The ID of the channel.
     * @param {Number} userId The ID of the user.
     * @param {module:api/ChannelsSubscriptionsAndSubscribersApi~unsubscribeFromChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unsubscribeFromChannel(channelId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling unsubscribeFromChannel");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling unsubscribeFromChannel");
      }

      let pathParams = {
        'channel_id': channelId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/channels/{channel_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribeFromChannelAlt1 operation.
     * @callback module:api/ChannelsSubscriptionsAndSubscribersApi~unsubscribeFromChannelAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe a user from a specific channel
     * @param {Number} channelId The ID of the channel.
     * @param {module:api/ChannelsSubscriptionsAndSubscribersApi~unsubscribeFromChannelAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    unsubscribeFromChannelAlt1(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling unsubscribeFromChannelAlt1");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/channels/{channel_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
