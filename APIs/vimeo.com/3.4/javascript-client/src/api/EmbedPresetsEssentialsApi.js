/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EditEmbedPresetAlt1Request from '../model/EditEmbedPresetAlt1Request';
import LegacyError from '../model/LegacyError';
import Presets from '../model/Presets';

/**
* EmbedPresetsEssentials service.
* @module api/EmbedPresetsEssentialsApi
* @version 3.4
*/
export default class EmbedPresetsEssentialsApi {

    /**
    * Constructs a new EmbedPresetsEssentialsApi. 
    * @alias module:api/EmbedPresetsEssentialsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the editEmbedPreset operation.
     * @callback module:api/EmbedPresetsEssentialsApi~editEmbedPresetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Presets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an embed preset
     * @param {Number} presetId The ID of the preset.
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditEmbedPresetAlt1Request} [editEmbedPresetAlt1Request] 
     * @param {module:api/EmbedPresetsEssentialsApi~editEmbedPresetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Presets}
     */
    editEmbedPreset(presetId, userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editEmbedPresetAlt1Request'];
      // verify the required parameter 'presetId' is set
      if (presetId === undefined || presetId === null) {
        throw new Error("Missing the required parameter 'presetId' when calling editEmbedPreset");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling editEmbedPreset");
      }

      let pathParams = {
        'preset_id': presetId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.preset+json'];
      let accepts = ['application/vnd.vimeo.preset+json'];
      let returnType = Presets;
      return this.apiClient.callApi(
        '/users/{user_id}/presets/{preset_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editEmbedPresetAlt1 operation.
     * @callback module:api/EmbedPresetsEssentialsApi~editEmbedPresetAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Presets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an embed preset
     * @param {Number} presetId The ID of the preset.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditEmbedPresetAlt1Request} [editEmbedPresetAlt1Request] 
     * @param {module:api/EmbedPresetsEssentialsApi~editEmbedPresetAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Presets}
     */
    editEmbedPresetAlt1(presetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editEmbedPresetAlt1Request'];
      // verify the required parameter 'presetId' is set
      if (presetId === undefined || presetId === null) {
        throw new Error("Missing the required parameter 'presetId' when calling editEmbedPresetAlt1");
      }

      let pathParams = {
        'preset_id': presetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.preset+json'];
      let accepts = ['application/vnd.vimeo.preset+json'];
      let returnType = Presets;
      return this.apiClient.callApi(
        '/me/presets/{preset_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmbedPreset operation.
     * @callback module:api/EmbedPresetsEssentialsApi~getEmbedPresetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Presets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific embed preset
     * @param {Number} presetId The ID of the preset.
     * @param {Number} userId The ID of the user.
     * @param {module:api/EmbedPresetsEssentialsApi~getEmbedPresetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Presets}
     */
    getEmbedPreset(presetId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'presetId' is set
      if (presetId === undefined || presetId === null) {
        throw new Error("Missing the required parameter 'presetId' when calling getEmbedPreset");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getEmbedPreset");
      }

      let pathParams = {
        'preset_id': presetId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.preset+json'];
      let returnType = Presets;
      return this.apiClient.callApi(
        '/users/{user_id}/presets/{preset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmbedPresetAlt1 operation.
     * @callback module:api/EmbedPresetsEssentialsApi~getEmbedPresetAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Presets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific embed preset
     * @param {Number} presetId The ID of the preset.
     * @param {module:api/EmbedPresetsEssentialsApi~getEmbedPresetAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Presets}
     */
    getEmbedPresetAlt1(presetId, callback) {
      let postBody = null;
      // verify the required parameter 'presetId' is set
      if (presetId === undefined || presetId === null) {
        throw new Error("Missing the required parameter 'presetId' when calling getEmbedPresetAlt1");
      }

      let pathParams = {
        'preset_id': presetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.preset+json'];
      let returnType = Presets;
      return this.apiClient.callApi(
        '/me/presets/{preset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmbedPresets operation.
     * @callback module:api/EmbedPresetsEssentialsApi~getEmbedPresetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Presets>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the embed presets that a user has created
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/EmbedPresetsEssentialsApi~getEmbedPresetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Presets>}
     */
    getEmbedPresets(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getEmbedPresets");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.preset+json'];
      let returnType = [Presets];
      return this.apiClient.callApi(
        '/users/{user_id}/presets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmbedPresetsAlt1 operation.
     * @callback module:api/EmbedPresetsEssentialsApi~getEmbedPresetsAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Presets>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the embed presets that a user has created
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/EmbedPresetsEssentialsApi~getEmbedPresetsAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Presets>}
     */
    getEmbedPresetsAlt1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.preset+json'];
      let returnType = [Presets];
      return this.apiClient.callApi(
        '/me/presets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
