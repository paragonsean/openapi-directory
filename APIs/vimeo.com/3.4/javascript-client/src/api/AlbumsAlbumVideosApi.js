/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Album from '../model/Album';
import Error from '../model/Error';
import LegacyError from '../model/LegacyError';
import ReplaceVideosInAlbumAlt1Request from '../model/ReplaceVideosInAlbumAlt1Request';
import SetVideoAsAlbumThumbnailAlt1Request from '../model/SetVideoAsAlbumThumbnailAlt1Request';
import Video from '../model/Video';

/**
* AlbumsAlbumVideos service.
* @module api/AlbumsAlbumVideosApi
* @version 3.4
*/
export default class AlbumsAlbumVideosApi {

    /**
    * Constructs a new AlbumsAlbumVideosApi. 
    * @alias module:api/AlbumsAlbumVideosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVideoToAlbum operation.
     * @callback module:api/AlbumsAlbumVideosApi~addVideoToAlbumCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a specific video to an album
     * @param {Number} albumId The ID of the album.
     * @param {Number} userId The ID of the user.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/AlbumsAlbumVideosApi~addVideoToAlbumCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addVideoToAlbum(albumId, userId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling addVideoToAlbum");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addVideoToAlbum");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoToAlbum");
      }

      let pathParams = {
        'album_id': albumId,
        'user_id': userId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/videos/{video_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVideoToAlbumAlt1 operation.
     * @callback module:api/AlbumsAlbumVideosApi~addVideoToAlbumAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a specific video to an album
     * @param {Number} albumId The ID of the album.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/AlbumsAlbumVideosApi~addVideoToAlbumAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    addVideoToAlbumAlt1(albumId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling addVideoToAlbumAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoToAlbumAlt1");
      }

      let pathParams = {
        'album_id': albumId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/albums/{album_id}/videos/{video_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbumVideo operation.
     * @callback module:api/AlbumsAlbumVideosApi~getAlbumVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific video in an album
     * This method gets a single video from an album. You can use this method to determine whether the album contains the specified video.
     * @param {Number} albumId The ID of the album.
     * @param {Number} userId The ID of the user.
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {String} [password] The password of the album.
     * @param {module:api/AlbumsAlbumVideosApi~getAlbumVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    getAlbumVideo(albumId, userId, videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling getAlbumVideo");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAlbumVideo");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getAlbumVideo");
      }

      let pathParams = {
        'album_id': albumId,
        'user_id': userId,
        'video_id': videoId
      };
      let queryParams = {
        'password': opts['password']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/videos/{video_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbumVideoAlt1 operation.
     * @callback module:api/AlbumsAlbumVideosApi~getAlbumVideoAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific video in an album
     * This method gets a single video from an album. You can use this method to determine whether the album contains the specified video.
     * @param {Number} albumId The ID of the album.
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {String} [password] The password of the album.
     * @param {module:api/AlbumsAlbumVideosApi~getAlbumVideoAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    getAlbumVideoAlt1(albumId, videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling getAlbumVideoAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getAlbumVideoAlt1");
      }

      let pathParams = {
        'album_id': albumId,
        'video_id': videoId
      };
      let queryParams = {
        'password': opts['password']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/me/albums/{album_id}/videos/{video_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbumVideos operation.
     * @callback module:api/AlbumsAlbumVideosApi~getAlbumVideosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos in an album
     * @param {Number} albumId The ID of the album.
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {String} [containingUri] The page containing the video URI.
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
     * @param {Number} [page] The page number of the results to show.
     * @param {String} [password] The password of the album.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {Boolean} [weakSearch] Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name.
     * @param {module:api/AlbumsAlbumVideosApi~getAlbumVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getAlbumVideos(albumId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling getAlbumVideos");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAlbumVideos");
      }

      let pathParams = {
        'album_id': albumId,
        'user_id': userId
      };
      let queryParams = {
        'containing_uri': opts['containingUri'],
        'direction': opts['direction'],
        'filter': opts['filter'],
        'filter_embeddable': opts['filterEmbeddable'],
        'page': opts['page'],
        'password': opts['password'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort'],
        'weak_search': opts['weakSearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbumVideosAlt1 operation.
     * @callback module:api/AlbumsAlbumVideosApi~getAlbumVideosAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos in an album
     * @param {Number} albumId The ID of the album.
     * @param {Object} opts Optional parameters
     * @param {String} [containingUri] The page containing the video URI.
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
     * @param {Number} [page] The page number of the results to show.
     * @param {String} [password] The password of the album.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {Boolean} [weakSearch] Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name.
     * @param {module:api/AlbumsAlbumVideosApi~getAlbumVideosAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getAlbumVideosAlt1(albumId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling getAlbumVideosAlt1");
      }

      let pathParams = {
        'album_id': albumId
      };
      let queryParams = {
        'containing_uri': opts['containingUri'],
        'direction': opts['direction'],
        'filter': opts['filter'],
        'filter_embeddable': opts['filterEmbeddable'],
        'page': opts['page'],
        'password': opts['password'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort'],
        'weak_search': opts['weakSearch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/me/albums/{album_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVideoFromAlbum operation.
     * @callback module:api/AlbumsAlbumVideosApi~removeVideoFromAlbumCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a video from an album
     * @param {Number} albumId The ID of the album.
     * @param {Number} userId The ID of the user.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/AlbumsAlbumVideosApi~removeVideoFromAlbumCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeVideoFromAlbum(albumId, userId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling removeVideoFromAlbum");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeVideoFromAlbum");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling removeVideoFromAlbum");
      }

      let pathParams = {
        'album_id': albumId,
        'user_id': userId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/videos/{video_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVideoFromAlbumAlt1 operation.
     * @callback module:api/AlbumsAlbumVideosApi~removeVideoFromAlbumAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a video from an album
     * @param {Number} albumId The ID of the album.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/AlbumsAlbumVideosApi~removeVideoFromAlbumAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    removeVideoFromAlbumAlt1(albumId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling removeVideoFromAlbumAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling removeVideoFromAlbumAlt1");
      }

      let pathParams = {
        'album_id': albumId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/albums/{album_id}/videos/{video_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceVideosInAlbum operation.
     * @callback module:api/AlbumsAlbumVideosApi~replaceVideosInAlbumCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace all the videos in an album
     * This method replaces all the existing videos in an album with one or more videos.
     * @param {Number} albumId The ID of the album.
     * @param {Number} userId The ID of the user.
     * @param {module:model/ReplaceVideosInAlbumAlt1Request} replaceVideosInAlbumAlt1Request 
     * @param {module:api/AlbumsAlbumVideosApi~replaceVideosInAlbumCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replaceVideosInAlbum(albumId, userId, replaceVideosInAlbumAlt1Request, callback) {
      let postBody = replaceVideosInAlbumAlt1Request;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling replaceVideosInAlbum");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling replaceVideosInAlbum");
      }
      // verify the required parameter 'replaceVideosInAlbumAlt1Request' is set
      if (replaceVideosInAlbumAlt1Request === undefined || replaceVideosInAlbumAlt1Request === null) {
        throw new Error("Missing the required parameter 'replaceVideosInAlbumAlt1Request' when calling replaceVideosInAlbum");
      }

      let pathParams = {
        'album_id': albumId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/videos', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceVideosInAlbumAlt1 operation.
     * @callback module:api/AlbumsAlbumVideosApi~replaceVideosInAlbumAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace all the videos in an album
     * This method replaces all the existing videos in an album with one or more videos.
     * @param {Number} albumId The ID of the album.
     * @param {module:model/ReplaceVideosInAlbumAlt1Request} replaceVideosInAlbumAlt1Request 
     * @param {module:api/AlbumsAlbumVideosApi~replaceVideosInAlbumAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    replaceVideosInAlbumAlt1(albumId, replaceVideosInAlbumAlt1Request, callback) {
      let postBody = replaceVideosInAlbumAlt1Request;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling replaceVideosInAlbumAlt1");
      }
      // verify the required parameter 'replaceVideosInAlbumAlt1Request' is set
      if (replaceVideosInAlbumAlt1Request === undefined || replaceVideosInAlbumAlt1Request === null) {
        throw new Error("Missing the required parameter 'replaceVideosInAlbumAlt1Request' when calling replaceVideosInAlbumAlt1");
      }

      let pathParams = {
        'album_id': albumId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/albums/{album_id}/videos', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setVideoAsAlbumThumbnail operation.
     * @callback module:api/AlbumsAlbumVideosApi~setVideoAsAlbumThumbnailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Album} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a video as the album thumbnail
     * @param {Number} albumId The ID of the album.
     * @param {Number} userId The ID of the user.
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetVideoAsAlbumThumbnailAlt1Request} [setVideoAsAlbumThumbnailAlt1Request] 
     * @param {module:api/AlbumsAlbumVideosApi~setVideoAsAlbumThumbnailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Album}
     */
    setVideoAsAlbumThumbnail(albumId, userId, videoId, opts, callback) {
      opts = opts || {};
      let postBody = opts['setVideoAsAlbumThumbnailAlt1Request'];
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling setVideoAsAlbumThumbnail");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setVideoAsAlbumThumbnail");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling setVideoAsAlbumThumbnail");
      }

      let pathParams = {
        'album_id': albumId,
        'user_id': userId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Album;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setVideoAsAlbumThumbnailAlt1 operation.
     * @callback module:api/AlbumsAlbumVideosApi~setVideoAsAlbumThumbnailAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Album} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a video as the album thumbnail
     * @param {Number} albumId The ID of the album.
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetVideoAsAlbumThumbnailAlt1Request} [setVideoAsAlbumThumbnailAlt1Request] 
     * @param {module:api/AlbumsAlbumVideosApi~setVideoAsAlbumThumbnailAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Album}
     */
    setVideoAsAlbumThumbnailAlt1(albumId, videoId, opts, callback) {
      opts = opts || {};
      let postBody = opts['setVideoAsAlbumThumbnailAlt1Request'];
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling setVideoAsAlbumThumbnailAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling setVideoAsAlbumThumbnailAlt1");
      }

      let pathParams = {
        'album_id': albumId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Album;
      return this.apiClient.callApi(
        '/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
