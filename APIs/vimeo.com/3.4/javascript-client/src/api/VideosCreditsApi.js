/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddVideoCreditAlt1Request from '../model/AddVideoCreditAlt1Request';
import Credit from '../model/Credit';
import EditVideoCreditRequest from '../model/EditVideoCreditRequest';
import LegacyError from '../model/LegacyError';

/**
* VideosCredits service.
* @module api/VideosCreditsApi
* @version 3.4
*/
export default class VideosCreditsApi {

    /**
    * Constructs a new VideosCreditsApi. 
    * @alias module:api/VideosCreditsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVideoCredit operation.
     * @callback module:api/VideosCreditsApi~addVideoCreditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Credit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Credit a user in a video
     * @param {Number} videoId The ID of the video.
     * @param {module:model/AddVideoCreditAlt1Request} addVideoCreditAlt1Request 
     * @param {module:api/VideosCreditsApi~addVideoCreditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credit}
     */
    addVideoCredit(videoId, addVideoCreditAlt1Request, callback) {
      let postBody = addVideoCreditAlt1Request;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoCredit");
      }
      // verify the required parameter 'addVideoCreditAlt1Request' is set
      if (addVideoCreditAlt1Request === undefined || addVideoCreditAlt1Request === null) {
        throw new Error("Missing the required parameter 'addVideoCreditAlt1Request' when calling addVideoCredit");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.credit+json'];
      let accepts = ['application/vnd.vimeo.credit+json'];
      let returnType = Credit;
      return this.apiClient.callApi(
        '/videos/{video_id}/credits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVideoCreditAlt1 operation.
     * @callback module:api/VideosCreditsApi~addVideoCreditAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Credit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Credit a user in a video
     * @param {Number} channelId The ID of the channel.
     * @param {Number} videoId The ID of the video.
     * @param {module:model/AddVideoCreditAlt1Request} addVideoCreditAlt1Request 
     * @param {module:api/VideosCreditsApi~addVideoCreditAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credit}
     */
    addVideoCreditAlt1(channelId, videoId, addVideoCreditAlt1Request, callback) {
      let postBody = addVideoCreditAlt1Request;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling addVideoCreditAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoCreditAlt1");
      }
      // verify the required parameter 'addVideoCreditAlt1Request' is set
      if (addVideoCreditAlt1Request === undefined || addVideoCreditAlt1Request === null) {
        throw new Error("Missing the required parameter 'addVideoCreditAlt1Request' when calling addVideoCreditAlt1");
      }

      let pathParams = {
        'channel_id': channelId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.credit+json'];
      let accepts = ['application/vnd.vimeo.credit+json'];
      let returnType = Credit;
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos/{video_id}/credits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVideoCredit operation.
     * @callback module:api/VideosCreditsApi~deleteVideoCreditCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a credit for a user in a video
     * @param {Number} creditId The ID of the credit.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosCreditsApi~deleteVideoCreditCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVideoCredit(creditId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'creditId' is set
      if (creditId === undefined || creditId === null) {
        throw new Error("Missing the required parameter 'creditId' when calling deleteVideoCredit");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoCredit");
      }

      let pathParams = {
        'credit_id': creditId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/videos/{video_id}/credits/{credit_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editVideoCredit operation.
     * @callback module:api/VideosCreditsApi~editVideoCreditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Credit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a credit for a user in a video
     * @param {Number} creditId The ID of the credit.
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditVideoCreditRequest} [editVideoCreditRequest] 
     * @param {module:api/VideosCreditsApi~editVideoCreditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credit}
     */
    editVideoCredit(creditId, videoId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editVideoCreditRequest'];
      // verify the required parameter 'creditId' is set
      if (creditId === undefined || creditId === null) {
        throw new Error("Missing the required parameter 'creditId' when calling editVideoCredit");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling editVideoCredit");
      }

      let pathParams = {
        'credit_id': creditId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.credit+json'];
      let accepts = ['application/vnd.vimeo.credit+json'];
      let returnType = Credit;
      return this.apiClient.callApi(
        '/videos/{video_id}/credits/{credit_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoCredit operation.
     * @callback module:api/VideosCreditsApi~getVideoCreditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Credit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific credited user in a video
     * @param {Number} creditId The ID of the credit.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosCreditsApi~getVideoCreditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credit}
     */
    getVideoCredit(creditId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'creditId' is set
      if (creditId === undefined || creditId === null) {
        throw new Error("Missing the required parameter 'creditId' when calling getVideoCredit");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoCredit");
      }

      let pathParams = {
        'credit_id': creditId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.credit+json'];
      let returnType = Credit;
      return this.apiClient.callApi(
        '/videos/{video_id}/credits/{credit_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoCredits operation.
     * @callback module:api/VideosCreditsApi~getVideoCreditsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Credit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the credited users in a video
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/VideosCreditsApi~getVideoCreditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Credit>}
     */
    getVideoCredits(videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoCredits");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.credit+json'];
      let returnType = [Credit];
      return this.apiClient.callApi(
        '/videos/{video_id}/credits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoCreditsAlt1 operation.
     * @callback module:api/VideosCreditsApi~getVideoCreditsAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Credit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the credited users in a video
     * @param {Number} channelId The ID of the channel.
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/VideosCreditsApi~getVideoCreditsAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Credit>}
     */
    getVideoCreditsAlt1(channelId, videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getVideoCreditsAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoCreditsAlt1");
      }

      let pathParams = {
        'channel_id': channelId,
        'video_id': videoId
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.credit+json'];
      let returnType = [Credit];
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos/{video_id}/credits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
