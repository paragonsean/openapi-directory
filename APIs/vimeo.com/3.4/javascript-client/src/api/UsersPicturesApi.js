/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EditPictureAlt1Request from '../model/EditPictureAlt1Request';
import Picture from '../model/Picture';

/**
* UsersPictures service.
* @module api/UsersPicturesApi
* @version 3.4
*/
export default class UsersPicturesApi {

    /**
    * Constructs a new UsersPicturesApi. 
    * @alias module:api/UsersPicturesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPicture operation.
     * @callback module:api/UsersPicturesApi~createPictureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user picture
     * @param {Number} userId The ID of the user.
     * @param {module:api/UsersPicturesApi~createPictureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    createPicture(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createPicture");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/users/{user_id}/pictures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPictureAlt1 operation.
     * @callback module:api/UsersPicturesApi~createPictureAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user picture
     * @param {module:api/UsersPicturesApi~createPictureAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    createPictureAlt1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/me/pictures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePicture operation.
     * @callback module:api/UsersPicturesApi~deletePictureCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user picture
     * @param {Number} portraitsetId The ID of the picture.
     * @param {Number} userId The ID of the user.
     * @param {module:api/UsersPicturesApi~deletePictureCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePicture(portraitsetId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'portraitsetId' is set
      if (portraitsetId === undefined || portraitsetId === null) {
        throw new Error("Missing the required parameter 'portraitsetId' when calling deletePicture");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deletePicture");
      }

      let pathParams = {
        'portraitset_id': portraitsetId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/pictures/{portraitset_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePictureAlt1 operation.
     * @callback module:api/UsersPicturesApi~deletePictureAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user picture
     * @param {Number} portraitsetId The ID of the picture.
     * @param {module:api/UsersPicturesApi~deletePictureAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePictureAlt1(portraitsetId, callback) {
      let postBody = null;
      // verify the required parameter 'portraitsetId' is set
      if (portraitsetId === undefined || portraitsetId === null) {
        throw new Error("Missing the required parameter 'portraitsetId' when calling deletePictureAlt1");
      }

      let pathParams = {
        'portraitset_id': portraitsetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/pictures/{portraitset_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editPicture operation.
     * @callback module:api/UsersPicturesApi~editPictureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a user picture
     * @param {Number} portraitsetId The ID of the picture.
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditPictureAlt1Request} [editPictureAlt1Request] 
     * @param {module:api/UsersPicturesApi~editPictureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    editPicture(portraitsetId, userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editPictureAlt1Request'];
      // verify the required parameter 'portraitsetId' is set
      if (portraitsetId === undefined || portraitsetId === null) {
        throw new Error("Missing the required parameter 'portraitsetId' when calling editPicture");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling editPicture");
      }

      let pathParams = {
        'portraitset_id': portraitsetId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.picture+json'];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/users/{user_id}/pictures/{portraitset_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editPictureAlt1 operation.
     * @callback module:api/UsersPicturesApi~editPictureAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a user picture
     * @param {Number} portraitsetId The ID of the picture.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditPictureAlt1Request} [editPictureAlt1Request] 
     * @param {module:api/UsersPicturesApi~editPictureAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    editPictureAlt1(portraitsetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editPictureAlt1Request'];
      // verify the required parameter 'portraitsetId' is set
      if (portraitsetId === undefined || portraitsetId === null) {
        throw new Error("Missing the required parameter 'portraitsetId' when calling editPictureAlt1");
      }

      let pathParams = {
        'portraitset_id': portraitsetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.picture+json'];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/me/pictures/{portraitset_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPicture operation.
     * @callback module:api/UsersPicturesApi~getPictureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific user picture
     * @param {Number} portraitsetId The ID of the picture.
     * @param {Number} userId The ID of the user.
     * @param {module:api/UsersPicturesApi~getPictureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    getPicture(portraitsetId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'portraitsetId' is set
      if (portraitsetId === undefined || portraitsetId === null) {
        throw new Error("Missing the required parameter 'portraitsetId' when calling getPicture");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPicture");
      }

      let pathParams = {
        'portraitset_id': portraitsetId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/users/{user_id}/pictures/{portraitset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPictureAlt1 operation.
     * @callback module:api/UsersPicturesApi~getPictureAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific user picture
     * @param {Number} portraitsetId The ID of the picture.
     * @param {module:api/UsersPicturesApi~getPictureAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    getPictureAlt1(portraitsetId, callback) {
      let postBody = null;
      // verify the required parameter 'portraitsetId' is set
      if (portraitsetId === undefined || portraitsetId === null) {
        throw new Error("Missing the required parameter 'portraitsetId' when calling getPictureAlt1");
      }

      let pathParams = {
        'portraitset_id': portraitsetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/me/pictures/{portraitset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPictures operation.
     * @callback module:api/UsersPicturesApi~getPicturesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Picture>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the pictures that belong to a user
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/UsersPicturesApi~getPicturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Picture>}
     */
    getPictures(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPictures");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = [Picture];
      return this.apiClient.callApi(
        '/users/{user_id}/pictures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPicturesAlt1 operation.
     * @callback module:api/UsersPicturesApi~getPicturesAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Picture>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the pictures that belong to a user
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/UsersPicturesApi~getPicturesAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Picture>}
     */
    getPicturesAlt1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = [Picture];
      return this.apiClient.callApi(
        '/me/pictures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
