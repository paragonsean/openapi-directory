/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import FollowUsersAlt1Request from '../model/FollowUsersAlt1Request';
import LegacyError from '../model/LegacyError';
import User from '../model/User';

/**
* UsersFollows service.
* @module api/UsersFollowsApi
* @version 3.4
*/
export default class UsersFollowsApi {

    /**
    * Constructs a new UsersFollowsApi. 
    * @alias module:api/UsersFollowsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkIfUserIsFollowing operation.
     * @callback module:api/UsersFollowsApi~checkIfUserIsFollowingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a user is following another user
     * @param {Number} followUserId The ID of the following user.
     * @param {Number} userId The ID of the user.
     * @param {module:api/UsersFollowsApi~checkIfUserIsFollowingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    checkIfUserIsFollowing(followUserId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'followUserId' is set
      if (followUserId === undefined || followUserId === null) {
        throw new Error("Missing the required parameter 'followUserId' when calling checkIfUserIsFollowing");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling checkIfUserIsFollowing");
      }

      let pathParams = {
        'follow_user_id': followUserId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/following/{follow_user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkIfUserIsFollowingAlt1 operation.
     * @callback module:api/UsersFollowsApi~checkIfUserIsFollowingAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a user is following another user
     * @param {Number} followUserId The ID of the following user.
     * @param {module:api/UsersFollowsApi~checkIfUserIsFollowingAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    checkIfUserIsFollowingAlt1(followUserId, callback) {
      let postBody = null;
      // verify the required parameter 'followUserId' is set
      if (followUserId === undefined || followUserId === null) {
        throw new Error("Missing the required parameter 'followUserId' when calling checkIfUserIsFollowingAlt1");
      }

      let pathParams = {
        'follow_user_id': followUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/following/{follow_user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the followUser operation.
     * @callback module:api/UsersFollowsApi~followUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a specific user
     * @param {Number} followUserId The ID of the following user.
     * @param {Number} userId The ID of the user.
     * @param {module:api/UsersFollowsApi~followUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    followUser(followUserId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'followUserId' is set
      if (followUserId === undefined || followUserId === null) {
        throw new Error("Missing the required parameter 'followUserId' when calling followUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling followUser");
      }

      let pathParams = {
        'follow_user_id': followUserId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/following/{follow_user_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the followUserAlt1 operation.
     * @callback module:api/UsersFollowsApi~followUserAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a specific user
     * @param {Number} followUserId The ID of the following user.
     * @param {module:api/UsersFollowsApi~followUserAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    followUserAlt1(followUserId, callback) {
      let postBody = null;
      // verify the required parameter 'followUserId' is set
      if (followUserId === undefined || followUserId === null) {
        throw new Error("Missing the required parameter 'followUserId' when calling followUserAlt1");
      }

      let pathParams = {
        'follow_user_id': followUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/following/{follow_user_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the followUsers operation.
     * @callback module:api/UsersFollowsApi~followUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a list of users
     * @param {Number} userId The ID of the user.
     * @param {module:model/FollowUsersAlt1Request} followUsersAlt1Request 
     * @param {module:api/UsersFollowsApi~followUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    followUsers(userId, followUsersAlt1Request, callback) {
      let postBody = followUsersAlt1Request;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling followUsers");
      }
      // verify the required parameter 'followUsersAlt1Request' is set
      if (followUsersAlt1Request === undefined || followUsersAlt1Request === null) {
        throw new Error("Missing the required parameter 'followUsersAlt1Request' when calling followUsers");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/following', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the followUsersAlt1 operation.
     * @callback module:api/UsersFollowsApi~followUsersAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a list of users
     * @param {module:model/FollowUsersAlt1Request} followUsersAlt1Request 
     * @param {module:api/UsersFollowsApi~followUsersAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    followUsersAlt1(followUsersAlt1Request, callback) {
      let postBody = followUsersAlt1Request;
      // verify the required parameter 'followUsersAlt1Request' is set
      if (followUsersAlt1Request === undefined || followUsersAlt1Request === null) {
        throw new Error("Missing the required parameter 'followUsersAlt1Request' when calling followUsersAlt1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/following', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFollowers operation.
     * @callback module:api/UsersFollowsApi~getFollowersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the followers of a user
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/UsersFollowsApi~getFollowersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    getFollowers(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getFollowers");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/users/{user_id}/followers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFollowersAlt1 operation.
     * @callback module:api/UsersFollowsApi~getFollowersAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the followers of a user
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/UsersFollowsApi~getFollowersAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    getFollowersAlt1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/me/followers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserFollowing operation.
     * @callback module:api/UsersFollowsApi~getUserFollowingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the users that a user is following
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/UsersFollowsApi~getUserFollowingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    getUserFollowing(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserFollowing");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/users/{user_id}/following', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserFollowingAlt1 operation.
     * @callback module:api/UsersFollowsApi~getUserFollowingAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the users that a user is following
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/UsersFollowsApi~getUserFollowingAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    getUserFollowingAlt1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/me/following', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unfollowUser operation.
     * @callback module:api/UsersFollowsApi~unfollowUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow a user
     * @param {Number} followUserId The ID of the following user.
     * @param {Number} userId The ID of the user.
     * @param {module:api/UsersFollowsApi~unfollowUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unfollowUser(followUserId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'followUserId' is set
      if (followUserId === undefined || followUserId === null) {
        throw new Error("Missing the required parameter 'followUserId' when calling unfollowUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling unfollowUser");
      }

      let pathParams = {
        'follow_user_id': followUserId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/following/{follow_user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unfollowUserAlt1 operation.
     * @callback module:api/UsersFollowsApi~unfollowUserAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow a user
     * @param {Number} followUserId The ID of the following user.
     * @param {module:api/UsersFollowsApi~unfollowUserAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    unfollowUserAlt1(followUserId, callback) {
      let postBody = null;
      // verify the required parameter 'followUserId' is set
      if (followUserId === undefined || followUserId === null) {
        throw new Error("Missing the required parameter 'followUserId' when calling unfollowUserAlt1");
      }

      let pathParams = {
        'follow_user_id': followUserId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/following/{follow_user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
