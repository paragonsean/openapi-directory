/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import SetChannelPrivacyUsersRequest from '../model/SetChannelPrivacyUsersRequest';
import User from '../model/User';

/**
* ChannelsPrivateChannelMembers service.
* @module api/ChannelsPrivateChannelMembersApi
* @version 3.4
*/
export default class ChannelsPrivateChannelMembersApi {

    /**
    * Constructs a new ChannelsPrivateChannelMembersApi. 
    * @alias module:api/ChannelsPrivateChannelMembersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteChannelPrivacyUser operation.
     * @callback module:api/ChannelsPrivateChannelMembersApi~deleteChannelPrivacyUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restrict a user from viewing a private channel
     * This method prevents a single user from being able to access the specified private channel.
     * @param {Number} channelId The ID of the channel.
     * @param {Number} userId The ID of the user.
     * @param {module:api/ChannelsPrivateChannelMembersApi~deleteChannelPrivacyUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChannelPrivacyUser(channelId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling deleteChannelPrivacyUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteChannelPrivacyUser");
      }

      let pathParams = {
        'channel_id': channelId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channel_id}/privacy/users/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelPrivacyUsers operation.
     * @callback module:api/ChannelsPrivateChannelMembersApi~getChannelPrivacyUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the users who can view a private channel
     * This method gets all the users who have access to the specified private channel.
     * @param {Number} channelId The ID of the channel.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/ChannelsPrivateChannelMembersApi~getChannelPrivacyUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    getChannelPrivacyUsers(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelPrivacyUsers");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/channels/{channel_id}/privacy/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setChannelPrivacyUser operation.
     * @callback module:api/ChannelsPrivateChannelMembersApi~setChannelPrivacyUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permit a specific user to view a private channel
     * This method gives a single user access to the specified private channel.
     * @param {Number} channelId The ID of the channel.
     * @param {Number} userId The ID of the user.
     * @param {module:api/ChannelsPrivateChannelMembersApi~setChannelPrivacyUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setChannelPrivacyUser(channelId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling setChannelPrivacyUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setChannelPrivacyUser");
      }

      let pathParams = {
        'channel_id': channelId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channel_id}/privacy/users/{user_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setChannelPrivacyUsers operation.
     * @callback module:api/ChannelsPrivateChannelMembersApi~setChannelPrivacyUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permit a list of users to view a private channel
     * This method gives multiple users access to the specified private channel.
     * @param {Number} channelId The ID of the channel.
     * @param {module:model/SetChannelPrivacyUsersRequest} setChannelPrivacyUsersRequest 
     * @param {module:api/ChannelsPrivateChannelMembersApi~setChannelPrivacyUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    setChannelPrivacyUsers(channelId, setChannelPrivacyUsersRequest, callback) {
      let postBody = setChannelPrivacyUsersRequest;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling setChannelPrivacyUsers");
      }
      // verify the required parameter 'setChannelPrivacyUsersRequest' is set
      if (setChannelPrivacyUsersRequest === undefined || setChannelPrivacyUsersRequest === null) {
        throw new Error("Missing the required parameter 'setChannelPrivacyUsersRequest' when calling setChannelPrivacyUsers");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.user+json'];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/channels/{channel_id}/privacy/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
