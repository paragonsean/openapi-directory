/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddVideoToVodRequest from '../model/AddVideoToVodRequest';
import LegacyError from '../model/LegacyError';
import OnDemandVideo from '../model/OnDemandVideo';
import Video from '../model/Video';

/**
* OnDemandVideos service.
* @module api/OnDemandVideosApi
* @version 3.4
*/
export default class OnDemandVideosApi {

    /**
    * Constructs a new OnDemandVideosApi. 
    * @alias module:api/OnDemandVideosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVideoToVod operation.
     * @callback module:api/OnDemandVideosApi~addVideoToVodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnDemandVideo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a video to an On Demand page
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {Number} videoId The ID of the video.
     * @param {module:model/AddVideoToVodRequest} addVideoToVodRequest 
     * @param {module:api/OnDemandVideosApi~addVideoToVodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnDemandVideo}
     */
    addVideoToVod(ondemandId, videoId, addVideoToVodRequest, callback) {
      let postBody = addVideoToVodRequest;
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling addVideoToVod");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoToVod");
      }
      // verify the required parameter 'addVideoToVodRequest' is set
      if (addVideoToVodRequest === undefined || addVideoToVodRequest === null) {
        throw new Error("Missing the required parameter 'addVideoToVodRequest' when calling addVideoToVod");
      }

      let pathParams = {
        'ondemand_id': ondemandId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.ondemand.video+json'];
      let accepts = ['application/vnd.vimeo.ondemand.video+json'];
      let returnType = OnDemandVideo;
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/videos/{video_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVideoFromVod operation.
     * @callback module:api/OnDemandVideosApi~deleteVideoFromVodCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a video from an On Demand page
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/OnDemandVideosApi~deleteVideoFromVodCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVideoFromVod(ondemandId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling deleteVideoFromVod");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoFromVod");
      }

      let pathParams = {
        'ondemand_id': ondemandId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.video+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/videos/{video_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVodVideo operation.
     * @callback module:api/OnDemandVideosApi~getVodVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific video on an On Demand page
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/OnDemandVideosApi~getVodVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    getVodVideo(ondemandId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling getVodVideo");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVodVideo");
      }

      let pathParams = {
        'ondemand_id': ondemandId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/videos/{video_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVodVideos operation.
     * @callback module:api/OnDemandVideosApi~getVodVideosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos on an On Demand page
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/OnDemandVideosApi~getVodVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getVodVideos(ondemandId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling getVodVideos");
      }

      let pathParams = {
        'ondemand_id': ondemandId
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
