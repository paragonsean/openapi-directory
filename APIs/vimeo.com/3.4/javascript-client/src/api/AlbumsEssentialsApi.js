/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Album from '../model/Album';
import CreateAlbumAlt1Request from '../model/CreateAlbumAlt1Request';
import EditAlbumAlt1Request from '../model/EditAlbumAlt1Request';
import LegacyError from '../model/LegacyError';

/**
* AlbumsEssentials service.
* @module api/AlbumsEssentialsApi
* @version 3.4
*/
export default class AlbumsEssentialsApi {

    /**
    * Constructs a new AlbumsEssentialsApi. 
    * @alias module:api/AlbumsEssentialsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAlbum operation.
     * @callback module:api/AlbumsEssentialsApi~createAlbumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Album} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an album
     * @param {Number} userId The ID of the user.
     * @param {module:model/CreateAlbumAlt1Request} createAlbumAlt1Request 
     * @param {module:api/AlbumsEssentialsApi~createAlbumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Album}
     */
    createAlbum(userId, createAlbumAlt1Request, callback) {
      let postBody = createAlbumAlt1Request;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createAlbum");
      }
      // verify the required parameter 'createAlbumAlt1Request' is set
      if (createAlbumAlt1Request === undefined || createAlbumAlt1Request === null) {
        throw new Error("Missing the required parameter 'createAlbumAlt1Request' when calling createAlbum");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.album+json'];
      let accepts = ['application/vnd.vimeo.album+json'];
      let returnType = Album;
      return this.apiClient.callApi(
        '/users/{user_id}/albums', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAlbumAlt1 operation.
     * @callback module:api/AlbumsEssentialsApi~createAlbumAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Album} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an album
     * @param {module:model/CreateAlbumAlt1Request} createAlbumAlt1Request 
     * @param {module:api/AlbumsEssentialsApi~createAlbumAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Album}
     */
    createAlbumAlt1(createAlbumAlt1Request, callback) {
      let postBody = createAlbumAlt1Request;
      // verify the required parameter 'createAlbumAlt1Request' is set
      if (createAlbumAlt1Request === undefined || createAlbumAlt1Request === null) {
        throw new Error("Missing the required parameter 'createAlbumAlt1Request' when calling createAlbumAlt1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.album+json'];
      let accepts = ['application/vnd.vimeo.album+json'];
      let returnType = Album;
      return this.apiClient.callApi(
        '/me/albums', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAlbum operation.
     * @callback module:api/AlbumsEssentialsApi~deleteAlbumCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an album
     * @param {Number} albumId The ID of the album.
     * @param {Number} userId The ID of the user.
     * @param {module:api/AlbumsEssentialsApi~deleteAlbumCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAlbum(albumId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling deleteAlbum");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteAlbum");
      }

      let pathParams = {
        'album_id': albumId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAlbumAlt1 operation.
     * @callback module:api/AlbumsEssentialsApi~deleteAlbumAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an album
     * @param {Number} albumId The ID of the album.
     * @param {module:api/AlbumsEssentialsApi~deleteAlbumAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAlbumAlt1(albumId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling deleteAlbumAlt1");
      }

      let pathParams = {
        'album_id': albumId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/albums/{album_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editAlbum operation.
     * @callback module:api/AlbumsEssentialsApi~editAlbumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Album} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an album
     * @param {Number} albumId The ID of the album.
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditAlbumAlt1Request} [editAlbumAlt1Request] 
     * @param {module:api/AlbumsEssentialsApi~editAlbumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Album}
     */
    editAlbum(albumId, userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editAlbumAlt1Request'];
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling editAlbum");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling editAlbum");
      }

      let pathParams = {
        'album_id': albumId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.album+json'];
      let accepts = ['application/vnd.vimeo.album+json'];
      let returnType = Album;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editAlbumAlt1 operation.
     * @callback module:api/AlbumsEssentialsApi~editAlbumAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Album} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an album
     * @param {Number} albumId The ID of the album.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditAlbumAlt1Request} [editAlbumAlt1Request] 
     * @param {module:api/AlbumsEssentialsApi~editAlbumAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Album}
     */
    editAlbumAlt1(albumId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editAlbumAlt1Request'];
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling editAlbumAlt1");
      }

      let pathParams = {
        'album_id': albumId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.album+json'];
      let accepts = ['application/vnd.vimeo.album+json'];
      let returnType = Album;
      return this.apiClient.callApi(
        '/me/albums/{album_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbum operation.
     * @callback module:api/AlbumsEssentialsApi~getAlbumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Album} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific album
     * @param {Number} albumId The ID of the album.
     * @param {Number} userId The ID of the user.
     * @param {module:api/AlbumsEssentialsApi~getAlbumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Album}
     */
    getAlbum(albumId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling getAlbum");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAlbum");
      }

      let pathParams = {
        'album_id': albumId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.album+json'];
      let returnType = Album;
      return this.apiClient.callApi(
        '/users/{user_id}/albums/{album_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbumAlt1 operation.
     * @callback module:api/AlbumsEssentialsApi~getAlbumAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Album} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific album
     * @param {Number} albumId The ID of the album.
     * @param {module:api/AlbumsEssentialsApi~getAlbumAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Album}
     */
    getAlbumAlt1(albumId, callback) {
      let postBody = null;
      // verify the required parameter 'albumId' is set
      if (albumId === undefined || albumId === null) {
        throw new Error("Missing the required parameter 'albumId' when calling getAlbumAlt1");
      }

      let pathParams = {
        'album_id': albumId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.album+json'];
      let returnType = Album;
      return this.apiClient.callApi(
        '/me/albums/{album_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbums operation.
     * @callback module:api/AlbumsEssentialsApi~getAlbumsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Album>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the albums that belong to a user
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/AlbumsEssentialsApi~getAlbumsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Album>}
     */
    getAlbums(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAlbums");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Album];
      return this.apiClient.callApi(
        '/users/{user_id}/albums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlbumsAlt1 operation.
     * @callback module:api/AlbumsEssentialsApi~getAlbumsAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Album>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the albums that belong to a user
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/AlbumsEssentialsApi~getAlbumsAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Album>}
     */
    getAlbumsAlt1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Album];
      return this.apiClient.callApi(
        '/me/albums', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
