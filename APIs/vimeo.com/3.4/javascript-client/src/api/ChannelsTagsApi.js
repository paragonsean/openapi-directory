/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddTagsToChannelRequest from '../model/AddTagsToChannelRequest';
import Error from '../model/Error';
import LegacyError from '../model/LegacyError';
import Tag from '../model/Tag';

/**
* ChannelsTags service.
* @module api/ChannelsTagsApi
* @version 3.4
*/
export default class ChannelsTagsApi {

    /**
    * Constructs a new ChannelsTagsApi. 
    * @alias module:api/ChannelsTagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addChannelTag operation.
     * @callback module:api/ChannelsTagsApi~addChannelTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a specific tag to a channel
     * This method adds a single tag to the specified channel.
     * @param {Number} channelId The ID of the channel.
     * @param {String} word The word to use as the tag.
     * @param {module:api/ChannelsTagsApi~addChannelTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addChannelTag(channelId, word, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling addChannelTag");
      }
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling addChannelTag");
      }

      let pathParams = {
        'channel_id': channelId,
        'word': word
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.tag+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channel_id}/tags/{word}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addTagsToChannel operation.
     * @callback module:api/ChannelsTagsApi~addTagsToChannelCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a list of tags to a channel
     * This method adds multiple tags to the specified channel.
     * @param {Number} channelId The ID of the channel.
     * @param {module:model/AddTagsToChannelRequest} addTagsToChannelRequest 
     * @param {module:api/ChannelsTagsApi~addTagsToChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Tag>}
     */
    addTagsToChannel(channelId, addTagsToChannelRequest, callback) {
      let postBody = addTagsToChannelRequest;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling addTagsToChannel");
      }
      // verify the required parameter 'addTagsToChannelRequest' is set
      if (addTagsToChannelRequest === undefined || addTagsToChannelRequest === null) {
        throw new Error("Missing the required parameter 'addTagsToChannelRequest' when calling addTagsToChannel");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.tag+json'];
      let accepts = ['application/vnd.vimeo.tag+json'];
      let returnType = [Tag];
      return this.apiClient.callApi(
        '/channels/{channel_id}/tags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkIfChannelHasTag operation.
     * @callback module:api/ChannelsTagsApi~checkIfChannelHasTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a tag has been added to a channel
     * This method determines whether a specific tag has been added to the channel in question.
     * @param {Number} channelId The ID of the channel.
     * @param {String} word The word to use as the tag.
     * @param {module:api/ChannelsTagsApi~checkIfChannelHasTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    checkIfChannelHasTag(channelId, word, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling checkIfChannelHasTag");
      }
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling checkIfChannelHasTag");
      }

      let pathParams = {
        'channel_id': channelId,
        'word': word
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.tag+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channel_id}/tags/{word}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTagFromChannel operation.
     * @callback module:api/ChannelsTagsApi~deleteTagFromChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a tag from a channel
     * This method removes a single tag from the specified channel.
     * @param {Number} channelId The ID of the channel.
     * @param {String} word The word to use as the tag.
     * @param {module:api/ChannelsTagsApi~deleteTagFromChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTagFromChannel(channelId, word, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling deleteTagFromChannel");
      }
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling deleteTagFromChannel");
      }

      let pathParams = {
        'channel_id': channelId,
        'word': word
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.tag+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channel_id}/tags/{word}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelTags operation.
     * @callback module:api/ChannelsTagsApi~getChannelTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the tags that have been added to a channel
     * This method gets all the tags that have been added to the specified channel.
     * @param {Number} channelId The ID of the channel.
     * @param {module:api/ChannelsTagsApi~getChannelTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Tag>}
     */
    getChannelTags(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelTags");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.tag+json'];
      let returnType = [Tag];
      return this.apiClient.callApi(
        '/channels/{channel_id}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
