/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddVideosToChannelRequest from '../model/AddVideosToChannelRequest';
import Channel from '../model/Channel';
import LegacyError from '../model/LegacyError';
import RemoveVideosFromChannelRequest from '../model/RemoveVideosFromChannelRequest';
import Video from '../model/Video';

/**
* ChannelsVideos service.
* @module api/ChannelsVideosApi
* @version 3.4
*/
export default class ChannelsVideosApi {

    /**
    * Constructs a new ChannelsVideosApi. 
    * @alias module:api/ChannelsVideosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVideoToChannel operation.
     * @callback module:api/ChannelsVideosApi~addVideoToChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a specific video to a channel
     * @param {Number} channelId The ID of the channel.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/ChannelsVideosApi~addVideoToChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addVideoToChannel(channelId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling addVideoToChannel");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoToChannel");
      }

      let pathParams = {
        'channel_id': channelId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos/{video_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVideosToChannel operation.
     * @callback module:api/ChannelsVideosApi~addVideosToChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a list of videos to a channel
     * @param {Number} channelId The ID of the channel.
     * @param {module:model/AddVideosToChannelRequest} addVideosToChannelRequest 
     * @param {module:api/ChannelsVideosApi~addVideosToChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addVideosToChannel(channelId, addVideosToChannelRequest, callback) {
      let postBody = addVideosToChannelRequest;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling addVideosToChannel");
      }
      // verify the required parameter 'addVideosToChannelRequest' is set
      if (addVideosToChannelRequest === undefined || addVideosToChannelRequest === null) {
        throw new Error("Missing the required parameter 'addVideosToChannelRequest' when calling addVideosToChannel");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVideoFromChannel operation.
     * @callback module:api/ChannelsVideosApi~deleteVideoFromChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a specific video from a channel
     * @param {Number} channelId The ID of the channel.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/ChannelsVideosApi~deleteVideoFromChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVideoFromChannel(channelId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling deleteVideoFromChannel");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoFromChannel");
      }

      let pathParams = {
        'channel_id': channelId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos/{video_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableVideoChannels operation.
     * @callback module:api/ChannelsVideosApi~getAvailableVideoChannelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Channel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the channels to which a user can add or remove a specific video
     * @param {Number} videoId The ID of the video.
     * @param {module:api/ChannelsVideosApi~getAvailableVideoChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Channel>}
     */
    getAvailableVideoChannels(videoId, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getAvailableVideoChannels");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.channel+json'];
      let returnType = [Channel];
      return this.apiClient.callApi(
        '/videos/{video_id}/available_channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelVideo operation.
     * @callback module:api/ChannelsVideosApi~getChannelVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific video in a channel
     * This method returns a specific video in a channel. You can use it to determine whether the video is in the channel.
     * @param {Number} channelId The ID of the channel.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/ChannelsVideosApi~getChannelVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    getChannelVideo(channelId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelVideo");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getChannelVideo");
      }

      let pathParams = {
        'channel_id': channelId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos/{video_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelVideos operation.
     * @callback module:api/ChannelsVideosApi~getChannelVideosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos in a channel
     * @param {Number} channelId The ID of the channel.
     * @param {Object} opts Optional parameters
     * @param {String} [containingUri] The page that contains the video URI.
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/ChannelsVideosApi~getChannelVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getChannelVideos(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelVideos");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
        'containing_uri': opts['containingUri'],
        'direction': opts['direction'],
        'filter': opts['filter'],
        'filter_embeddable': opts['filterEmbeddable'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVideosFromChannel operation.
     * @callback module:api/ChannelsVideosApi~removeVideosFromChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a list of videos from a channel
     * @param {Number} channelId The ID of the channel.
     * @param {module:model/RemoveVideosFromChannelRequest} removeVideosFromChannelRequest 
     * @param {module:api/ChannelsVideosApi~removeVideosFromChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    removeVideosFromChannel(channelId, removeVideosFromChannelRequest, callback) {
      let postBody = removeVideosFromChannelRequest;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling removeVideosFromChannel");
      }
      // verify the required parameter 'removeVideosFromChannelRequest' is set
      if (removeVideosFromChannelRequest === undefined || removeVideosFromChannelRequest === null) {
        throw new Error("Missing the required parameter 'removeVideosFromChannelRequest' when calling removeVideosFromChannel");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
