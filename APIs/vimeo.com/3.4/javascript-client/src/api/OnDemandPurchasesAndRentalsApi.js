/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LegacyError from '../model/LegacyError';
import OnDemandPage from '../model/OnDemandPage';

/**
* OnDemandPurchasesAndRentals service.
* @module api/OnDemandPurchasesAndRentalsApi
* @version 3.4
*/
export default class OnDemandPurchasesAndRentalsApi {

    /**
    * Constructs a new OnDemandPurchasesAndRentalsApi. 
    * @alias module:api/OnDemandPurchasesAndRentalsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkIfVodWasPurchased operation.
     * @callback module:api/OnDemandPurchasesAndRentalsApi~checkIfVodWasPurchasedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnDemandPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a user has made a purchase or rental from an On Demand page
     * @param {Number} userId The ID of the user.
     * @param {module:api/OnDemandPurchasesAndRentalsApi~checkIfVodWasPurchasedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnDemandPage}
     */
    checkIfVodWasPurchased(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling checkIfVodWasPurchased");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.page+json'];
      let returnType = OnDemandPage;
      return this.apiClient.callApi(
        '/users/{user_id}/ondemand/purchases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkIfVodWasPurchasedAlt1 operation.
     * @callback module:api/OnDemandPurchasesAndRentalsApi~checkIfVodWasPurchasedAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/OnDemandPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a user has made a purchase or rental from an On Demand page
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {module:api/OnDemandPurchasesAndRentalsApi~checkIfVodWasPurchasedAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnDemandPage}
     */
    checkIfVodWasPurchasedAlt1(ondemandId, callback) {
      let postBody = null;
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling checkIfVodWasPurchasedAlt1");
      }

      let pathParams = {
        'ondemand_id': ondemandId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.page+json'];
      let returnType = OnDemandPage;
      return this.apiClient.callApi(
        '/me/ondemand/purchases/{ondemand_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVodPurchases operation.
     * @callback module:api/OnDemandPurchasesAndRentalsApi~getVodPurchasesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OnDemandPage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the On Demand purchases and rentals that a user has made
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The type of On Demand videos to show.  Option descriptions:  * `important` - Will show all pages which are about to expire. 
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/OnDemandPurchasesAndRentalsApi~getVodPurchasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OnDemandPage>}
     */
    getVodPurchases(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.page+json'];
      let returnType = [OnDemandPage];
      return this.apiClient.callApi(
        '/me/ondemand/purchases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
