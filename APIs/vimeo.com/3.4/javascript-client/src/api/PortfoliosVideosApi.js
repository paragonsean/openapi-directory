/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LegacyError from '../model/LegacyError';
import Video from '../model/Video';

/**
* PortfoliosVideos service.
* @module api/PortfoliosVideosApi
* @version 3.4
*/
export default class PortfoliosVideosApi {

    /**
    * Constructs a new PortfoliosVideosApi. 
    * @alias module:api/PortfoliosVideosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVideoToPortfolio operation.
     * @callback module:api/PortfoliosVideosApi~addVideoToPortfolioCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a video to a portfolio
     * @param {Number} portfolioId The ID of the portfolio.
     * @param {Number} userId The ID of the user.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/PortfoliosVideosApi~addVideoToPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addVideoToPortfolio(portfolioId, userId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling addVideoToPortfolio");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addVideoToPortfolio");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoToPortfolio");
      }

      let pathParams = {
        'portfolio_id': portfolioId,
        'user_id': userId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVideoToPortfolioAlt1 operation.
     * @callback module:api/PortfoliosVideosApi~addVideoToPortfolioAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a video to a portfolio
     * @param {Number} portfolioId The ID of the portfolio.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/PortfoliosVideosApi~addVideoToPortfolioAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    addVideoToPortfolioAlt1(portfolioId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling addVideoToPortfolioAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoToPortfolioAlt1");
      }

      let pathParams = {
        'portfolio_id': portfolioId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/portfolios/{portfolio_id}/videos/{video_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVideoFromPortfolio operation.
     * @callback module:api/PortfoliosVideosApi~deleteVideoFromPortfolioCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a video from a portfolio
     * @param {Number} portfolioId The ID of the portfolio.
     * @param {Number} userId The ID of the user.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/PortfoliosVideosApi~deleteVideoFromPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVideoFromPortfolio(portfolioId, userId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling deleteVideoFromPortfolio");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteVideoFromPortfolio");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoFromPortfolio");
      }

      let pathParams = {
        'portfolio_id': portfolioId,
        'user_id': userId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVideoFromPortfolioAlt1 operation.
     * @callback module:api/PortfoliosVideosApi~deleteVideoFromPortfolioAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a video from a portfolio
     * @param {Number} portfolioId The ID of the portfolio.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/PortfoliosVideosApi~deleteVideoFromPortfolioAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVideoFromPortfolioAlt1(portfolioId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling deleteVideoFromPortfolioAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoFromPortfolioAlt1");
      }

      let pathParams = {
        'portfolio_id': portfolioId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/portfolios/{portfolio_id}/videos/{video_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioVideo operation.
     * @callback module:api/PortfoliosVideosApi~getPortfolioVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific video in a portfolio
     * @param {Number} portfolioId The ID of the portfolio.
     * @param {Number} userId The ID of the user.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/PortfoliosVideosApi~getPortfolioVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    getPortfolioVideo(portfolioId, userId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getPortfolioVideo");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPortfolioVideo");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getPortfolioVideo");
      }

      let pathParams = {
        'portfolio_id': portfolioId,
        'user_id': userId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioVideoAlt1 operation.
     * @callback module:api/PortfoliosVideosApi~getPortfolioVideoAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific video in a portfolio
     * @param {Number} portfolioId The ID of the portfolio.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/PortfoliosVideosApi~getPortfolioVideoAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    getPortfolioVideoAlt1(portfolioId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getPortfolioVideoAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getPortfolioVideoAlt1");
      }

      let pathParams = {
        'portfolio_id': portfolioId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/me/portfolios/{portfolio_id}/videos/{video_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioVideos operation.
     * @callback module:api/PortfoliosVideosApi~getPortfolioVideosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos in a portfolio
     * @param {Number} portfolioId The ID of the portfolio.
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {String} [containingUri] The page that contains the video URI.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:model/String} [sort] The way to sort the results.  Option descriptions:  * `default` - This will sort to the default sort set on the portfolio. 
     * @param {module:api/PortfoliosVideosApi~getPortfolioVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getPortfolioVideos(portfolioId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getPortfolioVideos");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getPortfolioVideos");
      }

      let pathParams = {
        'portfolio_id': portfolioId,
        'user_id': userId
      };
      let queryParams = {
        'containing_uri': opts['containingUri'],
        'filter': opts['filter'],
        'filter_embeddable': opts['filterEmbeddable'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/users/{user_id}/portfolios/{portfolio_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioVideosAlt1 operation.
     * @callback module:api/PortfoliosVideosApi~getPortfolioVideosAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos in a portfolio
     * @param {Number} portfolioId The ID of the portfolio.
     * @param {Object} opts Optional parameters
     * @param {String} [containingUri] The page that contains the video URI.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:model/String} [sort] The way to sort the results.  Option descriptions:  * `default` - This will sort to the default sort set on the portfolio. 
     * @param {module:api/PortfoliosVideosApi~getPortfolioVideosAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getPortfolioVideosAlt1(portfolioId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getPortfolioVideosAlt1");
      }

      let pathParams = {
        'portfolio_id': portfolioId
      };
      let queryParams = {
        'containing_uri': opts['containingUri'],
        'filter': opts['filter'],
        'filter_embeddable': opts['filterEmbeddable'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/me/portfolios/{portfolio_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
