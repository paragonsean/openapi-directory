/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LegacyError from '../model/LegacyError';
import User from '../model/User';

/**
* VideosViewingPrivacy service.
* @module api/VideosViewingPrivacyApi
* @version 3.4
*/
export default class VideosViewingPrivacyApi {

    /**
    * Constructs a new VideosViewingPrivacyApi. 
    * @alias module:api/VideosViewingPrivacyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVideoPrivacyUser operation.
     * @callback module:api/VideosViewingPrivacyApi~addVideoPrivacyUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permit a specific user to view a private video
     * @param {Number} userId The ID of the user.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosViewingPrivacyApi~addVideoPrivacyUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    addVideoPrivacyUser(userId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addVideoPrivacyUser");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoPrivacyUser");
      }

      let pathParams = {
        'user_id': userId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/videos/{video_id}/privacy/users/{user_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVideoPrivacyUsers operation.
     * @callback module:api/VideosViewingPrivacyApi~addVideoPrivacyUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permit a list of users to view a private video
     * The body of this request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain a single `URI` field, and the value of this field must be the URI of the user who can view this video.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosViewingPrivacyApi~addVideoPrivacyUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    addVideoPrivacyUsers(videoId, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoPrivacyUsers");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/videos/{video_id}/privacy/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVideoPrivacyUsersAlt1 operation.
     * @callback module:api/VideosViewingPrivacyApi~addVideoPrivacyUsersAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permit a list of users to view a private video
     * The body of this request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain a single `URI` field, and the value of this field must be the URI of the user who can view this video.
     * @param {Number} channelId The ID of the channel.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosViewingPrivacyApi~addVideoPrivacyUsersAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    addVideoPrivacyUsersAlt1(channelId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling addVideoPrivacyUsersAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoPrivacyUsersAlt1");
      }

      let pathParams = {
        'channel_id': channelId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos/{video_id}/privacy/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVideoPrivacyUser operation.
     * @callback module:api/VideosViewingPrivacyApi~deleteVideoPrivacyUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restrict a user from viewing a private video
     * @param {Number} userId The ID of the user.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosViewingPrivacyApi~deleteVideoPrivacyUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVideoPrivacyUser(userId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteVideoPrivacyUser");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoPrivacyUser");
      }

      let pathParams = {
        'user_id': userId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/videos/{video_id}/privacy/users/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoPrivacyUsers operation.
     * @callback module:api/VideosViewingPrivacyApi~getVideoPrivacyUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the users who can view a user's private videos by default
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/VideosViewingPrivacyApi~getVideoPrivacyUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    getVideoPrivacyUsers(videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoPrivacyUsers");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/videos/{video_id}/privacy/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoPrivacyUsersAlt1 operation.
     * @callback module:api/VideosViewingPrivacyApi~getVideoPrivacyUsersAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the users who can view a user's private videos by default
     * @param {Number} channelId The ID of the channel.
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/VideosViewingPrivacyApi~getVideoPrivacyUsersAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    getVideoPrivacyUsersAlt1(channelId, videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getVideoPrivacyUsersAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoPrivacyUsersAlt1");
      }

      let pathParams = {
        'channel_id': channelId,
        'video_id': videoId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.user+json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos/{video_id}/privacy/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
