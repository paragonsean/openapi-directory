/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LegacyError from '../model/LegacyError';
import Video from '../model/Video';

/**
* GroupsVideos service.
* @module api/GroupsVideosApi
* @version 3.4
*/
export default class GroupsVideosApi {

    /**
    * Constructs a new GroupsVideosApi. 
    * @alias module:api/GroupsVideosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVideoToGroup operation.
     * @callback module:api/GroupsVideosApi~addVideoToGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a video to a group
     * @param {Number} groupId The ID of the group.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/GroupsVideosApi~addVideoToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    addVideoToGroup(groupId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling addVideoToGroup");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoToGroup");
      }

      let pathParams = {
        'group_id': groupId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/groups/{group_id}/videos/{video_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVideoFromGroup operation.
     * @callback module:api/GroupsVideosApi~deleteVideoFromGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a video from a group
     * @param {Number} groupId The ID of the group.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/GroupsVideosApi~deleteVideoFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVideoFromGroup(groupId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteVideoFromGroup");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoFromGroup");
      }

      let pathParams = {
        'group_id': groupId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{group_id}/videos/{video_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupVideo operation.
     * @callback module:api/GroupsVideosApi~getGroupVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific video in a group
     * Check if a group has a video.
     * @param {Number} groupId The ID of the group.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/GroupsVideosApi~getGroupVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    getGroupVideo(groupId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupVideo");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getGroupVideo");
      }

      let pathParams = {
        'group_id': groupId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/groups/{group_id}/videos/{video_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupVideos operation.
     * @callback module:api/GroupsVideosApi~getGroupVideosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos in a group
     * @param {Number} groupId The ID of the group.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/GroupsVideosApi~getGroupVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getGroupVideos(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupVideos");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': opts['filter'],
        'filter_embeddable': opts['filterEmbeddable'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/groups/{group_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
