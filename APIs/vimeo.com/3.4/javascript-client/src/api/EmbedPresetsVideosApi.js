/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LegacyError from '../model/LegacyError';
import Picture from '../model/Picture';
import Video from '../model/Video';

/**
* EmbedPresetsVideos service.
* @module api/EmbedPresetsVideosApi
* @version 3.4
*/
export default class EmbedPresetsVideosApi {

    /**
    * Constructs a new EmbedPresetsVideosApi. 
    * @alias module:api/EmbedPresetsVideosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVideoEmbedPreset operation.
     * @callback module:api/EmbedPresetsVideosApi~addVideoEmbedPresetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an embed preset to a video
     * @param {Number} presetId The ID of the preset.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/EmbedPresetsVideosApi~addVideoEmbedPresetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addVideoEmbedPreset(presetId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'presetId' is set
      if (presetId === undefined || presetId === null) {
        throw new Error("Missing the required parameter 'presetId' when calling addVideoEmbedPreset");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoEmbedPreset");
      }

      let pathParams = {
        'preset_id': presetId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/videos/{video_id}/presets/{preset_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVideoCustomLogo operation.
     * @callback module:api/EmbedPresetsVideosApi~createVideoCustomLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new custom logo to a video
     * @param {Number} videoId The ID of the video.
     * @param {module:api/EmbedPresetsVideosApi~createVideoCustomLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    createVideoCustomLogo(videoId, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling createVideoCustomLogo");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/videos/{video_id}/timelinethumbnails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVideoEmbedPreset operation.
     * @callback module:api/EmbedPresetsVideosApi~deleteVideoEmbedPresetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an embed preset from a video
     * @param {Number} presetId The ID of the preset.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/EmbedPresetsVideosApi~deleteVideoEmbedPresetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVideoEmbedPreset(presetId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'presetId' is set
      if (presetId === undefined || presetId === null) {
        throw new Error("Missing the required parameter 'presetId' when calling deleteVideoEmbedPreset");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoEmbedPreset");
      }

      let pathParams = {
        'preset_id': presetId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/videos/{video_id}/presets/{preset_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmbedPresetVideos operation.
     * @callback module:api/EmbedPresetsVideosApi~getEmbedPresetVideosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos that have been added to an embed preset
     * @param {Number} presetId The ID of the preset.
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/EmbedPresetsVideosApi~getEmbedPresetVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getEmbedPresetVideos(presetId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'presetId' is set
      if (presetId === undefined || presetId === null) {
        throw new Error("Missing the required parameter 'presetId' when calling getEmbedPresetVideos");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getEmbedPresetVideos");
      }

      let pathParams = {
        'preset_id': presetId,
        'user_id': userId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/users/{user_id}/presets/{preset_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmbedPresetVideosAlt1 operation.
     * @callback module:api/EmbedPresetsVideosApi~getEmbedPresetVideosAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos that have been added to an embed preset
     * @param {Number} presetId The ID of the preset.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/EmbedPresetsVideosApi~getEmbedPresetVideosAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getEmbedPresetVideosAlt1(presetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'presetId' is set
      if (presetId === undefined || presetId === null) {
        throw new Error("Missing the required parameter 'presetId' when calling getEmbedPresetVideosAlt1");
      }

      let pathParams = {
        'preset_id': presetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/me/presets/{preset_id}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoCustomLogo operation.
     * @callback module:api/EmbedPresetsVideosApi~getVideoCustomLogoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Picture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a custom video logo
     * @param {Number} thumbnailId The ID of the picture.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/EmbedPresetsVideosApi~getVideoCustomLogoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Picture}
     */
    getVideoCustomLogo(thumbnailId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'thumbnailId' is set
      if (thumbnailId === undefined || thumbnailId === null) {
        throw new Error("Missing the required parameter 'thumbnailId' when calling getVideoCustomLogo");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoCustomLogo");
      }

      let pathParams = {
        'thumbnail_id': thumbnailId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.picture+json'];
      let returnType = Picture;
      return this.apiClient.callApi(
        '/videos/{video_id}/timelinethumbnails/{thumbnail_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoEmbedPreset operation.
     * @callback module:api/EmbedPresetsVideosApi~getVideoEmbedPresetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if an embed preset has been added to a video
     * @param {Number} presetId The ID of the preset.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/EmbedPresetsVideosApi~getVideoEmbedPresetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getVideoEmbedPreset(presetId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'presetId' is set
      if (presetId === undefined || presetId === null) {
        throw new Error("Missing the required parameter 'presetId' when calling getVideoEmbedPreset");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoEmbedPreset");
      }

      let pathParams = {
        'preset_id': presetId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/videos/{video_id}/presets/{preset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
