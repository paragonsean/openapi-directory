/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateProjectAlt1Request from '../model/CreateProjectAlt1Request';
import Error from '../model/Error';
import Project from '../model/Project';

/**
* ProjectsEssentials service.
* @module api/ProjectsEssentialsApi
* @version 3.4
*/
export default class ProjectsEssentialsApi {

    /**
    * Constructs a new ProjectsEssentialsApi. 
    * @alias module:api/ProjectsEssentialsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/ProjectsEssentialsApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project
     * This method creates a new project for the specified user.
     * @param {Number} userId The ID of the user.
     * @param {module:model/CreateProjectAlt1Request} createProjectAlt1Request 
     * @param {module:api/ProjectsEssentialsApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    createProject(userId, createProjectAlt1Request, callback) {
      let postBody = createProjectAlt1Request;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling createProject");
      }
      // verify the required parameter 'createProjectAlt1Request' is set
      if (createProjectAlt1Request === undefined || createProjectAlt1Request === null) {
        throw new Error("Missing the required parameter 'createProjectAlt1Request' when calling createProject");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/users/{user_id}/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProjectAlt1 operation.
     * @callback module:api/ProjectsEssentialsApi~createProjectAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project
     * This method creates a new project for the specified user.
     * @param {module:model/CreateProjectAlt1Request} createProjectAlt1Request 
     * @param {module:api/ProjectsEssentialsApi~createProjectAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    createProjectAlt1(createProjectAlt1Request, callback) {
      let postBody = createProjectAlt1Request;
      // verify the required parameter 'createProjectAlt1Request' is set
      if (createProjectAlt1Request === undefined || createProjectAlt1Request === null) {
        throw new Error("Missing the required parameter 'createProjectAlt1Request' when calling createProjectAlt1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/me/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/ProjectsEssentialsApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project
     * This method deletes a project and optionally also the videos that it contains.
     * @param {Number} projectId The ID of the project.
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [shouldDeleteClips] Whether to delete all the videos in the project along with the project itself.
     * @param {module:api/ProjectsEssentialsApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProject(projectId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteProject");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteProject");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
        'should_delete_clips': opts['shouldDeleteClips']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/projects/{project_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectAlt1 operation.
     * @callback module:api/ProjectsEssentialsApi~deleteProjectAlt1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project
     * This method deletes a project and optionally also the videos that it contains.
     * @param {Number} projectId The ID of the project.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [shouldDeleteClips] Whether to delete all the videos in the project along with the project itself.
     * @param {module:api/ProjectsEssentialsApi~deleteProjectAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProjectAlt1(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteProjectAlt1");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
        'should_delete_clips': opts['shouldDeleteClips']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me/projects/{project_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editProject operation.
     * @callback module:api/ProjectsEssentialsApi~editProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a project
     * This method edits an existing project.
     * @param {Number} projectId The ID of the project.
     * @param {Number} userId The ID of the user.
     * @param {module:model/CreateProjectAlt1Request} createProjectAlt1Request 
     * @param {module:api/ProjectsEssentialsApi~editProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    editProject(projectId, userId, createProjectAlt1Request, callback) {
      let postBody = createProjectAlt1Request;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling editProject");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling editProject");
      }
      // verify the required parameter 'createProjectAlt1Request' is set
      if (createProjectAlt1Request === undefined || createProjectAlt1Request === null) {
        throw new Error("Missing the required parameter 'createProjectAlt1Request' when calling editProject");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/users/{user_id}/projects/{project_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editProjectAlt1 operation.
     * @callback module:api/ProjectsEssentialsApi~editProjectAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a project
     * This method edits an existing project.
     * @param {Number} projectId The ID of the project.
     * @param {module:model/CreateProjectAlt1Request} createProjectAlt1Request 
     * @param {module:api/ProjectsEssentialsApi~editProjectAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    editProjectAlt1(projectId, createProjectAlt1Request, callback) {
      let postBody = createProjectAlt1Request;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling editProjectAlt1");
      }
      // verify the required parameter 'createProjectAlt1Request' is set
      if (createProjectAlt1Request === undefined || createProjectAlt1Request === null) {
        throw new Error("Missing the required parameter 'createProjectAlt1Request' when calling editProjectAlt1");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/me/projects/{project_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/ProjectsEssentialsApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific project
     * This method gets a single project that belongs to the specified user.
     * @param {Number} projectId The ID of the project.
     * @param {Number} userId The ID of the user.
     * @param {module:api/ProjectsEssentialsApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    getProject(projectId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProject");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getProject");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/users/{user_id}/projects/{project_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectAlt1 operation.
     * @callback module:api/ProjectsEssentialsApi~getProjectAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific project
     * This method gets a single project that belongs to the specified user.
     * @param {Number} projectId The ID of the project.
     * @param {module:api/ProjectsEssentialsApi~getProjectAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    getProjectAlt1(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectAlt1");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/me/projects/{project_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjects operation.
     * @callback module:api/ProjectsEssentialsApi~getProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the projects that belong to a user
     * This method gets all the projects that belong to the specified user.
     * @param {Number} userId The ID of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/ProjectsEssentialsApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    getProjects(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getProjects");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/users/{user_id}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectsAlt1 operation.
     * @callback module:api/ProjectsEssentialsApi~getProjectsAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the projects that belong to a user
     * This method gets all the projects that belong to the specified user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/ProjectsEssentialsApi~getProjectsAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    getProjectsAlt1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/me/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
