/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Category from '../model/Category';
import LegacyError from '../model/LegacyError';
import SuggestVideoCategoryRequest from '../model/SuggestVideoCategoryRequest';
import Video from '../model/Video';

/**
* CategoriesVideos service.
* @module api/CategoriesVideosApi
* @version 3.4
*/
export default class CategoriesVideosApi {

    /**
    * Constructs a new CategoriesVideosApi. 
    * @alias module:api/CategoriesVideosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkCategoryForVideo operation.
     * @callback module:api/CategoriesVideosApi~checkCategoryForVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check for a video in a category
     * @param {String} category The name of the category.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/CategoriesVideosApi~checkCategoryForVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    checkCategoryForVideo(category, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling checkCategoryForVideo");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling checkCategoryForVideo");
      }

      let pathParams = {
        'category': category,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/categories/{category}/videos/{video_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryVideos operation.
     * @callback module:api/CategoriesVideosApi~getCategoryVideosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Video>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the videos in a category
     * @param {String} category The name of the category.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.  Option descriptions:  * `conditional_featured` - Featured (promoted) videos 
     * @param {Boolean} [filterEmbeddable] Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/CategoriesVideosApi~getCategoryVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Video>}
     */
    getCategoryVideos(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling getCategoryVideos");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': opts['filter'],
        'filter_embeddable': opts['filterEmbeddable'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video+json'];
      let returnType = [Video];
      return this.apiClient.callApi(
        '/categories/{category}/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoCategories operation.
     * @callback module:api/CategoriesVideosApi~getVideoCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Category>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the categories to which a video belongs
     * @param {Number} videoId The ID of the video.
     * @param {module:api/CategoriesVideosApi~getVideoCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Category>}
     */
    getVideoCategories(videoId, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoCategories");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.category+json'];
      let returnType = [Category];
      return this.apiClient.callApi(
        '/videos/{video_id}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suggestVideoCategory operation.
     * @callback module:api/CategoriesVideosApi~suggestVideoCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suggest categories for a video
     * With this method, you can suggest up to two categories and one subcategory for a video. Vimeo makes the final determination about whether the video belongs in these categories.
     * @param {Number} videoId The ID of the video.
     * @param {module:model/SuggestVideoCategoryRequest} suggestVideoCategoryRequest 
     * @param {module:api/CategoriesVideosApi~suggestVideoCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Category}
     */
    suggestVideoCategory(videoId, suggestVideoCategoryRequest, callback) {
      let postBody = suggestVideoCategoryRequest;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling suggestVideoCategory");
      }
      // verify the required parameter 'suggestVideoCategoryRequest' is set
      if (suggestVideoCategoryRequest === undefined || suggestVideoCategoryRequest === null) {
        throw new Error("Missing the required parameter 'suggestVideoCategoryRequest' when calling suggestVideoCategory");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.category+json'];
      let accepts = ['application/vnd.vimeo.category+json'];
      let returnType = Category;
      return this.apiClient.callApi(
        '/videos/{video_id}/categories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
