/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LegacyError from '../model/LegacyError';
import OnDemandGenre from '../model/OnDemandGenre';
import OnDemandPage from '../model/OnDemandPage';

/**
* OnDemandGenres service.
* @module api/OnDemandGenresApi
* @version 3.4
*/
export default class OnDemandGenresApi {

    /**
    * Constructs a new OnDemandGenresApi. 
    * @alias module:api/OnDemandGenresApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVodGenre operation.
     * @callback module:api/OnDemandGenresApi~addVodGenreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnDemandGenre} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a genre to an On Demand page
     * @param {String} genreId The ID of the genre.
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {module:api/OnDemandGenresApi~addVodGenreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnDemandGenre}
     */
    addVodGenre(genreId, ondemandId, callback) {
      let postBody = null;
      // verify the required parameter 'genreId' is set
      if (genreId === undefined || genreId === null) {
        throw new Error("Missing the required parameter 'genreId' when calling addVodGenre");
      }
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling addVodGenre");
      }

      let pathParams = {
        'genre_id': genreId,
        'ondemand_id': ondemandId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.genre+json'];
      let returnType = OnDemandGenre;
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/genres/{genre_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVodGenre operation.
     * @callback module:api/OnDemandGenresApi~deleteVodGenreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a genre from an On Demand page
     * @param {String} genreId The ID of the genre.
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {module:api/OnDemandGenresApi~deleteVodGenreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVodGenre(genreId, ondemandId, callback) {
      let postBody = null;
      // verify the required parameter 'genreId' is set
      if (genreId === undefined || genreId === null) {
        throw new Error("Missing the required parameter 'genreId' when calling deleteVodGenre");
      }
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling deleteVodGenre");
      }

      let pathParams = {
        'genre_id': genreId,
        'ondemand_id': ondemandId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.genre+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/genres/{genre_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenreVod operation.
     * @callback module:api/OnDemandGenresApi~getGenreVodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnDemandPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific On Demand page in a genre
     * Check whether a genre contains an On Demand page.
     * @param {String} genreId The ID of the genre.
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {module:api/OnDemandGenresApi~getGenreVodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnDemandPage}
     */
    getGenreVod(genreId, ondemandId, callback) {
      let postBody = null;
      // verify the required parameter 'genreId' is set
      if (genreId === undefined || genreId === null) {
        throw new Error("Missing the required parameter 'genreId' when calling getGenreVod");
      }
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling getGenreVod");
      }

      let pathParams = {
        'genre_id': genreId,
        'ondemand_id': ondemandId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.page+json'];
      let returnType = OnDemandPage;
      return this.apiClient.callApi(
        '/ondemand/genres/{genre_id}/pages/{ondemand_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGenreVods operation.
     * @callback module:api/OnDemandGenresApi~getGenreVodsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OnDemandPage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the On Demand pages in a genre
     * @param {String} genreId The ID of the genre.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {module:model/String} [filter] The attribute by which to filter the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {String} [query] The search query to use to filter the results.
     * @param {module:model/String} [sort] The way to sort the results.
     * @param {module:api/OnDemandGenresApi~getGenreVodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OnDemandPage>}
     */
    getGenreVods(genreId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'genreId' is set
      if (genreId === undefined || genreId === null) {
        throw new Error("Missing the required parameter 'genreId' when calling getGenreVods");
      }

      let pathParams = {
        'genre_id': genreId
      };
      let queryParams = {
        'direction': opts['direction'],
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.page+json'];
      let returnType = [OnDemandPage];
      return this.apiClient.callApi(
        '/ondemand/genres/{genre_id}/pages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVodGenre operation.
     * @callback module:api/OnDemandGenresApi~getVodGenreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnDemandGenre} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific On Demand genre
     * @param {String} genreId The ID of the genre.
     * @param {module:api/OnDemandGenresApi~getVodGenreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnDemandGenre}
     */
    getVodGenre(genreId, callback) {
      let postBody = null;
      // verify the required parameter 'genreId' is set
      if (genreId === undefined || genreId === null) {
        throw new Error("Missing the required parameter 'genreId' when calling getVodGenre");
      }

      let pathParams = {
        'genre_id': genreId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.genre+json'];
      let returnType = OnDemandGenre;
      return this.apiClient.callApi(
        '/ondemand/genres/{genre_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVodGenreByOndemandId operation.
     * @callback module:api/OnDemandGenresApi~getVodGenreByOndemandIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnDemandGenre} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether an On Demand page belongs to a genre
     * @param {String} genreId The ID of the genre.
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {module:api/OnDemandGenresApi~getVodGenreByOndemandIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnDemandGenre}
     */
    getVodGenreByOndemandId(genreId, ondemandId, callback) {
      let postBody = null;
      // verify the required parameter 'genreId' is set
      if (genreId === undefined || genreId === null) {
        throw new Error("Missing the required parameter 'genreId' when calling getVodGenreByOndemandId");
      }
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling getVodGenreByOndemandId");
      }

      let pathParams = {
        'genre_id': genreId,
        'ondemand_id': ondemandId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.genre+json'];
      let returnType = OnDemandGenre;
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/genres/{genre_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVodGenres operation.
     * @callback module:api/OnDemandGenresApi~getVodGenresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OnDemandGenre>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all On Demand genres
     * @param {module:api/OnDemandGenresApi~getVodGenresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OnDemandGenre>}
     */
    getVodGenres(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.genre+json'];
      let returnType = [OnDemandGenre];
      return this.apiClient.callApi(
        '/ondemand/genres', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVodGenresByOndemandId operation.
     * @callback module:api/OnDemandGenresApi~getVodGenresByOndemandIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OnDemandGenre>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the genres of an On Demand page
     * @param {Number} ondemandId The ID of the On Demand.
     * @param {module:api/OnDemandGenresApi~getVodGenresByOndemandIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OnDemandGenre>}
     */
    getVodGenresByOndemandId(ondemandId, callback) {
      let postBody = null;
      // verify the required parameter 'ondemandId' is set
      if (ondemandId === undefined || ondemandId === null) {
        throw new Error("Missing the required parameter 'ondemandId' when calling getVodGenresByOndemandId");
      }

      let pathParams = {
        'ondemand_id': ondemandId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.ondemand.genre+json'];
      let returnType = [OnDemandGenre];
      return this.apiClient.callApi(
        '/ondemand/pages/{ondemand_id}/genres', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
