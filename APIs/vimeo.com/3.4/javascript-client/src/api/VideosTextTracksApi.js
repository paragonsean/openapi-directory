/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTextTrackAlt1Request from '../model/CreateTextTrackAlt1Request';
import EditTextTrackRequest from '../model/EditTextTrackRequest';
import Error from '../model/Error';
import LegacyError from '../model/LegacyError';
import TextTrack from '../model/TextTrack';

/**
* VideosTextTracks service.
* @module api/VideosTextTracksApi
* @version 3.4
*/
export default class VideosTextTracksApi {

    /**
    * Constructs a new VideosTextTracksApi. 
    * @alias module:api/VideosTextTracksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTextTrack operation.
     * @callback module:api/VideosTextTracksApi~createTextTrackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a text track to a video
     * For additional information, see our [text track upload guide](https://developer.vimeo.com/api/upload/texttracks).
     * @param {Number} videoId The ID of the video.
     * @param {module:model/CreateTextTrackAlt1Request} createTextTrackAlt1Request 
     * @param {module:api/VideosTextTracksApi~createTextTrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextTrack}
     */
    createTextTrack(videoId, createTextTrackAlt1Request, callback) {
      let postBody = createTextTrackAlt1Request;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling createTextTrack");
      }
      // verify the required parameter 'createTextTrackAlt1Request' is set
      if (createTextTrackAlt1Request === undefined || createTextTrackAlt1Request === null) {
        throw new Error("Missing the required parameter 'createTextTrackAlt1Request' when calling createTextTrack");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.video.texttrack+json'];
      let accepts = ['application/vnd.vimeo.video.texttrack+json'];
      let returnType = TextTrack;
      return this.apiClient.callApi(
        '/videos/{video_id}/texttracks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTextTrackAlt1 operation.
     * @callback module:api/VideosTextTracksApi~createTextTrackAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TextTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a text track to a video
     * For additional information, see our [text track upload guide](https://developer.vimeo.com/api/upload/texttracks).
     * @param {Number} channelId The ID of the channel.
     * @param {Number} videoId The ID of the video.
     * @param {module:model/CreateTextTrackAlt1Request} createTextTrackAlt1Request 
     * @param {module:api/VideosTextTracksApi~createTextTrackAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextTrack}
     */
    createTextTrackAlt1(channelId, videoId, createTextTrackAlt1Request, callback) {
      let postBody = createTextTrackAlt1Request;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling createTextTrackAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling createTextTrackAlt1");
      }
      // verify the required parameter 'createTextTrackAlt1Request' is set
      if (createTextTrackAlt1Request === undefined || createTextTrackAlt1Request === null) {
        throw new Error("Missing the required parameter 'createTextTrackAlt1Request' when calling createTextTrackAlt1");
      }

      let pathParams = {
        'channel_id': channelId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.video.texttrack+json'];
      let accepts = ['application/vnd.vimeo.video.texttrack+json'];
      let returnType = TextTrack;
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos/{video_id}/texttracks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTextTrack operation.
     * @callback module:api/VideosTextTracksApi~deleteTextTrackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a text track
     * @param {Number} texttrackId The ID of the text track.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosTextTracksApi~deleteTextTrackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTextTrack(texttrackId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'texttrackId' is set
      if (texttrackId === undefined || texttrackId === null) {
        throw new Error("Missing the required parameter 'texttrackId' when calling deleteTextTrack");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteTextTrack");
      }

      let pathParams = {
        'texttrack_id': texttrackId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video.texttrack+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/videos/{video_id}/texttracks/{texttrack_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editTextTrack operation.
     * @callback module:api/VideosTextTracksApi~editTextTrackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a text track
     * @param {Number} texttrackId The ID of the text track.
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditTextTrackRequest} [editTextTrackRequest] 
     * @param {module:api/VideosTextTracksApi~editTextTrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextTrack}
     */
    editTextTrack(texttrackId, videoId, opts, callback) {
      opts = opts || {};
      let postBody = opts['editTextTrackRequest'];
      // verify the required parameter 'texttrackId' is set
      if (texttrackId === undefined || texttrackId === null) {
        throw new Error("Missing the required parameter 'texttrackId' when calling editTextTrack");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling editTextTrack");
      }

      let pathParams = {
        'texttrack_id': texttrackId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.video.texttrack+json'];
      let accepts = ['application/vnd.vimeo.video.texttrack+json'];
      let returnType = TextTrack;
      return this.apiClient.callApi(
        '/videos/{video_id}/texttracks/{texttrack_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextTrack operation.
     * @callback module:api/VideosTextTracksApi~getTextTrackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific text track
     * @param {Number} texttrackId The ID of the text track.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosTextTracksApi~getTextTrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextTrack}
     */
    getTextTrack(texttrackId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'texttrackId' is set
      if (texttrackId === undefined || texttrackId === null) {
        throw new Error("Missing the required parameter 'texttrackId' when calling getTextTrack");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getTextTrack");
      }

      let pathParams = {
        'texttrack_id': texttrackId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video.texttrack+json'];
      let returnType = TextTrack;
      return this.apiClient.callApi(
        '/videos/{video_id}/texttracks/{texttrack_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextTracks operation.
     * @callback module:api/VideosTextTracksApi~getTextTracksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TextTrack>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the text tracks of a video
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosTextTracksApi~getTextTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TextTrack>}
     */
    getTextTracks(videoId, callback) {
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getTextTracks");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video.texttrack+json'];
      let returnType = [TextTrack];
      return this.apiClient.callApi(
        '/videos/{video_id}/texttracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextTracksAlt1 operation.
     * @callback module:api/VideosTextTracksApi~getTextTracksAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TextTrack>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the text tracks of a video
     * @param {Number} channelId The ID of the channel.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosTextTracksApi~getTextTracksAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TextTrack>}
     */
    getTextTracksAlt1(channelId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getTextTracksAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getTextTracksAlt1");
      }

      let pathParams = {
        'channel_id': channelId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.video.texttrack+json'];
      let returnType = [TextTrack];
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos/{video_id}/texttracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
