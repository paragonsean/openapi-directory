/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Comment from '../model/Comment';
import CreateCommentAlt1Request from '../model/CreateCommentAlt1Request';
import CreateCommentReplyRequest from '../model/CreateCommentReplyRequest';
import EditCommentRequest from '../model/EditCommentRequest';
import Error from '../model/Error';
import LegacyError from '../model/LegacyError';

/**
* VideosComments service.
* @module api/VideosCommentsApi
* @version 3.4
*/
export default class VideosCommentsApi {

    /**
    * Constructs a new VideosCommentsApi. 
    * @alias module:api/VideosCommentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createComment operation.
     * @callback module:api/VideosCommentsApi~createCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a comment to a video
     * @param {Number} videoId The ID of the video.
     * @param {module:model/CreateCommentAlt1Request} createCommentAlt1Request 
     * @param {module:api/VideosCommentsApi~createCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    createComment(videoId, createCommentAlt1Request, callback) {
      let postBody = createCommentAlt1Request;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling createComment");
      }
      // verify the required parameter 'createCommentAlt1Request' is set
      if (createCommentAlt1Request === undefined || createCommentAlt1Request === null) {
        throw new Error("Missing the required parameter 'createCommentAlt1Request' when calling createComment");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.comment+json'];
      let accepts = ['application/vnd.vimeo.comment+json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/videos/{video_id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCommentAlt1 operation.
     * @callback module:api/VideosCommentsApi~createCommentAlt1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a comment to a video
     * @param {Number} channelId The ID of the channel.
     * @param {Number} videoId The ID of the video.
     * @param {module:model/CreateCommentAlt1Request} createCommentAlt1Request 
     * @param {module:api/VideosCommentsApi~createCommentAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    createCommentAlt1(channelId, videoId, createCommentAlt1Request, callback) {
      let postBody = createCommentAlt1Request;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling createCommentAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling createCommentAlt1");
      }
      // verify the required parameter 'createCommentAlt1Request' is set
      if (createCommentAlt1Request === undefined || createCommentAlt1Request === null) {
        throw new Error("Missing the required parameter 'createCommentAlt1Request' when calling createCommentAlt1");
      }

      let pathParams = {
        'channel_id': channelId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.comment+json'];
      let accepts = ['application/vnd.vimeo.comment+json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos/{video_id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCommentReply operation.
     * @callback module:api/VideosCommentsApi~createCommentReplyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a reply to a video comment
     * @param {Number} commentId The ID of the comment.
     * @param {Number} videoId The ID of the video.
     * @param {module:model/CreateCommentReplyRequest} createCommentReplyRequest 
     * @param {module:api/VideosCommentsApi~createCommentReplyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    createCommentReply(commentId, videoId, createCommentReplyRequest, callback) {
      let postBody = createCommentReplyRequest;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling createCommentReply");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling createCommentReply");
      }
      // verify the required parameter 'createCommentReplyRequest' is set
      if (createCommentReplyRequest === undefined || createCommentReplyRequest === null) {
        throw new Error("Missing the required parameter 'createCommentReplyRequest' when calling createCommentReply");
      }

      let pathParams = {
        'comment_id': commentId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.comment+json'];
      let accepts = ['application/vnd.vimeo.comment+json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/videos/{video_id}/comments/{comment_id}/replies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComment operation.
     * @callback module:api/VideosCommentsApi~deleteCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a video comment
     * @param {Number} commentId The ID of the comment.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosCommentsApi~deleteCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteComment(commentId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling deleteComment");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteComment");
      }

      let pathParams = {
        'comment_id': commentId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/videos/{video_id}/comments/{comment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editComment operation.
     * @callback module:api/VideosCommentsApi~editCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a video comment
     * @param {Number} commentId The ID of the comment.
     * @param {Number} videoId The ID of the video.
     * @param {module:model/EditCommentRequest} editCommentRequest 
     * @param {module:api/VideosCommentsApi~editCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    editComment(commentId, videoId, editCommentRequest, callback) {
      let postBody = editCommentRequest;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling editComment");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling editComment");
      }
      // verify the required parameter 'editCommentRequest' is set
      if (editCommentRequest === undefined || editCommentRequest === null) {
        throw new Error("Missing the required parameter 'editCommentRequest' when calling editComment");
      }

      let pathParams = {
        'comment_id': commentId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = ['application/vnd.vimeo.comment+json'];
      let accepts = ['application/vnd.vimeo.comment+json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/videos/{video_id}/comments/{comment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComment operation.
     * @callback module:api/VideosCommentsApi~getCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific video comment
     * @param {Number} commentId The ID of the comment.
     * @param {Number} videoId The ID of the video.
     * @param {module:api/VideosCommentsApi~getCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    getComment(commentId, videoId, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling getComment");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getComment");
      }

      let pathParams = {
        'comment_id': commentId,
        'video_id': videoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.comment+json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/videos/{video_id}/comments/{comment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentReplies operation.
     * @callback module:api/VideosCommentsApi~getCommentRepliesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the replies to a video comment
     * @param {Number} commentId The ID of the comment.
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/VideosCommentsApi~getCommentRepliesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    getCommentReplies(commentId, videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling getCommentReplies");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getCommentReplies");
      }

      let pathParams = {
        'comment_id': commentId,
        'video_id': videoId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.comment+json'];
      let returnType = [Comment];
      return this.apiClient.callApi(
        '/videos/{video_id}/comments/{comment_id}/replies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComments operation.
     * @callback module:api/VideosCommentsApi~getCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the comments on a video
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/VideosCommentsApi~getCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    getComments(videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getComments");
      }

      let pathParams = {
        'video_id': videoId
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.comment+json'];
      let returnType = [Comment];
      return this.apiClient.callApi(
        '/videos/{video_id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommentsAlt1 operation.
     * @callback module:api/VideosCommentsApi~getCommentsAlt1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the comments on a video
     * @param {Number} channelId The ID of the channel.
     * @param {Number} videoId The ID of the video.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction] The sort direction of the results.
     * @param {Number} [page] The page number of the results to show.
     * @param {Number} [perPage] The number of items to show on each page of results, up to a maximum of 100.
     * @param {module:api/VideosCommentsApi~getCommentsAlt1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    getCommentsAlt1(channelId, videoId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getCommentsAlt1");
      }
      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getCommentsAlt1");
      }

      let pathParams = {
        'channel_id': channelId,
        'video_id': videoId
      };
      let queryParams = {
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/vnd.vimeo.comment+json'];
      let returnType = [Comment];
      return this.apiClient.callApi(
        '/channels/{channel_id}/videos/{video_id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
