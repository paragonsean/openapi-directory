/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_metadata_interactions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_metadata_interactions::OAIVideo_metadata_interactions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_metadata_interactions::OAIVideo_metadata_interactions() {
    this->initializeModel();
}

OAIVideo_metadata_interactions::~OAIVideo_metadata_interactions() {}

void OAIVideo_metadata_interactions::initializeModel() {

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_like_isSet = false;
    m_like_isValid = false;

    m_rent_isSet = false;
    m_rent_isValid = false;

    m_report_isSet = false;
    m_report_isValid = false;

    m_subscribe_isSet = false;
    m_subscribe_isValid = false;

    m_watched_isSet = false;
    m_watched_isValid = false;

    m_watchlater_isSet = false;
    m_watchlater_isValid = false;
}

void OAIVideo_metadata_interactions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_metadata_interactions::fromJsonObject(QJsonObject json) {

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_like_isValid = ::OpenAPI::fromJsonValue(m_like, json[QString("like")]);
    m_like_isSet = !json[QString("like")].isNull() && m_like_isValid;

    m_rent_isValid = ::OpenAPI::fromJsonValue(m_rent, json[QString("rent")]);
    m_rent_isSet = !json[QString("rent")].isNull() && m_rent_isValid;

    m_report_isValid = ::OpenAPI::fromJsonValue(m_report, json[QString("report")]);
    m_report_isSet = !json[QString("report")].isNull() && m_report_isValid;

    m_subscribe_isValid = ::OpenAPI::fromJsonValue(m_subscribe, json[QString("subscribe")]);
    m_subscribe_isSet = !json[QString("subscribe")].isNull() && m_subscribe_isValid;

    m_watched_isValid = ::OpenAPI::fromJsonValue(m_watched, json[QString("watched")]);
    m_watched_isSet = !json[QString("watched")].isNull() && m_watched_isValid;

    m_watchlater_isValid = ::OpenAPI::fromJsonValue(m_watchlater, json[QString("watchlater")]);
    m_watchlater_isSet = !json[QString("watchlater")].isNull() && m_watchlater_isValid;
}

QString OAIVideo_metadata_interactions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_metadata_interactions::asJsonObject() const {
    QJsonObject obj;
    if (m_buy.isSet()) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_like.isSet()) {
        obj.insert(QString("like"), ::OpenAPI::toJsonValue(m_like));
    }
    if (m_rent.isSet()) {
        obj.insert(QString("rent"), ::OpenAPI::toJsonValue(m_rent));
    }
    if (m_report.isSet()) {
        obj.insert(QString("report"), ::OpenAPI::toJsonValue(m_report));
    }
    if (m_subscribe.isSet()) {
        obj.insert(QString("subscribe"), ::OpenAPI::toJsonValue(m_subscribe));
    }
    if (m_watched.isSet()) {
        obj.insert(QString("watched"), ::OpenAPI::toJsonValue(m_watched));
    }
    if (m_watchlater.isSet()) {
        obj.insert(QString("watchlater"), ::OpenAPI::toJsonValue(m_watchlater));
    }
    return obj;
}

OAIVideo_metadata_interactions_buy OAIVideo_metadata_interactions::getBuy() const {
    return m_buy;
}
void OAIVideo_metadata_interactions::setBuy(const OAIVideo_metadata_interactions_buy &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAIVideo_metadata_interactions::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAIVideo_metadata_interactions::is_buy_Valid() const{
    return m_buy_isValid;
}

OAIVideo_metadata_interactions_channel OAIVideo_metadata_interactions::getChannel() const {
    return m_channel;
}
void OAIVideo_metadata_interactions::setChannel(const OAIVideo_metadata_interactions_channel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIVideo_metadata_interactions::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIVideo_metadata_interactions::is_channel_Valid() const{
    return m_channel_isValid;
}

OAIVideo_metadata_interactions_like OAIVideo_metadata_interactions::getLike() const {
    return m_like;
}
void OAIVideo_metadata_interactions::setLike(const OAIVideo_metadata_interactions_like &like) {
    m_like = like;
    m_like_isSet = true;
}

bool OAIVideo_metadata_interactions::is_like_Set() const{
    return m_like_isSet;
}

bool OAIVideo_metadata_interactions::is_like_Valid() const{
    return m_like_isValid;
}

OAIVideo_metadata_interactions_rent OAIVideo_metadata_interactions::getRent() const {
    return m_rent;
}
void OAIVideo_metadata_interactions::setRent(const OAIVideo_metadata_interactions_rent &rent) {
    m_rent = rent;
    m_rent_isSet = true;
}

bool OAIVideo_metadata_interactions::is_rent_Set() const{
    return m_rent_isSet;
}

bool OAIVideo_metadata_interactions::is_rent_Valid() const{
    return m_rent_isValid;
}

OAIVideo_metadata_interactions_report OAIVideo_metadata_interactions::getReport() const {
    return m_report;
}
void OAIVideo_metadata_interactions::setReport(const OAIVideo_metadata_interactions_report &report) {
    m_report = report;
    m_report_isSet = true;
}

bool OAIVideo_metadata_interactions::is_report_Set() const{
    return m_report_isSet;
}

bool OAIVideo_metadata_interactions::is_report_Valid() const{
    return m_report_isValid;
}

OAIVideo_metadata_interactions_subscribe OAIVideo_metadata_interactions::getSubscribe() const {
    return m_subscribe;
}
void OAIVideo_metadata_interactions::setSubscribe(const OAIVideo_metadata_interactions_subscribe &subscribe) {
    m_subscribe = subscribe;
    m_subscribe_isSet = true;
}

bool OAIVideo_metadata_interactions::is_subscribe_Set() const{
    return m_subscribe_isSet;
}

bool OAIVideo_metadata_interactions::is_subscribe_Valid() const{
    return m_subscribe_isValid;
}

OAIVideo_metadata_interactions_watched OAIVideo_metadata_interactions::getWatched() const {
    return m_watched;
}
void OAIVideo_metadata_interactions::setWatched(const OAIVideo_metadata_interactions_watched &watched) {
    m_watched = watched;
    m_watched_isSet = true;
}

bool OAIVideo_metadata_interactions::is_watched_Set() const{
    return m_watched_isSet;
}

bool OAIVideo_metadata_interactions::is_watched_Valid() const{
    return m_watched_isValid;
}

OAIVideo_metadata_interactions_watchlater OAIVideo_metadata_interactions::getWatchlater() const {
    return m_watchlater;
}
void OAIVideo_metadata_interactions::setWatchlater(const OAIVideo_metadata_interactions_watchlater &watchlater) {
    m_watchlater = watchlater;
    m_watchlater_isSet = true;
}

bool OAIVideo_metadata_interactions::is_watchlater_Set() const{
    return m_watchlater_isSet;
}

bool OAIVideo_metadata_interactions::is_watchlater_Valid() const{
    return m_watchlater_isValid;
}

bool OAIVideo_metadata_interactions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_like.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_watched.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchlater.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_metadata_interactions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_buy_isValid && m_channel_isValid && m_like_isValid && m_rent_isValid && m_report_isValid && m_watched_isValid && m_watchlater_isValid && true;
}

} // namespace OpenAPI
