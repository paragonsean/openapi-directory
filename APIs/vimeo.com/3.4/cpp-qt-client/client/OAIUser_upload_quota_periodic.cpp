/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_upload_quota_periodic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_upload_quota_periodic::OAIUser_upload_quota_periodic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_upload_quota_periodic::OAIUser_upload_quota_periodic() {
    this->initializeModel();
}

OAIUser_upload_quota_periodic::~OAIUser_upload_quota_periodic() {}

void OAIUser_upload_quota_periodic::initializeModel() {

    m_free_isSet = false;
    m_free_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_reset_date_isSet = false;
    m_reset_date_isValid = false;

    m_used_isSet = false;
    m_used_isValid = false;
}

void OAIUser_upload_quota_periodic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_upload_quota_periodic::fromJsonObject(QJsonObject json) {

    m_free_isValid = ::OpenAPI::fromJsonValue(m_free, json[QString("free")]);
    m_free_isSet = !json[QString("free")].isNull() && m_free_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_reset_date_isValid = ::OpenAPI::fromJsonValue(m_reset_date, json[QString("reset_date")]);
    m_reset_date_isSet = !json[QString("reset_date")].isNull() && m_reset_date_isValid;

    m_used_isValid = ::OpenAPI::fromJsonValue(m_used, json[QString("used")]);
    m_used_isSet = !json[QString("used")].isNull() && m_used_isValid;
}

QString OAIUser_upload_quota_periodic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_upload_quota_periodic::asJsonObject() const {
    QJsonObject obj;
    if (m_free_isSet) {
        obj.insert(QString("free"), ::OpenAPI::toJsonValue(m_free));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_reset_date_isSet) {
        obj.insert(QString("reset_date"), ::OpenAPI::toJsonValue(m_reset_date));
    }
    if (m_used_isSet) {
        obj.insert(QString("used"), ::OpenAPI::toJsonValue(m_used));
    }
    return obj;
}

double OAIUser_upload_quota_periodic::getFree() const {
    return m_free;
}
void OAIUser_upload_quota_periodic::setFree(const double &free) {
    m_free = free;
    m_free_isSet = true;
}

bool OAIUser_upload_quota_periodic::is_free_Set() const{
    return m_free_isSet;
}

bool OAIUser_upload_quota_periodic::is_free_Valid() const{
    return m_free_isValid;
}

double OAIUser_upload_quota_periodic::getMax() const {
    return m_max;
}
void OAIUser_upload_quota_periodic::setMax(const double &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIUser_upload_quota_periodic::is_max_Set() const{
    return m_max_isSet;
}

bool OAIUser_upload_quota_periodic::is_max_Valid() const{
    return m_max_isValid;
}

QString OAIUser_upload_quota_periodic::getResetDate() const {
    return m_reset_date;
}
void OAIUser_upload_quota_periodic::setResetDate(const QString &reset_date) {
    m_reset_date = reset_date;
    m_reset_date_isSet = true;
}

bool OAIUser_upload_quota_periodic::is_reset_date_Set() const{
    return m_reset_date_isSet;
}

bool OAIUser_upload_quota_periodic::is_reset_date_Valid() const{
    return m_reset_date_isValid;
}

double OAIUser_upload_quota_periodic::getUsed() const {
    return m_used;
}
void OAIUser_upload_quota_periodic::setUsed(const double &used) {
    m_used = used;
    m_used_isSet = true;
}

bool OAIUser_upload_quota_periodic::is_used_Set() const{
    return m_used_isSet;
}

bool OAIUser_upload_quota_periodic::is_used_Valid() const{
    return m_used_isValid;
}

bool OAIUser_upload_quota_periodic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_upload_quota_periodic::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_free_isValid && m_max_isValid && m_reset_date_isValid && m_used_isValid && true;
}

} // namespace OpenAPI
