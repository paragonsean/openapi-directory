/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEmbedPresetsVideosApi_H
#define OAI_OAIEmbedPresetsVideosApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILegacy_error.h"
#include "OAIPicture.h"
#include "OAIVideo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEmbedPresetsVideosApi : public QObject {
    Q_OBJECT

public:
    OAIEmbedPresetsVideosApi(const int timeOut = 0);
    ~OAIEmbedPresetsVideosApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  preset_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void addVideoEmbedPreset(const double &preset_id, const double &video_id);

    /**
    * @param[in]  video_id double [required]
    */
    virtual void createVideoCustomLogo(const double &video_id);

    /**
    * @param[in]  preset_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void deleteVideoEmbedPreset(const double &preset_id, const double &video_id);

    /**
    * @param[in]  preset_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getEmbedPresetVideos(const double &preset_id, const double &user_id, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  preset_id double [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getEmbedPresetVideosAlt1(const double &preset_id, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  thumbnail_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void getVideoCustomLogo(const double &thumbnail_id, const double &video_id);

    /**
    * @param[in]  preset_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void getVideoEmbedPreset(const double &preset_id, const double &video_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addVideoEmbedPresetCallback(OAIHttpRequestWorker *worker);
    void createVideoCustomLogoCallback(OAIHttpRequestWorker *worker);
    void deleteVideoEmbedPresetCallback(OAIHttpRequestWorker *worker);
    void getEmbedPresetVideosCallback(OAIHttpRequestWorker *worker);
    void getEmbedPresetVideosAlt1Callback(OAIHttpRequestWorker *worker);
    void getVideoCustomLogoCallback(OAIHttpRequestWorker *worker);
    void getVideoEmbedPresetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addVideoEmbedPresetSignal();
    void createVideoCustomLogoSignal(OAIPicture summary);
    void deleteVideoEmbedPresetSignal();
    void getEmbedPresetVideosSignal(QList<OAIVideo> summary);
    void getEmbedPresetVideosAlt1Signal(QList<OAIVideo> summary);
    void getVideoCustomLogoSignal(OAIPicture summary);
    void getVideoEmbedPresetSignal();


    void addVideoEmbedPresetSignalFull(OAIHttpRequestWorker *worker);
    void createVideoCustomLogoSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void deleteVideoEmbedPresetSignalFull(OAIHttpRequestWorker *worker);
    void getEmbedPresetVideosSignalFull(OAIHttpRequestWorker *worker, QList<OAIVideo> summary);
    void getEmbedPresetVideosAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIVideo> summary);
    void getVideoCustomLogoSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void getVideoEmbedPresetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addVideoEmbedPresetSignalError() instead")
    void addVideoEmbedPresetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoEmbedPresetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVideoCustomLogoSignalError() instead")
    void createVideoCustomLogoSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVideoCustomLogoSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoEmbedPresetSignalError() instead")
    void deleteVideoEmbedPresetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoEmbedPresetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmbedPresetVideosSignalError() instead")
    void getEmbedPresetVideosSignalE(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmbedPresetVideosSignalError(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmbedPresetVideosAlt1SignalError() instead")
    void getEmbedPresetVideosAlt1SignalE(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmbedPresetVideosAlt1SignalError(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCustomLogoSignalError() instead")
    void getVideoCustomLogoSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCustomLogoSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoEmbedPresetSignalError() instead")
    void getVideoEmbedPresetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoEmbedPresetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addVideoEmbedPresetSignalErrorFull() instead")
    void addVideoEmbedPresetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoEmbedPresetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVideoCustomLogoSignalErrorFull() instead")
    void createVideoCustomLogoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVideoCustomLogoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoEmbedPresetSignalErrorFull() instead")
    void deleteVideoEmbedPresetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoEmbedPresetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmbedPresetVideosSignalErrorFull() instead")
    void getEmbedPresetVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmbedPresetVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmbedPresetVideosAlt1SignalErrorFull() instead")
    void getEmbedPresetVideosAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmbedPresetVideosAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCustomLogoSignalErrorFull() instead")
    void getVideoCustomLogoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCustomLogoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoEmbedPresetSignalErrorFull() instead")
    void getVideoEmbedPresetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoEmbedPresetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
