/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_upload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_upload::OAIVideo_upload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_upload::OAIVideo_upload() {
    this->initializeModel();
}

OAIVideo_upload::~OAIVideo_upload() {}

void OAIVideo_upload::initializeModel() {

    m_approach_isSet = false;
    m_approach_isValid = false;

    m_complete_uri_isSet = false;
    m_complete_uri_isValid = false;

    m_form_isSet = false;
    m_form_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_upload_link_isSet = false;
    m_upload_link_isValid = false;
}

void OAIVideo_upload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_upload::fromJsonObject(QJsonObject json) {

    m_approach_isValid = ::OpenAPI::fromJsonValue(m_approach, json[QString("approach")]);
    m_approach_isSet = !json[QString("approach")].isNull() && m_approach_isValid;

    m_complete_uri_isValid = ::OpenAPI::fromJsonValue(m_complete_uri, json[QString("complete_uri")]);
    m_complete_uri_isSet = !json[QString("complete_uri")].isNull() && m_complete_uri_isValid;

    m_form_isValid = ::OpenAPI::fromJsonValue(m_form, json[QString("form")]);
    m_form_isSet = !json[QString("form")].isNull() && m_form_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("redirect_url")]);
    m_redirect_url_isSet = !json[QString("redirect_url")].isNull() && m_redirect_url_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_upload_link_isValid = ::OpenAPI::fromJsonValue(m_upload_link, json[QString("upload_link")]);
    m_upload_link_isSet = !json[QString("upload_link")].isNull() && m_upload_link_isValid;
}

QString OAIVideo_upload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_upload::asJsonObject() const {
    QJsonObject obj;
    if (m_approach_isSet) {
        obj.insert(QString("approach"), ::OpenAPI::toJsonValue(m_approach));
    }
    if (m_complete_uri_isSet) {
        obj.insert(QString("complete_uri"), ::OpenAPI::toJsonValue(m_complete_uri));
    }
    if (m_form_isSet) {
        obj.insert(QString("form"), ::OpenAPI::toJsonValue(m_form));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirect_url"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_upload_link_isSet) {
        obj.insert(QString("upload_link"), ::OpenAPI::toJsonValue(m_upload_link));
    }
    return obj;
}

QString OAIVideo_upload::getApproach() const {
    return m_approach;
}
void OAIVideo_upload::setApproach(const QString &approach) {
    m_approach = approach;
    m_approach_isSet = true;
}

bool OAIVideo_upload::is_approach_Set() const{
    return m_approach_isSet;
}

bool OAIVideo_upload::is_approach_Valid() const{
    return m_approach_isValid;
}

QString OAIVideo_upload::getCompleteUri() const {
    return m_complete_uri;
}
void OAIVideo_upload::setCompleteUri(const QString &complete_uri) {
    m_complete_uri = complete_uri;
    m_complete_uri_isSet = true;
}

bool OAIVideo_upload::is_complete_uri_Set() const{
    return m_complete_uri_isSet;
}

bool OAIVideo_upload::is_complete_uri_Valid() const{
    return m_complete_uri_isValid;
}

QString OAIVideo_upload::getForm() const {
    return m_form;
}
void OAIVideo_upload::setForm(const QString &form) {
    m_form = form;
    m_form_isSet = true;
}

bool OAIVideo_upload::is_form_Set() const{
    return m_form_isSet;
}

bool OAIVideo_upload::is_form_Valid() const{
    return m_form_isValid;
}

QString OAIVideo_upload::getLink() const {
    return m_link;
}
void OAIVideo_upload::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIVideo_upload::is_link_Set() const{
    return m_link_isSet;
}

bool OAIVideo_upload::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIVideo_upload::getRedirectUrl() const {
    return m_redirect_url;
}
void OAIVideo_upload::setRedirectUrl(const QString &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAIVideo_upload::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAIVideo_upload::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

double OAIVideo_upload::getSize() const {
    return m_size;
}
void OAIVideo_upload::setSize(const double &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIVideo_upload::is_size_Set() const{
    return m_size_isSet;
}

bool OAIVideo_upload::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIVideo_upload::getStatus() const {
    return m_status;
}
void OAIVideo_upload::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVideo_upload::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVideo_upload::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIVideo_upload::getUploadLink() const {
    return m_upload_link;
}
void OAIVideo_upload::setUploadLink(const QString &upload_link) {
    m_upload_link = upload_link;
    m_upload_link_isSet = true;
}

bool OAIVideo_upload::is_upload_link_Set() const{
    return m_upload_link_isSet;
}

bool OAIVideo_upload::is_upload_link_Valid() const{
    return m_upload_link_isValid;
}

bool OAIVideo_upload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approach_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_upload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
