/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIText_track.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIText_track::OAIText_track(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIText_track::OAIText_track() {
    this->initializeModel();
}

OAIText_track::~OAIText_track() {}

void OAIText_track::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_hls_link_isSet = false;
    m_hls_link_isValid = false;

    m_hls_link_expires_time_isSet = false;
    m_hls_link_expires_time_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_link_expires_time_isSet = false;
    m_link_expires_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIText_track::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIText_track::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_hls_link_isValid = ::OpenAPI::fromJsonValue(m_hls_link, json[QString("hls_link")]);
    m_hls_link_isSet = !json[QString("hls_link")].isNull() && m_hls_link_isValid;

    m_hls_link_expires_time_isValid = ::OpenAPI::fromJsonValue(m_hls_link_expires_time, json[QString("hls_link_expires_time")]);
    m_hls_link_expires_time_isSet = !json[QString("hls_link_expires_time")].isNull() && m_hls_link_expires_time_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_link_expires_time_isValid = ::OpenAPI::fromJsonValue(m_link_expires_time, json[QString("link_expires_time")]);
    m_link_expires_time_isSet = !json[QString("link_expires_time")].isNull() && m_link_expires_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIText_track::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIText_track::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_hls_link_isSet) {
        obj.insert(QString("hls_link"), ::OpenAPI::toJsonValue(m_hls_link));
    }
    if (m_hls_link_expires_time_isSet) {
        obj.insert(QString("hls_link_expires_time"), ::OpenAPI::toJsonValue(m_hls_link_expires_time));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_link_expires_time_isSet) {
        obj.insert(QString("link_expires_time"), ::OpenAPI::toJsonValue(m_link_expires_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

bool OAIText_track::isActive() const {
    return m_active;
}
void OAIText_track::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIText_track::is_active_Set() const{
    return m_active_isSet;
}

bool OAIText_track::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIText_track::getHlsLink() const {
    return m_hls_link;
}
void OAIText_track::setHlsLink(const QString &hls_link) {
    m_hls_link = hls_link;
    m_hls_link_isSet = true;
}

bool OAIText_track::is_hls_link_Set() const{
    return m_hls_link_isSet;
}

bool OAIText_track::is_hls_link_Valid() const{
    return m_hls_link_isValid;
}

QString OAIText_track::getHlsLinkExpiresTime() const {
    return m_hls_link_expires_time;
}
void OAIText_track::setHlsLinkExpiresTime(const QString &hls_link_expires_time) {
    m_hls_link_expires_time = hls_link_expires_time;
    m_hls_link_expires_time_isSet = true;
}

bool OAIText_track::is_hls_link_expires_time_Set() const{
    return m_hls_link_expires_time_isSet;
}

bool OAIText_track::is_hls_link_expires_time_Valid() const{
    return m_hls_link_expires_time_isValid;
}

QString OAIText_track::getLanguage() const {
    return m_language;
}
void OAIText_track::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIText_track::is_language_Set() const{
    return m_language_isSet;
}

bool OAIText_track::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIText_track::getLink() const {
    return m_link;
}
void OAIText_track::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIText_track::is_link_Set() const{
    return m_link_isSet;
}

bool OAIText_track::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIText_track::getLinkExpiresTime() const {
    return m_link_expires_time;
}
void OAIText_track::setLinkExpiresTime(const QString &link_expires_time) {
    m_link_expires_time = link_expires_time;
    m_link_expires_time_isSet = true;
}

bool OAIText_track::is_link_expires_time_Set() const{
    return m_link_expires_time_isSet;
}

bool OAIText_track::is_link_expires_time_Valid() const{
    return m_link_expires_time_isValid;
}

QString OAIText_track::getName() const {
    return m_name;
}
void OAIText_track::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIText_track::is_name_Set() const{
    return m_name_isSet;
}

bool OAIText_track::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIText_track::getType() const {
    return m_type;
}
void OAIText_track::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIText_track::is_type_Set() const{
    return m_type_isSet;
}

bool OAIText_track::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIText_track::getUri() const {
    return m_uri;
}
void OAIText_track::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIText_track::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIText_track::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIText_track::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_link_expires_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_expires_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIText_track::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_hls_link_isValid && m_hls_link_expires_time_isValid && m_language_isValid && m_link_isValid && m_link_expires_time_isValid && m_name_isValid && m_type_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
