/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_spatial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_spatial::OAIVideo_spatial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_spatial::OAIVideo_spatial() {
    this->initializeModel();
}

OAIVideo_spatial::~OAIVideo_spatial() {}

void OAIVideo_spatial::initializeModel() {

    m_director_timeline_isSet = false;
    m_director_timeline_isValid = false;

    m_field_of_view_isSet = false;
    m_field_of_view_isValid = false;

    m_projection_isSet = false;
    m_projection_isValid = false;

    m_stereo_format_isSet = false;
    m_stereo_format_isValid = false;
}

void OAIVideo_spatial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_spatial::fromJsonObject(QJsonObject json) {

    m_director_timeline_isValid = ::OpenAPI::fromJsonValue(m_director_timeline, json[QString("director_timeline")]);
    m_director_timeline_isSet = !json[QString("director_timeline")].isNull() && m_director_timeline_isValid;

    m_field_of_view_isValid = ::OpenAPI::fromJsonValue(m_field_of_view, json[QString("field_of_view")]);
    m_field_of_view_isSet = !json[QString("field_of_view")].isNull() && m_field_of_view_isValid;

    m_projection_isValid = ::OpenAPI::fromJsonValue(m_projection, json[QString("projection")]);
    m_projection_isSet = !json[QString("projection")].isNull() && m_projection_isValid;

    m_stereo_format_isValid = ::OpenAPI::fromJsonValue(m_stereo_format, json[QString("stereo_format")]);
    m_stereo_format_isSet = !json[QString("stereo_format")].isNull() && m_stereo_format_isValid;
}

QString OAIVideo_spatial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_spatial::asJsonObject() const {
    QJsonObject obj;
    if (m_director_timeline.size() > 0) {
        obj.insert(QString("director_timeline"), ::OpenAPI::toJsonValue(m_director_timeline));
    }
    if (m_field_of_view_isSet) {
        obj.insert(QString("field_of_view"), ::OpenAPI::toJsonValue(m_field_of_view));
    }
    if (m_projection_isSet) {
        obj.insert(QString("projection"), ::OpenAPI::toJsonValue(m_projection));
    }
    if (m_stereo_format_isSet) {
        obj.insert(QString("stereo_format"), ::OpenAPI::toJsonValue(m_stereo_format));
    }
    return obj;
}

QList<OAIVideo_spatial_director_timeline_inner> OAIVideo_spatial::getDirectorTimeline() const {
    return m_director_timeline;
}
void OAIVideo_spatial::setDirectorTimeline(const QList<OAIVideo_spatial_director_timeline_inner> &director_timeline) {
    m_director_timeline = director_timeline;
    m_director_timeline_isSet = true;
}

bool OAIVideo_spatial::is_director_timeline_Set() const{
    return m_director_timeline_isSet;
}

bool OAIVideo_spatial::is_director_timeline_Valid() const{
    return m_director_timeline_isValid;
}

double OAIVideo_spatial::getFieldOfView() const {
    return m_field_of_view;
}
void OAIVideo_spatial::setFieldOfView(const double &field_of_view) {
    m_field_of_view = field_of_view;
    m_field_of_view_isSet = true;
}

bool OAIVideo_spatial::is_field_of_view_Set() const{
    return m_field_of_view_isSet;
}

bool OAIVideo_spatial::is_field_of_view_Valid() const{
    return m_field_of_view_isValid;
}

QString OAIVideo_spatial::getProjection() const {
    return m_projection;
}
void OAIVideo_spatial::setProjection(const QString &projection) {
    m_projection = projection;
    m_projection_isSet = true;
}

bool OAIVideo_spatial::is_projection_Set() const{
    return m_projection_isSet;
}

bool OAIVideo_spatial::is_projection_Valid() const{
    return m_projection_isValid;
}

QString OAIVideo_spatial::getStereoFormat() const {
    return m_stereo_format;
}
void OAIVideo_spatial::setStereoFormat(const QString &stereo_format) {
    m_stereo_format = stereo_format;
    m_stereo_format_isSet = true;
}

bool OAIVideo_spatial::is_stereo_format_Set() const{
    return m_stereo_format_isSet;
}

bool OAIVideo_spatial::is_stereo_format_Valid() const{
    return m_stereo_format_isValid;
}

bool OAIVideo_spatial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_director_timeline.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_of_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stereo_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_spatial::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_director_timeline_isValid && m_field_of_view_isValid && m_projection_isValid && m_stereo_format_isValid && true;
}

} // namespace OpenAPI
