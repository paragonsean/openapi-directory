/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOn_demand_page.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOn_demand_page::OAIOn_demand_page(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOn_demand_page::OAIOn_demand_page() {
    this->initializeModel();
}

OAIOn_demand_page::~OAIOn_demand_page() {}

void OAIOn_demand_page::initializeModel() {

    m_background_isSet = false;
    m_background_isValid = false;

    m_colors_isSet = false;
    m_colors_isValid = false;

    m_content_rating_isSet = false;
    m_content_rating_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_domain_link_isSet = false;
    m_domain_link_isValid = false;

    m_episodes_isSet = false;
    m_episodes_isValid = false;

    m_film_isSet = false;
    m_film_isValid = false;

    m_genres_isSet = false;
    m_genres_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_modified_time_isSet = false;
    m_modified_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pictures_isSet = false;
    m_pictures_isValid = false;

    m_preorder_isSet = false;
    m_preorder_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_resource_key_isSet = false;
    m_resource_key_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;

    m_theme_isSet = false;
    m_theme_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_trailer_isSet = false;
    m_trailer_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIOn_demand_page::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOn_demand_page::fromJsonObject(QJsonObject json) {

    m_background_isValid = ::OpenAPI::fromJsonValue(m_background, json[QString("background")]);
    m_background_isSet = !json[QString("background")].isNull() && m_background_isValid;

    m_colors_isValid = ::OpenAPI::fromJsonValue(m_colors, json[QString("colors")]);
    m_colors_isSet = !json[QString("colors")].isNull() && m_colors_isValid;

    m_content_rating_isValid = ::OpenAPI::fromJsonValue(m_content_rating, json[QString("content_rating")]);
    m_content_rating_isSet = !json[QString("content_rating")].isNull() && m_content_rating_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_domain_link_isValid = ::OpenAPI::fromJsonValue(m_domain_link, json[QString("domain_link")]);
    m_domain_link_isSet = !json[QString("domain_link")].isNull() && m_domain_link_isValid;

    m_episodes_isValid = ::OpenAPI::fromJsonValue(m_episodes, json[QString("episodes")]);
    m_episodes_isSet = !json[QString("episodes")].isNull() && m_episodes_isValid;

    m_film_isValid = ::OpenAPI::fromJsonValue(m_film, json[QString("film")]);
    m_film_isSet = !json[QString("film")].isNull() && m_film_isValid;

    m_genres_isValid = ::OpenAPI::fromJsonValue(m_genres, json[QString("genres")]);
    m_genres_isSet = !json[QString("genres")].isNull() && m_genres_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_modified_time_isValid = ::OpenAPI::fromJsonValue(m_modified_time, json[QString("modified_time")]);
    m_modified_time_isSet = !json[QString("modified_time")].isNull() && m_modified_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pictures_isValid = ::OpenAPI::fromJsonValue(m_pictures, json[QString("pictures")]);
    m_pictures_isSet = !json[QString("pictures")].isNull() && m_pictures_isValid;

    m_preorder_isValid = ::OpenAPI::fromJsonValue(m_preorder, json[QString("preorder")]);
    m_preorder_isSet = !json[QString("preorder")].isNull() && m_preorder_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_resource_key_isValid = ::OpenAPI::fromJsonValue(m_resource_key, json[QString("resource_key")]);
    m_resource_key_isSet = !json[QString("resource_key")].isNull() && m_resource_key_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;

    m_theme_isValid = ::OpenAPI::fromJsonValue(m_theme, json[QString("theme")]);
    m_theme_isSet = !json[QString("theme")].isNull() && m_theme_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_trailer_isValid = ::OpenAPI::fromJsonValue(m_trailer, json[QString("trailer")]);
    m_trailer_isSet = !json[QString("trailer")].isNull() && m_trailer_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIOn_demand_page::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOn_demand_page::asJsonObject() const {
    QJsonObject obj;
    if (m_background.isSet()) {
        obj.insert(QString("background"), ::OpenAPI::toJsonValue(m_background));
    }
    if (m_colors.isSet()) {
        obj.insert(QString("colors"), ::OpenAPI::toJsonValue(m_colors));
    }
    if (m_content_rating.size() > 0) {
        obj.insert(QString("content_rating"), ::OpenAPI::toJsonValue(m_content_rating));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_domain_link_isSet) {
        obj.insert(QString("domain_link"), ::OpenAPI::toJsonValue(m_domain_link));
    }
    if (m_episodes.isSet()) {
        obj.insert(QString("episodes"), ::OpenAPI::toJsonValue(m_episodes));
    }
    if (m_film.isSet()) {
        obj.insert(QString("film"), ::OpenAPI::toJsonValue(m_film));
    }
    if (m_genres.size() > 0) {
        obj.insert(QString("genres"), ::OpenAPI::toJsonValue(m_genres));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_modified_time_isSet) {
        obj.insert(QString("modified_time"), ::OpenAPI::toJsonValue(m_modified_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pictures.isSet()) {
        obj.insert(QString("pictures"), ::OpenAPI::toJsonValue(m_pictures));
    }
    if (m_preorder.isSet()) {
        obj.insert(QString("preorder"), ::OpenAPI::toJsonValue(m_preorder));
    }
    if (m_published.isSet()) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_resource_key_isSet) {
        obj.insert(QString("resource_key"), ::OpenAPI::toJsonValue(m_resource_key));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_subscription.isSet()) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    if (m_theme_isSet) {
        obj.insert(QString("theme"), ::OpenAPI::toJsonValue(m_theme));
    }
    if (m_thumbnail.isSet()) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_trailer.isSet()) {
        obj.insert(QString("trailer"), ::OpenAPI::toJsonValue(m_trailer));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIPicture OAIOn_demand_page::getBackground() const {
    return m_background;
}
void OAIOn_demand_page::setBackground(const OAIPicture &background) {
    m_background = background;
    m_background_isSet = true;
}

bool OAIOn_demand_page::is_background_Set() const{
    return m_background_isSet;
}

bool OAIOn_demand_page::is_background_Valid() const{
    return m_background_isValid;
}

OAIOn_demand_page_colors OAIOn_demand_page::getColors() const {
    return m_colors;
}
void OAIOn_demand_page::setColors(const OAIOn_demand_page_colors &colors) {
    m_colors = colors;
    m_colors_isSet = true;
}

bool OAIOn_demand_page::is_colors_Set() const{
    return m_colors_isSet;
}

bool OAIOn_demand_page::is_colors_Valid() const{
    return m_colors_isValid;
}

QList<QString> OAIOn_demand_page::getContentRating() const {
    return m_content_rating;
}
void OAIOn_demand_page::setContentRating(const QList<QString> &content_rating) {
    m_content_rating = content_rating;
    m_content_rating_isSet = true;
}

bool OAIOn_demand_page::is_content_rating_Set() const{
    return m_content_rating_isSet;
}

bool OAIOn_demand_page::is_content_rating_Valid() const{
    return m_content_rating_isValid;
}

QString OAIOn_demand_page::getCreatedTime() const {
    return m_created_time;
}
void OAIOn_demand_page::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIOn_demand_page::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIOn_demand_page::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIOn_demand_page::getDescription() const {
    return m_description;
}
void OAIOn_demand_page::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOn_demand_page::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOn_demand_page::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOn_demand_page::getDomainLink() const {
    return m_domain_link;
}
void OAIOn_demand_page::setDomainLink(const QString &domain_link) {
    m_domain_link = domain_link;
    m_domain_link_isSet = true;
}

bool OAIOn_demand_page::is_domain_link_Set() const{
    return m_domain_link_isSet;
}

bool OAIOn_demand_page::is_domain_link_Valid() const{
    return m_domain_link_isValid;
}

OAIOn_demand_page_episodes OAIOn_demand_page::getEpisodes() const {
    return m_episodes;
}
void OAIOn_demand_page::setEpisodes(const OAIOn_demand_page_episodes &episodes) {
    m_episodes = episodes;
    m_episodes_isSet = true;
}

bool OAIOn_demand_page::is_episodes_Set() const{
    return m_episodes_isSet;
}

bool OAIOn_demand_page::is_episodes_Valid() const{
    return m_episodes_isValid;
}

OAIVideo OAIOn_demand_page::getFilm() const {
    return m_film;
}
void OAIOn_demand_page::setFilm(const OAIVideo &film) {
    m_film = film;
    m_film_isSet = true;
}

bool OAIOn_demand_page::is_film_Set() const{
    return m_film_isSet;
}

bool OAIOn_demand_page::is_film_Valid() const{
    return m_film_isValid;
}

QList<OAIOn_demand_genre> OAIOn_demand_page::getGenres() const {
    return m_genres;
}
void OAIOn_demand_page::setGenres(const QList<OAIOn_demand_genre> &genres) {
    m_genres = genres;
    m_genres_isSet = true;
}

bool OAIOn_demand_page::is_genres_Set() const{
    return m_genres_isSet;
}

bool OAIOn_demand_page::is_genres_Valid() const{
    return m_genres_isValid;
}

QString OAIOn_demand_page::getLink() const {
    return m_link;
}
void OAIOn_demand_page::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIOn_demand_page::is_link_Set() const{
    return m_link_isSet;
}

bool OAIOn_demand_page::is_link_Valid() const{
    return m_link_isValid;
}

OAIOn_demand_page_metadata OAIOn_demand_page::getMetadata() const {
    return m_metadata;
}
void OAIOn_demand_page::setMetadata(const OAIOn_demand_page_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIOn_demand_page::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIOn_demand_page::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIOn_demand_page::getModifiedTime() const {
    return m_modified_time;
}
void OAIOn_demand_page::setModifiedTime(const QString &modified_time) {
    m_modified_time = modified_time;
    m_modified_time_isSet = true;
}

bool OAIOn_demand_page::is_modified_time_Set() const{
    return m_modified_time_isSet;
}

bool OAIOn_demand_page::is_modified_time_Valid() const{
    return m_modified_time_isValid;
}

QString OAIOn_demand_page::getName() const {
    return m_name;
}
void OAIOn_demand_page::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOn_demand_page::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOn_demand_page::is_name_Valid() const{
    return m_name_isValid;
}

OAIPicture OAIOn_demand_page::getPictures() const {
    return m_pictures;
}
void OAIOn_demand_page::setPictures(const OAIPicture &pictures) {
    m_pictures = pictures;
    m_pictures_isSet = true;
}

bool OAIOn_demand_page::is_pictures_Set() const{
    return m_pictures_isSet;
}

bool OAIOn_demand_page::is_pictures_Valid() const{
    return m_pictures_isValid;
}

OAIOn_demand_page_preorder OAIOn_demand_page::getPreorder() const {
    return m_preorder;
}
void OAIOn_demand_page::setPreorder(const OAIOn_demand_page_preorder &preorder) {
    m_preorder = preorder;
    m_preorder_isSet = true;
}

bool OAIOn_demand_page::is_preorder_Set() const{
    return m_preorder_isSet;
}

bool OAIOn_demand_page::is_preorder_Valid() const{
    return m_preorder_isValid;
}

OAIOn_demand_page_published OAIOn_demand_page::getPublished() const {
    return m_published;
}
void OAIOn_demand_page::setPublished(const OAIOn_demand_page_published &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIOn_demand_page::is_published_Set() const{
    return m_published_isSet;
}

bool OAIOn_demand_page::is_published_Valid() const{
    return m_published_isValid;
}

double OAIOn_demand_page::getRating() const {
    return m_rating;
}
void OAIOn_demand_page::setRating(const double &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIOn_demand_page::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIOn_demand_page::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAIOn_demand_page::getResourceKey() const {
    return m_resource_key;
}
void OAIOn_demand_page::setResourceKey(const QString &resource_key) {
    m_resource_key = resource_key;
    m_resource_key_isSet = true;
}

bool OAIOn_demand_page::is_resource_key_Set() const{
    return m_resource_key_isSet;
}

bool OAIOn_demand_page::is_resource_key_Valid() const{
    return m_resource_key_isValid;
}

QString OAIOn_demand_page::getSku() const {
    return m_sku;
}
void OAIOn_demand_page::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIOn_demand_page::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIOn_demand_page::is_sku_Valid() const{
    return m_sku_isValid;
}

OAIOn_demand_page_subscription OAIOn_demand_page::getSubscription() const {
    return m_subscription;
}
void OAIOn_demand_page::setSubscription(const OAIOn_demand_page_subscription &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAIOn_demand_page::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIOn_demand_page::is_subscription_Valid() const{
    return m_subscription_isValid;
}

QString OAIOn_demand_page::getTheme() const {
    return m_theme;
}
void OAIOn_demand_page::setTheme(const QString &theme) {
    m_theme = theme;
    m_theme_isSet = true;
}

bool OAIOn_demand_page::is_theme_Set() const{
    return m_theme_isSet;
}

bool OAIOn_demand_page::is_theme_Valid() const{
    return m_theme_isValid;
}

OAIPicture OAIOn_demand_page::getThumbnail() const {
    return m_thumbnail;
}
void OAIOn_demand_page::setThumbnail(const OAIPicture &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIOn_demand_page::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIOn_demand_page::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

OAIVideo OAIOn_demand_page::getTrailer() const {
    return m_trailer;
}
void OAIOn_demand_page::setTrailer(const OAIVideo &trailer) {
    m_trailer = trailer;
    m_trailer_isSet = true;
}

bool OAIOn_demand_page::is_trailer_Set() const{
    return m_trailer_isSet;
}

bool OAIOn_demand_page::is_trailer_Valid() const{
    return m_trailer_isValid;
}

QString OAIOn_demand_page::getType() const {
    return m_type;
}
void OAIOn_demand_page::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOn_demand_page::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOn_demand_page::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOn_demand_page::getUri() const {
    return m_uri;
}
void OAIOn_demand_page::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIOn_demand_page::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIOn_demand_page::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIUser OAIOn_demand_page::getUser() const {
    return m_user;
}
void OAIOn_demand_page::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIOn_demand_page::is_user_Set() const{
    return m_user_isSet;
}

bool OAIOn_demand_page::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIOn_demand_page::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_colors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_rating.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_film.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_genres.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pictures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preorder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_published.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trailer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOn_demand_page::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_background_isValid && m_colors_isValid && m_content_rating_isValid && m_description_isValid && m_domain_link_isValid && m_episodes_isValid && m_genres_isValid && m_link_isValid && m_metadata_isValid && m_name_isValid && m_pictures_isValid && m_preorder_isValid && m_published_isValid && m_rating_isValid && m_resource_key_isValid && m_subscription_isValid && m_theme_isValid && m_thumbnail_isValid && m_trailer_isValid && m_type_isValid && m_uri_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
