/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOn_demand_genre.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOn_demand_genre::OAIOn_demand_genre(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOn_demand_genre::OAIOn_demand_genre() {
    this->initializeModel();
}

OAIOn_demand_genre::~OAIOn_demand_genre() {}

void OAIOn_demand_genre::initializeModel() {

    m_canonical_isSet = false;
    m_canonical_isValid = false;

    m_interactions_isSet = false;
    m_interactions_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIOn_demand_genre::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOn_demand_genre::fromJsonObject(QJsonObject json) {

    m_canonical_isValid = ::OpenAPI::fromJsonValue(m_canonical, json[QString("canonical")]);
    m_canonical_isSet = !json[QString("canonical")].isNull() && m_canonical_isValid;

    m_interactions_isValid = ::OpenAPI::fromJsonValue(m_interactions, json[QString("interactions")]);
    m_interactions_isSet = !json[QString("interactions")].isNull() && m_interactions_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIOn_demand_genre::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOn_demand_genre::asJsonObject() const {
    QJsonObject obj;
    if (m_canonical_isSet) {
        obj.insert(QString("canonical"), ::OpenAPI::toJsonValue(m_canonical));
    }
    if (m_interactions.isSet()) {
        obj.insert(QString("interactions"), ::OpenAPI::toJsonValue(m_interactions));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIOn_demand_genre::getCanonical() const {
    return m_canonical;
}
void OAIOn_demand_genre::setCanonical(const QString &canonical) {
    m_canonical = canonical;
    m_canonical_isSet = true;
}

bool OAIOn_demand_genre::is_canonical_Set() const{
    return m_canonical_isSet;
}

bool OAIOn_demand_genre::is_canonical_Valid() const{
    return m_canonical_isValid;
}

OAIOn_demand_genre_interactions OAIOn_demand_genre::getInteractions() const {
    return m_interactions;
}
void OAIOn_demand_genre::setInteractions(const OAIOn_demand_genre_interactions &interactions) {
    m_interactions = interactions;
    m_interactions_isSet = true;
}

bool OAIOn_demand_genre::is_interactions_Set() const{
    return m_interactions_isSet;
}

bool OAIOn_demand_genre::is_interactions_Valid() const{
    return m_interactions_isValid;
}

QString OAIOn_demand_genre::getLink() const {
    return m_link;
}
void OAIOn_demand_genre::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIOn_demand_genre::is_link_Set() const{
    return m_link_isSet;
}

bool OAIOn_demand_genre::is_link_Valid() const{
    return m_link_isValid;
}

OAIOn_demand_genre_metadata OAIOn_demand_genre::getMetadata() const {
    return m_metadata;
}
void OAIOn_demand_genre::setMetadata(const OAIOn_demand_genre_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIOn_demand_genre::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIOn_demand_genre::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIOn_demand_genre::getName() const {
    return m_name;
}
void OAIOn_demand_genre::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOn_demand_genre::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOn_demand_genre::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOn_demand_genre::getUri() const {
    return m_uri;
}
void OAIOn_demand_genre::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIOn_demand_genre::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIOn_demand_genre::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIOn_demand_genre::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canonical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOn_demand_genre::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_canonical_isValid && m_interactions_isValid && m_link_isValid && m_metadata_isValid && m_name_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
