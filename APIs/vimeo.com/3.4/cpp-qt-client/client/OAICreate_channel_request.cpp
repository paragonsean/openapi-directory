/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_channel_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_channel_request::OAICreate_channel_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_channel_request::OAICreate_channel_request() {
    this->initializeModel();
}

OAICreate_channel_request::~OAICreate_channel_request() {}

void OAICreate_channel_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;
}

void OAICreate_channel_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_channel_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;
}

QString OAICreate_channel_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_channel_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_privacy_isSet) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    return obj;
}

QString OAICreate_channel_request::getDescription() const {
    return m_description;
}
void OAICreate_channel_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreate_channel_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreate_channel_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreate_channel_request::getLink() const {
    return m_link;
}
void OAICreate_channel_request::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAICreate_channel_request::is_link_Set() const{
    return m_link_isSet;
}

bool OAICreate_channel_request::is_link_Valid() const{
    return m_link_isValid;
}

QString OAICreate_channel_request::getName() const {
    return m_name;
}
void OAICreate_channel_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreate_channel_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreate_channel_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreate_channel_request::getPrivacy() const {
    return m_privacy;
}
void OAICreate_channel_request::setPrivacy(const QString &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAICreate_channel_request::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAICreate_channel_request::is_privacy_Valid() const{
    return m_privacy_isValid;
}

bool OAICreate_channel_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_channel_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_privacy_isValid && true;
}

} // namespace OpenAPI
