/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOnDemandBackgroundsApi_H
#define OAI_OAIOnDemandBackgroundsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEdit_vod_background_request.h"
#include "OAILegacy_error.h"
#include "OAIPicture.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOnDemandBackgroundsApi : public QObject {
    Q_OBJECT

public:
    OAIOnDemandBackgroundsApi(const int timeOut = 0);
    ~OAIOnDemandBackgroundsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ondemand_id double [required]
    */
    virtual void createVodBackground(const double &ondemand_id);

    /**
    * @param[in]  background_id double [required]
    * @param[in]  ondemand_id double [required]
    */
    virtual void deleteVodBackground(const double &background_id, const double &ondemand_id);

    /**
    * @param[in]  background_id double [required]
    * @param[in]  ondemand_id double [required]
    * @param[in]  oai_edit_vod_background_request OAIEdit_vod_background_request [optional]
    */
    virtual void editVodBackground(const double &background_id, const double &ondemand_id, const ::OpenAPI::OptionalParam<OAIEdit_vod_background_request> &oai_edit_vod_background_request = ::OpenAPI::OptionalParam<OAIEdit_vod_background_request>());

    /**
    * @param[in]  background_id double [required]
    * @param[in]  ondemand_id double [required]
    */
    virtual void getVodBackground(const double &background_id, const double &ondemand_id);

    /**
    * @param[in]  ondemand_id double [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getVodBackgrounds(const double &ondemand_id, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createVodBackgroundCallback(OAIHttpRequestWorker *worker);
    void deleteVodBackgroundCallback(OAIHttpRequestWorker *worker);
    void editVodBackgroundCallback(OAIHttpRequestWorker *worker);
    void getVodBackgroundCallback(OAIHttpRequestWorker *worker);
    void getVodBackgroundsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createVodBackgroundSignal(OAIPicture summary);
    void deleteVodBackgroundSignal(OAIPicture summary);
    void editVodBackgroundSignal(OAIPicture summary);
    void getVodBackgroundSignal(OAIPicture summary);
    void getVodBackgroundsSignal(QList<OAIPicture> summary);


    void createVodBackgroundSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void deleteVodBackgroundSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void editVodBackgroundSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void getVodBackgroundSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void getVodBackgroundsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPicture> summary);

    Q_DECL_DEPRECATED_X("Use createVodBackgroundSignalError() instead")
    void createVodBackgroundSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVodBackgroundSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVodBackgroundSignalError() instead")
    void deleteVodBackgroundSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVodBackgroundSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editVodBackgroundSignalError() instead")
    void editVodBackgroundSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editVodBackgroundSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodBackgroundSignalError() instead")
    void getVodBackgroundSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodBackgroundSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodBackgroundsSignalError() instead")
    void getVodBackgroundsSignalE(QList<OAIPicture> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodBackgroundsSignalError(QList<OAIPicture> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createVodBackgroundSignalErrorFull() instead")
    void createVodBackgroundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVodBackgroundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVodBackgroundSignalErrorFull() instead")
    void deleteVodBackgroundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVodBackgroundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editVodBackgroundSignalErrorFull() instead")
    void editVodBackgroundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editVodBackgroundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodBackgroundSignalErrorFull() instead")
    void getVodBackgroundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodBackgroundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodBackgroundsSignalErrorFull() instead")
    void getVodBackgroundsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodBackgroundsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
