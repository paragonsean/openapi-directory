/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlay_progressive_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlay_progressive_inner::OAIPlay_progressive_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlay_progressive_inner::OAIPlay_progressive_inner() {
    this->initializeModel();
}

OAIPlay_progressive_inner::~OAIPlay_progressive_inner() {}

void OAIPlay_progressive_inner::initializeModel() {

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_fps_isSet = false;
    m_fps_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_link_expiration_time_isSet = false;
    m_link_expiration_time_isValid = false;

    m_log_isSet = false;
    m_log_isValid = false;

    m_md5_isSet = false;
    m_md5_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIPlay_progressive_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlay_progressive_inner::fromJsonObject(QJsonObject json) {

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_fps_isValid = ::OpenAPI::fromJsonValue(m_fps, json[QString("fps")]);
    m_fps_isSet = !json[QString("fps")].isNull() && m_fps_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_link_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_link_expiration_time, json[QString("link_expiration_time")]);
    m_link_expiration_time_isSet = !json[QString("link_expiration_time")].isNull() && m_link_expiration_time_isValid;

    m_log_isValid = ::OpenAPI::fromJsonValue(m_log, json[QString("log")]);
    m_log_isSet = !json[QString("log")].isNull() && m_log_isValid;

    m_md5_isValid = ::OpenAPI::fromJsonValue(m_md5, json[QString("md5")]);
    m_md5_isSet = !json[QString("md5")].isNull() && m_md5_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIPlay_progressive_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlay_progressive_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_fps_isSet) {
        obj.insert(QString("fps"), ::OpenAPI::toJsonValue(m_fps));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_link_expiration_time_isSet) {
        obj.insert(QString("link_expiration_time"), ::OpenAPI::toJsonValue(m_link_expiration_time));
    }
    if (m_log_isSet) {
        obj.insert(QString("log"), ::OpenAPI::toJsonValue(m_log));
    }
    if (m_md5_isSet) {
        obj.insert(QString("md5"), ::OpenAPI::toJsonValue(m_md5));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIPlay_progressive_inner::getCreatedTime() const {
    return m_created_time;
}
void OAIPlay_progressive_inner::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIPlay_progressive_inner::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIPlay_progressive_inner::is_created_time_Valid() const{
    return m_created_time_isValid;
}

double OAIPlay_progressive_inner::getFps() const {
    return m_fps;
}
void OAIPlay_progressive_inner::setFps(const double &fps) {
    m_fps = fps;
    m_fps_isSet = true;
}

bool OAIPlay_progressive_inner::is_fps_Set() const{
    return m_fps_isSet;
}

bool OAIPlay_progressive_inner::is_fps_Valid() const{
    return m_fps_isValid;
}

double OAIPlay_progressive_inner::getHeight() const {
    return m_height;
}
void OAIPlay_progressive_inner::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIPlay_progressive_inner::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPlay_progressive_inner::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIPlay_progressive_inner::getLink() const {
    return m_link;
}
void OAIPlay_progressive_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIPlay_progressive_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAIPlay_progressive_inner::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIPlay_progressive_inner::getLinkExpirationTime() const {
    return m_link_expiration_time;
}
void OAIPlay_progressive_inner::setLinkExpirationTime(const QString &link_expiration_time) {
    m_link_expiration_time = link_expiration_time;
    m_link_expiration_time_isSet = true;
}

bool OAIPlay_progressive_inner::is_link_expiration_time_Set() const{
    return m_link_expiration_time_isSet;
}

bool OAIPlay_progressive_inner::is_link_expiration_time_Valid() const{
    return m_link_expiration_time_isValid;
}

OAIObject OAIPlay_progressive_inner::getLog() const {
    return m_log;
}
void OAIPlay_progressive_inner::setLog(const OAIObject &log) {
    m_log = log;
    m_log_isSet = true;
}

bool OAIPlay_progressive_inner::is_log_Set() const{
    return m_log_isSet;
}

bool OAIPlay_progressive_inner::is_log_Valid() const{
    return m_log_isValid;
}

QString OAIPlay_progressive_inner::getMd5() const {
    return m_md5;
}
void OAIPlay_progressive_inner::setMd5(const QString &md5) {
    m_md5 = md5;
    m_md5_isSet = true;
}

bool OAIPlay_progressive_inner::is_md5_Set() const{
    return m_md5_isSet;
}

bool OAIPlay_progressive_inner::is_md5_Valid() const{
    return m_md5_isValid;
}

double OAIPlay_progressive_inner::getSize() const {
    return m_size;
}
void OAIPlay_progressive_inner::setSize(const double &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPlay_progressive_inner::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPlay_progressive_inner::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIPlay_progressive_inner::getType() const {
    return m_type;
}
void OAIPlay_progressive_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPlay_progressive_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPlay_progressive_inner::is_type_Valid() const{
    return m_type_isValid;
}

double OAIPlay_progressive_inner::getWidth() const {
    return m_width;
}
void OAIPlay_progressive_inner::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIPlay_progressive_inner::is_width_Set() const{
    return m_width_isSet;
}

bool OAIPlay_progressive_inner::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIPlay_progressive_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlay_progressive_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_time_isValid && m_fps_isValid && m_height_isValid && m_link_isValid && m_link_expiration_time_isValid && m_md5_isValid && m_size_isValid && m_type_isValid && m_width_isValid && true;
}

} // namespace OpenAPI
