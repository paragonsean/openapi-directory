/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPicture.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPicture::OAIPicture(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPicture::OAIPicture() {
    this->initializeModel();
}

OAIPicture::~OAIPicture() {}

void OAIPicture::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_resource_key_isSet = false;
    m_resource_key_isValid = false;

    m_sizes_isSet = false;
    m_sizes_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIPicture::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPicture::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_resource_key_isValid = ::OpenAPI::fromJsonValue(m_resource_key, json[QString("resource_key")]);
    m_resource_key_isSet = !json[QString("resource_key")].isNull() && m_resource_key_isValid;

    m_sizes_isValid = ::OpenAPI::fromJsonValue(m_sizes, json[QString("sizes")]);
    m_sizes_isSet = !json[QString("sizes")].isNull() && m_sizes_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIPicture::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPicture::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_resource_key_isSet) {
        obj.insert(QString("resource_key"), ::OpenAPI::toJsonValue(m_resource_key));
    }
    if (m_sizes.size() > 0) {
        obj.insert(QString("sizes"), ::OpenAPI::toJsonValue(m_sizes));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

bool OAIPicture::isActive() const {
    return m_active;
}
void OAIPicture::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIPicture::is_active_Set() const{
    return m_active_isSet;
}

bool OAIPicture::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIPicture::getLink() const {
    return m_link;
}
void OAIPicture::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIPicture::is_link_Set() const{
    return m_link_isSet;
}

bool OAIPicture::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIPicture::getResourceKey() const {
    return m_resource_key;
}
void OAIPicture::setResourceKey(const QString &resource_key) {
    m_resource_key = resource_key;
    m_resource_key_isSet = true;
}

bool OAIPicture::is_resource_key_Set() const{
    return m_resource_key_isSet;
}

bool OAIPicture::is_resource_key_Valid() const{
    return m_resource_key_isValid;
}

QList<OAIPicture_sizes_inner> OAIPicture::getSizes() const {
    return m_sizes;
}
void OAIPicture::setSizes(const QList<OAIPicture_sizes_inner> &sizes) {
    m_sizes = sizes;
    m_sizes_isSet = true;
}

bool OAIPicture::is_sizes_Set() const{
    return m_sizes_isSet;
}

bool OAIPicture::is_sizes_Valid() const{
    return m_sizes_isValid;
}

QString OAIPicture::getType() const {
    return m_type;
}
void OAIPicture::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPicture::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPicture::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPicture::getUri() const {
    return m_uri;
}
void OAIPicture::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPicture::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPicture::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIPicture::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPicture::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_resource_key_isValid && m_sizes_isValid && m_type_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
