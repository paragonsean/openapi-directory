/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo::OAIVideo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo::OAIVideo() {
    this->initializeModel();
}

OAIVideo::~OAIVideo() {}

void OAIVideo::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_content_rating_isSet = false;
    m_content_rating_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_embed_isSet = false;
    m_embed_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_user_action_event_date_isSet = false;
    m_last_user_action_event_date_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_modified_time_isSet = false;
    m_modified_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_folder_isSet = false;
    m_parent_folder_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_pictures_isSet = false;
    m_pictures_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_release_time_isSet = false;
    m_release_time_isValid = false;

    m_resource_key_isSet = false;
    m_resource_key_isValid = false;

    m_spatial_isSet = false;
    m_spatial_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_transcode_isSet = false;
    m_transcode_isValid = false;

    m_upload_isSet = false;
    m_upload_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIVideo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_content_rating_isValid = ::OpenAPI::fromJsonValue(m_content_rating, json[QString("content_rating")]);
    m_content_rating_isSet = !json[QString("content_rating")].isNull() && m_content_rating_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_embed_isValid = ::OpenAPI::fromJsonValue(m_embed, json[QString("embed")]);
    m_embed_isSet = !json[QString("embed")].isNull() && m_embed_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_user_action_event_date_isValid = ::OpenAPI::fromJsonValue(m_last_user_action_event_date, json[QString("last_user_action_event_date")]);
    m_last_user_action_event_date_isSet = !json[QString("last_user_action_event_date")].isNull() && m_last_user_action_event_date_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_modified_time_isValid = ::OpenAPI::fromJsonValue(m_modified_time, json[QString("modified_time")]);
    m_modified_time_isSet = !json[QString("modified_time")].isNull() && m_modified_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_folder_isValid = ::OpenAPI::fromJsonValue(m_parent_folder, json[QString("parent_folder")]);
    m_parent_folder_isSet = !json[QString("parent_folder")].isNull() && m_parent_folder_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_pictures_isValid = ::OpenAPI::fromJsonValue(m_pictures, json[QString("pictures")]);
    m_pictures_isSet = !json[QString("pictures")].isNull() && m_pictures_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;

    m_release_time_isValid = ::OpenAPI::fromJsonValue(m_release_time, json[QString("release_time")]);
    m_release_time_isSet = !json[QString("release_time")].isNull() && m_release_time_isValid;

    m_resource_key_isValid = ::OpenAPI::fromJsonValue(m_resource_key, json[QString("resource_key")]);
    m_resource_key_isSet = !json[QString("resource_key")].isNull() && m_resource_key_isValid;

    m_spatial_isValid = ::OpenAPI::fromJsonValue(m_spatial, json[QString("spatial")]);
    m_spatial_isSet = !json[QString("spatial")].isNull() && m_spatial_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_transcode_isValid = ::OpenAPI::fromJsonValue(m_transcode, json[QString("transcode")]);
    m_transcode_isSet = !json[QString("transcode")].isNull() && m_transcode_isValid;

    m_upload_isValid = ::OpenAPI::fromJsonValue(m_upload, json[QString("upload")]);
    m_upload_isSet = !json[QString("upload")].isNull() && m_upload_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIVideo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_content_rating.size() > 0) {
        obj.insert(QString("content_rating"), ::OpenAPI::toJsonValue(m_content_rating));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_embed.isSet()) {
        obj.insert(QString("embed"), ::OpenAPI::toJsonValue(m_embed));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_user_action_event_date_isSet) {
        obj.insert(QString("last_user_action_event_date"), ::OpenAPI::toJsonValue(m_last_user_action_event_date));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_modified_time_isSet) {
        obj.insert(QString("modified_time"), ::OpenAPI::toJsonValue(m_modified_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_folder.isSet()) {
        obj.insert(QString("parent_folder"), ::OpenAPI::toJsonValue(m_parent_folder));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_pictures.isSet()) {
        obj.insert(QString("pictures"), ::OpenAPI::toJsonValue(m_pictures));
    }
    if (m_privacy.isSet()) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_release_time_isSet) {
        obj.insert(QString("release_time"), ::OpenAPI::toJsonValue(m_release_time));
    }
    if (m_resource_key_isSet) {
        obj.insert(QString("resource_key"), ::OpenAPI::toJsonValue(m_resource_key));
    }
    if (m_spatial.isSet()) {
        obj.insert(QString("spatial"), ::OpenAPI::toJsonValue(m_spatial));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_transcode.isSet()) {
        obj.insert(QString("transcode"), ::OpenAPI::toJsonValue(m_transcode));
    }
    if (m_upload.isSet()) {
        obj.insert(QString("upload"), ::OpenAPI::toJsonValue(m_upload));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QList<OAICategory> OAIVideo::getCategories() const {
    return m_categories;
}
void OAIVideo::setCategories(const QList<OAICategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIVideo::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIVideo::is_categories_Valid() const{
    return m_categories_isValid;
}

QList<QString> OAIVideo::getContentRating() const {
    return m_content_rating;
}
void OAIVideo::setContentRating(const QList<QString> &content_rating) {
    m_content_rating = content_rating;
    m_content_rating_isSet = true;
}

bool OAIVideo::is_content_rating_Set() const{
    return m_content_rating_isSet;
}

bool OAIVideo::is_content_rating_Valid() const{
    return m_content_rating_isValid;
}

OAIVideo_context OAIVideo::getContext() const {
    return m_context;
}
void OAIVideo::setContext(const OAIVideo_context &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIVideo::is_context_Set() const{
    return m_context_isSet;
}

bool OAIVideo::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIVideo::getCreatedTime() const {
    return m_created_time;
}
void OAIVideo::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIVideo::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIVideo::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIVideo::getDescription() const {
    return m_description;
}
void OAIVideo::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVideo::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVideo::is_description_Valid() const{
    return m_description_isValid;
}

double OAIVideo::getDuration() const {
    return m_duration;
}
void OAIVideo::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIVideo::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIVideo::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIEmbed_settings OAIVideo::getEmbed() const {
    return m_embed;
}
void OAIVideo::setEmbed(const OAIEmbed_settings &embed) {
    m_embed = embed;
    m_embed_isSet = true;
}

bool OAIVideo::is_embed_Set() const{
    return m_embed_isSet;
}

bool OAIVideo::is_embed_Valid() const{
    return m_embed_isValid;
}

double OAIVideo::getHeight() const {
    return m_height;
}
void OAIVideo::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIVideo::is_height_Set() const{
    return m_height_isSet;
}

bool OAIVideo::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIVideo::getLanguage() const {
    return m_language;
}
void OAIVideo::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIVideo::is_language_Set() const{
    return m_language_isSet;
}

bool OAIVideo::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIVideo::getLastUserActionEventDate() const {
    return m_last_user_action_event_date;
}
void OAIVideo::setLastUserActionEventDate(const QString &last_user_action_event_date) {
    m_last_user_action_event_date = last_user_action_event_date;
    m_last_user_action_event_date_isSet = true;
}

bool OAIVideo::is_last_user_action_event_date_Set() const{
    return m_last_user_action_event_date_isSet;
}

bool OAIVideo::is_last_user_action_event_date_Valid() const{
    return m_last_user_action_event_date_isValid;
}

QString OAIVideo::getLicense() const {
    return m_license;
}
void OAIVideo::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIVideo::is_license_Set() const{
    return m_license_isSet;
}

bool OAIVideo::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIVideo::getLink() const {
    return m_link;
}
void OAIVideo::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIVideo::is_link_Set() const{
    return m_link_isSet;
}

bool OAIVideo::is_link_Valid() const{
    return m_link_isValid;
}

OAIVideo_metadata OAIVideo::getMetadata() const {
    return m_metadata;
}
void OAIVideo::setMetadata(const OAIVideo_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIVideo::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIVideo::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIVideo::getModifiedTime() const {
    return m_modified_time;
}
void OAIVideo::setModifiedTime(const QString &modified_time) {
    m_modified_time = modified_time;
    m_modified_time_isSet = true;
}

bool OAIVideo::is_modified_time_Set() const{
    return m_modified_time_isSet;
}

bool OAIVideo::is_modified_time_Valid() const{
    return m_modified_time_isValid;
}

QString OAIVideo::getName() const {
    return m_name;
}
void OAIVideo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVideo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVideo::is_name_Valid() const{
    return m_name_isValid;
}

OAIProject OAIVideo::getParentFolder() const {
    return m_parent_folder;
}
void OAIVideo::setParentFolder(const OAIProject &parent_folder) {
    m_parent_folder = parent_folder;
    m_parent_folder_isSet = true;
}

bool OAIVideo::is_parent_folder_Set() const{
    return m_parent_folder_isSet;
}

bool OAIVideo::is_parent_folder_Valid() const{
    return m_parent_folder_isValid;
}

QString OAIVideo::getPassword() const {
    return m_password;
}
void OAIVideo::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIVideo::is_password_Set() const{
    return m_password_isSet;
}

bool OAIVideo::is_password_Valid() const{
    return m_password_isValid;
}

OAIPicture OAIVideo::getPictures() const {
    return m_pictures;
}
void OAIVideo::setPictures(const OAIPicture &pictures) {
    m_pictures = pictures;
    m_pictures_isSet = true;
}

bool OAIVideo::is_pictures_Set() const{
    return m_pictures_isSet;
}

bool OAIVideo::is_pictures_Valid() const{
    return m_pictures_isValid;
}

OAIVideo_privacy OAIVideo::getPrivacy() const {
    return m_privacy;
}
void OAIVideo::setPrivacy(const OAIVideo_privacy &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAIVideo::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAIVideo::is_privacy_Valid() const{
    return m_privacy_isValid;
}

QString OAIVideo::getReleaseTime() const {
    return m_release_time;
}
void OAIVideo::setReleaseTime(const QString &release_time) {
    m_release_time = release_time;
    m_release_time_isSet = true;
}

bool OAIVideo::is_release_time_Set() const{
    return m_release_time_isSet;
}

bool OAIVideo::is_release_time_Valid() const{
    return m_release_time_isValid;
}

QString OAIVideo::getResourceKey() const {
    return m_resource_key;
}
void OAIVideo::setResourceKey(const QString &resource_key) {
    m_resource_key = resource_key;
    m_resource_key_isSet = true;
}

bool OAIVideo::is_resource_key_Set() const{
    return m_resource_key_isSet;
}

bool OAIVideo::is_resource_key_Valid() const{
    return m_resource_key_isValid;
}

OAIVideo_spatial OAIVideo::getSpatial() const {
    return m_spatial;
}
void OAIVideo::setSpatial(const OAIVideo_spatial &spatial) {
    m_spatial = spatial;
    m_spatial_isSet = true;
}

bool OAIVideo::is_spatial_Set() const{
    return m_spatial_isSet;
}

bool OAIVideo::is_spatial_Valid() const{
    return m_spatial_isValid;
}

OAIVideo_stats OAIVideo::getStats() const {
    return m_stats;
}
void OAIVideo::setStats(const OAIVideo_stats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIVideo::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIVideo::is_stats_Valid() const{
    return m_stats_isValid;
}

QString OAIVideo::getStatus() const {
    return m_status;
}
void OAIVideo::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVideo::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVideo::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAITag> OAIVideo::getTags() const {
    return m_tags;
}
void OAIVideo::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIVideo::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIVideo::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIVideo_transcode OAIVideo::getTranscode() const {
    return m_transcode;
}
void OAIVideo::setTranscode(const OAIVideo_transcode &transcode) {
    m_transcode = transcode;
    m_transcode_isSet = true;
}

bool OAIVideo::is_transcode_Set() const{
    return m_transcode_isSet;
}

bool OAIVideo::is_transcode_Valid() const{
    return m_transcode_isValid;
}

OAIVideo_upload OAIVideo::getUpload() const {
    return m_upload;
}
void OAIVideo::setUpload(const OAIVideo_upload &upload) {
    m_upload = upload;
    m_upload_isSet = true;
}

bool OAIVideo::is_upload_Set() const{
    return m_upload_isSet;
}

bool OAIVideo::is_upload_Valid() const{
    return m_upload_isValid;
}

QString OAIVideo::getUri() const {
    return m_uri;
}
void OAIVideo::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIVideo::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIVideo::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIUser OAIVideo::getUser() const {
    return m_user;
}
void OAIVideo::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIVideo::is_user_Set() const{
    return m_user_isSet;
}

bool OAIVideo::is_user_Valid() const{
    return m_user_isValid;
}

double OAIVideo::getWidth() const {
    return m_width;
}
void OAIVideo::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIVideo::is_width_Set() const{
    return m_width_isSet;
}

bool OAIVideo::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIVideo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_rating.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_user_action_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_folder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pictures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spatial.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_categories_isValid && m_content_rating_isValid && m_context_isValid && m_created_time_isValid && m_description_isValid && m_duration_isValid && m_embed_isValid && m_height_isValid && m_language_isValid && m_license_isValid && m_link_isValid && m_metadata_isValid && m_modified_time_isValid && m_name_isValid && m_pictures_isValid && m_privacy_isValid && m_release_time_isValid && m_resource_key_isValid && m_spatial_isValid && m_stats_isValid && m_status_isValid && m_tags_isValid && m_transcode_isValid && m_upload_isValid && m_uri_isValid && m_user_isValid && m_width_isValid && true;
}

} // namespace OpenAPI
