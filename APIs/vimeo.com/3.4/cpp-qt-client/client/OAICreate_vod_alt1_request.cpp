/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_vod_alt1_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_vod_alt1_request::OAICreate_vod_alt1_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_vod_alt1_request::OAICreate_vod_alt1_request() {
    this->initializeModel();
}

OAICreate_vod_alt1_request::~OAICreate_vod_alt1_request() {}

void OAICreate_vod_alt1_request::initializeModel() {

    m_accepted_currencies_isSet = false;
    m_accepted_currencies_isValid = false;

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_content_rating_isSet = false;
    m_content_rating_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_domain_link_isSet = false;
    m_domain_link_isValid = false;

    m_episodes_isSet = false;
    m_episodes_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rent_isSet = false;
    m_rent_isValid = false;

    m_subscription_isSet = false;
    m_subscription_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICreate_vod_alt1_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_vod_alt1_request::fromJsonObject(QJsonObject json) {

    m_accepted_currencies_isValid = ::OpenAPI::fromJsonValue(m_accepted_currencies, json[QString("accepted_currencies")]);
    m_accepted_currencies_isSet = !json[QString("accepted_currencies")].isNull() && m_accepted_currencies_isValid;

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_content_rating_isValid = ::OpenAPI::fromJsonValue(m_content_rating, json[QString("content_rating")]);
    m_content_rating_isSet = !json[QString("content_rating")].isNull() && m_content_rating_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_domain_link_isValid = ::OpenAPI::fromJsonValue(m_domain_link, json[QString("domain_link")]);
    m_domain_link_isSet = !json[QString("domain_link")].isNull() && m_domain_link_isValid;

    m_episodes_isValid = ::OpenAPI::fromJsonValue(m_episodes, json[QString("episodes")]);
    m_episodes_isSet = !json[QString("episodes")].isNull() && m_episodes_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rent_isValid = ::OpenAPI::fromJsonValue(m_rent, json[QString("rent")]);
    m_rent_isSet = !json[QString("rent")].isNull() && m_rent_isValid;

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICreate_vod_alt1_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_vod_alt1_request::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_currencies_isSet) {
        obj.insert(QString("accepted_currencies"), ::OpenAPI::toJsonValue(m_accepted_currencies));
    }
    if (m_buy.isSet()) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_content_rating_isSet) {
        obj.insert(QString("content_rating"), ::OpenAPI::toJsonValue(m_content_rating));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_domain_link_isSet) {
        obj.insert(QString("domain_link"), ::OpenAPI::toJsonValue(m_domain_link));
    }
    if (m_episodes.isSet()) {
        obj.insert(QString("episodes"), ::OpenAPI::toJsonValue(m_episodes));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rent.isSet()) {
        obj.insert(QString("rent"), ::OpenAPI::toJsonValue(m_rent));
    }
    if (m_subscription.isSet()) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICreate_vod_alt1_request::getAcceptedCurrencies() const {
    return m_accepted_currencies;
}
void OAICreate_vod_alt1_request::setAcceptedCurrencies(const QString &accepted_currencies) {
    m_accepted_currencies = accepted_currencies;
    m_accepted_currencies_isSet = true;
}

bool OAICreate_vod_alt1_request::is_accepted_currencies_Set() const{
    return m_accepted_currencies_isSet;
}

bool OAICreate_vod_alt1_request::is_accepted_currencies_Valid() const{
    return m_accepted_currencies_isValid;
}

OAICreate_vod_alt1_request_buy OAICreate_vod_alt1_request::getBuy() const {
    return m_buy;
}
void OAICreate_vod_alt1_request::setBuy(const OAICreate_vod_alt1_request_buy &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAICreate_vod_alt1_request::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAICreate_vod_alt1_request::is_buy_Valid() const{
    return m_buy_isValid;
}

QString OAICreate_vod_alt1_request::getContentRating() const {
    return m_content_rating;
}
void OAICreate_vod_alt1_request::setContentRating(const QString &content_rating) {
    m_content_rating = content_rating;
    m_content_rating_isSet = true;
}

bool OAICreate_vod_alt1_request::is_content_rating_Set() const{
    return m_content_rating_isSet;
}

bool OAICreate_vod_alt1_request::is_content_rating_Valid() const{
    return m_content_rating_isValid;
}

QString OAICreate_vod_alt1_request::getDescription() const {
    return m_description;
}
void OAICreate_vod_alt1_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreate_vod_alt1_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreate_vod_alt1_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreate_vod_alt1_request::getDomainLink() const {
    return m_domain_link;
}
void OAICreate_vod_alt1_request::setDomainLink(const QString &domain_link) {
    m_domain_link = domain_link;
    m_domain_link_isSet = true;
}

bool OAICreate_vod_alt1_request::is_domain_link_Set() const{
    return m_domain_link_isSet;
}

bool OAICreate_vod_alt1_request::is_domain_link_Valid() const{
    return m_domain_link_isValid;
}

OAICreate_vod_alt1_request_episodes OAICreate_vod_alt1_request::getEpisodes() const {
    return m_episodes;
}
void OAICreate_vod_alt1_request::setEpisodes(const OAICreate_vod_alt1_request_episodes &episodes) {
    m_episodes = episodes;
    m_episodes_isSet = true;
}

bool OAICreate_vod_alt1_request::is_episodes_Set() const{
    return m_episodes_isSet;
}

bool OAICreate_vod_alt1_request::is_episodes_Valid() const{
    return m_episodes_isValid;
}

QString OAICreate_vod_alt1_request::getLink() const {
    return m_link;
}
void OAICreate_vod_alt1_request::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAICreate_vod_alt1_request::is_link_Set() const{
    return m_link_isSet;
}

bool OAICreate_vod_alt1_request::is_link_Valid() const{
    return m_link_isValid;
}

QString OAICreate_vod_alt1_request::getName() const {
    return m_name;
}
void OAICreate_vod_alt1_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreate_vod_alt1_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreate_vod_alt1_request::is_name_Valid() const{
    return m_name_isValid;
}

OAICreate_vod_alt1_request_rent OAICreate_vod_alt1_request::getRent() const {
    return m_rent;
}
void OAICreate_vod_alt1_request::setRent(const OAICreate_vod_alt1_request_rent &rent) {
    m_rent = rent;
    m_rent_isSet = true;
}

bool OAICreate_vod_alt1_request::is_rent_Set() const{
    return m_rent_isSet;
}

bool OAICreate_vod_alt1_request::is_rent_Valid() const{
    return m_rent_isValid;
}

OAICreate_vod_alt1_request_subscription OAICreate_vod_alt1_request::getSubscription() const {
    return m_subscription;
}
void OAICreate_vod_alt1_request::setSubscription(const OAICreate_vod_alt1_request_subscription &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAICreate_vod_alt1_request::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAICreate_vod_alt1_request::is_subscription_Valid() const{
    return m_subscription_isValid;
}

QString OAICreate_vod_alt1_request::getType() const {
    return m_type;
}
void OAICreate_vod_alt1_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreate_vod_alt1_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreate_vod_alt1_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICreate_vod_alt1_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_currencies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_vod_alt1_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_rating_isValid && m_description_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
