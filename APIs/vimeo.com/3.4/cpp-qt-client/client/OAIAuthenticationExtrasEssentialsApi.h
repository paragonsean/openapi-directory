/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthenticationExtrasEssentialsApi_H
#define OAI_OAIAuthenticationExtrasEssentialsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuth.h"
#include "OAIAuth_error.h"
#include "OAIClient_auth_request.h"
#include "OAIConvert_access_token_request.h"
#include "OAIError.h"
#include "OAIExchange_auth_code_request.h"
#include "OAILegacy_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthenticationExtrasEssentialsApi : public QObject {
    Q_OBJECT

public:
    OAIAuthenticationExtrasEssentialsApi(const int timeOut = 0);
    ~OAIAuthenticationExtrasEssentialsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_client_auth_request OAIClient_auth_request [required]
    */
    virtual void clientAuth(const OAIClient_auth_request &oai_client_auth_request);

    /**
    * @param[in]  oai_convert_access_token_request OAIConvert_access_token_request [required]
    */
    virtual void convertAccessToken(const OAIConvert_access_token_request &oai_convert_access_token_request);


    virtual void deleteToken();

    /**
    * @param[in]  oai_exchange_auth_code_request OAIExchange_auth_code_request [required]
    */
    virtual void exchangeAuthCode(const OAIExchange_auth_code_request &oai_exchange_auth_code_request);


    virtual void verifyToken();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void clientAuthCallback(OAIHttpRequestWorker *worker);
    void convertAccessTokenCallback(OAIHttpRequestWorker *worker);
    void deleteTokenCallback(OAIHttpRequestWorker *worker);
    void exchangeAuthCodeCallback(OAIHttpRequestWorker *worker);
    void verifyTokenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void clientAuthSignal(OAIAuth summary);
    void convertAccessTokenSignal(OAIAuth summary);
    void deleteTokenSignal(OAIAuth summary);
    void exchangeAuthCodeSignal(OAIAuth summary);
    void verifyTokenSignal(OAIAuth summary);


    void clientAuthSignalFull(OAIHttpRequestWorker *worker, OAIAuth summary);
    void convertAccessTokenSignalFull(OAIHttpRequestWorker *worker, OAIAuth summary);
    void deleteTokenSignalFull(OAIHttpRequestWorker *worker, OAIAuth summary);
    void exchangeAuthCodeSignalFull(OAIHttpRequestWorker *worker, OAIAuth summary);
    void verifyTokenSignalFull(OAIHttpRequestWorker *worker, OAIAuth summary);

    Q_DECL_DEPRECATED_X("Use clientAuthSignalError() instead")
    void clientAuthSignalE(OAIAuth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clientAuthSignalError(OAIAuth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use convertAccessTokenSignalError() instead")
    void convertAccessTokenSignalE(OAIAuth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void convertAccessTokenSignalError(OAIAuth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTokenSignalError() instead")
    void deleteTokenSignalE(OAIAuth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTokenSignalError(OAIAuth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exchangeAuthCodeSignalError() instead")
    void exchangeAuthCodeSignalE(OAIAuth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exchangeAuthCodeSignalError(OAIAuth summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyTokenSignalError() instead")
    void verifyTokenSignalE(OAIAuth summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyTokenSignalError(OAIAuth summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use clientAuthSignalErrorFull() instead")
    void clientAuthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clientAuthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use convertAccessTokenSignalErrorFull() instead")
    void convertAccessTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void convertAccessTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTokenSignalErrorFull() instead")
    void deleteTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exchangeAuthCodeSignalErrorFull() instead")
    void exchangeAuthCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exchangeAuthCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyTokenSignalErrorFull() instead")
    void verifyTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
