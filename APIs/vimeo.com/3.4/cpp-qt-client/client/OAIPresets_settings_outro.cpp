/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPresets_settings_outro.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPresets_settings_outro::OAIPresets_settings_outro(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPresets_settings_outro::OAIPresets_settings_outro() {
    this->initializeModel();
}

OAIPresets_settings_outro::~OAIPresets_settings_outro() {}

void OAIPresets_settings_outro::initializeModel() {

    m_clips_isSet = false;
    m_clips_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;
}

void OAIPresets_settings_outro::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPresets_settings_outro::fromJsonObject(QJsonObject json) {

    m_clips_isValid = ::OpenAPI::fromJsonValue(m_clips, json[QString("clips")]);
    m_clips_isSet = !json[QString("clips")].isNull() && m_clips_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;
}

QString OAIPresets_settings_outro::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPresets_settings_outro::asJsonObject() const {
    QJsonObject obj;
    if (m_clips_isSet) {
        obj.insert(QString("clips"), ::OpenAPI::toJsonValue(m_clips));
    }
    if (m_link.isSet()) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_videos_isSet) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    return obj;
}

QString OAIPresets_settings_outro::getClips() const {
    return m_clips;
}
void OAIPresets_settings_outro::setClips(const QString &clips) {
    m_clips = clips;
    m_clips_isSet = true;
}

bool OAIPresets_settings_outro::is_clips_Set() const{
    return m_clips_isSet;
}

bool OAIPresets_settings_outro::is_clips_Valid() const{
    return m_clips_isValid;
}

OAIPresets_settings_outro_link OAIPresets_settings_outro::getLink() const {
    return m_link;
}
void OAIPresets_settings_outro::setLink(const OAIPresets_settings_outro_link &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIPresets_settings_outro::is_link_Set() const{
    return m_link_isSet;
}

bool OAIPresets_settings_outro::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIPresets_settings_outro::getText() const {
    return m_text;
}
void OAIPresets_settings_outro::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPresets_settings_outro::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPresets_settings_outro::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIPresets_settings_outro::getType() const {
    return m_type;
}
void OAIPresets_settings_outro::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPresets_settings_outro::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPresets_settings_outro::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPresets_settings_outro::getVideos() const {
    return m_videos;
}
void OAIPresets_settings_outro::setVideos(const QString &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAIPresets_settings_outro::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAIPresets_settings_outro::is_videos_Valid() const{
    return m_videos_isValid;
}

bool OAIPresets_settings_outro::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPresets_settings_outro::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
