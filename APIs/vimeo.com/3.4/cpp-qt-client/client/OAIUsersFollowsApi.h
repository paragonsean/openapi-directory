/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersFollowsApi_H
#define OAI_OAIUsersFollowsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIFollow_users_alt1_request.h"
#include "OAILegacy_error.h"
#include "OAIUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersFollowsApi : public QObject {
    Q_OBJECT

public:
    OAIUsersFollowsApi(const int timeOut = 0);
    ~OAIUsersFollowsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  follow_user_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void checkIfUserIsFollowing(const double &follow_user_id, const double &user_id);

    /**
    * @param[in]  follow_user_id double [required]
    */
    virtual void checkIfUserIsFollowingAlt1(const double &follow_user_id);

    /**
    * @param[in]  follow_user_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void followUser(const double &follow_user_id, const double &user_id);

    /**
    * @param[in]  follow_user_id double [required]
    */
    virtual void followUserAlt1(const double &follow_user_id);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  oai_follow_users_alt1_request OAIFollow_users_alt1_request [required]
    */
    virtual void followUsers(const double &user_id, const OAIFollow_users_alt1_request &oai_follow_users_alt1_request);

    /**
    * @param[in]  oai_follow_users_alt1_request OAIFollow_users_alt1_request [required]
    */
    virtual void followUsersAlt1(const OAIFollow_users_alt1_request &oai_follow_users_alt1_request);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getFollowers(const double &user_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getFollowersAlt1(const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getUserFollowing(const double &user_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  direction QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getUserFollowingAlt1(const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  follow_user_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void unfollowUser(const double &follow_user_id, const double &user_id);

    /**
    * @param[in]  follow_user_id double [required]
    */
    virtual void unfollowUserAlt1(const double &follow_user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkIfUserIsFollowingCallback(OAIHttpRequestWorker *worker);
    void checkIfUserIsFollowingAlt1Callback(OAIHttpRequestWorker *worker);
    void followUserCallback(OAIHttpRequestWorker *worker);
    void followUserAlt1Callback(OAIHttpRequestWorker *worker);
    void followUsersCallback(OAIHttpRequestWorker *worker);
    void followUsersAlt1Callback(OAIHttpRequestWorker *worker);
    void getFollowersCallback(OAIHttpRequestWorker *worker);
    void getFollowersAlt1Callback(OAIHttpRequestWorker *worker);
    void getUserFollowingCallback(OAIHttpRequestWorker *worker);
    void getUserFollowingAlt1Callback(OAIHttpRequestWorker *worker);
    void unfollowUserCallback(OAIHttpRequestWorker *worker);
    void unfollowUserAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkIfUserIsFollowingSignal();
    void checkIfUserIsFollowingAlt1Signal();
    void followUserSignal();
    void followUserAlt1Signal();
    void followUsersSignal();
    void followUsersAlt1Signal();
    void getFollowersSignal(QList<OAIUser> summary);
    void getFollowersAlt1Signal(QList<OAIUser> summary);
    void getUserFollowingSignal(QList<OAIUser> summary);
    void getUserFollowingAlt1Signal(QList<OAIUser> summary);
    void unfollowUserSignal();
    void unfollowUserAlt1Signal();


    void checkIfUserIsFollowingSignalFull(OAIHttpRequestWorker *worker);
    void checkIfUserIsFollowingAlt1SignalFull(OAIHttpRequestWorker *worker);
    void followUserSignalFull(OAIHttpRequestWorker *worker);
    void followUserAlt1SignalFull(OAIHttpRequestWorker *worker);
    void followUsersSignalFull(OAIHttpRequestWorker *worker);
    void followUsersAlt1SignalFull(OAIHttpRequestWorker *worker);
    void getFollowersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void getFollowersAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void getUserFollowingSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void getUserFollowingAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void unfollowUserSignalFull(OAIHttpRequestWorker *worker);
    void unfollowUserAlt1SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use checkIfUserIsFollowingSignalError() instead")
    void checkIfUserIsFollowingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserIsFollowingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkIfUserIsFollowingAlt1SignalError() instead")
    void checkIfUserIsFollowingAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserIsFollowingAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followUserSignalError() instead")
    void followUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void followUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followUserAlt1SignalError() instead")
    void followUserAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void followUserAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followUsersSignalError() instead")
    void followUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void followUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followUsersAlt1SignalError() instead")
    void followUsersAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void followUsersAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFollowersSignalError() instead")
    void getFollowersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFollowersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFollowersAlt1SignalError() instead")
    void getFollowersAlt1SignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFollowersAlt1SignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserFollowingSignalError() instead")
    void getUserFollowingSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserFollowingSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserFollowingAlt1SignalError() instead")
    void getUserFollowingAlt1SignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserFollowingAlt1SignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfollowUserSignalError() instead")
    void unfollowUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unfollowUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfollowUserAlt1SignalError() instead")
    void unfollowUserAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unfollowUserAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkIfUserIsFollowingSignalErrorFull() instead")
    void checkIfUserIsFollowingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserIsFollowingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkIfUserIsFollowingAlt1SignalErrorFull() instead")
    void checkIfUserIsFollowingAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserIsFollowingAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followUserSignalErrorFull() instead")
    void followUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void followUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followUserAlt1SignalErrorFull() instead")
    void followUserAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void followUserAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followUsersSignalErrorFull() instead")
    void followUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void followUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use followUsersAlt1SignalErrorFull() instead")
    void followUsersAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void followUsersAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFollowersSignalErrorFull() instead")
    void getFollowersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFollowersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFollowersAlt1SignalErrorFull() instead")
    void getFollowersAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFollowersAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserFollowingSignalErrorFull() instead")
    void getUserFollowingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserFollowingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserFollowingAlt1SignalErrorFull() instead")
    void getUserFollowingAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserFollowingAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfollowUserSignalErrorFull() instead")
    void unfollowUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unfollowUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unfollowUserAlt1SignalErrorFull() instead")
    void unfollowUserAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unfollowUserAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
