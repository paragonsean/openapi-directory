/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChannelsVideosApi_H
#define OAI_OAIChannelsVideosApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdd_videos_to_channel_request.h"
#include "OAIChannel.h"
#include "OAILegacy_error.h"
#include "OAIRemove_videos_from_channel_request.h"
#include "OAIVideo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChannelsVideosApi : public QObject {
    Q_OBJECT

public:
    OAIChannelsVideosApi(const int timeOut = 0);
    ~OAIChannelsVideosApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void addVideoToChannel(const double &channel_id, const double &video_id);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  oai_add_videos_to_channel_request OAIAdd_videos_to_channel_request [required]
    */
    virtual void addVideosToChannel(const double &channel_id, const OAIAdd_videos_to_channel_request &oai_add_videos_to_channel_request);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void deleteVideoFromChannel(const double &channel_id, const double &video_id);

    /**
    * @param[in]  video_id double [required]
    */
    virtual void getAvailableVideoChannels(const double &video_id);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void getChannelVideo(const double &channel_id, const double &video_id);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  containing_uri QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  filter_embeddable bool [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getChannelVideos(const double &channel_id, const ::OpenAPI::OptionalParam<QString> &containing_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &filter_embeddable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  oai_remove_videos_from_channel_request OAIRemove_videos_from_channel_request [required]
    */
    virtual void removeVideosFromChannel(const double &channel_id, const OAIRemove_videos_from_channel_request &oai_remove_videos_from_channel_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addVideoToChannelCallback(OAIHttpRequestWorker *worker);
    void addVideosToChannelCallback(OAIHttpRequestWorker *worker);
    void deleteVideoFromChannelCallback(OAIHttpRequestWorker *worker);
    void getAvailableVideoChannelsCallback(OAIHttpRequestWorker *worker);
    void getChannelVideoCallback(OAIHttpRequestWorker *worker);
    void getChannelVideosCallback(OAIHttpRequestWorker *worker);
    void removeVideosFromChannelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addVideoToChannelSignal();
    void addVideosToChannelSignal();
    void deleteVideoFromChannelSignal();
    void getAvailableVideoChannelsSignal(QList<OAIChannel> summary);
    void getChannelVideoSignal(OAIVideo summary);
    void getChannelVideosSignal(QList<OAIVideo> summary);
    void removeVideosFromChannelSignal(OAIVideo summary);


    void addVideoToChannelSignalFull(OAIHttpRequestWorker *worker);
    void addVideosToChannelSignalFull(OAIHttpRequestWorker *worker);
    void deleteVideoFromChannelSignalFull(OAIHttpRequestWorker *worker);
    void getAvailableVideoChannelsSignalFull(OAIHttpRequestWorker *worker, QList<OAIChannel> summary);
    void getChannelVideoSignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);
    void getChannelVideosSignalFull(OAIHttpRequestWorker *worker, QList<OAIVideo> summary);
    void removeVideosFromChannelSignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);

    Q_DECL_DEPRECATED_X("Use addVideoToChannelSignalError() instead")
    void addVideoToChannelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToChannelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideosToChannelSignalError() instead")
    void addVideosToChannelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVideosToChannelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoFromChannelSignalError() instead")
    void deleteVideoFromChannelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoFromChannelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvailableVideoChannelsSignalError() instead")
    void getAvailableVideoChannelsSignalE(QList<OAIChannel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableVideoChannelsSignalError(QList<OAIChannel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelVideoSignalError() instead")
    void getChannelVideoSignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelVideoSignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelVideosSignalError() instead")
    void getChannelVideosSignalE(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelVideosSignalError(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVideosFromChannelSignalError() instead")
    void removeVideosFromChannelSignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeVideosFromChannelSignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addVideoToChannelSignalErrorFull() instead")
    void addVideoToChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideosToChannelSignalErrorFull() instead")
    void addVideosToChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideosToChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoFromChannelSignalErrorFull() instead")
    void deleteVideoFromChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoFromChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAvailableVideoChannelsSignalErrorFull() instead")
    void getAvailableVideoChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAvailableVideoChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelVideoSignalErrorFull() instead")
    void getChannelVideoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelVideoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelVideosSignalErrorFull() instead")
    void getChannelVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVideosFromChannelSignalErrorFull() instead")
    void removeVideosFromChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeVideosFromChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
