/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExchange_auth_code_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExchange_auth_code_request::OAIExchange_auth_code_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExchange_auth_code_request::OAIExchange_auth_code_request() {
    this->initializeModel();
}

OAIExchange_auth_code_request::~OAIExchange_auth_code_request() {}

void OAIExchange_auth_code_request::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_grant_type_isSet = false;
    m_grant_type_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;
}

void OAIExchange_auth_code_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExchange_auth_code_request::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_grant_type_isValid = ::OpenAPI::fromJsonValue(m_grant_type, json[QString("grant_type")]);
    m_grant_type_isSet = !json[QString("grant_type")].isNull() && m_grant_type_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirect_uri")]);
    m_redirect_uri_isSet = !json[QString("redirect_uri")].isNull() && m_redirect_uri_isValid;
}

QString OAIExchange_auth_code_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExchange_auth_code_request::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_grant_type_isSet) {
        obj.insert(QString("grant_type"), ::OpenAPI::toJsonValue(m_grant_type));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirect_uri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    return obj;
}

QString OAIExchange_auth_code_request::getCode() const {
    return m_code;
}
void OAIExchange_auth_code_request::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIExchange_auth_code_request::is_code_Set() const{
    return m_code_isSet;
}

bool OAIExchange_auth_code_request::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIExchange_auth_code_request::getGrantType() const {
    return m_grant_type;
}
void OAIExchange_auth_code_request::setGrantType(const QString &grant_type) {
    m_grant_type = grant_type;
    m_grant_type_isSet = true;
}

bool OAIExchange_auth_code_request::is_grant_type_Set() const{
    return m_grant_type_isSet;
}

bool OAIExchange_auth_code_request::is_grant_type_Valid() const{
    return m_grant_type_isValid;
}

QString OAIExchange_auth_code_request::getRedirectUri() const {
    return m_redirect_uri;
}
void OAIExchange_auth_code_request::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAIExchange_auth_code_request::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAIExchange_auth_code_request::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

bool OAIExchange_auth_code_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExchange_auth_code_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_grant_type_isValid && m_redirect_uri_isValid && true;
}

} // namespace OpenAPI
