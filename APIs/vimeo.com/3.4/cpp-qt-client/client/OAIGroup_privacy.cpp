/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup_privacy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup_privacy::OAIGroup_privacy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup_privacy::OAIGroup_privacy() {
    this->initializeModel();
}

OAIGroup_privacy::~OAIGroup_privacy() {}

void OAIGroup_privacy::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_invite_isSet = false;
    m_invite_isValid = false;

    m_join_isSet = false;
    m_join_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;
}

void OAIGroup_privacy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup_privacy::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_invite_isValid = ::OpenAPI::fromJsonValue(m_invite, json[QString("invite")]);
    m_invite_isSet = !json[QString("invite")].isNull() && m_invite_isValid;

    m_join_isValid = ::OpenAPI::fromJsonValue(m_join, json[QString("join")]);
    m_join_isSet = !json[QString("join")].isNull() && m_join_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;
}

QString OAIGroup_privacy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup_privacy::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_invite_isSet) {
        obj.insert(QString("invite"), ::OpenAPI::toJsonValue(m_invite));
    }
    if (m_join_isSet) {
        obj.insert(QString("join"), ::OpenAPI::toJsonValue(m_join));
    }
    if (m_videos_isSet) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    if (m_view_isSet) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    return obj;
}

QString OAIGroup_privacy::getComment() const {
    return m_comment;
}
void OAIGroup_privacy::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIGroup_privacy::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIGroup_privacy::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIGroup_privacy::getInvite() const {
    return m_invite;
}
void OAIGroup_privacy::setInvite(const QString &invite) {
    m_invite = invite;
    m_invite_isSet = true;
}

bool OAIGroup_privacy::is_invite_Set() const{
    return m_invite_isSet;
}

bool OAIGroup_privacy::is_invite_Valid() const{
    return m_invite_isValid;
}

QString OAIGroup_privacy::getJoin() const {
    return m_join;
}
void OAIGroup_privacy::setJoin(const QString &join) {
    m_join = join;
    m_join_isSet = true;
}

bool OAIGroup_privacy::is_join_Set() const{
    return m_join_isSet;
}

bool OAIGroup_privacy::is_join_Valid() const{
    return m_join_isValid;
}

QString OAIGroup_privacy::getVideos() const {
    return m_videos;
}
void OAIGroup_privacy::setVideos(const QString &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAIGroup_privacy::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAIGroup_privacy::is_videos_Valid() const{
    return m_videos_isValid;
}

QString OAIGroup_privacy::getView() const {
    return m_view;
}
void OAIGroup_privacy::setView(const QString &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAIGroup_privacy::is_view_Set() const{
    return m_view_isSet;
}

bool OAIGroup_privacy::is_view_Valid() const{
    return m_view_isValid;
}

bool OAIGroup_privacy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup_privacy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comment_isValid && m_invite_isValid && m_join_isValid && m_videos_isValid && m_view_isValid && true;
}

} // namespace OpenAPI
