/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOn_demand_page_metadata_connections_metadata_connections.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOn_demand_page_metadata_connections_metadata_connections::OAIOn_demand_page_metadata_connections_metadata_connections(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOn_demand_page_metadata_connections_metadata_connections::OAIOn_demand_page_metadata_connections_metadata_connections() {
    this->initializeModel();
}

OAIOn_demand_page_metadata_connections_metadata_connections::~OAIOn_demand_page_metadata_connections_metadata_connections() {}

void OAIOn_demand_page_metadata_connections_metadata_connections::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_genres_isSet = false;
    m_genres_isValid = false;

    m_likes_isSet = false;
    m_likes_isValid = false;

    m_pictures_isSet = false;
    m_pictures_isValid = false;

    m_seasons_isSet = false;
    m_seasons_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;
}

void OAIOn_demand_page_metadata_connections_metadata_connections::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOn_demand_page_metadata_connections_metadata_connections::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_genres_isValid = ::OpenAPI::fromJsonValue(m_genres, json[QString("genres")]);
    m_genres_isSet = !json[QString("genres")].isNull() && m_genres_isValid;

    m_likes_isValid = ::OpenAPI::fromJsonValue(m_likes, json[QString("likes")]);
    m_likes_isSet = !json[QString("likes")].isNull() && m_likes_isValid;

    m_pictures_isValid = ::OpenAPI::fromJsonValue(m_pictures, json[QString("pictures")]);
    m_pictures_isSet = !json[QString("pictures")].isNull() && m_pictures_isValid;

    m_seasons_isValid = ::OpenAPI::fromJsonValue(m_seasons, json[QString("seasons")]);
    m_seasons_isSet = !json[QString("seasons")].isNull() && m_seasons_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;
}

QString OAIOn_demand_page_metadata_connections_metadata_connections::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOn_demand_page_metadata_connections_metadata_connections::asJsonObject() const {
    QJsonObject obj;
    if (m_comments.isSet()) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_genres.isSet()) {
        obj.insert(QString("genres"), ::OpenAPI::toJsonValue(m_genres));
    }
    if (m_likes.isSet()) {
        obj.insert(QString("likes"), ::OpenAPI::toJsonValue(m_likes));
    }
    if (m_pictures.isSet()) {
        obj.insert(QString("pictures"), ::OpenAPI::toJsonValue(m_pictures));
    }
    if (m_seasons.isSet()) {
        obj.insert(QString("seasons"), ::OpenAPI::toJsonValue(m_seasons));
    }
    if (m_videos.isSet()) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    return obj;
}

OAIOn_demand_page_metadata_connections_metadata_connections_comments OAIOn_demand_page_metadata_connections_metadata_connections::getComments() const {
    return m_comments;
}
void OAIOn_demand_page_metadata_connections_metadata_connections::setComments(const OAIOn_demand_page_metadata_connections_metadata_connections_comments &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIOn_demand_page_metadata_connections_metadata_connections::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIOn_demand_page_metadata_connections_metadata_connections::is_comments_Valid() const{
    return m_comments_isValid;
}

OAIOn_demand_page_metadata_connections_metadata_connections_genres OAIOn_demand_page_metadata_connections_metadata_connections::getGenres() const {
    return m_genres;
}
void OAIOn_demand_page_metadata_connections_metadata_connections::setGenres(const OAIOn_demand_page_metadata_connections_metadata_connections_genres &genres) {
    m_genres = genres;
    m_genres_isSet = true;
}

bool OAIOn_demand_page_metadata_connections_metadata_connections::is_genres_Set() const{
    return m_genres_isSet;
}

bool OAIOn_demand_page_metadata_connections_metadata_connections::is_genres_Valid() const{
    return m_genres_isValid;
}

OAIOn_demand_page_metadata_connections_metadata_connections_likes OAIOn_demand_page_metadata_connections_metadata_connections::getLikes() const {
    return m_likes;
}
void OAIOn_demand_page_metadata_connections_metadata_connections::setLikes(const OAIOn_demand_page_metadata_connections_metadata_connections_likes &likes) {
    m_likes = likes;
    m_likes_isSet = true;
}

bool OAIOn_demand_page_metadata_connections_metadata_connections::is_likes_Set() const{
    return m_likes_isSet;
}

bool OAIOn_demand_page_metadata_connections_metadata_connections::is_likes_Valid() const{
    return m_likes_isValid;
}

OAIOn_demand_page_metadata_connections_metadata_connections_pictures OAIOn_demand_page_metadata_connections_metadata_connections::getPictures() const {
    return m_pictures;
}
void OAIOn_demand_page_metadata_connections_metadata_connections::setPictures(const OAIOn_demand_page_metadata_connections_metadata_connections_pictures &pictures) {
    m_pictures = pictures;
    m_pictures_isSet = true;
}

bool OAIOn_demand_page_metadata_connections_metadata_connections::is_pictures_Set() const{
    return m_pictures_isSet;
}

bool OAIOn_demand_page_metadata_connections_metadata_connections::is_pictures_Valid() const{
    return m_pictures_isValid;
}

OAIOn_demand_page_metadata_connections_metadata_connections_seasons OAIOn_demand_page_metadata_connections_metadata_connections::getSeasons() const {
    return m_seasons;
}
void OAIOn_demand_page_metadata_connections_metadata_connections::setSeasons(const OAIOn_demand_page_metadata_connections_metadata_connections_seasons &seasons) {
    m_seasons = seasons;
    m_seasons_isSet = true;
}

bool OAIOn_demand_page_metadata_connections_metadata_connections::is_seasons_Set() const{
    return m_seasons_isSet;
}

bool OAIOn_demand_page_metadata_connections_metadata_connections::is_seasons_Valid() const{
    return m_seasons_isValid;
}

OAIOn_demand_page_metadata_connections_metadata_connections_videos OAIOn_demand_page_metadata_connections_metadata_connections::getVideos() const {
    return m_videos;
}
void OAIOn_demand_page_metadata_connections_metadata_connections::setVideos(const OAIOn_demand_page_metadata_connections_metadata_connections_videos &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAIOn_demand_page_metadata_connections_metadata_connections::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAIOn_demand_page_metadata_connections_metadata_connections::is_videos_Valid() const{
    return m_videos_isValid;
}

bool OAIOn_demand_page_metadata_connections_metadata_connections::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_genres.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_likes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pictures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOn_demand_page_metadata_connections_metadata_connections::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comments_isValid && m_genres_isValid && m_likes_isValid && m_pictures_isValid && m_seasons_isValid && m_videos_isValid && true;
}

} // namespace OpenAPI
