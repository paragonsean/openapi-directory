/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOnDemandPromotionsApi_H
#define OAI_OAIOnDemandPromotionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_vod_promotion_request.h"
#include "OAILegacy_error.h"
#include "OAIOn_demand_promotion.h"
#include "OAIOn_demand_promotion_code.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOnDemandPromotionsApi : public QObject {
    Q_OBJECT

public:
    OAIOnDemandPromotionsApi(const int timeOut = 0);
    ~OAIOnDemandPromotionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ondemand_id double [required]
    * @param[in]  oai_create_vod_promotion_request OAICreate_vod_promotion_request [required]
    */
    virtual void createVodPromotion(const double &ondemand_id, const OAICreate_vod_promotion_request &oai_create_vod_promotion_request);

    /**
    * @param[in]  ondemand_id double [required]
    * @param[in]  promotion_id double [required]
    */
    virtual void deleteVodPromotion(const double &ondemand_id, const double &promotion_id);

    /**
    * @param[in]  ondemand_id double [required]
    * @param[in]  promotion_id double [required]
    */
    virtual void getVodPromotion(const double &ondemand_id, const double &promotion_id);

    /**
    * @param[in]  ondemand_id double [required]
    * @param[in]  promotion_id double [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getVodPromotionCodes(const double &ondemand_id, const double &promotion_id, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  ondemand_id double [required]
    * @param[in]  filter QString [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getVodPromotions(const double &ondemand_id, const QString &filter, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createVodPromotionCallback(OAIHttpRequestWorker *worker);
    void deleteVodPromotionCallback(OAIHttpRequestWorker *worker);
    void getVodPromotionCallback(OAIHttpRequestWorker *worker);
    void getVodPromotionCodesCallback(OAIHttpRequestWorker *worker);
    void getVodPromotionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createVodPromotionSignal(OAIOn_demand_promotion summary);
    void deleteVodPromotionSignal();
    void getVodPromotionSignal(OAIOn_demand_promotion summary);
    void getVodPromotionCodesSignal(OAIOn_demand_promotion_code summary);
    void getVodPromotionsSignal(OAIOn_demand_promotion summary);


    void createVodPromotionSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_promotion summary);
    void deleteVodPromotionSignalFull(OAIHttpRequestWorker *worker);
    void getVodPromotionSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_promotion summary);
    void getVodPromotionCodesSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_promotion_code summary);
    void getVodPromotionsSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_promotion summary);

    Q_DECL_DEPRECATED_X("Use createVodPromotionSignalError() instead")
    void createVodPromotionSignalE(OAIOn_demand_promotion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVodPromotionSignalError(OAIOn_demand_promotion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVodPromotionSignalError() instead")
    void deleteVodPromotionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVodPromotionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodPromotionSignalError() instead")
    void getVodPromotionSignalE(OAIOn_demand_promotion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodPromotionSignalError(OAIOn_demand_promotion summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodPromotionCodesSignalError() instead")
    void getVodPromotionCodesSignalE(OAIOn_demand_promotion_code summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodPromotionCodesSignalError(OAIOn_demand_promotion_code summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodPromotionsSignalError() instead")
    void getVodPromotionsSignalE(OAIOn_demand_promotion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodPromotionsSignalError(OAIOn_demand_promotion summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createVodPromotionSignalErrorFull() instead")
    void createVodPromotionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVodPromotionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVodPromotionSignalErrorFull() instead")
    void deleteVodPromotionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVodPromotionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodPromotionSignalErrorFull() instead")
    void getVodPromotionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodPromotionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodPromotionCodesSignalErrorFull() instead")
    void getVodPromotionCodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodPromotionCodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodPromotionsSignalErrorFull() instead")
    void getVodPromotionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodPromotionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
