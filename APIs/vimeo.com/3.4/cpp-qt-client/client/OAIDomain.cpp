/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomain.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomain::OAIDomain(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomain::OAIDomain() {
    this->initializeModel();
}

OAIDomain::~OAIDomain() {}

void OAIDomain::initializeModel() {

    m_allow_hd_isSet = false;
    m_allow_hd_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIDomain::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomain::fromJsonObject(QJsonObject json) {

    m_allow_hd_isValid = ::OpenAPI::fromJsonValue(m_allow_hd, json[QString("allow_hd")]);
    m_allow_hd_isSet = !json[QString("allow_hd")].isNull() && m_allow_hd_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIDomain::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomain::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_hd_isSet) {
        obj.insert(QString("allow_hd"), ::OpenAPI::toJsonValue(m_allow_hd));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

bool OAIDomain::isAllowHd() const {
    return m_allow_hd;
}
void OAIDomain::setAllowHd(const bool &allow_hd) {
    m_allow_hd = allow_hd;
    m_allow_hd_isSet = true;
}

bool OAIDomain::is_allow_hd_Set() const{
    return m_allow_hd_isSet;
}

bool OAIDomain::is_allow_hd_Valid() const{
    return m_allow_hd_isValid;
}

QString OAIDomain::getDomain() const {
    return m_domain;
}
void OAIDomain::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDomain::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDomain::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIDomain::getUri() const {
    return m_uri;
}
void OAIDomain::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIDomain::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIDomain::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIDomain::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_hd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomain::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_hd_isValid && m_domain_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
