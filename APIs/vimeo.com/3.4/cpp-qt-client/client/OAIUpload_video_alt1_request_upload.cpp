/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpload_video_alt1_request_upload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpload_video_alt1_request_upload::OAIUpload_video_alt1_request_upload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpload_video_alt1_request_upload::OAIUpload_video_alt1_request_upload() {
    this->initializeModel();
}

OAIUpload_video_alt1_request_upload::~OAIUpload_video_alt1_request_upload() {}

void OAIUpload_video_alt1_request_upload::initializeModel() {

    m_approach_isSet = false;
    m_approach_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIUpload_video_alt1_request_upload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpload_video_alt1_request_upload::fromJsonObject(QJsonObject json) {

    m_approach_isValid = ::OpenAPI::fromJsonValue(m_approach, json[QString("approach")]);
    m_approach_isSet = !json[QString("approach")].isNull() && m_approach_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("redirect_url")]);
    m_redirect_url_isSet = !json[QString("redirect_url")].isNull() && m_redirect_url_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIUpload_video_alt1_request_upload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpload_video_alt1_request_upload::asJsonObject() const {
    QJsonObject obj;
    if (m_approach_isSet) {
        obj.insert(QString("approach"), ::OpenAPI::toJsonValue(m_approach));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirect_url"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAIUpload_video_alt1_request_upload::getApproach() const {
    return m_approach;
}
void OAIUpload_video_alt1_request_upload::setApproach(const QString &approach) {
    m_approach = approach;
    m_approach_isSet = true;
}

bool OAIUpload_video_alt1_request_upload::is_approach_Set() const{
    return m_approach_isSet;
}

bool OAIUpload_video_alt1_request_upload::is_approach_Valid() const{
    return m_approach_isValid;
}

QString OAIUpload_video_alt1_request_upload::getLink() const {
    return m_link;
}
void OAIUpload_video_alt1_request_upload::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIUpload_video_alt1_request_upload::is_link_Set() const{
    return m_link_isSet;
}

bool OAIUpload_video_alt1_request_upload::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIUpload_video_alt1_request_upload::getRedirectUrl() const {
    return m_redirect_url;
}
void OAIUpload_video_alt1_request_upload::setRedirectUrl(const QString &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAIUpload_video_alt1_request_upload::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAIUpload_video_alt1_request_upload::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

QString OAIUpload_video_alt1_request_upload::getSize() const {
    return m_size;
}
void OAIUpload_video_alt1_request_upload::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIUpload_video_alt1_request_upload::is_size_Set() const{
    return m_size_isSet;
}

bool OAIUpload_video_alt1_request_upload::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIUpload_video_alt1_request_upload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approach_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpload_video_alt1_request_upload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_approach_isValid && true;
}

} // namespace OpenAPI
