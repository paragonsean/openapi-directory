/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChannelsCategoriesApi_H
#define OAI_OAIChannelsCategoriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdd_channel_categories_request.h"
#include "OAICategory.h"
#include "OAIError.h"
#include "OAILegacy_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChannelsCategoriesApi : public QObject {
    Q_OBJECT

public:
    OAIChannelsCategoriesApi(const int timeOut = 0);
    ~OAIChannelsCategoriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  oai_add_channel_categories_request OAIAdd_channel_categories_request [required]
    */
    virtual void addChannelCategories(const double &channel_id, const OAIAdd_channel_categories_request &oai_add_channel_categories_request);

    /**
    * @param[in]  category QString [required]
    * @param[in]  channel_id double [required]
    */
    virtual void categorizeChannel(const QString &category, const double &channel_id);

    /**
    * @param[in]  category QString [required]
    * @param[in]  channel_id double [required]
    */
    virtual void deleteChannelCategory(const QString &category, const double &channel_id);

    /**
    * @param[in]  channel_id double [required]
    */
    virtual void getChannelCategories(const double &channel_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addChannelCategoriesCallback(OAIHttpRequestWorker *worker);
    void categorizeChannelCallback(OAIHttpRequestWorker *worker);
    void deleteChannelCategoryCallback(OAIHttpRequestWorker *worker);
    void getChannelCategoriesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addChannelCategoriesSignal();
    void categorizeChannelSignal();
    void deleteChannelCategorySignal();
    void getChannelCategoriesSignal(QList<OAICategory> summary);


    void addChannelCategoriesSignalFull(OAIHttpRequestWorker *worker);
    void categorizeChannelSignalFull(OAIHttpRequestWorker *worker);
    void deleteChannelCategorySignalFull(OAIHttpRequestWorker *worker);
    void getChannelCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAICategory> summary);

    Q_DECL_DEPRECATED_X("Use addChannelCategoriesSignalError() instead")
    void addChannelCategoriesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addChannelCategoriesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categorizeChannelSignalError() instead")
    void categorizeChannelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void categorizeChannelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelCategorySignalError() instead")
    void deleteChannelCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelCategoriesSignalError() instead")
    void getChannelCategoriesSignalE(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelCategoriesSignalError(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addChannelCategoriesSignalErrorFull() instead")
    void addChannelCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addChannelCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categorizeChannelSignalErrorFull() instead")
    void categorizeChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categorizeChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelCategorySignalErrorFull() instead")
    void deleteChannelCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelCategoriesSignalErrorFull() instead")
    void getChannelCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
