/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreative_commons.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreative_commons::OAICreative_commons(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreative_commons::OAICreative_commons() {
    this->initializeModel();
}

OAICreative_commons::~OAICreative_commons() {}

void OAICreative_commons::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAICreative_commons::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreative_commons::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAICreative_commons::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreative_commons::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAICreative_commons::getCode() const {
    return m_code;
}
void OAICreative_commons::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICreative_commons::is_code_Set() const{
    return m_code_isSet;
}

bool OAICreative_commons::is_code_Valid() const{
    return m_code_isValid;
}

QString OAICreative_commons::getName() const {
    return m_name;
}
void OAICreative_commons::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreative_commons::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreative_commons::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreative_commons::getUri() const {
    return m_uri;
}
void OAICreative_commons::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAICreative_commons::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAICreative_commons::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAICreative_commons::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreative_commons::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_name_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
