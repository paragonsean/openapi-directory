/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChannelsPrivateChannelMembersApi_H
#define OAI_OAIChannelsPrivateChannelMembersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAISet_channel_privacy_users_request.h"
#include "OAIUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChannelsPrivateChannelMembersApi : public QObject {
    Q_OBJECT

public:
    OAIChannelsPrivateChannelMembersApi(const int timeOut = 0);
    ~OAIChannelsPrivateChannelMembersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void deleteChannelPrivacyUser(const double &channel_id, const double &user_id);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getChannelPrivacyUsers(const double &channel_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void setChannelPrivacyUser(const double &channel_id, const double &user_id);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  oai_set_channel_privacy_users_request OAISet_channel_privacy_users_request [required]
    */
    virtual void setChannelPrivacyUsers(const double &channel_id, const OAISet_channel_privacy_users_request &oai_set_channel_privacy_users_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteChannelPrivacyUserCallback(OAIHttpRequestWorker *worker);
    void getChannelPrivacyUsersCallback(OAIHttpRequestWorker *worker);
    void setChannelPrivacyUserCallback(OAIHttpRequestWorker *worker);
    void setChannelPrivacyUsersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteChannelPrivacyUserSignal();
    void getChannelPrivacyUsersSignal(QList<OAIUser> summary);
    void setChannelPrivacyUserSignal();
    void setChannelPrivacyUsersSignal(QList<OAIUser> summary);


    void deleteChannelPrivacyUserSignalFull(OAIHttpRequestWorker *worker);
    void getChannelPrivacyUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void setChannelPrivacyUserSignalFull(OAIHttpRequestWorker *worker);
    void setChannelPrivacyUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);

    Q_DECL_DEPRECATED_X("Use deleteChannelPrivacyUserSignalError() instead")
    void deleteChannelPrivacyUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelPrivacyUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelPrivacyUsersSignalError() instead")
    void getChannelPrivacyUsersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelPrivacyUsersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChannelPrivacyUserSignalError() instead")
    void setChannelPrivacyUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setChannelPrivacyUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChannelPrivacyUsersSignalError() instead")
    void setChannelPrivacyUsersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setChannelPrivacyUsersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteChannelPrivacyUserSignalErrorFull() instead")
    void deleteChannelPrivacyUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelPrivacyUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelPrivacyUsersSignalErrorFull() instead")
    void getChannelPrivacyUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelPrivacyUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChannelPrivacyUserSignalErrorFull() instead")
    void setChannelPrivacyUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setChannelPrivacyUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setChannelPrivacyUsersSignalErrorFull() instead")
    void setChannelPrivacyUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setChannelPrivacyUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
