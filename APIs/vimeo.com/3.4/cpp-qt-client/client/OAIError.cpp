/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_developer_message_isSet = false;
    m_developer_message_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_developer_message_isValid = ::OpenAPI::fromJsonValue(m_developer_message, json[QString("developer_message")]);
    m_developer_message_isSet = !json[QString("developer_message")].isNull() && m_developer_message_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("error_code")]);
    m_error_code_isSet = !json[QString("error_code")].isNull() && m_error_code_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_developer_message_isSet) {
        obj.insert(QString("developer_message"), ::OpenAPI::toJsonValue(m_developer_message));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("error_code"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    return obj;
}

QString OAIError::getDeveloperMessage() const {
    return m_developer_message;
}
void OAIError::setDeveloperMessage(const QString &developer_message) {
    m_developer_message = developer_message;
    m_developer_message_isSet = true;
}

bool OAIError::is_developer_message_Set() const{
    return m_developer_message_isSet;
}

bool OAIError::is_developer_message_Valid() const{
    return m_developer_message_isValid;
}

QString OAIError::getError() const {
    return m_error;
}
void OAIError::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIError::is_error_Set() const{
    return m_error_isSet;
}

bool OAIError::is_error_Valid() const{
    return m_error_isValid;
}

double OAIError::getErrorCode() const {
    return m_error_code;
}
void OAIError::setErrorCode(const double &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIError::getLink() const {
    return m_link;
}
void OAIError::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIError::is_link_Set() const{
    return m_link_isSet;
}

bool OAIError::is_link_Valid() const{
    return m_link_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_developer_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_developer_message_isValid && m_error_isValid && m_error_code_isValid && m_link_isValid && true;
}

} // namespace OpenAPI
