/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVideosCommentsApi_H
#define OAI_OAIVideosCommentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIComment.h"
#include "OAICreate_comment_alt1_request.h"
#include "OAICreate_comment_reply_request.h"
#include "OAIEdit_comment_request.h"
#include "OAIError.h"
#include "OAILegacy_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVideosCommentsApi : public QObject {
    Q_OBJECT

public:
    OAIVideosCommentsApi(const int timeOut = 0);
    ~OAIVideosCommentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  video_id double [required]
    * @param[in]  oai_create_comment_alt1_request OAICreate_comment_alt1_request [required]
    */
    virtual void createComment(const double &video_id, const OAICreate_comment_alt1_request &oai_create_comment_alt1_request);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  oai_create_comment_alt1_request OAICreate_comment_alt1_request [required]
    */
    virtual void createCommentAlt1(const double &channel_id, const double &video_id, const OAICreate_comment_alt1_request &oai_create_comment_alt1_request);

    /**
    * @param[in]  comment_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  oai_create_comment_reply_request OAICreate_comment_reply_request [required]
    */
    virtual void createCommentReply(const double &comment_id, const double &video_id, const OAICreate_comment_reply_request &oai_create_comment_reply_request);

    /**
    * @param[in]  comment_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void deleteComment(const double &comment_id, const double &video_id);

    /**
    * @param[in]  comment_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  oai_edit_comment_request OAIEdit_comment_request [required]
    */
    virtual void editComment(const double &comment_id, const double &video_id, const OAIEdit_comment_request &oai_edit_comment_request);

    /**
    * @param[in]  comment_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void getComment(const double &comment_id, const double &video_id);

    /**
    * @param[in]  comment_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getCommentReplies(const double &comment_id, const double &video_id, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  video_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getComments(const double &video_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getCommentsAlt1(const double &channel_id, const double &video_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCommentCallback(OAIHttpRequestWorker *worker);
    void createCommentAlt1Callback(OAIHttpRequestWorker *worker);
    void createCommentReplyCallback(OAIHttpRequestWorker *worker);
    void deleteCommentCallback(OAIHttpRequestWorker *worker);
    void editCommentCallback(OAIHttpRequestWorker *worker);
    void getCommentCallback(OAIHttpRequestWorker *worker);
    void getCommentRepliesCallback(OAIHttpRequestWorker *worker);
    void getCommentsCallback(OAIHttpRequestWorker *worker);
    void getCommentsAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCommentSignal(OAIComment summary);
    void createCommentAlt1Signal(OAIComment summary);
    void createCommentReplySignal(OAIComment summary);
    void deleteCommentSignal();
    void editCommentSignal(OAIComment summary);
    void getCommentSignal(OAIComment summary);
    void getCommentRepliesSignal(QList<OAIComment> summary);
    void getCommentsSignal(QList<OAIComment> summary);
    void getCommentsAlt1Signal(QList<OAIComment> summary);


    void createCommentSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void createCommentAlt1SignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void createCommentReplySignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void deleteCommentSignalFull(OAIHttpRequestWorker *worker);
    void editCommentSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void getCommentSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void getCommentRepliesSignalFull(OAIHttpRequestWorker *worker, QList<OAIComment> summary);
    void getCommentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIComment> summary);
    void getCommentsAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIComment> summary);

    Q_DECL_DEPRECATED_X("Use createCommentSignalError() instead")
    void createCommentSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCommentSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCommentAlt1SignalError() instead")
    void createCommentAlt1SignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCommentAlt1SignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCommentReplySignalError() instead")
    void createCommentReplySignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCommentReplySignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCommentSignalError() instead")
    void deleteCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editCommentSignalError() instead")
    void editCommentSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editCommentSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentSignalError() instead")
    void getCommentSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentRepliesSignalError() instead")
    void getCommentRepliesSignalE(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentRepliesSignalError(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentsSignalError() instead")
    void getCommentsSignalE(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentsSignalError(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentsAlt1SignalError() instead")
    void getCommentsAlt1SignalE(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentsAlt1SignalError(QList<OAIComment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCommentSignalErrorFull() instead")
    void createCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCommentAlt1SignalErrorFull() instead")
    void createCommentAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCommentAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCommentReplySignalErrorFull() instead")
    void createCommentReplySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCommentReplySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCommentSignalErrorFull() instead")
    void deleteCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editCommentSignalErrorFull() instead")
    void editCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentSignalErrorFull() instead")
    void getCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentRepliesSignalErrorFull() instead")
    void getCommentRepliesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentRepliesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentsSignalErrorFull() instead")
    void getCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentsAlt1SignalErrorFull() instead")
    void getCommentsAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentsAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
