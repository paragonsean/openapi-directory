/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlbum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlbum::OAIAlbum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlbum::OAIAlbum() {
    this->initializeModel();
}

OAIAlbum::~OAIAlbum() {}

void OAIAlbum::initializeModel() {

    m_allow_continuous_play_isSet = false;
    m_allow_continuous_play_isValid = false;

    m_allow_downloads_isSet = false;
    m_allow_downloads_isValid = false;

    m_allow_share_isSet = false;
    m_allow_share_isValid = false;

    m_brand_color_isSet = false;
    m_brand_color_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_custom_logo_isSet = false;
    m_custom_logo_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_embed_isSet = false;
    m_embed_isValid = false;

    m_embed_brand_color_isSet = false;
    m_embed_brand_color_isValid = false;

    m_embed_custom_logo_isSet = false;
    m_embed_custom_logo_isValid = false;

    m_hide_nav_isSet = false;
    m_hide_nav_isValid = false;

    m_hide_vimeo_logo_isSet = false;
    m_hide_vimeo_logo_isValid = false;

    m_layout_isSet = false;
    m_layout_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_modified_time_isSet = false;
    m_modified_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pictures_isSet = false;
    m_pictures_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_resource_key_isSet = false;
    m_resource_key_isValid = false;

    m_review_mode_isSet = false;
    m_review_mode_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_theme_isSet = false;
    m_theme_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_use_custom_domain_isSet = false;
    m_use_custom_domain_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_web_brand_color_isSet = false;
    m_web_brand_color_isValid = false;

    m_web_custom_logo_isSet = false;
    m_web_custom_logo_isValid = false;
}

void OAIAlbum::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlbum::fromJsonObject(QJsonObject json) {

    m_allow_continuous_play_isValid = ::OpenAPI::fromJsonValue(m_allow_continuous_play, json[QString("allow_continuous_play")]);
    m_allow_continuous_play_isSet = !json[QString("allow_continuous_play")].isNull() && m_allow_continuous_play_isValid;

    m_allow_downloads_isValid = ::OpenAPI::fromJsonValue(m_allow_downloads, json[QString("allow_downloads")]);
    m_allow_downloads_isSet = !json[QString("allow_downloads")].isNull() && m_allow_downloads_isValid;

    m_allow_share_isValid = ::OpenAPI::fromJsonValue(m_allow_share, json[QString("allow_share")]);
    m_allow_share_isSet = !json[QString("allow_share")].isNull() && m_allow_share_isValid;

    m_brand_color_isValid = ::OpenAPI::fromJsonValue(m_brand_color, json[QString("brand_color")]);
    m_brand_color_isSet = !json[QString("brand_color")].isNull() && m_brand_color_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_custom_logo_isValid = ::OpenAPI::fromJsonValue(m_custom_logo, json[QString("custom_logo")]);
    m_custom_logo_isSet = !json[QString("custom_logo")].isNull() && m_custom_logo_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_embed_isValid = ::OpenAPI::fromJsonValue(m_embed, json[QString("embed")]);
    m_embed_isSet = !json[QString("embed")].isNull() && m_embed_isValid;

    m_embed_brand_color_isValid = ::OpenAPI::fromJsonValue(m_embed_brand_color, json[QString("embed_brand_color")]);
    m_embed_brand_color_isSet = !json[QString("embed_brand_color")].isNull() && m_embed_brand_color_isValid;

    m_embed_custom_logo_isValid = ::OpenAPI::fromJsonValue(m_embed_custom_logo, json[QString("embed_custom_logo")]);
    m_embed_custom_logo_isSet = !json[QString("embed_custom_logo")].isNull() && m_embed_custom_logo_isValid;

    m_hide_nav_isValid = ::OpenAPI::fromJsonValue(m_hide_nav, json[QString("hide_nav")]);
    m_hide_nav_isSet = !json[QString("hide_nav")].isNull() && m_hide_nav_isValid;

    m_hide_vimeo_logo_isValid = ::OpenAPI::fromJsonValue(m_hide_vimeo_logo, json[QString("hide_vimeo_logo")]);
    m_hide_vimeo_logo_isSet = !json[QString("hide_vimeo_logo")].isNull() && m_hide_vimeo_logo_isValid;

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("layout")]);
    m_layout_isSet = !json[QString("layout")].isNull() && m_layout_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_modified_time_isValid = ::OpenAPI::fromJsonValue(m_modified_time, json[QString("modified_time")]);
    m_modified_time_isSet = !json[QString("modified_time")].isNull() && m_modified_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pictures_isValid = ::OpenAPI::fromJsonValue(m_pictures, json[QString("pictures")]);
    m_pictures_isSet = !json[QString("pictures")].isNull() && m_pictures_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;

    m_resource_key_isValid = ::OpenAPI::fromJsonValue(m_resource_key, json[QString("resource_key")]);
    m_resource_key_isSet = !json[QString("resource_key")].isNull() && m_resource_key_isValid;

    m_review_mode_isValid = ::OpenAPI::fromJsonValue(m_review_mode, json[QString("review_mode")]);
    m_review_mode_isSet = !json[QString("review_mode")].isNull() && m_review_mode_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_theme_isValid = ::OpenAPI::fromJsonValue(m_theme, json[QString("theme")]);
    m_theme_isSet = !json[QString("theme")].isNull() && m_theme_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_use_custom_domain_isValid = ::OpenAPI::fromJsonValue(m_use_custom_domain, json[QString("use_custom_domain")]);
    m_use_custom_domain_isSet = !json[QString("use_custom_domain")].isNull() && m_use_custom_domain_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_web_brand_color_isValid = ::OpenAPI::fromJsonValue(m_web_brand_color, json[QString("web_brand_color")]);
    m_web_brand_color_isSet = !json[QString("web_brand_color")].isNull() && m_web_brand_color_isValid;

    m_web_custom_logo_isValid = ::OpenAPI::fromJsonValue(m_web_custom_logo, json[QString("web_custom_logo")]);
    m_web_custom_logo_isSet = !json[QString("web_custom_logo")].isNull() && m_web_custom_logo_isValid;
}

QString OAIAlbum::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlbum::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_continuous_play_isSet) {
        obj.insert(QString("allow_continuous_play"), ::OpenAPI::toJsonValue(m_allow_continuous_play));
    }
    if (m_allow_downloads_isSet) {
        obj.insert(QString("allow_downloads"), ::OpenAPI::toJsonValue(m_allow_downloads));
    }
    if (m_allow_share_isSet) {
        obj.insert(QString("allow_share"), ::OpenAPI::toJsonValue(m_allow_share));
    }
    if (m_brand_color_isSet) {
        obj.insert(QString("brand_color"), ::OpenAPI::toJsonValue(m_brand_color));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_custom_logo.isSet()) {
        obj.insert(QString("custom_logo"), ::OpenAPI::toJsonValue(m_custom_logo));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_embed.isSet()) {
        obj.insert(QString("embed"), ::OpenAPI::toJsonValue(m_embed));
    }
    if (m_embed_brand_color_isSet) {
        obj.insert(QString("embed_brand_color"), ::OpenAPI::toJsonValue(m_embed_brand_color));
    }
    if (m_embed_custom_logo_isSet) {
        obj.insert(QString("embed_custom_logo"), ::OpenAPI::toJsonValue(m_embed_custom_logo));
    }
    if (m_hide_nav_isSet) {
        obj.insert(QString("hide_nav"), ::OpenAPI::toJsonValue(m_hide_nav));
    }
    if (m_hide_vimeo_logo_isSet) {
        obj.insert(QString("hide_vimeo_logo"), ::OpenAPI::toJsonValue(m_hide_vimeo_logo));
    }
    if (m_layout_isSet) {
        obj.insert(QString("layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_modified_time_isSet) {
        obj.insert(QString("modified_time"), ::OpenAPI::toJsonValue(m_modified_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pictures.isSet()) {
        obj.insert(QString("pictures"), ::OpenAPI::toJsonValue(m_pictures));
    }
    if (m_privacy.isSet()) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_resource_key_isSet) {
        obj.insert(QString("resource_key"), ::OpenAPI::toJsonValue(m_resource_key));
    }
    if (m_review_mode_isSet) {
        obj.insert(QString("review_mode"), ::OpenAPI::toJsonValue(m_review_mode));
    }
    if (m_sort_isSet) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_theme_isSet) {
        obj.insert(QString("theme"), ::OpenAPI::toJsonValue(m_theme));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_use_custom_domain_isSet) {
        obj.insert(QString("use_custom_domain"), ::OpenAPI::toJsonValue(m_use_custom_domain));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_web_brand_color_isSet) {
        obj.insert(QString("web_brand_color"), ::OpenAPI::toJsonValue(m_web_brand_color));
    }
    if (m_web_custom_logo_isSet) {
        obj.insert(QString("web_custom_logo"), ::OpenAPI::toJsonValue(m_web_custom_logo));
    }
    return obj;
}

bool OAIAlbum::isAllowContinuousPlay() const {
    return m_allow_continuous_play;
}
void OAIAlbum::setAllowContinuousPlay(const bool &allow_continuous_play) {
    m_allow_continuous_play = allow_continuous_play;
    m_allow_continuous_play_isSet = true;
}

bool OAIAlbum::is_allow_continuous_play_Set() const{
    return m_allow_continuous_play_isSet;
}

bool OAIAlbum::is_allow_continuous_play_Valid() const{
    return m_allow_continuous_play_isValid;
}

bool OAIAlbum::isAllowDownloads() const {
    return m_allow_downloads;
}
void OAIAlbum::setAllowDownloads(const bool &allow_downloads) {
    m_allow_downloads = allow_downloads;
    m_allow_downloads_isSet = true;
}

bool OAIAlbum::is_allow_downloads_Set() const{
    return m_allow_downloads_isSet;
}

bool OAIAlbum::is_allow_downloads_Valid() const{
    return m_allow_downloads_isValid;
}

bool OAIAlbum::isAllowShare() const {
    return m_allow_share;
}
void OAIAlbum::setAllowShare(const bool &allow_share) {
    m_allow_share = allow_share;
    m_allow_share_isSet = true;
}

bool OAIAlbum::is_allow_share_Set() const{
    return m_allow_share_isSet;
}

bool OAIAlbum::is_allow_share_Valid() const{
    return m_allow_share_isValid;
}

QString OAIAlbum::getBrandColor() const {
    return m_brand_color;
}
void OAIAlbum::setBrandColor(const QString &brand_color) {
    m_brand_color = brand_color;
    m_brand_color_isSet = true;
}

bool OAIAlbum::is_brand_color_Set() const{
    return m_brand_color_isSet;
}

bool OAIAlbum::is_brand_color_Valid() const{
    return m_brand_color_isValid;
}

QString OAIAlbum::getCreatedTime() const {
    return m_created_time;
}
void OAIAlbum::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIAlbum::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIAlbum::is_created_time_Valid() const{
    return m_created_time_isValid;
}

OAIPicture OAIAlbum::getCustomLogo() const {
    return m_custom_logo;
}
void OAIAlbum::setCustomLogo(const OAIPicture &custom_logo) {
    m_custom_logo = custom_logo;
    m_custom_logo_isSet = true;
}

bool OAIAlbum::is_custom_logo_Set() const{
    return m_custom_logo_isSet;
}

bool OAIAlbum::is_custom_logo_Valid() const{
    return m_custom_logo_isValid;
}

QString OAIAlbum::getDescription() const {
    return m_description;
}
void OAIAlbum::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAlbum::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAlbum::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAlbum::getDomain() const {
    return m_domain;
}
void OAIAlbum::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIAlbum::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIAlbum::is_domain_Valid() const{
    return m_domain_isValid;
}

double OAIAlbum::getDuration() const {
    return m_duration;
}
void OAIAlbum::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIAlbum::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIAlbum::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIAlbum_embed OAIAlbum::getEmbed() const {
    return m_embed;
}
void OAIAlbum::setEmbed(const OAIAlbum_embed &embed) {
    m_embed = embed;
    m_embed_isSet = true;
}

bool OAIAlbum::is_embed_Set() const{
    return m_embed_isSet;
}

bool OAIAlbum::is_embed_Valid() const{
    return m_embed_isValid;
}

bool OAIAlbum::isEmbedBrandColor() const {
    return m_embed_brand_color;
}
void OAIAlbum::setEmbedBrandColor(const bool &embed_brand_color) {
    m_embed_brand_color = embed_brand_color;
    m_embed_brand_color_isSet = true;
}

bool OAIAlbum::is_embed_brand_color_Set() const{
    return m_embed_brand_color_isSet;
}

bool OAIAlbum::is_embed_brand_color_Valid() const{
    return m_embed_brand_color_isValid;
}

bool OAIAlbum::isEmbedCustomLogo() const {
    return m_embed_custom_logo;
}
void OAIAlbum::setEmbedCustomLogo(const bool &embed_custom_logo) {
    m_embed_custom_logo = embed_custom_logo;
    m_embed_custom_logo_isSet = true;
}

bool OAIAlbum::is_embed_custom_logo_Set() const{
    return m_embed_custom_logo_isSet;
}

bool OAIAlbum::is_embed_custom_logo_Valid() const{
    return m_embed_custom_logo_isValid;
}

bool OAIAlbum::isHideNav() const {
    return m_hide_nav;
}
void OAIAlbum::setHideNav(const bool &hide_nav) {
    m_hide_nav = hide_nav;
    m_hide_nav_isSet = true;
}

bool OAIAlbum::is_hide_nav_Set() const{
    return m_hide_nav_isSet;
}

bool OAIAlbum::is_hide_nav_Valid() const{
    return m_hide_nav_isValid;
}

bool OAIAlbum::isHideVimeoLogo() const {
    return m_hide_vimeo_logo;
}
void OAIAlbum::setHideVimeoLogo(const bool &hide_vimeo_logo) {
    m_hide_vimeo_logo = hide_vimeo_logo;
    m_hide_vimeo_logo_isSet = true;
}

bool OAIAlbum::is_hide_vimeo_logo_Set() const{
    return m_hide_vimeo_logo_isSet;
}

bool OAIAlbum::is_hide_vimeo_logo_Valid() const{
    return m_hide_vimeo_logo_isValid;
}

QString OAIAlbum::getLayout() const {
    return m_layout;
}
void OAIAlbum::setLayout(const QString &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAIAlbum::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAIAlbum::is_layout_Valid() const{
    return m_layout_isValid;
}

QString OAIAlbum::getLink() const {
    return m_link;
}
void OAIAlbum::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIAlbum::is_link_Set() const{
    return m_link_isSet;
}

bool OAIAlbum::is_link_Valid() const{
    return m_link_isValid;
}

OAIAlbum_metadata OAIAlbum::getMetadata() const {
    return m_metadata;
}
void OAIAlbum::setMetadata(const OAIAlbum_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIAlbum::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIAlbum::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIAlbum::getModifiedTime() const {
    return m_modified_time;
}
void OAIAlbum::setModifiedTime(const QString &modified_time) {
    m_modified_time = modified_time;
    m_modified_time_isSet = true;
}

bool OAIAlbum::is_modified_time_Set() const{
    return m_modified_time_isSet;
}

bool OAIAlbum::is_modified_time_Valid() const{
    return m_modified_time_isValid;
}

QString OAIAlbum::getName() const {
    return m_name;
}
void OAIAlbum::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAlbum::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAlbum::is_name_Valid() const{
    return m_name_isValid;
}

OAIPicture OAIAlbum::getPictures() const {
    return m_pictures;
}
void OAIAlbum::setPictures(const OAIPicture &pictures) {
    m_pictures = pictures;
    m_pictures_isSet = true;
}

bool OAIAlbum::is_pictures_Set() const{
    return m_pictures_isSet;
}

bool OAIAlbum::is_pictures_Valid() const{
    return m_pictures_isValid;
}

OAIAlbum_privacy OAIAlbum::getPrivacy() const {
    return m_privacy;
}
void OAIAlbum::setPrivacy(const OAIAlbum_privacy &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAIAlbum::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAIAlbum::is_privacy_Valid() const{
    return m_privacy_isValid;
}

QString OAIAlbum::getResourceKey() const {
    return m_resource_key;
}
void OAIAlbum::setResourceKey(const QString &resource_key) {
    m_resource_key = resource_key;
    m_resource_key_isSet = true;
}

bool OAIAlbum::is_resource_key_Set() const{
    return m_resource_key_isSet;
}

bool OAIAlbum::is_resource_key_Valid() const{
    return m_resource_key_isValid;
}

bool OAIAlbum::isReviewMode() const {
    return m_review_mode;
}
void OAIAlbum::setReviewMode(const bool &review_mode) {
    m_review_mode = review_mode;
    m_review_mode_isSet = true;
}

bool OAIAlbum::is_review_mode_Set() const{
    return m_review_mode_isSet;
}

bool OAIAlbum::is_review_mode_Valid() const{
    return m_review_mode_isValid;
}

QString OAIAlbum::getSort() const {
    return m_sort;
}
void OAIAlbum::setSort(const QString &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIAlbum::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIAlbum::is_sort_Valid() const{
    return m_sort_isValid;
}

QString OAIAlbum::getTheme() const {
    return m_theme;
}
void OAIAlbum::setTheme(const QString &theme) {
    m_theme = theme;
    m_theme_isSet = true;
}

bool OAIAlbum::is_theme_Set() const{
    return m_theme_isSet;
}

bool OAIAlbum::is_theme_Valid() const{
    return m_theme_isValid;
}

QString OAIAlbum::getUri() const {
    return m_uri;
}
void OAIAlbum::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIAlbum::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIAlbum::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIAlbum::getUrl() const {
    return m_url;
}
void OAIAlbum::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAlbum::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAlbum::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAlbum::isUseCustomDomain() const {
    return m_use_custom_domain;
}
void OAIAlbum::setUseCustomDomain(const bool &use_custom_domain) {
    m_use_custom_domain = use_custom_domain;
    m_use_custom_domain_isSet = true;
}

bool OAIAlbum::is_use_custom_domain_Set() const{
    return m_use_custom_domain_isSet;
}

bool OAIAlbum::is_use_custom_domain_Valid() const{
    return m_use_custom_domain_isValid;
}

OAIUser OAIAlbum::getUser() const {
    return m_user;
}
void OAIAlbum::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAlbum::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAlbum::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAlbum::isWebBrandColor() const {
    return m_web_brand_color;
}
void OAIAlbum::setWebBrandColor(const bool &web_brand_color) {
    m_web_brand_color = web_brand_color;
    m_web_brand_color_isSet = true;
}

bool OAIAlbum::is_web_brand_color_Set() const{
    return m_web_brand_color_isSet;
}

bool OAIAlbum::is_web_brand_color_Valid() const{
    return m_web_brand_color_isValid;
}

bool OAIAlbum::isWebCustomLogo() const {
    return m_web_custom_logo;
}
void OAIAlbum::setWebCustomLogo(const bool &web_custom_logo) {
    m_web_custom_logo = web_custom_logo;
    m_web_custom_logo_isSet = true;
}

bool OAIAlbum::is_web_custom_logo_Set() const{
    return m_web_custom_logo_isSet;
}

bool OAIAlbum::is_web_custom_logo_Valid() const{
    return m_web_custom_logo_isValid;
}

bool OAIAlbum::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_continuous_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_downloads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_embed_brand_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embed_custom_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_nav_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_vimeo_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pictures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_custom_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_brand_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_custom_logo_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlbum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allow_continuous_play_isValid && m_allow_downloads_isValid && m_allow_share_isValid && m_brand_color_isValid && m_created_time_isValid && m_custom_logo_isValid && m_description_isValid && m_domain_isValid && m_duration_isValid && m_embed_isValid && m_embed_brand_color_isValid && m_embed_custom_logo_isValid && m_hide_nav_isValid && m_hide_vimeo_logo_isValid && m_layout_isValid && m_link_isValid && m_metadata_isValid && m_modified_time_isValid && m_name_isValid && m_pictures_isValid && m_privacy_isValid && m_resource_key_isValid && m_review_mode_isValid && m_sort_isValid && m_theme_isValid && m_uri_isValid && m_url_isValid && m_use_custom_domain_isValid && m_user_isValid && m_web_brand_color_isValid && m_web_custom_logo_isValid && true;
}

} // namespace OpenAPI
