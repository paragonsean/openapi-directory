/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategory::OAICategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategory::OAICategory() {
    this->initializeModel();
}

OAICategory::~OAICategory() {}

void OAICategory::initializeModel() {

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_last_video_featured_time_isSet = false;
    m_last_video_featured_time_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_pictures_isSet = false;
    m_pictures_isValid = false;

    m_resource_key_isSet = false;
    m_resource_key_isValid = false;

    m_subcategories_isSet = false;
    m_subcategories_isValid = false;

    m_top_level_isSet = false;
    m_top_level_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAICategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategory::fromJsonObject(QJsonObject json) {

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_last_video_featured_time_isValid = ::OpenAPI::fromJsonValue(m_last_video_featured_time, json[QString("last_video_featured_time")]);
    m_last_video_featured_time_isSet = !json[QString("last_video_featured_time")].isNull() && m_last_video_featured_time_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_pictures_isValid = ::OpenAPI::fromJsonValue(m_pictures, json[QString("pictures")]);
    m_pictures_isSet = !json[QString("pictures")].isNull() && m_pictures_isValid;

    m_resource_key_isValid = ::OpenAPI::fromJsonValue(m_resource_key, json[QString("resource_key")]);
    m_resource_key_isSet = !json[QString("resource_key")].isNull() && m_resource_key_isValid;

    m_subcategories_isValid = ::OpenAPI::fromJsonValue(m_subcategories, json[QString("subcategories")]);
    m_subcategories_isSet = !json[QString("subcategories")].isNull() && m_subcategories_isValid;

    m_top_level_isValid = ::OpenAPI::fromJsonValue(m_top_level, json[QString("top_level")]);
    m_top_level_isSet = !json[QString("top_level")].isNull() && m_top_level_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAICategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategory::asJsonObject() const {
    QJsonObject obj;
    if (m_icon.isSet()) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_last_video_featured_time_isSet) {
        obj.insert(QString("last_video_featured_time"), ::OpenAPI::toJsonValue(m_last_video_featured_time));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_pictures.isSet()) {
        obj.insert(QString("pictures"), ::OpenAPI::toJsonValue(m_pictures));
    }
    if (m_resource_key_isSet) {
        obj.insert(QString("resource_key"), ::OpenAPI::toJsonValue(m_resource_key));
    }
    if (m_subcategories.size() > 0) {
        obj.insert(QString("subcategories"), ::OpenAPI::toJsonValue(m_subcategories));
    }
    if (m_top_level_isSet) {
        obj.insert(QString("top_level"), ::OpenAPI::toJsonValue(m_top_level));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

OAIPicture OAICategory::getIcon() const {
    return m_icon;
}
void OAICategory::setIcon(const OAIPicture &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAICategory::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAICategory::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAICategory::getLastVideoFeaturedTime() const {
    return m_last_video_featured_time;
}
void OAICategory::setLastVideoFeaturedTime(const QString &last_video_featured_time) {
    m_last_video_featured_time = last_video_featured_time;
    m_last_video_featured_time_isSet = true;
}

bool OAICategory::is_last_video_featured_time_Set() const{
    return m_last_video_featured_time_isSet;
}

bool OAICategory::is_last_video_featured_time_Valid() const{
    return m_last_video_featured_time_isValid;
}

QString OAICategory::getLink() const {
    return m_link;
}
void OAICategory::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAICategory::is_link_Set() const{
    return m_link_isSet;
}

bool OAICategory::is_link_Valid() const{
    return m_link_isValid;
}

OAICategory_metadata OAICategory::getMetadata() const {
    return m_metadata;
}
void OAICategory::setMetadata(const OAICategory_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICategory::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICategory::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICategory::getName() const {
    return m_name;
}
void OAICategory::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICategory::is_name_Set() const{
    return m_name_isSet;
}

bool OAICategory::is_name_Valid() const{
    return m_name_isValid;
}

OAICategory_parent OAICategory::getParent() const {
    return m_parent;
}
void OAICategory::setParent(const OAICategory_parent &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAICategory::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAICategory::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIPicture OAICategory::getPictures() const {
    return m_pictures;
}
void OAICategory::setPictures(const OAIPicture &pictures) {
    m_pictures = pictures;
    m_pictures_isSet = true;
}

bool OAICategory::is_pictures_Set() const{
    return m_pictures_isSet;
}

bool OAICategory::is_pictures_Valid() const{
    return m_pictures_isValid;
}

QString OAICategory::getResourceKey() const {
    return m_resource_key;
}
void OAICategory::setResourceKey(const QString &resource_key) {
    m_resource_key = resource_key;
    m_resource_key_isSet = true;
}

bool OAICategory::is_resource_key_Set() const{
    return m_resource_key_isSet;
}

bool OAICategory::is_resource_key_Valid() const{
    return m_resource_key_isValid;
}

QList<OAICategory_subcategories_inner> OAICategory::getSubcategories() const {
    return m_subcategories;
}
void OAICategory::setSubcategories(const QList<OAICategory_subcategories_inner> &subcategories) {
    m_subcategories = subcategories;
    m_subcategories_isSet = true;
}

bool OAICategory::is_subcategories_Set() const{
    return m_subcategories_isSet;
}

bool OAICategory::is_subcategories_Valid() const{
    return m_subcategories_isValid;
}

bool OAICategory::isTopLevel() const {
    return m_top_level;
}
void OAICategory::setTopLevel(const bool &top_level) {
    m_top_level = top_level;
    m_top_level_isSet = true;
}

bool OAICategory::is_top_level_Set() const{
    return m_top_level_isSet;
}

bool OAICategory::is_top_level_Valid() const{
    return m_top_level_isValid;
}

QString OAICategory::getUri() const {
    return m_uri;
}
void OAICategory::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAICategory::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAICategory::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAICategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_icon.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_video_featured_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pictures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subcategories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_last_video_featured_time_isValid && m_link_isValid && m_metadata_isValid && m_name_isValid && m_parent_isValid && m_pictures_isValid && m_resource_key_isValid && m_top_level_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
