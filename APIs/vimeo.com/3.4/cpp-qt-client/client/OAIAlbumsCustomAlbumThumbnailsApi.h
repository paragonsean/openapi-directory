/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAlbumsCustomAlbumThumbnailsApi_H
#define OAI_OAIAlbumsCustomAlbumThumbnailsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILegacy_error.h"
#include "OAIPicture.h"
#include "OAIReplace_album_custom_thumb_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAlbumsCustomAlbumThumbnailsApi : public QObject {
    Q_OBJECT

public:
    OAIAlbumsCustomAlbumThumbnailsApi(const int timeOut = 0);
    ~OAIAlbumsCustomAlbumThumbnailsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void createAlbumCustomThumb(const double &album_id, const double &user_id);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  thumbnail_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void deleteAlbumCustomThumbnail(const double &album_id, const double &thumbnail_id, const double &user_id);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  thumbnail_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void getAlbumCustomThumbnail(const double &album_id, const double &thumbnail_id, const double &user_id);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getAlbumCustomThumbs(const double &album_id, const double &user_id, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  album_id double [required]
    * @param[in]  thumbnail_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  oai_replace_album_custom_thumb_request OAIReplace_album_custom_thumb_request [optional]
    */
    virtual void replaceAlbumCustomThumb(const double &album_id, const double &thumbnail_id, const double &user_id, const ::OpenAPI::OptionalParam<OAIReplace_album_custom_thumb_request> &oai_replace_album_custom_thumb_request = ::OpenAPI::OptionalParam<OAIReplace_album_custom_thumb_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAlbumCustomThumbCallback(OAIHttpRequestWorker *worker);
    void deleteAlbumCustomThumbnailCallback(OAIHttpRequestWorker *worker);
    void getAlbumCustomThumbnailCallback(OAIHttpRequestWorker *worker);
    void getAlbumCustomThumbsCallback(OAIHttpRequestWorker *worker);
    void replaceAlbumCustomThumbCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAlbumCustomThumbSignal(OAIPicture summary);
    void deleteAlbumCustomThumbnailSignal();
    void getAlbumCustomThumbnailSignal(OAIPicture summary);
    void getAlbumCustomThumbsSignal(QList<OAIPicture> summary);
    void replaceAlbumCustomThumbSignal(OAIPicture summary);


    void createAlbumCustomThumbSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void deleteAlbumCustomThumbnailSignalFull(OAIHttpRequestWorker *worker);
    void getAlbumCustomThumbnailSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void getAlbumCustomThumbsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPicture> summary);
    void replaceAlbumCustomThumbSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);

    Q_DECL_DEPRECATED_X("Use createAlbumCustomThumbSignalError() instead")
    void createAlbumCustomThumbSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAlbumCustomThumbSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAlbumCustomThumbnailSignalError() instead")
    void deleteAlbumCustomThumbnailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAlbumCustomThumbnailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumCustomThumbnailSignalError() instead")
    void getAlbumCustomThumbnailSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumCustomThumbnailSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumCustomThumbsSignalError() instead")
    void getAlbumCustomThumbsSignalE(QList<OAIPicture> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumCustomThumbsSignalError(QList<OAIPicture> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceAlbumCustomThumbSignalError() instead")
    void replaceAlbumCustomThumbSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceAlbumCustomThumbSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAlbumCustomThumbSignalErrorFull() instead")
    void createAlbumCustomThumbSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAlbumCustomThumbSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAlbumCustomThumbnailSignalErrorFull() instead")
    void deleteAlbumCustomThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAlbumCustomThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumCustomThumbnailSignalErrorFull() instead")
    void getAlbumCustomThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumCustomThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumCustomThumbsSignalErrorFull() instead")
    void getAlbumCustomThumbsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumCustomThumbsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceAlbumCustomThumbSignalErrorFull() instead")
    void replaceAlbumCustomThumbSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceAlbumCustomThumbSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
