/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOn_demand_video.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOn_demand_video::OAIOn_demand_video(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOn_demand_video::OAIOn_demand_video() {
    this->initializeModel();
}

OAIOn_demand_video::~OAIOn_demand_video() {}

void OAIOn_demand_video::initializeModel() {

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_episode_isSet = false;
    m_episode_isValid = false;

    m_interactions_isSet = false;
    m_interactions_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_pictures_isSet = false;
    m_pictures_isValid = false;

    m_play_progress_isSet = false;
    m_play_progress_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_release_year_isSet = false;
    m_release_year_isValid = false;

    m_rent_isSet = false;
    m_rent_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIOn_demand_video::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOn_demand_video::fromJsonObject(QJsonObject json) {

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_episode_isValid = ::OpenAPI::fromJsonValue(m_episode, json[QString("episode")]);
    m_episode_isSet = !json[QString("episode")].isNull() && m_episode_isValid;

    m_interactions_isValid = ::OpenAPI::fromJsonValue(m_interactions, json[QString("interactions")]);
    m_interactions_isSet = !json[QString("interactions")].isNull() && m_interactions_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_pictures_isValid = ::OpenAPI::fromJsonValue(m_pictures, json[QString("pictures")]);
    m_pictures_isSet = !json[QString("pictures")].isNull() && m_pictures_isValid;

    m_play_progress_isValid = ::OpenAPI::fromJsonValue(m_play_progress, json[QString("play_progress")]);
    m_play_progress_isSet = !json[QString("play_progress")].isNull() && m_play_progress_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("release_date")]);
    m_release_date_isSet = !json[QString("release_date")].isNull() && m_release_date_isValid;

    m_release_year_isValid = ::OpenAPI::fromJsonValue(m_release_year, json[QString("release_year")]);
    m_release_year_isSet = !json[QString("release_year")].isNull() && m_release_year_isValid;

    m_rent_isValid = ::OpenAPI::fromJsonValue(m_rent, json[QString("rent")]);
    m_rent_isSet = !json[QString("rent")].isNull() && m_rent_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIOn_demand_video::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOn_demand_video::asJsonObject() const {
    QJsonObject obj;
    if (m_buy.isSet()) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_episode_isSet) {
        obj.insert(QString("episode"), ::OpenAPI::toJsonValue(m_episode));
    }
    if (m_interactions.isSet()) {
        obj.insert(QString("interactions"), ::OpenAPI::toJsonValue(m_interactions));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_pictures.isSet()) {
        obj.insert(QString("pictures"), ::OpenAPI::toJsonValue(m_pictures));
    }
    if (m_play_progress_isSet) {
        obj.insert(QString("play_progress"), ::OpenAPI::toJsonValue(m_play_progress));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_release_date_isSet) {
        obj.insert(QString("release_date"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_release_year_isSet) {
        obj.insert(QString("release_year"), ::OpenAPI::toJsonValue(m_release_year));
    }
    if (m_rent.isSet()) {
        obj.insert(QString("rent"), ::OpenAPI::toJsonValue(m_rent));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIOn_demand_video_buy OAIOn_demand_video::getBuy() const {
    return m_buy;
}
void OAIOn_demand_video::setBuy(const OAIOn_demand_video_buy &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAIOn_demand_video::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAIOn_demand_video::is_buy_Valid() const{
    return m_buy_isValid;
}

QString OAIOn_demand_video::getDescription() const {
    return m_description;
}
void OAIOn_demand_video::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOn_demand_video::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOn_demand_video::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOn_demand_video::getDuration() const {
    return m_duration;
}
void OAIOn_demand_video::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIOn_demand_video::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIOn_demand_video::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAIOn_demand_video::getEpisode() const {
    return m_episode;
}
void OAIOn_demand_video::setEpisode(const double &episode) {
    m_episode = episode;
    m_episode_isSet = true;
}

bool OAIOn_demand_video::is_episode_Set() const{
    return m_episode_isSet;
}

bool OAIOn_demand_video::is_episode_Valid() const{
    return m_episode_isValid;
}

OAIOn_demand_video_interactions OAIOn_demand_video::getInteractions() const {
    return m_interactions;
}
void OAIOn_demand_video::setInteractions(const OAIOn_demand_video_interactions &interactions) {
    m_interactions = interactions;
    m_interactions_isSet = true;
}

bool OAIOn_demand_video::is_interactions_Set() const{
    return m_interactions_isSet;
}

bool OAIOn_demand_video::is_interactions_Valid() const{
    return m_interactions_isValid;
}

QString OAIOn_demand_video::getLink() const {
    return m_link;
}
void OAIOn_demand_video::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIOn_demand_video::is_link_Set() const{
    return m_link_isSet;
}

bool OAIOn_demand_video::is_link_Valid() const{
    return m_link_isValid;
}

OAIOn_demand_video_metadata OAIOn_demand_video::getMetadata() const {
    return m_metadata;
}
void OAIOn_demand_video::setMetadata(const OAIOn_demand_video_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIOn_demand_video::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIOn_demand_video::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIOn_demand_video::getName() const {
    return m_name;
}
void OAIOn_demand_video::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOn_demand_video::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOn_demand_video::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIOn_demand_video::getOptions() const {
    return m_options;
}
void OAIOn_demand_video::setOptions(const QList<QString> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIOn_demand_video::is_options_Set() const{
    return m_options_isSet;
}

bool OAIOn_demand_video::is_options_Valid() const{
    return m_options_isValid;
}

OAIPicture OAIOn_demand_video::getPictures() const {
    return m_pictures;
}
void OAIOn_demand_video::setPictures(const OAIPicture &pictures) {
    m_pictures = pictures;
    m_pictures_isSet = true;
}

bool OAIOn_demand_video::is_pictures_Set() const{
    return m_pictures_isSet;
}

bool OAIOn_demand_video::is_pictures_Valid() const{
    return m_pictures_isValid;
}

double OAIOn_demand_video::getPlayProgress() const {
    return m_play_progress;
}
void OAIOn_demand_video::setPlayProgress(const double &play_progress) {
    m_play_progress = play_progress;
    m_play_progress_isSet = true;
}

bool OAIOn_demand_video::is_play_progress_Set() const{
    return m_play_progress_isSet;
}

bool OAIOn_demand_video::is_play_progress_Valid() const{
    return m_play_progress_isValid;
}

double OAIOn_demand_video::getPosition() const {
    return m_position;
}
void OAIOn_demand_video::setPosition(const double &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIOn_demand_video::is_position_Set() const{
    return m_position_isSet;
}

bool OAIOn_demand_video::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIOn_demand_video::getReleaseDate() const {
    return m_release_date;
}
void OAIOn_demand_video::setReleaseDate(const QString &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIOn_demand_video::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIOn_demand_video::is_release_date_Valid() const{
    return m_release_date_isValid;
}

double OAIOn_demand_video::getReleaseYear() const {
    return m_release_year;
}
void OAIOn_demand_video::setReleaseYear(const double &release_year) {
    m_release_year = release_year;
    m_release_year_isSet = true;
}

bool OAIOn_demand_video::is_release_year_Set() const{
    return m_release_year_isSet;
}

bool OAIOn_demand_video::is_release_year_Valid() const{
    return m_release_year_isValid;
}

OAIOn_demand_video_rent OAIOn_demand_video::getRent() const {
    return m_rent;
}
void OAIOn_demand_video::setRent(const OAIOn_demand_video_rent &rent) {
    m_rent = rent;
    m_rent_isSet = true;
}

bool OAIOn_demand_video::is_rent_Set() const{
    return m_rent_isSet;
}

bool OAIOn_demand_video::is_rent_Valid() const{
    return m_rent_isValid;
}

QString OAIOn_demand_video::getType() const {
    return m_type;
}
void OAIOn_demand_video::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOn_demand_video::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOn_demand_video::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOn_demand_video::getUri() const {
    return m_uri;
}
void OAIOn_demand_video::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIOn_demand_video::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIOn_demand_video::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIUser OAIOn_demand_video::getUser() const {
    return m_user;
}
void OAIOn_demand_video::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIOn_demand_video::is_user_Set() const{
    return m_user_isSet;
}

bool OAIOn_demand_video::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIOn_demand_video::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pictures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOn_demand_video::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_buy_isValid && m_interactions_isValid && m_link_isValid && m_metadata_isValid && m_play_progress_isValid && m_release_year_isValid && m_rent_isValid && m_type_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
