/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdit_user_alt1_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdit_user_alt1_request::OAIEdit_user_alt1_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdit_user_alt1_request::OAIEdit_user_alt1_request() {
    this->initializeModel();
}

OAIEdit_user_alt1_request::~OAIEdit_user_alt1_request() {}

void OAIEdit_user_alt1_request::initializeModel() {

    m_bio_isSet = false;
    m_bio_isValid = false;

    m_content_filter_isSet = false;
    m_content_filter_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;
}

void OAIEdit_user_alt1_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdit_user_alt1_request::fromJsonObject(QJsonObject json) {

    m_bio_isValid = ::OpenAPI::fromJsonValue(m_bio, json[QString("bio")]);
    m_bio_isSet = !json[QString("bio")].isNull() && m_bio_isValid;

    m_content_filter_isValid = ::OpenAPI::fromJsonValue(m_content_filter, json[QString("content_filter")]);
    m_content_filter_isSet = !json[QString("content_filter")].isNull() && m_content_filter_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;
}

QString OAIEdit_user_alt1_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdit_user_alt1_request::asJsonObject() const {
    QJsonObject obj;
    if (m_bio_isSet) {
        obj.insert(QString("bio"), ::OpenAPI::toJsonValue(m_bio));
    }
    if (m_content_filter.size() > 0) {
        obj.insert(QString("content_filter"), ::OpenAPI::toJsonValue(m_content_filter));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_videos.isSet()) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    return obj;
}

QString OAIEdit_user_alt1_request::getBio() const {
    return m_bio;
}
void OAIEdit_user_alt1_request::setBio(const QString &bio) {
    m_bio = bio;
    m_bio_isSet = true;
}

bool OAIEdit_user_alt1_request::is_bio_Set() const{
    return m_bio_isSet;
}

bool OAIEdit_user_alt1_request::is_bio_Valid() const{
    return m_bio_isValid;
}

QList<QString> OAIEdit_user_alt1_request::getContentFilter() const {
    return m_content_filter;
}
void OAIEdit_user_alt1_request::setContentFilter(const QList<QString> &content_filter) {
    m_content_filter = content_filter;
    m_content_filter_isSet = true;
}

bool OAIEdit_user_alt1_request::is_content_filter_Set() const{
    return m_content_filter_isSet;
}

bool OAIEdit_user_alt1_request::is_content_filter_Valid() const{
    return m_content_filter_isValid;
}

QString OAIEdit_user_alt1_request::getLink() const {
    return m_link;
}
void OAIEdit_user_alt1_request::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIEdit_user_alt1_request::is_link_Set() const{
    return m_link_isSet;
}

bool OAIEdit_user_alt1_request::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIEdit_user_alt1_request::getLocation() const {
    return m_location;
}
void OAIEdit_user_alt1_request::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIEdit_user_alt1_request::is_location_Set() const{
    return m_location_isSet;
}

bool OAIEdit_user_alt1_request::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIEdit_user_alt1_request::getName() const {
    return m_name;
}
void OAIEdit_user_alt1_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEdit_user_alt1_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEdit_user_alt1_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEdit_user_alt1_request::getPassword() const {
    return m_password;
}
void OAIEdit_user_alt1_request::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIEdit_user_alt1_request::is_password_Set() const{
    return m_password_isSet;
}

bool OAIEdit_user_alt1_request::is_password_Valid() const{
    return m_password_isValid;
}

OAIEdit_user_alt1_request_videos OAIEdit_user_alt1_request::getVideos() const {
    return m_videos;
}
void OAIEdit_user_alt1_request::setVideos(const OAIEdit_user_alt1_request_videos &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAIEdit_user_alt1_request::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAIEdit_user_alt1_request::is_videos_Valid() const{
    return m_videos_isValid;
}

bool OAIEdit_user_alt1_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdit_user_alt1_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
