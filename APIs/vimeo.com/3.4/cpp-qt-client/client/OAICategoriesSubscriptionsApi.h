/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICategoriesSubscriptionsApi_H
#define OAI_OAICategoriesSubscriptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICategory.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICategoriesSubscriptionsApi : public QObject {
    Q_OBJECT

public:
    OAICategoriesSubscriptionsApi(const int timeOut = 0);
    ~OAICategoriesSubscriptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  category QString [required]
    * @param[in]  user_id double [required]
    */
    virtual void checkIfUserSubscribedToCategory(const QString &category, const double &user_id);

    /**
    * @param[in]  category QString [required]
    */
    virtual void checkIfUserSubscribedToCategoryAlt1(const QString &category);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getCategorySubscriptions(const double &user_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getCategorySubscriptionsAlt1(const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category double [required]
    * @param[in]  user_id double [required]
    */
    virtual void subscribeToCategory(const double &category, const double &user_id);

    /**
    * @param[in]  category double [required]
    */
    virtual void subscribeToCategoryAlt1(const double &category);

    /**
    * @param[in]  category QString [required]
    * @param[in]  user_id double [required]
    */
    virtual void unsubscribeFromCategory(const QString &category, const double &user_id);

    /**
    * @param[in]  category QString [required]
    */
    virtual void unsubscribeFromCategoryAlt1(const QString &category);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkIfUserSubscribedToCategoryCallback(OAIHttpRequestWorker *worker);
    void checkIfUserSubscribedToCategoryAlt1Callback(OAIHttpRequestWorker *worker);
    void getCategorySubscriptionsCallback(OAIHttpRequestWorker *worker);
    void getCategorySubscriptionsAlt1Callback(OAIHttpRequestWorker *worker);
    void subscribeToCategoryCallback(OAIHttpRequestWorker *worker);
    void subscribeToCategoryAlt1Callback(OAIHttpRequestWorker *worker);
    void unsubscribeFromCategoryCallback(OAIHttpRequestWorker *worker);
    void unsubscribeFromCategoryAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkIfUserSubscribedToCategorySignal();
    void checkIfUserSubscribedToCategoryAlt1Signal();
    void getCategorySubscriptionsSignal(QList<OAICategory> summary);
    void getCategorySubscriptionsAlt1Signal(QList<OAICategory> summary);
    void subscribeToCategorySignal();
    void subscribeToCategoryAlt1Signal();
    void unsubscribeFromCategorySignal();
    void unsubscribeFromCategoryAlt1Signal();


    void checkIfUserSubscribedToCategorySignalFull(OAIHttpRequestWorker *worker);
    void checkIfUserSubscribedToCategoryAlt1SignalFull(OAIHttpRequestWorker *worker);
    void getCategorySubscriptionsSignalFull(OAIHttpRequestWorker *worker, QList<OAICategory> summary);
    void getCategorySubscriptionsAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAICategory> summary);
    void subscribeToCategorySignalFull(OAIHttpRequestWorker *worker);
    void subscribeToCategoryAlt1SignalFull(OAIHttpRequestWorker *worker);
    void unsubscribeFromCategorySignalFull(OAIHttpRequestWorker *worker);
    void unsubscribeFromCategoryAlt1SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use checkIfUserSubscribedToCategorySignalError() instead")
    void checkIfUserSubscribedToCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserSubscribedToCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkIfUserSubscribedToCategoryAlt1SignalError() instead")
    void checkIfUserSubscribedToCategoryAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserSubscribedToCategoryAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategorySubscriptionsSignalError() instead")
    void getCategorySubscriptionsSignalE(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategorySubscriptionsSignalError(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategorySubscriptionsAlt1SignalError() instead")
    void getCategorySubscriptionsAlt1SignalE(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategorySubscriptionsAlt1SignalError(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeToCategorySignalError() instead")
    void subscribeToCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeToCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeToCategoryAlt1SignalError() instead")
    void subscribeToCategoryAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeToCategoryAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeFromCategorySignalError() instead")
    void unsubscribeFromCategorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeFromCategorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeFromCategoryAlt1SignalError() instead")
    void unsubscribeFromCategoryAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeFromCategoryAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkIfUserSubscribedToCategorySignalErrorFull() instead")
    void checkIfUserSubscribedToCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserSubscribedToCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkIfUserSubscribedToCategoryAlt1SignalErrorFull() instead")
    void checkIfUserSubscribedToCategoryAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserSubscribedToCategoryAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategorySubscriptionsSignalErrorFull() instead")
    void getCategorySubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategorySubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategorySubscriptionsAlt1SignalErrorFull() instead")
    void getCategorySubscriptionsAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategorySubscriptionsAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeToCategorySignalErrorFull() instead")
    void subscribeToCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeToCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeToCategoryAlt1SignalErrorFull() instead")
    void subscribeToCategoryAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeToCategoryAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeFromCategorySignalErrorFull() instead")
    void unsubscribeFromCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeFromCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeFromCategoryAlt1SignalErrorFull() instead")
    void unsubscribeFromCategoryAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeFromCategoryAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
