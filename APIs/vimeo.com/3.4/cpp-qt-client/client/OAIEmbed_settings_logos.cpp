/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbed_settings_logos.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbed_settings_logos::OAIEmbed_settings_logos(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbed_settings_logos::OAIEmbed_settings_logos() {
    this->initializeModel();
}

OAIEmbed_settings_logos::~OAIEmbed_settings_logos() {}

void OAIEmbed_settings_logos::initializeModel() {

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_vimeo_isSet = false;
    m_vimeo_isValid = false;
}

void OAIEmbed_settings_logos::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbed_settings_logos::fromJsonObject(QJsonObject json) {

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_vimeo_isValid = ::OpenAPI::fromJsonValue(m_vimeo, json[QString("vimeo")]);
    m_vimeo_isSet = !json[QString("vimeo")].isNull() && m_vimeo_isValid;
}

QString OAIEmbed_settings_logos::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbed_settings_logos::asJsonObject() const {
    QJsonObject obj;
    if (m_custom.isSet()) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_vimeo_isSet) {
        obj.insert(QString("vimeo"), ::OpenAPI::toJsonValue(m_vimeo));
    }
    return obj;
}

OAIEmbed_settings_logos_custom OAIEmbed_settings_logos::getCustom() const {
    return m_custom;
}
void OAIEmbed_settings_logos::setCustom(const OAIEmbed_settings_logos_custom &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIEmbed_settings_logos::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIEmbed_settings_logos::is_custom_Valid() const{
    return m_custom_isValid;
}

bool OAIEmbed_settings_logos::isVimeo() const {
    return m_vimeo;
}
void OAIEmbed_settings_logos::setVimeo(const bool &vimeo) {
    m_vimeo = vimeo;
    m_vimeo_isSet = true;
}

bool OAIEmbed_settings_logos::is_vimeo_Set() const{
    return m_vimeo_isSet;
}

bool OAIEmbed_settings_logos::is_vimeo_Valid() const{
    return m_vimeo_isValid;
}

bool OAIEmbed_settings_logos::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vimeo_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbed_settings_logos::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_custom_isValid && m_vimeo_isValid && true;
}

} // namespace OpenAPI
