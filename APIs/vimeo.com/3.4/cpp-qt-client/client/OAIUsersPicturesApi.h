/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersPicturesApi_H
#define OAI_OAIUsersPicturesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEdit_picture_alt1_request.h"
#include "OAIPicture.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersPicturesApi : public QObject {
    Q_OBJECT

public:
    OAIUsersPicturesApi(const int timeOut = 0);
    ~OAIUsersPicturesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id double [required]
    */
    virtual void createPicture(const double &user_id);


    virtual void createPictureAlt1();

    /**
    * @param[in]  portraitset_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void deletePicture(const double &portraitset_id, const double &user_id);

    /**
    * @param[in]  portraitset_id double [required]
    */
    virtual void deletePictureAlt1(const double &portraitset_id);

    /**
    * @param[in]  portraitset_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  oai_edit_picture_alt1_request OAIEdit_picture_alt1_request [optional]
    */
    virtual void editPicture(const double &portraitset_id, const double &user_id, const ::OpenAPI::OptionalParam<OAIEdit_picture_alt1_request> &oai_edit_picture_alt1_request = ::OpenAPI::OptionalParam<OAIEdit_picture_alt1_request>());

    /**
    * @param[in]  portraitset_id double [required]
    * @param[in]  oai_edit_picture_alt1_request OAIEdit_picture_alt1_request [optional]
    */
    virtual void editPictureAlt1(const double &portraitset_id, const ::OpenAPI::OptionalParam<OAIEdit_picture_alt1_request> &oai_edit_picture_alt1_request = ::OpenAPI::OptionalParam<OAIEdit_picture_alt1_request>());

    /**
    * @param[in]  portraitset_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void getPicture(const double &portraitset_id, const double &user_id);

    /**
    * @param[in]  portraitset_id double [required]
    */
    virtual void getPictureAlt1(const double &portraitset_id);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getPictures(const double &user_id, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getPicturesAlt1(const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createPictureCallback(OAIHttpRequestWorker *worker);
    void createPictureAlt1Callback(OAIHttpRequestWorker *worker);
    void deletePictureCallback(OAIHttpRequestWorker *worker);
    void deletePictureAlt1Callback(OAIHttpRequestWorker *worker);
    void editPictureCallback(OAIHttpRequestWorker *worker);
    void editPictureAlt1Callback(OAIHttpRequestWorker *worker);
    void getPictureCallback(OAIHttpRequestWorker *worker);
    void getPictureAlt1Callback(OAIHttpRequestWorker *worker);
    void getPicturesCallback(OAIHttpRequestWorker *worker);
    void getPicturesAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createPictureSignal(OAIPicture summary);
    void createPictureAlt1Signal(OAIPicture summary);
    void deletePictureSignal();
    void deletePictureAlt1Signal();
    void editPictureSignal(OAIPicture summary);
    void editPictureAlt1Signal(OAIPicture summary);
    void getPictureSignal(OAIPicture summary);
    void getPictureAlt1Signal(OAIPicture summary);
    void getPicturesSignal(QList<OAIPicture> summary);
    void getPicturesAlt1Signal(QList<OAIPicture> summary);


    void createPictureSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void createPictureAlt1SignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void deletePictureSignalFull(OAIHttpRequestWorker *worker);
    void deletePictureAlt1SignalFull(OAIHttpRequestWorker *worker);
    void editPictureSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void editPictureAlt1SignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void getPictureSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void getPictureAlt1SignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void getPicturesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPicture> summary);
    void getPicturesAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIPicture> summary);

    Q_DECL_DEPRECATED_X("Use createPictureSignalError() instead")
    void createPictureSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPictureSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPictureAlt1SignalError() instead")
    void createPictureAlt1SignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPictureAlt1SignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePictureSignalError() instead")
    void deletePictureSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePictureSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePictureAlt1SignalError() instead")
    void deletePictureAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePictureAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editPictureSignalError() instead")
    void editPictureSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editPictureSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editPictureAlt1SignalError() instead")
    void editPictureAlt1SignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editPictureAlt1SignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPictureSignalError() instead")
    void getPictureSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPictureSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPictureAlt1SignalError() instead")
    void getPictureAlt1SignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPictureAlt1SignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPicturesSignalError() instead")
    void getPicturesSignalE(QList<OAIPicture> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPicturesSignalError(QList<OAIPicture> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPicturesAlt1SignalError() instead")
    void getPicturesAlt1SignalE(QList<OAIPicture> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPicturesAlt1SignalError(QList<OAIPicture> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createPictureSignalErrorFull() instead")
    void createPictureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPictureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPictureAlt1SignalErrorFull() instead")
    void createPictureAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPictureAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePictureSignalErrorFull() instead")
    void deletePictureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePictureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePictureAlt1SignalErrorFull() instead")
    void deletePictureAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePictureAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editPictureSignalErrorFull() instead")
    void editPictureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editPictureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editPictureAlt1SignalErrorFull() instead")
    void editPictureAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editPictureAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPictureSignalErrorFull() instead")
    void getPictureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPictureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPictureAlt1SignalErrorFull() instead")
    void getPictureAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPictureAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPicturesSignalErrorFull() instead")
    void getPicturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPicturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPicturesAlt1SignalErrorFull() instead")
    void getPicturesAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPicturesAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
