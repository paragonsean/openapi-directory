/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsEssentialsApi_H
#define OAI_OAIProjectsEssentialsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_project_alt1_request.h"
#include "OAIError.h"
#include "OAIProject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsEssentialsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsEssentialsApi(const int timeOut = 0);
    ~OAIProjectsEssentialsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  oai_create_project_alt1_request OAICreate_project_alt1_request [required]
    */
    virtual void createProject(const double &user_id, const OAICreate_project_alt1_request &oai_create_project_alt1_request);

    /**
    * @param[in]  oai_create_project_alt1_request OAICreate_project_alt1_request [required]
    */
    virtual void createProjectAlt1(const OAICreate_project_alt1_request &oai_create_project_alt1_request);

    /**
    * @param[in]  project_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  should_delete_clips bool [optional]
    */
    virtual void deleteProject(const double &project_id, const double &user_id, const ::OpenAPI::OptionalParam<bool> &should_delete_clips = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project_id double [required]
    * @param[in]  should_delete_clips bool [optional]
    */
    virtual void deleteProjectAlt1(const double &project_id, const ::OpenAPI::OptionalParam<bool> &should_delete_clips = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  oai_create_project_alt1_request OAICreate_project_alt1_request [required]
    */
    virtual void editProject(const double &project_id, const double &user_id, const OAICreate_project_alt1_request &oai_create_project_alt1_request);

    /**
    * @param[in]  project_id double [required]
    * @param[in]  oai_create_project_alt1_request OAICreate_project_alt1_request [required]
    */
    virtual void editProjectAlt1(const double &project_id, const OAICreate_project_alt1_request &oai_create_project_alt1_request);

    /**
    * @param[in]  project_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void getProject(const double &project_id, const double &user_id);

    /**
    * @param[in]  project_id double [required]
    */
    virtual void getProjectAlt1(const double &project_id);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getProjects(const double &user_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getProjectsAlt1(const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createProjectCallback(OAIHttpRequestWorker *worker);
    void createProjectAlt1Callback(OAIHttpRequestWorker *worker);
    void deleteProjectCallback(OAIHttpRequestWorker *worker);
    void deleteProjectAlt1Callback(OAIHttpRequestWorker *worker);
    void editProjectCallback(OAIHttpRequestWorker *worker);
    void editProjectAlt1Callback(OAIHttpRequestWorker *worker);
    void getProjectCallback(OAIHttpRequestWorker *worker);
    void getProjectAlt1Callback(OAIHttpRequestWorker *worker);
    void getProjectsCallback(OAIHttpRequestWorker *worker);
    void getProjectsAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createProjectSignal(OAIProject summary);
    void createProjectAlt1Signal(OAIProject summary);
    void deleteProjectSignal();
    void deleteProjectAlt1Signal();
    void editProjectSignal(OAIProject summary);
    void editProjectAlt1Signal(OAIProject summary);
    void getProjectSignal(OAIProject summary);
    void getProjectAlt1Signal(OAIProject summary);
    void getProjectsSignal(QList<OAIProject> summary);
    void getProjectsAlt1Signal(QList<OAIProject> summary);


    void createProjectSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void createProjectAlt1SignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void deleteProjectSignalFull(OAIHttpRequestWorker *worker);
    void deleteProjectAlt1SignalFull(OAIHttpRequestWorker *worker);
    void editProjectSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void editProjectAlt1SignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void getProjectSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void getProjectAlt1SignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void getProjectsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject> summary);
    void getProjectsAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIProject> summary);

    Q_DECL_DEPRECATED_X("Use createProjectSignalError() instead")
    void createProjectSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectAlt1SignalError() instead")
    void createProjectAlt1SignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectAlt1SignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalError() instead")
    void deleteProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectAlt1SignalError() instead")
    void deleteProjectAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editProjectSignalError() instead")
    void editProjectSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editProjectSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editProjectAlt1SignalError() instead")
    void editProjectAlt1SignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editProjectAlt1SignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSignalError() instead")
    void getProjectSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectAlt1SignalError() instead")
    void getProjectAlt1SignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectAlt1SignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsSignalError() instead")
    void getProjectsSignalE(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsSignalError(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsAlt1SignalError() instead")
    void getProjectsAlt1SignalE(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsAlt1SignalError(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createProjectSignalErrorFull() instead")
    void createProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProjectAlt1SignalErrorFull() instead")
    void createProjectAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProjectAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalErrorFull() instead")
    void deleteProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectAlt1SignalErrorFull() instead")
    void deleteProjectAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editProjectSignalErrorFull() instead")
    void editProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editProjectAlt1SignalErrorFull() instead")
    void editProjectAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editProjectAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSignalErrorFull() instead")
    void getProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectAlt1SignalErrorFull() instead")
    void getProjectAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsSignalErrorFull() instead")
    void getProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsAlt1SignalErrorFull() instead")
    void getProjectsAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
