/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPresets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPresets::OAIPresets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPresets::OAIPresets() {
    this->initializeModel();
}

OAIPresets::~OAIPresets() {}

void OAIPresets::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIPresets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPresets::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIPresets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPresets::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIPresets_metadata OAIPresets::getMetadata() const {
    return m_metadata;
}
void OAIPresets::setMetadata(const OAIPresets_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPresets::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPresets::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIPresets::getName() const {
    return m_name;
}
void OAIPresets::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPresets::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPresets::is_name_Valid() const{
    return m_name_isValid;
}

OAIPresets_settings OAIPresets::getSettings() const {
    return m_settings;
}
void OAIPresets::setSettings(const OAIPresets_settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIPresets::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIPresets::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIPresets::getUri() const {
    return m_uri;
}
void OAIPresets::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPresets::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPresets::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIUser OAIPresets::getUser() const {
    return m_user;
}
void OAIPresets::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIPresets::is_user_Set() const{
    return m_user_isSet;
}

bool OAIPresets::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIPresets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPresets::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metadata_isValid && m_name_isValid && m_settings_isValid && m_uri_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
