/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbed_settings_buttons.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbed_settings_buttons::OAIEmbed_settings_buttons(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbed_settings_buttons::OAIEmbed_settings_buttons() {
    this->initializeModel();
}

OAIEmbed_settings_buttons::~OAIEmbed_settings_buttons() {}

void OAIEmbed_settings_buttons::initializeModel() {

    m_embed_isSet = false;
    m_embed_isValid = false;

    m_fullscreen_isSet = false;
    m_fullscreen_isValid = false;

    m_hd_isSet = false;
    m_hd_isValid = false;

    m_like_isSet = false;
    m_like_isValid = false;

    m_scaling_isSet = false;
    m_scaling_isValid = false;

    m_share_isSet = false;
    m_share_isValid = false;

    m_watchlater_isSet = false;
    m_watchlater_isValid = false;
}

void OAIEmbed_settings_buttons::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbed_settings_buttons::fromJsonObject(QJsonObject json) {

    m_embed_isValid = ::OpenAPI::fromJsonValue(m_embed, json[QString("embed")]);
    m_embed_isSet = !json[QString("embed")].isNull() && m_embed_isValid;

    m_fullscreen_isValid = ::OpenAPI::fromJsonValue(m_fullscreen, json[QString("fullscreen")]);
    m_fullscreen_isSet = !json[QString("fullscreen")].isNull() && m_fullscreen_isValid;

    m_hd_isValid = ::OpenAPI::fromJsonValue(m_hd, json[QString("hd")]);
    m_hd_isSet = !json[QString("hd")].isNull() && m_hd_isValid;

    m_like_isValid = ::OpenAPI::fromJsonValue(m_like, json[QString("like")]);
    m_like_isSet = !json[QString("like")].isNull() && m_like_isValid;

    m_scaling_isValid = ::OpenAPI::fromJsonValue(m_scaling, json[QString("scaling")]);
    m_scaling_isSet = !json[QString("scaling")].isNull() && m_scaling_isValid;

    m_share_isValid = ::OpenAPI::fromJsonValue(m_share, json[QString("share")]);
    m_share_isSet = !json[QString("share")].isNull() && m_share_isValid;

    m_watchlater_isValid = ::OpenAPI::fromJsonValue(m_watchlater, json[QString("watchlater")]);
    m_watchlater_isSet = !json[QString("watchlater")].isNull() && m_watchlater_isValid;
}

QString OAIEmbed_settings_buttons::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbed_settings_buttons::asJsonObject() const {
    QJsonObject obj;
    if (m_embed_isSet) {
        obj.insert(QString("embed"), ::OpenAPI::toJsonValue(m_embed));
    }
    if (m_fullscreen_isSet) {
        obj.insert(QString("fullscreen"), ::OpenAPI::toJsonValue(m_fullscreen));
    }
    if (m_hd_isSet) {
        obj.insert(QString("hd"), ::OpenAPI::toJsonValue(m_hd));
    }
    if (m_like_isSet) {
        obj.insert(QString("like"), ::OpenAPI::toJsonValue(m_like));
    }
    if (m_scaling_isSet) {
        obj.insert(QString("scaling"), ::OpenAPI::toJsonValue(m_scaling));
    }
    if (m_share_isSet) {
        obj.insert(QString("share"), ::OpenAPI::toJsonValue(m_share));
    }
    if (m_watchlater_isSet) {
        obj.insert(QString("watchlater"), ::OpenAPI::toJsonValue(m_watchlater));
    }
    return obj;
}

bool OAIEmbed_settings_buttons::isEmbed() const {
    return m_embed;
}
void OAIEmbed_settings_buttons::setEmbed(const bool &embed) {
    m_embed = embed;
    m_embed_isSet = true;
}

bool OAIEmbed_settings_buttons::is_embed_Set() const{
    return m_embed_isSet;
}

bool OAIEmbed_settings_buttons::is_embed_Valid() const{
    return m_embed_isValid;
}

bool OAIEmbed_settings_buttons::isFullscreen() const {
    return m_fullscreen;
}
void OAIEmbed_settings_buttons::setFullscreen(const bool &fullscreen) {
    m_fullscreen = fullscreen;
    m_fullscreen_isSet = true;
}

bool OAIEmbed_settings_buttons::is_fullscreen_Set() const{
    return m_fullscreen_isSet;
}

bool OAIEmbed_settings_buttons::is_fullscreen_Valid() const{
    return m_fullscreen_isValid;
}

bool OAIEmbed_settings_buttons::isHd() const {
    return m_hd;
}
void OAIEmbed_settings_buttons::setHd(const bool &hd) {
    m_hd = hd;
    m_hd_isSet = true;
}

bool OAIEmbed_settings_buttons::is_hd_Set() const{
    return m_hd_isSet;
}

bool OAIEmbed_settings_buttons::is_hd_Valid() const{
    return m_hd_isValid;
}

bool OAIEmbed_settings_buttons::isLike() const {
    return m_like;
}
void OAIEmbed_settings_buttons::setLike(const bool &like) {
    m_like = like;
    m_like_isSet = true;
}

bool OAIEmbed_settings_buttons::is_like_Set() const{
    return m_like_isSet;
}

bool OAIEmbed_settings_buttons::is_like_Valid() const{
    return m_like_isValid;
}

bool OAIEmbed_settings_buttons::isScaling() const {
    return m_scaling;
}
void OAIEmbed_settings_buttons::setScaling(const bool &scaling) {
    m_scaling = scaling;
    m_scaling_isSet = true;
}

bool OAIEmbed_settings_buttons::is_scaling_Set() const{
    return m_scaling_isSet;
}

bool OAIEmbed_settings_buttons::is_scaling_Valid() const{
    return m_scaling_isValid;
}

bool OAIEmbed_settings_buttons::isShare() const {
    return m_share;
}
void OAIEmbed_settings_buttons::setShare(const bool &share) {
    m_share = share;
    m_share_isSet = true;
}

bool OAIEmbed_settings_buttons::is_share_Set() const{
    return m_share_isSet;
}

bool OAIEmbed_settings_buttons::is_share_Valid() const{
    return m_share_isValid;
}

bool OAIEmbed_settings_buttons::isWatchlater() const {
    return m_watchlater;
}
void OAIEmbed_settings_buttons::setWatchlater(const bool &watchlater) {
    m_watchlater = watchlater;
    m_watchlater_isSet = true;
}

bool OAIEmbed_settings_buttons::is_watchlater_Set() const{
    return m_watchlater_isSet;
}

bool OAIEmbed_settings_buttons::is_watchlater_Valid() const{
    return m_watchlater_isValid;
}

bool OAIEmbed_settings_buttons::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_embed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fullscreen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_like_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchlater_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbed_settings_buttons::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_embed_isValid && m_fullscreen_isValid && m_hd_isValid && m_like_isValid && m_scaling_isValid && m_share_isValid && m_watchlater_isValid && true;
}

} // namespace OpenAPI
