/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAlbumsEssentialsApi_H
#define OAI_OAIAlbumsEssentialsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlbum.h"
#include "OAICreate_album_alt1_request.h"
#include "OAIEdit_album_alt1_request.h"
#include "OAILegacy_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAlbumsEssentialsApi : public QObject {
    Q_OBJECT

public:
    OAIAlbumsEssentialsApi(const int timeOut = 0);
    ~OAIAlbumsEssentialsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  oai_create_album_alt1_request OAICreate_album_alt1_request [required]
    */
    virtual void createAlbum(const double &user_id, const OAICreate_album_alt1_request &oai_create_album_alt1_request);

    /**
    * @param[in]  oai_create_album_alt1_request OAICreate_album_alt1_request [required]
    */
    virtual void createAlbumAlt1(const OAICreate_album_alt1_request &oai_create_album_alt1_request);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void deleteAlbum(const double &album_id, const double &user_id);

    /**
    * @param[in]  album_id double [required]
    */
    virtual void deleteAlbumAlt1(const double &album_id);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  oai_edit_album_alt1_request OAIEdit_album_alt1_request [optional]
    */
    virtual void editAlbum(const double &album_id, const double &user_id, const ::OpenAPI::OptionalParam<OAIEdit_album_alt1_request> &oai_edit_album_alt1_request = ::OpenAPI::OptionalParam<OAIEdit_album_alt1_request>());

    /**
    * @param[in]  album_id double [required]
    * @param[in]  oai_edit_album_alt1_request OAIEdit_album_alt1_request [optional]
    */
    virtual void editAlbumAlt1(const double &album_id, const ::OpenAPI::OptionalParam<OAIEdit_album_alt1_request> &oai_edit_album_alt1_request = ::OpenAPI::OptionalParam<OAIEdit_album_alt1_request>());

    /**
    * @param[in]  album_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void getAlbum(const double &album_id, const double &user_id);

    /**
    * @param[in]  album_id double [required]
    */
    virtual void getAlbumAlt1(const double &album_id);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getAlbums(const double &user_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getAlbumsAlt1(const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAlbumCallback(OAIHttpRequestWorker *worker);
    void createAlbumAlt1Callback(OAIHttpRequestWorker *worker);
    void deleteAlbumCallback(OAIHttpRequestWorker *worker);
    void deleteAlbumAlt1Callback(OAIHttpRequestWorker *worker);
    void editAlbumCallback(OAIHttpRequestWorker *worker);
    void editAlbumAlt1Callback(OAIHttpRequestWorker *worker);
    void getAlbumCallback(OAIHttpRequestWorker *worker);
    void getAlbumAlt1Callback(OAIHttpRequestWorker *worker);
    void getAlbumsCallback(OAIHttpRequestWorker *worker);
    void getAlbumsAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAlbumSignal(OAIAlbum summary);
    void createAlbumAlt1Signal(OAIAlbum summary);
    void deleteAlbumSignal();
    void deleteAlbumAlt1Signal();
    void editAlbumSignal(OAIAlbum summary);
    void editAlbumAlt1Signal(OAIAlbum summary);
    void getAlbumSignal(OAIAlbum summary);
    void getAlbumAlt1Signal(OAIAlbum summary);
    void getAlbumsSignal(QList<OAIAlbum> summary);
    void getAlbumsAlt1Signal(QList<OAIAlbum> summary);


    void createAlbumSignalFull(OAIHttpRequestWorker *worker, OAIAlbum summary);
    void createAlbumAlt1SignalFull(OAIHttpRequestWorker *worker, OAIAlbum summary);
    void deleteAlbumSignalFull(OAIHttpRequestWorker *worker);
    void deleteAlbumAlt1SignalFull(OAIHttpRequestWorker *worker);
    void editAlbumSignalFull(OAIHttpRequestWorker *worker, OAIAlbum summary);
    void editAlbumAlt1SignalFull(OAIHttpRequestWorker *worker, OAIAlbum summary);
    void getAlbumSignalFull(OAIHttpRequestWorker *worker, OAIAlbum summary);
    void getAlbumAlt1SignalFull(OAIHttpRequestWorker *worker, OAIAlbum summary);
    void getAlbumsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAlbum> summary);
    void getAlbumsAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIAlbum> summary);

    Q_DECL_DEPRECATED_X("Use createAlbumSignalError() instead")
    void createAlbumSignalE(OAIAlbum summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAlbumSignalError(OAIAlbum summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAlbumAlt1SignalError() instead")
    void createAlbumAlt1SignalE(OAIAlbum summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAlbumAlt1SignalError(OAIAlbum summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAlbumSignalError() instead")
    void deleteAlbumSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAlbumSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAlbumAlt1SignalError() instead")
    void deleteAlbumAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAlbumAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editAlbumSignalError() instead")
    void editAlbumSignalE(OAIAlbum summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editAlbumSignalError(OAIAlbum summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editAlbumAlt1SignalError() instead")
    void editAlbumAlt1SignalE(OAIAlbum summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editAlbumAlt1SignalError(OAIAlbum summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumSignalError() instead")
    void getAlbumSignalE(OAIAlbum summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumSignalError(OAIAlbum summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumAlt1SignalError() instead")
    void getAlbumAlt1SignalE(OAIAlbum summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumAlt1SignalError(OAIAlbum summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumsSignalError() instead")
    void getAlbumsSignalE(QList<OAIAlbum> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumsSignalError(QList<OAIAlbum> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumsAlt1SignalError() instead")
    void getAlbumsAlt1SignalE(QList<OAIAlbum> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumsAlt1SignalError(QList<OAIAlbum> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAlbumSignalErrorFull() instead")
    void createAlbumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAlbumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAlbumAlt1SignalErrorFull() instead")
    void createAlbumAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAlbumAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAlbumSignalErrorFull() instead")
    void deleteAlbumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAlbumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAlbumAlt1SignalErrorFull() instead")
    void deleteAlbumAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAlbumAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editAlbumSignalErrorFull() instead")
    void editAlbumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editAlbumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editAlbumAlt1SignalErrorFull() instead")
    void editAlbumAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editAlbumAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumSignalErrorFull() instead")
    void getAlbumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumAlt1SignalErrorFull() instead")
    void getAlbumAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumsSignalErrorFull() instead")
    void getAlbumsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumsAlt1SignalErrorFull() instead")
    void getAlbumsAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumsAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
