/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWatchLaterQueueEssentialsApi_H
#define OAI_OAIWatchLaterQueueEssentialsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILegacy_error.h"
#include "OAIVideo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWatchLaterQueueEssentialsApi : public QObject {
    Q_OBJECT

public:
    OAIWatchLaterQueueEssentialsApi(const int timeOut = 0);
    ~OAIWatchLaterQueueEssentialsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void addVideoToWatchLater(const double &user_id, const double &video_id);

    /**
    * @param[in]  video_id double [required]
    */
    virtual void addVideoToWatchLaterAlt1(const double &video_id);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void checkWatchLaterQueue(const double &user_id, const double &video_id);

    /**
    * @param[in]  video_id double [required]
    */
    virtual void checkWatchLaterQueueAlt1(const double &video_id);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void deleteVideoFromWatchLater(const double &user_id, const double &video_id);

    /**
    * @param[in]  video_id double [required]
    */
    virtual void deleteVideoFromWatchLaterAlt1(const double &video_id);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  filter_embeddable bool [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getWatchLaterQueue(const double &user_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &filter_embeddable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  direction QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  filter_embeddable bool [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getWatchLaterQueueAlt1(const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &filter_embeddable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addVideoToWatchLaterCallback(OAIHttpRequestWorker *worker);
    void addVideoToWatchLaterAlt1Callback(OAIHttpRequestWorker *worker);
    void checkWatchLaterQueueCallback(OAIHttpRequestWorker *worker);
    void checkWatchLaterQueueAlt1Callback(OAIHttpRequestWorker *worker);
    void deleteVideoFromWatchLaterCallback(OAIHttpRequestWorker *worker);
    void deleteVideoFromWatchLaterAlt1Callback(OAIHttpRequestWorker *worker);
    void getWatchLaterQueueCallback(OAIHttpRequestWorker *worker);
    void getWatchLaterQueueAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addVideoToWatchLaterSignal();
    void addVideoToWatchLaterAlt1Signal();
    void checkWatchLaterQueueSignal(OAIVideo summary);
    void checkWatchLaterQueueAlt1Signal(OAIVideo summary);
    void deleteVideoFromWatchLaterSignal();
    void deleteVideoFromWatchLaterAlt1Signal();
    void getWatchLaterQueueSignal(QList<OAIVideo> summary);
    void getWatchLaterQueueAlt1Signal(QList<OAIVideo> summary);


    void addVideoToWatchLaterSignalFull(OAIHttpRequestWorker *worker);
    void addVideoToWatchLaterAlt1SignalFull(OAIHttpRequestWorker *worker);
    void checkWatchLaterQueueSignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);
    void checkWatchLaterQueueAlt1SignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);
    void deleteVideoFromWatchLaterSignalFull(OAIHttpRequestWorker *worker);
    void deleteVideoFromWatchLaterAlt1SignalFull(OAIHttpRequestWorker *worker);
    void getWatchLaterQueueSignalFull(OAIHttpRequestWorker *worker, QList<OAIVideo> summary);
    void getWatchLaterQueueAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIVideo> summary);

    Q_DECL_DEPRECATED_X("Use addVideoToWatchLaterSignalError() instead")
    void addVideoToWatchLaterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToWatchLaterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideoToWatchLaterAlt1SignalError() instead")
    void addVideoToWatchLaterAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToWatchLaterAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkWatchLaterQueueSignalError() instead")
    void checkWatchLaterQueueSignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkWatchLaterQueueSignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkWatchLaterQueueAlt1SignalError() instead")
    void checkWatchLaterQueueAlt1SignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkWatchLaterQueueAlt1SignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoFromWatchLaterSignalError() instead")
    void deleteVideoFromWatchLaterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoFromWatchLaterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoFromWatchLaterAlt1SignalError() instead")
    void deleteVideoFromWatchLaterAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoFromWatchLaterAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWatchLaterQueueSignalError() instead")
    void getWatchLaterQueueSignalE(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWatchLaterQueueSignalError(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWatchLaterQueueAlt1SignalError() instead")
    void getWatchLaterQueueAlt1SignalE(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWatchLaterQueueAlt1SignalError(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addVideoToWatchLaterSignalErrorFull() instead")
    void addVideoToWatchLaterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToWatchLaterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideoToWatchLaterAlt1SignalErrorFull() instead")
    void addVideoToWatchLaterAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToWatchLaterAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkWatchLaterQueueSignalErrorFull() instead")
    void checkWatchLaterQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkWatchLaterQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkWatchLaterQueueAlt1SignalErrorFull() instead")
    void checkWatchLaterQueueAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkWatchLaterQueueAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoFromWatchLaterSignalErrorFull() instead")
    void deleteVideoFromWatchLaterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoFromWatchLaterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoFromWatchLaterAlt1SignalErrorFull() instead")
    void deleteVideoFromWatchLaterAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoFromWatchLaterAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWatchLaterQueueSignalErrorFull() instead")
    void getWatchLaterQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWatchLaterQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWatchLaterQueueAlt1SignalErrorFull() instead")
    void getWatchLaterQueueAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWatchLaterQueueAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
