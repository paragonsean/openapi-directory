/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuth::OAIAuth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuth::OAIAuth() {
    this->initializeModel();
}

OAIAuth::~OAIAuth() {}

void OAIAuth::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_app_isSet = false;
    m_app_isValid = false;

    m_expires_on_isSet = false;
    m_expires_on_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_token_type_isSet = false;
    m_token_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAuth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuth::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("access_token")]);
    m_access_token_isSet = !json[QString("access_token")].isNull() && m_access_token_isValid;

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_expires_on_isValid = ::OpenAPI::fromJsonValue(m_expires_on, json[QString("expires_on")]);
    m_expires_on_isSet = !json[QString("expires_on")].isNull() && m_expires_on_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refresh_token")]);
    m_refresh_token_isSet = !json[QString("refresh_token")].isNull() && m_refresh_token_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_token_type_isValid = ::OpenAPI::fromJsonValue(m_token_type, json[QString("token_type")]);
    m_token_type_isSet = !json[QString("token_type")].isNull() && m_token_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIAuth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuth::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("access_token"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_app.isSet()) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_expires_on_isSet) {
        obj.insert(QString("expires_on"), ::OpenAPI::toJsonValue(m_expires_on));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refresh_token"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_token_type_isSet) {
        obj.insert(QString("token_type"), ::OpenAPI::toJsonValue(m_token_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIAuth::getAccessToken() const {
    return m_access_token;
}
void OAIAuth::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIAuth::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIAuth::is_access_token_Valid() const{
    return m_access_token_isValid;
}

OAIApi_app OAIAuth::getApp() const {
    return m_app;
}
void OAIAuth::setApp(const OAIApi_app &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAIAuth::is_app_Set() const{
    return m_app_isSet;
}

bool OAIAuth::is_app_Valid() const{
    return m_app_isValid;
}

QString OAIAuth::getExpiresOn() const {
    return m_expires_on;
}
void OAIAuth::setExpiresOn(const QString &expires_on) {
    m_expires_on = expires_on;
    m_expires_on_isSet = true;
}

bool OAIAuth::is_expires_on_Set() const{
    return m_expires_on_isSet;
}

bool OAIAuth::is_expires_on_Valid() const{
    return m_expires_on_isValid;
}

QString OAIAuth::getRefreshToken() const {
    return m_refresh_token;
}
void OAIAuth::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIAuth::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIAuth::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

QString OAIAuth::getScope() const {
    return m_scope;
}
void OAIAuth::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIAuth::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIAuth::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIAuth::getTokenType() const {
    return m_token_type;
}
void OAIAuth::setTokenType(const QString &token_type) {
    m_token_type = token_type;
    m_token_type_isSet = true;
}

bool OAIAuth::is_token_type_Set() const{
    return m_token_type_isSet;
}

bool OAIAuth::is_token_type_Valid() const{
    return m_token_type_isValid;
}

OAIUser OAIAuth::getUser() const {
    return m_user;
}
void OAIAuth::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAuth::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAuth::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAuth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuth::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_token_isValid && m_app_isValid && m_scope_isValid && m_token_type_isValid && true;
}

} // namespace OpenAPI
