/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdit_user_alt1_request_videos_privacy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdit_user_alt1_request_videos_privacy::OAIEdit_user_alt1_request_videos_privacy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdit_user_alt1_request_videos_privacy::OAIEdit_user_alt1_request_videos_privacy() {
    this->initializeModel();
}

OAIEdit_user_alt1_request_videos_privacy::~OAIEdit_user_alt1_request_videos_privacy() {}

void OAIEdit_user_alt1_request_videos_privacy::initializeModel() {

    m_add_isSet = false;
    m_add_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_download_isSet = false;
    m_download_isValid = false;

    m_embed_isSet = false;
    m_embed_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;
}

void OAIEdit_user_alt1_request_videos_privacy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdit_user_alt1_request_videos_privacy::fromJsonObject(QJsonObject json) {

    m_add_isValid = ::OpenAPI::fromJsonValue(m_add, json[QString("add")]);
    m_add_isSet = !json[QString("add")].isNull() && m_add_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_download_isValid = ::OpenAPI::fromJsonValue(m_download, json[QString("download")]);
    m_download_isSet = !json[QString("download")].isNull() && m_download_isValid;

    m_embed_isValid = ::OpenAPI::fromJsonValue(m_embed, json[QString("embed")]);
    m_embed_isSet = !json[QString("embed")].isNull() && m_embed_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;
}

QString OAIEdit_user_alt1_request_videos_privacy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdit_user_alt1_request_videos_privacy::asJsonObject() const {
    QJsonObject obj;
    if (m_add_isSet) {
        obj.insert(QString("add"), ::OpenAPI::toJsonValue(m_add));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_download_isSet) {
        obj.insert(QString("download"), ::OpenAPI::toJsonValue(m_download));
    }
    if (m_embed_isSet) {
        obj.insert(QString("embed"), ::OpenAPI::toJsonValue(m_embed));
    }
    if (m_view_isSet) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    return obj;
}

bool OAIEdit_user_alt1_request_videos_privacy::isAdd() const {
    return m_add;
}
void OAIEdit_user_alt1_request_videos_privacy::setAdd(const bool &add) {
    m_add = add;
    m_add_isSet = true;
}

bool OAIEdit_user_alt1_request_videos_privacy::is_add_Set() const{
    return m_add_isSet;
}

bool OAIEdit_user_alt1_request_videos_privacy::is_add_Valid() const{
    return m_add_isValid;
}

QString OAIEdit_user_alt1_request_videos_privacy::getComments() const {
    return m_comments;
}
void OAIEdit_user_alt1_request_videos_privacy::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIEdit_user_alt1_request_videos_privacy::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIEdit_user_alt1_request_videos_privacy::is_comments_Valid() const{
    return m_comments_isValid;
}

bool OAIEdit_user_alt1_request_videos_privacy::isDownload() const {
    return m_download;
}
void OAIEdit_user_alt1_request_videos_privacy::setDownload(const bool &download) {
    m_download = download;
    m_download_isSet = true;
}

bool OAIEdit_user_alt1_request_videos_privacy::is_download_Set() const{
    return m_download_isSet;
}

bool OAIEdit_user_alt1_request_videos_privacy::is_download_Valid() const{
    return m_download_isValid;
}

QString OAIEdit_user_alt1_request_videos_privacy::getEmbed() const {
    return m_embed;
}
void OAIEdit_user_alt1_request_videos_privacy::setEmbed(const QString &embed) {
    m_embed = embed;
    m_embed_isSet = true;
}

bool OAIEdit_user_alt1_request_videos_privacy::is_embed_Set() const{
    return m_embed_isSet;
}

bool OAIEdit_user_alt1_request_videos_privacy::is_embed_Valid() const{
    return m_embed_isValid;
}

QString OAIEdit_user_alt1_request_videos_privacy::getView() const {
    return m_view;
}
void OAIEdit_user_alt1_request_videos_privacy::setView(const QString &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAIEdit_user_alt1_request_videos_privacy::is_view_Set() const{
    return m_view_isSet;
}

bool OAIEdit_user_alt1_request_videos_privacy::is_view_Valid() const{
    return m_view_isValid;
}

bool OAIEdit_user_alt1_request_videos_privacy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdit_user_alt1_request_videos_privacy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
