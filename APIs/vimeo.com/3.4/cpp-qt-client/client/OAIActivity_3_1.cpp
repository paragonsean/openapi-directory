/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity_3_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivity_3_1::OAIActivity_3_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivity_3_1::OAIActivity_3_1() {
    this->initializeModel();
}

OAIActivity_3_1::~OAIActivity_3_1() {}

void OAIActivity_3_1::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_clip_isSet = false;
    m_clip_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIActivity_3_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity_3_1::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_clip_isValid = ::OpenAPI::fromJsonValue(m_clip, json[QString("clip")]);
    m_clip_isSet = !json[QString("clip")].isNull() && m_clip_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIActivity_3_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity_3_1::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_clip.isSet()) {
        obj.insert(QString("clip"), ::OpenAPI::toJsonValue(m_clip));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_tag.isSet()) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAICategory OAIActivity_3_1::getCategory() const {
    return m_category;
}
void OAIActivity_3_1::setCategory(const OAICategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIActivity_3_1::is_category_Set() const{
    return m_category_isSet;
}

bool OAIActivity_3_1::is_category_Valid() const{
    return m_category_isValid;
}

OAIChannel OAIActivity_3_1::getChannel() const {
    return m_channel;
}
void OAIActivity_3_1::setChannel(const OAIChannel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIActivity_3_1::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIActivity_3_1::is_channel_Valid() const{
    return m_channel_isValid;
}

OAIVideo OAIActivity_3_1::getClip() const {
    return m_clip;
}
void OAIActivity_3_1::setClip(const OAIVideo &clip) {
    m_clip = clip;
    m_clip_isSet = true;
}

bool OAIActivity_3_1::is_clip_Set() const{
    return m_clip_isSet;
}

bool OAIActivity_3_1::is_clip_Valid() const{
    return m_clip_isValid;
}

OAIGroup OAIActivity_3_1::getGroup() const {
    return m_group;
}
void OAIActivity_3_1::setGroup(const OAIGroup &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIActivity_3_1::is_group_Set() const{
    return m_group_isSet;
}

bool OAIActivity_3_1::is_group_Valid() const{
    return m_group_isValid;
}

OAIActivity_3_1_metadata OAIActivity_3_1::getMetadata() const {
    return m_metadata;
}
void OAIActivity_3_1::setMetadata(const OAIActivity_3_1_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIActivity_3_1::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIActivity_3_1::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAITag OAIActivity_3_1::getTag() const {
    return m_tag;
}
void OAIActivity_3_1::setTag(const OAITag &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIActivity_3_1::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIActivity_3_1::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAIActivity_3_1::getTime() const {
    return m_time;
}
void OAIActivity_3_1::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIActivity_3_1::is_time_Set() const{
    return m_time_isSet;
}

bool OAIActivity_3_1::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIActivity_3_1::getType() const {
    return m_type;
}
void OAIActivity_3_1::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIActivity_3_1::is_type_Set() const{
    return m_type_isSet;
}

bool OAIActivity_3_1::is_type_Valid() const{
    return m_type_isValid;
}

OAIUser OAIActivity_3_1::getUser() const {
    return m_user;
}
void OAIActivity_3_1::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIActivity_3_1::is_user_Set() const{
    return m_user_isSet;
}

bool OAIActivity_3_1::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIActivity_3_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity_3_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_clip_isValid && m_metadata_isValid && m_time_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
