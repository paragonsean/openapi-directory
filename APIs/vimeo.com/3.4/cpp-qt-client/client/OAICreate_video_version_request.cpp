/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_video_version_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_video_version_request::OAICreate_video_version_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_video_version_request::OAICreate_video_version_request() {
    this->initializeModel();
}

OAICreate_video_version_request::~OAICreate_video_version_request() {}

void OAICreate_video_version_request::initializeModel() {

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_upload_isSet = false;
    m_upload_isValid = false;
}

void OAICreate_video_version_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_video_version_request::fromJsonObject(QJsonObject json) {

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("file_name")]);
    m_file_name_isSet = !json[QString("file_name")].isNull() && m_file_name_isValid;

    m_upload_isValid = ::OpenAPI::fromJsonValue(m_upload, json[QString("upload")]);
    m_upload_isSet = !json[QString("upload")].isNull() && m_upload_isValid;
}

QString OAICreate_video_version_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_video_version_request::asJsonObject() const {
    QJsonObject obj;
    if (m_file_name_isSet) {
        obj.insert(QString("file_name"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_upload.isSet()) {
        obj.insert(QString("upload"), ::OpenAPI::toJsonValue(m_upload));
    }
    return obj;
}

QString OAICreate_video_version_request::getFileName() const {
    return m_file_name;
}
void OAICreate_video_version_request::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAICreate_video_version_request::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAICreate_video_version_request::is_file_name_Valid() const{
    return m_file_name_isValid;
}

OAICreate_video_version_request_upload OAICreate_video_version_request::getUpload() const {
    return m_upload;
}
void OAICreate_video_version_request::setUpload(const OAICreate_video_version_request_upload &upload) {
    m_upload = upload;
    m_upload_isSet = true;
}

bool OAICreate_video_version_request::is_upload_Set() const{
    return m_upload_isSet;
}

bool OAICreate_video_version_request::is_upload_Valid() const{
    return m_upload_isValid;
}

bool OAICreate_video_version_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_video_version_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_name_isValid && m_upload_isValid && true;
}

} // namespace OpenAPI
