/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPortfoliosVideosApi_H
#define OAI_OAIPortfoliosVideosApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILegacy_error.h"
#include "OAIVideo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPortfoliosVideosApi : public QObject {
    Q_OBJECT

public:
    OAIPortfoliosVideosApi(const int timeOut = 0);
    ~OAIPortfoliosVideosApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  portfolio_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void addVideoToPortfolio(const double &portfolio_id, const double &user_id, const double &video_id);

    /**
    * @param[in]  portfolio_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void addVideoToPortfolioAlt1(const double &portfolio_id, const double &video_id);

    /**
    * @param[in]  portfolio_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void deleteVideoFromPortfolio(const double &portfolio_id, const double &user_id, const double &video_id);

    /**
    * @param[in]  portfolio_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void deleteVideoFromPortfolioAlt1(const double &portfolio_id, const double &video_id);

    /**
    * @param[in]  portfolio_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void getPortfolioVideo(const double &portfolio_id, const double &user_id, const double &video_id);

    /**
    * @param[in]  portfolio_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void getPortfolioVideoAlt1(const double &portfolio_id, const double &video_id);

    /**
    * @param[in]  portfolio_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  containing_uri QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  filter_embeddable bool [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getPortfolioVideos(const double &portfolio_id, const double &user_id, const ::OpenAPI::OptionalParam<QString> &containing_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &filter_embeddable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  portfolio_id double [required]
    * @param[in]  containing_uri QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  filter_embeddable bool [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getPortfolioVideosAlt1(const double &portfolio_id, const ::OpenAPI::OptionalParam<QString> &containing_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &filter_embeddable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addVideoToPortfolioCallback(OAIHttpRequestWorker *worker);
    void addVideoToPortfolioAlt1Callback(OAIHttpRequestWorker *worker);
    void deleteVideoFromPortfolioCallback(OAIHttpRequestWorker *worker);
    void deleteVideoFromPortfolioAlt1Callback(OAIHttpRequestWorker *worker);
    void getPortfolioVideoCallback(OAIHttpRequestWorker *worker);
    void getPortfolioVideoAlt1Callback(OAIHttpRequestWorker *worker);
    void getPortfolioVideosCallback(OAIHttpRequestWorker *worker);
    void getPortfolioVideosAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addVideoToPortfolioSignal();
    void addVideoToPortfolioAlt1Signal();
    void deleteVideoFromPortfolioSignal();
    void deleteVideoFromPortfolioAlt1Signal();
    void getPortfolioVideoSignal(OAIVideo summary);
    void getPortfolioVideoAlt1Signal(OAIVideo summary);
    void getPortfolioVideosSignal(QList<OAIVideo> summary);
    void getPortfolioVideosAlt1Signal(QList<OAIVideo> summary);


    void addVideoToPortfolioSignalFull(OAIHttpRequestWorker *worker);
    void addVideoToPortfolioAlt1SignalFull(OAIHttpRequestWorker *worker);
    void deleteVideoFromPortfolioSignalFull(OAIHttpRequestWorker *worker);
    void deleteVideoFromPortfolioAlt1SignalFull(OAIHttpRequestWorker *worker);
    void getPortfolioVideoSignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);
    void getPortfolioVideoAlt1SignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);
    void getPortfolioVideosSignalFull(OAIHttpRequestWorker *worker, QList<OAIVideo> summary);
    void getPortfolioVideosAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIVideo> summary);

    Q_DECL_DEPRECATED_X("Use addVideoToPortfolioSignalError() instead")
    void addVideoToPortfolioSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToPortfolioSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideoToPortfolioAlt1SignalError() instead")
    void addVideoToPortfolioAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToPortfolioAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoFromPortfolioSignalError() instead")
    void deleteVideoFromPortfolioSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoFromPortfolioSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoFromPortfolioAlt1SignalError() instead")
    void deleteVideoFromPortfolioAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoFromPortfolioAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfolioVideoSignalError() instead")
    void getPortfolioVideoSignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfolioVideoSignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfolioVideoAlt1SignalError() instead")
    void getPortfolioVideoAlt1SignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfolioVideoAlt1SignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfolioVideosSignalError() instead")
    void getPortfolioVideosSignalE(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfolioVideosSignalError(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfolioVideosAlt1SignalError() instead")
    void getPortfolioVideosAlt1SignalE(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfolioVideosAlt1SignalError(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addVideoToPortfolioSignalErrorFull() instead")
    void addVideoToPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideoToPortfolioAlt1SignalErrorFull() instead")
    void addVideoToPortfolioAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToPortfolioAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoFromPortfolioSignalErrorFull() instead")
    void deleteVideoFromPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoFromPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoFromPortfolioAlt1SignalErrorFull() instead")
    void deleteVideoFromPortfolioAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoFromPortfolioAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfolioVideoSignalErrorFull() instead")
    void getPortfolioVideoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfolioVideoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfolioVideoAlt1SignalErrorFull() instead")
    void getPortfolioVideoAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfolioVideoAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfolioVideosSignalErrorFull() instead")
    void getPortfolioVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfolioVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfolioVideosAlt1SignalErrorFull() instead")
    void getPortfolioVideosAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfolioVideosAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
