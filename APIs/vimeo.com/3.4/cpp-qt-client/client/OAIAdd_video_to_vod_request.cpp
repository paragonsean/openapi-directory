/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdd_video_to_vod_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdd_video_to_vod_request::OAIAdd_video_to_vod_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdd_video_to_vod_request::OAIAdd_video_to_vod_request() {
    this->initializeModel();
}

OAIAdd_video_to_vod_request::~OAIAdd_video_to_vod_request() {}

void OAIAdd_video_to_vod_request::initializeModel() {

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_release_year_isSet = false;
    m_release_year_isValid = false;

    m_rent_isSet = false;
    m_rent_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAdd_video_to_vod_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdd_video_to_vod_request::fromJsonObject(QJsonObject json) {

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_release_year_isValid = ::OpenAPI::fromJsonValue(m_release_year, json[QString("release_year")]);
    m_release_year_isSet = !json[QString("release_year")].isNull() && m_release_year_isValid;

    m_rent_isValid = ::OpenAPI::fromJsonValue(m_rent, json[QString("rent")]);
    m_rent_isSet = !json[QString("rent")].isNull() && m_rent_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAdd_video_to_vod_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdd_video_to_vod_request::asJsonObject() const {
    QJsonObject obj;
    if (m_buy.isSet()) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_release_year_isSet) {
        obj.insert(QString("release_year"), ::OpenAPI::toJsonValue(m_release_year));
    }
    if (m_rent.isSet()) {
        obj.insert(QString("rent"), ::OpenAPI::toJsonValue(m_rent));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAdd_video_to_vod_request_buy OAIAdd_video_to_vod_request::getBuy() const {
    return m_buy;
}
void OAIAdd_video_to_vod_request::setBuy(const OAIAdd_video_to_vod_request_buy &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAIAdd_video_to_vod_request::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAIAdd_video_to_vod_request::is_buy_Valid() const{
    return m_buy_isValid;
}

double OAIAdd_video_to_vod_request::getPosition() const {
    return m_position;
}
void OAIAdd_video_to_vod_request::setPosition(const double &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIAdd_video_to_vod_request::is_position_Set() const{
    return m_position_isSet;
}

bool OAIAdd_video_to_vod_request::is_position_Valid() const{
    return m_position_isValid;
}

double OAIAdd_video_to_vod_request::getReleaseYear() const {
    return m_release_year;
}
void OAIAdd_video_to_vod_request::setReleaseYear(const double &release_year) {
    m_release_year = release_year;
    m_release_year_isSet = true;
}

bool OAIAdd_video_to_vod_request::is_release_year_Set() const{
    return m_release_year_isSet;
}

bool OAIAdd_video_to_vod_request::is_release_year_Valid() const{
    return m_release_year_isValid;
}

OAIAdd_video_to_vod_request_rent OAIAdd_video_to_vod_request::getRent() const {
    return m_rent;
}
void OAIAdd_video_to_vod_request::setRent(const OAIAdd_video_to_vod_request_rent &rent) {
    m_rent = rent;
    m_rent_isSet = true;
}

bool OAIAdd_video_to_vod_request::is_rent_Set() const{
    return m_rent_isSet;
}

bool OAIAdd_video_to_vod_request::is_rent_Valid() const{
    return m_rent_isValid;
}

QString OAIAdd_video_to_vod_request::getType() const {
    return m_type;
}
void OAIAdd_video_to_vod_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAdd_video_to_vod_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAdd_video_to_vod_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAdd_video_to_vod_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdd_video_to_vod_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
