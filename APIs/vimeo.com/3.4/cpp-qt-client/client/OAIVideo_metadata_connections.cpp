/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_metadata_connections.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_metadata_connections::OAIVideo_metadata_connections(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_metadata_connections::OAIVideo_metadata_connections() {
    this->initializeModel();
}

OAIVideo_metadata_connections::~OAIVideo_metadata_connections() {}

void OAIVideo_metadata_connections::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_credits_isSet = false;
    m_credits_isValid = false;

    m_likes_isSet = false;
    m_likes_isValid = false;

    m_ondemand_isSet = false;
    m_ondemand_isValid = false;

    m_pictures_isSet = false;
    m_pictures_isValid = false;

    m_playback_isSet = false;
    m_playback_isValid = false;

    m_recommendations_isSet = false;
    m_recommendations_isValid = false;

    m_related_isSet = false;
    m_related_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_texttracks_isSet = false;
    m_texttracks_isValid = false;

    m_trailer_isSet = false;
    m_trailer_isValid = false;

    m_users_with_access_isSet = false;
    m_users_with_access_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAIVideo_metadata_connections::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_metadata_connections::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_credits_isValid = ::OpenAPI::fromJsonValue(m_credits, json[QString("credits")]);
    m_credits_isSet = !json[QString("credits")].isNull() && m_credits_isValid;

    m_likes_isValid = ::OpenAPI::fromJsonValue(m_likes, json[QString("likes")]);
    m_likes_isSet = !json[QString("likes")].isNull() && m_likes_isValid;

    m_ondemand_isValid = ::OpenAPI::fromJsonValue(m_ondemand, json[QString("ondemand")]);
    m_ondemand_isSet = !json[QString("ondemand")].isNull() && m_ondemand_isValid;

    m_pictures_isValid = ::OpenAPI::fromJsonValue(m_pictures, json[QString("pictures")]);
    m_pictures_isSet = !json[QString("pictures")].isNull() && m_pictures_isValid;

    m_playback_isValid = ::OpenAPI::fromJsonValue(m_playback, json[QString("playback")]);
    m_playback_isSet = !json[QString("playback")].isNull() && m_playback_isValid;

    m_recommendations_isValid = ::OpenAPI::fromJsonValue(m_recommendations, json[QString("recommendations")]);
    m_recommendations_isSet = !json[QString("recommendations")].isNull() && m_recommendations_isValid;

    m_related_isValid = ::OpenAPI::fromJsonValue(m_related, json[QString("related")]);
    m_related_isSet = !json[QString("related")].isNull() && m_related_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_texttracks_isValid = ::OpenAPI::fromJsonValue(m_texttracks, json[QString("texttracks")]);
    m_texttracks_isSet = !json[QString("texttracks")].isNull() && m_texttracks_isValid;

    m_trailer_isValid = ::OpenAPI::fromJsonValue(m_trailer, json[QString("trailer")]);
    m_trailer_isSet = !json[QString("trailer")].isNull() && m_trailer_isValid;

    m_users_with_access_isValid = ::OpenAPI::fromJsonValue(m_users_with_access, json[QString("users_with_access")]);
    m_users_with_access_isSet = !json[QString("users_with_access")].isNull() && m_users_with_access_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;
}

QString OAIVideo_metadata_connections::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_metadata_connections::asJsonObject() const {
    QJsonObject obj;
    if (m_comments.isSet()) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_credits.isSet()) {
        obj.insert(QString("credits"), ::OpenAPI::toJsonValue(m_credits));
    }
    if (m_likes.isSet()) {
        obj.insert(QString("likes"), ::OpenAPI::toJsonValue(m_likes));
    }
    if (m_ondemand.isSet()) {
        obj.insert(QString("ondemand"), ::OpenAPI::toJsonValue(m_ondemand));
    }
    if (m_pictures.isSet()) {
        obj.insert(QString("pictures"), ::OpenAPI::toJsonValue(m_pictures));
    }
    if (m_playback.isSet()) {
        obj.insert(QString("playback"), ::OpenAPI::toJsonValue(m_playback));
    }
    if (m_recommendations.isSet()) {
        obj.insert(QString("recommendations"), ::OpenAPI::toJsonValue(m_recommendations));
    }
    if (m_related.isSet()) {
        obj.insert(QString("related"), ::OpenAPI::toJsonValue(m_related));
    }
    if (m_season.isSet()) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_texttracks.isSet()) {
        obj.insert(QString("texttracks"), ::OpenAPI::toJsonValue(m_texttracks));
    }
    if (m_trailer.isSet()) {
        obj.insert(QString("trailer"), ::OpenAPI::toJsonValue(m_trailer));
    }
    if (m_users_with_access.isSet()) {
        obj.insert(QString("users_with_access"), ::OpenAPI::toJsonValue(m_users_with_access));
    }
    if (m_versions.isSet()) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    return obj;
}

OAIVideo_metadata_connections_comments OAIVideo_metadata_connections::getComments() const {
    return m_comments;
}
void OAIVideo_metadata_connections::setComments(const OAIVideo_metadata_connections_comments &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIVideo_metadata_connections::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIVideo_metadata_connections::is_comments_Valid() const{
    return m_comments_isValid;
}

OAIVideo_metadata_connections_credits OAIVideo_metadata_connections::getCredits() const {
    return m_credits;
}
void OAIVideo_metadata_connections::setCredits(const OAIVideo_metadata_connections_credits &credits) {
    m_credits = credits;
    m_credits_isSet = true;
}

bool OAIVideo_metadata_connections::is_credits_Set() const{
    return m_credits_isSet;
}

bool OAIVideo_metadata_connections::is_credits_Valid() const{
    return m_credits_isValid;
}

OAIVideo_metadata_connections_likes OAIVideo_metadata_connections::getLikes() const {
    return m_likes;
}
void OAIVideo_metadata_connections::setLikes(const OAIVideo_metadata_connections_likes &likes) {
    m_likes = likes;
    m_likes_isSet = true;
}

bool OAIVideo_metadata_connections::is_likes_Set() const{
    return m_likes_isSet;
}

bool OAIVideo_metadata_connections::is_likes_Valid() const{
    return m_likes_isValid;
}

OAIVideo_metadata_connections_ondemand OAIVideo_metadata_connections::getOndemand() const {
    return m_ondemand;
}
void OAIVideo_metadata_connections::setOndemand(const OAIVideo_metadata_connections_ondemand &ondemand) {
    m_ondemand = ondemand;
    m_ondemand_isSet = true;
}

bool OAIVideo_metadata_connections::is_ondemand_Set() const{
    return m_ondemand_isSet;
}

bool OAIVideo_metadata_connections::is_ondemand_Valid() const{
    return m_ondemand_isValid;
}

OAIVideo_metadata_connections_pictures OAIVideo_metadata_connections::getPictures() const {
    return m_pictures;
}
void OAIVideo_metadata_connections::setPictures(const OAIVideo_metadata_connections_pictures &pictures) {
    m_pictures = pictures;
    m_pictures_isSet = true;
}

bool OAIVideo_metadata_connections::is_pictures_Set() const{
    return m_pictures_isSet;
}

bool OAIVideo_metadata_connections::is_pictures_Valid() const{
    return m_pictures_isValid;
}

OAIVideo_metadata_connections_playback OAIVideo_metadata_connections::getPlayback() const {
    return m_playback;
}
void OAIVideo_metadata_connections::setPlayback(const OAIVideo_metadata_connections_playback &playback) {
    m_playback = playback;
    m_playback_isSet = true;
}

bool OAIVideo_metadata_connections::is_playback_Set() const{
    return m_playback_isSet;
}

bool OAIVideo_metadata_connections::is_playback_Valid() const{
    return m_playback_isValid;
}

OAIVideo_metadata_connections_recommendations OAIVideo_metadata_connections::getRecommendations() const {
    return m_recommendations;
}
void OAIVideo_metadata_connections::setRecommendations(const OAIVideo_metadata_connections_recommendations &recommendations) {
    m_recommendations = recommendations;
    m_recommendations_isSet = true;
}

bool OAIVideo_metadata_connections::is_recommendations_Set() const{
    return m_recommendations_isSet;
}

bool OAIVideo_metadata_connections::is_recommendations_Valid() const{
    return m_recommendations_isValid;
}

OAIVideo_metadata_connections_related OAIVideo_metadata_connections::getRelated() const {
    return m_related;
}
void OAIVideo_metadata_connections::setRelated(const OAIVideo_metadata_connections_related &related) {
    m_related = related;
    m_related_isSet = true;
}

bool OAIVideo_metadata_connections::is_related_Set() const{
    return m_related_isSet;
}

bool OAIVideo_metadata_connections::is_related_Valid() const{
    return m_related_isValid;
}

OAIVideo_metadata_connections_season OAIVideo_metadata_connections::getSeason() const {
    return m_season;
}
void OAIVideo_metadata_connections::setSeason(const OAIVideo_metadata_connections_season &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIVideo_metadata_connections::is_season_Set() const{
    return m_season_isSet;
}

bool OAIVideo_metadata_connections::is_season_Valid() const{
    return m_season_isValid;
}

OAIVideo_metadata_connections_texttracks OAIVideo_metadata_connections::getTexttracks() const {
    return m_texttracks;
}
void OAIVideo_metadata_connections::setTexttracks(const OAIVideo_metadata_connections_texttracks &texttracks) {
    m_texttracks = texttracks;
    m_texttracks_isSet = true;
}

bool OAIVideo_metadata_connections::is_texttracks_Set() const{
    return m_texttracks_isSet;
}

bool OAIVideo_metadata_connections::is_texttracks_Valid() const{
    return m_texttracks_isValid;
}

OAIVideo_metadata_connections_trailer OAIVideo_metadata_connections::getTrailer() const {
    return m_trailer;
}
void OAIVideo_metadata_connections::setTrailer(const OAIVideo_metadata_connections_trailer &trailer) {
    m_trailer = trailer;
    m_trailer_isSet = true;
}

bool OAIVideo_metadata_connections::is_trailer_Set() const{
    return m_trailer_isSet;
}

bool OAIVideo_metadata_connections::is_trailer_Valid() const{
    return m_trailer_isValid;
}

OAIVideo_metadata_connections_users_with_access OAIVideo_metadata_connections::getUsersWithAccess() const {
    return m_users_with_access;
}
void OAIVideo_metadata_connections::setUsersWithAccess(const OAIVideo_metadata_connections_users_with_access &users_with_access) {
    m_users_with_access = users_with_access;
    m_users_with_access_isSet = true;
}

bool OAIVideo_metadata_connections::is_users_with_access_Set() const{
    return m_users_with_access_isSet;
}

bool OAIVideo_metadata_connections::is_users_with_access_Valid() const{
    return m_users_with_access_isValid;
}

OAIVideo_metadata_connections_versions OAIVideo_metadata_connections::getVersions() const {
    return m_versions;
}
void OAIVideo_metadata_connections::setVersions(const OAIVideo_metadata_connections_versions &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIVideo_metadata_connections::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIVideo_metadata_connections::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAIVideo_metadata_connections::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_likes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ondemand.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pictures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_season.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_texttracks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trailer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_users_with_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_metadata_connections::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comments_isValid && m_credits_isValid && m_likes_isValid && m_ondemand_isValid && m_pictures_isValid && m_playback_isValid && m_recommendations_isValid && m_related_isValid && m_season_isValid && m_texttracks_isValid && m_trailer_isValid && m_users_with_access_isValid && m_versions_isValid && true;
}

} // namespace OpenAPI
