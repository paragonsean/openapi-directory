/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUser.h
 *
 * 
 */

#ifndef OAIUser_H
#define OAIUser_H

#include <QJsonObject>

#include "OAIPicture.h"
#include "OAIUser_metadata.h"
#include "OAIUser_preferences.h"
#include "OAIUser_upload_quota.h"
#include "OAIUser_websites_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUser_metadata;
class OAIPicture;
class OAIUser_preferences;
class OAIUser_upload_quota;
class OAIUser_websites_inner;

class OAIUser : public OAIObject {
public:
    OAIUser();
    OAIUser(QString json);
    ~OAIUser() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccount() const;
    void setAccount(const QString &account);
    bool is_account_Set() const;
    bool is_account_Valid() const;

    QString getBio() const;
    void setBio(const QString &bio);
    bool is_bio_Set() const;
    bool is_bio_Valid() const;

    QList<QString> getContentFilter() const;
    void setContentFilter(const QList<QString> &content_filter);
    bool is_content_filter_Set() const;
    bool is_content_filter_Valid() const;

    QString getCreatedTime() const;
    void setCreatedTime(const QString &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QString getLink() const;
    void setLink(const QString &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    OAIUser_metadata getMetadata() const;
    void setMetadata(const OAIUser_metadata &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIPicture getPictures() const;
    void setPictures(const OAIPicture &pictures);
    bool is_pictures_Set() const;
    bool is_pictures_Valid() const;

    OAIUser_preferences getPreferences() const;
    void setPreferences(const OAIUser_preferences &preferences);
    bool is_preferences_Set() const;
    bool is_preferences_Valid() const;

    QString getResourceKey() const;
    void setResourceKey(const QString &resource_key);
    bool is_resource_key_Set() const;
    bool is_resource_key_Valid() const;

    OAIUser_upload_quota getUploadQuota() const;
    void setUploadQuota(const OAIUser_upload_quota &upload_quota);
    bool is_upload_quota_Set() const;
    bool is_upload_quota_Valid() const;

    QString getUri() const;
    void setUri(const QString &uri);
    bool is_uri_Set() const;
    bool is_uri_Valid() const;

    QList<OAIUser_websites_inner> getWebsites() const;
    void setWebsites(const QList<OAIUser_websites_inner> &websites);
    bool is_websites_Set() const;
    bool is_websites_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account;
    bool m_account_isSet;
    bool m_account_isValid;

    QString m_bio;
    bool m_bio_isSet;
    bool m_bio_isValid;

    QList<QString> m_content_filter;
    bool m_content_filter_isSet;
    bool m_content_filter_isValid;

    QString m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QString m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    OAIUser_metadata m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIPicture m_pictures;
    bool m_pictures_isSet;
    bool m_pictures_isValid;

    OAIUser_preferences m_preferences;
    bool m_preferences_isSet;
    bool m_preferences_isValid;

    QString m_resource_key;
    bool m_resource_key_isSet;
    bool m_resource_key_isValid;

    OAIUser_upload_quota m_upload_quota;
    bool m_upload_quota_isSet;
    bool m_upload_quota_isValid;

    QString m_uri;
    bool m_uri_isSet;
    bool m_uri_isValid;

    QList<OAIUser_websites_inner> m_websites;
    bool m_websites_isSet;
    bool m_websites_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUser)

#endif // OAIUser_H
