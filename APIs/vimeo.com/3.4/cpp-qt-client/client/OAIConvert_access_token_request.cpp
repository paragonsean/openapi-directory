/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConvert_access_token_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConvert_access_token_request::OAIConvert_access_token_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConvert_access_token_request::OAIConvert_access_token_request() {
    this->initializeModel();
}

OAIConvert_access_token_request::~OAIConvert_access_token_request() {}

void OAIConvert_access_token_request::initializeModel() {

    m_grant_type_isSet = false;
    m_grant_type_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_token_secret_isSet = false;
    m_token_secret_isValid = false;
}

void OAIConvert_access_token_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConvert_access_token_request::fromJsonObject(QJsonObject json) {

    m_grant_type_isValid = ::OpenAPI::fromJsonValue(m_grant_type, json[QString("grant_type")]);
    m_grant_type_isSet = !json[QString("grant_type")].isNull() && m_grant_type_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_token_secret_isValid = ::OpenAPI::fromJsonValue(m_token_secret, json[QString("token_secret")]);
    m_token_secret_isSet = !json[QString("token_secret")].isNull() && m_token_secret_isValid;
}

QString OAIConvert_access_token_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConvert_access_token_request::asJsonObject() const {
    QJsonObject obj;
    if (m_grant_type_isSet) {
        obj.insert(QString("grant_type"), ::OpenAPI::toJsonValue(m_grant_type));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_token_secret_isSet) {
        obj.insert(QString("token_secret"), ::OpenAPI::toJsonValue(m_token_secret));
    }
    return obj;
}

QString OAIConvert_access_token_request::getGrantType() const {
    return m_grant_type;
}
void OAIConvert_access_token_request::setGrantType(const QString &grant_type) {
    m_grant_type = grant_type;
    m_grant_type_isSet = true;
}

bool OAIConvert_access_token_request::is_grant_type_Set() const{
    return m_grant_type_isSet;
}

bool OAIConvert_access_token_request::is_grant_type_Valid() const{
    return m_grant_type_isValid;
}

QString OAIConvert_access_token_request::getToken() const {
    return m_token;
}
void OAIConvert_access_token_request::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIConvert_access_token_request::is_token_Set() const{
    return m_token_isSet;
}

bool OAIConvert_access_token_request::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIConvert_access_token_request::getTokenSecret() const {
    return m_token_secret;
}
void OAIConvert_access_token_request::setTokenSecret(const QString &token_secret) {
    m_token_secret = token_secret;
    m_token_secret_isSet = true;
}

bool OAIConvert_access_token_request::is_token_secret_Set() const{
    return m_token_secret_isSet;
}

bool OAIConvert_access_token_request::is_token_secret_Valid() const{
    return m_token_secret_isValid;
}

bool OAIConvert_access_token_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConvert_access_token_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_grant_type_isValid && m_token_isValid && m_token_secret_isValid && true;
}

} // namespace OpenAPI
