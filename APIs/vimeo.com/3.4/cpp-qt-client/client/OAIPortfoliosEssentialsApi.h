/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPortfoliosEssentialsApi_H
#define OAI_OAIPortfoliosEssentialsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPortfolio.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPortfoliosEssentialsApi : public QObject {
    Q_OBJECT

public:
    OAIPortfoliosEssentialsApi(const int timeOut = 0);
    ~OAIPortfoliosEssentialsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  portfolio_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void getPortfolio(const double &portfolio_id, const double &user_id);

    /**
    * @param[in]  portfolio_id double [required]
    */
    virtual void getPortfolioAlt1(const double &portfolio_id);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getPortfolios(const double &user_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getPortfoliosAlt1(const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getPortfolioCallback(OAIHttpRequestWorker *worker);
    void getPortfolioAlt1Callback(OAIHttpRequestWorker *worker);
    void getPortfoliosCallback(OAIHttpRequestWorker *worker);
    void getPortfoliosAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getPortfolioSignal(OAIPortfolio summary);
    void getPortfolioAlt1Signal(OAIPortfolio summary);
    void getPortfoliosSignal(QList<OAIPortfolio> summary);
    void getPortfoliosAlt1Signal(QList<OAIPortfolio> summary);


    void getPortfolioSignalFull(OAIHttpRequestWorker *worker, OAIPortfolio summary);
    void getPortfolioAlt1SignalFull(OAIHttpRequestWorker *worker, OAIPortfolio summary);
    void getPortfoliosSignalFull(OAIHttpRequestWorker *worker, QList<OAIPortfolio> summary);
    void getPortfoliosAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIPortfolio> summary);

    Q_DECL_DEPRECATED_X("Use getPortfolioSignalError() instead")
    void getPortfolioSignalE(OAIPortfolio summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfolioSignalError(OAIPortfolio summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfolioAlt1SignalError() instead")
    void getPortfolioAlt1SignalE(OAIPortfolio summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfolioAlt1SignalError(OAIPortfolio summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfoliosSignalError() instead")
    void getPortfoliosSignalE(QList<OAIPortfolio> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfoliosSignalError(QList<OAIPortfolio> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfoliosAlt1SignalError() instead")
    void getPortfoliosAlt1SignalE(QList<OAIPortfolio> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfoliosAlt1SignalError(QList<OAIPortfolio> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getPortfolioSignalErrorFull() instead")
    void getPortfolioSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfolioSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfolioAlt1SignalErrorFull() instead")
    void getPortfolioAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfolioAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfoliosSignalErrorFull() instead")
    void getPortfoliosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfoliosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPortfoliosAlt1SignalErrorFull() instead")
    void getPortfoliosAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPortfoliosAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
