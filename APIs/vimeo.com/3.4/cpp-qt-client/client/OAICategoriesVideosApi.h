/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICategoriesVideosApi_H
#define OAI_OAICategoriesVideosApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICategory.h"
#include "OAILegacy_error.h"
#include "OAISuggest_video_category_request.h"
#include "OAIVideo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICategoriesVideosApi : public QObject {
    Q_OBJECT

public:
    OAICategoriesVideosApi(const int timeOut = 0);
    ~OAICategoriesVideosApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  category QString [required]
    * @param[in]  video_id double [required]
    */
    virtual void checkCategoryForVideo(const QString &category, const double &video_id);

    /**
    * @param[in]  category QString [required]
    * @param[in]  direction QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  filter_embeddable bool [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getCategoryVideos(const QString &category, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &filter_embeddable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  video_id double [required]
    */
    virtual void getVideoCategories(const double &video_id);

    /**
    * @param[in]  video_id double [required]
    * @param[in]  oai_suggest_video_category_request OAISuggest_video_category_request [required]
    */
    virtual void suggestVideoCategory(const double &video_id, const OAISuggest_video_category_request &oai_suggest_video_category_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkCategoryForVideoCallback(OAIHttpRequestWorker *worker);
    void getCategoryVideosCallback(OAIHttpRequestWorker *worker);
    void getVideoCategoriesCallback(OAIHttpRequestWorker *worker);
    void suggestVideoCategoryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkCategoryForVideoSignal(OAIVideo summary);
    void getCategoryVideosSignal(QList<OAIVideo> summary);
    void getVideoCategoriesSignal(QList<OAICategory> summary);
    void suggestVideoCategorySignal(OAICategory summary);


    void checkCategoryForVideoSignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);
    void getCategoryVideosSignalFull(OAIHttpRequestWorker *worker, QList<OAIVideo> summary);
    void getVideoCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAICategory> summary);
    void suggestVideoCategorySignalFull(OAIHttpRequestWorker *worker, OAICategory summary);

    Q_DECL_DEPRECATED_X("Use checkCategoryForVideoSignalError() instead")
    void checkCategoryForVideoSignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkCategoryForVideoSignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategoryVideosSignalError() instead")
    void getCategoryVideosSignalE(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoryVideosSignalError(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCategoriesSignalError() instead")
    void getVideoCategoriesSignalE(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCategoriesSignalError(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suggestVideoCategorySignalError() instead")
    void suggestVideoCategorySignalE(OAICategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suggestVideoCategorySignalError(OAICategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkCategoryForVideoSignalErrorFull() instead")
    void checkCategoryForVideoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkCategoryForVideoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCategoryVideosSignalErrorFull() instead")
    void getCategoryVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCategoryVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCategoriesSignalErrorFull() instead")
    void getVideoCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suggestVideoCategorySignalErrorFull() instead")
    void suggestVideoCategorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suggestVideoCategorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
