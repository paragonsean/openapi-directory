/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAlbumsAlbumVideosApi_H
#define OAI_OAIAlbumsAlbumVideosApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlbum.h"
#include "OAIError.h"
#include "OAILegacy_error.h"
#include "OAIReplace_videos_in_album_alt1_request.h"
#include "OAISet_video_as_album_thumbnail_alt1_request.h"
#include "OAIVideo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAlbumsAlbumVideosApi : public QObject {
    Q_OBJECT

public:
    OAIAlbumsAlbumVideosApi(const int timeOut = 0);
    ~OAIAlbumsAlbumVideosApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void addVideoToAlbum(const double &album_id, const double &user_id, const double &video_id);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void addVideoToAlbumAlt1(const double &album_id, const double &video_id);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  password QString [optional]
    */
    virtual void getAlbumVideo(const double &album_id, const double &user_id, const double &video_id, const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  album_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  password QString [optional]
    */
    virtual void getAlbumVideoAlt1(const double &album_id, const double &video_id, const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  album_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  containing_uri QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  filter_embeddable bool [optional]
    * @param[in]  page double [optional]
    * @param[in]  password QString [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  weak_search bool [optional]
    */
    virtual void getAlbumVideos(const double &album_id, const double &user_id, const ::OpenAPI::OptionalParam<QString> &containing_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &filter_embeddable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &weak_search = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  album_id double [required]
    * @param[in]  containing_uri QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  filter_embeddable bool [optional]
    * @param[in]  page double [optional]
    * @param[in]  password QString [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  weak_search bool [optional]
    */
    virtual void getAlbumVideosAlt1(const double &album_id, const ::OpenAPI::OptionalParam<QString> &containing_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &filter_embeddable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &weak_search = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  album_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void removeVideoFromAlbum(const double &album_id, const double &user_id, const double &video_id);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void removeVideoFromAlbumAlt1(const double &album_id, const double &video_id);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  oai_replace_videos_in_album_alt1_request OAIReplace_videos_in_album_alt1_request [required]
    */
    virtual void replaceVideosInAlbum(const double &album_id, const double &user_id, const OAIReplace_videos_in_album_alt1_request &oai_replace_videos_in_album_alt1_request);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  oai_replace_videos_in_album_alt1_request OAIReplace_videos_in_album_alt1_request [required]
    */
    virtual void replaceVideosInAlbumAlt1(const double &album_id, const OAIReplace_videos_in_album_alt1_request &oai_replace_videos_in_album_alt1_request);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  oai_set_video_as_album_thumbnail_alt1_request OAISet_video_as_album_thumbnail_alt1_request [optional]
    */
    virtual void setVideoAsAlbumThumbnail(const double &album_id, const double &user_id, const double &video_id, const ::OpenAPI::OptionalParam<OAISet_video_as_album_thumbnail_alt1_request> &oai_set_video_as_album_thumbnail_alt1_request = ::OpenAPI::OptionalParam<OAISet_video_as_album_thumbnail_alt1_request>());

    /**
    * @param[in]  album_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  oai_set_video_as_album_thumbnail_alt1_request OAISet_video_as_album_thumbnail_alt1_request [optional]
    */
    virtual void setVideoAsAlbumThumbnailAlt1(const double &album_id, const double &video_id, const ::OpenAPI::OptionalParam<OAISet_video_as_album_thumbnail_alt1_request> &oai_set_video_as_album_thumbnail_alt1_request = ::OpenAPI::OptionalParam<OAISet_video_as_album_thumbnail_alt1_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addVideoToAlbumCallback(OAIHttpRequestWorker *worker);
    void addVideoToAlbumAlt1Callback(OAIHttpRequestWorker *worker);
    void getAlbumVideoCallback(OAIHttpRequestWorker *worker);
    void getAlbumVideoAlt1Callback(OAIHttpRequestWorker *worker);
    void getAlbumVideosCallback(OAIHttpRequestWorker *worker);
    void getAlbumVideosAlt1Callback(OAIHttpRequestWorker *worker);
    void removeVideoFromAlbumCallback(OAIHttpRequestWorker *worker);
    void removeVideoFromAlbumAlt1Callback(OAIHttpRequestWorker *worker);
    void replaceVideosInAlbumCallback(OAIHttpRequestWorker *worker);
    void replaceVideosInAlbumAlt1Callback(OAIHttpRequestWorker *worker);
    void setVideoAsAlbumThumbnailCallback(OAIHttpRequestWorker *worker);
    void setVideoAsAlbumThumbnailAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addVideoToAlbumSignal();
    void addVideoToAlbumAlt1Signal();
    void getAlbumVideoSignal(OAIVideo summary);
    void getAlbumVideoAlt1Signal(OAIVideo summary);
    void getAlbumVideosSignal(QList<OAIVideo> summary);
    void getAlbumVideosAlt1Signal(QList<OAIVideo> summary);
    void removeVideoFromAlbumSignal();
    void removeVideoFromAlbumAlt1Signal();
    void replaceVideosInAlbumSignal();
    void replaceVideosInAlbumAlt1Signal();
    void setVideoAsAlbumThumbnailSignal(OAIAlbum summary);
    void setVideoAsAlbumThumbnailAlt1Signal(OAIAlbum summary);


    void addVideoToAlbumSignalFull(OAIHttpRequestWorker *worker);
    void addVideoToAlbumAlt1SignalFull(OAIHttpRequestWorker *worker);
    void getAlbumVideoSignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);
    void getAlbumVideoAlt1SignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);
    void getAlbumVideosSignalFull(OAIHttpRequestWorker *worker, QList<OAIVideo> summary);
    void getAlbumVideosAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIVideo> summary);
    void removeVideoFromAlbumSignalFull(OAIHttpRequestWorker *worker);
    void removeVideoFromAlbumAlt1SignalFull(OAIHttpRequestWorker *worker);
    void replaceVideosInAlbumSignalFull(OAIHttpRequestWorker *worker);
    void replaceVideosInAlbumAlt1SignalFull(OAIHttpRequestWorker *worker);
    void setVideoAsAlbumThumbnailSignalFull(OAIHttpRequestWorker *worker, OAIAlbum summary);
    void setVideoAsAlbumThumbnailAlt1SignalFull(OAIHttpRequestWorker *worker, OAIAlbum summary);

    Q_DECL_DEPRECATED_X("Use addVideoToAlbumSignalError() instead")
    void addVideoToAlbumSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToAlbumSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideoToAlbumAlt1SignalError() instead")
    void addVideoToAlbumAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToAlbumAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumVideoSignalError() instead")
    void getAlbumVideoSignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumVideoSignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumVideoAlt1SignalError() instead")
    void getAlbumVideoAlt1SignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumVideoAlt1SignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumVideosSignalError() instead")
    void getAlbumVideosSignalE(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumVideosSignalError(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumVideosAlt1SignalError() instead")
    void getAlbumVideosAlt1SignalE(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumVideosAlt1SignalError(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVideoFromAlbumSignalError() instead")
    void removeVideoFromAlbumSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeVideoFromAlbumSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVideoFromAlbumAlt1SignalError() instead")
    void removeVideoFromAlbumAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeVideoFromAlbumAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceVideosInAlbumSignalError() instead")
    void replaceVideosInAlbumSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replaceVideosInAlbumSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceVideosInAlbumAlt1SignalError() instead")
    void replaceVideosInAlbumAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replaceVideosInAlbumAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setVideoAsAlbumThumbnailSignalError() instead")
    void setVideoAsAlbumThumbnailSignalE(OAIAlbum summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setVideoAsAlbumThumbnailSignalError(OAIAlbum summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setVideoAsAlbumThumbnailAlt1SignalError() instead")
    void setVideoAsAlbumThumbnailAlt1SignalE(OAIAlbum summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setVideoAsAlbumThumbnailAlt1SignalError(OAIAlbum summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addVideoToAlbumSignalErrorFull() instead")
    void addVideoToAlbumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToAlbumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideoToAlbumAlt1SignalErrorFull() instead")
    void addVideoToAlbumAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToAlbumAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumVideoSignalErrorFull() instead")
    void getAlbumVideoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumVideoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumVideoAlt1SignalErrorFull() instead")
    void getAlbumVideoAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumVideoAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumVideosSignalErrorFull() instead")
    void getAlbumVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumVideosAlt1SignalErrorFull() instead")
    void getAlbumVideosAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumVideosAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVideoFromAlbumSignalErrorFull() instead")
    void removeVideoFromAlbumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeVideoFromAlbumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVideoFromAlbumAlt1SignalErrorFull() instead")
    void removeVideoFromAlbumAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeVideoFromAlbumAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceVideosInAlbumSignalErrorFull() instead")
    void replaceVideosInAlbumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceVideosInAlbumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceVideosInAlbumAlt1SignalErrorFull() instead")
    void replaceVideosInAlbumAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceVideosInAlbumAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setVideoAsAlbumThumbnailSignalErrorFull() instead")
    void setVideoAsAlbumThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setVideoAsAlbumThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setVideoAsAlbumThumbnailAlt1SignalErrorFull() instead")
    void setVideoAsAlbumThumbnailAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setVideoAsAlbumThumbnailAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
