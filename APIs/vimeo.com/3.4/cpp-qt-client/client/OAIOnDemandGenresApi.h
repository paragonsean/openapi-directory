/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOnDemandGenresApi_H
#define OAI_OAIOnDemandGenresApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILegacy_error.h"
#include "OAIOn_demand_genre.h"
#include "OAIOn_demand_page.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOnDemandGenresApi : public QObject {
    Q_OBJECT

public:
    OAIOnDemandGenresApi(const int timeOut = 0);
    ~OAIOnDemandGenresApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  genre_id QString [required]
    * @param[in]  ondemand_id double [required]
    */
    virtual void addVodGenre(const QString &genre_id, const double &ondemand_id);

    /**
    * @param[in]  genre_id QString [required]
    * @param[in]  ondemand_id double [required]
    */
    virtual void deleteVodGenre(const QString &genre_id, const double &ondemand_id);

    /**
    * @param[in]  genre_id QString [required]
    * @param[in]  ondemand_id double [required]
    */
    virtual void getGenreVod(const QString &genre_id, const double &ondemand_id);

    /**
    * @param[in]  genre_id QString [required]
    * @param[in]  direction QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getGenreVods(const QString &genre_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  genre_id QString [required]
    */
    virtual void getVodGenre(const QString &genre_id);

    /**
    * @param[in]  genre_id QString [required]
    * @param[in]  ondemand_id double [required]
    */
    virtual void getVodGenreByOndemandId(const QString &genre_id, const double &ondemand_id);


    virtual void getVodGenres();

    /**
    * @param[in]  ondemand_id double [required]
    */
    virtual void getVodGenresByOndemandId(const double &ondemand_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addVodGenreCallback(OAIHttpRequestWorker *worker);
    void deleteVodGenreCallback(OAIHttpRequestWorker *worker);
    void getGenreVodCallback(OAIHttpRequestWorker *worker);
    void getGenreVodsCallback(OAIHttpRequestWorker *worker);
    void getVodGenreCallback(OAIHttpRequestWorker *worker);
    void getVodGenreByOndemandIdCallback(OAIHttpRequestWorker *worker);
    void getVodGenresCallback(OAIHttpRequestWorker *worker);
    void getVodGenresByOndemandIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addVodGenreSignal(OAIOn_demand_genre summary);
    void deleteVodGenreSignal();
    void getGenreVodSignal(OAIOn_demand_page summary);
    void getGenreVodsSignal(QList<OAIOn_demand_page> summary);
    void getVodGenreSignal(OAIOn_demand_genre summary);
    void getVodGenreByOndemandIdSignal(OAIOn_demand_genre summary);
    void getVodGenresSignal(QList<OAIOn_demand_genre> summary);
    void getVodGenresByOndemandIdSignal(QList<OAIOn_demand_genre> summary);


    void addVodGenreSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_genre summary);
    void deleteVodGenreSignalFull(OAIHttpRequestWorker *worker);
    void getGenreVodSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_page summary);
    void getGenreVodsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOn_demand_page> summary);
    void getVodGenreSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_genre summary);
    void getVodGenreByOndemandIdSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_genre summary);
    void getVodGenresSignalFull(OAIHttpRequestWorker *worker, QList<OAIOn_demand_genre> summary);
    void getVodGenresByOndemandIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIOn_demand_genre> summary);

    Q_DECL_DEPRECATED_X("Use addVodGenreSignalError() instead")
    void addVodGenreSignalE(OAIOn_demand_genre summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addVodGenreSignalError(OAIOn_demand_genre summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVodGenreSignalError() instead")
    void deleteVodGenreSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVodGenreSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenreVodSignalError() instead")
    void getGenreVodSignalE(OAIOn_demand_page summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenreVodSignalError(OAIOn_demand_page summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenreVodsSignalError() instead")
    void getGenreVodsSignalE(QList<OAIOn_demand_page> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenreVodsSignalError(QList<OAIOn_demand_page> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodGenreSignalError() instead")
    void getVodGenreSignalE(OAIOn_demand_genre summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodGenreSignalError(OAIOn_demand_genre summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodGenreByOndemandIdSignalError() instead")
    void getVodGenreByOndemandIdSignalE(OAIOn_demand_genre summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodGenreByOndemandIdSignalError(OAIOn_demand_genre summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodGenresSignalError() instead")
    void getVodGenresSignalE(QList<OAIOn_demand_genre> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodGenresSignalError(QList<OAIOn_demand_genre> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodGenresByOndemandIdSignalError() instead")
    void getVodGenresByOndemandIdSignalE(QList<OAIOn_demand_genre> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodGenresByOndemandIdSignalError(QList<OAIOn_demand_genre> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addVodGenreSignalErrorFull() instead")
    void addVodGenreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVodGenreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVodGenreSignalErrorFull() instead")
    void deleteVodGenreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVodGenreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenreVodSignalErrorFull() instead")
    void getGenreVodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenreVodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGenreVodsSignalErrorFull() instead")
    void getGenreVodsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGenreVodsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodGenreSignalErrorFull() instead")
    void getVodGenreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodGenreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodGenreByOndemandIdSignalErrorFull() instead")
    void getVodGenreByOndemandIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodGenreByOndemandIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodGenresSignalErrorFull() instead")
    void getVodGenresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodGenresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodGenresByOndemandIdSignalErrorFull() instead")
    void getVodGenresByOndemandIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodGenresByOndemandIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
