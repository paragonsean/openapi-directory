/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdit_video_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdit_video_request::OAIEdit_video_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdit_video_request::OAIEdit_video_request() {
    this->initializeModel();
}

OAIEdit_video_request::~OAIEdit_video_request() {}

void OAIEdit_video_request::initializeModel() {

    m_content_rating_isSet = false;
    m_content_rating_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_embed_isSet = false;
    m_embed_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_ratings_isSet = false;
    m_ratings_isValid = false;

    m_review_page_isSet = false;
    m_review_page_isValid = false;

    m_spatial_isSet = false;
    m_spatial_isValid = false;
}

void OAIEdit_video_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdit_video_request::fromJsonObject(QJsonObject json) {

    m_content_rating_isValid = ::OpenAPI::fromJsonValue(m_content_rating, json[QString("content_rating")]);
    m_content_rating_isSet = !json[QString("content_rating")].isNull() && m_content_rating_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_embed_isValid = ::OpenAPI::fromJsonValue(m_embed, json[QString("embed")]);
    m_embed_isSet = !json[QString("embed")].isNull() && m_embed_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;

    m_ratings_isValid = ::OpenAPI::fromJsonValue(m_ratings, json[QString("ratings")]);
    m_ratings_isSet = !json[QString("ratings")].isNull() && m_ratings_isValid;

    m_review_page_isValid = ::OpenAPI::fromJsonValue(m_review_page, json[QString("review_page")]);
    m_review_page_isSet = !json[QString("review_page")].isNull() && m_review_page_isValid;

    m_spatial_isValid = ::OpenAPI::fromJsonValue(m_spatial, json[QString("spatial")]);
    m_spatial_isSet = !json[QString("spatial")].isNull() && m_spatial_isValid;
}

QString OAIEdit_video_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdit_video_request::asJsonObject() const {
    QJsonObject obj;
    if (m_content_rating.size() > 0) {
        obj.insert(QString("content_rating"), ::OpenAPI::toJsonValue(m_content_rating));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_embed.isSet()) {
        obj.insert(QString("embed"), ::OpenAPI::toJsonValue(m_embed));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_privacy.isSet()) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_ratings.isSet()) {
        obj.insert(QString("ratings"), ::OpenAPI::toJsonValue(m_ratings));
    }
    if (m_review_page.isSet()) {
        obj.insert(QString("review_page"), ::OpenAPI::toJsonValue(m_review_page));
    }
    if (m_spatial.isSet()) {
        obj.insert(QString("spatial"), ::OpenAPI::toJsonValue(m_spatial));
    }
    return obj;
}

QList<QString> OAIEdit_video_request::getContentRating() const {
    return m_content_rating;
}
void OAIEdit_video_request::setContentRating(const QList<QString> &content_rating) {
    m_content_rating = content_rating;
    m_content_rating_isSet = true;
}

bool OAIEdit_video_request::is_content_rating_Set() const{
    return m_content_rating_isSet;
}

bool OAIEdit_video_request::is_content_rating_Valid() const{
    return m_content_rating_isValid;
}

QString OAIEdit_video_request::getDescription() const {
    return m_description;
}
void OAIEdit_video_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEdit_video_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEdit_video_request::is_description_Valid() const{
    return m_description_isValid;
}

OAIUpload_video_alt1_request_embed OAIEdit_video_request::getEmbed() const {
    return m_embed;
}
void OAIEdit_video_request::setEmbed(const OAIUpload_video_alt1_request_embed &embed) {
    m_embed = embed;
    m_embed_isSet = true;
}

bool OAIEdit_video_request::is_embed_Set() const{
    return m_embed_isSet;
}

bool OAIEdit_video_request::is_embed_Valid() const{
    return m_embed_isValid;
}

QString OAIEdit_video_request::getLicense() const {
    return m_license;
}
void OAIEdit_video_request::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIEdit_video_request::is_license_Set() const{
    return m_license_isSet;
}

bool OAIEdit_video_request::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIEdit_video_request::getLocale() const {
    return m_locale;
}
void OAIEdit_video_request::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIEdit_video_request::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIEdit_video_request::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIEdit_video_request::getName() const {
    return m_name;
}
void OAIEdit_video_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEdit_video_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEdit_video_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEdit_video_request::getPassword() const {
    return m_password;
}
void OAIEdit_video_request::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIEdit_video_request::is_password_Set() const{
    return m_password_isSet;
}

bool OAIEdit_video_request::is_password_Valid() const{
    return m_password_isValid;
}

OAIEdit_video_request_privacy OAIEdit_video_request::getPrivacy() const {
    return m_privacy;
}
void OAIEdit_video_request::setPrivacy(const OAIEdit_video_request_privacy &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAIEdit_video_request::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAIEdit_video_request::is_privacy_Valid() const{
    return m_privacy_isValid;
}

OAIUpload_video_alt1_request_ratings OAIEdit_video_request::getRatings() const {
    return m_ratings;
}
void OAIEdit_video_request::setRatings(const OAIUpload_video_alt1_request_ratings &ratings) {
    m_ratings = ratings;
    m_ratings_isSet = true;
}

bool OAIEdit_video_request::is_ratings_Set() const{
    return m_ratings_isSet;
}

bool OAIEdit_video_request::is_ratings_Valid() const{
    return m_ratings_isValid;
}

OAIUpload_video_alt1_request_review_page OAIEdit_video_request::getReviewPage() const {
    return m_review_page;
}
void OAIEdit_video_request::setReviewPage(const OAIUpload_video_alt1_request_review_page &review_page) {
    m_review_page = review_page;
    m_review_page_isSet = true;
}

bool OAIEdit_video_request::is_review_page_Set() const{
    return m_review_page_isSet;
}

bool OAIEdit_video_request::is_review_page_Valid() const{
    return m_review_page_isValid;
}

OAIUpload_video_alt1_request_spatial OAIEdit_video_request::getSpatial() const {
    return m_spatial;
}
void OAIEdit_video_request::setSpatial(const OAIUpload_video_alt1_request_spatial &spatial) {
    m_spatial = spatial;
    m_spatial_isSet = true;
}

bool OAIEdit_video_request::is_spatial_Set() const{
    return m_spatial_isSet;
}

bool OAIEdit_video_request::is_spatial_Valid() const{
    return m_spatial_isValid;
}

bool OAIEdit_video_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_rating.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_page.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spatial.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdit_video_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
