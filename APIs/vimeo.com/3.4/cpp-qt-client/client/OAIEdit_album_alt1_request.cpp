/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdit_album_alt1_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdit_album_alt1_request::OAIEdit_album_alt1_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdit_album_alt1_request::OAIEdit_album_alt1_request() {
    this->initializeModel();
}

OAIEdit_album_alt1_request::~OAIEdit_album_alt1_request() {}

void OAIEdit_album_alt1_request::initializeModel() {

    m_brand_color_isSet = false;
    m_brand_color_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_hide_nav_isSet = false;
    m_hide_nav_isValid = false;

    m_layout_isSet = false;
    m_layout_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_review_mode_isSet = false;
    m_review_mode_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_theme_isSet = false;
    m_theme_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_use_custom_domain_isSet = false;
    m_use_custom_domain_isValid = false;
}

void OAIEdit_album_alt1_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdit_album_alt1_request::fromJsonObject(QJsonObject json) {

    m_brand_color_isValid = ::OpenAPI::fromJsonValue(m_brand_color, json[QString("brand_color")]);
    m_brand_color_isSet = !json[QString("brand_color")].isNull() && m_brand_color_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_hide_nav_isValid = ::OpenAPI::fromJsonValue(m_hide_nav, json[QString("hide_nav")]);
    m_hide_nav_isSet = !json[QString("hide_nav")].isNull() && m_hide_nav_isValid;

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("layout")]);
    m_layout_isSet = !json[QString("layout")].isNull() && m_layout_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;

    m_review_mode_isValid = ::OpenAPI::fromJsonValue(m_review_mode, json[QString("review_mode")]);
    m_review_mode_isSet = !json[QString("review_mode")].isNull() && m_review_mode_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_theme_isValid = ::OpenAPI::fromJsonValue(m_theme, json[QString("theme")]);
    m_theme_isSet = !json[QString("theme")].isNull() && m_theme_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_use_custom_domain_isValid = ::OpenAPI::fromJsonValue(m_use_custom_domain, json[QString("use_custom_domain")]);
    m_use_custom_domain_isSet = !json[QString("use_custom_domain")].isNull() && m_use_custom_domain_isValid;
}

QString OAIEdit_album_alt1_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdit_album_alt1_request::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_color_isSet) {
        obj.insert(QString("brand_color"), ::OpenAPI::toJsonValue(m_brand_color));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_hide_nav_isSet) {
        obj.insert(QString("hide_nav"), ::OpenAPI::toJsonValue(m_hide_nav));
    }
    if (m_layout_isSet) {
        obj.insert(QString("layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_privacy_isSet) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_review_mode_isSet) {
        obj.insert(QString("review_mode"), ::OpenAPI::toJsonValue(m_review_mode));
    }
    if (m_sort_isSet) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_theme_isSet) {
        obj.insert(QString("theme"), ::OpenAPI::toJsonValue(m_theme));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_use_custom_domain_isSet) {
        obj.insert(QString("use_custom_domain"), ::OpenAPI::toJsonValue(m_use_custom_domain));
    }
    return obj;
}

QString OAIEdit_album_alt1_request::getBrandColor() const {
    return m_brand_color;
}
void OAIEdit_album_alt1_request::setBrandColor(const QString &brand_color) {
    m_brand_color = brand_color;
    m_brand_color_isSet = true;
}

bool OAIEdit_album_alt1_request::is_brand_color_Set() const{
    return m_brand_color_isSet;
}

bool OAIEdit_album_alt1_request::is_brand_color_Valid() const{
    return m_brand_color_isValid;
}

QString OAIEdit_album_alt1_request::getDescription() const {
    return m_description;
}
void OAIEdit_album_alt1_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEdit_album_alt1_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEdit_album_alt1_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEdit_album_alt1_request::getDomain() const {
    return m_domain;
}
void OAIEdit_album_alt1_request::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIEdit_album_alt1_request::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIEdit_album_alt1_request::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAIEdit_album_alt1_request::isHideNav() const {
    return m_hide_nav;
}
void OAIEdit_album_alt1_request::setHideNav(const bool &hide_nav) {
    m_hide_nav = hide_nav;
    m_hide_nav_isSet = true;
}

bool OAIEdit_album_alt1_request::is_hide_nav_Set() const{
    return m_hide_nav_isSet;
}

bool OAIEdit_album_alt1_request::is_hide_nav_Valid() const{
    return m_hide_nav_isValid;
}

QString OAIEdit_album_alt1_request::getLayout() const {
    return m_layout;
}
void OAIEdit_album_alt1_request::setLayout(const QString &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAIEdit_album_alt1_request::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAIEdit_album_alt1_request::is_layout_Valid() const{
    return m_layout_isValid;
}

QString OAIEdit_album_alt1_request::getName() const {
    return m_name;
}
void OAIEdit_album_alt1_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEdit_album_alt1_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEdit_album_alt1_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEdit_album_alt1_request::getPassword() const {
    return m_password;
}
void OAIEdit_album_alt1_request::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIEdit_album_alt1_request::is_password_Set() const{
    return m_password_isSet;
}

bool OAIEdit_album_alt1_request::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIEdit_album_alt1_request::getPrivacy() const {
    return m_privacy;
}
void OAIEdit_album_alt1_request::setPrivacy(const QString &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAIEdit_album_alt1_request::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAIEdit_album_alt1_request::is_privacy_Valid() const{
    return m_privacy_isValid;
}

bool OAIEdit_album_alt1_request::isReviewMode() const {
    return m_review_mode;
}
void OAIEdit_album_alt1_request::setReviewMode(const bool &review_mode) {
    m_review_mode = review_mode;
    m_review_mode_isSet = true;
}

bool OAIEdit_album_alt1_request::is_review_mode_Set() const{
    return m_review_mode_isSet;
}

bool OAIEdit_album_alt1_request::is_review_mode_Valid() const{
    return m_review_mode_isValid;
}

QString OAIEdit_album_alt1_request::getSort() const {
    return m_sort;
}
void OAIEdit_album_alt1_request::setSort(const QString &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIEdit_album_alt1_request::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIEdit_album_alt1_request::is_sort_Valid() const{
    return m_sort_isValid;
}

QString OAIEdit_album_alt1_request::getTheme() const {
    return m_theme;
}
void OAIEdit_album_alt1_request::setTheme(const QString &theme) {
    m_theme = theme;
    m_theme_isSet = true;
}

bool OAIEdit_album_alt1_request::is_theme_Set() const{
    return m_theme_isSet;
}

bool OAIEdit_album_alt1_request::is_theme_Valid() const{
    return m_theme_isValid;
}

QString OAIEdit_album_alt1_request::getUrl() const {
    return m_url;
}
void OAIEdit_album_alt1_request::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEdit_album_alt1_request::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEdit_album_alt1_request::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIEdit_album_alt1_request::isUseCustomDomain() const {
    return m_use_custom_domain;
}
void OAIEdit_album_alt1_request::setUseCustomDomain(const bool &use_custom_domain) {
    m_use_custom_domain = use_custom_domain;
    m_use_custom_domain_isSet = true;
}

bool OAIEdit_album_alt1_request::is_use_custom_domain_Set() const{
    return m_use_custom_domain_isSet;
}

bool OAIEdit_album_alt1_request::is_use_custom_domain_Valid() const{
    return m_use_custom_domain_isValid;
}

bool OAIEdit_album_alt1_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_nav_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_custom_domain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdit_album_alt1_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
