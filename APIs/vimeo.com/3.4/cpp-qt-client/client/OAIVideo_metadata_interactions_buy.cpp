/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_metadata_interactions_buy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_metadata_interactions_buy::OAIVideo_metadata_interactions_buy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_metadata_interactions_buy::OAIVideo_metadata_interactions_buy() {
    this->initializeModel();
}

OAIVideo_metadata_interactions_buy::~OAIVideo_metadata_interactions_buy() {}

void OAIVideo_metadata_interactions_buy::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_display_price_isSet = false;
    m_display_price_isValid = false;

    m_download_isSet = false;
    m_download_isValid = false;

    m_drm_isSet = false;
    m_drm_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_purchase_time_isSet = false;
    m_purchase_time_isValid = false;

    m_stream_isSet = false;
    m_stream_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIVideo_metadata_interactions_buy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_metadata_interactions_buy::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_display_price_isValid = ::OpenAPI::fromJsonValue(m_display_price, json[QString("display_price")]);
    m_display_price_isSet = !json[QString("display_price")].isNull() && m_display_price_isValid;

    m_download_isValid = ::OpenAPI::fromJsonValue(m_download, json[QString("download")]);
    m_download_isSet = !json[QString("download")].isNull() && m_download_isValid;

    m_drm_isValid = ::OpenAPI::fromJsonValue(m_drm, json[QString("drm")]);
    m_drm_isSet = !json[QString("drm")].isNull() && m_drm_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_purchase_time_isValid = ::OpenAPI::fromJsonValue(m_purchase_time, json[QString("purchase_time")]);
    m_purchase_time_isSet = !json[QString("purchase_time")].isNull() && m_purchase_time_isValid;

    m_stream_isValid = ::OpenAPI::fromJsonValue(m_stream, json[QString("stream")]);
    m_stream_isSet = !json[QString("stream")].isNull() && m_stream_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIVideo_metadata_interactions_buy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_metadata_interactions_buy::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_display_price_isSet) {
        obj.insert(QString("display_price"), ::OpenAPI::toJsonValue(m_display_price));
    }
    if (m_download_isSet) {
        obj.insert(QString("download"), ::OpenAPI::toJsonValue(m_download));
    }
    if (m_drm_isSet) {
        obj.insert(QString("drm"), ::OpenAPI::toJsonValue(m_drm));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_purchase_time_isSet) {
        obj.insert(QString("purchase_time"), ::OpenAPI::toJsonValue(m_purchase_time));
    }
    if (m_stream_isSet) {
        obj.insert(QString("stream"), ::OpenAPI::toJsonValue(m_stream));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIVideo_metadata_interactions_buy::getCurrency() const {
    return m_currency;
}
void OAIVideo_metadata_interactions_buy::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIVideo_metadata_interactions_buy::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIVideo_metadata_interactions_buy::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIVideo_metadata_interactions_buy::getDisplayPrice() const {
    return m_display_price;
}
void OAIVideo_metadata_interactions_buy::setDisplayPrice(const QString &display_price) {
    m_display_price = display_price;
    m_display_price_isSet = true;
}

bool OAIVideo_metadata_interactions_buy::is_display_price_Set() const{
    return m_display_price_isSet;
}

bool OAIVideo_metadata_interactions_buy::is_display_price_Valid() const{
    return m_display_price_isValid;
}

QString OAIVideo_metadata_interactions_buy::getDownload() const {
    return m_download;
}
void OAIVideo_metadata_interactions_buy::setDownload(const QString &download) {
    m_download = download;
    m_download_isSet = true;
}

bool OAIVideo_metadata_interactions_buy::is_download_Set() const{
    return m_download_isSet;
}

bool OAIVideo_metadata_interactions_buy::is_download_Valid() const{
    return m_download_isValid;
}

bool OAIVideo_metadata_interactions_buy::isDrm() const {
    return m_drm;
}
void OAIVideo_metadata_interactions_buy::setDrm(const bool &drm) {
    m_drm = drm;
    m_drm_isSet = true;
}

bool OAIVideo_metadata_interactions_buy::is_drm_Set() const{
    return m_drm_isSet;
}

bool OAIVideo_metadata_interactions_buy::is_drm_Valid() const{
    return m_drm_isValid;
}

QString OAIVideo_metadata_interactions_buy::getLink() const {
    return m_link;
}
void OAIVideo_metadata_interactions_buy::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIVideo_metadata_interactions_buy::is_link_Set() const{
    return m_link_isSet;
}

bool OAIVideo_metadata_interactions_buy::is_link_Valid() const{
    return m_link_isValid;
}

double OAIVideo_metadata_interactions_buy::getPrice() const {
    return m_price;
}
void OAIVideo_metadata_interactions_buy::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIVideo_metadata_interactions_buy::is_price_Set() const{
    return m_price_isSet;
}

bool OAIVideo_metadata_interactions_buy::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIVideo_metadata_interactions_buy::getPurchaseTime() const {
    return m_purchase_time;
}
void OAIVideo_metadata_interactions_buy::setPurchaseTime(const QString &purchase_time) {
    m_purchase_time = purchase_time;
    m_purchase_time_isSet = true;
}

bool OAIVideo_metadata_interactions_buy::is_purchase_time_Set() const{
    return m_purchase_time_isSet;
}

bool OAIVideo_metadata_interactions_buy::is_purchase_time_Valid() const{
    return m_purchase_time_isValid;
}

QString OAIVideo_metadata_interactions_buy::getStream() const {
    return m_stream;
}
void OAIVideo_metadata_interactions_buy::setStream(const QString &stream) {
    m_stream = stream;
    m_stream_isSet = true;
}

bool OAIVideo_metadata_interactions_buy::is_stream_Set() const{
    return m_stream_isSet;
}

bool OAIVideo_metadata_interactions_buy::is_stream_Valid() const{
    return m_stream_isValid;
}

QString OAIVideo_metadata_interactions_buy::getUri() const {
    return m_uri;
}
void OAIVideo_metadata_interactions_buy::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIVideo_metadata_interactions_buy::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIVideo_metadata_interactions_buy::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIVideo_metadata_interactions_buy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_metadata_interactions_buy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_isValid && m_display_price_isValid && m_download_isValid && m_drm_isValid && m_link_isValid && m_price_isValid && m_purchase_time_isValid && m_stream_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
