/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpload_attempt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpload_attempt::OAIUpload_attempt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpload_attempt::OAIUpload_attempt() {
    this->initializeModel();
}

OAIUpload_attempt::~OAIUpload_attempt() {}

void OAIUpload_attempt::initializeModel() {

    m_clip_isSet = false;
    m_clip_isValid = false;

    m_complete_uri_isSet = false;
    m_complete_uri_isValid = false;

    m_form_isSet = false;
    m_form_isValid = false;

    m_ticket_id_isSet = false;
    m_ticket_id_isValid = false;

    m_upload_link_isSet = false;
    m_upload_link_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIUpload_attempt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpload_attempt::fromJsonObject(QJsonObject json) {

    m_clip_isValid = ::OpenAPI::fromJsonValue(m_clip, json[QString("clip")]);
    m_clip_isSet = !json[QString("clip")].isNull() && m_clip_isValid;

    m_complete_uri_isValid = ::OpenAPI::fromJsonValue(m_complete_uri, json[QString("complete_uri")]);
    m_complete_uri_isSet = !json[QString("complete_uri")].isNull() && m_complete_uri_isValid;

    m_form_isValid = ::OpenAPI::fromJsonValue(m_form, json[QString("form")]);
    m_form_isSet = !json[QString("form")].isNull() && m_form_isValid;

    m_ticket_id_isValid = ::OpenAPI::fromJsonValue(m_ticket_id, json[QString("ticket_id")]);
    m_ticket_id_isSet = !json[QString("ticket_id")].isNull() && m_ticket_id_isValid;

    m_upload_link_isValid = ::OpenAPI::fromJsonValue(m_upload_link, json[QString("upload_link")]);
    m_upload_link_isSet = !json[QString("upload_link")].isNull() && m_upload_link_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIUpload_attempt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpload_attempt::asJsonObject() const {
    QJsonObject obj;
    if (m_clip.isSet()) {
        obj.insert(QString("clip"), ::OpenAPI::toJsonValue(m_clip));
    }
    if (m_complete_uri_isSet) {
        obj.insert(QString("complete_uri"), ::OpenAPI::toJsonValue(m_complete_uri));
    }
    if (m_form_isSet) {
        obj.insert(QString("form"), ::OpenAPI::toJsonValue(m_form));
    }
    if (m_ticket_id_isSet) {
        obj.insert(QString("ticket_id"), ::OpenAPI::toJsonValue(m_ticket_id));
    }
    if (m_upload_link_isSet) {
        obj.insert(QString("upload_link"), ::OpenAPI::toJsonValue(m_upload_link));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIVideo OAIUpload_attempt::getClip() const {
    return m_clip;
}
void OAIUpload_attempt::setClip(const OAIVideo &clip) {
    m_clip = clip;
    m_clip_isSet = true;
}

bool OAIUpload_attempt::is_clip_Set() const{
    return m_clip_isSet;
}

bool OAIUpload_attempt::is_clip_Valid() const{
    return m_clip_isValid;
}

QString OAIUpload_attempt::getCompleteUri() const {
    return m_complete_uri;
}
void OAIUpload_attempt::setCompleteUri(const QString &complete_uri) {
    m_complete_uri = complete_uri;
    m_complete_uri_isSet = true;
}

bool OAIUpload_attempt::is_complete_uri_Set() const{
    return m_complete_uri_isSet;
}

bool OAIUpload_attempt::is_complete_uri_Valid() const{
    return m_complete_uri_isValid;
}

QString OAIUpload_attempt::getForm() const {
    return m_form;
}
void OAIUpload_attempt::setForm(const QString &form) {
    m_form = form;
    m_form_isSet = true;
}

bool OAIUpload_attempt::is_form_Set() const{
    return m_form_isSet;
}

bool OAIUpload_attempt::is_form_Valid() const{
    return m_form_isValid;
}

QString OAIUpload_attempt::getTicketId() const {
    return m_ticket_id;
}
void OAIUpload_attempt::setTicketId(const QString &ticket_id) {
    m_ticket_id = ticket_id;
    m_ticket_id_isSet = true;
}

bool OAIUpload_attempt::is_ticket_id_Set() const{
    return m_ticket_id_isSet;
}

bool OAIUpload_attempt::is_ticket_id_Valid() const{
    return m_ticket_id_isValid;
}

QString OAIUpload_attempt::getUploadLink() const {
    return m_upload_link;
}
void OAIUpload_attempt::setUploadLink(const QString &upload_link) {
    m_upload_link = upload_link;
    m_upload_link_isSet = true;
}

bool OAIUpload_attempt::is_upload_link_Set() const{
    return m_upload_link_isSet;
}

bool OAIUpload_attempt::is_upload_link_Valid() const{
    return m_upload_link_isValid;
}

QString OAIUpload_attempt::getUri() const {
    return m_uri;
}
void OAIUpload_attempt::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIUpload_attempt::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIUpload_attempt::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIUser OAIUpload_attempt::getUser() const {
    return m_user;
}
void OAIUpload_attempt::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUpload_attempt::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUpload_attempt::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIUpload_attempt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpload_attempt::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ticket_id_isValid && m_upload_link_isValid && m_uri_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
