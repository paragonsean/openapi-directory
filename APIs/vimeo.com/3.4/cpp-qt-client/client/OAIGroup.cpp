/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup::OAIGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup::OAIGroup() {
    this->initializeModel();
}

OAIGroup::~OAIGroup() {}

void OAIGroup::initializeModel() {

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_modified_time_isSet = false;
    m_modified_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pictures_isSet = false;
    m_pictures_isValid = false;

    m_privacy_isSet = false;
    m_privacy_isValid = false;

    m_resource_key_isSet = false;
    m_resource_key_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup::fromJsonObject(QJsonObject json) {

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_modified_time_isValid = ::OpenAPI::fromJsonValue(m_modified_time, json[QString("modified_time")]);
    m_modified_time_isSet = !json[QString("modified_time")].isNull() && m_modified_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pictures_isValid = ::OpenAPI::fromJsonValue(m_pictures, json[QString("pictures")]);
    m_pictures_isSet = !json[QString("pictures")].isNull() && m_pictures_isValid;

    m_privacy_isValid = ::OpenAPI::fromJsonValue(m_privacy, json[QString("privacy")]);
    m_privacy_isSet = !json[QString("privacy")].isNull() && m_privacy_isValid;

    m_resource_key_isValid = ::OpenAPI::fromJsonValue(m_resource_key, json[QString("resource_key")]);
    m_resource_key_isSet = !json[QString("resource_key")].isNull() && m_resource_key_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_modified_time_isSet) {
        obj.insert(QString("modified_time"), ::OpenAPI::toJsonValue(m_modified_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pictures.isSet()) {
        obj.insert(QString("pictures"), ::OpenAPI::toJsonValue(m_pictures));
    }
    if (m_privacy.isSet()) {
        obj.insert(QString("privacy"), ::OpenAPI::toJsonValue(m_privacy));
    }
    if (m_resource_key_isSet) {
        obj.insert(QString("resource_key"), ::OpenAPI::toJsonValue(m_resource_key));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIGroup::getCreatedTime() const {
    return m_created_time;
}
void OAIGroup::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIGroup::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIGroup::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIGroup::getDescription() const {
    return m_description;
}
void OAIGroup::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGroup::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGroup::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGroup::getLink() const {
    return m_link;
}
void OAIGroup::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIGroup::is_link_Set() const{
    return m_link_isSet;
}

bool OAIGroup::is_link_Valid() const{
    return m_link_isValid;
}

OAIGroup_metadata OAIGroup::getMetadata() const {
    return m_metadata;
}
void OAIGroup::setMetadata(const OAIGroup_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGroup::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGroup::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIGroup::getModifiedTime() const {
    return m_modified_time;
}
void OAIGroup::setModifiedTime(const QString &modified_time) {
    m_modified_time = modified_time;
    m_modified_time_isSet = true;
}

bool OAIGroup::is_modified_time_Set() const{
    return m_modified_time_isSet;
}

bool OAIGroup::is_modified_time_Valid() const{
    return m_modified_time_isValid;
}

QString OAIGroup::getName() const {
    return m_name;
}
void OAIGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGroup::is_name_Valid() const{
    return m_name_isValid;
}

OAIPicture OAIGroup::getPictures() const {
    return m_pictures;
}
void OAIGroup::setPictures(const OAIPicture &pictures) {
    m_pictures = pictures;
    m_pictures_isSet = true;
}

bool OAIGroup::is_pictures_Set() const{
    return m_pictures_isSet;
}

bool OAIGroup::is_pictures_Valid() const{
    return m_pictures_isValid;
}

OAIGroup_privacy OAIGroup::getPrivacy() const {
    return m_privacy;
}
void OAIGroup::setPrivacy(const OAIGroup_privacy &privacy) {
    m_privacy = privacy;
    m_privacy_isSet = true;
}

bool OAIGroup::is_privacy_Set() const{
    return m_privacy_isSet;
}

bool OAIGroup::is_privacy_Valid() const{
    return m_privacy_isValid;
}

QString OAIGroup::getResourceKey() const {
    return m_resource_key;
}
void OAIGroup::setResourceKey(const QString &resource_key) {
    m_resource_key = resource_key;
    m_resource_key_isSet = true;
}

bool OAIGroup::is_resource_key_Set() const{
    return m_resource_key_isSet;
}

bool OAIGroup::is_resource_key_Valid() const{
    return m_resource_key_isValid;
}

QString OAIGroup::getUri() const {
    return m_uri;
}
void OAIGroup::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIGroup::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIGroup::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIUser OAIGroup::getUser() const {
    return m_user;
}
void OAIGroup::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIGroup::is_user_Set() const{
    return m_user_isSet;
}

bool OAIGroup::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pictures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_time_isValid && m_description_isValid && m_link_isValid && m_metadata_isValid && m_modified_time_isValid && m_name_isValid && m_pictures_isValid && m_privacy_isValid && m_resource_key_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
