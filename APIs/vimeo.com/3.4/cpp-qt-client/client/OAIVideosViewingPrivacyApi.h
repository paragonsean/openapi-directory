/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVideosViewingPrivacyApi_H
#define OAI_OAIVideosViewingPrivacyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILegacy_error.h"
#include "OAIUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVideosViewingPrivacyApi : public QObject {
    Q_OBJECT

public:
    OAIVideosViewingPrivacyApi(const int timeOut = 0);
    ~OAIVideosViewingPrivacyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void addVideoPrivacyUser(const double &user_id, const double &video_id);

    /**
    * @param[in]  video_id double [required]
    */
    virtual void addVideoPrivacyUsers(const double &video_id);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void addVideoPrivacyUsersAlt1(const double &channel_id, const double &video_id);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void deleteVideoPrivacyUser(const double &user_id, const double &video_id);

    /**
    * @param[in]  video_id double [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getVideoPrivacyUsers(const double &video_id, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getVideoPrivacyUsersAlt1(const double &channel_id, const double &video_id, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addVideoPrivacyUserCallback(OAIHttpRequestWorker *worker);
    void addVideoPrivacyUsersCallback(OAIHttpRequestWorker *worker);
    void addVideoPrivacyUsersAlt1Callback(OAIHttpRequestWorker *worker);
    void deleteVideoPrivacyUserCallback(OAIHttpRequestWorker *worker);
    void getVideoPrivacyUsersCallback(OAIHttpRequestWorker *worker);
    void getVideoPrivacyUsersAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addVideoPrivacyUserSignal(OAIUser summary);
    void addVideoPrivacyUsersSignal(QList<OAIUser> summary);
    void addVideoPrivacyUsersAlt1Signal(QList<OAIUser> summary);
    void deleteVideoPrivacyUserSignal();
    void getVideoPrivacyUsersSignal(QList<OAIUser> summary);
    void getVideoPrivacyUsersAlt1Signal(QList<OAIUser> summary);


    void addVideoPrivacyUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void addVideoPrivacyUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void addVideoPrivacyUsersAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void deleteVideoPrivacyUserSignalFull(OAIHttpRequestWorker *worker);
    void getVideoPrivacyUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void getVideoPrivacyUsersAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);

    Q_DECL_DEPRECATED_X("Use addVideoPrivacyUserSignalError() instead")
    void addVideoPrivacyUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoPrivacyUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideoPrivacyUsersSignalError() instead")
    void addVideoPrivacyUsersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoPrivacyUsersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideoPrivacyUsersAlt1SignalError() instead")
    void addVideoPrivacyUsersAlt1SignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoPrivacyUsersAlt1SignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoPrivacyUserSignalError() instead")
    void deleteVideoPrivacyUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoPrivacyUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoPrivacyUsersSignalError() instead")
    void getVideoPrivacyUsersSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoPrivacyUsersSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoPrivacyUsersAlt1SignalError() instead")
    void getVideoPrivacyUsersAlt1SignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoPrivacyUsersAlt1SignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addVideoPrivacyUserSignalErrorFull() instead")
    void addVideoPrivacyUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoPrivacyUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideoPrivacyUsersSignalErrorFull() instead")
    void addVideoPrivacyUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoPrivacyUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideoPrivacyUsersAlt1SignalErrorFull() instead")
    void addVideoPrivacyUsersAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoPrivacyUsersAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoPrivacyUserSignalErrorFull() instead")
    void deleteVideoPrivacyUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoPrivacyUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoPrivacyUsersSignalErrorFull() instead")
    void getVideoPrivacyUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoPrivacyUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoPrivacyUsersAlt1SignalErrorFull() instead")
    void getVideoPrivacyUsersAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoPrivacyUsersAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
