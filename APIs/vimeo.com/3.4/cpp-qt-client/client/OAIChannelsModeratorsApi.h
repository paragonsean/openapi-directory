/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChannelsModeratorsApi_H
#define OAI_OAIChannelsModeratorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdd_channel_moderators_request.h"
#include "OAIError.h"
#include "OAILegacy_error.h"
#include "OAIRemove_channel_moderators_request.h"
#include "OAIReplace_channel_moderators_request.h"
#include "OAIUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChannelsModeratorsApi : public QObject {
    Q_OBJECT

public:
    OAIChannelsModeratorsApi(const int timeOut = 0);
    ~OAIChannelsModeratorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void addChannelModerator(const double &channel_id, const double &user_id);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  oai_add_channel_moderators_request OAIAdd_channel_moderators_request [required]
    */
    virtual void addChannelModerators(const double &channel_id, const OAIAdd_channel_moderators_request &oai_add_channel_moderators_request);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void getChannelModerator(const double &channel_id, const double &user_id);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getChannelModerators(const double &channel_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void removeChannelModerator(const double &channel_id, const double &user_id);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  oai_remove_channel_moderators_request OAIRemove_channel_moderators_request [required]
    */
    virtual void removeChannelModerators(const double &channel_id, const OAIRemove_channel_moderators_request &oai_remove_channel_moderators_request);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  oai_replace_channel_moderators_request OAIReplace_channel_moderators_request [required]
    */
    virtual void replaceChannelModerators(const double &channel_id, const OAIReplace_channel_moderators_request &oai_replace_channel_moderators_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addChannelModeratorCallback(OAIHttpRequestWorker *worker);
    void addChannelModeratorsCallback(OAIHttpRequestWorker *worker);
    void getChannelModeratorCallback(OAIHttpRequestWorker *worker);
    void getChannelModeratorsCallback(OAIHttpRequestWorker *worker);
    void removeChannelModeratorCallback(OAIHttpRequestWorker *worker);
    void removeChannelModeratorsCallback(OAIHttpRequestWorker *worker);
    void replaceChannelModeratorsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addChannelModeratorSignal();
    void addChannelModeratorsSignal();
    void getChannelModeratorSignal(OAIUser summary);
    void getChannelModeratorsSignal(QList<OAIUser> summary);
    void removeChannelModeratorSignal();
    void removeChannelModeratorsSignal(OAIUser summary);
    void replaceChannelModeratorsSignal(QList<OAIUser> summary);


    void addChannelModeratorSignalFull(OAIHttpRequestWorker *worker);
    void addChannelModeratorsSignalFull(OAIHttpRequestWorker *worker);
    void getChannelModeratorSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getChannelModeratorsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void removeChannelModeratorSignalFull(OAIHttpRequestWorker *worker);
    void removeChannelModeratorsSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void replaceChannelModeratorsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);

    Q_DECL_DEPRECATED_X("Use addChannelModeratorSignalError() instead")
    void addChannelModeratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addChannelModeratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addChannelModeratorsSignalError() instead")
    void addChannelModeratorsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addChannelModeratorsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelModeratorSignalError() instead")
    void getChannelModeratorSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelModeratorSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelModeratorsSignalError() instead")
    void getChannelModeratorsSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelModeratorsSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeChannelModeratorSignalError() instead")
    void removeChannelModeratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeChannelModeratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeChannelModeratorsSignalError() instead")
    void removeChannelModeratorsSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeChannelModeratorsSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceChannelModeratorsSignalError() instead")
    void replaceChannelModeratorsSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceChannelModeratorsSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addChannelModeratorSignalErrorFull() instead")
    void addChannelModeratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addChannelModeratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addChannelModeratorsSignalErrorFull() instead")
    void addChannelModeratorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addChannelModeratorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelModeratorSignalErrorFull() instead")
    void getChannelModeratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelModeratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelModeratorsSignalErrorFull() instead")
    void getChannelModeratorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelModeratorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeChannelModeratorSignalErrorFull() instead")
    void removeChannelModeratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeChannelModeratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeChannelModeratorsSignalErrorFull() instead")
    void removeChannelModeratorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeChannelModeratorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceChannelModeratorsSignalErrorFull() instead")
    void replaceChannelModeratorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceChannelModeratorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
