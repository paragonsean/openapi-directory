/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOnDemandEssentialsApi_H
#define OAI_OAIOnDemandEssentialsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_vod_alt1_request.h"
#include "OAIEdit_vod_request.h"
#include "OAILegacy_error.h"
#include "OAIOn_demand_page.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOnDemandEssentialsApi : public QObject {
    Q_OBJECT

public:
    OAIOnDemandEssentialsApi(const int timeOut = 0);
    ~OAIOnDemandEssentialsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  oai_create_vod_alt1_request OAICreate_vod_alt1_request [required]
    */
    virtual void createVod(const double &user_id, const OAICreate_vod_alt1_request &oai_create_vod_alt1_request);

    /**
    * @param[in]  oai_create_vod_alt1_request OAICreate_vod_alt1_request [required]
    */
    virtual void createVodAlt1(const OAICreate_vod_alt1_request &oai_create_vod_alt1_request);

    /**
    * @param[in]  ondemand_id double [required]
    */
    virtual void deleteVodDraft(const double &ondemand_id);

    /**
    * @param[in]  ondemand_id double [required]
    * @param[in]  oai_edit_vod_request OAIEdit_vod_request [optional]
    */
    virtual void editVod(const double &ondemand_id, const ::OpenAPI::OptionalParam<OAIEdit_vod_request> &oai_edit_vod_request = ::OpenAPI::OptionalParam<OAIEdit_vod_request>());

    /**
    * @param[in]  user_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getUserVods(const double &user_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  direction QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getUserVodsAlt1(const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ondemand_id double [required]
    */
    virtual void getVod(const double &ondemand_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createVodCallback(OAIHttpRequestWorker *worker);
    void createVodAlt1Callback(OAIHttpRequestWorker *worker);
    void deleteVodDraftCallback(OAIHttpRequestWorker *worker);
    void editVodCallback(OAIHttpRequestWorker *worker);
    void getUserVodsCallback(OAIHttpRequestWorker *worker);
    void getUserVodsAlt1Callback(OAIHttpRequestWorker *worker);
    void getVodCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createVodSignal(OAIOn_demand_page summary);
    void createVodAlt1Signal(OAIOn_demand_page summary);
    void deleteVodDraftSignal();
    void editVodSignal(OAIOn_demand_page summary);
    void getUserVodsSignal(QList<OAIOn_demand_page> summary);
    void getUserVodsAlt1Signal(QList<OAIOn_demand_page> summary);
    void getVodSignal(OAIOn_demand_page summary);


    void createVodSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_page summary);
    void createVodAlt1SignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_page summary);
    void deleteVodDraftSignalFull(OAIHttpRequestWorker *worker);
    void editVodSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_page summary);
    void getUserVodsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOn_demand_page> summary);
    void getUserVodsAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIOn_demand_page> summary);
    void getVodSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_page summary);

    Q_DECL_DEPRECATED_X("Use createVodSignalError() instead")
    void createVodSignalE(OAIOn_demand_page summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVodSignalError(OAIOn_demand_page summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVodAlt1SignalError() instead")
    void createVodAlt1SignalE(OAIOn_demand_page summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVodAlt1SignalError(OAIOn_demand_page summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVodDraftSignalError() instead")
    void deleteVodDraftSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVodDraftSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editVodSignalError() instead")
    void editVodSignalE(OAIOn_demand_page summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editVodSignalError(OAIOn_demand_page summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserVodsSignalError() instead")
    void getUserVodsSignalE(QList<OAIOn_demand_page> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserVodsSignalError(QList<OAIOn_demand_page> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserVodsAlt1SignalError() instead")
    void getUserVodsAlt1SignalE(QList<OAIOn_demand_page> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserVodsAlt1SignalError(QList<OAIOn_demand_page> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodSignalError() instead")
    void getVodSignalE(OAIOn_demand_page summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodSignalError(OAIOn_demand_page summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createVodSignalErrorFull() instead")
    void createVodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVodAlt1SignalErrorFull() instead")
    void createVodAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVodAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVodDraftSignalErrorFull() instead")
    void deleteVodDraftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVodDraftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editVodSignalErrorFull() instead")
    void editVodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editVodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserVodsSignalErrorFull() instead")
    void getUserVodsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserVodsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserVodsAlt1SignalErrorFull() instead")
    void getUserVodsAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserVodsAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodSignalErrorFull() instead")
    void getVodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
