/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_metadata_connections.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_metadata_connections::OAIUser_metadata_connections(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_metadata_connections::OAIUser_metadata_connections() {
    this->initializeModel();
}

OAIUser_metadata_connections::~OAIUser_metadata_connections() {}

void OAIUser_metadata_connections::initializeModel() {

    m_albums_isSet = false;
    m_albums_isValid = false;

    m_appearances_isSet = false;
    m_appearances_isValid = false;

    m_block_isSet = false;
    m_block_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_feed_isSet = false;
    m_feed_isValid = false;

    m_folders_isSet = false;
    m_folders_isValid = false;

    m_followers_isSet = false;
    m_followers_isValid = false;

    m_following_isSet = false;
    m_following_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_likes_isSet = false;
    m_likes_isValid = false;

    m_moderated_channels_isSet = false;
    m_moderated_channels_isValid = false;

    m_pictures_isSet = false;
    m_pictures_isValid = false;

    m_portfolios_isSet = false;
    m_portfolios_isValid = false;

    m_recommended_channels_isSet = false;
    m_recommended_channels_isValid = false;

    m_recommended_users_isSet = false;
    m_recommended_users_isValid = false;

    m_shared_isSet = false;
    m_shared_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;

    m_watched_videos_isSet = false;
    m_watched_videos_isValid = false;

    m_watchlater_isSet = false;
    m_watchlater_isValid = false;
}

void OAIUser_metadata_connections::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_metadata_connections::fromJsonObject(QJsonObject json) {

    m_albums_isValid = ::OpenAPI::fromJsonValue(m_albums, json[QString("albums")]);
    m_albums_isSet = !json[QString("albums")].isNull() && m_albums_isValid;

    m_appearances_isValid = ::OpenAPI::fromJsonValue(m_appearances, json[QString("appearances")]);
    m_appearances_isSet = !json[QString("appearances")].isNull() && m_appearances_isValid;

    m_block_isValid = ::OpenAPI::fromJsonValue(m_block, json[QString("block")]);
    m_block_isSet = !json[QString("block")].isNull() && m_block_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_feed_isValid = ::OpenAPI::fromJsonValue(m_feed, json[QString("feed")]);
    m_feed_isSet = !json[QString("feed")].isNull() && m_feed_isValid;

    m_folders_isValid = ::OpenAPI::fromJsonValue(m_folders, json[QString("folders")]);
    m_folders_isSet = !json[QString("folders")].isNull() && m_folders_isValid;

    m_followers_isValid = ::OpenAPI::fromJsonValue(m_followers, json[QString("followers")]);
    m_followers_isSet = !json[QString("followers")].isNull() && m_followers_isValid;

    m_following_isValid = ::OpenAPI::fromJsonValue(m_following, json[QString("following")]);
    m_following_isSet = !json[QString("following")].isNull() && m_following_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_likes_isValid = ::OpenAPI::fromJsonValue(m_likes, json[QString("likes")]);
    m_likes_isSet = !json[QString("likes")].isNull() && m_likes_isValid;

    m_moderated_channels_isValid = ::OpenAPI::fromJsonValue(m_moderated_channels, json[QString("moderated_channels")]);
    m_moderated_channels_isSet = !json[QString("moderated_channels")].isNull() && m_moderated_channels_isValid;

    m_pictures_isValid = ::OpenAPI::fromJsonValue(m_pictures, json[QString("pictures")]);
    m_pictures_isSet = !json[QString("pictures")].isNull() && m_pictures_isValid;

    m_portfolios_isValid = ::OpenAPI::fromJsonValue(m_portfolios, json[QString("portfolios")]);
    m_portfolios_isSet = !json[QString("portfolios")].isNull() && m_portfolios_isValid;

    m_recommended_channels_isValid = ::OpenAPI::fromJsonValue(m_recommended_channels, json[QString("recommended_channels")]);
    m_recommended_channels_isSet = !json[QString("recommended_channels")].isNull() && m_recommended_channels_isValid;

    m_recommended_users_isValid = ::OpenAPI::fromJsonValue(m_recommended_users, json[QString("recommended_users")]);
    m_recommended_users_isSet = !json[QString("recommended_users")].isNull() && m_recommended_users_isValid;

    m_shared_isValid = ::OpenAPI::fromJsonValue(m_shared, json[QString("shared")]);
    m_shared_isSet = !json[QString("shared")].isNull() && m_shared_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;

    m_watched_videos_isValid = ::OpenAPI::fromJsonValue(m_watched_videos, json[QString("watched_videos")]);
    m_watched_videos_isSet = !json[QString("watched_videos")].isNull() && m_watched_videos_isValid;

    m_watchlater_isValid = ::OpenAPI::fromJsonValue(m_watchlater, json[QString("watchlater")]);
    m_watchlater_isSet = !json[QString("watchlater")].isNull() && m_watchlater_isValid;
}

QString OAIUser_metadata_connections::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_metadata_connections::asJsonObject() const {
    QJsonObject obj;
    if (m_albums.isSet()) {
        obj.insert(QString("albums"), ::OpenAPI::toJsonValue(m_albums));
    }
    if (m_appearances.isSet()) {
        obj.insert(QString("appearances"), ::OpenAPI::toJsonValue(m_appearances));
    }
    if (m_block.isSet()) {
        obj.insert(QString("block"), ::OpenAPI::toJsonValue(m_block));
    }
    if (m_categories.isSet()) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_channels.isSet()) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_feed.isSet()) {
        obj.insert(QString("feed"), ::OpenAPI::toJsonValue(m_feed));
    }
    if (m_folders.isSet()) {
        obj.insert(QString("folders"), ::OpenAPI::toJsonValue(m_folders));
    }
    if (m_followers.isSet()) {
        obj.insert(QString("followers"), ::OpenAPI::toJsonValue(m_followers));
    }
    if (m_following.isSet()) {
        obj.insert(QString("following"), ::OpenAPI::toJsonValue(m_following));
    }
    if (m_groups.isSet()) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_likes.isSet()) {
        obj.insert(QString("likes"), ::OpenAPI::toJsonValue(m_likes));
    }
    if (m_moderated_channels.isSet()) {
        obj.insert(QString("moderated_channels"), ::OpenAPI::toJsonValue(m_moderated_channels));
    }
    if (m_pictures.isSet()) {
        obj.insert(QString("pictures"), ::OpenAPI::toJsonValue(m_pictures));
    }
    if (m_portfolios.isSet()) {
        obj.insert(QString("portfolios"), ::OpenAPI::toJsonValue(m_portfolios));
    }
    if (m_recommended_channels.isSet()) {
        obj.insert(QString("recommended_channels"), ::OpenAPI::toJsonValue(m_recommended_channels));
    }
    if (m_recommended_users.isSet()) {
        obj.insert(QString("recommended_users"), ::OpenAPI::toJsonValue(m_recommended_users));
    }
    if (m_shared.isSet()) {
        obj.insert(QString("shared"), ::OpenAPI::toJsonValue(m_shared));
    }
    if (m_videos.isSet()) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    if (m_watched_videos.isSet()) {
        obj.insert(QString("watched_videos"), ::OpenAPI::toJsonValue(m_watched_videos));
    }
    if (m_watchlater.isSet()) {
        obj.insert(QString("watchlater"), ::OpenAPI::toJsonValue(m_watchlater));
    }
    return obj;
}

OAIUser_metadata_connections_albums OAIUser_metadata_connections::getAlbums() const {
    return m_albums;
}
void OAIUser_metadata_connections::setAlbums(const OAIUser_metadata_connections_albums &albums) {
    m_albums = albums;
    m_albums_isSet = true;
}

bool OAIUser_metadata_connections::is_albums_Set() const{
    return m_albums_isSet;
}

bool OAIUser_metadata_connections::is_albums_Valid() const{
    return m_albums_isValid;
}

OAIUser_metadata_connections_appearances OAIUser_metadata_connections::getAppearances() const {
    return m_appearances;
}
void OAIUser_metadata_connections::setAppearances(const OAIUser_metadata_connections_appearances &appearances) {
    m_appearances = appearances;
    m_appearances_isSet = true;
}

bool OAIUser_metadata_connections::is_appearances_Set() const{
    return m_appearances_isSet;
}

bool OAIUser_metadata_connections::is_appearances_Valid() const{
    return m_appearances_isValid;
}

OAIUser_metadata_connections_block OAIUser_metadata_connections::getBlock() const {
    return m_block;
}
void OAIUser_metadata_connections::setBlock(const OAIUser_metadata_connections_block &block) {
    m_block = block;
    m_block_isSet = true;
}

bool OAIUser_metadata_connections::is_block_Set() const{
    return m_block_isSet;
}

bool OAIUser_metadata_connections::is_block_Valid() const{
    return m_block_isValid;
}

OAIUser_metadata_connections_categories OAIUser_metadata_connections::getCategories() const {
    return m_categories;
}
void OAIUser_metadata_connections::setCategories(const OAIUser_metadata_connections_categories &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIUser_metadata_connections::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIUser_metadata_connections::is_categories_Valid() const{
    return m_categories_isValid;
}

OAIUser_metadata_connections_channels OAIUser_metadata_connections::getChannels() const {
    return m_channels;
}
void OAIUser_metadata_connections::setChannels(const OAIUser_metadata_connections_channels &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIUser_metadata_connections::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIUser_metadata_connections::is_channels_Valid() const{
    return m_channels_isValid;
}

OAIUser_metadata_connections_feed OAIUser_metadata_connections::getFeed() const {
    return m_feed;
}
void OAIUser_metadata_connections::setFeed(const OAIUser_metadata_connections_feed &feed) {
    m_feed = feed;
    m_feed_isSet = true;
}

bool OAIUser_metadata_connections::is_feed_Set() const{
    return m_feed_isSet;
}

bool OAIUser_metadata_connections::is_feed_Valid() const{
    return m_feed_isValid;
}

OAIUser_metadata_connections_folders OAIUser_metadata_connections::getFolders() const {
    return m_folders;
}
void OAIUser_metadata_connections::setFolders(const OAIUser_metadata_connections_folders &folders) {
    m_folders = folders;
    m_folders_isSet = true;
}

bool OAIUser_metadata_connections::is_folders_Set() const{
    return m_folders_isSet;
}

bool OAIUser_metadata_connections::is_folders_Valid() const{
    return m_folders_isValid;
}

OAIUser_metadata_connections_followers OAIUser_metadata_connections::getFollowers() const {
    return m_followers;
}
void OAIUser_metadata_connections::setFollowers(const OAIUser_metadata_connections_followers &followers) {
    m_followers = followers;
    m_followers_isSet = true;
}

bool OAIUser_metadata_connections::is_followers_Set() const{
    return m_followers_isSet;
}

bool OAIUser_metadata_connections::is_followers_Valid() const{
    return m_followers_isValid;
}

OAIUser_metadata_connections_following OAIUser_metadata_connections::getFollowing() const {
    return m_following;
}
void OAIUser_metadata_connections::setFollowing(const OAIUser_metadata_connections_following &following) {
    m_following = following;
    m_following_isSet = true;
}

bool OAIUser_metadata_connections::is_following_Set() const{
    return m_following_isSet;
}

bool OAIUser_metadata_connections::is_following_Valid() const{
    return m_following_isValid;
}

OAIUser_metadata_connections_groups OAIUser_metadata_connections::getGroups() const {
    return m_groups;
}
void OAIUser_metadata_connections::setGroups(const OAIUser_metadata_connections_groups &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIUser_metadata_connections::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIUser_metadata_connections::is_groups_Valid() const{
    return m_groups_isValid;
}

OAIUser_metadata_connections_likes OAIUser_metadata_connections::getLikes() const {
    return m_likes;
}
void OAIUser_metadata_connections::setLikes(const OAIUser_metadata_connections_likes &likes) {
    m_likes = likes;
    m_likes_isSet = true;
}

bool OAIUser_metadata_connections::is_likes_Set() const{
    return m_likes_isSet;
}

bool OAIUser_metadata_connections::is_likes_Valid() const{
    return m_likes_isValid;
}

OAIUser_metadata_connections_moderated_channels OAIUser_metadata_connections::getModeratedChannels() const {
    return m_moderated_channels;
}
void OAIUser_metadata_connections::setModeratedChannels(const OAIUser_metadata_connections_moderated_channels &moderated_channels) {
    m_moderated_channels = moderated_channels;
    m_moderated_channels_isSet = true;
}

bool OAIUser_metadata_connections::is_moderated_channels_Set() const{
    return m_moderated_channels_isSet;
}

bool OAIUser_metadata_connections::is_moderated_channels_Valid() const{
    return m_moderated_channels_isValid;
}

OAIUser_metadata_connections_pictures OAIUser_metadata_connections::getPictures() const {
    return m_pictures;
}
void OAIUser_metadata_connections::setPictures(const OAIUser_metadata_connections_pictures &pictures) {
    m_pictures = pictures;
    m_pictures_isSet = true;
}

bool OAIUser_metadata_connections::is_pictures_Set() const{
    return m_pictures_isSet;
}

bool OAIUser_metadata_connections::is_pictures_Valid() const{
    return m_pictures_isValid;
}

OAIUser_metadata_connections_portfolios OAIUser_metadata_connections::getPortfolios() const {
    return m_portfolios;
}
void OAIUser_metadata_connections::setPortfolios(const OAIUser_metadata_connections_portfolios &portfolios) {
    m_portfolios = portfolios;
    m_portfolios_isSet = true;
}

bool OAIUser_metadata_connections::is_portfolios_Set() const{
    return m_portfolios_isSet;
}

bool OAIUser_metadata_connections::is_portfolios_Valid() const{
    return m_portfolios_isValid;
}

OAIUser_metadata_connections_recommended_channels OAIUser_metadata_connections::getRecommendedChannels() const {
    return m_recommended_channels;
}
void OAIUser_metadata_connections::setRecommendedChannels(const OAIUser_metadata_connections_recommended_channels &recommended_channels) {
    m_recommended_channels = recommended_channels;
    m_recommended_channels_isSet = true;
}

bool OAIUser_metadata_connections::is_recommended_channels_Set() const{
    return m_recommended_channels_isSet;
}

bool OAIUser_metadata_connections::is_recommended_channels_Valid() const{
    return m_recommended_channels_isValid;
}

OAIUser_metadata_connections_recommended_users OAIUser_metadata_connections::getRecommendedUsers() const {
    return m_recommended_users;
}
void OAIUser_metadata_connections::setRecommendedUsers(const OAIUser_metadata_connections_recommended_users &recommended_users) {
    m_recommended_users = recommended_users;
    m_recommended_users_isSet = true;
}

bool OAIUser_metadata_connections::is_recommended_users_Set() const{
    return m_recommended_users_isSet;
}

bool OAIUser_metadata_connections::is_recommended_users_Valid() const{
    return m_recommended_users_isValid;
}

OAIUser_metadata_connections_shared OAIUser_metadata_connections::getShared() const {
    return m_shared;
}
void OAIUser_metadata_connections::setShared(const OAIUser_metadata_connections_shared &shared) {
    m_shared = shared;
    m_shared_isSet = true;
}

bool OAIUser_metadata_connections::is_shared_Set() const{
    return m_shared_isSet;
}

bool OAIUser_metadata_connections::is_shared_Valid() const{
    return m_shared_isValid;
}

OAIUser_metadata_connections_videos OAIUser_metadata_connections::getVideos() const {
    return m_videos;
}
void OAIUser_metadata_connections::setVideos(const OAIUser_metadata_connections_videos &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAIUser_metadata_connections::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAIUser_metadata_connections::is_videos_Valid() const{
    return m_videos_isValid;
}

OAIUser_metadata_connections_watched_videos OAIUser_metadata_connections::getWatchedVideos() const {
    return m_watched_videos;
}
void OAIUser_metadata_connections::setWatchedVideos(const OAIUser_metadata_connections_watched_videos &watched_videos) {
    m_watched_videos = watched_videos;
    m_watched_videos_isSet = true;
}

bool OAIUser_metadata_connections::is_watched_videos_Set() const{
    return m_watched_videos_isSet;
}

bool OAIUser_metadata_connections::is_watched_videos_Valid() const{
    return m_watched_videos_isValid;
}

OAIUser_metadata_connections_watchlater OAIUser_metadata_connections::getWatchlater() const {
    return m_watchlater;
}
void OAIUser_metadata_connections::setWatchlater(const OAIUser_metadata_connections_watchlater &watchlater) {
    m_watchlater = watchlater;
    m_watchlater_isSet = true;
}

bool OAIUser_metadata_connections::is_watchlater_Set() const{
    return m_watchlater_isSet;
}

bool OAIUser_metadata_connections::is_watchlater_Valid() const{
    return m_watchlater_isValid;
}

bool OAIUser_metadata_connections::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_albums.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_appearances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_block.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_folders.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_following.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_likes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderated_channels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pictures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolios.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_channels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_users.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_watched_videos.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchlater.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_metadata_connections::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_albums_isValid && m_appearances_isValid && m_block_isValid && m_categories_isValid && m_channels_isValid && m_feed_isValid && m_folders_isValid && m_followers_isValid && m_following_isValid && m_groups_isValid && m_likes_isValid && m_moderated_channels_isValid && m_pictures_isValid && m_portfolios_isValid && m_recommended_channels_isValid && m_recommended_users_isValid && m_shared_isValid && m_videos_isValid && m_watched_videos_isValid && m_watchlater_isValid && true;
}

} // namespace OpenAPI
