/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbed_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbed_settings::OAIEmbed_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbed_settings::OAIEmbed_settings() {
    this->initializeModel();
}

OAIEmbed_settings::~OAIEmbed_settings() {}

void OAIEmbed_settings::initializeModel() {

    m_buttons_isSet = false;
    m_buttons_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_logos_isSet = false;
    m_logos_isValid = false;

    m_playbar_isSet = false;
    m_playbar_isValid = false;

    m_speed_isSet = false;
    m_speed_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;
}

void OAIEmbed_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbed_settings::fromJsonObject(QJsonObject json) {

    m_buttons_isValid = ::OpenAPI::fromJsonValue(m_buttons, json[QString("buttons")]);
    m_buttons_isSet = !json[QString("buttons")].isNull() && m_buttons_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_logos_isValid = ::OpenAPI::fromJsonValue(m_logos, json[QString("logos")]);
    m_logos_isSet = !json[QString("logos")].isNull() && m_logos_isValid;

    m_playbar_isValid = ::OpenAPI::fromJsonValue(m_playbar, json[QString("playbar")]);
    m_playbar_isSet = !json[QString("playbar")].isNull() && m_playbar_isValid;

    m_speed_isValid = ::OpenAPI::fromJsonValue(m_speed, json[QString("speed")]);
    m_speed_isSet = !json[QString("speed")].isNull() && m_speed_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;
}

QString OAIEmbed_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbed_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_buttons.isSet()) {
        obj.insert(QString("buttons"), ::OpenAPI::toJsonValue(m_buttons));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_logos.isSet()) {
        obj.insert(QString("logos"), ::OpenAPI::toJsonValue(m_logos));
    }
    if (m_playbar_isSet) {
        obj.insert(QString("playbar"), ::OpenAPI::toJsonValue(m_playbar));
    }
    if (m_speed_isSet) {
        obj.insert(QString("speed"), ::OpenAPI::toJsonValue(m_speed));
    }
    if (m_title.isSet()) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    return obj;
}

OAIEmbed_settings_buttons OAIEmbed_settings::getButtons() const {
    return m_buttons;
}
void OAIEmbed_settings::setButtons(const OAIEmbed_settings_buttons &buttons) {
    m_buttons = buttons;
    m_buttons_isSet = true;
}

bool OAIEmbed_settings::is_buttons_Set() const{
    return m_buttons_isSet;
}

bool OAIEmbed_settings::is_buttons_Valid() const{
    return m_buttons_isValid;
}

QString OAIEmbed_settings::getColor() const {
    return m_color;
}
void OAIEmbed_settings::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIEmbed_settings::is_color_Set() const{
    return m_color_isSet;
}

bool OAIEmbed_settings::is_color_Valid() const{
    return m_color_isValid;
}

OAIEmbed_settings_logos OAIEmbed_settings::getLogos() const {
    return m_logos;
}
void OAIEmbed_settings::setLogos(const OAIEmbed_settings_logos &logos) {
    m_logos = logos;
    m_logos_isSet = true;
}

bool OAIEmbed_settings::is_logos_Set() const{
    return m_logos_isSet;
}

bool OAIEmbed_settings::is_logos_Valid() const{
    return m_logos_isValid;
}

bool OAIEmbed_settings::isPlaybar() const {
    return m_playbar;
}
void OAIEmbed_settings::setPlaybar(const bool &playbar) {
    m_playbar = playbar;
    m_playbar_isSet = true;
}

bool OAIEmbed_settings::is_playbar_Set() const{
    return m_playbar_isSet;
}

bool OAIEmbed_settings::is_playbar_Valid() const{
    return m_playbar_isValid;
}

bool OAIEmbed_settings::isSpeed() const {
    return m_speed;
}
void OAIEmbed_settings::setSpeed(const bool &speed) {
    m_speed = speed;
    m_speed_isSet = true;
}

bool OAIEmbed_settings::is_speed_Set() const{
    return m_speed_isSet;
}

bool OAIEmbed_settings::is_speed_Valid() const{
    return m_speed_isValid;
}

OAIEmbed_settings_title OAIEmbed_settings::getTitle() const {
    return m_title;
}
void OAIEmbed_settings::setTitle(const OAIEmbed_settings_title &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEmbed_settings::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEmbed_settings::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIEmbed_settings::getUri() const {
    return m_uri;
}
void OAIEmbed_settings::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIEmbed_settings::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIEmbed_settings::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIEmbed_settings::isVolume() const {
    return m_volume;
}
void OAIEmbed_settings::setVolume(const bool &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAIEmbed_settings::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAIEmbed_settings::is_volume_Valid() const{
    return m_volume_isValid;
}

bool OAIEmbed_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buttons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logos.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playbar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbed_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_buttons_isValid && m_color_isValid && m_logos_isValid && m_playbar_isValid && m_speed_isValid && m_title_isValid && m_volume_isValid && true;
}

} // namespace OpenAPI
