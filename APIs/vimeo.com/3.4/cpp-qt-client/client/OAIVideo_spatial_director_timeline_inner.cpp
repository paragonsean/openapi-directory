/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_spatial_director_timeline_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_spatial_director_timeline_inner::OAIVideo_spatial_director_timeline_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_spatial_director_timeline_inner::OAIVideo_spatial_director_timeline_inner() {
    this->initializeModel();
}

OAIVideo_spatial_director_timeline_inner::~OAIVideo_spatial_director_timeline_inner() {}

void OAIVideo_spatial_director_timeline_inner::initializeModel() {

    m_pitch_isSet = false;
    m_pitch_isValid = false;

    m_roll_isSet = false;
    m_roll_isValid = false;

    m_time_code_isSet = false;
    m_time_code_isValid = false;

    m_yaw_isSet = false;
    m_yaw_isValid = false;
}

void OAIVideo_spatial_director_timeline_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_spatial_director_timeline_inner::fromJsonObject(QJsonObject json) {

    m_pitch_isValid = ::OpenAPI::fromJsonValue(m_pitch, json[QString("pitch")]);
    m_pitch_isSet = !json[QString("pitch")].isNull() && m_pitch_isValid;

    m_roll_isValid = ::OpenAPI::fromJsonValue(m_roll, json[QString("roll")]);
    m_roll_isSet = !json[QString("roll")].isNull() && m_roll_isValid;

    m_time_code_isValid = ::OpenAPI::fromJsonValue(m_time_code, json[QString("time_code")]);
    m_time_code_isSet = !json[QString("time_code")].isNull() && m_time_code_isValid;

    m_yaw_isValid = ::OpenAPI::fromJsonValue(m_yaw, json[QString("yaw")]);
    m_yaw_isSet = !json[QString("yaw")].isNull() && m_yaw_isValid;
}

QString OAIVideo_spatial_director_timeline_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_spatial_director_timeline_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_pitch_isSet) {
        obj.insert(QString("pitch"), ::OpenAPI::toJsonValue(m_pitch));
    }
    if (m_roll_isSet) {
        obj.insert(QString("roll"), ::OpenAPI::toJsonValue(m_roll));
    }
    if (m_time_code_isSet) {
        obj.insert(QString("time_code"), ::OpenAPI::toJsonValue(m_time_code));
    }
    if (m_yaw_isSet) {
        obj.insert(QString("yaw"), ::OpenAPI::toJsonValue(m_yaw));
    }
    return obj;
}

double OAIVideo_spatial_director_timeline_inner::getPitch() const {
    return m_pitch;
}
void OAIVideo_spatial_director_timeline_inner::setPitch(const double &pitch) {
    m_pitch = pitch;
    m_pitch_isSet = true;
}

bool OAIVideo_spatial_director_timeline_inner::is_pitch_Set() const{
    return m_pitch_isSet;
}

bool OAIVideo_spatial_director_timeline_inner::is_pitch_Valid() const{
    return m_pitch_isValid;
}

double OAIVideo_spatial_director_timeline_inner::getRoll() const {
    return m_roll;
}
void OAIVideo_spatial_director_timeline_inner::setRoll(const double &roll) {
    m_roll = roll;
    m_roll_isSet = true;
}

bool OAIVideo_spatial_director_timeline_inner::is_roll_Set() const{
    return m_roll_isSet;
}

bool OAIVideo_spatial_director_timeline_inner::is_roll_Valid() const{
    return m_roll_isValid;
}

double OAIVideo_spatial_director_timeline_inner::getTimeCode() const {
    return m_time_code;
}
void OAIVideo_spatial_director_timeline_inner::setTimeCode(const double &time_code) {
    m_time_code = time_code;
    m_time_code_isSet = true;
}

bool OAIVideo_spatial_director_timeline_inner::is_time_code_Set() const{
    return m_time_code_isSet;
}

bool OAIVideo_spatial_director_timeline_inner::is_time_code_Valid() const{
    return m_time_code_isValid;
}

double OAIVideo_spatial_director_timeline_inner::getYaw() const {
    return m_yaw;
}
void OAIVideo_spatial_director_timeline_inner::setYaw(const double &yaw) {
    m_yaw = yaw;
    m_yaw_isSet = true;
}

bool OAIVideo_spatial_director_timeline_inner::is_yaw_Set() const{
    return m_yaw_isSet;
}

bool OAIVideo_spatial_director_timeline_inner::is_yaw_Valid() const{
    return m_yaw_isValid;
}

bool OAIVideo_spatial_director_timeline_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pitch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yaw_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_spatial_director_timeline_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
