/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsVideosApi_H
#define OAI_OAIProjectsVideosApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIVideo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsVideosApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsVideosApi(const int timeOut = 0);
    ~OAIProjectsVideosApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void addVideoToProject(const double &project_id, const double &user_id, const double &video_id);

    /**
    * @param[in]  project_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void addVideoToProjectAlt1(const double &project_id, const double &video_id);

    /**
    * @param[in]  project_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  uris QString [required]
    */
    virtual void addVideosToProject(const double &project_id, const double &user_id, const QString &uris);

    /**
    * @param[in]  project_id double [required]
    * @param[in]  uris QString [required]
    */
    virtual void addVideosToProjectAlt1(const double &project_id, const QString &uris);

    /**
    * @param[in]  project_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getProjectVideos(const double &project_id, const double &user_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getProjectVideosAlt1(const double &project_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void removeVideoFromProject(const double &project_id, const double &user_id, const double &video_id);

    /**
    * @param[in]  project_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void removeVideoFromProjectAlt1(const double &project_id, const double &video_id);

    /**
    * @param[in]  project_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  uris QString [required]
    * @param[in]  should_delete_clips bool [optional]
    */
    virtual void removeVideosFromProject(const double &project_id, const double &user_id, const QString &uris, const ::OpenAPI::OptionalParam<bool> &should_delete_clips = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  project_id double [required]
    * @param[in]  uris QString [required]
    * @param[in]  should_delete_clips bool [optional]
    */
    virtual void removeVideosFromProjectAlt1(const double &project_id, const QString &uris, const ::OpenAPI::OptionalParam<bool> &should_delete_clips = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addVideoToProjectCallback(OAIHttpRequestWorker *worker);
    void addVideoToProjectAlt1Callback(OAIHttpRequestWorker *worker);
    void addVideosToProjectCallback(OAIHttpRequestWorker *worker);
    void addVideosToProjectAlt1Callback(OAIHttpRequestWorker *worker);
    void getProjectVideosCallback(OAIHttpRequestWorker *worker);
    void getProjectVideosAlt1Callback(OAIHttpRequestWorker *worker);
    void removeVideoFromProjectCallback(OAIHttpRequestWorker *worker);
    void removeVideoFromProjectAlt1Callback(OAIHttpRequestWorker *worker);
    void removeVideosFromProjectCallback(OAIHttpRequestWorker *worker);
    void removeVideosFromProjectAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addVideoToProjectSignal();
    void addVideoToProjectAlt1Signal();
    void addVideosToProjectSignal();
    void addVideosToProjectAlt1Signal();
    void getProjectVideosSignal(QList<OAIVideo> summary);
    void getProjectVideosAlt1Signal(QList<OAIVideo> summary);
    void removeVideoFromProjectSignal();
    void removeVideoFromProjectAlt1Signal();
    void removeVideosFromProjectSignal();
    void removeVideosFromProjectAlt1Signal();


    void addVideoToProjectSignalFull(OAIHttpRequestWorker *worker);
    void addVideoToProjectAlt1SignalFull(OAIHttpRequestWorker *worker);
    void addVideosToProjectSignalFull(OAIHttpRequestWorker *worker);
    void addVideosToProjectAlt1SignalFull(OAIHttpRequestWorker *worker);
    void getProjectVideosSignalFull(OAIHttpRequestWorker *worker, QList<OAIVideo> summary);
    void getProjectVideosAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIVideo> summary);
    void removeVideoFromProjectSignalFull(OAIHttpRequestWorker *worker);
    void removeVideoFromProjectAlt1SignalFull(OAIHttpRequestWorker *worker);
    void removeVideosFromProjectSignalFull(OAIHttpRequestWorker *worker);
    void removeVideosFromProjectAlt1SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addVideoToProjectSignalError() instead")
    void addVideoToProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideoToProjectAlt1SignalError() instead")
    void addVideoToProjectAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToProjectAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideosToProjectSignalError() instead")
    void addVideosToProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVideosToProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideosToProjectAlt1SignalError() instead")
    void addVideosToProjectAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVideosToProjectAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectVideosSignalError() instead")
    void getProjectVideosSignalE(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectVideosSignalError(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectVideosAlt1SignalError() instead")
    void getProjectVideosAlt1SignalE(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectVideosAlt1SignalError(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVideoFromProjectSignalError() instead")
    void removeVideoFromProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeVideoFromProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVideoFromProjectAlt1SignalError() instead")
    void removeVideoFromProjectAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeVideoFromProjectAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVideosFromProjectSignalError() instead")
    void removeVideosFromProjectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeVideosFromProjectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVideosFromProjectAlt1SignalError() instead")
    void removeVideosFromProjectAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeVideosFromProjectAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addVideoToProjectSignalErrorFull() instead")
    void addVideoToProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideoToProjectAlt1SignalErrorFull() instead")
    void addVideoToProjectAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoToProjectAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideosToProjectSignalErrorFull() instead")
    void addVideosToProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideosToProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideosToProjectAlt1SignalErrorFull() instead")
    void addVideosToProjectAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideosToProjectAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectVideosSignalErrorFull() instead")
    void getProjectVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectVideosAlt1SignalErrorFull() instead")
    void getProjectVideosAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectVideosAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVideoFromProjectSignalErrorFull() instead")
    void removeVideoFromProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeVideoFromProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVideoFromProjectAlt1SignalErrorFull() instead")
    void removeVideoFromProjectAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeVideoFromProjectAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVideosFromProjectSignalErrorFull() instead")
    void removeVideosFromProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeVideosFromProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeVideosFromProjectAlt1SignalErrorFull() instead")
    void removeVideosFromProjectAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeVideosFromProjectAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
