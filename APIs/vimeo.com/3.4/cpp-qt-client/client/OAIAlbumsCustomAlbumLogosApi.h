/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAlbumsCustomAlbumLogosApi_H
#define OAI_OAIAlbumsCustomAlbumLogosApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILegacy_error.h"
#include "OAIPicture.h"
#include "OAIReplace_album_logo_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAlbumsCustomAlbumLogosApi : public QObject {
    Q_OBJECT

public:
    OAIAlbumsCustomAlbumLogosApi(const int timeOut = 0);
    ~OAIAlbumsCustomAlbumLogosApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void createAlbumLogo(const double &album_id, const double &user_id);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  logo_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void deleteAlbumLogo(const double &album_id, const double &logo_id, const double &user_id);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  logo_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void getAlbumLogo(const double &album_id, const double &logo_id, const double &user_id);

    /**
    * @param[in]  album_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getAlbumLogos(const double &album_id, const double &user_id, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  album_id double [required]
    * @param[in]  logo_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  oai_replace_album_logo_request OAIReplace_album_logo_request [optional]
    */
    virtual void replaceAlbumLogo(const double &album_id, const double &logo_id, const double &user_id, const ::OpenAPI::OptionalParam<OAIReplace_album_logo_request> &oai_replace_album_logo_request = ::OpenAPI::OptionalParam<OAIReplace_album_logo_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAlbumLogoCallback(OAIHttpRequestWorker *worker);
    void deleteAlbumLogoCallback(OAIHttpRequestWorker *worker);
    void getAlbumLogoCallback(OAIHttpRequestWorker *worker);
    void getAlbumLogosCallback(OAIHttpRequestWorker *worker);
    void replaceAlbumLogoCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAlbumLogoSignal(OAIPicture summary);
    void deleteAlbumLogoSignal();
    void getAlbumLogoSignal(OAIPicture summary);
    void getAlbumLogosSignal(QList<OAIPicture> summary);
    void replaceAlbumLogoSignal(OAIPicture summary);


    void createAlbumLogoSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void deleteAlbumLogoSignalFull(OAIHttpRequestWorker *worker);
    void getAlbumLogoSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void getAlbumLogosSignalFull(OAIHttpRequestWorker *worker, QList<OAIPicture> summary);
    void replaceAlbumLogoSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);

    Q_DECL_DEPRECATED_X("Use createAlbumLogoSignalError() instead")
    void createAlbumLogoSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAlbumLogoSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAlbumLogoSignalError() instead")
    void deleteAlbumLogoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAlbumLogoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumLogoSignalError() instead")
    void getAlbumLogoSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumLogoSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumLogosSignalError() instead")
    void getAlbumLogosSignalE(QList<OAIPicture> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumLogosSignalError(QList<OAIPicture> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceAlbumLogoSignalError() instead")
    void replaceAlbumLogoSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceAlbumLogoSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAlbumLogoSignalErrorFull() instead")
    void createAlbumLogoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAlbumLogoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAlbumLogoSignalErrorFull() instead")
    void deleteAlbumLogoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAlbumLogoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumLogoSignalErrorFull() instead")
    void getAlbumLogoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumLogoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAlbumLogosSignalErrorFull() instead")
    void getAlbumLogosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlbumLogosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceAlbumLogoSignalErrorFull() instead")
    void replaceAlbumLogoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceAlbumLogoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
