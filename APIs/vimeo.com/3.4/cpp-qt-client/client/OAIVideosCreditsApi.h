/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVideosCreditsApi_H
#define OAI_OAIVideosCreditsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdd_video_credit_alt1_request.h"
#include "OAICredit.h"
#include "OAIEdit_video_credit_request.h"
#include "OAILegacy_error.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVideosCreditsApi : public QObject {
    Q_OBJECT

public:
    OAIVideosCreditsApi(const int timeOut = 0);
    ~OAIVideosCreditsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  video_id double [required]
    * @param[in]  oai_add_video_credit_alt1_request OAIAdd_video_credit_alt1_request [required]
    */
    virtual void addVideoCredit(const double &video_id, const OAIAdd_video_credit_alt1_request &oai_add_video_credit_alt1_request);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  oai_add_video_credit_alt1_request OAIAdd_video_credit_alt1_request [required]
    */
    virtual void addVideoCreditAlt1(const double &channel_id, const double &video_id, const OAIAdd_video_credit_alt1_request &oai_add_video_credit_alt1_request);

    /**
    * @param[in]  credit_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void deleteVideoCredit(const double &credit_id, const double &video_id);

    /**
    * @param[in]  credit_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  oai_edit_video_credit_request OAIEdit_video_credit_request [optional]
    */
    virtual void editVideoCredit(const double &credit_id, const double &video_id, const ::OpenAPI::OptionalParam<OAIEdit_video_credit_request> &oai_edit_video_credit_request = ::OpenAPI::OptionalParam<OAIEdit_video_credit_request>());

    /**
    * @param[in]  credit_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void getVideoCredit(const double &credit_id, const double &video_id);

    /**
    * @param[in]  video_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getVideoCredits(const double &video_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getVideoCreditsAlt1(const double &channel_id, const double &video_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addVideoCreditCallback(OAIHttpRequestWorker *worker);
    void addVideoCreditAlt1Callback(OAIHttpRequestWorker *worker);
    void deleteVideoCreditCallback(OAIHttpRequestWorker *worker);
    void editVideoCreditCallback(OAIHttpRequestWorker *worker);
    void getVideoCreditCallback(OAIHttpRequestWorker *worker);
    void getVideoCreditsCallback(OAIHttpRequestWorker *worker);
    void getVideoCreditsAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addVideoCreditSignal(OAICredit summary);
    void addVideoCreditAlt1Signal(OAICredit summary);
    void deleteVideoCreditSignal();
    void editVideoCreditSignal(OAICredit summary);
    void getVideoCreditSignal(OAICredit summary);
    void getVideoCreditsSignal(QList<OAICredit> summary);
    void getVideoCreditsAlt1Signal(QList<OAICredit> summary);


    void addVideoCreditSignalFull(OAIHttpRequestWorker *worker, OAICredit summary);
    void addVideoCreditAlt1SignalFull(OAIHttpRequestWorker *worker, OAICredit summary);
    void deleteVideoCreditSignalFull(OAIHttpRequestWorker *worker);
    void editVideoCreditSignalFull(OAIHttpRequestWorker *worker, OAICredit summary);
    void getVideoCreditSignalFull(OAIHttpRequestWorker *worker, OAICredit summary);
    void getVideoCreditsSignalFull(OAIHttpRequestWorker *worker, QList<OAICredit> summary);
    void getVideoCreditsAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAICredit> summary);

    Q_DECL_DEPRECATED_X("Use addVideoCreditSignalError() instead")
    void addVideoCreditSignalE(OAICredit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoCreditSignalError(OAICredit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideoCreditAlt1SignalError() instead")
    void addVideoCreditAlt1SignalE(OAICredit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoCreditAlt1SignalError(OAICredit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoCreditSignalError() instead")
    void deleteVideoCreditSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoCreditSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editVideoCreditSignalError() instead")
    void editVideoCreditSignalE(OAICredit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editVideoCreditSignalError(OAICredit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCreditSignalError() instead")
    void getVideoCreditSignalE(OAICredit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCreditSignalError(OAICredit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCreditsSignalError() instead")
    void getVideoCreditsSignalE(QList<OAICredit> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCreditsSignalError(QList<OAICredit> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCreditsAlt1SignalError() instead")
    void getVideoCreditsAlt1SignalE(QList<OAICredit> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCreditsAlt1SignalError(QList<OAICredit> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addVideoCreditSignalErrorFull() instead")
    void addVideoCreditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoCreditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVideoCreditAlt1SignalErrorFull() instead")
    void addVideoCreditAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoCreditAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoCreditSignalErrorFull() instead")
    void deleteVideoCreditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoCreditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editVideoCreditSignalErrorFull() instead")
    void editVideoCreditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editVideoCreditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCreditSignalErrorFull() instead")
    void getVideoCreditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCreditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCreditsSignalErrorFull() instead")
    void getVideoCreditsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCreditsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCreditsAlt1SignalErrorFull() instead")
    void getVideoCreditsAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCreditsAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
