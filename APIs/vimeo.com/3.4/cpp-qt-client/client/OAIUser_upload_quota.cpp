/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_upload_quota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_upload_quota::OAIUser_upload_quota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_upload_quota::OAIUser_upload_quota() {
    this->initializeModel();
}

OAIUser_upload_quota::~OAIUser_upload_quota() {}

void OAIUser_upload_quota::initializeModel() {

    m_lifetime_isSet = false;
    m_lifetime_isValid = false;

    m_periodic_isSet = false;
    m_periodic_isValid = false;

    m_space_isSet = false;
    m_space_isValid = false;
}

void OAIUser_upload_quota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_upload_quota::fromJsonObject(QJsonObject json) {

    m_lifetime_isValid = ::OpenAPI::fromJsonValue(m_lifetime, json[QString("lifetime")]);
    m_lifetime_isSet = !json[QString("lifetime")].isNull() && m_lifetime_isValid;

    m_periodic_isValid = ::OpenAPI::fromJsonValue(m_periodic, json[QString("periodic")]);
    m_periodic_isSet = !json[QString("periodic")].isNull() && m_periodic_isValid;

    m_space_isValid = ::OpenAPI::fromJsonValue(m_space, json[QString("space")]);
    m_space_isSet = !json[QString("space")].isNull() && m_space_isValid;
}

QString OAIUser_upload_quota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_upload_quota::asJsonObject() const {
    QJsonObject obj;
    if (m_lifetime.isSet()) {
        obj.insert(QString("lifetime"), ::OpenAPI::toJsonValue(m_lifetime));
    }
    if (m_periodic.isSet()) {
        obj.insert(QString("periodic"), ::OpenAPI::toJsonValue(m_periodic));
    }
    if (m_space.isSet()) {
        obj.insert(QString("space"), ::OpenAPI::toJsonValue(m_space));
    }
    return obj;
}

OAIUser_upload_quota_lifetime OAIUser_upload_quota::getLifetime() const {
    return m_lifetime;
}
void OAIUser_upload_quota::setLifetime(const OAIUser_upload_quota_lifetime &lifetime) {
    m_lifetime = lifetime;
    m_lifetime_isSet = true;
}

bool OAIUser_upload_quota::is_lifetime_Set() const{
    return m_lifetime_isSet;
}

bool OAIUser_upload_quota::is_lifetime_Valid() const{
    return m_lifetime_isValid;
}

OAIUser_upload_quota_periodic OAIUser_upload_quota::getPeriodic() const {
    return m_periodic;
}
void OAIUser_upload_quota::setPeriodic(const OAIUser_upload_quota_periodic &periodic) {
    m_periodic = periodic;
    m_periodic_isSet = true;
}

bool OAIUser_upload_quota::is_periodic_Set() const{
    return m_periodic_isSet;
}

bool OAIUser_upload_quota::is_periodic_Valid() const{
    return m_periodic_isValid;
}

OAIUser_upload_quota_space OAIUser_upload_quota::getSpace() const {
    return m_space;
}
void OAIUser_upload_quota::setSpace(const OAIUser_upload_quota_space &space) {
    m_space = space;
    m_space_isSet = true;
}

bool OAIUser_upload_quota::is_space_Set() const{
    return m_space_isSet;
}

bool OAIUser_upload_quota::is_space_Valid() const{
    return m_space_isValid;
}

bool OAIUser_upload_quota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lifetime.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_periodic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_space.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_upload_quota::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lifetime_isValid && m_periodic_isValid && m_space_isValid && true;
}

} // namespace OpenAPI
