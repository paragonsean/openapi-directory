/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOnDemandRegionsApi_H
#define OAI_OAIOnDemandRegionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDelete_vod_regions_request.h"
#include "OAILegacy_error.h"
#include "OAIOn_demand_region.h"
#include "OAISet_vod_regions_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOnDemandRegionsApi : public QObject {
    Q_OBJECT

public:
    OAIOnDemandRegionsApi(const int timeOut = 0);
    ~OAIOnDemandRegionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  country QString [required]
    * @param[in]  ondemand_id double [required]
    */
    virtual void addVodRegion(const QString &country, const double &ondemand_id);

    /**
    * @param[in]  country QString [required]
    * @param[in]  ondemand_id double [required]
    */
    virtual void deleteVodRegion(const QString &country, const double &ondemand_id);

    /**
    * @param[in]  ondemand_id double [required]
    * @param[in]  oai_delete_vod_regions_request OAIDelete_vod_regions_request [optional]
    */
    virtual void deleteVodRegions(const double &ondemand_id, const ::OpenAPI::OptionalParam<OAIDelete_vod_regions_request> &oai_delete_vod_regions_request = ::OpenAPI::OptionalParam<OAIDelete_vod_regions_request>());

    /**
    * @param[in]  country QString [required]
    */
    virtual void getRegion(const QString &country);


    virtual void getRegions();

    /**
    * @param[in]  country QString [required]
    * @param[in]  ondemand_id double [required]
    */
    virtual void getVodRegion(const QString &country, const double &ondemand_id);

    /**
    * @param[in]  ondemand_id double [required]
    */
    virtual void getVodRegions(const double &ondemand_id);

    /**
    * @param[in]  ondemand_id double [required]
    * @param[in]  oai_set_vod_regions_request OAISet_vod_regions_request [required]
    */
    virtual void setVodRegions(const double &ondemand_id, const OAISet_vod_regions_request &oai_set_vod_regions_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addVodRegionCallback(OAIHttpRequestWorker *worker);
    void deleteVodRegionCallback(OAIHttpRequestWorker *worker);
    void deleteVodRegionsCallback(OAIHttpRequestWorker *worker);
    void getRegionCallback(OAIHttpRequestWorker *worker);
    void getRegionsCallback(OAIHttpRequestWorker *worker);
    void getVodRegionCallback(OAIHttpRequestWorker *worker);
    void getVodRegionsCallback(OAIHttpRequestWorker *worker);
    void setVodRegionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addVodRegionSignal(OAIOn_demand_region summary);
    void deleteVodRegionSignal();
    void deleteVodRegionsSignal(QList<OAIOn_demand_region> summary);
    void getRegionSignal(OAIOn_demand_region summary);
    void getRegionsSignal(QList<OAIOn_demand_region> summary);
    void getVodRegionSignal(OAIOn_demand_region summary);
    void getVodRegionsSignal(QList<OAIOn_demand_region> summary);
    void setVodRegionsSignal(OAIOn_demand_region summary);


    void addVodRegionSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_region summary);
    void deleteVodRegionSignalFull(OAIHttpRequestWorker *worker);
    void deleteVodRegionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOn_demand_region> summary);
    void getRegionSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_region summary);
    void getRegionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOn_demand_region> summary);
    void getVodRegionSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_region summary);
    void getVodRegionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOn_demand_region> summary);
    void setVodRegionsSignalFull(OAIHttpRequestWorker *worker, OAIOn_demand_region summary);

    Q_DECL_DEPRECATED_X("Use addVodRegionSignalError() instead")
    void addVodRegionSignalE(OAIOn_demand_region summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addVodRegionSignalError(OAIOn_demand_region summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVodRegionSignalError() instead")
    void deleteVodRegionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVodRegionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVodRegionsSignalError() instead")
    void deleteVodRegionsSignalE(QList<OAIOn_demand_region> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVodRegionsSignalError(QList<OAIOn_demand_region> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegionSignalError() instead")
    void getRegionSignalE(OAIOn_demand_region summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegionSignalError(OAIOn_demand_region summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegionsSignalError() instead")
    void getRegionsSignalE(QList<OAIOn_demand_region> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegionsSignalError(QList<OAIOn_demand_region> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodRegionSignalError() instead")
    void getVodRegionSignalE(OAIOn_demand_region summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodRegionSignalError(OAIOn_demand_region summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodRegionsSignalError() instead")
    void getVodRegionsSignalE(QList<OAIOn_demand_region> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodRegionsSignalError(QList<OAIOn_demand_region> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setVodRegionsSignalError() instead")
    void setVodRegionsSignalE(OAIOn_demand_region summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setVodRegionsSignalError(OAIOn_demand_region summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addVodRegionSignalErrorFull() instead")
    void addVodRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVodRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVodRegionSignalErrorFull() instead")
    void deleteVodRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVodRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVodRegionsSignalErrorFull() instead")
    void deleteVodRegionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVodRegionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegionSignalErrorFull() instead")
    void getRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegionsSignalErrorFull() instead")
    void getRegionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodRegionSignalErrorFull() instead")
    void getVodRegionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodRegionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodRegionsSignalErrorFull() instead")
    void getVodRegionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodRegionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setVodRegionsSignalErrorFull() instead")
    void setVodRegionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setVodRegionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
