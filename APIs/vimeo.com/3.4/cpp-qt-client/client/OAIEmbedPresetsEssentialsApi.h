/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEmbedPresetsEssentialsApi_H
#define OAI_OAIEmbedPresetsEssentialsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEdit_embed_preset_alt1_request.h"
#include "OAILegacy_error.h"
#include "OAIPresets.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEmbedPresetsEssentialsApi : public QObject {
    Q_OBJECT

public:
    OAIEmbedPresetsEssentialsApi(const int timeOut = 0);
    ~OAIEmbedPresetsEssentialsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  preset_id double [required]
    * @param[in]  user_id double [required]
    * @param[in]  oai_edit_embed_preset_alt1_request OAIEdit_embed_preset_alt1_request [optional]
    */
    virtual void editEmbedPreset(const double &preset_id, const double &user_id, const ::OpenAPI::OptionalParam<OAIEdit_embed_preset_alt1_request> &oai_edit_embed_preset_alt1_request = ::OpenAPI::OptionalParam<OAIEdit_embed_preset_alt1_request>());

    /**
    * @param[in]  preset_id double [required]
    * @param[in]  oai_edit_embed_preset_alt1_request OAIEdit_embed_preset_alt1_request [optional]
    */
    virtual void editEmbedPresetAlt1(const double &preset_id, const ::OpenAPI::OptionalParam<OAIEdit_embed_preset_alt1_request> &oai_edit_embed_preset_alt1_request = ::OpenAPI::OptionalParam<OAIEdit_embed_preset_alt1_request>());

    /**
    * @param[in]  preset_id double [required]
    * @param[in]  user_id double [required]
    */
    virtual void getEmbedPreset(const double &preset_id, const double &user_id);

    /**
    * @param[in]  preset_id double [required]
    */
    virtual void getEmbedPresetAlt1(const double &preset_id);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getEmbedPresets(const double &user_id, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getEmbedPresetsAlt1(const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void editEmbedPresetCallback(OAIHttpRequestWorker *worker);
    void editEmbedPresetAlt1Callback(OAIHttpRequestWorker *worker);
    void getEmbedPresetCallback(OAIHttpRequestWorker *worker);
    void getEmbedPresetAlt1Callback(OAIHttpRequestWorker *worker);
    void getEmbedPresetsCallback(OAIHttpRequestWorker *worker);
    void getEmbedPresetsAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void editEmbedPresetSignal(OAIPresets summary);
    void editEmbedPresetAlt1Signal(OAIPresets summary);
    void getEmbedPresetSignal(OAIPresets summary);
    void getEmbedPresetAlt1Signal(OAIPresets summary);
    void getEmbedPresetsSignal(QList<OAIPresets> summary);
    void getEmbedPresetsAlt1Signal(QList<OAIPresets> summary);


    void editEmbedPresetSignalFull(OAIHttpRequestWorker *worker, OAIPresets summary);
    void editEmbedPresetAlt1SignalFull(OAIHttpRequestWorker *worker, OAIPresets summary);
    void getEmbedPresetSignalFull(OAIHttpRequestWorker *worker, OAIPresets summary);
    void getEmbedPresetAlt1SignalFull(OAIHttpRequestWorker *worker, OAIPresets summary);
    void getEmbedPresetsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPresets> summary);
    void getEmbedPresetsAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIPresets> summary);

    Q_DECL_DEPRECATED_X("Use editEmbedPresetSignalError() instead")
    void editEmbedPresetSignalE(OAIPresets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editEmbedPresetSignalError(OAIPresets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editEmbedPresetAlt1SignalError() instead")
    void editEmbedPresetAlt1SignalE(OAIPresets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editEmbedPresetAlt1SignalError(OAIPresets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmbedPresetSignalError() instead")
    void getEmbedPresetSignalE(OAIPresets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmbedPresetSignalError(OAIPresets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmbedPresetAlt1SignalError() instead")
    void getEmbedPresetAlt1SignalE(OAIPresets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmbedPresetAlt1SignalError(OAIPresets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmbedPresetsSignalError() instead")
    void getEmbedPresetsSignalE(QList<OAIPresets> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmbedPresetsSignalError(QList<OAIPresets> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmbedPresetsAlt1SignalError() instead")
    void getEmbedPresetsAlt1SignalE(QList<OAIPresets> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmbedPresetsAlt1SignalError(QList<OAIPresets> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use editEmbedPresetSignalErrorFull() instead")
    void editEmbedPresetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editEmbedPresetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editEmbedPresetAlt1SignalErrorFull() instead")
    void editEmbedPresetAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editEmbedPresetAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmbedPresetSignalErrorFull() instead")
    void getEmbedPresetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmbedPresetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmbedPresetAlt1SignalErrorFull() instead")
    void getEmbedPresetAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmbedPresetAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmbedPresetsSignalErrorFull() instead")
    void getEmbedPresetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmbedPresetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmbedPresetsAlt1SignalErrorFull() instead")
    void getEmbedPresetsAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmbedPresetsAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
