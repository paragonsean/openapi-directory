/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILikesEssentialsApi_H
#define OAI_OAILikesEssentialsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILegacy_error.h"
#include "OAIUser.h"
#include "OAIVideo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILikesEssentialsApi : public QObject {
    Q_OBJECT

public:
    OAILikesEssentialsApi(const int timeOut = 0);
    ~OAILikesEssentialsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void checkIfUserLikedVideo(const double &user_id, const double &video_id);

    /**
    * @param[in]  video_id double [required]
    */
    virtual void checkIfUserLikedVideoAlt1(const double &video_id);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  filter QString [optional]
    * @param[in]  filter_embeddable bool [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getLikes(const double &user_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &filter_embeddable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter QString [optional]
    * @param[in]  filter_embeddable bool [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getLikesAlt1(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &filter_embeddable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  video_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getVideoLikes(const double &video_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getVideoLikesAlt1(const double &channel_id, const double &video_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ondemand_id double [required]
    * @param[in]  direction QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getVodLikes(const double &ondemand_id, const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void likeVideo(const double &user_id, const double &video_id);

    /**
    * @param[in]  video_id double [required]
    */
    virtual void likeVideoAlt1(const double &video_id);

    /**
    * @param[in]  user_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void unlikeVideo(const double &user_id, const double &video_id);

    /**
    * @param[in]  video_id double [required]
    */
    virtual void unlikeVideoAlt1(const double &video_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkIfUserLikedVideoCallback(OAIHttpRequestWorker *worker);
    void checkIfUserLikedVideoAlt1Callback(OAIHttpRequestWorker *worker);
    void getLikesCallback(OAIHttpRequestWorker *worker);
    void getLikesAlt1Callback(OAIHttpRequestWorker *worker);
    void getVideoLikesCallback(OAIHttpRequestWorker *worker);
    void getVideoLikesAlt1Callback(OAIHttpRequestWorker *worker);
    void getVodLikesCallback(OAIHttpRequestWorker *worker);
    void likeVideoCallback(OAIHttpRequestWorker *worker);
    void likeVideoAlt1Callback(OAIHttpRequestWorker *worker);
    void unlikeVideoCallback(OAIHttpRequestWorker *worker);
    void unlikeVideoAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkIfUserLikedVideoSignal();
    void checkIfUserLikedVideoAlt1Signal();
    void getLikesSignal(QList<OAIVideo> summary);
    void getLikesAlt1Signal(QList<OAIVideo> summary);
    void getVideoLikesSignal(QList<OAIUser> summary);
    void getVideoLikesAlt1Signal(QList<OAIUser> summary);
    void getVodLikesSignal(QList<OAIUser> summary);
    void likeVideoSignal();
    void likeVideoAlt1Signal();
    void unlikeVideoSignal();
    void unlikeVideoAlt1Signal();


    void checkIfUserLikedVideoSignalFull(OAIHttpRequestWorker *worker);
    void checkIfUserLikedVideoAlt1SignalFull(OAIHttpRequestWorker *worker);
    void getLikesSignalFull(OAIHttpRequestWorker *worker, QList<OAIVideo> summary);
    void getLikesAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIVideo> summary);
    void getVideoLikesSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void getVideoLikesAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void getVodLikesSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void likeVideoSignalFull(OAIHttpRequestWorker *worker);
    void likeVideoAlt1SignalFull(OAIHttpRequestWorker *worker);
    void unlikeVideoSignalFull(OAIHttpRequestWorker *worker);
    void unlikeVideoAlt1SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use checkIfUserLikedVideoSignalError() instead")
    void checkIfUserLikedVideoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserLikedVideoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkIfUserLikedVideoAlt1SignalError() instead")
    void checkIfUserLikedVideoAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserLikedVideoAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLikesSignalError() instead")
    void getLikesSignalE(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLikesSignalError(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLikesAlt1SignalError() instead")
    void getLikesAlt1SignalE(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLikesAlt1SignalError(QList<OAIVideo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoLikesSignalError() instead")
    void getVideoLikesSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoLikesSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoLikesAlt1SignalError() instead")
    void getVideoLikesAlt1SignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoLikesAlt1SignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodLikesSignalError() instead")
    void getVodLikesSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodLikesSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use likeVideoSignalError() instead")
    void likeVideoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void likeVideoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use likeVideoAlt1SignalError() instead")
    void likeVideoAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void likeVideoAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlikeVideoSignalError() instead")
    void unlikeVideoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unlikeVideoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlikeVideoAlt1SignalError() instead")
    void unlikeVideoAlt1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unlikeVideoAlt1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkIfUserLikedVideoSignalErrorFull() instead")
    void checkIfUserLikedVideoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserLikedVideoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkIfUserLikedVideoAlt1SignalErrorFull() instead")
    void checkIfUserLikedVideoAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkIfUserLikedVideoAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLikesSignalErrorFull() instead")
    void getLikesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLikesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLikesAlt1SignalErrorFull() instead")
    void getLikesAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLikesAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoLikesSignalErrorFull() instead")
    void getVideoLikesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoLikesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoLikesAlt1SignalErrorFull() instead")
    void getVideoLikesAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoLikesAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVodLikesSignalErrorFull() instead")
    void getVodLikesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVodLikesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use likeVideoSignalErrorFull() instead")
    void likeVideoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void likeVideoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use likeVideoAlt1SignalErrorFull() instead")
    void likeVideoAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void likeVideoAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlikeVideoSignalErrorFull() instead")
    void unlikeVideoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unlikeVideoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlikeVideoAlt1SignalErrorFull() instead")
    void unlikeVideoAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unlikeVideoAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
