/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo_versions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo_versions::OAIVideo_versions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo_versions::OAIVideo_versions() {
    this->initializeModel();
}

OAIVideo_versions::~OAIVideo_versions() {}

void OAIVideo_versions::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_app_isSet = false;
    m_app_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_filesize_isSet = false;
    m_filesize_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_modified_time_isSet = false;
    m_modified_time_isValid = false;

    m_play_isSet = false;
    m_play_isValid = false;

    m_upload_isSet = false;
    m_upload_isValid = false;

    m_upload_date_isSet = false;
    m_upload_date_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIVideo_versions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo_versions::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_filesize_isValid = ::OpenAPI::fromJsonValue(m_filesize, json[QString("filesize")]);
    m_filesize_isSet = !json[QString("filesize")].isNull() && m_filesize_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_modified_time_isValid = ::OpenAPI::fromJsonValue(m_modified_time, json[QString("modified_time")]);
    m_modified_time_isSet = !json[QString("modified_time")].isNull() && m_modified_time_isValid;

    m_play_isValid = ::OpenAPI::fromJsonValue(m_play, json[QString("play")]);
    m_play_isSet = !json[QString("play")].isNull() && m_play_isValid;

    m_upload_isValid = ::OpenAPI::fromJsonValue(m_upload, json[QString("upload")]);
    m_upload_isSet = !json[QString("upload")].isNull() && m_upload_isValid;

    m_upload_date_isValid = ::OpenAPI::fromJsonValue(m_upload_date, json[QString("upload_date")]);
    m_upload_date_isSet = !json[QString("upload_date")].isNull() && m_upload_date_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIVideo_versions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo_versions::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_app.isSet()) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_filesize_isSet) {
        obj.insert(QString("filesize"), ::OpenAPI::toJsonValue(m_filesize));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_modified_time_isSet) {
        obj.insert(QString("modified_time"), ::OpenAPI::toJsonValue(m_modified_time));
    }
    if (m_play.isSet()) {
        obj.insert(QString("play"), ::OpenAPI::toJsonValue(m_play));
    }
    if (m_upload.isSet()) {
        obj.insert(QString("upload"), ::OpenAPI::toJsonValue(m_upload));
    }
    if (m_upload_date_isSet) {
        obj.insert(QString("upload_date"), ::OpenAPI::toJsonValue(m_upload_date));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

bool OAIVideo_versions::isActive() const {
    return m_active;
}
void OAIVideo_versions::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIVideo_versions::is_active_Set() const{
    return m_active_isSet;
}

bool OAIVideo_versions::is_active_Valid() const{
    return m_active_isValid;
}

OAIApi_app OAIVideo_versions::getApp() const {
    return m_app;
}
void OAIVideo_versions::setApp(const OAIApi_app &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAIVideo_versions::is_app_Set() const{
    return m_app_isSet;
}

bool OAIVideo_versions::is_app_Valid() const{
    return m_app_isValid;
}

QString OAIVideo_versions::getCreatedTime() const {
    return m_created_time;
}
void OAIVideo_versions::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIVideo_versions::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIVideo_versions::is_created_time_Valid() const{
    return m_created_time_isValid;
}

double OAIVideo_versions::getDuration() const {
    return m_duration;
}
void OAIVideo_versions::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIVideo_versions::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIVideo_versions::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIVideo_versions::getFilename() const {
    return m_filename;
}
void OAIVideo_versions::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIVideo_versions::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIVideo_versions::is_filename_Valid() const{
    return m_filename_isValid;
}

double OAIVideo_versions::getFilesize() const {
    return m_filesize;
}
void OAIVideo_versions::setFilesize(const double &filesize) {
    m_filesize = filesize;
    m_filesize_isSet = true;
}

bool OAIVideo_versions::is_filesize_Set() const{
    return m_filesize_isSet;
}

bool OAIVideo_versions::is_filesize_Valid() const{
    return m_filesize_isValid;
}

OAIVideo_versions_metadata OAIVideo_versions::getMetadata() const {
    return m_metadata;
}
void OAIVideo_versions::setMetadata(const OAIVideo_versions_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIVideo_versions::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIVideo_versions::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIVideo_versions::getModifiedTime() const {
    return m_modified_time;
}
void OAIVideo_versions::setModifiedTime(const QString &modified_time) {
    m_modified_time = modified_time;
    m_modified_time_isSet = true;
}

bool OAIVideo_versions::is_modified_time_Set() const{
    return m_modified_time_isSet;
}

bool OAIVideo_versions::is_modified_time_Valid() const{
    return m_modified_time_isValid;
}

OAIPlay OAIVideo_versions::getPlay() const {
    return m_play;
}
void OAIVideo_versions::setPlay(const OAIPlay &play) {
    m_play = play;
    m_play_isSet = true;
}

bool OAIVideo_versions::is_play_Set() const{
    return m_play_isSet;
}

bool OAIVideo_versions::is_play_Valid() const{
    return m_play_isValid;
}

OAIVideo_versions_upload OAIVideo_versions::getUpload() const {
    return m_upload;
}
void OAIVideo_versions::setUpload(const OAIVideo_versions_upload &upload) {
    m_upload = upload;
    m_upload_isSet = true;
}

bool OAIVideo_versions::is_upload_Set() const{
    return m_upload_isSet;
}

bool OAIVideo_versions::is_upload_Valid() const{
    return m_upload_isValid;
}

QString OAIVideo_versions::getUploadDate() const {
    return m_upload_date;
}
void OAIVideo_versions::setUploadDate(const QString &upload_date) {
    m_upload_date = upload_date;
    m_upload_date_isSet = true;
}

bool OAIVideo_versions::is_upload_date_Set() const{
    return m_upload_date_isSet;
}

bool OAIVideo_versions::is_upload_date_Valid() const{
    return m_upload_date_isValid;
}

QString OAIVideo_versions::getUri() const {
    return m_uri;
}
void OAIVideo_versions::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIVideo_versions::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIVideo_versions::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIUser OAIVideo_versions::getUser() const {
    return m_user;
}
void OAIVideo_versions::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIVideo_versions::is_user_Set() const{
    return m_user_isSet;
}

bool OAIVideo_versions::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIVideo_versions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filesize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo_versions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_app_isValid && m_created_time_isValid && m_duration_isValid && m_filename_isValid && m_filesize_isValid && m_metadata_isValid && m_modified_time_isValid && m_play_isValid && m_upload_isValid && m_upload_date_isValid && m_uri_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
