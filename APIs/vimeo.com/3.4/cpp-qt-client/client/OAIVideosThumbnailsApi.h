/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVideosThumbnailsApi_H
#define OAI_OAIVideosThumbnailsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_video_thumbnail_alt1_request.h"
#include "OAIEdit_video_thumbnail_request.h"
#include "OAIPicture.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVideosThumbnailsApi : public QObject {
    Q_OBJECT

public:
    OAIVideosThumbnailsApi(const int timeOut = 0);
    ~OAIVideosThumbnailsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  video_id double [required]
    * @param[in]  oai_create_video_thumbnail_alt1_request OAICreate_video_thumbnail_alt1_request [optional]
    */
    virtual void createVideoThumbnail(const double &video_id, const ::OpenAPI::OptionalParam<OAICreate_video_thumbnail_alt1_request> &oai_create_video_thumbnail_alt1_request = ::OpenAPI::OptionalParam<OAICreate_video_thumbnail_alt1_request>());

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  oai_create_video_thumbnail_alt1_request OAICreate_video_thumbnail_alt1_request [optional]
    */
    virtual void createVideoThumbnailAlt1(const double &channel_id, const double &video_id, const ::OpenAPI::OptionalParam<OAICreate_video_thumbnail_alt1_request> &oai_create_video_thumbnail_alt1_request = ::OpenAPI::OptionalParam<OAICreate_video_thumbnail_alt1_request>());

    /**
    * @param[in]  picture_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void deleteVideoThumbnail(const double &picture_id, const double &video_id);

    /**
    * @param[in]  picture_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  oai_edit_video_thumbnail_request OAIEdit_video_thumbnail_request [optional]
    */
    virtual void editVideoThumbnail(const double &picture_id, const double &video_id, const ::OpenAPI::OptionalParam<OAIEdit_video_thumbnail_request> &oai_edit_video_thumbnail_request = ::OpenAPI::OptionalParam<OAIEdit_video_thumbnail_request>());

    /**
    * @param[in]  picture_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void getVideoThumbnail(const double &picture_id, const double &video_id);

    /**
    * @param[in]  video_id double [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getVideoThumbnails(const double &video_id, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  page double [optional]
    * @param[in]  per_page double [optional]
    */
    virtual void getVideoThumbnailsAlt1(const double &channel_id, const double &video_id, const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &per_page = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createVideoThumbnailCallback(OAIHttpRequestWorker *worker);
    void createVideoThumbnailAlt1Callback(OAIHttpRequestWorker *worker);
    void deleteVideoThumbnailCallback(OAIHttpRequestWorker *worker);
    void editVideoThumbnailCallback(OAIHttpRequestWorker *worker);
    void getVideoThumbnailCallback(OAIHttpRequestWorker *worker);
    void getVideoThumbnailsCallback(OAIHttpRequestWorker *worker);
    void getVideoThumbnailsAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createVideoThumbnailSignal(OAIPicture summary);
    void createVideoThumbnailAlt1Signal(OAIPicture summary);
    void deleteVideoThumbnailSignal();
    void editVideoThumbnailSignal(OAIPicture summary);
    void getVideoThumbnailSignal(OAIPicture summary);
    void getVideoThumbnailsSignal(QList<OAIPicture> summary);
    void getVideoThumbnailsAlt1Signal(QList<OAIPicture> summary);


    void createVideoThumbnailSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void createVideoThumbnailAlt1SignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void deleteVideoThumbnailSignalFull(OAIHttpRequestWorker *worker);
    void editVideoThumbnailSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void getVideoThumbnailSignalFull(OAIHttpRequestWorker *worker, OAIPicture summary);
    void getVideoThumbnailsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPicture> summary);
    void getVideoThumbnailsAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIPicture> summary);

    Q_DECL_DEPRECATED_X("Use createVideoThumbnailSignalError() instead")
    void createVideoThumbnailSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVideoThumbnailSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVideoThumbnailAlt1SignalError() instead")
    void createVideoThumbnailAlt1SignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVideoThumbnailAlt1SignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoThumbnailSignalError() instead")
    void deleteVideoThumbnailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoThumbnailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editVideoThumbnailSignalError() instead")
    void editVideoThumbnailSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editVideoThumbnailSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoThumbnailSignalError() instead")
    void getVideoThumbnailSignalE(OAIPicture summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoThumbnailSignalError(OAIPicture summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoThumbnailsSignalError() instead")
    void getVideoThumbnailsSignalE(QList<OAIPicture> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoThumbnailsSignalError(QList<OAIPicture> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoThumbnailsAlt1SignalError() instead")
    void getVideoThumbnailsAlt1SignalE(QList<OAIPicture> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoThumbnailsAlt1SignalError(QList<OAIPicture> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createVideoThumbnailSignalErrorFull() instead")
    void createVideoThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVideoThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVideoThumbnailAlt1SignalErrorFull() instead")
    void createVideoThumbnailAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVideoThumbnailAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoThumbnailSignalErrorFull() instead")
    void deleteVideoThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editVideoThumbnailSignalErrorFull() instead")
    void editVideoThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editVideoThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoThumbnailSignalErrorFull() instead")
    void getVideoThumbnailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoThumbnailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoThumbnailsSignalErrorFull() instead")
    void getVideoThumbnailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoThumbnailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoThumbnailsAlt1SignalErrorFull() instead")
    void getVideoThumbnailsAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoThumbnailsAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
