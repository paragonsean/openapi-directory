/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOn_demand_season.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOn_demand_season::OAIOn_demand_season(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOn_demand_season::OAIOn_demand_season() {
    this->initializeModel();
}

OAIOn_demand_season::~OAIOn_demand_season() {}

void OAIOn_demand_season::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_resource_key_isSet = false;
    m_resource_key_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIOn_demand_season::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOn_demand_season::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_resource_key_isValid = ::OpenAPI::fromJsonValue(m_resource_key, json[QString("resource_key")]);
    m_resource_key_isSet = !json[QString("resource_key")].isNull() && m_resource_key_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIOn_demand_season::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOn_demand_season::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_resource_key_isSet) {
        obj.insert(QString("resource_key"), ::OpenAPI::toJsonValue(m_resource_key));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIOn_demand_season::getDescription() const {
    return m_description;
}
void OAIOn_demand_season::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOn_demand_season::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOn_demand_season::is_description_Valid() const{
    return m_description_isValid;
}

OAIOn_demand_season_metadata OAIOn_demand_season::getMetadata() const {
    return m_metadata;
}
void OAIOn_demand_season::setMetadata(const OAIOn_demand_season_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIOn_demand_season::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIOn_demand_season::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIOn_demand_season::getName() const {
    return m_name;
}
void OAIOn_demand_season::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOn_demand_season::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOn_demand_season::is_name_Valid() const{
    return m_name_isValid;
}

double OAIOn_demand_season::getPosition() const {
    return m_position;
}
void OAIOn_demand_season::setPosition(const double &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIOn_demand_season::is_position_Set() const{
    return m_position_isSet;
}

bool OAIOn_demand_season::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIOn_demand_season::getResourceKey() const {
    return m_resource_key;
}
void OAIOn_demand_season::setResourceKey(const QString &resource_key) {
    m_resource_key = resource_key;
    m_resource_key_isSet = true;
}

bool OAIOn_demand_season::is_resource_key_Set() const{
    return m_resource_key_isSet;
}

bool OAIOn_demand_season::is_resource_key_Valid() const{
    return m_resource_key_isValid;
}

QString OAIOn_demand_season::getType() const {
    return m_type;
}
void OAIOn_demand_season::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOn_demand_season::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOn_demand_season::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOn_demand_season::getUri() const {
    return m_uri;
}
void OAIOn_demand_season::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIOn_demand_season::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIOn_demand_season::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIUser OAIOn_demand_season::getUser() const {
    return m_user;
}
void OAIOn_demand_season::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIOn_demand_season::is_user_Set() const{
    return m_user_isSet;
}

bool OAIOn_demand_season::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIOn_demand_season::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOn_demand_season::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_metadata_isValid && m_name_isValid && m_position_isValid && m_resource_key_isValid && m_type_isValid && m_uri_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
