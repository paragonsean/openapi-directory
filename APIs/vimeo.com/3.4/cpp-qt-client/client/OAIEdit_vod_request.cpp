/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdit_vod_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdit_vod_request::OAIEdit_vod_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdit_vod_request::OAIEdit_vod_request() {
    this->initializeModel();
}

OAIEdit_vod_request::~OAIEdit_vod_request() {}

void OAIEdit_vod_request::initializeModel() {

    m_link_isSet = false;
    m_link_isValid = false;

    m_preorder_isSet = false;
    m_preorder_isValid = false;

    m_publish_isSet = false;
    m_publish_isValid = false;

    m_publish_when_ready_isSet = false;
    m_publish_when_ready_isValid = false;
}

void OAIEdit_vod_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdit_vod_request::fromJsonObject(QJsonObject json) {

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_preorder_isValid = ::OpenAPI::fromJsonValue(m_preorder, json[QString("preorder")]);
    m_preorder_isSet = !json[QString("preorder")].isNull() && m_preorder_isValid;

    m_publish_isValid = ::OpenAPI::fromJsonValue(m_publish, json[QString("publish")]);
    m_publish_isSet = !json[QString("publish")].isNull() && m_publish_isValid;

    m_publish_when_ready_isValid = ::OpenAPI::fromJsonValue(m_publish_when_ready, json[QString("publish_when_ready")]);
    m_publish_when_ready_isSet = !json[QString("publish_when_ready")].isNull() && m_publish_when_ready_isValid;
}

QString OAIEdit_vod_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdit_vod_request::asJsonObject() const {
    QJsonObject obj;
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_preorder.isSet()) {
        obj.insert(QString("preorder"), ::OpenAPI::toJsonValue(m_preorder));
    }
    if (m_publish.isSet()) {
        obj.insert(QString("publish"), ::OpenAPI::toJsonValue(m_publish));
    }
    if (m_publish_when_ready_isSet) {
        obj.insert(QString("publish_when_ready"), ::OpenAPI::toJsonValue(m_publish_when_ready));
    }
    return obj;
}

QString OAIEdit_vod_request::getLink() const {
    return m_link;
}
void OAIEdit_vod_request::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIEdit_vod_request::is_link_Set() const{
    return m_link_isSet;
}

bool OAIEdit_vod_request::is_link_Valid() const{
    return m_link_isValid;
}

OAIEdit_vod_request_preorder OAIEdit_vod_request::getPreorder() const {
    return m_preorder;
}
void OAIEdit_vod_request::setPreorder(const OAIEdit_vod_request_preorder &preorder) {
    m_preorder = preorder;
    m_preorder_isSet = true;
}

bool OAIEdit_vod_request::is_preorder_Set() const{
    return m_preorder_isSet;
}

bool OAIEdit_vod_request::is_preorder_Valid() const{
    return m_preorder_isValid;
}

OAIEdit_vod_request_publish OAIEdit_vod_request::getPublish() const {
    return m_publish;
}
void OAIEdit_vod_request::setPublish(const OAIEdit_vod_request_publish &publish) {
    m_publish = publish;
    m_publish_isSet = true;
}

bool OAIEdit_vod_request::is_publish_Set() const{
    return m_publish_isSet;
}

bool OAIEdit_vod_request::is_publish_Valid() const{
    return m_publish_isValid;
}

bool OAIEdit_vod_request::isPublishWhenReady() const {
    return m_publish_when_ready;
}
void OAIEdit_vod_request::setPublishWhenReady(const bool &publish_when_ready) {
    m_publish_when_ready = publish_when_ready;
    m_publish_when_ready_isSet = true;
}

bool OAIEdit_vod_request::is_publish_when_ready_Set() const{
    return m_publish_when_ready_isSet;
}

bool OAIEdit_vod_request::is_publish_when_ready_Valid() const{
    return m_publish_when_ready_isValid;
}

bool OAIEdit_vod_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preorder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_when_ready_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdit_vod_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
