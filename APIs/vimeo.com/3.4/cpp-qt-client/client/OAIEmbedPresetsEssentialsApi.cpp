/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbedPresetsEssentialsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIEmbedPresetsEssentialsApi::OAIEmbedPresetsEssentialsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIEmbedPresetsEssentialsApi::~OAIEmbedPresetsEssentialsApi() {
}

void OAIEmbedPresetsEssentialsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.vimeo.com"),
    "Vimeo.com",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("editEmbedPreset", defaultConf);
    _serverIndices.insert("editEmbedPreset", 0);
    _serverConfigs.insert("editEmbedPresetAlt1", defaultConf);
    _serverIndices.insert("editEmbedPresetAlt1", 0);
    _serverConfigs.insert("getEmbedPreset", defaultConf);
    _serverIndices.insert("getEmbedPreset", 0);
    _serverConfigs.insert("getEmbedPresetAlt1", defaultConf);
    _serverIndices.insert("getEmbedPresetAlt1", 0);
    _serverConfigs.insert("getEmbedPresets", defaultConf);
    _serverIndices.insert("getEmbedPresets", 0);
    _serverConfigs.insert("getEmbedPresetsAlt1", defaultConf);
    _serverIndices.insert("getEmbedPresetsAlt1", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIEmbedPresetsEssentialsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIEmbedPresetsEssentialsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIEmbedPresetsEssentialsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIEmbedPresetsEssentialsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIEmbedPresetsEssentialsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIEmbedPresetsEssentialsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIEmbedPresetsEssentialsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIEmbedPresetsEssentialsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIEmbedPresetsEssentialsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIEmbedPresetsEssentialsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEmbedPresetsEssentialsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEmbedPresetsEssentialsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIEmbedPresetsEssentialsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIEmbedPresetsEssentialsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIEmbedPresetsEssentialsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIEmbedPresetsEssentialsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIEmbedPresetsEssentialsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIEmbedPresetsEssentialsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIEmbedPresetsEssentialsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIEmbedPresetsEssentialsApi::editEmbedPreset(const double &preset_id, const double &user_id, const ::OpenAPI::OptionalParam<OAIEdit_embed_preset_alt1_request> &oai_edit_embed_preset_alt1_request) {
    QString fullPath = QString(_serverConfigs["editEmbedPreset"][_serverIndices.value("editEmbedPreset")].URL()+"/users/{user_id}/presets/{preset_id}");
    
    
    {
        QString preset_idPathParam("{");
        preset_idPathParam.append("preset_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "preset_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"preset_id"+pathSuffix : pathPrefix;
        fullPath.replace(preset_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(preset_id)));
    }
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("user_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_id"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (oai_edit_embed_preset_alt1_request.hasValue()){

        
        QByteArray output = oai_edit_embed_preset_alt1_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::editEmbedPresetCallback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _OauthMethod = 3;
    _authFlow.unlink();
    _implicitFlow.unlink();
    _passwordFlow.unlink();
    _credentialFlow.link();
    QStringList scope;
    scope.append("create");
    scope.append("delete");
    scope.append("edit");
    scope.append("email");
    scope.append("interact");
    scope.append("private");
    scope.append("promo_codes");
    scope.append("public");
    scope.append("purchase");
    scope.append("purchased");
    scope.append("stats");
    scope.append("upload");
    scope.append("video_files");
    auto token = _credentialFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::editEmbedPresetCallback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;

    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("create");
    scope.append("delete");
    scope.append("edit");
    scope.append("email");
    scope.append("interact");
    scope.append("private");
    scope.append("promo_codes");
    scope.append("public");
    scope.append("purchase");
    scope.append("purchased");
    scope.append("stats");
    scope.append("upload");
    scope.append("video_files");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::editEmbedPresetCallback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIEmbedPresetsEssentialsApi::editEmbedPresetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPresets output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT editEmbedPresetSignal(output);
        Q_EMIT editEmbedPresetSignalFull(worker, output);

    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_credentialFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("create");
        scope.append("delete");
        scope.append("edit");
        scope.append("email");
        scope.append("interact");
        scope.append("private");
        scope.append("promo_codes");
        scope.append("public");
        scope.append("purchase");
        scope.append("purchased");
        scope.append("stats");
        scope.append("upload");
        scope.append("video_files");
        QString scopeStr = scope.join(" ");
        QString tokenUrl("/oauth/authorize/client");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _credentialFlow.setVariables(tokenUrl , scopeStr, "clientId", "clientSecret");
        Q_EMIT _credentialFlow.authenticationNeeded();

    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("create");
        scope.append("delete");
        scope.append("edit");
        scope.append("email");
        scope.append("interact");
        scope.append("private");
        scope.append("promo_codes");
        scope.append("public");
        scope.append("purchase");
        scope.append("purchased");
        scope.append("stats");
        scope.append("upload");
        scope.append("video_files");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("/oauth/authorize");
        QString tokenUrl("/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT editEmbedPresetSignalE(output, error_type, error_str);
        Q_EMIT editEmbedPresetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT editEmbedPresetSignalError(output, error_type, error_str);
        Q_EMIT editEmbedPresetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEmbedPresetsEssentialsApi::editEmbedPresetAlt1(const double &preset_id, const ::OpenAPI::OptionalParam<OAIEdit_embed_preset_alt1_request> &oai_edit_embed_preset_alt1_request) {
    QString fullPath = QString(_serverConfigs["editEmbedPresetAlt1"][_serverIndices.value("editEmbedPresetAlt1")].URL()+"/me/presets/{preset_id}");
    
    
    {
        QString preset_idPathParam("{");
        preset_idPathParam.append("preset_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "preset_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"preset_id"+pathSuffix : pathPrefix;
        fullPath.replace(preset_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(preset_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (oai_edit_embed_preset_alt1_request.hasValue()){

        
        QByteArray output = oai_edit_embed_preset_alt1_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::editEmbedPresetAlt1Callback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _OauthMethod = 3;
    _authFlow.unlink();
    _implicitFlow.unlink();
    _passwordFlow.unlink();
    _credentialFlow.link();
    QStringList scope;
    scope.append("create");
    scope.append("delete");
    scope.append("edit");
    scope.append("email");
    scope.append("interact");
    scope.append("private");
    scope.append("promo_codes");
    scope.append("public");
    scope.append("purchase");
    scope.append("purchased");
    scope.append("stats");
    scope.append("upload");
    scope.append("video_files");
    auto token = _credentialFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::editEmbedPresetAlt1Callback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;

    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("create");
    scope.append("delete");
    scope.append("edit");
    scope.append("email");
    scope.append("interact");
    scope.append("private");
    scope.append("promo_codes");
    scope.append("public");
    scope.append("purchase");
    scope.append("purchased");
    scope.append("stats");
    scope.append("upload");
    scope.append("video_files");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::editEmbedPresetAlt1Callback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIEmbedPresetsEssentialsApi::editEmbedPresetAlt1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPresets output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT editEmbedPresetAlt1Signal(output);
        Q_EMIT editEmbedPresetAlt1SignalFull(worker, output);

    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_credentialFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("create");
        scope.append("delete");
        scope.append("edit");
        scope.append("email");
        scope.append("interact");
        scope.append("private");
        scope.append("promo_codes");
        scope.append("public");
        scope.append("purchase");
        scope.append("purchased");
        scope.append("stats");
        scope.append("upload");
        scope.append("video_files");
        QString scopeStr = scope.join(" ");
        QString tokenUrl("/oauth/authorize/client");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _credentialFlow.setVariables(tokenUrl , scopeStr, "clientId", "clientSecret");
        Q_EMIT _credentialFlow.authenticationNeeded();

    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("create");
        scope.append("delete");
        scope.append("edit");
        scope.append("email");
        scope.append("interact");
        scope.append("private");
        scope.append("promo_codes");
        scope.append("public");
        scope.append("purchase");
        scope.append("purchased");
        scope.append("stats");
        scope.append("upload");
        scope.append("video_files");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("/oauth/authorize");
        QString tokenUrl("/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT editEmbedPresetAlt1SignalE(output, error_type, error_str);
        Q_EMIT editEmbedPresetAlt1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT editEmbedPresetAlt1SignalError(output, error_type, error_str);
        Q_EMIT editEmbedPresetAlt1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEmbedPresetsEssentialsApi::getEmbedPreset(const double &preset_id, const double &user_id) {
    QString fullPath = QString(_serverConfigs["getEmbedPreset"][_serverIndices.value("getEmbedPreset")].URL()+"/users/{user_id}/presets/{preset_id}");
    
    
    {
        QString preset_idPathParam("{");
        preset_idPathParam.append("preset_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "preset_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"preset_id"+pathSuffix : pathPrefix;
        fullPath.replace(preset_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(preset_id)));
    }
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("user_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_id"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::getEmbedPresetCallback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _OauthMethod = 3;
    _authFlow.unlink();
    _implicitFlow.unlink();
    _passwordFlow.unlink();
    _credentialFlow.link();
    QStringList scope;
    scope.append("create");
    scope.append("delete");
    scope.append("edit");
    scope.append("email");
    scope.append("interact");
    scope.append("private");
    scope.append("promo_codes");
    scope.append("public");
    scope.append("purchase");
    scope.append("purchased");
    scope.append("stats");
    scope.append("upload");
    scope.append("video_files");
    auto token = _credentialFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::getEmbedPresetCallback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;

    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("create");
    scope.append("delete");
    scope.append("edit");
    scope.append("email");
    scope.append("interact");
    scope.append("private");
    scope.append("promo_codes");
    scope.append("public");
    scope.append("purchase");
    scope.append("purchased");
    scope.append("stats");
    scope.append("upload");
    scope.append("video_files");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::getEmbedPresetCallback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIEmbedPresetsEssentialsApi::getEmbedPresetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPresets output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEmbedPresetSignal(output);
        Q_EMIT getEmbedPresetSignalFull(worker, output);

    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_credentialFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("create");
        scope.append("delete");
        scope.append("edit");
        scope.append("email");
        scope.append("interact");
        scope.append("private");
        scope.append("promo_codes");
        scope.append("public");
        scope.append("purchase");
        scope.append("purchased");
        scope.append("stats");
        scope.append("upload");
        scope.append("video_files");
        QString scopeStr = scope.join(" ");
        QString tokenUrl("/oauth/authorize/client");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _credentialFlow.setVariables(tokenUrl , scopeStr, "clientId", "clientSecret");
        Q_EMIT _credentialFlow.authenticationNeeded();

    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("create");
        scope.append("delete");
        scope.append("edit");
        scope.append("email");
        scope.append("interact");
        scope.append("private");
        scope.append("promo_codes");
        scope.append("public");
        scope.append("purchase");
        scope.append("purchased");
        scope.append("stats");
        scope.append("upload");
        scope.append("video_files");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("/oauth/authorize");
        QString tokenUrl("/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEmbedPresetSignalE(output, error_type, error_str);
        Q_EMIT getEmbedPresetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEmbedPresetSignalError(output, error_type, error_str);
        Q_EMIT getEmbedPresetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEmbedPresetsEssentialsApi::getEmbedPresetAlt1(const double &preset_id) {
    QString fullPath = QString(_serverConfigs["getEmbedPresetAlt1"][_serverIndices.value("getEmbedPresetAlt1")].URL()+"/me/presets/{preset_id}");
    
    
    {
        QString preset_idPathParam("{");
        preset_idPathParam.append("preset_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "preset_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"preset_id"+pathSuffix : pathPrefix;
        fullPath.replace(preset_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(preset_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::getEmbedPresetAlt1Callback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _OauthMethod = 3;
    _authFlow.unlink();
    _implicitFlow.unlink();
    _passwordFlow.unlink();
    _credentialFlow.link();
    QStringList scope;
    scope.append("create");
    scope.append("delete");
    scope.append("edit");
    scope.append("email");
    scope.append("interact");
    scope.append("private");
    scope.append("promo_codes");
    scope.append("public");
    scope.append("purchase");
    scope.append("purchased");
    scope.append("stats");
    scope.append("upload");
    scope.append("video_files");
    auto token = _credentialFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::getEmbedPresetAlt1Callback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;

    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("create");
    scope.append("delete");
    scope.append("edit");
    scope.append("email");
    scope.append("interact");
    scope.append("private");
    scope.append("promo_codes");
    scope.append("public");
    scope.append("purchase");
    scope.append("purchased");
    scope.append("stats");
    scope.append("upload");
    scope.append("video_files");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::getEmbedPresetAlt1Callback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIEmbedPresetsEssentialsApi::getEmbedPresetAlt1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPresets output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEmbedPresetAlt1Signal(output);
        Q_EMIT getEmbedPresetAlt1SignalFull(worker, output);

    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_credentialFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("create");
        scope.append("delete");
        scope.append("edit");
        scope.append("email");
        scope.append("interact");
        scope.append("private");
        scope.append("promo_codes");
        scope.append("public");
        scope.append("purchase");
        scope.append("purchased");
        scope.append("stats");
        scope.append("upload");
        scope.append("video_files");
        QString scopeStr = scope.join(" ");
        QString tokenUrl("/oauth/authorize/client");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _credentialFlow.setVariables(tokenUrl , scopeStr, "clientId", "clientSecret");
        Q_EMIT _credentialFlow.authenticationNeeded();

    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("create");
        scope.append("delete");
        scope.append("edit");
        scope.append("email");
        scope.append("interact");
        scope.append("private");
        scope.append("promo_codes");
        scope.append("public");
        scope.append("purchase");
        scope.append("purchased");
        scope.append("stats");
        scope.append("upload");
        scope.append("video_files");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("/oauth/authorize");
        QString tokenUrl("/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEmbedPresetAlt1SignalE(output, error_type, error_str);
        Q_EMIT getEmbedPresetAlt1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEmbedPresetAlt1SignalError(output, error_type, error_str);
        Q_EMIT getEmbedPresetAlt1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEmbedPresetsEssentialsApi::getEmbedPresets(const double &user_id, const ::OpenAPI::OptionalParam<double> &page, const ::OpenAPI::OptionalParam<double> &per_page) {
    QString fullPath = QString(_serverConfigs["getEmbedPresets"][_serverIndices.value("getEmbedPresets")].URL()+"/users/{user_id}/presets");
    
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("user_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_id"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::getEmbedPresetsCallback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _OauthMethod = 3;
    _authFlow.unlink();
    _implicitFlow.unlink();
    _passwordFlow.unlink();
    _credentialFlow.link();
    QStringList scope;
    scope.append("create");
    scope.append("delete");
    scope.append("edit");
    scope.append("email");
    scope.append("interact");
    scope.append("private");
    scope.append("promo_codes");
    scope.append("public");
    scope.append("purchase");
    scope.append("purchased");
    scope.append("stats");
    scope.append("upload");
    scope.append("video_files");
    auto token = _credentialFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::getEmbedPresetsCallback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;

    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("create");
    scope.append("delete");
    scope.append("edit");
    scope.append("email");
    scope.append("interact");
    scope.append("private");
    scope.append("promo_codes");
    scope.append("public");
    scope.append("purchase");
    scope.append("purchased");
    scope.append("stats");
    scope.append("upload");
    scope.append("video_files");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::getEmbedPresetsCallback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIEmbedPresetsEssentialsApi::getEmbedPresetsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPresets> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPresets val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEmbedPresetsSignal(output);
        Q_EMIT getEmbedPresetsSignalFull(worker, output);

    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_credentialFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("create");
        scope.append("delete");
        scope.append("edit");
        scope.append("email");
        scope.append("interact");
        scope.append("private");
        scope.append("promo_codes");
        scope.append("public");
        scope.append("purchase");
        scope.append("purchased");
        scope.append("stats");
        scope.append("upload");
        scope.append("video_files");
        QString scopeStr = scope.join(" ");
        QString tokenUrl("/oauth/authorize/client");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _credentialFlow.setVariables(tokenUrl , scopeStr, "clientId", "clientSecret");
        Q_EMIT _credentialFlow.authenticationNeeded();

    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("create");
        scope.append("delete");
        scope.append("edit");
        scope.append("email");
        scope.append("interact");
        scope.append("private");
        scope.append("promo_codes");
        scope.append("public");
        scope.append("purchase");
        scope.append("purchased");
        scope.append("stats");
        scope.append("upload");
        scope.append("video_files");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("/oauth/authorize");
        QString tokenUrl("/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEmbedPresetsSignalE(output, error_type, error_str);
        Q_EMIT getEmbedPresetsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEmbedPresetsSignalError(output, error_type, error_str);
        Q_EMIT getEmbedPresetsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEmbedPresetsEssentialsApi::getEmbedPresetsAlt1(const ::OpenAPI::OptionalParam<double> &page, const ::OpenAPI::OptionalParam<double> &per_page) {
    QString fullPath = QString(_serverConfigs["getEmbedPresetsAlt1"][_serverIndices.value("getEmbedPresetsAlt1")].URL()+"/me/presets");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::getEmbedPresetsAlt1Callback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _OauthMethod = 3;
    _authFlow.unlink();
    _implicitFlow.unlink();
    _passwordFlow.unlink();
    _credentialFlow.link();
    QStringList scope;
    scope.append("create");
    scope.append("delete");
    scope.append("edit");
    scope.append("email");
    scope.append("interact");
    scope.append("private");
    scope.append("promo_codes");
    scope.append("public");
    scope.append("purchase");
    scope.append("purchased");
    scope.append("stats");
    scope.append("upload");
    scope.append("video_files");
    auto token = _credentialFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::getEmbedPresetsAlt1Callback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;

    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("create");
    scope.append("delete");
    scope.append("edit");
    scope.append("email");
    scope.append("interact");
    scope.append("private");
    scope.append("promo_codes");
    scope.append("public");
    scope.append("purchase");
    scope.append("purchased");
    scope.append("stats");
    scope.append("upload");
    scope.append("video_files");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEmbedPresetsEssentialsApi::getEmbedPresetsAlt1Callback);
    connect(this, &OAIEmbedPresetsEssentialsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIEmbedPresetsEssentialsApi::getEmbedPresetsAlt1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIPresets> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIPresets val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEmbedPresetsAlt1Signal(output);
        Q_EMIT getEmbedPresetsAlt1SignalFull(worker, output);

    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_credentialFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("create");
        scope.append("delete");
        scope.append("edit");
        scope.append("email");
        scope.append("interact");
        scope.append("private");
        scope.append("promo_codes");
        scope.append("public");
        scope.append("purchase");
        scope.append("purchased");
        scope.append("stats");
        scope.append("upload");
        scope.append("video_files");
        QString scopeStr = scope.join(" ");
        QString tokenUrl("/oauth/authorize/client");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _credentialFlow.setVariables(tokenUrl , scopeStr, "clientId", "clientSecret");
        Q_EMIT _credentialFlow.authenticationNeeded();

    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("create");
        scope.append("delete");
        scope.append("edit");
        scope.append("email");
        scope.append("interact");
        scope.append("private");
        scope.append("promo_codes");
        scope.append("public");
        scope.append("purchase");
        scope.append("purchased");
        scope.append("stats");
        scope.append("upload");
        scope.append("video_files");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("/oauth/authorize");
        QString tokenUrl("/oauth/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEmbedPresetsAlt1SignalE(output, error_type, error_str);
        Q_EMIT getEmbedPresetsAlt1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEmbedPresetsAlt1SignalError(output, error_type, error_str);
        Q_EMIT getEmbedPresetsAlt1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEmbedPresetsEssentialsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
