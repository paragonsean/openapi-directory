/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVideosTextTracksApi_H
#define OAI_OAIVideosTextTracksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_text_track_alt1_request.h"
#include "OAIEdit_text_track_request.h"
#include "OAIError.h"
#include "OAILegacy_error.h"
#include "OAIText_track.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVideosTextTracksApi : public QObject {
    Q_OBJECT

public:
    OAIVideosTextTracksApi(const int timeOut = 0);
    ~OAIVideosTextTracksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  video_id double [required]
    * @param[in]  oai_create_text_track_alt1_request OAICreate_text_track_alt1_request [required]
    */
    virtual void createTextTrack(const double &video_id, const OAICreate_text_track_alt1_request &oai_create_text_track_alt1_request);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  oai_create_text_track_alt1_request OAICreate_text_track_alt1_request [required]
    */
    virtual void createTextTrackAlt1(const double &channel_id, const double &video_id, const OAICreate_text_track_alt1_request &oai_create_text_track_alt1_request);

    /**
    * @param[in]  texttrack_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void deleteTextTrack(const double &texttrack_id, const double &video_id);

    /**
    * @param[in]  texttrack_id double [required]
    * @param[in]  video_id double [required]
    * @param[in]  oai_edit_text_track_request OAIEdit_text_track_request [optional]
    */
    virtual void editTextTrack(const double &texttrack_id, const double &video_id, const ::OpenAPI::OptionalParam<OAIEdit_text_track_request> &oai_edit_text_track_request = ::OpenAPI::OptionalParam<OAIEdit_text_track_request>());

    /**
    * @param[in]  texttrack_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void getTextTrack(const double &texttrack_id, const double &video_id);

    /**
    * @param[in]  video_id double [required]
    */
    virtual void getTextTracks(const double &video_id);

    /**
    * @param[in]  channel_id double [required]
    * @param[in]  video_id double [required]
    */
    virtual void getTextTracksAlt1(const double &channel_id, const double &video_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTextTrackCallback(OAIHttpRequestWorker *worker);
    void createTextTrackAlt1Callback(OAIHttpRequestWorker *worker);
    void deleteTextTrackCallback(OAIHttpRequestWorker *worker);
    void editTextTrackCallback(OAIHttpRequestWorker *worker);
    void getTextTrackCallback(OAIHttpRequestWorker *worker);
    void getTextTracksCallback(OAIHttpRequestWorker *worker);
    void getTextTracksAlt1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTextTrackSignal(OAIText_track summary);
    void createTextTrackAlt1Signal(OAIText_track summary);
    void deleteTextTrackSignal();
    void editTextTrackSignal(OAIText_track summary);
    void getTextTrackSignal(OAIText_track summary);
    void getTextTracksSignal(QList<OAIText_track> summary);
    void getTextTracksAlt1Signal(QList<OAIText_track> summary);


    void createTextTrackSignalFull(OAIHttpRequestWorker *worker, OAIText_track summary);
    void createTextTrackAlt1SignalFull(OAIHttpRequestWorker *worker, OAIText_track summary);
    void deleteTextTrackSignalFull(OAIHttpRequestWorker *worker);
    void editTextTrackSignalFull(OAIHttpRequestWorker *worker, OAIText_track summary);
    void getTextTrackSignalFull(OAIHttpRequestWorker *worker, OAIText_track summary);
    void getTextTracksSignalFull(OAIHttpRequestWorker *worker, QList<OAIText_track> summary);
    void getTextTracksAlt1SignalFull(OAIHttpRequestWorker *worker, QList<OAIText_track> summary);

    Q_DECL_DEPRECATED_X("Use createTextTrackSignalError() instead")
    void createTextTrackSignalE(OAIText_track summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTextTrackSignalError(OAIText_track summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTextTrackAlt1SignalError() instead")
    void createTextTrackAlt1SignalE(OAIText_track summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTextTrackAlt1SignalError(OAIText_track summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTextTrackSignalError() instead")
    void deleteTextTrackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTextTrackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editTextTrackSignalError() instead")
    void editTextTrackSignalE(OAIText_track summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editTextTrackSignalError(OAIText_track summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextTrackSignalError() instead")
    void getTextTrackSignalE(OAIText_track summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextTrackSignalError(OAIText_track summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextTracksSignalError() instead")
    void getTextTracksSignalE(QList<OAIText_track> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextTracksSignalError(QList<OAIText_track> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextTracksAlt1SignalError() instead")
    void getTextTracksAlt1SignalE(QList<OAIText_track> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextTracksAlt1SignalError(QList<OAIText_track> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTextTrackSignalErrorFull() instead")
    void createTextTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTextTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTextTrackAlt1SignalErrorFull() instead")
    void createTextTrackAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTextTrackAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTextTrackSignalErrorFull() instead")
    void deleteTextTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTextTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editTextTrackSignalErrorFull() instead")
    void editTextTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editTextTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextTrackSignalErrorFull() instead")
    void getTextTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextTracksSignalErrorFull() instead")
    void getTextTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTextTracksAlt1SignalErrorFull() instead")
    void getTextTracksAlt1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTextTracksAlt1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
