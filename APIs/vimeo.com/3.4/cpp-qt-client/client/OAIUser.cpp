/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_bio_isSet = false;
    m_bio_isValid = false;

    m_content_filter_isSet = false;
    m_content_filter_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pictures_isSet = false;
    m_pictures_isValid = false;

    m_preferences_isSet = false;
    m_preferences_isValid = false;

    m_resource_key_isSet = false;
    m_resource_key_isValid = false;

    m_upload_quota_isSet = false;
    m_upload_quota_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_websites_isSet = false;
    m_websites_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_bio_isValid = ::OpenAPI::fromJsonValue(m_bio, json[QString("bio")]);
    m_bio_isSet = !json[QString("bio")].isNull() && m_bio_isValid;

    m_content_filter_isValid = ::OpenAPI::fromJsonValue(m_content_filter, json[QString("content_filter")]);
    m_content_filter_isSet = !json[QString("content_filter")].isNull() && m_content_filter_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pictures_isValid = ::OpenAPI::fromJsonValue(m_pictures, json[QString("pictures")]);
    m_pictures_isSet = !json[QString("pictures")].isNull() && m_pictures_isValid;

    m_preferences_isValid = ::OpenAPI::fromJsonValue(m_preferences, json[QString("preferences")]);
    m_preferences_isSet = !json[QString("preferences")].isNull() && m_preferences_isValid;

    m_resource_key_isValid = ::OpenAPI::fromJsonValue(m_resource_key, json[QString("resource_key")]);
    m_resource_key_isSet = !json[QString("resource_key")].isNull() && m_resource_key_isValid;

    m_upload_quota_isValid = ::OpenAPI::fromJsonValue(m_upload_quota, json[QString("upload_quota")]);
    m_upload_quota_isSet = !json[QString("upload_quota")].isNull() && m_upload_quota_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_websites_isValid = ::OpenAPI::fromJsonValue(m_websites, json[QString("websites")]);
    m_websites_isSet = !json[QString("websites")].isNull() && m_websites_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_bio_isSet) {
        obj.insert(QString("bio"), ::OpenAPI::toJsonValue(m_bio));
    }
    if (m_content_filter.size() > 0) {
        obj.insert(QString("content_filter"), ::OpenAPI::toJsonValue(m_content_filter));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pictures.isSet()) {
        obj.insert(QString("pictures"), ::OpenAPI::toJsonValue(m_pictures));
    }
    if (m_preferences.isSet()) {
        obj.insert(QString("preferences"), ::OpenAPI::toJsonValue(m_preferences));
    }
    if (m_resource_key_isSet) {
        obj.insert(QString("resource_key"), ::OpenAPI::toJsonValue(m_resource_key));
    }
    if (m_upload_quota.isSet()) {
        obj.insert(QString("upload_quota"), ::OpenAPI::toJsonValue(m_upload_quota));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_websites.size() > 0) {
        obj.insert(QString("websites"), ::OpenAPI::toJsonValue(m_websites));
    }
    return obj;
}

QString OAIUser::getAccount() const {
    return m_account;
}
void OAIUser::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIUser::is_account_Set() const{
    return m_account_isSet;
}

bool OAIUser::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIUser::getBio() const {
    return m_bio;
}
void OAIUser::setBio(const QString &bio) {
    m_bio = bio;
    m_bio_isSet = true;
}

bool OAIUser::is_bio_Set() const{
    return m_bio_isSet;
}

bool OAIUser::is_bio_Valid() const{
    return m_bio_isValid;
}

QList<QString> OAIUser::getContentFilter() const {
    return m_content_filter;
}
void OAIUser::setContentFilter(const QList<QString> &content_filter) {
    m_content_filter = content_filter;
    m_content_filter_isSet = true;
}

bool OAIUser::is_content_filter_Set() const{
    return m_content_filter_isSet;
}

bool OAIUser::is_content_filter_Valid() const{
    return m_content_filter_isValid;
}

QString OAIUser::getCreatedTime() const {
    return m_created_time;
}
void OAIUser::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIUser::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIUser::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUser::getLink() const {
    return m_link;
}
void OAIUser::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIUser::is_link_Set() const{
    return m_link_isSet;
}

bool OAIUser::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIUser::getLocation() const {
    return m_location;
}
void OAIUser::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUser::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUser::is_location_Valid() const{
    return m_location_isValid;
}

OAIUser_metadata OAIUser::getMetadata() const {
    return m_metadata;
}
void OAIUser::setMetadata(const OAIUser_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIUser::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIUser::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

OAIPicture OAIUser::getPictures() const {
    return m_pictures;
}
void OAIUser::setPictures(const OAIPicture &pictures) {
    m_pictures = pictures;
    m_pictures_isSet = true;
}

bool OAIUser::is_pictures_Set() const{
    return m_pictures_isSet;
}

bool OAIUser::is_pictures_Valid() const{
    return m_pictures_isValid;
}

OAIUser_preferences OAIUser::getPreferences() const {
    return m_preferences;
}
void OAIUser::setPreferences(const OAIUser_preferences &preferences) {
    m_preferences = preferences;
    m_preferences_isSet = true;
}

bool OAIUser::is_preferences_Set() const{
    return m_preferences_isSet;
}

bool OAIUser::is_preferences_Valid() const{
    return m_preferences_isValid;
}

QString OAIUser::getResourceKey() const {
    return m_resource_key;
}
void OAIUser::setResourceKey(const QString &resource_key) {
    m_resource_key = resource_key;
    m_resource_key_isSet = true;
}

bool OAIUser::is_resource_key_Set() const{
    return m_resource_key_isSet;
}

bool OAIUser::is_resource_key_Valid() const{
    return m_resource_key_isValid;
}

OAIUser_upload_quota OAIUser::getUploadQuota() const {
    return m_upload_quota;
}
void OAIUser::setUploadQuota(const OAIUser_upload_quota &upload_quota) {
    m_upload_quota = upload_quota;
    m_upload_quota_isSet = true;
}

bool OAIUser::is_upload_quota_Set() const{
    return m_upload_quota_isSet;
}

bool OAIUser::is_upload_quota_Valid() const{
    return m_upload_quota_isValid;
}

QString OAIUser::getUri() const {
    return m_uri;
}
void OAIUser::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIUser::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIUser::is_uri_Valid() const{
    return m_uri_isValid;
}

QList<OAIUser_websites_inner> OAIUser::getWebsites() const {
    return m_websites;
}
void OAIUser::setWebsites(const QList<OAIUser_websites_inner> &websites) {
    m_websites = websites;
    m_websites_isSet = true;
}

bool OAIUser::is_websites_Set() const{
    return m_websites_isSet;
}

bool OAIUser::is_websites_Valid() const{
    return m_websites_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pictures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_quota.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_websites.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_isValid && m_bio_isValid && m_created_time_isValid && m_link_isValid && m_location_isValid && m_metadata_isValid && m_name_isValid && m_pictures_isValid && m_resource_key_isValid && m_upload_quota_isValid && m_uri_isValid && m_websites_isValid && true;
}

} // namespace OpenAPI
