/**
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_metadata_interactions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_metadata_interactions::OAIUser_metadata_interactions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_metadata_interactions::OAIUser_metadata_interactions() {
    this->initializeModel();
}

OAIUser_metadata_interactions::~OAIUser_metadata_interactions() {}

void OAIUser_metadata_interactions::initializeModel() {

    m_add_privacy_user_isSet = false;
    m_add_privacy_user_isValid = false;

    m_block_isSet = false;
    m_block_isValid = false;

    m_follow_isSet = false;
    m_follow_isValid = false;

    m_report_isSet = false;
    m_report_isValid = false;
}

void OAIUser_metadata_interactions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_metadata_interactions::fromJsonObject(QJsonObject json) {

    m_add_privacy_user_isValid = ::OpenAPI::fromJsonValue(m_add_privacy_user, json[QString("add_privacy_user")]);
    m_add_privacy_user_isSet = !json[QString("add_privacy_user")].isNull() && m_add_privacy_user_isValid;

    m_block_isValid = ::OpenAPI::fromJsonValue(m_block, json[QString("block")]);
    m_block_isSet = !json[QString("block")].isNull() && m_block_isValid;

    m_follow_isValid = ::OpenAPI::fromJsonValue(m_follow, json[QString("follow")]);
    m_follow_isSet = !json[QString("follow")].isNull() && m_follow_isValid;

    m_report_isValid = ::OpenAPI::fromJsonValue(m_report, json[QString("report")]);
    m_report_isSet = !json[QString("report")].isNull() && m_report_isValid;
}

QString OAIUser_metadata_interactions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_metadata_interactions::asJsonObject() const {
    QJsonObject obj;
    if (m_add_privacy_user.isSet()) {
        obj.insert(QString("add_privacy_user"), ::OpenAPI::toJsonValue(m_add_privacy_user));
    }
    if (m_block.isSet()) {
        obj.insert(QString("block"), ::OpenAPI::toJsonValue(m_block));
    }
    if (m_follow.isSet()) {
        obj.insert(QString("follow"), ::OpenAPI::toJsonValue(m_follow));
    }
    if (m_report.isSet()) {
        obj.insert(QString("report"), ::OpenAPI::toJsonValue(m_report));
    }
    return obj;
}

OAIUser_metadata_interactions_add_privacy_user OAIUser_metadata_interactions::getAddPrivacyUser() const {
    return m_add_privacy_user;
}
void OAIUser_metadata_interactions::setAddPrivacyUser(const OAIUser_metadata_interactions_add_privacy_user &add_privacy_user) {
    m_add_privacy_user = add_privacy_user;
    m_add_privacy_user_isSet = true;
}

bool OAIUser_metadata_interactions::is_add_privacy_user_Set() const{
    return m_add_privacy_user_isSet;
}

bool OAIUser_metadata_interactions::is_add_privacy_user_Valid() const{
    return m_add_privacy_user_isValid;
}

OAIUser_metadata_interactions_block OAIUser_metadata_interactions::getBlock() const {
    return m_block;
}
void OAIUser_metadata_interactions::setBlock(const OAIUser_metadata_interactions_block &block) {
    m_block = block;
    m_block_isSet = true;
}

bool OAIUser_metadata_interactions::is_block_Set() const{
    return m_block_isSet;
}

bool OAIUser_metadata_interactions::is_block_Valid() const{
    return m_block_isValid;
}

OAIUser_metadata_interactions_follow OAIUser_metadata_interactions::getFollow() const {
    return m_follow;
}
void OAIUser_metadata_interactions::setFollow(const OAIUser_metadata_interactions_follow &follow) {
    m_follow = follow;
    m_follow_isSet = true;
}

bool OAIUser_metadata_interactions::is_follow_Set() const{
    return m_follow_isSet;
}

bool OAIUser_metadata_interactions::is_follow_Valid() const{
    return m_follow_isValid;
}

OAIUser_metadata_interactions_report OAIUser_metadata_interactions::getReport() const {
    return m_report;
}
void OAIUser_metadata_interactions::setReport(const OAIUser_metadata_interactions_report &report) {
    m_report = report;
    m_report_isSet = true;
}

bool OAIUser_metadata_interactions::is_report_Set() const{
    return m_report_isSet;
}

bool OAIUser_metadata_interactions::is_report_Valid() const{
    return m_report_isValid;
}

bool OAIUser_metadata_interactions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_privacy_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_block.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_follow.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_metadata_interactions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_block_isValid && m_follow_isValid && m_report_isValid && true;
}

} // namespace OpenAPI
