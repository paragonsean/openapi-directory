/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CategoriesSubscriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoriesSubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesSubscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkIfUserSubscribedToCategory
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserSubscribedToCategoryCall(String category, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkIfUserSubscribedToCategoryValidateBeforeCall(String category, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling checkIfUserSubscribedToCategory(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling checkIfUserSubscribedToCategory(Async)");
        }

        return checkIfUserSubscribedToCategoryCall(category, userId, _callback);

    }

    /**
     * Check if a user follows a category
     * 
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
     </table>
     */
    public void checkIfUserSubscribedToCategory(String category, BigDecimal userId) throws ApiException {
        checkIfUserSubscribedToCategoryWithHttpInfo(category, userId);
    }

    /**
     * Check if a user follows a category
     * 
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkIfUserSubscribedToCategoryWithHttpInfo(String category, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = checkIfUserSubscribedToCategoryValidateBeforeCall(category, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a user follows a category (asynchronously)
     * 
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserSubscribedToCategoryAsync(String category, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkIfUserSubscribedToCategoryValidateBeforeCall(category, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkIfUserSubscribedToCategoryAlt1
     * @param category The name of the category. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserSubscribedToCategoryAlt1Call(String category, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkIfUserSubscribedToCategoryAlt1ValidateBeforeCall(String category, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling checkIfUserSubscribedToCategoryAlt1(Async)");
        }

        return checkIfUserSubscribedToCategoryAlt1Call(category, _callback);

    }

    /**
     * Check if a user follows a category
     * 
     * @param category The name of the category. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
     </table>
     */
    public void checkIfUserSubscribedToCategoryAlt1(String category) throws ApiException {
        checkIfUserSubscribedToCategoryAlt1WithHttpInfo(category);
    }

    /**
     * Check if a user follows a category
     * 
     * @param category The name of the category. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkIfUserSubscribedToCategoryAlt1WithHttpInfo(String category) throws ApiException {
        okhttp3.Call localVarCall = checkIfUserSubscribedToCategoryAlt1ValidateBeforeCall(category, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a user follows a category (asynchronously)
     * 
     * @param category The name of the category. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user is following the category. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserSubscribedToCategoryAlt1Async(String category, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkIfUserSubscribedToCategoryAlt1ValidateBeforeCall(category, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategorySubscriptions
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: You can&#39;t view another user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategorySubscriptionsCall(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/categories"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.category+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategorySubscriptionsValidateBeforeCall(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getCategorySubscriptions(Async)");
        }

        return getCategorySubscriptionsCall(userId, direction, page, perPage, sort, _callback);

    }

    /**
     * Get all the categories that a user follows
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: You can&#39;t view another user. </td><td>  -  </td></tr>
     </table>
     */
    public List<Category> getCategorySubscriptions(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        ApiResponse<List<Category>> localVarResp = getCategorySubscriptionsWithHttpInfo(userId, direction, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the categories that a user follows
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Category&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: You can&#39;t view another user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Category>> getCategorySubscriptionsWithHttpInfo(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getCategorySubscriptionsValidateBeforeCall(userId, direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the categories that a user follows (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: You can&#39;t view another user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategorySubscriptionsAsync(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback<List<Category>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategorySubscriptionsValidateBeforeCall(userId, direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategorySubscriptionsAlt1
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: You can&#39;t view another user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategorySubscriptionsAlt1Call(String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.category+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategorySubscriptionsAlt1ValidateBeforeCall(String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        return getCategorySubscriptionsAlt1Call(direction, page, perPage, sort, _callback);

    }

    /**
     * Get all the categories that a user follows
     * 
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: You can&#39;t view another user. </td><td>  -  </td></tr>
     </table>
     */
    public List<Category> getCategorySubscriptionsAlt1(String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        ApiResponse<List<Category>> localVarResp = getCategorySubscriptionsAlt1WithHttpInfo(direction, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the categories that a user follows
     * 
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Category&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: You can&#39;t view another user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Category>> getCategorySubscriptionsAlt1WithHttpInfo(String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getCategorySubscriptionsAlt1ValidateBeforeCall(direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the categories that a user follows (asynchronously)
     * 
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: You can&#39;t view another user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategorySubscriptionsAlt1Async(String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback<List<Category>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategorySubscriptionsAlt1ValidateBeforeCall(direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscribeToCategory
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was subscribed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscribeToCategoryCall(BigDecimal category, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribeToCategoryValidateBeforeCall(BigDecimal category, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling subscribeToCategory(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling subscribeToCategory(Async)");
        }

        return subscribeToCategoryCall(category, userId, _callback);

    }

    /**
     * Subscribe a user to a single category
     * 
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was subscribed. </td><td>  -  </td></tr>
     </table>
     */
    public void subscribeToCategory(BigDecimal category, BigDecimal userId) throws ApiException {
        subscribeToCategoryWithHttpInfo(category, userId);
    }

    /**
     * Subscribe a user to a single category
     * 
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was subscribed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscribeToCategoryWithHttpInfo(BigDecimal category, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = subscribeToCategoryValidateBeforeCall(category, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Subscribe a user to a single category (asynchronously)
     * 
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was subscribed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscribeToCategoryAsync(BigDecimal category, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscribeToCategoryValidateBeforeCall(category, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscribeToCategoryAlt1
     * @param category The name of the category. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was subscribed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscribeToCategoryAlt1Call(BigDecimal category, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribeToCategoryAlt1ValidateBeforeCall(BigDecimal category, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling subscribeToCategoryAlt1(Async)");
        }

        return subscribeToCategoryAlt1Call(category, _callback);

    }

    /**
     * Subscribe a user to a single category
     * 
     * @param category The name of the category. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was subscribed. </td><td>  -  </td></tr>
     </table>
     */
    public void subscribeToCategoryAlt1(BigDecimal category) throws ApiException {
        subscribeToCategoryAlt1WithHttpInfo(category);
    }

    /**
     * Subscribe a user to a single category
     * 
     * @param category The name of the category. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was subscribed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscribeToCategoryAlt1WithHttpInfo(BigDecimal category) throws ApiException {
        okhttp3.Call localVarCall = subscribeToCategoryAlt1ValidateBeforeCall(category, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Subscribe a user to a single category (asynchronously)
     * 
     * @param category The name of the category. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was subscribed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscribeToCategoryAlt1Async(BigDecimal category, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscribeToCategoryAlt1ValidateBeforeCall(category, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unsubscribeFromCategory
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unsubscribed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsubscribeFromCategoryCall(String category, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unsubscribeFromCategoryValidateBeforeCall(String category, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling unsubscribeFromCategory(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling unsubscribeFromCategory(Async)");
        }

        return unsubscribeFromCategoryCall(category, userId, _callback);

    }

    /**
     * Unsubscribe a user from a category
     * 
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unsubscribed. </td><td>  -  </td></tr>
     </table>
     */
    public void unsubscribeFromCategory(String category, BigDecimal userId) throws ApiException {
        unsubscribeFromCategoryWithHttpInfo(category, userId);
    }

    /**
     * Unsubscribe a user from a category
     * 
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unsubscribed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unsubscribeFromCategoryWithHttpInfo(String category, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = unsubscribeFromCategoryValidateBeforeCall(category, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unsubscribe a user from a category (asynchronously)
     * 
     * @param category The name of the category. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unsubscribed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsubscribeFromCategoryAsync(String category, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unsubscribeFromCategoryValidateBeforeCall(category, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unsubscribeFromCategoryAlt1
     * @param category The name of the category. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unsubscribed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsubscribeFromCategoryAlt1Call(String category, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unsubscribeFromCategoryAlt1ValidateBeforeCall(String category, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling unsubscribeFromCategoryAlt1(Async)");
        }

        return unsubscribeFromCategoryAlt1Call(category, _callback);

    }

    /**
     * Unsubscribe a user from a category
     * 
     * @param category The name of the category. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unsubscribed. </td><td>  -  </td></tr>
     </table>
     */
    public void unsubscribeFromCategoryAlt1(String category) throws ApiException {
        unsubscribeFromCategoryAlt1WithHttpInfo(category);
    }

    /**
     * Unsubscribe a user from a category
     * 
     * @param category The name of the category. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unsubscribed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unsubscribeFromCategoryAlt1WithHttpInfo(String category) throws ApiException {
        okhttp3.Call localVarCall = unsubscribeFromCategoryAlt1ValidateBeforeCall(category, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unsubscribe a user from a category (asynchronously)
     * 
     * @param category The name of the category. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was unsubscribed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unsubscribeFromCategoryAlt1Async(String category, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unsubscribeFromCategoryAlt1ValidateBeforeCall(category, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
