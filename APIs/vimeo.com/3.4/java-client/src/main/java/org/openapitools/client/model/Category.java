/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CategoryMetadata;
import org.openapitools.client.model.CategoryParent;
import org.openapitools.client.model.CategorySubcategoriesInner;
import org.openapitools.client.model.Picture;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Category
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Category {
  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private Picture icon;

  public static final String SERIALIZED_NAME_LAST_VIDEO_FEATURED_TIME = "last_video_featured_time";
  @SerializedName(SERIALIZED_NAME_LAST_VIDEO_FEATURED_TIME)
  private String lastVideoFeaturedTime;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private CategoryMetadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private CategoryParent parent;

  public static final String SERIALIZED_NAME_PICTURES = "pictures";
  @SerializedName(SERIALIZED_NAME_PICTURES)
  private Picture pictures;

  public static final String SERIALIZED_NAME_RESOURCE_KEY = "resource_key";
  @SerializedName(SERIALIZED_NAME_RESOURCE_KEY)
  private String resourceKey;

  public static final String SERIALIZED_NAME_SUBCATEGORIES = "subcategories";
  @SerializedName(SERIALIZED_NAME_SUBCATEGORIES)
  private List<CategorySubcategoriesInner> subcategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOP_LEVEL = "top_level";
  @SerializedName(SERIALIZED_NAME_TOP_LEVEL)
  private Boolean topLevel;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public Category() {
  }

  public Category icon(Picture icon) {
    this.icon = icon;
    return this;
  }

  /**
   * The active icon for the category.
   * @return icon
   */
  @javax.annotation.Nullable
  public Picture getIcon() {
    return icon;
  }

  public void setIcon(Picture icon) {
    this.icon = icon;
  }


  public Category lastVideoFeaturedTime(String lastVideoFeaturedTime) {
    this.lastVideoFeaturedTime = lastVideoFeaturedTime;
    return this;
  }

  /**
   * The last time, in ISO 8601 format, that a video was featured.
   * @return lastVideoFeaturedTime
   */
  @javax.annotation.Nonnull
  public String getLastVideoFeaturedTime() {
    return lastVideoFeaturedTime;
  }

  public void setLastVideoFeaturedTime(String lastVideoFeaturedTime) {
    this.lastVideoFeaturedTime = lastVideoFeaturedTime;
  }


  public Category link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The URL to access the category in a browser.
   * @return link
   */
  @javax.annotation.Nonnull
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public Category metadata(CategoryMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public CategoryMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(CategoryMetadata metadata) {
    this.metadata = metadata;
  }


  public Category name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The display name that identifies the category.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Category parent(CategoryParent parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public CategoryParent getParent() {
    return parent;
  }

  public void setParent(CategoryParent parent) {
    this.parent = parent;
  }


  public Category pictures(Picture pictures) {
    this.pictures = pictures;
    return this;
  }

  /**
   * The active picture for this category; defaults to vertical color bars.
   * @return pictures
   */
  @javax.annotation.Nonnull
  public Picture getPictures() {
    return pictures;
  }

  public void setPictures(Picture pictures) {
    this.pictures = pictures;
  }


  public Category resourceKey(String resourceKey) {
    this.resourceKey = resourceKey;
    return this;
  }

  /**
   * The resource key of the category.
   * @return resourceKey
   */
  @javax.annotation.Nonnull
  public String getResourceKey() {
    return resourceKey;
  }

  public void setResourceKey(String resourceKey) {
    this.resourceKey = resourceKey;
  }


  public Category subcategories(List<CategorySubcategoriesInner> subcategories) {
    this.subcategories = subcategories;
    return this;
  }

  public Category addSubcategoriesItem(CategorySubcategoriesInner subcategoriesItem) {
    if (this.subcategories == null) {
      this.subcategories = new ArrayList<>();
    }
    this.subcategories.add(subcategoriesItem);
    return this;
  }

  /**
   * All the subcategories that belong to this category, if the current category is a top-level parent.
   * @return subcategories
   */
  @javax.annotation.Nullable
  public List<CategorySubcategoriesInner> getSubcategories() {
    return subcategories;
  }

  public void setSubcategories(List<CategorySubcategoriesInner> subcategories) {
    this.subcategories = subcategories;
  }


  public Category topLevel(Boolean topLevel) {
    this.topLevel = topLevel;
    return this;
  }

  /**
   * Whether the category isn&#39;t a subcategory of another category.
   * @return topLevel
   */
  @javax.annotation.Nonnull
  public Boolean getTopLevel() {
    return topLevel;
  }

  public void setTopLevel(Boolean topLevel) {
    this.topLevel = topLevel;
  }


  public Category uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The unique identifier to access the category resource.
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Category category = (Category) o;
    return Objects.equals(this.icon, category.icon) &&
        Objects.equals(this.lastVideoFeaturedTime, category.lastVideoFeaturedTime) &&
        Objects.equals(this.link, category.link) &&
        Objects.equals(this.metadata, category.metadata) &&
        Objects.equals(this.name, category.name) &&
        Objects.equals(this.parent, category.parent) &&
        Objects.equals(this.pictures, category.pictures) &&
        Objects.equals(this.resourceKey, category.resourceKey) &&
        Objects.equals(this.subcategories, category.subcategories) &&
        Objects.equals(this.topLevel, category.topLevel) &&
        Objects.equals(this.uri, category.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(icon, lastVideoFeaturedTime, link, metadata, name, parent, pictures, resourceKey, subcategories, topLevel, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Category {\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    lastVideoFeaturedTime: ").append(toIndentedString(lastVideoFeaturedTime)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    pictures: ").append(toIndentedString(pictures)).append("\n");
    sb.append("    resourceKey: ").append(toIndentedString(resourceKey)).append("\n");
    sb.append("    subcategories: ").append(toIndentedString(subcategories)).append("\n");
    sb.append("    topLevel: ").append(toIndentedString(topLevel)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("icon");
    openapiFields.add("last_video_featured_time");
    openapiFields.add("link");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("parent");
    openapiFields.add("pictures");
    openapiFields.add("resource_key");
    openapiFields.add("subcategories");
    openapiFields.add("top_level");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("last_video_featured_time");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("parent");
    openapiRequiredFields.add("pictures");
    openapiRequiredFields.add("resource_key");
    openapiRequiredFields.add("top_level");
    openapiRequiredFields.add("uri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Category
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Category.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Category is not found in the empty JSON string", Category.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Category.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Category` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Category.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `icon`
      if (jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) {
        Picture.validateJsonElement(jsonObj.get("icon"));
      }
      if (!jsonObj.get("last_video_featured_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_video_featured_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_video_featured_time").toString()));
      }
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the required field `metadata`
      CategoryMetadata.validateJsonElement(jsonObj.get("metadata"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `parent`
      CategoryParent.validateJsonElement(jsonObj.get("parent"));
      // validate the required field `pictures`
      Picture.validateJsonElement(jsonObj.get("pictures"));
      if (!jsonObj.get("resource_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_key").toString()));
      }
      if (jsonObj.get("subcategories") != null && !jsonObj.get("subcategories").isJsonNull()) {
        JsonArray jsonArraysubcategories = jsonObj.getAsJsonArray("subcategories");
        if (jsonArraysubcategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subcategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subcategories` to be an array in the JSON string but got `%s`", jsonObj.get("subcategories").toString()));
          }

          // validate the optional field `subcategories` (array)
          for (int i = 0; i < jsonArraysubcategories.size(); i++) {
            CategorySubcategoriesInner.validateJsonElement(jsonArraysubcategories.get(i));
          };
        }
      }
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Category.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Category' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Category> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Category.class));

       return (TypeAdapter<T>) new TypeAdapter<Category>() {
           @Override
           public void write(JsonWriter out, Category value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Category read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Category given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Category
   * @throws IOException if the JSON string is invalid with respect to Category
   */
  public static Category fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Category.class);
  }

  /**
   * Convert an instance of Category to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

