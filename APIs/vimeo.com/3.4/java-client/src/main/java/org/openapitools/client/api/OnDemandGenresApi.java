/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.OnDemandGenre;
import org.openapitools.client.model.OnDemandPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OnDemandGenresApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandGenresApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandGenresApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVodGenre
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The genre was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t add more than two genres to an On Demand page. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVodGenreCall(String genreId, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/genres/{genre_id}"
            .replace("{" + "genre_id" + "}", localVarApiClient.escapeString(genreId.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.genre+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVodGenreValidateBeforeCall(String genreId, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genreId' is set
        if (genreId == null) {
            throw new ApiException("Missing the required parameter 'genreId' when calling addVodGenre(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling addVodGenre(Async)");
        }

        return addVodGenreCall(genreId, ondemandId, _callback);

    }

    /**
     * Add a genre to an On Demand page
     * 
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return OnDemandGenre
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The genre was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t add more than two genres to an On Demand page. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandGenre addVodGenre(String genreId, BigDecimal ondemandId) throws ApiException {
        ApiResponse<OnDemandGenre> localVarResp = addVodGenreWithHttpInfo(genreId, ondemandId);
        return localVarResp.getData();
    }

    /**
     * Add a genre to an On Demand page
     * 
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;OnDemandGenre&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The genre was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t add more than two genres to an On Demand page. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandGenre> addVodGenreWithHttpInfo(String genreId, BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = addVodGenreValidateBeforeCall(genreId, ondemandId, null);
        Type localVarReturnType = new TypeToken<OnDemandGenre>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a genre to an On Demand page (asynchronously)
     * 
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The genre was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t add more than two genres to an On Demand page. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVodGenreAsync(String genreId, BigDecimal ondemandId, final ApiCallback<OnDemandGenre> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVodGenreValidateBeforeCall(genreId, ondemandId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandGenre>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVodGenre
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The On Demand genre was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The On Demand page must belong to at least one genre. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVodGenreCall(String genreId, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/genres/{genre_id}"
            .replace("{" + "genre_id" + "}", localVarApiClient.escapeString(genreId.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.genre+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVodGenreValidateBeforeCall(String genreId, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genreId' is set
        if (genreId == null) {
            throw new ApiException("Missing the required parameter 'genreId' when calling deleteVodGenre(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling deleteVodGenre(Async)");
        }

        return deleteVodGenreCall(genreId, ondemandId, _callback);

    }

    /**
     * Remove a genre from an On Demand page
     * 
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The On Demand genre was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The On Demand page must belong to at least one genre. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVodGenre(String genreId, BigDecimal ondemandId) throws ApiException {
        deleteVodGenreWithHttpInfo(genreId, ondemandId);
    }

    /**
     * Remove a genre from an On Demand page
     * 
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The On Demand genre was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The On Demand page must belong to at least one genre. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVodGenreWithHttpInfo(String genreId, BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = deleteVodGenreValidateBeforeCall(genreId, ondemandId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a genre from an On Demand page (asynchronously)
     * 
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The On Demand genre was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The On Demand page must belong to at least one genre. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVodGenreAsync(String genreId, BigDecimal ondemandId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVodGenreValidateBeforeCall(genreId, ondemandId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenreVod
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page belongs to the genre. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenreVodCall(String genreId, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/genres/{genre_id}/pages/{ondemand_id}"
            .replace("{" + "genre_id" + "}", localVarApiClient.escapeString(genreId.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenreVodValidateBeforeCall(String genreId, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genreId' is set
        if (genreId == null) {
            throw new ApiException("Missing the required parameter 'genreId' when calling getGenreVod(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getGenreVod(Async)");
        }

        return getGenreVodCall(genreId, ondemandId, _callback);

    }

    /**
     * Get a specific On Demand page in a genre
     * Check whether a genre contains an On Demand page.
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return OnDemandPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page belongs to the genre. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandPage getGenreVod(String genreId, BigDecimal ondemandId) throws ApiException {
        ApiResponse<OnDemandPage> localVarResp = getGenreVodWithHttpInfo(genreId, ondemandId);
        return localVarResp.getData();
    }

    /**
     * Get a specific On Demand page in a genre
     * Check whether a genre contains an On Demand page.
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;OnDemandPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page belongs to the genre. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandPage> getGenreVodWithHttpInfo(String genreId, BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = getGenreVodValidateBeforeCall(genreId, ondemandId, null);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific On Demand page in a genre (asynchronously)
     * Check whether a genre contains an On Demand page.
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page belongs to the genre. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenreVodAsync(String genreId, BigDecimal ondemandId, final ApiCallback<OnDemandPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenreVodValidateBeforeCall(genreId, ondemandId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGenreVods
     * @param genreId The ID of the genre. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenreVodsCall(String genreId, String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/genres/{genre_id}/pages"
            .replace("{" + "genre_id" + "}", localVarApiClient.escapeString(genreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGenreVodsValidateBeforeCall(String genreId, String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genreId' is set
        if (genreId == null) {
            throw new ApiException("Missing the required parameter 'genreId' when calling getGenreVods(Async)");
        }

        return getGenreVodsCall(genreId, direction, filter, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the On Demand pages in a genre
     * 
     * @param genreId The ID of the genre. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;OnDemandPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<OnDemandPage> getGenreVods(String genreId, String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<OnDemandPage>> localVarResp = getGenreVodsWithHttpInfo(genreId, direction, filter, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the On Demand pages in a genre
     * 
     * @param genreId The ID of the genre. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;OnDemandPage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OnDemandPage>> getGenreVodsWithHttpInfo(String genreId, String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getGenreVodsValidateBeforeCall(genreId, direction, filter, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the On Demand pages in a genre (asynchronously)
     * 
     * @param genreId The ID of the genre. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGenreVodsAsync(String genreId, String direction, String filter, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<OnDemandPage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGenreVodsValidateBeforeCall(genreId, direction, filter, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodGenre
     * @param genreId The ID of the genre. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand genre was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodGenreCall(String genreId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/genres/{genre_id}"
            .replace("{" + "genre_id" + "}", localVarApiClient.escapeString(genreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.genre+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodGenreValidateBeforeCall(String genreId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genreId' is set
        if (genreId == null) {
            throw new ApiException("Missing the required parameter 'genreId' when calling getVodGenre(Async)");
        }

        return getVodGenreCall(genreId, _callback);

    }

    /**
     * Get a specific On Demand genre
     * 
     * @param genreId The ID of the genre. (required)
     * @return OnDemandGenre
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand genre was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandGenre getVodGenre(String genreId) throws ApiException {
        ApiResponse<OnDemandGenre> localVarResp = getVodGenreWithHttpInfo(genreId);
        return localVarResp.getData();
    }

    /**
     * Get a specific On Demand genre
     * 
     * @param genreId The ID of the genre. (required)
     * @return ApiResponse&lt;OnDemandGenre&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand genre was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandGenre> getVodGenreWithHttpInfo(String genreId) throws ApiException {
        okhttp3.Call localVarCall = getVodGenreValidateBeforeCall(genreId, null);
        Type localVarReturnType = new TypeToken<OnDemandGenre>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific On Demand genre (asynchronously)
     * 
     * @param genreId The ID of the genre. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand genre was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodGenreAsync(String genreId, final ApiCallback<OnDemandGenre> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodGenreValidateBeforeCall(genreId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandGenre>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodGenreByOndemandId
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page&#39;s genre was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodGenreByOndemandIdCall(String genreId, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/genres/{genre_id}"
            .replace("{" + "genre_id" + "}", localVarApiClient.escapeString(genreId.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.genre+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodGenreByOndemandIdValidateBeforeCall(String genreId, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genreId' is set
        if (genreId == null) {
            throw new ApiException("Missing the required parameter 'genreId' when calling getVodGenreByOndemandId(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVodGenreByOndemandId(Async)");
        }

        return getVodGenreByOndemandIdCall(genreId, ondemandId, _callback);

    }

    /**
     * Check whether an On Demand page belongs to a genre
     * 
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return OnDemandGenre
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page&#39;s genre was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandGenre getVodGenreByOndemandId(String genreId, BigDecimal ondemandId) throws ApiException {
        ApiResponse<OnDemandGenre> localVarResp = getVodGenreByOndemandIdWithHttpInfo(genreId, ondemandId);
        return localVarResp.getData();
    }

    /**
     * Check whether an On Demand page belongs to a genre
     * 
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;OnDemandGenre&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page&#39;s genre was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandGenre> getVodGenreByOndemandIdWithHttpInfo(String genreId, BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = getVodGenreByOndemandIdValidateBeforeCall(genreId, ondemandId, null);
        Type localVarReturnType = new TypeToken<OnDemandGenre>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check whether an On Demand page belongs to a genre (asynchronously)
     * 
     * @param genreId The ID of the genre. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page&#39;s genre was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or genre exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodGenreByOndemandIdAsync(String genreId, BigDecimal ondemandId, final ApiCallback<OnDemandGenre> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodGenreByOndemandIdValidateBeforeCall(genreId, ondemandId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandGenre>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodGenres
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand genres were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodGenresCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/genres";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.genre+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodGenresValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getVodGenresCall(_callback);

    }

    /**
     * Get all On Demand genres
     * 
     * @return List&lt;OnDemandGenre&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand genres were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<OnDemandGenre> getVodGenres() throws ApiException {
        ApiResponse<List<OnDemandGenre>> localVarResp = getVodGenresWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all On Demand genres
     * 
     * @return ApiResponse&lt;List&lt;OnDemandGenre&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand genres were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OnDemandGenre>> getVodGenresWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getVodGenresValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<OnDemandGenre>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all On Demand genres (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand genres were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodGenresAsync(final ApiCallback<List<OnDemandGenre>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodGenresValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<OnDemandGenre>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodGenresByOndemandId
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The genres were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodGenresByOndemandIdCall(BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/genres"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.genre+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodGenresByOndemandIdValidateBeforeCall(BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVodGenresByOndemandId(Async)");
        }

        return getVodGenresByOndemandIdCall(ondemandId, _callback);

    }

    /**
     * Get all the genres of an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @return List&lt;OnDemandGenre&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The genres were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<OnDemandGenre> getVodGenresByOndemandId(BigDecimal ondemandId) throws ApiException {
        ApiResponse<List<OnDemandGenre>> localVarResp = getVodGenresByOndemandIdWithHttpInfo(ondemandId);
        return localVarResp.getData();
    }

    /**
     * Get all the genres of an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;List&lt;OnDemandGenre&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The genres were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OnDemandGenre>> getVodGenresByOndemandIdWithHttpInfo(BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = getVodGenresByOndemandIdValidateBeforeCall(ondemandId, null);
        Type localVarReturnType = new TypeToken<List<OnDemandGenre>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the genres of an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The genres were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodGenresByOndemandIdAsync(BigDecimal ondemandId, final ApiCallback<List<OnDemandGenre>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodGenresByOndemandIdValidateBeforeCall(ondemandId, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandGenre>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
