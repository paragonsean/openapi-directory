/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PictureSizesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PictureSizesInner {
  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private BigDecimal height;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LINK_WITH_PLAY_BUTTON = "link_with_play_button";
  @SerializedName(SERIALIZED_NAME_LINK_WITH_PLAY_BUTTON)
  private String linkWithPlayButton;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private BigDecimal width;

  public PictureSizesInner() {
  }

  public PictureSizesInner height(BigDecimal height) {
    this.height = height;
    return this;
  }

  /**
   * The height of the image.
   * @return height
   */
  @javax.annotation.Nullable
  public BigDecimal getHeight() {
    return height;
  }

  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public PictureSizesInner link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The direct link to the image.
   * @return link
   */
  @javax.annotation.Nonnull
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public PictureSizesInner linkWithPlayButton(String linkWithPlayButton) {
    this.linkWithPlayButton = linkWithPlayButton;
    return this;
  }

  /**
   * The direct link to the image with a play button overlay.
   * @return linkWithPlayButton
   */
  @javax.annotation.Nullable
  public String getLinkWithPlayButton() {
    return linkWithPlayButton;
  }

  public void setLinkWithPlayButton(String linkWithPlayButton) {
    this.linkWithPlayButton = linkWithPlayButton;
  }


  public PictureSizesInner width(BigDecimal width) {
    this.width = width;
    return this;
  }

  /**
   * The width of the image.
   * @return width
   */
  @javax.annotation.Nonnull
  public BigDecimal getWidth() {
    return width;
  }

  public void setWidth(BigDecimal width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PictureSizesInner pictureSizesInner = (PictureSizesInner) o;
    return Objects.equals(this.height, pictureSizesInner.height) &&
        Objects.equals(this.link, pictureSizesInner.link) &&
        Objects.equals(this.linkWithPlayButton, pictureSizesInner.linkWithPlayButton) &&
        Objects.equals(this.width, pictureSizesInner.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(height, link, linkWithPlayButton, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PictureSizesInner {\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    linkWithPlayButton: ").append(toIndentedString(linkWithPlayButton)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("height");
    openapiFields.add("link");
    openapiFields.add("link_with_play_button");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("height");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("width");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PictureSizesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PictureSizesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PictureSizesInner is not found in the empty JSON string", PictureSizesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PictureSizesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PictureSizesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PictureSizesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("link_with_play_button") != null && !jsonObj.get("link_with_play_button").isJsonNull()) && !jsonObj.get("link_with_play_button").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_with_play_button` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_with_play_button").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PictureSizesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PictureSizesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PictureSizesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PictureSizesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PictureSizesInner>() {
           @Override
           public void write(JsonWriter out, PictureSizesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PictureSizesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PictureSizesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PictureSizesInner
   * @throws IOException if the JSON string is invalid with respect to PictureSizesInner
   */
  public static PictureSizesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PictureSizesInner.class);
  }

  /**
   * Convert an instance of PictureSizesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

