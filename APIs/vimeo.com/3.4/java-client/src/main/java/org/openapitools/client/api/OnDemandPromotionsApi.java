/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CreateVodPromotionRequest;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.OnDemandPromotion;
import org.openapitools.client.model.OnDemandPromotionCode;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OnDemandPromotionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandPromotionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandPromotionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createVodPromotion
     * @param ondemandId The ID of the On Demand. (required)
     * @param createVodPromotionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotion was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * There are errors in the request. * The promo code already exists. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t create promotions for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVodPromotionCall(BigDecimal ondemandId, CreateVodPromotionRequest createVodPromotionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVodPromotionRequest;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/promotions"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.promotion+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.ondemand.promotion+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVodPromotionValidateBeforeCall(BigDecimal ondemandId, CreateVodPromotionRequest createVodPromotionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling createVodPromotion(Async)");
        }

        // verify the required parameter 'createVodPromotionRequest' is set
        if (createVodPromotionRequest == null) {
            throw new ApiException("Missing the required parameter 'createVodPromotionRequest' when calling createVodPromotion(Async)");
        }

        return createVodPromotionCall(ondemandId, createVodPromotionRequest, _callback);

    }

    /**
     * Add a promotion to an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param createVodPromotionRequest  (required)
     * @return OnDemandPromotion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotion was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * There are errors in the request. * The promo code already exists. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t create promotions for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandPromotion createVodPromotion(BigDecimal ondemandId, CreateVodPromotionRequest createVodPromotionRequest) throws ApiException {
        ApiResponse<OnDemandPromotion> localVarResp = createVodPromotionWithHttpInfo(ondemandId, createVodPromotionRequest);
        return localVarResp.getData();
    }

    /**
     * Add a promotion to an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param createVodPromotionRequest  (required)
     * @return ApiResponse&lt;OnDemandPromotion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotion was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * There are errors in the request. * The promo code already exists. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t create promotions for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandPromotion> createVodPromotionWithHttpInfo(BigDecimal ondemandId, CreateVodPromotionRequest createVodPromotionRequest) throws ApiException {
        okhttp3.Call localVarCall = createVodPromotionValidateBeforeCall(ondemandId, createVodPromotionRequest, null);
        Type localVarReturnType = new TypeToken<OnDemandPromotion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a promotion to an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param createVodPromotionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotion was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * There are errors in the request. * The promo code already exists. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t create promotions for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVodPromotionAsync(BigDecimal ondemandId, CreateVodPromotionRequest createVodPromotionRequest, final ApiCallback<OnDemandPromotion> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVodPromotionValidateBeforeCall(ondemandId, createVodPromotionRequest, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPromotion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVodPromotion
     * @param ondemandId The ID of the On Demand. (required)
     * @param promotionId The ID of the promotion. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The promotion was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t delete a promotion for an On Demand page that you not own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or promotion exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVodPromotionCall(BigDecimal ondemandId, BigDecimal promotionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "promotion_id" + "}", localVarApiClient.escapeString(promotionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVodPromotionValidateBeforeCall(BigDecimal ondemandId, BigDecimal promotionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling deleteVodPromotion(Async)");
        }

        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling deleteVodPromotion(Async)");
        }

        return deleteVodPromotionCall(ondemandId, promotionId, _callback);

    }

    /**
     * Remove a promotion from an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param promotionId The ID of the promotion. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The promotion was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t delete a promotion for an On Demand page that you not own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or promotion exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVodPromotion(BigDecimal ondemandId, BigDecimal promotionId) throws ApiException {
        deleteVodPromotionWithHttpInfo(ondemandId, promotionId);
    }

    /**
     * Remove a promotion from an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param promotionId The ID of the promotion. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The promotion was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t delete a promotion for an On Demand page that you not own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or promotion exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVodPromotionWithHttpInfo(BigDecimal ondemandId, BigDecimal promotionId) throws ApiException {
        okhttp3.Call localVarCall = deleteVodPromotionValidateBeforeCall(ondemandId, promotionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a promotion from an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param promotionId The ID of the promotion. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The promotion was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t delete a promotion for an On Demand page that you not own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or promotion exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVodPromotionAsync(BigDecimal ondemandId, BigDecimal promotionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVodPromotionValidateBeforeCall(ondemandId, promotionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodPromotion
     * @param ondemandId The ID of the On Demand. (required)
     * @param promotionId The ID of the promotion. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotion was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t view a promotion for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or promotion exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodPromotionCall(BigDecimal ondemandId, BigDecimal promotionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "promotion_id" + "}", localVarApiClient.escapeString(promotionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.promotion+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodPromotionValidateBeforeCall(BigDecimal ondemandId, BigDecimal promotionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVodPromotion(Async)");
        }

        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling getVodPromotion(Async)");
        }

        return getVodPromotionCall(ondemandId, promotionId, _callback);

    }

    /**
     * Get a specific promotion on an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param promotionId The ID of the promotion. (required)
     * @return OnDemandPromotion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotion was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t view a promotion for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or promotion exists. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandPromotion getVodPromotion(BigDecimal ondemandId, BigDecimal promotionId) throws ApiException {
        ApiResponse<OnDemandPromotion> localVarResp = getVodPromotionWithHttpInfo(ondemandId, promotionId);
        return localVarResp.getData();
    }

    /**
     * Get a specific promotion on an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param promotionId The ID of the promotion. (required)
     * @return ApiResponse&lt;OnDemandPromotion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotion was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t view a promotion for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or promotion exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandPromotion> getVodPromotionWithHttpInfo(BigDecimal ondemandId, BigDecimal promotionId) throws ApiException {
        okhttp3.Call localVarCall = getVodPromotionValidateBeforeCall(ondemandId, promotionId, null);
        Type localVarReturnType = new TypeToken<OnDemandPromotion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific promotion on an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param promotionId The ID of the promotion. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotion was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t view a promotion for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or promotion exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodPromotionAsync(BigDecimal ondemandId, BigDecimal promotionId, final ApiCallback<OnDemandPromotion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodPromotionValidateBeforeCall(ondemandId, promotionId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPromotion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodPromotionCodes
     * @param ondemandId The ID of the On Demand. (required)
     * @param promotionId The ID of the promotion. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The codes were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t create promotions for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodPromotionCodesCall(BigDecimal ondemandId, BigDecimal promotionId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "promotion_id" + "}", localVarApiClient.escapeString(promotionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.promocode+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodPromotionCodesValidateBeforeCall(BigDecimal ondemandId, BigDecimal promotionId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVodPromotionCodes(Async)");
        }

        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling getVodPromotionCodes(Async)");
        }

        return getVodPromotionCodesCall(ondemandId, promotionId, page, perPage, _callback);

    }

    /**
     * Get all the codes of a promotion on an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param promotionId The ID of the promotion. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return OnDemandPromotionCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The codes were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t create promotions for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandPromotionCode getVodPromotionCodes(BigDecimal ondemandId, BigDecimal promotionId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<OnDemandPromotionCode> localVarResp = getVodPromotionCodesWithHttpInfo(ondemandId, promotionId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the codes of a promotion on an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param promotionId The ID of the promotion. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;OnDemandPromotionCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The codes were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t create promotions for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandPromotionCode> getVodPromotionCodesWithHttpInfo(BigDecimal ondemandId, BigDecimal promotionId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getVodPromotionCodesValidateBeforeCall(ondemandId, promotionId, page, perPage, null);
        Type localVarReturnType = new TypeToken<OnDemandPromotionCode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the codes of a promotion on an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param promotionId The ID of the promotion. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The codes were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t create promotions for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodPromotionCodesAsync(BigDecimal ondemandId, BigDecimal promotionId, BigDecimal page, BigDecimal perPage, final ApiCallback<OnDemandPromotionCode> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodPromotionCodesValidateBeforeCall(ondemandId, promotionId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPromotionCode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodPromotions
     * @param ondemandId The ID of the On Demand. (required)
     * @param filter The filter to apply to the results. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotions were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The filter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t view promotions for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodPromotionsCall(BigDecimal ondemandId, String filter, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/promotions"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.promotion+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodPromotionsValidateBeforeCall(BigDecimal ondemandId, String filter, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVodPromotions(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getVodPromotions(Async)");
        }

        return getVodPromotionsCall(ondemandId, filter, page, perPage, _callback);

    }

    /**
     * Get all the promotions on an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param filter The filter to apply to the results. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return OnDemandPromotion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotions were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The filter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t view promotions for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandPromotion getVodPromotions(BigDecimal ondemandId, String filter, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<OnDemandPromotion> localVarResp = getVodPromotionsWithHttpInfo(ondemandId, filter, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the promotions on an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param filter The filter to apply to the results. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;OnDemandPromotion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotions were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The filter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t view promotions for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandPromotion> getVodPromotionsWithHttpInfo(BigDecimal ondemandId, String filter, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getVodPromotionsValidateBeforeCall(ondemandId, filter, page, perPage, null);
        Type localVarReturnType = new TypeToken<OnDemandPromotion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the promotions on an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param filter The filter to apply to the results. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The promotions were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The filter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t view promotions for an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodPromotionsAsync(BigDecimal ondemandId, String filter, BigDecimal page, BigDecimal perPage, final ApiCallback<OnDemandPromotion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodPromotionsValidateBeforeCall(ondemandId, filter, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPromotion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
