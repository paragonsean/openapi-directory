/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddTagsToChannelRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.Tag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelsTagsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelsTagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsTagsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addChannelTag
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The tag is invalid, or a parameter is invalid. * Error code 2501: The channel has already reached its maximum number of 20 tags. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t add tags to this channel. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addChannelTagCall(BigDecimal channelId, String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/tags/{word}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addChannelTagValidateBeforeCall(BigDecimal channelId, String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addChannelTag(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling addChannelTag(Async)");
        }

        return addChannelTagCall(channelId, word, _callback);

    }

    /**
     * Add a specific tag to a channel
     * This method adds a single tag to the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The tag is invalid, or a parameter is invalid. * Error code 2501: The channel has already reached its maximum number of 20 tags. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t add tags to this channel. </td><td>  -  </td></tr>
     </table>
     */
    public void addChannelTag(BigDecimal channelId, String word) throws ApiException {
        addChannelTagWithHttpInfo(channelId, word);
    }

    /**
     * Add a specific tag to a channel
     * This method adds a single tag to the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The tag is invalid, or a parameter is invalid. * Error code 2501: The channel has already reached its maximum number of 20 tags. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t add tags to this channel. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addChannelTagWithHttpInfo(BigDecimal channelId, String word) throws ApiException {
        okhttp3.Call localVarCall = addChannelTagValidateBeforeCall(channelId, word, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a specific tag to a channel (asynchronously)
     * This method adds a single tag to the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The tag is invalid, or a parameter is invalid. * Error code 2501: The channel has already reached its maximum number of 20 tags. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t add tags to this channel. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addChannelTagAsync(BigDecimal channelId, String word, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addChannelTagValidateBeforeCall(channelId, word, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addTagsToChannel
     * @param channelId The ID of the channel. (required)
     * @param addTagsToChannelRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * No such channel exists, or a parameter is invalid. * Error code 2501: You tried to add more than 20 tags to the channel. * Error code 2205: There was no request body, or the request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t add tags to this channel. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTagsToChannelCall(BigDecimal channelId, AddTagsToChannelRequest addTagsToChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTagsToChannelRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/tags"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTagsToChannelValidateBeforeCall(BigDecimal channelId, AddTagsToChannelRequest addTagsToChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addTagsToChannel(Async)");
        }

        // verify the required parameter 'addTagsToChannelRequest' is set
        if (addTagsToChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'addTagsToChannelRequest' when calling addTagsToChannel(Async)");
        }

        return addTagsToChannelCall(channelId, addTagsToChannelRequest, _callback);

    }

    /**
     * Add a list of tags to a channel
     * This method adds multiple tags to the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param addTagsToChannelRequest  (required)
     * @return List&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * No such channel exists, or a parameter is invalid. * Error code 2501: You tried to add more than 20 tags to the channel. * Error code 2205: There was no request body, or the request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t add tags to this channel. </td><td>  -  </td></tr>
     </table>
     */
    public List<Tag> addTagsToChannel(BigDecimal channelId, AddTagsToChannelRequest addTagsToChannelRequest) throws ApiException {
        ApiResponse<List<Tag>> localVarResp = addTagsToChannelWithHttpInfo(channelId, addTagsToChannelRequest);
        return localVarResp.getData();
    }

    /**
     * Add a list of tags to a channel
     * This method adds multiple tags to the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param addTagsToChannelRequest  (required)
     * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * No such channel exists, or a parameter is invalid. * Error code 2501: You tried to add more than 20 tags to the channel. * Error code 2205: There was no request body, or the request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t add tags to this channel. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Tag>> addTagsToChannelWithHttpInfo(BigDecimal channelId, AddTagsToChannelRequest addTagsToChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = addTagsToChannelValidateBeforeCall(channelId, addTagsToChannelRequest, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a list of tags to a channel (asynchronously)
     * This method adds multiple tags to the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param addTagsToChannelRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * No such channel exists, or a parameter is invalid. * Error code 2501: You tried to add more than 20 tags to the channel. * Error code 2205: There was no request body, or the request body is malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t add tags to this channel. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTagsToChannelAsync(BigDecimal channelId, AddTagsToChannelRequest addTagsToChannelRequest, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTagsToChannelValidateBeforeCall(channelId, addTagsToChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkIfChannelHasTag
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag has been added to the channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No such tag exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: The tag exists, but the channel isn&#39;t tagged by it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfChannelHasTagCall(BigDecimal channelId, String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/tags/{word}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkIfChannelHasTagValidateBeforeCall(BigDecimal channelId, String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling checkIfChannelHasTag(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling checkIfChannelHasTag(Async)");
        }

        return checkIfChannelHasTagCall(channelId, word, _callback);

    }

    /**
     * Check if a tag has been added to a channel
     * This method determines whether a specific tag has been added to the channel in question.
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag has been added to the channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No such tag exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: The tag exists, but the channel isn&#39;t tagged by it. </td><td>  -  </td></tr>
     </table>
     */
    public void checkIfChannelHasTag(BigDecimal channelId, String word) throws ApiException {
        checkIfChannelHasTagWithHttpInfo(channelId, word);
    }

    /**
     * Check if a tag has been added to a channel
     * This method determines whether a specific tag has been added to the channel in question.
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag has been added to the channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No such tag exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: The tag exists, but the channel isn&#39;t tagged by it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkIfChannelHasTagWithHttpInfo(BigDecimal channelId, String word) throws ApiException {
        okhttp3.Call localVarCall = checkIfChannelHasTagValidateBeforeCall(channelId, word, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a tag has been added to a channel (asynchronously)
     * This method determines whether a specific tag has been added to the channel in question.
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag has been added to the channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No such tag exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: The tag exists, but the channel isn&#39;t tagged by it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfChannelHasTagAsync(BigDecimal channelId, String word, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkIfChannelHasTagValidateBeforeCall(channelId, word, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTagFromChannel
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The tag is invalid, or a parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t remove tags from this channel. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagFromChannelCall(BigDecimal channelId, String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/tags/{word}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTagFromChannelValidateBeforeCall(BigDecimal channelId, String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling deleteTagFromChannel(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling deleteTagFromChannel(Async)");
        }

        return deleteTagFromChannelCall(channelId, word, _callback);

    }

    /**
     * Remove a tag from a channel
     * This method removes a single tag from the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The tag is invalid, or a parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t remove tags from this channel. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTagFromChannel(BigDecimal channelId, String word) throws ApiException {
        deleteTagFromChannelWithHttpInfo(channelId, word);
    }

    /**
     * Remove a tag from a channel
     * This method removes a single tag from the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The tag is invalid, or a parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t remove tags from this channel. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTagFromChannelWithHttpInfo(BigDecimal channelId, String word) throws ApiException {
        okhttp3.Call localVarCall = deleteTagFromChannelValidateBeforeCall(channelId, word, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a tag from a channel (asynchronously)
     * This method removes a single tag from the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param word The word to use as the tag. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The tag is invalid, or a parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t remove tags from this channel. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagFromChannelAsync(BigDecimal channelId, String word, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTagFromChannelValidateBeforeCall(channelId, word, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelTags
     * @param channelId The ID of the channel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelTagsCall(BigDecimal channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/tags"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelTagsValidateBeforeCall(BigDecimal channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelTags(Async)");
        }

        return getChannelTagsCall(channelId, _callback);

    }

    /**
     * Get all the tags that have been added to a channel
     * This method gets all the tags that have been added to the specified channel.
     * @param channelId The ID of the channel. (required)
     * @return List&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Tag> getChannelTags(BigDecimal channelId) throws ApiException {
        ApiResponse<List<Tag>> localVarResp = getChannelTagsWithHttpInfo(channelId);
        return localVarResp.getData();
    }

    /**
     * Get all the tags that have been added to a channel
     * This method gets all the tags that have been added to the specified channel.
     * @param channelId The ID of the channel. (required)
     * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Tag>> getChannelTagsWithHttpInfo(BigDecimal channelId) throws ApiException {
        okhttp3.Call localVarCall = getChannelTagsValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the tags that have been added to a channel (asynchronously)
     * This method gets all the tags that have been added to the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelTagsAsync(BigDecimal channelId, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelTagsValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
