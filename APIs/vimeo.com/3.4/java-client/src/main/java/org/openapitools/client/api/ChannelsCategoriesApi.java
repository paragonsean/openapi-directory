/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddChannelCategoriesRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LegacyError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelsCategoriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelsCategoriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsCategoriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addChannelCategories
     * @param channelId The ID of the channel. (required)
     * @param addChannelCategoriesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The categories were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: There was no request body, or the request body is malformed. * Error code 2204: You exceeded the maximum number of channel categories. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t add categories to the channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addChannelCategoriesCall(BigDecimal channelId, AddChannelCategoriesRequest addChannelCategoriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addChannelCategoriesRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/categories"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addChannelCategoriesValidateBeforeCall(BigDecimal channelId, AddChannelCategoriesRequest addChannelCategoriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addChannelCategories(Async)");
        }

        // verify the required parameter 'addChannelCategoriesRequest' is set
        if (addChannelCategoriesRequest == null) {
            throw new ApiException("Missing the required parameter 'addChannelCategoriesRequest' when calling addChannelCategories(Async)");
        }

        return addChannelCategoriesCall(channelId, addChannelCategoriesRequest, _callback);

    }

    /**
     * Add a list of categories to a channel
     * This method adds multiple categories to the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param addChannelCategoriesRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The categories were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: There was no request body, or the request body is malformed. * Error code 2204: You exceeded the maximum number of channel categories. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t add categories to the channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public void addChannelCategories(BigDecimal channelId, AddChannelCategoriesRequest addChannelCategoriesRequest) throws ApiException {
        addChannelCategoriesWithHttpInfo(channelId, addChannelCategoriesRequest);
    }

    /**
     * Add a list of categories to a channel
     * This method adds multiple categories to the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param addChannelCategoriesRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The categories were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: There was no request body, or the request body is malformed. * Error code 2204: You exceeded the maximum number of channel categories. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t add categories to the channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addChannelCategoriesWithHttpInfo(BigDecimal channelId, AddChannelCategoriesRequest addChannelCategoriesRequest) throws ApiException {
        okhttp3.Call localVarCall = addChannelCategoriesValidateBeforeCall(channelId, addChannelCategoriesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a list of categories to a channel (asynchronously)
     * This method adds multiple categories to the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param addChannelCategoriesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The categories were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: There was no request body, or the request body is malformed. * Error code 2204: You exceeded the maximum number of channel categories. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t add categories to the channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addChannelCategoriesAsync(BigDecimal channelId, AddChannelCategoriesRequest addChannelCategoriesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addChannelCategoriesValidateBeforeCall(channelId, addChannelCategoriesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for categorizeChannel
     * @param category The name of the category. (required)
     * @param channelId The ID of the channel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The channel was categorized. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: You exceeded the maximum number of channel categories. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own the channel or isn&#39;t a channel moderator. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel or category exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categorizeChannelCall(String category, BigDecimal channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.category+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categorizeChannelValidateBeforeCall(String category, BigDecimal channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling categorizeChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling categorizeChannel(Async)");
        }

        return categorizeChannelCall(category, channelId, _callback);

    }

    /**
     * Categorize a channel
     * This method adds a channel to a category.
     * @param category The name of the category. (required)
     * @param channelId The ID of the channel. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The channel was categorized. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: You exceeded the maximum number of channel categories. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own the channel or isn&#39;t a channel moderator. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel or category exists. </td><td>  -  </td></tr>
     </table>
     */
    public void categorizeChannel(String category, BigDecimal channelId) throws ApiException {
        categorizeChannelWithHttpInfo(category, channelId);
    }

    /**
     * Categorize a channel
     * This method adds a channel to a category.
     * @param category The name of the category. (required)
     * @param channelId The ID of the channel. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The channel was categorized. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: You exceeded the maximum number of channel categories. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own the channel or isn&#39;t a channel moderator. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel or category exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> categorizeChannelWithHttpInfo(String category, BigDecimal channelId) throws ApiException {
        okhttp3.Call localVarCall = categorizeChannelValidateBeforeCall(category, channelId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Categorize a channel (asynchronously)
     * This method adds a channel to a category.
     * @param category The name of the category. (required)
     * @param channelId The ID of the channel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The channel was categorized. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: You exceeded the maximum number of channel categories. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own the channel or isn&#39;t a channel moderator. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel or category exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categorizeChannelAsync(String category, BigDecimal channelId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = categorizeChannelValidateBeforeCall(category, channelId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannelCategory
     * @param category The name of the category. (required)
     * @param channelId The ID of the channel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The channel was removed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own the channel or isn&#39;t a channel moderator. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel or category exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelCategoryCall(String category, BigDecimal channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/categories/{category}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.category+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelCategoryValidateBeforeCall(String category, BigDecimal channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling deleteChannelCategory(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling deleteChannelCategory(Async)");
        }

        return deleteChannelCategoryCall(category, channelId, _callback);

    }

    /**
     * Remove a category from a channel
     * This method removes a single category from the specified channel.
     * @param category The name of the category. (required)
     * @param channelId The ID of the channel. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The channel was removed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own the channel or isn&#39;t a channel moderator. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel or category exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChannelCategory(String category, BigDecimal channelId) throws ApiException {
        deleteChannelCategoryWithHttpInfo(category, channelId);
    }

    /**
     * Remove a category from a channel
     * This method removes a single category from the specified channel.
     * @param category The name of the category. (required)
     * @param channelId The ID of the channel. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The channel was removed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own the channel or isn&#39;t a channel moderator. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel or category exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChannelCategoryWithHttpInfo(String category, BigDecimal channelId) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelCategoryValidateBeforeCall(category, channelId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a category from a channel (asynchronously)
     * This method removes a single category from the specified channel.
     * @param category The name of the category. (required)
     * @param channelId The ID of the channel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The channel was removed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own the channel or isn&#39;t a channel moderator. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel or category exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelCategoryAsync(String category, BigDecimal channelId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelCategoryValidateBeforeCall(category, channelId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelCategories
     * @param channelId The ID of the channel. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelCategoriesCall(BigDecimal channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/categories"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.category+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelCategoriesValidateBeforeCall(BigDecimal channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelCategories(Async)");
        }

        return getChannelCategoriesCall(channelId, _callback);

    }

    /**
     * Get all the categories in a channel
     * This method gets all the categories in the specified channel.
     * @param channelId The ID of the channel. (required)
     * @return List&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Category> getChannelCategories(BigDecimal channelId) throws ApiException {
        ApiResponse<List<Category>> localVarResp = getChannelCategoriesWithHttpInfo(channelId);
        return localVarResp.getData();
    }

    /**
     * Get all the categories in a channel
     * This method gets all the categories in the specified channel.
     * @param channelId The ID of the channel. (required)
     * @return ApiResponse&lt;List&lt;Category&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Category>> getChannelCategoriesWithHttpInfo(BigDecimal channelId) throws ApiException {
        okhttp3.Call localVarCall = getChannelCategoriesValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the categories in a channel (asynchronously)
     * This method gets all the categories in the specified channel.
     * @param channelId The ID of the channel. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such channel exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelCategoriesAsync(BigDecimal channelId, final ApiCallback<List<Category>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelCategoriesValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
