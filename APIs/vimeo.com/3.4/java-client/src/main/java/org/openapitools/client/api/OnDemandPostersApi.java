/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.EditVodPosterRequest;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.Picture;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OnDemandPostersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandPostersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandPostersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVodPoster
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The poster was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify another user&#39;s On Demand page. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVodPosterCall(BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/pictures"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVodPosterValidateBeforeCall(BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling addVodPoster(Async)");
        }

        return addVodPosterCall(ondemandId, _callback);

    }

    /**
     * Add a poster to an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The poster was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify another user&#39;s On Demand page. </td><td>  -  </td></tr>
     </table>
     */
    public Picture addVodPoster(BigDecimal ondemandId) throws ApiException {
        ApiResponse<Picture> localVarResp = addVodPosterWithHttpInfo(ondemandId);
        return localVarResp.getData();
    }

    /**
     * Add a poster to an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The poster was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify another user&#39;s On Demand page. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> addVodPosterWithHttpInfo(BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = addVodPosterValidateBeforeCall(ondemandId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a poster to an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The poster was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify another user&#39;s On Demand page. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVodPosterAsync(BigDecimal ondemandId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVodPosterValidateBeforeCall(ondemandId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editVodPoster
     * @param ondemandId The ID of the On Demand. (required)
     * @param posterId The ID of the picture. (required)
     * @param editVodPosterRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The poster was edited. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editVodPosterCall(BigDecimal ondemandId, BigDecimal posterId, EditVodPosterRequest editVodPosterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editVodPosterRequest;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/pictures/{poster_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "poster_id" + "}", localVarApiClient.escapeString(posterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editVodPosterValidateBeforeCall(BigDecimal ondemandId, BigDecimal posterId, EditVodPosterRequest editVodPosterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling editVodPoster(Async)");
        }

        // verify the required parameter 'posterId' is set
        if (posterId == null) {
            throw new ApiException("Missing the required parameter 'posterId' when calling editVodPoster(Async)");
        }

        return editVodPosterCall(ondemandId, posterId, editVodPosterRequest, _callback);

    }

    /**
     * Edit a poster of an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param posterId The ID of the picture. (required)
     * @param editVodPosterRequest  (optional)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The poster was edited. </td><td>  -  </td></tr>
     </table>
     */
    public Picture editVodPoster(BigDecimal ondemandId, BigDecimal posterId, EditVodPosterRequest editVodPosterRequest) throws ApiException {
        ApiResponse<Picture> localVarResp = editVodPosterWithHttpInfo(ondemandId, posterId, editVodPosterRequest);
        return localVarResp.getData();
    }

    /**
     * Edit a poster of an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param posterId The ID of the picture. (required)
     * @param editVodPosterRequest  (optional)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The poster was edited. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> editVodPosterWithHttpInfo(BigDecimal ondemandId, BigDecimal posterId, EditVodPosterRequest editVodPosterRequest) throws ApiException {
        okhttp3.Call localVarCall = editVodPosterValidateBeforeCall(ondemandId, posterId, editVodPosterRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a poster of an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param posterId The ID of the picture. (required)
     * @param editVodPosterRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The poster was edited. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editVodPosterAsync(BigDecimal ondemandId, BigDecimal posterId, EditVodPosterRequest editVodPosterRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = editVodPosterValidateBeforeCall(ondemandId, posterId, editVodPosterRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodPoster
     * @param ondemandId The ID of the On Demand. (required)
     * @param posterId The ID of the picture. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The poster was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodPosterCall(BigDecimal ondemandId, BigDecimal posterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/pictures/{poster_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "poster_id" + "}", localVarApiClient.escapeString(posterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodPosterValidateBeforeCall(BigDecimal ondemandId, BigDecimal posterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVodPoster(Async)");
        }

        // verify the required parameter 'posterId' is set
        if (posterId == null) {
            throw new ApiException("Missing the required parameter 'posterId' when calling getVodPoster(Async)");
        }

        return getVodPosterCall(ondemandId, posterId, _callback);

    }

    /**
     * Get a specific poster of an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param posterId The ID of the picture. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The poster was returned. </td><td>  -  </td></tr>
     </table>
     */
    public Picture getVodPoster(BigDecimal ondemandId, BigDecimal posterId) throws ApiException {
        ApiResponse<Picture> localVarResp = getVodPosterWithHttpInfo(ondemandId, posterId);
        return localVarResp.getData();
    }

    /**
     * Get a specific poster of an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param posterId The ID of the picture. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The poster was returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> getVodPosterWithHttpInfo(BigDecimal ondemandId, BigDecimal posterId) throws ApiException {
        okhttp3.Call localVarCall = getVodPosterValidateBeforeCall(ondemandId, posterId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific poster of an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param posterId The ID of the picture. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The poster was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodPosterAsync(BigDecimal ondemandId, BigDecimal posterId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodPosterValidateBeforeCall(ondemandId, posterId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodPosters
     * @param ondemandId The ID of the On Demand. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posters were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodPostersCall(BigDecimal ondemandId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/pictures"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodPostersValidateBeforeCall(BigDecimal ondemandId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVodPosters(Async)");
        }

        return getVodPostersCall(ondemandId, page, perPage, _callback);

    }

    /**
     * Get all the posters of an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posters were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Picture> getVodPosters(BigDecimal ondemandId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Picture>> localVarResp = getVodPostersWithHttpInfo(ondemandId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the posters of an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posters were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Picture>> getVodPostersWithHttpInfo(BigDecimal ondemandId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getVodPostersValidateBeforeCall(ondemandId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the posters of an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The posters were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodPostersAsync(BigDecimal ondemandId, BigDecimal page, BigDecimal perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodPostersValidateBeforeCall(ondemandId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
