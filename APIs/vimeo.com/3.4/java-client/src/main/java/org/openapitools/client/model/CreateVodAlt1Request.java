/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateVodAlt1RequestBuy;
import org.openapitools.client.model.CreateVodAlt1RequestEpisodes;
import org.openapitools.client.model.CreateVodAlt1RequestRent;
import org.openapitools.client.model.CreateVodAlt1RequestSubscription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateVodAlt1Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateVodAlt1Request {
  /**
   * An array of accepted currencies.  Option descriptions:  * &#x60;AUD&#x60; - Australian Dollar  * &#x60;CAD&#x60; - Canadian Dollar  * &#x60;CHF&#x60; - Swiss Franc  * &#x60;DKK&#x60; - Danish Krone  * &#x60;EUR&#x60; - Euro  * &#x60;GBP&#x60; - British Pound  * &#x60;JPY&#x60; - Japanese Yen  * &#x60;KRW&#x60; - South Korean Won  * &#x60;NOK&#x60; - Norwegian Krone  * &#x60;PLN&#x60; - Polish Zloty  * &#x60;SEK&#x60; - Swedish Krona  * &#x60;USD&#x60; - US Dollar 
   */
  @JsonAdapter(AcceptedCurrenciesEnum.Adapter.class)
  public enum AcceptedCurrenciesEnum {
    AUD("AUD"),
    
    CAD("CAD"),
    
    CHF("CHF"),
    
    DKK("DKK"),
    
    EUR("EUR"),
    
    GBP("GBP"),
    
    JPY("JPY"),
    
    KRW("KRW"),
    
    NOK("NOK"),
    
    PLN("PLN"),
    
    SEK("SEK"),
    
    USD("USD");

    private String value;

    AcceptedCurrenciesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AcceptedCurrenciesEnum fromValue(String value) {
      for (AcceptedCurrenciesEnum b : AcceptedCurrenciesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AcceptedCurrenciesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AcceptedCurrenciesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AcceptedCurrenciesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AcceptedCurrenciesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AcceptedCurrenciesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCEPTED_CURRENCIES = "accepted_currencies";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_CURRENCIES)
  private AcceptedCurrenciesEnum acceptedCurrencies;

  public static final String SERIALIZED_NAME_BUY = "buy";
  @SerializedName(SERIALIZED_NAME_BUY)
  private CreateVodAlt1RequestBuy buy;

  /**
   * One or more ratings, either as a comma-separated list or as a JSON array depending on the request format.
   */
  @JsonAdapter(ContentRatingEnum.Adapter.class)
  public enum ContentRatingEnum {
    DRUGS("drugs"),
    
    LANGUAGE("language"),
    
    NUDITY("nudity"),
    
    SAFE("safe"),
    
    UNRATED("unrated"),
    
    VIOLENCE("violence");

    private String value;

    ContentRatingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentRatingEnum fromValue(String value) {
      for (ContentRatingEnum b : ContentRatingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentRatingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentRatingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentRatingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentRatingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentRatingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_RATING = "content_rating";
  @SerializedName(SERIALIZED_NAME_CONTENT_RATING)
  private ContentRatingEnum contentRating;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOMAIN_LINK = "domain_link";
  @SerializedName(SERIALIZED_NAME_DOMAIN_LINK)
  private String domainLink;

  public static final String SERIALIZED_NAME_EPISODES = "episodes";
  @SerializedName(SERIALIZED_NAME_EPISODES)
  private CreateVodAlt1RequestEpisodes episodes;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RENT = "rent";
  @SerializedName(SERIALIZED_NAME_RENT)
  private CreateVodAlt1RequestRent rent;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private CreateVodAlt1RequestSubscription subscription;

  /**
   * The type of On Demand page.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FILM("film"),
    
    SERIES("series");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public CreateVodAlt1Request() {
  }

  public CreateVodAlt1Request acceptedCurrencies(AcceptedCurrenciesEnum acceptedCurrencies) {
    this.acceptedCurrencies = acceptedCurrencies;
    return this;
  }

  /**
   * An array of accepted currencies.  Option descriptions:  * &#x60;AUD&#x60; - Australian Dollar  * &#x60;CAD&#x60; - Canadian Dollar  * &#x60;CHF&#x60; - Swiss Franc  * &#x60;DKK&#x60; - Danish Krone  * &#x60;EUR&#x60; - Euro  * &#x60;GBP&#x60; - British Pound  * &#x60;JPY&#x60; - Japanese Yen  * &#x60;KRW&#x60; - South Korean Won  * &#x60;NOK&#x60; - Norwegian Krone  * &#x60;PLN&#x60; - Polish Zloty  * &#x60;SEK&#x60; - Swedish Krona  * &#x60;USD&#x60; - US Dollar 
   * @return acceptedCurrencies
   */
  @javax.annotation.Nullable
  public AcceptedCurrenciesEnum getAcceptedCurrencies() {
    return acceptedCurrencies;
  }

  public void setAcceptedCurrencies(AcceptedCurrenciesEnum acceptedCurrencies) {
    this.acceptedCurrencies = acceptedCurrencies;
  }


  public CreateVodAlt1Request buy(CreateVodAlt1RequestBuy buy) {
    this.buy = buy;
    return this;
  }

  /**
   * Get buy
   * @return buy
   */
  @javax.annotation.Nullable
  public CreateVodAlt1RequestBuy getBuy() {
    return buy;
  }

  public void setBuy(CreateVodAlt1RequestBuy buy) {
    this.buy = buy;
  }


  public CreateVodAlt1Request contentRating(ContentRatingEnum contentRating) {
    this.contentRating = contentRating;
    return this;
  }

  /**
   * One or more ratings, either as a comma-separated list or as a JSON array depending on the request format.
   * @return contentRating
   */
  @javax.annotation.Nonnull
  public ContentRatingEnum getContentRating() {
    return contentRating;
  }

  public void setContentRating(ContentRatingEnum contentRating) {
    this.contentRating = contentRating;
  }


  public CreateVodAlt1Request description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the On Demand page.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateVodAlt1Request domainLink(String domainLink) {
    this.domainLink = domainLink;
    return this;
  }

  /**
   * The custom domain of the On Demand page.
   * @return domainLink
   */
  @javax.annotation.Nullable
  public String getDomainLink() {
    return domainLink;
  }

  public void setDomainLink(String domainLink) {
    this.domainLink = domainLink;
  }


  public CreateVodAlt1Request episodes(CreateVodAlt1RequestEpisodes episodes) {
    this.episodes = episodes;
    return this;
  }

  /**
   * Get episodes
   * @return episodes
   */
  @javax.annotation.Nullable
  public CreateVodAlt1RequestEpisodes getEpisodes() {
    return episodes;
  }

  public void setEpisodes(CreateVodAlt1RequestEpisodes episodes) {
    this.episodes = episodes;
  }


  public CreateVodAlt1Request link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The custom string to use in this On Demand page&#39;s Vimeo URL.
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public CreateVodAlt1Request name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the On Demand page.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateVodAlt1Request rent(CreateVodAlt1RequestRent rent) {
    this.rent = rent;
    return this;
  }

  /**
   * Get rent
   * @return rent
   */
  @javax.annotation.Nullable
  public CreateVodAlt1RequestRent getRent() {
    return rent;
  }

  public void setRent(CreateVodAlt1RequestRent rent) {
    this.rent = rent;
  }


  public CreateVodAlt1Request subscription(CreateVodAlt1RequestSubscription subscription) {
    this.subscription = subscription;
    return this;
  }

  /**
   * Get subscription
   * @return subscription
   */
  @javax.annotation.Nullable
  public CreateVodAlt1RequestSubscription getSubscription() {
    return subscription;
  }

  public void setSubscription(CreateVodAlt1RequestSubscription subscription) {
    this.subscription = subscription;
  }


  public CreateVodAlt1Request type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of On Demand page.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateVodAlt1Request createVodAlt1Request = (CreateVodAlt1Request) o;
    return Objects.equals(this.acceptedCurrencies, createVodAlt1Request.acceptedCurrencies) &&
        Objects.equals(this.buy, createVodAlt1Request.buy) &&
        Objects.equals(this.contentRating, createVodAlt1Request.contentRating) &&
        Objects.equals(this.description, createVodAlt1Request.description) &&
        Objects.equals(this.domainLink, createVodAlt1Request.domainLink) &&
        Objects.equals(this.episodes, createVodAlt1Request.episodes) &&
        Objects.equals(this.link, createVodAlt1Request.link) &&
        Objects.equals(this.name, createVodAlt1Request.name) &&
        Objects.equals(this.rent, createVodAlt1Request.rent) &&
        Objects.equals(this.subscription, createVodAlt1Request.subscription) &&
        Objects.equals(this.type, createVodAlt1Request.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedCurrencies, buy, contentRating, description, domainLink, episodes, link, name, rent, subscription, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateVodAlt1Request {\n");
    sb.append("    acceptedCurrencies: ").append(toIndentedString(acceptedCurrencies)).append("\n");
    sb.append("    buy: ").append(toIndentedString(buy)).append("\n");
    sb.append("    contentRating: ").append(toIndentedString(contentRating)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domainLink: ").append(toIndentedString(domainLink)).append("\n");
    sb.append("    episodes: ").append(toIndentedString(episodes)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rent: ").append(toIndentedString(rent)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accepted_currencies");
    openapiFields.add("buy");
    openapiFields.add("content_rating");
    openapiFields.add("description");
    openapiFields.add("domain_link");
    openapiFields.add("episodes");
    openapiFields.add("link");
    openapiFields.add("name");
    openapiFields.add("rent");
    openapiFields.add("subscription");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content_rating");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateVodAlt1Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateVodAlt1Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateVodAlt1Request is not found in the empty JSON string", CreateVodAlt1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateVodAlt1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateVodAlt1Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateVodAlt1Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accepted_currencies") != null && !jsonObj.get("accepted_currencies").isJsonNull()) && !jsonObj.get("accepted_currencies").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accepted_currencies` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accepted_currencies").toString()));
      }
      // validate the optional field `accepted_currencies`
      if (jsonObj.get("accepted_currencies") != null && !jsonObj.get("accepted_currencies").isJsonNull()) {
        AcceptedCurrenciesEnum.validateJsonElement(jsonObj.get("accepted_currencies"));
      }
      // validate the optional field `buy`
      if (jsonObj.get("buy") != null && !jsonObj.get("buy").isJsonNull()) {
        CreateVodAlt1RequestBuy.validateJsonElement(jsonObj.get("buy"));
      }
      if (!jsonObj.get("content_rating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_rating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_rating").toString()));
      }
      // validate the required field `content_rating`
      ContentRatingEnum.validateJsonElement(jsonObj.get("content_rating"));
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("domain_link") != null && !jsonObj.get("domain_link").isJsonNull()) && !jsonObj.get("domain_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_link").toString()));
      }
      // validate the optional field `episodes`
      if (jsonObj.get("episodes") != null && !jsonObj.get("episodes").isJsonNull()) {
        CreateVodAlt1RequestEpisodes.validateJsonElement(jsonObj.get("episodes"));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `rent`
      if (jsonObj.get("rent") != null && !jsonObj.get("rent").isJsonNull()) {
        CreateVodAlt1RequestRent.validateJsonElement(jsonObj.get("rent"));
      }
      // validate the optional field `subscription`
      if (jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) {
        CreateVodAlt1RequestSubscription.validateJsonElement(jsonObj.get("subscription"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateVodAlt1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateVodAlt1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateVodAlt1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateVodAlt1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateVodAlt1Request>() {
           @Override
           public void write(JsonWriter out, CreateVodAlt1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateVodAlt1Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateVodAlt1Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateVodAlt1Request
   * @throws IOException if the JSON string is invalid with respect to CreateVodAlt1Request
   */
  public static CreateVodAlt1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateVodAlt1Request.class);
  }

  /**
   * Convert an instance of CreateVodAlt1Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

