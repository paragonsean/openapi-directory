/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.EmbedSettings;
import org.openapitools.client.model.Picture;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.User;
import org.openapitools.client.model.VideoContext;
import org.openapitools.client.model.VideoMetadata;
import org.openapitools.client.model.VideoPrivacy;
import org.openapitools.client.model.VideoSpatial;
import org.openapitools.client.model.VideoStats;
import org.openapitools.client.model.VideoTranscode;
import org.openapitools.client.model.VideoUpload;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Video
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Video {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<Category> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT_RATING = "content_rating";
  @SerializedName(SERIALIZED_NAME_CONTENT_RATING)
  private List<String> contentRating = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private VideoContext context;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BigDecimal duration;

  public static final String SERIALIZED_NAME_EMBED = "embed";
  @SerializedName(SERIALIZED_NAME_EMBED)
  private EmbedSettings embed;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private BigDecimal height;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LAST_USER_ACTION_EVENT_DATE = "last_user_action_event_date";
  @SerializedName(SERIALIZED_NAME_LAST_USER_ACTION_EVENT_DATE)
  private String lastUserActionEventDate;

  /**
   * The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:  Option descriptions:  * &#x60;by&#x60; - Attribution  * &#x60;by-nc&#x60; - Attribution Non-Commercial  * &#x60;by-nc-nd&#x60; - Attribution Non-Commercial No Derivatives  * &#x60;by-nc-sa&#x60; - Attribution Non-Commercial Share Alike  * &#x60;by-nd&#x60; - Attribution No Derivatives  * &#x60;by-sa&#x60; - Attribution Share Alike  * &#x60;cc0&#x60; - Public Domain Dedication 
   */
  @JsonAdapter(LicenseEnum.Adapter.class)
  public enum LicenseEnum {
    BY("by"),
    
    BY_NC("by-nc"),
    
    BY_NC_ND("by-nc-nd"),
    
    BY_NC_SA("by-nc-sa"),
    
    BY_ND("by-nd"),
    
    BY_SA("by-sa"),
    
    CC0("cc0");

    private String value;

    LicenseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseEnum fromValue(String value) {
      for (LicenseEnum b : LicenseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicenseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicenseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LicenseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LicenseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private LicenseEnum license;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private VideoMetadata metadata;

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modified_time";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private String modifiedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_FOLDER = "parent_folder";
  @SerializedName(SERIALIZED_NAME_PARENT_FOLDER)
  private Project parentFolder;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PICTURES = "pictures";
  @SerializedName(SERIALIZED_NAME_PICTURES)
  private Picture pictures;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private VideoPrivacy privacy;

  public static final String SERIALIZED_NAME_RELEASE_TIME = "release_time";
  @SerializedName(SERIALIZED_NAME_RELEASE_TIME)
  private String releaseTime;

  public static final String SERIALIZED_NAME_RESOURCE_KEY = "resource_key";
  @SerializedName(SERIALIZED_NAME_RESOURCE_KEY)
  private String resourceKey;

  public static final String SERIALIZED_NAME_SPATIAL = "spatial";
  @SerializedName(SERIALIZED_NAME_SPATIAL)
  private VideoSpatial spatial;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private VideoStats stats;

  /**
   * The status code for the availability of the video. This field is deprecated in favor of &#x60;upload&#x60; and &#x60;transcode&#x60;.  Option descriptions:  * &#x60;available&#x60; - The video is available.  * &#x60;quota_exceeded&#x60; - The user&#39;s quota is exceeded with this video.  * &#x60;total_cap_exceeded&#x60; - The user has exceeded their total cap with this video.  * &#x60;transcode_starting&#x60; - Transcoding is beginning for the video.  * &#x60;transcoding&#x60; - Transcoding is underway for the video.  * &#x60;transcoding_error&#x60; - There was an error in transcoding the video.  * &#x60;unavailable&#x60; - The video is unavailable.  * &#x60;uploading&#x60; - The video is being uploaded.  * &#x60;uploading_error&#x60; - There was an error in uploading the video. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    AVAILABLE("available"),
    
    QUOTA_EXCEEDED("quota_exceeded"),
    
    TOTAL_CAP_EXCEEDED("total_cap_exceeded"),
    
    TRANSCODE_STARTING("transcode_starting"),
    
    TRANSCODING("transcoding"),
    
    TRANSCODING_ERROR("transcoding_error"),
    
    UNAVAILABLE("unavailable"),
    
    UPLOADING("uploading"),
    
    UPLOADING_ERROR("uploading_error");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSCODE = "transcode";
  @SerializedName(SERIALIZED_NAME_TRANSCODE)
  private VideoTranscode transcode;

  public static final String SERIALIZED_NAME_UPLOAD = "upload";
  @SerializedName(SERIALIZED_NAME_UPLOAD)
  private VideoUpload upload;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private BigDecimal width;

  public Video() {
  }

  public Video categories(List<Category> categories) {
    this.categories = categories;
    return this;
  }

  public Video addCategoriesItem(Category categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * The categories to which this video belongs.
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<Category> getCategories() {
    return categories;
  }

  public void setCategories(List<Category> categories) {
    this.categories = categories;
  }


  public Video contentRating(List<String> contentRating) {
    this.contentRating = contentRating;
    return this;
  }

  public Video addContentRatingItem(String contentRatingItem) {
    if (this.contentRating == null) {
      this.contentRating = new ArrayList<>();
    }
    this.contentRating.add(contentRatingItem);
    return this;
  }

  /**
   * The content ratings of this video.
   * @return contentRating
   */
  @javax.annotation.Nonnull
  public List<String> getContentRating() {
    return contentRating;
  }

  public void setContentRating(List<String> contentRating) {
    this.contentRating = contentRating;
  }


  public Video context(VideoContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nonnull
  public VideoContext getContext() {
    return context;
  }

  public void setContext(VideoContext context) {
    this.context = context;
  }


  public Video createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * The time in ISO 8601 format when the video was created.
   * @return createdTime
   */
  @javax.annotation.Nonnull
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }


  public Video description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A brief explanation of the video&#39;s content.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Video duration(BigDecimal duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The video&#39;s duration in seconds.
   * @return duration
   */
  @javax.annotation.Nonnull
  public BigDecimal getDuration() {
    return duration;
  }

  public void setDuration(BigDecimal duration) {
    this.duration = duration;
  }


  public Video embed(EmbedSettings embed) {
    this.embed = embed;
    return this;
  }

  /**
   * Information about embedding this video.
   * @return embed
   */
  @javax.annotation.Nonnull
  public EmbedSettings getEmbed() {
    return embed;
  }

  public void setEmbed(EmbedSettings embed) {
    this.embed = embed;
  }


  public Video height(BigDecimal height) {
    this.height = height;
    return this;
  }

  /**
   * The video&#39;s height in pixels.
   * @return height
   */
  @javax.annotation.Nonnull
  public BigDecimal getHeight() {
    return height;
  }

  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public Video language(String language) {
    this.language = language;
    return this;
  }

  /**
   * The video&#39;s primary language.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public Video lastUserActionEventDate(String lastUserActionEventDate) {
    this.lastUserActionEventDate = lastUserActionEventDate;
    return this;
  }

  /**
   * The time in ISO 8601 format when the user last modified the video.
   * @return lastUserActionEventDate
   */
  @javax.annotation.Nullable
  public String getLastUserActionEventDate() {
    return lastUserActionEventDate;
  }

  public void setLastUserActionEventDate(String lastUserActionEventDate) {
    this.lastUserActionEventDate = lastUserActionEventDate;
  }


  public Video license(LicenseEnum license) {
    this.license = license;
    return this;
  }

  /**
   * The [Creative Commons](http://creativecommons.org/licenses/) license used for the video:  Option descriptions:  * &#x60;by&#x60; - Attribution  * &#x60;by-nc&#x60; - Attribution Non-Commercial  * &#x60;by-nc-nd&#x60; - Attribution Non-Commercial No Derivatives  * &#x60;by-nc-sa&#x60; - Attribution Non-Commercial Share Alike  * &#x60;by-nd&#x60; - Attribution No Derivatives  * &#x60;by-sa&#x60; - Attribution Share Alike  * &#x60;cc0&#x60; - Public Domain Dedication 
   * @return license
   */
  @javax.annotation.Nonnull
  public LicenseEnum getLicense() {
    return license;
  }

  public void setLicense(LicenseEnum license) {
    this.license = license;
  }


  public Video link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The link to the video.
   * @return link
   */
  @javax.annotation.Nonnull
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public Video metadata(VideoMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public VideoMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(VideoMetadata metadata) {
    this.metadata = metadata;
  }


  public Video modifiedTime(String modifiedTime) {
    this.modifiedTime = modifiedTime;
    return this;
  }

  /**
   * The time in ISO 8601 format when the video metadata was last modified.
   * @return modifiedTime
   */
  @javax.annotation.Nonnull
  public String getModifiedTime() {
    return modifiedTime;
  }

  public void setModifiedTime(String modifiedTime) {
    this.modifiedTime = modifiedTime;
  }


  public Video name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The video&#39;s title.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Video parentFolder(Project parentFolder) {
    this.parentFolder = parentFolder;
    return this;
  }

  /**
   * Information about the folder that contains this video.
   * @return parentFolder
   */
  @javax.annotation.Nullable
  public Project getParentFolder() {
    return parentFolder;
  }

  public void setParentFolder(Project parentFolder) {
    this.parentFolder = parentFolder;
  }


  public Video password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The privacy-enabled password to watch this video. Only users can see their own video passwords. This data requires a bearer token with the &#x60;private&#x60; scope.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public Video pictures(Picture pictures) {
    this.pictures = pictures;
    return this;
  }

  /**
   * The active picture for this video.
   * @return pictures
   */
  @javax.annotation.Nonnull
  public Picture getPictures() {
    return pictures;
  }

  public void setPictures(Picture pictures) {
    this.pictures = pictures;
  }


  public Video privacy(VideoPrivacy privacy) {
    this.privacy = privacy;
    return this;
  }

  /**
   * Get privacy
   * @return privacy
   */
  @javax.annotation.Nonnull
  public VideoPrivacy getPrivacy() {
    return privacy;
  }

  public void setPrivacy(VideoPrivacy privacy) {
    this.privacy = privacy;
  }


  public Video releaseTime(String releaseTime) {
    this.releaseTime = releaseTime;
    return this;
  }

  /**
   * The time in ISO 8601 format when the video was released.
   * @return releaseTime
   */
  @javax.annotation.Nonnull
  public String getReleaseTime() {
    return releaseTime;
  }

  public void setReleaseTime(String releaseTime) {
    this.releaseTime = releaseTime;
  }


  public Video resourceKey(String resourceKey) {
    this.resourceKey = resourceKey;
    return this;
  }

  /**
   * The resource key string of the video.
   * @return resourceKey
   */
  @javax.annotation.Nonnull
  public String getResourceKey() {
    return resourceKey;
  }

  public void setResourceKey(String resourceKey) {
    this.resourceKey = resourceKey;
  }


  public Video spatial(VideoSpatial spatial) {
    this.spatial = spatial;
    return this;
  }

  /**
   * Get spatial
   * @return spatial
   */
  @javax.annotation.Nonnull
  public VideoSpatial getSpatial() {
    return spatial;
  }

  public void setSpatial(VideoSpatial spatial) {
    this.spatial = spatial;
  }


  public Video stats(VideoStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nonnull
  public VideoStats getStats() {
    return stats;
  }

  public void setStats(VideoStats stats) {
    this.stats = stats;
  }


  public Video status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status code for the availability of the video. This field is deprecated in favor of &#x60;upload&#x60; and &#x60;transcode&#x60;.  Option descriptions:  * &#x60;available&#x60; - The video is available.  * &#x60;quota_exceeded&#x60; - The user&#39;s quota is exceeded with this video.  * &#x60;total_cap_exceeded&#x60; - The user has exceeded their total cap with this video.  * &#x60;transcode_starting&#x60; - Transcoding is beginning for the video.  * &#x60;transcoding&#x60; - Transcoding is underway for the video.  * &#x60;transcoding_error&#x60; - There was an error in transcoding the video.  * &#x60;unavailable&#x60; - The video is unavailable.  * &#x60;uploading&#x60; - The video is being uploaded.  * &#x60;uploading_error&#x60; - There was an error in uploading the video. 
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Video tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public Video addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * An array of all tags assigned to this video.
   * @return tags
   */
  @javax.annotation.Nonnull
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public Video transcode(VideoTranscode transcode) {
    this.transcode = transcode;
    return this;
  }

  /**
   * Get transcode
   * @return transcode
   */
  @javax.annotation.Nullable
  public VideoTranscode getTranscode() {
    return transcode;
  }

  public void setTranscode(VideoTranscode transcode) {
    this.transcode = transcode;
  }


  public Video upload(VideoUpload upload) {
    this.upload = upload;
    return this;
  }

  /**
   * Get upload
   * @return upload
   */
  @javax.annotation.Nullable
  public VideoUpload getUpload() {
    return upload;
  }

  public void setUpload(VideoUpload upload) {
    this.upload = upload;
  }


  public Video uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The video&#39;s canonical relative URI.
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public Video user(User user) {
    this.user = user;
    return this;
  }

  /**
   * The video owner.
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }


  public Video width(BigDecimal width) {
    this.width = width;
    return this;
  }

  /**
   * The video&#39;s width in pixels.
   * @return width
   */
  @javax.annotation.Nonnull
  public BigDecimal getWidth() {
    return width;
  }

  public void setWidth(BigDecimal width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Video video = (Video) o;
    return Objects.equals(this.categories, video.categories) &&
        Objects.equals(this.contentRating, video.contentRating) &&
        Objects.equals(this.context, video.context) &&
        Objects.equals(this.createdTime, video.createdTime) &&
        Objects.equals(this.description, video.description) &&
        Objects.equals(this.duration, video.duration) &&
        Objects.equals(this.embed, video.embed) &&
        Objects.equals(this.height, video.height) &&
        Objects.equals(this.language, video.language) &&
        Objects.equals(this.lastUserActionEventDate, video.lastUserActionEventDate) &&
        Objects.equals(this.license, video.license) &&
        Objects.equals(this.link, video.link) &&
        Objects.equals(this.metadata, video.metadata) &&
        Objects.equals(this.modifiedTime, video.modifiedTime) &&
        Objects.equals(this.name, video.name) &&
        Objects.equals(this.parentFolder, video.parentFolder) &&
        Objects.equals(this.password, video.password) &&
        Objects.equals(this.pictures, video.pictures) &&
        Objects.equals(this.privacy, video.privacy) &&
        Objects.equals(this.releaseTime, video.releaseTime) &&
        Objects.equals(this.resourceKey, video.resourceKey) &&
        Objects.equals(this.spatial, video.spatial) &&
        Objects.equals(this.stats, video.stats) &&
        Objects.equals(this.status, video.status) &&
        Objects.equals(this.tags, video.tags) &&
        Objects.equals(this.transcode, video.transcode) &&
        Objects.equals(this.upload, video.upload) &&
        Objects.equals(this.uri, video.uri) &&
        Objects.equals(this.user, video.user) &&
        Objects.equals(this.width, video.width);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, contentRating, context, createdTime, description, duration, embed, height, language, lastUserActionEventDate, license, link, metadata, modifiedTime, name, parentFolder, password, pictures, privacy, releaseTime, resourceKey, spatial, stats, status, tags, transcode, upload, uri, user, width);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Video {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    contentRating: ").append(toIndentedString(contentRating)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lastUserActionEventDate: ").append(toIndentedString(lastUserActionEventDate)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentFolder: ").append(toIndentedString(parentFolder)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    pictures: ").append(toIndentedString(pictures)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    releaseTime: ").append(toIndentedString(releaseTime)).append("\n");
    sb.append("    resourceKey: ").append(toIndentedString(resourceKey)).append("\n");
    sb.append("    spatial: ").append(toIndentedString(spatial)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    transcode: ").append(toIndentedString(transcode)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("content_rating");
    openapiFields.add("context");
    openapiFields.add("created_time");
    openapiFields.add("description");
    openapiFields.add("duration");
    openapiFields.add("embed");
    openapiFields.add("height");
    openapiFields.add("language");
    openapiFields.add("last_user_action_event_date");
    openapiFields.add("license");
    openapiFields.add("link");
    openapiFields.add("metadata");
    openapiFields.add("modified_time");
    openapiFields.add("name");
    openapiFields.add("parent_folder");
    openapiFields.add("password");
    openapiFields.add("pictures");
    openapiFields.add("privacy");
    openapiFields.add("release_time");
    openapiFields.add("resource_key");
    openapiFields.add("spatial");
    openapiFields.add("stats");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("transcode");
    openapiFields.add("upload");
    openapiFields.add("uri");
    openapiFields.add("user");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("content_rating");
    openapiRequiredFields.add("context");
    openapiRequiredFields.add("created_time");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("embed");
    openapiRequiredFields.add("height");
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("license");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("modified_time");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pictures");
    openapiRequiredFields.add("privacy");
    openapiRequiredFields.add("release_time");
    openapiRequiredFields.add("resource_key");
    openapiRequiredFields.add("spatial");
    openapiRequiredFields.add("stats");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("transcode");
    openapiRequiredFields.add("upload");
    openapiRequiredFields.add("uri");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("width");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Video
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Video.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Video is not found in the empty JSON string", Video.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Video.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Video` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Video.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }

      JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
      // validate the required field `categories` (array)
      for (int i = 0; i < jsonArraycategories.size(); i++) {
        Category.validateJsonElement(jsonArraycategories.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("content_rating") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("content_rating").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_rating` to be an array in the JSON string but got `%s`", jsonObj.get("content_rating").toString()));
      }
      // validate the required field `context`
      VideoContext.validateJsonElement(jsonObj.get("context"));
      if (!jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `embed`
      EmbedSettings.validateJsonElement(jsonObj.get("embed"));
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("last_user_action_event_date") != null && !jsonObj.get("last_user_action_event_date").isJsonNull()) && !jsonObj.get("last_user_action_event_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_user_action_event_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_user_action_event_date").toString()));
      }
      if (!jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      // validate the required field `license`
      LicenseEnum.validateJsonElement(jsonObj.get("license"));
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the required field `metadata`
      VideoMetadata.validateJsonElement(jsonObj.get("metadata"));
      if (!jsonObj.get("modified_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_time").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `parent_folder`
      if (jsonObj.get("parent_folder") != null && !jsonObj.get("parent_folder").isJsonNull()) {
        Project.validateJsonElement(jsonObj.get("parent_folder"));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // validate the required field `pictures`
      Picture.validateJsonElement(jsonObj.get("pictures"));
      // validate the required field `privacy`
      VideoPrivacy.validateJsonElement(jsonObj.get("privacy"));
      if (!jsonObj.get("release_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_time").toString()));
      }
      if (!jsonObj.get("resource_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_key").toString()));
      }
      // validate the required field `spatial`
      VideoSpatial.validateJsonElement(jsonObj.get("spatial"));
      // validate the required field `stats`
      VideoStats.validateJsonElement(jsonObj.get("stats"));
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      // ensure the json data is an array
      if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }

      JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
      // validate the required field `tags` (array)
      for (int i = 0; i < jsonArraytags.size(); i++) {
        Tag.validateJsonElement(jsonArraytags.get(i));
      };
      // validate the required field `transcode`
      VideoTranscode.validateJsonElement(jsonObj.get("transcode"));
      // validate the required field `upload`
      VideoUpload.validateJsonElement(jsonObj.get("upload"));
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // validate the required field `user`
      User.validateJsonElement(jsonObj.get("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Video.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Video' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Video> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Video.class));

       return (TypeAdapter<T>) new TypeAdapter<Video>() {
           @Override
           public void write(JsonWriter out, Video value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Video read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Video given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Video
   * @throws IOException if the JSON string is invalid with respect to Video
   */
  public static Video fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Video.class);
  }

  /**
   * Convert an instance of Video to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

