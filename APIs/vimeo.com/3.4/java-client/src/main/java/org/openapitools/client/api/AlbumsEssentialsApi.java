/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Album;
import java.math.BigDecimal;
import org.openapitools.client.model.CreateAlbumAlt1Request;
import org.openapitools.client.model.EditAlbumAlt1Request;
import org.openapitools.client.model.LegacyError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlbumsEssentialsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AlbumsEssentialsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlbumsEssentialsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAlbum
     * @param userId The ID of the user. (required)
     * @param createAlbumAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The album was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t create an album. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAlbumCall(BigDecimal userId, CreateAlbumAlt1Request createAlbumAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAlbumAlt1Request;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAlbumValidateBeforeCall(BigDecimal userId, CreateAlbumAlt1Request createAlbumAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createAlbum(Async)");
        }

        // verify the required parameter 'createAlbumAlt1Request' is set
        if (createAlbumAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'createAlbumAlt1Request' when calling createAlbum(Async)");
        }

        return createAlbumCall(userId, createAlbumAlt1Request, _callback);

    }

    /**
     * Create an album
     * 
     * @param userId The ID of the user. (required)
     * @param createAlbumAlt1Request  (required)
     * @return Album
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The album was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t create an album. </td><td>  -  </td></tr>
     </table>
     */
    public Album createAlbum(BigDecimal userId, CreateAlbumAlt1Request createAlbumAlt1Request) throws ApiException {
        ApiResponse<Album> localVarResp = createAlbumWithHttpInfo(userId, createAlbumAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Create an album
     * 
     * @param userId The ID of the user. (required)
     * @param createAlbumAlt1Request  (required)
     * @return ApiResponse&lt;Album&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The album was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t create an album. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Album> createAlbumWithHttpInfo(BigDecimal userId, CreateAlbumAlt1Request createAlbumAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = createAlbumValidateBeforeCall(userId, createAlbumAlt1Request, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an album (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param createAlbumAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The album was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t create an album. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAlbumAsync(BigDecimal userId, CreateAlbumAlt1Request createAlbumAlt1Request, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAlbumValidateBeforeCall(userId, createAlbumAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAlbumAlt1
     * @param createAlbumAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The album was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t create an album. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAlbumAlt1Call(CreateAlbumAlt1Request createAlbumAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAlbumAlt1Request;

        // create path and map variables
        String localVarPath = "/me/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAlbumAlt1ValidateBeforeCall(CreateAlbumAlt1Request createAlbumAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAlbumAlt1Request' is set
        if (createAlbumAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'createAlbumAlt1Request' when calling createAlbumAlt1(Async)");
        }

        return createAlbumAlt1Call(createAlbumAlt1Request, _callback);

    }

    /**
     * Create an album
     * 
     * @param createAlbumAlt1Request  (required)
     * @return Album
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The album was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t create an album. </td><td>  -  </td></tr>
     </table>
     */
    public Album createAlbumAlt1(CreateAlbumAlt1Request createAlbumAlt1Request) throws ApiException {
        ApiResponse<Album> localVarResp = createAlbumAlt1WithHttpInfo(createAlbumAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Create an album
     * 
     * @param createAlbumAlt1Request  (required)
     * @return ApiResponse&lt;Album&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The album was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t create an album. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Album> createAlbumAlt1WithHttpInfo(CreateAlbumAlt1Request createAlbumAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = createAlbumAlt1ValidateBeforeCall(createAlbumAlt1Request, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an album (asynchronously)
     * 
     * @param createAlbumAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The album was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t create an album. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAlbumAlt1Async(CreateAlbumAlt1Request createAlbumAlt1Request, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAlbumAlt1ValidateBeforeCall(createAlbumAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAlbum
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The album was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t delete the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAlbumCall(BigDecimal albumId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAlbumValidateBeforeCall(BigDecimal albumId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling deleteAlbum(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteAlbum(Async)");
        }

        return deleteAlbumCall(albumId, userId, _callback);

    }

    /**
     * Delete an album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The album was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t delete the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAlbum(BigDecimal albumId, BigDecimal userId) throws ApiException {
        deleteAlbumWithHttpInfo(albumId, userId);
    }

    /**
     * Delete an album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The album was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t delete the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAlbumWithHttpInfo(BigDecimal albumId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = deleteAlbumValidateBeforeCall(albumId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an album (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The album was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t delete the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAlbumAsync(BigDecimal albumId, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAlbumValidateBeforeCall(albumId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAlbumAlt1
     * @param albumId The ID of the album. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The album was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t delete the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAlbumAlt1Call(BigDecimal albumId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAlbumAlt1ValidateBeforeCall(BigDecimal albumId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling deleteAlbumAlt1(Async)");
        }

        return deleteAlbumAlt1Call(albumId, _callback);

    }

    /**
     * Delete an album
     * 
     * @param albumId The ID of the album. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The album was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t delete the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAlbumAlt1(BigDecimal albumId) throws ApiException {
        deleteAlbumAlt1WithHttpInfo(albumId);
    }

    /**
     * Delete an album
     * 
     * @param albumId The ID of the album. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The album was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t delete the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAlbumAlt1WithHttpInfo(BigDecimal albumId) throws ApiException {
        okhttp3.Call localVarCall = deleteAlbumAlt1ValidateBeforeCall(albumId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an album (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The album was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t delete the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAlbumAlt1Async(BigDecimal albumId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAlbumAlt1ValidateBeforeCall(albumId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editAlbum
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param editAlbumAlt1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the album, the supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editAlbumCall(BigDecimal albumId, BigDecimal userId, EditAlbumAlt1Request editAlbumAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editAlbumAlt1Request;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editAlbumValidateBeforeCall(BigDecimal albumId, BigDecimal userId, EditAlbumAlt1Request editAlbumAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling editAlbum(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling editAlbum(Async)");
        }

        return editAlbumCall(albumId, userId, editAlbumAlt1Request, _callback);

    }

    /**
     * Edit an album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param editAlbumAlt1Request  (optional)
     * @return Album
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the album, the supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public Album editAlbum(BigDecimal albumId, BigDecimal userId, EditAlbumAlt1Request editAlbumAlt1Request) throws ApiException {
        ApiResponse<Album> localVarResp = editAlbumWithHttpInfo(albumId, userId, editAlbumAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param editAlbumAlt1Request  (optional)
     * @return ApiResponse&lt;Album&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the album, the supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Album> editAlbumWithHttpInfo(BigDecimal albumId, BigDecimal userId, EditAlbumAlt1Request editAlbumAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = editAlbumValidateBeforeCall(albumId, userId, editAlbumAlt1Request, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an album (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param editAlbumAlt1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the album, the supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editAlbumAsync(BigDecimal albumId, BigDecimal userId, EditAlbumAlt1Request editAlbumAlt1Request, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = editAlbumValidateBeforeCall(albumId, userId, editAlbumAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editAlbumAlt1
     * @param albumId The ID of the album. (required)
     * @param editAlbumAlt1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the album, the supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editAlbumAlt1Call(BigDecimal albumId, EditAlbumAlt1Request editAlbumAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editAlbumAlt1Request;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editAlbumAlt1ValidateBeforeCall(BigDecimal albumId, EditAlbumAlt1Request editAlbumAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling editAlbumAlt1(Async)");
        }

        return editAlbumAlt1Call(albumId, editAlbumAlt1Request, _callback);

    }

    /**
     * Edit an album
     * 
     * @param albumId The ID of the album. (required)
     * @param editAlbumAlt1Request  (optional)
     * @return Album
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the album, the supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public Album editAlbumAlt1(BigDecimal albumId, EditAlbumAlt1Request editAlbumAlt1Request) throws ApiException {
        ApiResponse<Album> localVarResp = editAlbumAlt1WithHttpInfo(albumId, editAlbumAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an album
     * 
     * @param albumId The ID of the album. (required)
     * @param editAlbumAlt1Request  (optional)
     * @return ApiResponse&lt;Album&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the album, the supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Album> editAlbumAlt1WithHttpInfo(BigDecimal albumId, EditAlbumAlt1Request editAlbumAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = editAlbumAlt1ValidateBeforeCall(albumId, editAlbumAlt1Request, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an album (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param editAlbumAlt1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the album, the supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editAlbumAlt1Async(BigDecimal albumId, EditAlbumAlt1Request editAlbumAlt1Request, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = editAlbumAlt1ValidateBeforeCall(albumId, editAlbumAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlbum
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumCall(BigDecimal albumId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumValidateBeforeCall(BigDecimal albumId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getAlbum(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAlbum(Async)");
        }

        return getAlbumCall(albumId, userId, _callback);

    }

    /**
     * Get a specific album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @return Album
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public Album getAlbum(BigDecimal albumId, BigDecimal userId) throws ApiException {
        ApiResponse<Album> localVarResp = getAlbumWithHttpInfo(albumId, userId);
        return localVarResp.getData();
    }

    /**
     * Get a specific album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Album&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Album> getAlbumWithHttpInfo(BigDecimal albumId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = getAlbumValidateBeforeCall(albumId, userId, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific album (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumAsync(BigDecimal albumId, BigDecimal userId, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumValidateBeforeCall(albumId, userId, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlbumAlt1
     * @param albumId The ID of the album. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumAlt1Call(BigDecimal albumId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.album+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumAlt1ValidateBeforeCall(BigDecimal albumId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getAlbumAlt1(Async)");
        }

        return getAlbumAlt1Call(albumId, _callback);

    }

    /**
     * Get a specific album
     * 
     * @param albumId The ID of the album. (required)
     * @return Album
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public Album getAlbumAlt1(BigDecimal albumId) throws ApiException {
        ApiResponse<Album> localVarResp = getAlbumAlt1WithHttpInfo(albumId);
        return localVarResp.getData();
    }

    /**
     * Get a specific album
     * 
     * @param albumId The ID of the album. (required)
     * @return ApiResponse&lt;Album&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Album> getAlbumAlt1WithHttpInfo(BigDecimal albumId) throws ApiException {
        okhttp3.Call localVarCall = getAlbumAlt1ValidateBeforeCall(albumId, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific album (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumAlt1Async(BigDecimal albumId, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumAlt1ValidateBeforeCall(albumId, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlbums
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The albums were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumsCall(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumsValidateBeforeCall(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAlbums(Async)");
        }

        return getAlbumsCall(userId, direction, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the albums that belong to a user
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Album&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The albums were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Album> getAlbums(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<Album>> localVarResp = getAlbumsWithHttpInfo(userId, direction, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the albums that belong to a user
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Album&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The albums were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Album>> getAlbumsWithHttpInfo(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAlbumsValidateBeforeCall(userId, direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Album>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the albums that belong to a user (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The albums were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumsAsync(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<Album>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumsValidateBeforeCall(userId, direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Album>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlbumsAlt1
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The albums were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumsAlt1Call(String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumsAlt1ValidateBeforeCall(String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return getAlbumsAlt1Call(direction, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the albums that belong to a user
     * 
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Album&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The albums were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Album> getAlbumsAlt1(String direction, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<Album>> localVarResp = getAlbumsAlt1WithHttpInfo(direction, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the albums that belong to a user
     * 
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Album&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The albums were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Album>> getAlbumsAlt1WithHttpInfo(String direction, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAlbumsAlt1ValidateBeforeCall(direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Album>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the albums that belong to a user (asynchronously)
     * 
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The albums were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumsAlt1Async(String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<Album>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumsAlt1ValidateBeforeCall(direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Album>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
