/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddVideoCreditAlt1Request;
import java.math.BigDecimal;
import org.openapitools.client.model.Credit;
import org.openapitools.client.model.EditVideoCreditRequest;
import org.openapitools.client.model.LegacyError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideosCreditsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosCreditsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideosCreditsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVideoCredit
     * @param videoId The ID of the video. (required)
     * @param addVideoCreditAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The credit was added. * A parameter is invalid. * The authenticated user has an unverified email address. * There is a user block between the video owner and the person receiving credit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoCreditCall(BigDecimal videoId, AddVideoCreditAlt1Request addVideoCreditAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addVideoCreditAlt1Request;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/credits"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoCreditValidateBeforeCall(BigDecimal videoId, AddVideoCreditAlt1Request addVideoCreditAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoCredit(Async)");
        }

        // verify the required parameter 'addVideoCreditAlt1Request' is set
        if (addVideoCreditAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'addVideoCreditAlt1Request' when calling addVideoCredit(Async)");
        }

        return addVideoCreditCall(videoId, addVideoCreditAlt1Request, _callback);

    }

    /**
     * Credit a user in a video
     * 
     * @param videoId The ID of the video. (required)
     * @param addVideoCreditAlt1Request  (required)
     * @return Credit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The credit was added. * A parameter is invalid. * The authenticated user has an unverified email address. * There is a user block between the video owner and the person receiving credit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public Credit addVideoCredit(BigDecimal videoId, AddVideoCreditAlt1Request addVideoCreditAlt1Request) throws ApiException {
        ApiResponse<Credit> localVarResp = addVideoCreditWithHttpInfo(videoId, addVideoCreditAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Credit a user in a video
     * 
     * @param videoId The ID of the video. (required)
     * @param addVideoCreditAlt1Request  (required)
     * @return ApiResponse&lt;Credit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The credit was added. * A parameter is invalid. * The authenticated user has an unverified email address. * There is a user block between the video owner and the person receiving credit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Credit> addVideoCreditWithHttpInfo(BigDecimal videoId, AddVideoCreditAlt1Request addVideoCreditAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = addVideoCreditValidateBeforeCall(videoId, addVideoCreditAlt1Request, null);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Credit a user in a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param addVideoCreditAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The credit was added. * A parameter is invalid. * The authenticated user has an unverified email address. * There is a user block between the video owner and the person receiving credit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoCreditAsync(BigDecimal videoId, AddVideoCreditAlt1Request addVideoCreditAlt1Request, final ApiCallback<Credit> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoCreditValidateBeforeCall(videoId, addVideoCreditAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVideoCreditAlt1
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param addVideoCreditAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The credit was added. * A parameter is invalid. * The authenticated user has an unverified email address. * There is a user block between the video owner and the person receiving credit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoCreditAlt1Call(BigDecimal channelId, BigDecimal videoId, AddVideoCreditAlt1Request addVideoCreditAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addVideoCreditAlt1Request;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/credits"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoCreditAlt1ValidateBeforeCall(BigDecimal channelId, BigDecimal videoId, AddVideoCreditAlt1Request addVideoCreditAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addVideoCreditAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoCreditAlt1(Async)");
        }

        // verify the required parameter 'addVideoCreditAlt1Request' is set
        if (addVideoCreditAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'addVideoCreditAlt1Request' when calling addVideoCreditAlt1(Async)");
        }

        return addVideoCreditAlt1Call(channelId, videoId, addVideoCreditAlt1Request, _callback);

    }

    /**
     * Credit a user in a video
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param addVideoCreditAlt1Request  (required)
     * @return Credit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The credit was added. * A parameter is invalid. * The authenticated user has an unverified email address. * There is a user block between the video owner and the person receiving credit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public Credit addVideoCreditAlt1(BigDecimal channelId, BigDecimal videoId, AddVideoCreditAlt1Request addVideoCreditAlt1Request) throws ApiException {
        ApiResponse<Credit> localVarResp = addVideoCreditAlt1WithHttpInfo(channelId, videoId, addVideoCreditAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Credit a user in a video
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param addVideoCreditAlt1Request  (required)
     * @return ApiResponse&lt;Credit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The credit was added. * A parameter is invalid. * The authenticated user has an unverified email address. * There is a user block between the video owner and the person receiving credit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Credit> addVideoCreditAlt1WithHttpInfo(BigDecimal channelId, BigDecimal videoId, AddVideoCreditAlt1Request addVideoCreditAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = addVideoCreditAlt1ValidateBeforeCall(channelId, videoId, addVideoCreditAlt1Request, null);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Credit a user in a video (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param addVideoCreditAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The credit was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The credit was added. * A parameter is invalid. * The authenticated user has an unverified email address. * There is a user block between the video owner and the person receiving credit. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user doesn&#39;t own the video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoCreditAlt1Async(BigDecimal channelId, BigDecimal videoId, AddVideoCreditAlt1Request addVideoCreditAlt1Request, final ApiCallback<Credit> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoCreditAlt1ValidateBeforeCall(channelId, videoId, addVideoCreditAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVideoCredit
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The credit was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The authenticated user is neither the creator of the credit nor the credited user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoCreditCall(BigDecimal creditId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/credits/{credit_id}"
            .replace("{" + "credit_id" + "}", localVarApiClient.escapeString(creditId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoCreditValidateBeforeCall(BigDecimal creditId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditId' is set
        if (creditId == null) {
            throw new ApiException("Missing the required parameter 'creditId' when calling deleteVideoCredit(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteVideoCredit(Async)");
        }

        return deleteVideoCreditCall(creditId, videoId, _callback);

    }

    /**
     * Delete a credit for a user in a video
     * 
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The credit was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The authenticated user is neither the creator of the credit nor the credited user. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVideoCredit(BigDecimal creditId, BigDecimal videoId) throws ApiException {
        deleteVideoCreditWithHttpInfo(creditId, videoId);
    }

    /**
     * Delete a credit for a user in a video
     * 
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The credit was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The authenticated user is neither the creator of the credit nor the credited user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVideoCreditWithHttpInfo(BigDecimal creditId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoCreditValidateBeforeCall(creditId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a credit for a user in a video (asynchronously)
     * 
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The credit was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The authenticated user is neither the creator of the credit nor the credited user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoCreditAsync(BigDecimal creditId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoCreditValidateBeforeCall(creditId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editVideoCredit
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @param editVideoCreditRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The credit was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or credit exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editVideoCreditCall(BigDecimal creditId, BigDecimal videoId, EditVideoCreditRequest editVideoCreditRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editVideoCreditRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/credits/{credit_id}"
            .replace("{" + "credit_id" + "}", localVarApiClient.escapeString(creditId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editVideoCreditValidateBeforeCall(BigDecimal creditId, BigDecimal videoId, EditVideoCreditRequest editVideoCreditRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditId' is set
        if (creditId == null) {
            throw new ApiException("Missing the required parameter 'creditId' when calling editVideoCredit(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling editVideoCredit(Async)");
        }

        return editVideoCreditCall(creditId, videoId, editVideoCreditRequest, _callback);

    }

    /**
     * Edit a credit for a user in a video
     * 
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @param editVideoCreditRequest  (optional)
     * @return Credit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The credit was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or credit exists. </td><td>  -  </td></tr>
     </table>
     */
    public Credit editVideoCredit(BigDecimal creditId, BigDecimal videoId, EditVideoCreditRequest editVideoCreditRequest) throws ApiException {
        ApiResponse<Credit> localVarResp = editVideoCreditWithHttpInfo(creditId, videoId, editVideoCreditRequest);
        return localVarResp.getData();
    }

    /**
     * Edit a credit for a user in a video
     * 
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @param editVideoCreditRequest  (optional)
     * @return ApiResponse&lt;Credit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The credit was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or credit exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Credit> editVideoCreditWithHttpInfo(BigDecimal creditId, BigDecimal videoId, EditVideoCreditRequest editVideoCreditRequest) throws ApiException {
        okhttp3.Call localVarCall = editVideoCreditValidateBeforeCall(creditId, videoId, editVideoCreditRequest, null);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a credit for a user in a video (asynchronously)
     * 
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @param editVideoCreditRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The credit was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A parameter is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or credit exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editVideoCreditAsync(BigDecimal creditId, BigDecimal videoId, EditVideoCreditRequest editVideoCreditRequest, final ApiCallback<Credit> _callback) throws ApiException {

        okhttp3.Call localVarCall = editVideoCreditValidateBeforeCall(creditId, videoId, editVideoCreditRequest, _callback);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoCredit
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The credit was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or credit exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCreditCall(BigDecimal creditId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/credits/{credit_id}"
            .replace("{" + "credit_id" + "}", localVarApiClient.escapeString(creditId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoCreditValidateBeforeCall(BigDecimal creditId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditId' is set
        if (creditId == null) {
            throw new ApiException("Missing the required parameter 'creditId' when calling getVideoCredit(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoCredit(Async)");
        }

        return getVideoCreditCall(creditId, videoId, _callback);

    }

    /**
     * Get a specific credited user in a video
     * 
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @return Credit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The credit was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or credit exists. </td><td>  -  </td></tr>
     </table>
     */
    public Credit getVideoCredit(BigDecimal creditId, BigDecimal videoId) throws ApiException {
        ApiResponse<Credit> localVarResp = getVideoCreditWithHttpInfo(creditId, videoId);
        return localVarResp.getData();
    }

    /**
     * Get a specific credited user in a video
     * 
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Credit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The credit was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or credit exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Credit> getVideoCreditWithHttpInfo(BigDecimal creditId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = getVideoCreditValidateBeforeCall(creditId, videoId, null);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific credited user in a video (asynchronously)
     * 
     * @param creditId The ID of the credit. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The credit was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or credit exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCreditAsync(BigDecimal creditId, BigDecimal videoId, final ApiCallback<Credit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoCreditValidateBeforeCall(creditId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Credit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoCredits
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCreditsCall(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/credits"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoCreditsValidateBeforeCall(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoCredits(Async)");
        }

        return getVideoCreditsCall(videoId, direction, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the credited users in a video
     * 
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Credit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Credit> getVideoCredits(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<Credit>> localVarResp = getVideoCreditsWithHttpInfo(videoId, direction, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the credited users in a video
     * 
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Credit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Credit>> getVideoCreditsWithHttpInfo(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getVideoCreditsValidateBeforeCall(videoId, direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Credit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the credited users in a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCreditsAsync(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<Credit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoCreditsValidateBeforeCall(videoId, direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Credit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoCreditsAlt1
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCreditsAlt1Call(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/credits"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.credit+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoCreditsAlt1ValidateBeforeCall(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getVideoCreditsAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoCreditsAlt1(Async)");
        }

        return getVideoCreditsAlt1Call(channelId, videoId, direction, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the credited users in a video
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Credit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Credit> getVideoCreditsAlt1(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<Credit>> localVarResp = getVideoCreditsAlt1WithHttpInfo(channelId, videoId, direction, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the credited users in a video
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Credit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Credit>> getVideoCreditsAlt1WithHttpInfo(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getVideoCreditsAlt1ValidateBeforeCall(channelId, videoId, direction, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Credit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the credited users in a video (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCreditsAlt1Async(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<Credit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoCreditsAlt1ValidateBeforeCall(channelId, videoId, direction, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Credit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
