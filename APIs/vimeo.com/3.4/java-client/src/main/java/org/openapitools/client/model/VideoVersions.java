/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ApiApp;
import org.openapitools.client.model.Play;
import org.openapitools.client.model.User;
import org.openapitools.client.model.VideoVersionsMetadata;
import org.openapitools.client.model.VideoVersionsUpload;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VideoVersions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoVersions {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_APP = "app";
  @SerializedName(SERIALIZED_NAME_APP)
  private ApiApp app;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BigDecimal duration;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_FILESIZE = "filesize";
  @SerializedName(SERIALIZED_NAME_FILESIZE)
  private BigDecimal filesize;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private VideoVersionsMetadata metadata;

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modified_time";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private String modifiedTime;

  public static final String SERIALIZED_NAME_PLAY = "play";
  @SerializedName(SERIALIZED_NAME_PLAY)
  private Play play;

  public static final String SERIALIZED_NAME_UPLOAD = "upload";
  @SerializedName(SERIALIZED_NAME_UPLOAD)
  private VideoVersionsUpload upload;

  public static final String SERIALIZED_NAME_UPLOAD_DATE = "upload_date";
  @SerializedName(SERIALIZED_NAME_UPLOAD_DATE)
  private String uploadDate;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public VideoVersions() {
  }

  public VideoVersions active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Whether this video version is the currently active one.
   * @return active
   */
  @javax.annotation.Nonnull
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public VideoVersions app(ApiApp app) {
    this.app = app;
    return this;
  }

  /**
   * The API app associated with the video version.
   * @return app
   */
  @javax.annotation.Nonnull
  public ApiApp getApp() {
    return app;
  }

  public void setApp(ApiApp app) {
    this.app = app;
  }


  public VideoVersions createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * The time in ISO 8601 for when the video version was created.
   * @return createdTime
   */
  @javax.annotation.Nonnull
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }


  public VideoVersions duration(BigDecimal duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration of the video version in seconds.
   * @return duration
   */
  @javax.annotation.Nullable
  public BigDecimal getDuration() {
    return duration;
  }

  public void setDuration(BigDecimal duration) {
    this.duration = duration;
  }


  public VideoVersions filename(String filename) {
    this.filename = filename;
    return this;
  }

  /**
   * The file name of the video version.
   * @return filename
   */
  @javax.annotation.Nonnull
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  public VideoVersions filesize(BigDecimal filesize) {
    this.filesize = filesize;
    return this;
  }

  /**
   * The size in byes of the video version file.
   * @return filesize
   */
  @javax.annotation.Nullable
  public BigDecimal getFilesize() {
    return filesize;
  }

  public void setFilesize(BigDecimal filesize) {
    this.filesize = filesize;
  }


  public VideoVersions metadata(VideoVersionsMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public VideoVersionsMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(VideoVersionsMetadata metadata) {
    this.metadata = metadata;
  }


  public VideoVersions modifiedTime(String modifiedTime) {
    this.modifiedTime = modifiedTime;
    return this;
  }

  /**
   * The time in ISO 8601 format when the video version was last modified.
   * @return modifiedTime
   */
  @javax.annotation.Nonnull
  public String getModifiedTime() {
    return modifiedTime;
  }

  public void setModifiedTime(String modifiedTime) {
    this.modifiedTime = modifiedTime;
  }


  public VideoVersions play(Play play) {
    this.play = play;
    return this;
  }

  /**
   * The Play representation.
   * @return play
   */
  @javax.annotation.Nonnull
  public Play getPlay() {
    return play;
  }

  public void setPlay(Play play) {
    this.play = play;
  }


  public VideoVersions upload(VideoVersionsUpload upload) {
    this.upload = upload;
    return this;
  }

  /**
   * Get upload
   * @return upload
   */
  @javax.annotation.Nullable
  public VideoVersionsUpload getUpload() {
    return upload;
  }

  public void setUpload(VideoVersionsUpload upload) {
    this.upload = upload;
  }


  public VideoVersions uploadDate(String uploadDate) {
    this.uploadDate = uploadDate;
    return this;
  }

  /**
   * The time in ISO 8601 format when the video version was uploaded.
   * @return uploadDate
   */
  @javax.annotation.Nullable
  public String getUploadDate() {
    return uploadDate;
  }

  public void setUploadDate(String uploadDate) {
    this.uploadDate = uploadDate;
  }


  public VideoVersions uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The version&#39;s canonical relative URI.
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public VideoVersions user(User user) {
    this.user = user;
    return this;
  }

  /**
   * The owner of the video version.
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoVersions videoVersions = (VideoVersions) o;
    return Objects.equals(this.active, videoVersions.active) &&
        Objects.equals(this.app, videoVersions.app) &&
        Objects.equals(this.createdTime, videoVersions.createdTime) &&
        Objects.equals(this.duration, videoVersions.duration) &&
        Objects.equals(this.filename, videoVersions.filename) &&
        Objects.equals(this.filesize, videoVersions.filesize) &&
        Objects.equals(this.metadata, videoVersions.metadata) &&
        Objects.equals(this.modifiedTime, videoVersions.modifiedTime) &&
        Objects.equals(this.play, videoVersions.play) &&
        Objects.equals(this.upload, videoVersions.upload) &&
        Objects.equals(this.uploadDate, videoVersions.uploadDate) &&
        Objects.equals(this.uri, videoVersions.uri) &&
        Objects.equals(this.user, videoVersions.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, app, createdTime, duration, filename, filesize, metadata, modifiedTime, play, upload, uploadDate, uri, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoVersions {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    filesize: ").append(toIndentedString(filesize)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    play: ").append(toIndentedString(play)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("    uploadDate: ").append(toIndentedString(uploadDate)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("app");
    openapiFields.add("created_time");
    openapiFields.add("duration");
    openapiFields.add("filename");
    openapiFields.add("filesize");
    openapiFields.add("metadata");
    openapiFields.add("modified_time");
    openapiFields.add("play");
    openapiFields.add("upload");
    openapiFields.add("upload_date");
    openapiFields.add("uri");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("active");
    openapiRequiredFields.add("app");
    openapiRequiredFields.add("created_time");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("filename");
    openapiRequiredFields.add("filesize");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("modified_time");
    openapiRequiredFields.add("play");
    openapiRequiredFields.add("upload");
    openapiRequiredFields.add("upload_date");
    openapiRequiredFields.add("uri");
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoVersions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoVersions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoVersions is not found in the empty JSON string", VideoVersions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoVersions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoVersions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoVersions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `app`
      ApiApp.validateJsonElement(jsonObj.get("app"));
      if (!jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if (!jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      // validate the required field `metadata`
      VideoVersionsMetadata.validateJsonElement(jsonObj.get("metadata"));
      if (!jsonObj.get("modified_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_time").toString()));
      }
      // validate the required field `play`
      Play.validateJsonElement(jsonObj.get("play"));
      // validate the required field `upload`
      VideoVersionsUpload.validateJsonElement(jsonObj.get("upload"));
      if ((jsonObj.get("upload_date") != null && !jsonObj.get("upload_date").isJsonNull()) && !jsonObj.get("upload_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upload_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upload_date").toString()));
      }
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // validate the required field `user`
      User.validateJsonElement(jsonObj.get("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoVersions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoVersions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoVersions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoVersions.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoVersions>() {
           @Override
           public void write(JsonWriter out, VideoVersions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoVersions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoVersions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoVersions
   * @throws IOException if the JSON string is invalid with respect to VideoVersions
   */
  public static VideoVersions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoVersions.class);
  }

  /**
   * Convert an instance of VideoVersions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

