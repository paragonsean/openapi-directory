/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Auth;
import org.openapitools.client.model.AuthError;
import org.openapitools.client.model.ClientAuthRequest;
import org.openapitools.client.model.ConvertAccessTokenRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ExchangeAuthCodeRequest;
import org.openapitools.client.model.LegacyError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationExtrasEssentialsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationExtrasEssentialsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationExtrasEssentialsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clientAuth
     * @param clientAuthRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authorization was successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8001: No such client secret exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAuthCall(ClientAuthRequest clientAuthRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clientAuthRequest;

        // create path and map variables
        String localVarPath = "/oauth/authorize/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.auth+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.auth+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientAuthValidateBeforeCall(ClientAuthRequest clientAuthRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clientAuthRequest' is set
        if (clientAuthRequest == null) {
            throw new ApiException("Missing the required parameter 'clientAuthRequest' when calling clientAuth(Async)");
        }

        return clientAuthCall(clientAuthRequest, _callback);

    }

    /**
     * Authorize a client with OAuth
     * For information on utilizing OAuth client authorization, see our [authentication](/api/authentication#generate-unauthenticated-tokens) documentation or the [Client Credentials Grant](https://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.4) section of the [OAuth spec](https://tools.ietf.org/html/draft-ietf-oauth-v2-31.
     * @param clientAuthRequest  (required)
     * @return Auth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authorization was successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8001: No such client secret exists. </td><td>  -  </td></tr>
     </table>
     */
    public Auth clientAuth(ClientAuthRequest clientAuthRequest) throws ApiException {
        ApiResponse<Auth> localVarResp = clientAuthWithHttpInfo(clientAuthRequest);
        return localVarResp.getData();
    }

    /**
     * Authorize a client with OAuth
     * For information on utilizing OAuth client authorization, see our [authentication](/api/authentication#generate-unauthenticated-tokens) documentation or the [Client Credentials Grant](https://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.4) section of the [OAuth spec](https://tools.ietf.org/html/draft-ietf-oauth-v2-31.
     * @param clientAuthRequest  (required)
     * @return ApiResponse&lt;Auth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authorization was successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8001: No such client secret exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Auth> clientAuthWithHttpInfo(ClientAuthRequest clientAuthRequest) throws ApiException {
        okhttp3.Call localVarCall = clientAuthValidateBeforeCall(clientAuthRequest, null);
        Type localVarReturnType = new TypeToken<Auth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Authorize a client with OAuth (asynchronously)
     * For information on utilizing OAuth client authorization, see our [authentication](/api/authentication#generate-unauthenticated-tokens) documentation or the [Client Credentials Grant](https://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.4) section of the [OAuth spec](https://tools.ietf.org/html/draft-ietf-oauth-v2-31.
     * @param clientAuthRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authorization was successful. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8001: No such client secret exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAuthAsync(ClientAuthRequest clientAuthRequest, final ApiCallback<Auth> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientAuthValidateBeforeCall(clientAuthRequest, _callback);
        Type localVarReturnType = new TypeToken<Auth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertAccessToken
     * @param convertAccessTokenRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tokens were converted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The token is invalid. * The token has unauthorized scopes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertAccessTokenCall(ConvertAccessTokenRequest convertAccessTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = convertAccessTokenRequest;

        // create path and map variables
        String localVarPath = "/oauth/authorize/vimeo_oauth1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.auth+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.auth+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertAccessTokenValidateBeforeCall(ConvertAccessTokenRequest convertAccessTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convertAccessTokenRequest' is set
        if (convertAccessTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'convertAccessTokenRequest' when calling convertAccessToken(Async)");
        }

        return convertAccessTokenCall(convertAccessTokenRequest, _callback);

    }

    /**
     * Convert OAuth 1 access tokens to OAuth 2 access tokens
     * 
     * @param convertAccessTokenRequest  (required)
     * @return Auth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tokens were converted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The token is invalid. * The token has unauthorized scopes. </td><td>  -  </td></tr>
     </table>
     */
    public Auth convertAccessToken(ConvertAccessTokenRequest convertAccessTokenRequest) throws ApiException {
        ApiResponse<Auth> localVarResp = convertAccessTokenWithHttpInfo(convertAccessTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Convert OAuth 1 access tokens to OAuth 2 access tokens
     * 
     * @param convertAccessTokenRequest  (required)
     * @return ApiResponse&lt;Auth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tokens were converted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The token is invalid. * The token has unauthorized scopes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Auth> convertAccessTokenWithHttpInfo(ConvertAccessTokenRequest convertAccessTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = convertAccessTokenValidateBeforeCall(convertAccessTokenRequest, null);
        Type localVarReturnType = new TypeToken<Auth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Convert OAuth 1 access tokens to OAuth 2 access tokens (asynchronously)
     * 
     * @param convertAccessTokenRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tokens were converted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The token is invalid. * The token has unauthorized scopes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertAccessTokenAsync(ConvertAccessTokenRequest convertAccessTokenRequest, final ApiCallback<Auth> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertAccessTokenValidateBeforeCall(convertAccessTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<Auth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteToken
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The token was revoked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t revoke access for an OAuth 1 token. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTokenCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.auth+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTokenValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteTokenCall(_callback);

    }

    /**
     * Revoke the current access token
     * This method enables an app to notify the API that it is done with a token and that the token can be discarded.
     * @return Auth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The token was revoked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t revoke access for an OAuth 1 token. </td><td>  -  </td></tr>
     </table>
     */
    public Auth deleteToken() throws ApiException {
        ApiResponse<Auth> localVarResp = deleteTokenWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Revoke the current access token
     * This method enables an app to notify the API that it is done with a token and that the token can be discarded.
     * @return ApiResponse&lt;Auth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The token was revoked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t revoke access for an OAuth 1 token. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Auth> deleteTokenWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteTokenValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Auth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revoke the current access token (asynchronously)
     * This method enables an app to notify the API that it is done with a token and that the token can be discarded.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The token was revoked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t revoke access for an OAuth 1 token. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTokenAsync(final ApiCallback<Auth> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTokenValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Auth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exchangeAuthCode
     * @param exchangeAuthCodeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authorization code was exchanged. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The grant type is invalid. * The authorization code is invalid. * The redirect URI doesn&#39;t match the URI to create the authorization code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exchangeAuthCodeCall(ExchangeAuthCodeRequest exchangeAuthCodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exchangeAuthCodeRequest;

        // create path and map variables
        String localVarPath = "/oauth/access_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.auth+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.auth+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exchangeAuthCodeValidateBeforeCall(ExchangeAuthCodeRequest exchangeAuthCodeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exchangeAuthCodeRequest' is set
        if (exchangeAuthCodeRequest == null) {
            throw new ApiException("Missing the required parameter 'exchangeAuthCodeRequest' when calling exchangeAuthCode(Async)");
        }

        return exchangeAuthCodeCall(exchangeAuthCodeRequest, _callback);

    }

    /**
     * Exchange an authorization code for an access token
     * 
     * @param exchangeAuthCodeRequest  (required)
     * @return Auth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authorization code was exchanged. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The grant type is invalid. * The authorization code is invalid. * The redirect URI doesn&#39;t match the URI to create the authorization code. </td><td>  -  </td></tr>
     </table>
     */
    public Auth exchangeAuthCode(ExchangeAuthCodeRequest exchangeAuthCodeRequest) throws ApiException {
        ApiResponse<Auth> localVarResp = exchangeAuthCodeWithHttpInfo(exchangeAuthCodeRequest);
        return localVarResp.getData();
    }

    /**
     * Exchange an authorization code for an access token
     * 
     * @param exchangeAuthCodeRequest  (required)
     * @return ApiResponse&lt;Auth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authorization code was exchanged. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The grant type is invalid. * The authorization code is invalid. * The redirect URI doesn&#39;t match the URI to create the authorization code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Auth> exchangeAuthCodeWithHttpInfo(ExchangeAuthCodeRequest exchangeAuthCodeRequest) throws ApiException {
        okhttp3.Call localVarCall = exchangeAuthCodeValidateBeforeCall(exchangeAuthCodeRequest, null);
        Type localVarReturnType = new TypeToken<Auth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Exchange an authorization code for an access token (asynchronously)
     * 
     * @param exchangeAuthCodeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The authorization code was exchanged. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The grant type is invalid. * The authorization code is invalid. * The redirect URI doesn&#39;t match the URI to create the authorization code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exchangeAuthCodeAsync(ExchangeAuthCodeRequest exchangeAuthCodeRequest, final ApiCallback<Auth> _callback) throws ApiException {

        okhttp3.Call localVarCall = exchangeAuthCodeValidateBeforeCall(exchangeAuthCodeRequest, _callback);
        Type localVarReturnType = new TypeToken<Auth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyToken
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The token was verified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The token isn&#39;t a valid OAuth 2 token. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyTokenCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.auth+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyTokenValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return verifyTokenCall(_callback);

    }

    /**
     * Verify an OAuth 2 token
     * 
     * @return Auth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The token was verified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The token isn&#39;t a valid OAuth 2 token. </td><td>  -  </td></tr>
     </table>
     */
    public Auth verifyToken() throws ApiException {
        ApiResponse<Auth> localVarResp = verifyTokenWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Verify an OAuth 2 token
     * 
     * @return ApiResponse&lt;Auth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The token was verified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The token isn&#39;t a valid OAuth 2 token. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Auth> verifyTokenWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = verifyTokenValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Auth>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify an OAuth 2 token (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The token was verified. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The token isn&#39;t a valid OAuth 2 token. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyTokenAsync(final ApiCallback<Auth> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyTokenValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Auth>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
