/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.Picture;
import org.openapitools.client.model.ReplaceAlbumLogoRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlbumsCustomAlbumLogosApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AlbumsCustomAlbumLogosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlbumsCustomAlbumLogosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAlbumLogo
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The logo was added to the album. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAlbumLogoCall(BigDecimal albumId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/logos"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAlbumLogoValidateBeforeCall(BigDecimal albumId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling createAlbumLogo(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createAlbumLogo(Async)");
        }

        return createAlbumLogoCall(albumId, userId, _callback);

    }

    /**
     * Add a custom album logo
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The logo was added to the album. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public Picture createAlbumLogo(BigDecimal albumId, BigDecimal userId) throws ApiException {
        ApiResponse<Picture> localVarResp = createAlbumLogoWithHttpInfo(albumId, userId);
        return localVarResp.getData();
    }

    /**
     * Add a custom album logo
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The logo was added to the album. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> createAlbumLogoWithHttpInfo(BigDecimal albumId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = createAlbumLogoValidateBeforeCall(albumId, userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a custom album logo (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The logo was added to the album. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAlbumLogoAsync(BigDecimal albumId, BigDecimal userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAlbumLogoValidateBeforeCall(albumId, userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAlbumLogo
     * @param albumId The ID of the album. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom logo was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAlbumLogoCall(BigDecimal albumId, BigDecimal logoId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/logos/{logo_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "logo_id" + "}", localVarApiClient.escapeString(logoId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAlbumLogoValidateBeforeCall(BigDecimal albumId, BigDecimal logoId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling deleteAlbumLogo(Async)");
        }

        // verify the required parameter 'logoId' is set
        if (logoId == null) {
            throw new ApiException("Missing the required parameter 'logoId' when calling deleteAlbumLogo(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteAlbumLogo(Async)");
        }

        return deleteAlbumLogoCall(albumId, logoId, userId, _callback);

    }

    /**
     * Remove a custom album logo
     * This method removes a custom logo from the specified album.
     * @param albumId The ID of the album. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom logo was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAlbumLogo(BigDecimal albumId, BigDecimal logoId, BigDecimal userId) throws ApiException {
        deleteAlbumLogoWithHttpInfo(albumId, logoId, userId);
    }

    /**
     * Remove a custom album logo
     * This method removes a custom logo from the specified album.
     * @param albumId The ID of the album. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom logo was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAlbumLogoWithHttpInfo(BigDecimal albumId, BigDecimal logoId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = deleteAlbumLogoValidateBeforeCall(albumId, logoId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a custom album logo (asynchronously)
     * This method removes a custom logo from the specified album.
     * @param albumId The ID of the album. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom logo was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAlbumLogoAsync(BigDecimal albumId, BigDecimal logoId, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAlbumLogoValidateBeforeCall(albumId, logoId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlbumLogo
     * @param albumId The ID of the album. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t view this custom logo. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumLogoCall(BigDecimal albumId, BigDecimal logoId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/logos/{logo_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "logo_id" + "}", localVarApiClient.escapeString(logoId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumLogoValidateBeforeCall(BigDecimal albumId, BigDecimal logoId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getAlbumLogo(Async)");
        }

        // verify the required parameter 'logoId' is set
        if (logoId == null) {
            throw new ApiException("Missing the required parameter 'logoId' when calling getAlbumLogo(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAlbumLogo(Async)");
        }

        return getAlbumLogoCall(albumId, logoId, userId, _callback);

    }

    /**
     * Get a specific custom album logo
     * 
     * @param albumId The ID of the album. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t view this custom logo. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public Picture getAlbumLogo(BigDecimal albumId, BigDecimal logoId, BigDecimal userId) throws ApiException {
        ApiResponse<Picture> localVarResp = getAlbumLogoWithHttpInfo(albumId, logoId, userId);
        return localVarResp.getData();
    }

    /**
     * Get a specific custom album logo
     * 
     * @param albumId The ID of the album. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t view this custom logo. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> getAlbumLogoWithHttpInfo(BigDecimal albumId, BigDecimal logoId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = getAlbumLogoValidateBeforeCall(albumId, logoId, userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific custom album logo (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t view this custom logo. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumLogoAsync(BigDecimal albumId, BigDecimal logoId, BigDecimal userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumLogoValidateBeforeCall(albumId, logoId, userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlbumLogos
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumLogosCall(BigDecimal albumId, BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/logos"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumLogosValidateBeforeCall(BigDecimal albumId, BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getAlbumLogos(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAlbumLogos(Async)");
        }

        return getAlbumLogosCall(albumId, userId, page, perPage, _callback);

    }

    /**
     * Get all the custom logos of an album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Picture> getAlbumLogos(BigDecimal albumId, BigDecimal userId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Picture>> localVarResp = getAlbumLogosWithHttpInfo(albumId, userId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the custom logos of an album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Picture>> getAlbumLogosWithHttpInfo(BigDecimal albumId, BigDecimal userId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getAlbumLogosValidateBeforeCall(albumId, userId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the custom logos of an album (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumLogosAsync(BigDecimal albumId, BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumLogosValidateBeforeCall(albumId, userId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceAlbumLogo
     * @param albumId The ID of the album. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @param replaceAlbumLogoRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was replaced. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceAlbumLogoCall(BigDecimal albumId, BigDecimal logoId, BigDecimal userId, ReplaceAlbumLogoRequest replaceAlbumLogoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replaceAlbumLogoRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/logos/{logo_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "logo_id" + "}", localVarApiClient.escapeString(logoId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceAlbumLogoValidateBeforeCall(BigDecimal albumId, BigDecimal logoId, BigDecimal userId, ReplaceAlbumLogoRequest replaceAlbumLogoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling replaceAlbumLogo(Async)");
        }

        // verify the required parameter 'logoId' is set
        if (logoId == null) {
            throw new ApiException("Missing the required parameter 'logoId' when calling replaceAlbumLogo(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling replaceAlbumLogo(Async)");
        }

        return replaceAlbumLogoCall(albumId, logoId, userId, replaceAlbumLogoRequest, _callback);

    }

    /**
     * Replace a custom album logo
     * 
     * @param albumId The ID of the album. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @param replaceAlbumLogoRequest  (optional)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was replaced. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public Picture replaceAlbumLogo(BigDecimal albumId, BigDecimal logoId, BigDecimal userId, ReplaceAlbumLogoRequest replaceAlbumLogoRequest) throws ApiException {
        ApiResponse<Picture> localVarResp = replaceAlbumLogoWithHttpInfo(albumId, logoId, userId, replaceAlbumLogoRequest);
        return localVarResp.getData();
    }

    /**
     * Replace a custom album logo
     * 
     * @param albumId The ID of the album. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @param replaceAlbumLogoRequest  (optional)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was replaced. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> replaceAlbumLogoWithHttpInfo(BigDecimal albumId, BigDecimal logoId, BigDecimal userId, ReplaceAlbumLogoRequest replaceAlbumLogoRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceAlbumLogoValidateBeforeCall(albumId, logoId, userId, replaceAlbumLogoRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a custom album logo (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @param replaceAlbumLogoRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was replaced. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceAlbumLogoAsync(BigDecimal albumId, BigDecimal logoId, BigDecimal userId, ReplaceAlbumLogoRequest replaceAlbumLogoRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceAlbumLogoValidateBeforeCall(albumId, logoId, userId, replaceAlbumLogoRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
