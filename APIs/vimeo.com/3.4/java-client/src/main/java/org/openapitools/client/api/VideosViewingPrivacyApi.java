/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideosViewingPrivacyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosViewingPrivacyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideosViewingPrivacyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVideoPrivacyUser
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user can now view the private video. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The user can already view this private video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video doesn&#39;t have a user-defined access list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoPrivacyUserCall(BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/privacy/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoPrivacyUserValidateBeforeCall(BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addVideoPrivacyUser(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoPrivacyUser(Async)");
        }

        return addVideoPrivacyUserCall(userId, videoId, _callback);

    }

    /**
     * Permit a specific user to view a private video
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user can now view the private video. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The user can already view this private video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video doesn&#39;t have a user-defined access list. </td><td>  -  </td></tr>
     </table>
     */
    public User addVideoPrivacyUser(BigDecimal userId, BigDecimal videoId) throws ApiException {
        ApiResponse<User> localVarResp = addVideoPrivacyUserWithHttpInfo(userId, videoId);
        return localVarResp.getData();
    }

    /**
     * Permit a specific user to view a private video
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user can now view the private video. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The user can already view this private video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video doesn&#39;t have a user-defined access list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> addVideoPrivacyUserWithHttpInfo(BigDecimal userId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = addVideoPrivacyUserValidateBeforeCall(userId, videoId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Permit a specific user to view a private video (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user can now view the private video. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The user can already view this private video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video doesn&#39;t have a user-defined access list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoPrivacyUserAsync(BigDecimal userId, BigDecimal videoId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoPrivacyUserValidateBeforeCall(userId, videoId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVideoPrivacyUsers
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users can now view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoPrivacyUsersCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/privacy/users"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoPrivacyUsersValidateBeforeCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoPrivacyUsers(Async)");
        }

        return addVideoPrivacyUsersCall(videoId, _callback);

    }

    /**
     * Permit a list of users to view a private video
     * The body of this request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain a single &#x60;URI&#x60; field, and the value of this field must be the URI of the user who can view this video.
     * @param videoId The ID of the video. (required)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users can now view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> addVideoPrivacyUsers(BigDecimal videoId) throws ApiException {
        ApiResponse<List<User>> localVarResp = addVideoPrivacyUsersWithHttpInfo(videoId);
        return localVarResp.getData();
    }

    /**
     * Permit a list of users to view a private video
     * The body of this request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain a single &#x60;URI&#x60; field, and the value of this field must be the URI of the user who can view this video.
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users can now view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> addVideoPrivacyUsersWithHttpInfo(BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = addVideoPrivacyUsersValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Permit a list of users to view a private video (asynchronously)
     * The body of this request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain a single &#x60;URI&#x60; field, and the value of this field must be the URI of the user who can view this video.
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users can now view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoPrivacyUsersAsync(BigDecimal videoId, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoPrivacyUsersValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVideoPrivacyUsersAlt1
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users can now view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoPrivacyUsersAlt1Call(BigDecimal channelId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/privacy/users"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoPrivacyUsersAlt1ValidateBeforeCall(BigDecimal channelId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addVideoPrivacyUsersAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoPrivacyUsersAlt1(Async)");
        }

        return addVideoPrivacyUsersAlt1Call(channelId, videoId, _callback);

    }

    /**
     * Permit a list of users to view a private video
     * The body of this request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain a single &#x60;URI&#x60; field, and the value of this field must be the URI of the user who can view this video.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users can now view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> addVideoPrivacyUsersAlt1(BigDecimal channelId, BigDecimal videoId) throws ApiException {
        ApiResponse<List<User>> localVarResp = addVideoPrivacyUsersAlt1WithHttpInfo(channelId, videoId);
        return localVarResp.getData();
    }

    /**
     * Permit a list of users to view a private video
     * The body of this request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain a single &#x60;URI&#x60; field, and the value of this field must be the URI of the user who can view this video.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users can now view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> addVideoPrivacyUsersAlt1WithHttpInfo(BigDecimal channelId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = addVideoPrivacyUsersAlt1ValidateBeforeCall(channelId, videoId, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Permit a list of users to view a private video (asynchronously)
     * The body of this request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#batch-requests). Each object must contain a single &#x60;URI&#x60; field, and the value of this field must be the URI of the user who can view this video.
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users can now view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoPrivacyUsersAlt1Async(BigDecimal channelId, BigDecimal videoId, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoPrivacyUsersAlt1ValidateBeforeCall(channelId, videoId, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVideoPrivacyUser
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was disallowed from viewing the private video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video isn&#39;t set to a user-defined access list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoPrivacyUserCall(BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/privacy/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoPrivacyUserValidateBeforeCall(BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteVideoPrivacyUser(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteVideoPrivacyUser(Async)");
        }

        return deleteVideoPrivacyUserCall(userId, videoId, _callback);

    }

    /**
     * Restrict a user from viewing a private video
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was disallowed from viewing the private video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video isn&#39;t set to a user-defined access list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVideoPrivacyUser(BigDecimal userId, BigDecimal videoId) throws ApiException {
        deleteVideoPrivacyUserWithHttpInfo(userId, videoId);
    }

    /**
     * Restrict a user from viewing a private video
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was disallowed from viewing the private video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video isn&#39;t set to a user-defined access list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVideoPrivacyUserWithHttpInfo(BigDecimal userId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoPrivacyUserValidateBeforeCall(userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restrict a user from viewing a private video (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user was disallowed from viewing the private video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video isn&#39;t set to a user-defined access list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoPrivacyUserAsync(BigDecimal userId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoPrivacyUserValidateBeforeCall(userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoPrivacyUsers
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No users can view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoPrivacyUsersCall(BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/privacy/users"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoPrivacyUsersValidateBeforeCall(BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoPrivacyUsers(Async)");
        }

        return getVideoPrivacyUsersCall(videoId, page, perPage, _callback);

    }

    /**
     * Get all the users who can view a user&#39;s private videos by default
     * 
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No users can view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> getVideoPrivacyUsers(BigDecimal videoId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<User>> localVarResp = getVideoPrivacyUsersWithHttpInfo(videoId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the users who can view a user&#39;s private videos by default
     * 
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No users can view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> getVideoPrivacyUsersWithHttpInfo(BigDecimal videoId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getVideoPrivacyUsersValidateBeforeCall(videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the users who can view a user&#39;s private videos by default (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No users can view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoPrivacyUsersAsync(BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoPrivacyUsersValidateBeforeCall(videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoPrivacyUsersAlt1
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No users can view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoPrivacyUsersAlt1Call(BigDecimal channelId, BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/privacy/users"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoPrivacyUsersAlt1ValidateBeforeCall(BigDecimal channelId, BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getVideoPrivacyUsersAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoPrivacyUsersAlt1(Async)");
        }

        return getVideoPrivacyUsersAlt1Call(channelId, videoId, page, perPage, _callback);

    }

    /**
     * Get all the users who can view a user&#39;s private videos by default
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No users can view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> getVideoPrivacyUsersAlt1(BigDecimal channelId, BigDecimal videoId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<User>> localVarResp = getVideoPrivacyUsersAlt1WithHttpInfo(channelId, videoId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the users who can view a user&#39;s private videos by default
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No users can view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> getVideoPrivacyUsersAlt1WithHttpInfo(BigDecimal channelId, BigDecimal videoId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getVideoPrivacyUsersAlt1ValidateBeforeCall(channelId, videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the users who can view a user&#39;s private videos by default (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No users can view the private video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoPrivacyUsersAlt1Async(BigDecimal channelId, BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoPrivacyUsersAlt1ValidateBeforeCall(channelId, videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
