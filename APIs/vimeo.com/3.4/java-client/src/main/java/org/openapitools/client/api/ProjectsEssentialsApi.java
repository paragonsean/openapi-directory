/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CreateProjectAlt1Request;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Project;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsEssentialsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsEssentialsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsEssentialsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProject
     * @param userId The ID of the user. (required)
     * @param createProjectAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The input is empty. * Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t create projects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectCall(BigDecimal userId, CreateProjectAlt1Request createProjectAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProjectAlt1Request;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectValidateBeforeCall(BigDecimal userId, CreateProjectAlt1Request createProjectAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createProject(Async)");
        }

        // verify the required parameter 'createProjectAlt1Request' is set
        if (createProjectAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'createProjectAlt1Request' when calling createProject(Async)");
        }

        return createProjectCall(userId, createProjectAlt1Request, _callback);

    }

    /**
     * Create a project
     * This method creates a new project for the specified user.
     * @param userId The ID of the user. (required)
     * @param createProjectAlt1Request  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The input is empty. * Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t create projects. </td><td>  -  </td></tr>
     </table>
     */
    public Project createProject(BigDecimal userId, CreateProjectAlt1Request createProjectAlt1Request) throws ApiException {
        ApiResponse<Project> localVarResp = createProjectWithHttpInfo(userId, createProjectAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Create a project
     * This method creates a new project for the specified user.
     * @param userId The ID of the user. (required)
     * @param createProjectAlt1Request  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The input is empty. * Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t create projects. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> createProjectWithHttpInfo(BigDecimal userId, CreateProjectAlt1Request createProjectAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = createProjectValidateBeforeCall(userId, createProjectAlt1Request, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a project (asynchronously)
     * This method creates a new project for the specified user.
     * @param userId The ID of the user. (required)
     * @param createProjectAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The input is empty. * Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t create projects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectAsync(BigDecimal userId, CreateProjectAlt1Request createProjectAlt1Request, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectValidateBeforeCall(userId, createProjectAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProjectAlt1
     * @param createProjectAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The input is empty. * Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t create projects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectAlt1Call(CreateProjectAlt1Request createProjectAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProjectAlt1Request;

        // create path and map variables
        String localVarPath = "/me/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectAlt1ValidateBeforeCall(CreateProjectAlt1Request createProjectAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createProjectAlt1Request' is set
        if (createProjectAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'createProjectAlt1Request' when calling createProjectAlt1(Async)");
        }

        return createProjectAlt1Call(createProjectAlt1Request, _callback);

    }

    /**
     * Create a project
     * This method creates a new project for the specified user.
     * @param createProjectAlt1Request  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The input is empty. * Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t create projects. </td><td>  -  </td></tr>
     </table>
     */
    public Project createProjectAlt1(CreateProjectAlt1Request createProjectAlt1Request) throws ApiException {
        ApiResponse<Project> localVarResp = createProjectAlt1WithHttpInfo(createProjectAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Create a project
     * This method creates a new project for the specified user.
     * @param createProjectAlt1Request  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The input is empty. * Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t create projects. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> createProjectAlt1WithHttpInfo(CreateProjectAlt1Request createProjectAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = createProjectAlt1ValidateBeforeCall(createProjectAlt1Request, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a project (asynchronously)
     * This method creates a new project for the specified user.
     * @param createProjectAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The project was created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: The input is empty. * Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t create projects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectAlt1Async(CreateProjectAlt1Request createProjectAlt1Request, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectAlt1ValidateBeforeCall(createProjectAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProject
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param shouldDeleteClips Whether to delete all the videos in the project along with the project itself. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t delete the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectCall(BigDecimal projectId, BigDecimal userId, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shouldDeleteClips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("should_delete_clips", shouldDeleteClips));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectValidateBeforeCall(BigDecimal projectId, BigDecimal userId, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteProject(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteProject(Async)");
        }

        return deleteProjectCall(projectId, userId, shouldDeleteClips, _callback);

    }

    /**
     * Delete a project
     * This method deletes a project and optionally also the videos that it contains.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param shouldDeleteClips Whether to delete all the videos in the project along with the project itself. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t delete the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProject(BigDecimal projectId, BigDecimal userId, Boolean shouldDeleteClips) throws ApiException {
        deleteProjectWithHttpInfo(projectId, userId, shouldDeleteClips);
    }

    /**
     * Delete a project
     * This method deletes a project and optionally also the videos that it contains.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param shouldDeleteClips Whether to delete all the videos in the project along with the project itself. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t delete the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectWithHttpInfo(BigDecimal projectId, BigDecimal userId, Boolean shouldDeleteClips) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(projectId, userId, shouldDeleteClips, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a project (asynchronously)
     * This method deletes a project and optionally also the videos that it contains.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param shouldDeleteClips Whether to delete all the videos in the project along with the project itself. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t delete the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectAsync(BigDecimal projectId, BigDecimal userId, Boolean shouldDeleteClips, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(projectId, userId, shouldDeleteClips, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectAlt1
     * @param projectId The ID of the project. (required)
     * @param shouldDeleteClips Whether to delete all the videos in the project along with the project itself. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t delete the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectAlt1Call(BigDecimal projectId, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shouldDeleteClips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("should_delete_clips", shouldDeleteClips));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectAlt1ValidateBeforeCall(BigDecimal projectId, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteProjectAlt1(Async)");
        }

        return deleteProjectAlt1Call(projectId, shouldDeleteClips, _callback);

    }

    /**
     * Delete a project
     * This method deletes a project and optionally also the videos that it contains.
     * @param projectId The ID of the project. (required)
     * @param shouldDeleteClips Whether to delete all the videos in the project along with the project itself. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t delete the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProjectAlt1(BigDecimal projectId, Boolean shouldDeleteClips) throws ApiException {
        deleteProjectAlt1WithHttpInfo(projectId, shouldDeleteClips);
    }

    /**
     * Delete a project
     * This method deletes a project and optionally also the videos that it contains.
     * @param projectId The ID of the project. (required)
     * @param shouldDeleteClips Whether to delete all the videos in the project along with the project itself. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t delete the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProjectAlt1WithHttpInfo(BigDecimal projectId, Boolean shouldDeleteClips) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectAlt1ValidateBeforeCall(projectId, shouldDeleteClips, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a project (asynchronously)
     * This method deletes a project and optionally also the videos that it contains.
     * @param projectId The ID of the project. (required)
     * @param shouldDeleteClips Whether to delete all the videos in the project along with the project itself. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The project was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t delete the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectAlt1Async(BigDecimal projectId, Boolean shouldDeleteClips, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectAlt1ValidateBeforeCall(projectId, shouldDeleteClips, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editProject
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param createProjectAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2204: The input is invalid. * Error code 2205: The input is empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t edit the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editProjectCall(BigDecimal projectId, BigDecimal userId, CreateProjectAlt1Request createProjectAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProjectAlt1Request;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editProjectValidateBeforeCall(BigDecimal projectId, BigDecimal userId, CreateProjectAlt1Request createProjectAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling editProject(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling editProject(Async)");
        }

        // verify the required parameter 'createProjectAlt1Request' is set
        if (createProjectAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'createProjectAlt1Request' when calling editProject(Async)");
        }

        return editProjectCall(projectId, userId, createProjectAlt1Request, _callback);

    }

    /**
     * Edit a project
     * This method edits an existing project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param createProjectAlt1Request  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2204: The input is invalid. * Error code 2205: The input is empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t edit the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public Project editProject(BigDecimal projectId, BigDecimal userId, CreateProjectAlt1Request createProjectAlt1Request) throws ApiException {
        ApiResponse<Project> localVarResp = editProjectWithHttpInfo(projectId, userId, createProjectAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Edit a project
     * This method edits an existing project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param createProjectAlt1Request  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2204: The input is invalid. * Error code 2205: The input is empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t edit the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> editProjectWithHttpInfo(BigDecimal projectId, BigDecimal userId, CreateProjectAlt1Request createProjectAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = editProjectValidateBeforeCall(projectId, userId, createProjectAlt1Request, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a project (asynchronously)
     * This method edits an existing project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param createProjectAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2204: The input is invalid. * Error code 2205: The input is empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t edit the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editProjectAsync(BigDecimal projectId, BigDecimal userId, CreateProjectAlt1Request createProjectAlt1Request, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = editProjectValidateBeforeCall(projectId, userId, createProjectAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editProjectAlt1
     * @param projectId The ID of the project. (required)
     * @param createProjectAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2204: The input is invalid. * Error code 2205: The input is empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t edit the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editProjectAlt1Call(BigDecimal projectId, CreateProjectAlt1Request createProjectAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProjectAlt1Request;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editProjectAlt1ValidateBeforeCall(BigDecimal projectId, CreateProjectAlt1Request createProjectAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling editProjectAlt1(Async)");
        }

        // verify the required parameter 'createProjectAlt1Request' is set
        if (createProjectAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'createProjectAlt1Request' when calling editProjectAlt1(Async)");
        }

        return editProjectAlt1Call(projectId, createProjectAlt1Request, _callback);

    }

    /**
     * Edit a project
     * This method edits an existing project.
     * @param projectId The ID of the project. (required)
     * @param createProjectAlt1Request  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2204: The input is invalid. * Error code 2205: The input is empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t edit the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public Project editProjectAlt1(BigDecimal projectId, CreateProjectAlt1Request createProjectAlt1Request) throws ApiException {
        ApiResponse<Project> localVarResp = editProjectAlt1WithHttpInfo(projectId, createProjectAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Edit a project
     * This method edits an existing project.
     * @param projectId The ID of the project. (required)
     * @param createProjectAlt1Request  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2204: The input is invalid. * Error code 2205: The input is empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t edit the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> editProjectAlt1WithHttpInfo(BigDecimal projectId, CreateProjectAlt1Request createProjectAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = editProjectAlt1ValidateBeforeCall(projectId, createProjectAlt1Request, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a project (asynchronously)
     * This method edits an existing project.
     * @param projectId The ID of the project. (required)
     * @param createProjectAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2204: The input is invalid. * Error code 2205: The input is empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user can&#39;t edit the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editProjectAlt1Async(BigDecimal projectId, CreateProjectAlt1Request createProjectAlt1Request, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = editProjectAlt1ValidateBeforeCall(projectId, createProjectAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProject
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectCall(BigDecimal projectId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectValidateBeforeCall(BigDecimal projectId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProject(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getProject(Async)");
        }

        return getProjectCall(projectId, userId, _callback);

    }

    /**
     * Get a specific project
     * This method gets a single project that belongs to the specified user.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public Project getProject(BigDecimal projectId, BigDecimal userId) throws ApiException {
        ApiResponse<Project> localVarResp = getProjectWithHttpInfo(projectId, userId);
        return localVarResp.getData();
    }

    /**
     * Get a specific project
     * This method gets a single project that belongs to the specified user.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> getProjectWithHttpInfo(BigDecimal projectId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = getProjectValidateBeforeCall(projectId, userId, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific project (asynchronously)
     * This method gets a single project that belongs to the specified user.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectAsync(BigDecimal projectId, BigDecimal userId, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectValidateBeforeCall(projectId, userId, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectAlt1
     * @param projectId The ID of the project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectAlt1Call(BigDecimal projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectAlt1ValidateBeforeCall(BigDecimal projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectAlt1(Async)");
        }

        return getProjectAlt1Call(projectId, _callback);

    }

    /**
     * Get a specific project
     * This method gets a single project that belongs to the specified user.
     * @param projectId The ID of the project. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public Project getProjectAlt1(BigDecimal projectId) throws ApiException {
        ApiResponse<Project> localVarResp = getProjectAlt1WithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get a specific project
     * This method gets a single project that belongs to the specified user.
     * @param projectId The ID of the project. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> getProjectAlt1WithHttpInfo(BigDecimal projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectAlt1ValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific project (asynchronously)
     * This method gets a single project that belongs to the specified user.
     * @param projectId The ID of the project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The project was returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectAlt1Async(BigDecimal projectId, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectAlt1ValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjects
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The projects were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsCall(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectsValidateBeforeCall(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getProjects(Async)");
        }

        return getProjectsCall(userId, direction, page, perPage, sort, _callback);

    }

    /**
     * Get all the projects that belong to a user
     * This method gets all the projects that belong to the specified user.
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The projects were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Project> getProjects(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        ApiResponse<List<Project>> localVarResp = getProjectsWithHttpInfo(userId, direction, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the projects that belong to a user
     * This method gets all the projects that belong to the specified user.
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Project&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The projects were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Project>> getProjectsWithHttpInfo(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(userId, direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the projects that belong to a user (asynchronously)
     * This method gets all the projects that belong to the specified user.
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The projects were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsAsync(BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback<List<Project>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(userId, direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectsAlt1
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The projects were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsAlt1Call(String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectsAlt1ValidateBeforeCall(String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        return getProjectsAlt1Call(direction, page, perPage, sort, _callback);

    }

    /**
     * Get all the projects that belong to a user
     * This method gets all the projects that belong to the specified user.
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The projects were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Project> getProjectsAlt1(String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        ApiResponse<List<Project>> localVarResp = getProjectsAlt1WithHttpInfo(direction, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the projects that belong to a user
     * This method gets all the projects that belong to the specified user.
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Project&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The projects were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Project>> getProjectsAlt1WithHttpInfo(String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getProjectsAlt1ValidateBeforeCall(direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the projects that belong to a user (asynchronously)
     * This method gets all the projects that belong to the specified user.
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The projects were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsAlt1Async(String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback<List<Project>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectsAlt1ValidateBeforeCall(direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
