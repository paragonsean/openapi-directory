/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VideoSpatialDirectorTimelineInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 360 spatial data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoSpatial {
  public static final String SERIALIZED_NAME_DIRECTOR_TIMELINE = "director_timeline";
  @SerializedName(SERIALIZED_NAME_DIRECTOR_TIMELINE)
  private List<VideoSpatialDirectorTimelineInner> directorTimeline = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELD_OF_VIEW = "field_of_view";
  @SerializedName(SERIALIZED_NAME_FIELD_OF_VIEW)
  private BigDecimal fieldOfView;

  /**
   * The 360 spatial projection:  Option descriptions:  * &#x60;cubical&#x60; - The spatial projection is cubical.  * &#x60;cylindrical&#x60; - The spatial projection is cylindrical.  * &#x60;dome&#x60; - The spatial projection is dome-shaped.  * &#x60;equirectangular&#x60; - The spatial projection is equirectangular.  * &#x60;pyramid&#x60; - The spatial projection is pyramid-shaped. 
   */
  @JsonAdapter(ProjectionEnum.Adapter.class)
  public enum ProjectionEnum {
    CUBICAL("cubical"),
    
    CYLINDRICAL("cylindrical"),
    
    DOME("dome"),
    
    EQUIRECTANGULAR("equirectangular"),
    
    PYRAMID("pyramid");

    private String value;

    ProjectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProjectionEnum fromValue(String value) {
      for (ProjectionEnum b : ProjectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ProjectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProjectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProjectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProjectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProjectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROJECTION = "projection";
  @SerializedName(SERIALIZED_NAME_PROJECTION)
  private ProjectionEnum projection;

  /**
   * The 360 stereo format:  Option descriptions:  * &#x60;left-right&#x60; - The stereo format is left-right.  * &#x60;mono&#x60; - The audio is monaural.  * &#x60;top-bottom&#x60; - The stereo format is top-bottom. 
   */
  @JsonAdapter(StereoFormatEnum.Adapter.class)
  public enum StereoFormatEnum {
    LEFT_RIGHT("left-right"),
    
    MONO("mono"),
    
    TOP_BOTTOM("top-bottom");

    private String value;

    StereoFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StereoFormatEnum fromValue(String value) {
      for (StereoFormatEnum b : StereoFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StereoFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StereoFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StereoFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StereoFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StereoFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STEREO_FORMAT = "stereo_format";
  @SerializedName(SERIALIZED_NAME_STEREO_FORMAT)
  private StereoFormatEnum stereoFormat;

  public VideoSpatial() {
  }

  public VideoSpatial directorTimeline(List<VideoSpatialDirectorTimelineInner> directorTimeline) {
    this.directorTimeline = directorTimeline;
    return this;
  }

  public VideoSpatial addDirectorTimelineItem(VideoSpatialDirectorTimelineInner directorTimelineItem) {
    if (this.directorTimeline == null) {
      this.directorTimeline = new ArrayList<>();
    }
    this.directorTimeline.add(directorTimelineItem);
    return this;
  }

  /**
   * 360 director timeline.
   * @return directorTimeline
   */
  @javax.annotation.Nonnull
  public List<VideoSpatialDirectorTimelineInner> getDirectorTimeline() {
    return directorTimeline;
  }

  public void setDirectorTimeline(List<VideoSpatialDirectorTimelineInner> directorTimeline) {
    this.directorTimeline = directorTimeline;
  }


  public VideoSpatial fieldOfView(BigDecimal fieldOfView) {
    this.fieldOfView = fieldOfView;
    return this;
  }

  /**
   * The 360 field of view, from 30 (minimum) to 90 (maximum). The default is 50.
   * @return fieldOfView
   */
  @javax.annotation.Nullable
  public BigDecimal getFieldOfView() {
    return fieldOfView;
  }

  public void setFieldOfView(BigDecimal fieldOfView) {
    this.fieldOfView = fieldOfView;
  }


  public VideoSpatial projection(ProjectionEnum projection) {
    this.projection = projection;
    return this;
  }

  /**
   * The 360 spatial projection:  Option descriptions:  * &#x60;cubical&#x60; - The spatial projection is cubical.  * &#x60;cylindrical&#x60; - The spatial projection is cylindrical.  * &#x60;dome&#x60; - The spatial projection is dome-shaped.  * &#x60;equirectangular&#x60; - The spatial projection is equirectangular.  * &#x60;pyramid&#x60; - The spatial projection is pyramid-shaped. 
   * @return projection
   */
  @javax.annotation.Nullable
  public ProjectionEnum getProjection() {
    return projection;
  }

  public void setProjection(ProjectionEnum projection) {
    this.projection = projection;
  }


  public VideoSpatial stereoFormat(StereoFormatEnum stereoFormat) {
    this.stereoFormat = stereoFormat;
    return this;
  }

  /**
   * The 360 stereo format:  Option descriptions:  * &#x60;left-right&#x60; - The stereo format is left-right.  * &#x60;mono&#x60; - The audio is monaural.  * &#x60;top-bottom&#x60; - The stereo format is top-bottom. 
   * @return stereoFormat
   */
  @javax.annotation.Nullable
  public StereoFormatEnum getStereoFormat() {
    return stereoFormat;
  }

  public void setStereoFormat(StereoFormatEnum stereoFormat) {
    this.stereoFormat = stereoFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoSpatial videoSpatial = (VideoSpatial) o;
    return Objects.equals(this.directorTimeline, videoSpatial.directorTimeline) &&
        Objects.equals(this.fieldOfView, videoSpatial.fieldOfView) &&
        Objects.equals(this.projection, videoSpatial.projection) &&
        Objects.equals(this.stereoFormat, videoSpatial.stereoFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directorTimeline, fieldOfView, projection, stereoFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoSpatial {\n");
    sb.append("    directorTimeline: ").append(toIndentedString(directorTimeline)).append("\n");
    sb.append("    fieldOfView: ").append(toIndentedString(fieldOfView)).append("\n");
    sb.append("    projection: ").append(toIndentedString(projection)).append("\n");
    sb.append("    stereoFormat: ").append(toIndentedString(stereoFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("director_timeline");
    openapiFields.add("field_of_view");
    openapiFields.add("projection");
    openapiFields.add("stereo_format");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("director_timeline");
    openapiRequiredFields.add("field_of_view");
    openapiRequiredFields.add("projection");
    openapiRequiredFields.add("stereo_format");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoSpatial
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoSpatial.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoSpatial is not found in the empty JSON string", VideoSpatial.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoSpatial.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoSpatial` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoSpatial.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("director_timeline").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `director_timeline` to be an array in the JSON string but got `%s`", jsonObj.get("director_timeline").toString()));
      }

      JsonArray jsonArraydirectorTimeline = jsonObj.getAsJsonArray("director_timeline");
      // validate the required field `director_timeline` (array)
      for (int i = 0; i < jsonArraydirectorTimeline.size(); i++) {
        VideoSpatialDirectorTimelineInner.validateJsonElement(jsonArraydirectorTimeline.get(i));
      };
      if ((jsonObj.get("projection") != null && !jsonObj.get("projection").isJsonNull()) && !jsonObj.get("projection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projection").toString()));
      }
      // validate the required field `projection`
      ProjectionEnum.validateJsonElement(jsonObj.get("projection"));
      if ((jsonObj.get("stereo_format") != null && !jsonObj.get("stereo_format").isJsonNull()) && !jsonObj.get("stereo_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stereo_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stereo_format").toString()));
      }
      // validate the required field `stereo_format`
      StereoFormatEnum.validateJsonElement(jsonObj.get("stereo_format"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoSpatial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoSpatial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoSpatial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoSpatial.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoSpatial>() {
           @Override
           public void write(JsonWriter out, VideoSpatial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoSpatial read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoSpatial given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoSpatial
   * @throws IOException if the JSON string is invalid with respect to VideoSpatial
   */
  public static VideoSpatial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoSpatial.class);
  }

  /**
   * Convert an instance of VideoSpatial to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

