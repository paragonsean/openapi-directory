/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TextTrack
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TextTrack {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_HLS_LINK = "hls_link";
  @SerializedName(SERIALIZED_NAME_HLS_LINK)
  private String hlsLink;

  public static final String SERIALIZED_NAME_HLS_LINK_EXPIRES_TIME = "hls_link_expires_time";
  @SerializedName(SERIALIZED_NAME_HLS_LINK_EXPIRES_TIME)
  private String hlsLinkExpiresTime;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LINK_EXPIRES_TIME = "link_expires_time";
  @SerializedName(SERIALIZED_NAME_LINK_EXPIRES_TIME)
  private String linkExpiresTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The type of the text track:  Option descriptions:  * &#x60;captions&#x60; - The text track is for captions.  * &#x60;subtitles&#x60; - The text track is for subtitles. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CAPTIONS("captions"),
    
    SUBTITLES("subtitles");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public TextTrack() {
  }

  public TextTrack active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Whether this text track is active.
   * @return active
   */
  @javax.annotation.Nonnull
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public TextTrack hlsLink(String hlsLink) {
    this.hlsLink = hlsLink;
    return this;
  }

  /**
   * The read-only URL of the text track file, intended for use with HLS playback.
   * @return hlsLink
   */
  @javax.annotation.Nonnull
  public String getHlsLink() {
    return hlsLink;
  }

  public void setHlsLink(String hlsLink) {
    this.hlsLink = hlsLink;
  }


  public TextTrack hlsLinkExpiresTime(String hlsLinkExpiresTime) {
    this.hlsLinkExpiresTime = hlsLinkExpiresTime;
    return this;
  }

  /**
   * The time in ISO 8601 format when the read-only HLS playback text track file expires.
   * @return hlsLinkExpiresTime
   */
  @javax.annotation.Nonnull
  public String getHlsLinkExpiresTime() {
    return hlsLinkExpiresTime;
  }

  public void setHlsLinkExpiresTime(String hlsLinkExpiresTime) {
    this.hlsLinkExpiresTime = hlsLinkExpiresTime;
  }


  public TextTrack language(String language) {
    this.language = language;
    return this;
  }

  /**
   * The language code for this text track. To see a full list, request &#x60;/languages?filter&#x3D;texttrack&#x60;.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public TextTrack link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The read-only URL of the text track file. You can upload to this link when you create it for the first time.
   * @return link
   */
  @javax.annotation.Nonnull
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public TextTrack linkExpiresTime(String linkExpiresTime) {
    this.linkExpiresTime = linkExpiresTime;
    return this;
  }

  /**
   * The time in ISO 8601 format when the text track link expires.
   * @return linkExpiresTime
   */
  @javax.annotation.Nonnull
  public String getLinkExpiresTime() {
    return linkExpiresTime;
  }

  public void setLinkExpiresTime(String linkExpiresTime) {
    this.linkExpiresTime = linkExpiresTime;
  }


  public TextTrack name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The descriptive name of this text track.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TextTrack type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the text track:  Option descriptions:  * &#x60;captions&#x60; - The text track is for captions.  * &#x60;subtitles&#x60; - The text track is for subtitles. 
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public TextTrack uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The relative URI of the text track.
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextTrack textTrack = (TextTrack) o;
    return Objects.equals(this.active, textTrack.active) &&
        Objects.equals(this.hlsLink, textTrack.hlsLink) &&
        Objects.equals(this.hlsLinkExpiresTime, textTrack.hlsLinkExpiresTime) &&
        Objects.equals(this.language, textTrack.language) &&
        Objects.equals(this.link, textTrack.link) &&
        Objects.equals(this.linkExpiresTime, textTrack.linkExpiresTime) &&
        Objects.equals(this.name, textTrack.name) &&
        Objects.equals(this.type, textTrack.type) &&
        Objects.equals(this.uri, textTrack.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, hlsLink, hlsLinkExpiresTime, language, link, linkExpiresTime, name, type, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextTrack {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    hlsLink: ").append(toIndentedString(hlsLink)).append("\n");
    sb.append("    hlsLinkExpiresTime: ").append(toIndentedString(hlsLinkExpiresTime)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    linkExpiresTime: ").append(toIndentedString(linkExpiresTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("hls_link");
    openapiFields.add("hls_link_expires_time");
    openapiFields.add("language");
    openapiFields.add("link");
    openapiFields.add("link_expires_time");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("active");
    openapiRequiredFields.add("hls_link");
    openapiRequiredFields.add("hls_link_expires_time");
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("link_expires_time");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("uri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextTrack
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextTrack.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextTrack is not found in the empty JSON string", TextTrack.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TextTrack.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextTrack` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TextTrack.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("hls_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hls_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hls_link").toString()));
      }
      if (!jsonObj.get("hls_link_expires_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hls_link_expires_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hls_link_expires_time").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if (!jsonObj.get("link_expires_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_expires_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_expires_time").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextTrack.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextTrack' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextTrack> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextTrack.class));

       return (TypeAdapter<T>) new TypeAdapter<TextTrack>() {
           @Override
           public void write(JsonWriter out, TextTrack value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextTrack read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TextTrack given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextTrack
   * @throws IOException if the JSON string is invalid with respect to TextTrack
   */
  public static TextTrack fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextTrack.class);
  }

  /**
   * Convert an instance of TextTrack to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

