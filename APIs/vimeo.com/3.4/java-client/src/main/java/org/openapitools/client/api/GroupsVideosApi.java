/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupsVideosApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsVideosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsVideosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVideoToGroup
     * @param groupId The ID of the group. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The video is in pending status. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The video is already in the group. * The user can&#39;t add videos to the group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoToGroupCall(BigDecimal groupId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/videos/{video_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoToGroupValidateBeforeCall(BigDecimal groupId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addVideoToGroup(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoToGroup(Async)");
        }

        return addVideoToGroupCall(groupId, videoId, _callback);

    }

    /**
     * Add a video to a group
     * 
     * @param groupId The ID of the group. (required)
     * @param videoId The ID of the video. (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The video is in pending status. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The video is already in the group. * The user can&#39;t add videos to the group. </td><td>  -  </td></tr>
     </table>
     */
    public Video addVideoToGroup(BigDecimal groupId, BigDecimal videoId) throws ApiException {
        ApiResponse<Video> localVarResp = addVideoToGroupWithHttpInfo(groupId, videoId);
        return localVarResp.getData();
    }

    /**
     * Add a video to a group
     * 
     * @param groupId The ID of the group. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The video is in pending status. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The video is already in the group. * The user can&#39;t add videos to the group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> addVideoToGroupWithHttpInfo(BigDecimal groupId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = addVideoToGroupValidateBeforeCall(groupId, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a video to a group (asynchronously)
     * 
     * @param groupId The ID of the group. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The video is in pending status. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The video is already in the group. * The user can&#39;t add videos to the group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoToGroupAsync(BigDecimal groupId, BigDecimal videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoToGroupValidateBeforeCall(groupId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVideoFromGroup
     * @param groupId The ID of the group. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this group&#39;s videos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoFromGroupCall(BigDecimal groupId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/videos/{video_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoFromGroupValidateBeforeCall(BigDecimal groupId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteVideoFromGroup(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteVideoFromGroup(Async)");
        }

        return deleteVideoFromGroupCall(groupId, videoId, _callback);

    }

    /**
     * Remove a video from a group
     * 
     * @param groupId The ID of the group. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this group&#39;s videos. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVideoFromGroup(BigDecimal groupId, BigDecimal videoId) throws ApiException {
        deleteVideoFromGroupWithHttpInfo(groupId, videoId);
    }

    /**
     * Remove a video from a group
     * 
     * @param groupId The ID of the group. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this group&#39;s videos. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVideoFromGroupWithHttpInfo(BigDecimal groupId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoFromGroupValidateBeforeCall(groupId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a video from a group (asynchronously)
     * 
     * @param groupId The ID of the group. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this group&#39;s videos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoFromGroupAsync(BigDecimal groupId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoFromGroupValidateBeforeCall(groupId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupVideo
     * @param groupId The ID of the group. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or group exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupVideoCall(BigDecimal groupId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/videos/{video_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupVideoValidateBeforeCall(BigDecimal groupId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getGroupVideo(Async)");
        }

        return getGroupVideoCall(groupId, videoId, _callback);

    }

    /**
     * Get a specific video in a group
     * Check if a group has a video.
     * @param groupId The ID of the group. (required)
     * @param videoId The ID of the video. (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or group exists. </td><td>  -  </td></tr>
     </table>
     */
    public Video getGroupVideo(BigDecimal groupId, BigDecimal videoId) throws ApiException {
        ApiResponse<Video> localVarResp = getGroupVideoWithHttpInfo(groupId, videoId);
        return localVarResp.getData();
    }

    /**
     * Get a specific video in a group
     * Check if a group has a video.
     * @param groupId The ID of the group. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or group exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> getGroupVideoWithHttpInfo(BigDecimal groupId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = getGroupVideoValidateBeforeCall(groupId, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific video in a group (asynchronously)
     * Check if a group has a video.
     * @param groupId The ID of the group. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or group exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupVideoAsync(BigDecimal groupId, BigDecimal videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupVideoValidateBeforeCall(groupId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupVideos
     * @param groupId The ID of the group. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> No videos have been added to this group since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such group exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupVideosCall(BigDecimal groupId, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/videos"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupVideosValidateBeforeCall(BigDecimal groupId, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupVideos(Async)");
        }

        return getGroupVideosCall(groupId, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the videos in a group
     * 
     * @param groupId The ID of the group. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> No videos have been added to this group since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such group exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getGroupVideos(BigDecimal groupId, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getGroupVideosWithHttpInfo(groupId, direction, filter, filterEmbeddable, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the videos in a group
     * 
     * @param groupId The ID of the group. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> No videos have been added to this group since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such group exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getGroupVideosWithHttpInfo(BigDecimal groupId, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getGroupVideosValidateBeforeCall(groupId, direction, filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos in a group (asynchronously)
     * 
     * @param groupId The ID of the group. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> No videos have been added to this group since the given &#x60;If-Modified-Since&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such group exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupVideosAsync(BigDecimal groupId, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupVideosValidateBeforeCall(groupId, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
