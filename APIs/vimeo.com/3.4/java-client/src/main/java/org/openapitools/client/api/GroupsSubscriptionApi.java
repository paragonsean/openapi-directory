/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.LegacyError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupsSubscriptionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsSubscriptionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsSubscriptionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for joinGroup
     * @param groupId The ID of the group. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user joined the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t join groups. * The group prohibits the authenticated user from joining, either because the group is not public or because the group&#39;s privacy setting is &#x60;members&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinGroupCall(BigDecimal groupId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call joinGroupValidateBeforeCall(BigDecimal groupId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling joinGroup(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling joinGroup(Async)");
        }

        return joinGroupCall(groupId, userId, _callback);

    }

    /**
     * Add a user to a group
     * 
     * @param groupId The ID of the group. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user joined the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t join groups. * The group prohibits the authenticated user from joining, either because the group is not public or because the group&#39;s privacy setting is &#x60;members&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public void joinGroup(BigDecimal groupId, BigDecimal userId) throws ApiException {
        joinGroupWithHttpInfo(groupId, userId);
    }

    /**
     * Add a user to a group
     * 
     * @param groupId The ID of the group. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user joined the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t join groups. * The group prohibits the authenticated user from joining, either because the group is not public or because the group&#39;s privacy setting is &#x60;members&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> joinGroupWithHttpInfo(BigDecimal groupId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = joinGroupValidateBeforeCall(groupId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a user to a group (asynchronously)
     * 
     * @param groupId The ID of the group. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user joined the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t join groups. * The group prohibits the authenticated user from joining, either because the group is not public or because the group&#39;s privacy setting is &#x60;members&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinGroupAsync(BigDecimal groupId, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = joinGroupValidateBeforeCall(groupId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for joinGroupAlt1
     * @param groupId The ID of the group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user joined the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t join groups. * The group prohibits the authenticated user from joining, either because the group is not public or because the group&#39;s privacy setting is &#x60;members&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinGroupAlt1Call(BigDecimal groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call joinGroupAlt1ValidateBeforeCall(BigDecimal groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling joinGroupAlt1(Async)");
        }

        return joinGroupAlt1Call(groupId, _callback);

    }

    /**
     * Add a user to a group
     * 
     * @param groupId The ID of the group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user joined the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t join groups. * The group prohibits the authenticated user from joining, either because the group is not public or because the group&#39;s privacy setting is &#x60;members&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public void joinGroupAlt1(BigDecimal groupId) throws ApiException {
        joinGroupAlt1WithHttpInfo(groupId);
    }

    /**
     * Add a user to a group
     * 
     * @param groupId The ID of the group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user joined the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t join groups. * The group prohibits the authenticated user from joining, either because the group is not public or because the group&#39;s privacy setting is &#x60;members&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> joinGroupAlt1WithHttpInfo(BigDecimal groupId) throws ApiException {
        okhttp3.Call localVarCall = joinGroupAlt1ValidateBeforeCall(groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a user to a group (asynchronously)
     * 
     * @param groupId The ID of the group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user joined the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t join groups. * The group prohibits the authenticated user from joining, either because the group is not public or because the group&#39;s privacy setting is &#x60;members&#x60;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinGroupAlt1Async(BigDecimal groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = joinGroupAlt1ValidateBeforeCall(groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaveGroup
     * @param groupId The ID of the group. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user left the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user owns the group. To remove this user, first apply a new group owner through PATCH. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaveGroupCall(BigDecimal groupId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaveGroupValidateBeforeCall(BigDecimal groupId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling leaveGroup(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling leaveGroup(Async)");
        }

        return leaveGroupCall(groupId, userId, _callback);

    }

    /**
     * Remove a user from a group
     * 
     * @param groupId The ID of the group. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user left the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user owns the group. To remove this user, first apply a new group owner through PATCH. </td><td>  -  </td></tr>
     </table>
     */
    public void leaveGroup(BigDecimal groupId, BigDecimal userId) throws ApiException {
        leaveGroupWithHttpInfo(groupId, userId);
    }

    /**
     * Remove a user from a group
     * 
     * @param groupId The ID of the group. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user left the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user owns the group. To remove this user, first apply a new group owner through PATCH. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaveGroupWithHttpInfo(BigDecimal groupId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = leaveGroupValidateBeforeCall(groupId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a user from a group (asynchronously)
     * 
     * @param groupId The ID of the group. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user left the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user owns the group. To remove this user, first apply a new group owner through PATCH. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaveGroupAsync(BigDecimal groupId, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaveGroupValidateBeforeCall(groupId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaveGroupAlt1
     * @param groupId The ID of the group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user left the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user owns the group. To remove this user, first apply a new group owner through PATCH. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaveGroupAlt1Call(BigDecimal groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaveGroupAlt1ValidateBeforeCall(BigDecimal groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling leaveGroupAlt1(Async)");
        }

        return leaveGroupAlt1Call(groupId, _callback);

    }

    /**
     * Remove a user from a group
     * 
     * @param groupId The ID of the group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user left the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user owns the group. To remove this user, first apply a new group owner through PATCH. </td><td>  -  </td></tr>
     </table>
     */
    public void leaveGroupAlt1(BigDecimal groupId) throws ApiException {
        leaveGroupAlt1WithHttpInfo(groupId);
    }

    /**
     * Remove a user from a group
     * 
     * @param groupId The ID of the group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user left the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user owns the group. To remove this user, first apply a new group owner through PATCH. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaveGroupAlt1WithHttpInfo(BigDecimal groupId) throws ApiException {
        okhttp3.Call localVarCall = leaveGroupAlt1ValidateBeforeCall(groupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a user from a group (asynchronously)
     * 
     * @param groupId The ID of the group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user left the group. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user owns the group. To remove this user, first apply a new group owner through PATCH. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaveGroupAlt1Async(BigDecimal groupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaveGroupAlt1ValidateBeforeCall(groupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
