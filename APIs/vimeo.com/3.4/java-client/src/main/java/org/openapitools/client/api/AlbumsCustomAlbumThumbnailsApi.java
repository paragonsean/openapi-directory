/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.Picture;
import org.openapitools.client.model.ReplaceAlbumCustomThumbRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlbumsCustomAlbumThumbnailsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AlbumsCustomAlbumThumbnailsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlbumsCustomAlbumThumbnailsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAlbumCustomThumb
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom thumbnail was added to the album. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAlbumCustomThumbCall(BigDecimal albumId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/custom_thumbnails"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAlbumCustomThumbValidateBeforeCall(BigDecimal albumId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling createAlbumCustomThumb(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createAlbumCustomThumb(Async)");
        }

        return createAlbumCustomThumbCall(albumId, userId, _callback);

    }

    /**
     * Add a custom uploaded thumbnail
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom thumbnail was added to the album. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public Picture createAlbumCustomThumb(BigDecimal albumId, BigDecimal userId) throws ApiException {
        ApiResponse<Picture> localVarResp = createAlbumCustomThumbWithHttpInfo(albumId, userId);
        return localVarResp.getData();
    }

    /**
     * Add a custom uploaded thumbnail
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom thumbnail was added to the album. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> createAlbumCustomThumbWithHttpInfo(BigDecimal albumId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = createAlbumCustomThumbValidateBeforeCall(albumId, userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a custom uploaded thumbnail (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom thumbnail was added to the album. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAlbumCustomThumbAsync(BigDecimal albumId, BigDecimal userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAlbumCustomThumbValidateBeforeCall(albumId, userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAlbumCustomThumbnail
     * @param albumId The ID of the album. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom thumbnail was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAlbumCustomThumbnailCall(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAlbumCustomThumbnailValidateBeforeCall(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling deleteAlbumCustomThumbnail(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling deleteAlbumCustomThumbnail(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteAlbumCustomThumbnail(Async)");
        }

        return deleteAlbumCustomThumbnailCall(albumId, thumbnailId, userId, _callback);

    }

    /**
     * Remove a custom uploaded album thumbnail
     * This method removes a custom uploaded thumbnail from the specified album.
     * @param albumId The ID of the album. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom thumbnail was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAlbumCustomThumbnail(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId) throws ApiException {
        deleteAlbumCustomThumbnailWithHttpInfo(albumId, thumbnailId, userId);
    }

    /**
     * Remove a custom uploaded album thumbnail
     * This method removes a custom uploaded thumbnail from the specified album.
     * @param albumId The ID of the album. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom thumbnail was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAlbumCustomThumbnailWithHttpInfo(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = deleteAlbumCustomThumbnailValidateBeforeCall(albumId, thumbnailId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a custom uploaded album thumbnail (asynchronously)
     * This method removes a custom uploaded thumbnail from the specified album.
     * @param albumId The ID of the album. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The custom thumbnail was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAlbumCustomThumbnailAsync(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAlbumCustomThumbnailValidateBeforeCall(albumId, thumbnailId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlbumCustomThumbnail
     * @param albumId The ID of the album. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom thumbnail was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t view this custom thumbnail. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumCustomThumbnailCall(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumCustomThumbnailValidateBeforeCall(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getAlbumCustomThumbnail(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling getAlbumCustomThumbnail(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAlbumCustomThumbnail(Async)");
        }

        return getAlbumCustomThumbnailCall(albumId, thumbnailId, userId, _callback);

    }

    /**
     * Get a specific custom uploaded album thumbnail
     * 
     * @param albumId The ID of the album. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom thumbnail was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t view this custom thumbnail. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public Picture getAlbumCustomThumbnail(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId) throws ApiException {
        ApiResponse<Picture> localVarResp = getAlbumCustomThumbnailWithHttpInfo(albumId, thumbnailId, userId);
        return localVarResp.getData();
    }

    /**
     * Get a specific custom uploaded album thumbnail
     * 
     * @param albumId The ID of the album. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom thumbnail was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t view this custom thumbnail. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> getAlbumCustomThumbnailWithHttpInfo(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = getAlbumCustomThumbnailValidateBeforeCall(albumId, thumbnailId, userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific custom uploaded album thumbnail (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom thumbnail was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t view this custom thumbnail. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumCustomThumbnailAsync(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumCustomThumbnailValidateBeforeCall(albumId, thumbnailId, userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlbumCustomThumbs
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom uploaded thumbnails were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumCustomThumbsCall(BigDecimal albumId, BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/custom_thumbnails"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumCustomThumbsValidateBeforeCall(BigDecimal albumId, BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getAlbumCustomThumbs(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAlbumCustomThumbs(Async)");
        }

        return getAlbumCustomThumbsCall(albumId, userId, page, perPage, _callback);

    }

    /**
     * Get all the custom upload thumbnails of an album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom uploaded thumbnails were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Picture> getAlbumCustomThumbs(BigDecimal albumId, BigDecimal userId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Picture>> localVarResp = getAlbumCustomThumbsWithHttpInfo(albumId, userId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the custom upload thumbnails of an album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom uploaded thumbnails were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Picture>> getAlbumCustomThumbsWithHttpInfo(BigDecimal albumId, BigDecimal userId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getAlbumCustomThumbsValidateBeforeCall(albumId, userId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the custom upload thumbnails of an album (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom uploaded thumbnails were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumCustomThumbsAsync(BigDecimal albumId, BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumCustomThumbsValidateBeforeCall(albumId, userId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceAlbumCustomThumb
     * @param albumId The ID of the album. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @param replaceAlbumCustomThumbRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom thumbnail was replaced. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceAlbumCustomThumbCall(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId, ReplaceAlbumCustomThumbRequest replaceAlbumCustomThumbRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replaceAlbumCustomThumbRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceAlbumCustomThumbValidateBeforeCall(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId, ReplaceAlbumCustomThumbRequest replaceAlbumCustomThumbRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling replaceAlbumCustomThumb(Async)");
        }

        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling replaceAlbumCustomThumb(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling replaceAlbumCustomThumb(Async)");
        }

        return replaceAlbumCustomThumbCall(albumId, thumbnailId, userId, replaceAlbumCustomThumbRequest, _callback);

    }

    /**
     * Replace a custom uploaded album thumbnail
     * 
     * @param albumId The ID of the album. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @param replaceAlbumCustomThumbRequest  (optional)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom thumbnail was replaced. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public Picture replaceAlbumCustomThumb(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId, ReplaceAlbumCustomThumbRequest replaceAlbumCustomThumbRequest) throws ApiException {
        ApiResponse<Picture> localVarResp = replaceAlbumCustomThumbWithHttpInfo(albumId, thumbnailId, userId, replaceAlbumCustomThumbRequest);
        return localVarResp.getData();
    }

    /**
     * Replace a custom uploaded album thumbnail
     * 
     * @param albumId The ID of the album. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @param replaceAlbumCustomThumbRequest  (optional)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom thumbnail was replaced. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> replaceAlbumCustomThumbWithHttpInfo(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId, ReplaceAlbumCustomThumbRequest replaceAlbumCustomThumbRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceAlbumCustomThumbValidateBeforeCall(albumId, thumbnailId, userId, replaceAlbumCustomThumbRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace a custom uploaded album thumbnail (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param thumbnailId The ID of the custom thumbnail. (required)
     * @param userId The ID of the user. (required)
     * @param replaceAlbumCustomThumbRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom thumbnail was replaced. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t modify this album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or it doesn&#39;t contain the specified custom thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceAlbumCustomThumbAsync(BigDecimal albumId, BigDecimal thumbnailId, BigDecimal userId, ReplaceAlbumCustomThumbRequest replaceAlbumCustomThumbRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceAlbumCustomThumbValidateBeforeCall(albumId, thumbnailId, userId, replaceAlbumCustomThumbRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
