/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.EditVodBackgroundRequest;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.Picture;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OnDemandBackgroundsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandBackgroundsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandBackgroundsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createVodBackground
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background was created. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVodBackgroundCall(BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/backgrounds"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVodBackgroundValidateBeforeCall(BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling createVodBackground(Async)");
        }

        return createVodBackgroundCall(ondemandId, _callback);

    }

    /**
     * Add a background to an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background was created. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public Picture createVodBackground(BigDecimal ondemandId) throws ApiException {
        ApiResponse<Picture> localVarResp = createVodBackgroundWithHttpInfo(ondemandId);
        return localVarResp.getData();
    }

    /**
     * Add a background to an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background was created. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> createVodBackgroundWithHttpInfo(BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = createVodBackgroundValidateBeforeCall(ondemandId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a background to an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background was created. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVodBackgroundAsync(BigDecimal ondemandId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVodBackgroundValidateBeforeCall(ondemandId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVodBackground
     * @param backgroundId The ID of the background. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The background image was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you are attempting to modify an On Demand page you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or background image exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVodBackgroundCall(BigDecimal backgroundId, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/backgrounds/{background_id}"
            .replace("{" + "background_id" + "}", localVarApiClient.escapeString(backgroundId.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVodBackgroundValidateBeforeCall(BigDecimal backgroundId, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'backgroundId' is set
        if (backgroundId == null) {
            throw new ApiException("Missing the required parameter 'backgroundId' when calling deleteVodBackground(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling deleteVodBackground(Async)");
        }

        return deleteVodBackgroundCall(backgroundId, ondemandId, _callback);

    }

    /**
     * Remove a background from an On Demand page
     * 
     * @param backgroundId The ID of the background. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The background image was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you are attempting to modify an On Demand page you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or background image exists. </td><td>  -  </td></tr>
     </table>
     */
    public Picture deleteVodBackground(BigDecimal backgroundId, BigDecimal ondemandId) throws ApiException {
        ApiResponse<Picture> localVarResp = deleteVodBackgroundWithHttpInfo(backgroundId, ondemandId);
        return localVarResp.getData();
    }

    /**
     * Remove a background from an On Demand page
     * 
     * @param backgroundId The ID of the background. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The background image was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you are attempting to modify an On Demand page you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or background image exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> deleteVodBackgroundWithHttpInfo(BigDecimal backgroundId, BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = deleteVodBackgroundValidateBeforeCall(backgroundId, ondemandId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a background from an On Demand page (asynchronously)
     * 
     * @param backgroundId The ID of the background. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The background image was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If you are attempting to modify an On Demand page you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or background image exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVodBackgroundAsync(BigDecimal backgroundId, BigDecimal ondemandId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVodBackgroundValidateBeforeCall(backgroundId, ondemandId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editVodBackground
     * @param backgroundId The ID of the background. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param editVodBackgroundRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background was edited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or background image exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editVodBackgroundCall(BigDecimal backgroundId, BigDecimal ondemandId, EditVodBackgroundRequest editVodBackgroundRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editVodBackgroundRequest;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/backgrounds/{background_id}"
            .replace("{" + "background_id" + "}", localVarApiClient.escapeString(backgroundId.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editVodBackgroundValidateBeforeCall(BigDecimal backgroundId, BigDecimal ondemandId, EditVodBackgroundRequest editVodBackgroundRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'backgroundId' is set
        if (backgroundId == null) {
            throw new ApiException("Missing the required parameter 'backgroundId' when calling editVodBackground(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling editVodBackground(Async)");
        }

        return editVodBackgroundCall(backgroundId, ondemandId, editVodBackgroundRequest, _callback);

    }

    /**
     * Edit a background of an On Demand page
     * 
     * @param backgroundId The ID of the background. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param editVodBackgroundRequest  (optional)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background was edited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or background image exists. </td><td>  -  </td></tr>
     </table>
     */
    public Picture editVodBackground(BigDecimal backgroundId, BigDecimal ondemandId, EditVodBackgroundRequest editVodBackgroundRequest) throws ApiException {
        ApiResponse<Picture> localVarResp = editVodBackgroundWithHttpInfo(backgroundId, ondemandId, editVodBackgroundRequest);
        return localVarResp.getData();
    }

    /**
     * Edit a background of an On Demand page
     * 
     * @param backgroundId The ID of the background. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param editVodBackgroundRequest  (optional)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background was edited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or background image exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> editVodBackgroundWithHttpInfo(BigDecimal backgroundId, BigDecimal ondemandId, EditVodBackgroundRequest editVodBackgroundRequest) throws ApiException {
        okhttp3.Call localVarCall = editVodBackgroundValidateBeforeCall(backgroundId, ondemandId, editVodBackgroundRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a background of an On Demand page (asynchronously)
     * 
     * @param backgroundId The ID of the background. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param editVodBackgroundRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background was edited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or background image exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editVodBackgroundAsync(BigDecimal backgroundId, BigDecimal ondemandId, EditVodBackgroundRequest editVodBackgroundRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = editVodBackgroundValidateBeforeCall(backgroundId, ondemandId, editVodBackgroundRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodBackground
     * @param backgroundId The ID of the background. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background image was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t view another user&#39;s On Demand page background. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or background image exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodBackgroundCall(BigDecimal backgroundId, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/backgrounds/{background_id}"
            .replace("{" + "background_id" + "}", localVarApiClient.escapeString(backgroundId.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodBackgroundValidateBeforeCall(BigDecimal backgroundId, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'backgroundId' is set
        if (backgroundId == null) {
            throw new ApiException("Missing the required parameter 'backgroundId' when calling getVodBackground(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVodBackground(Async)");
        }

        return getVodBackgroundCall(backgroundId, ondemandId, _callback);

    }

    /**
     * Get a specific background of an On Demand page
     * 
     * @param backgroundId The ID of the background. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background image was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t view another user&#39;s On Demand page background. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or background image exists. </td><td>  -  </td></tr>
     </table>
     */
    public Picture getVodBackground(BigDecimal backgroundId, BigDecimal ondemandId) throws ApiException {
        ApiResponse<Picture> localVarResp = getVodBackgroundWithHttpInfo(backgroundId, ondemandId);
        return localVarResp.getData();
    }

    /**
     * Get a specific background of an On Demand page
     * 
     * @param backgroundId The ID of the background. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background image was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t view another user&#39;s On Demand page background. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or background image exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> getVodBackgroundWithHttpInfo(BigDecimal backgroundId, BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = getVodBackgroundValidateBeforeCall(backgroundId, ondemandId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific background of an On Demand page (asynchronously)
     * 
     * @param backgroundId The ID of the background. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background image was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t view another user&#39;s On Demand page background. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or background image exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodBackgroundAsync(BigDecimal backgroundId, BigDecimal ondemandId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodBackgroundValidateBeforeCall(backgroundId, ondemandId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodBackgrounds
     * @param ondemandId The ID of the On Demand. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background images were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodBackgroundsCall(BigDecimal ondemandId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/backgrounds"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodBackgroundsValidateBeforeCall(BigDecimal ondemandId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVodBackgrounds(Async)");
        }

        return getVodBackgroundsCall(ondemandId, page, perPage, _callback);

    }

    /**
     * Get all the backgrounds of an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background images were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Picture> getVodBackgrounds(BigDecimal ondemandId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Picture>> localVarResp = getVodBackgroundsWithHttpInfo(ondemandId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the backgrounds of an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background images were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Picture>> getVodBackgroundsWithHttpInfo(BigDecimal ondemandId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getVodBackgroundsValidateBeforeCall(ondemandId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the backgrounds of an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The background images were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodBackgroundsAsync(BigDecimal ondemandId, BigDecimal page, BigDecimal perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodBackgroundsValidateBeforeCall(ondemandId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
