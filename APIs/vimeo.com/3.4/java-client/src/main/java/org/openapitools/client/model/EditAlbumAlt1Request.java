/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EditAlbumAlt1Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EditAlbumAlt1Request {
  public static final String SERIALIZED_NAME_BRAND_COLOR = "brand_color";
  @SerializedName(SERIALIZED_NAME_BRAND_COLOR)
  private String brandColor;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_HIDE_NAV = "hide_nav";
  @SerializedName(SERIALIZED_NAME_HIDE_NAV)
  private Boolean hideNav;

  /**
   * The type of layout for presenting the album.
   */
  @JsonAdapter(LayoutEnum.Adapter.class)
  public enum LayoutEnum {
    GRID("grid"),
    
    PLAYER("player");

    private String value;

    LayoutEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LayoutEnum fromValue(String value) {
      for (LayoutEnum b : LayoutEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LayoutEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LayoutEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LayoutEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LayoutEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LayoutEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  private LayoutEnum layout;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  /**
   * The privacy level of the album.
   */
  @JsonAdapter(PrivacyEnum.Adapter.class)
  public enum PrivacyEnum {
    ANYBODY("anybody"),
    
    EMBED_ONLY("embed_only"),
    
    PASSWORD("password");

    private String value;

    PrivacyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivacyEnum fromValue(String value) {
      for (PrivacyEnum b : PrivacyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivacyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivacyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivacyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivacyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrivacyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private PrivacyEnum privacy;

  public static final String SERIALIZED_NAME_REVIEW_MODE = "review_mode";
  @SerializedName(SERIALIZED_NAME_REVIEW_MODE)
  private Boolean reviewMode;

  /**
   * The default sort order of the album&#39;s videos.
   */
  @JsonAdapter(SortEnum.Adapter.class)
  public enum SortEnum {
    ADDED_FIRST("added_first"),
    
    ADDED_LAST("added_last"),
    
    ALPHABETICAL("alphabetical"),
    
    ARRANGED("arranged"),
    
    COMMENTS("comments"),
    
    LIKES("likes"),
    
    NEWEST("newest"),
    
    OLDEST("oldest"),
    
    PLAYS("plays");

    private String value;

    SortEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortEnum fromValue(String value) {
      for (SortEnum b : SortEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SortEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private SortEnum sort;

  /**
   * The color theme of the album.
   */
  @JsonAdapter(ThemeEnum.Adapter.class)
  public enum ThemeEnum {
    DARK("dark"),
    
    STANDARD("standard");

    private String value;

    ThemeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThemeEnum fromValue(String value) {
      for (ThemeEnum b : ThemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThemeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThemeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ThemeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private ThemeEnum theme;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USE_CUSTOM_DOMAIN = "use_custom_domain";
  @SerializedName(SERIALIZED_NAME_USE_CUSTOM_DOMAIN)
  private Boolean useCustomDomain;

  public EditAlbumAlt1Request() {
  }

  public EditAlbumAlt1Request brandColor(String brandColor) {
    this.brandColor = brandColor;
    return this;
  }

  /**
   * The hexadecimal code for the color of the player buttons.
   * @return brandColor
   */
  @javax.annotation.Nullable
  public String getBrandColor() {
    return brandColor;
  }

  public void setBrandColor(String brandColor) {
    this.brandColor = brandColor;
  }


  public EditAlbumAlt1Request description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the album.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EditAlbumAlt1Request domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The custom domain a user has selected for their album.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public EditAlbumAlt1Request hideNav(Boolean hideNav) {
    this.hideNav = hideNav;
    return this;
  }

  /**
   * Whether to hide Vimeo navigation when displaying the album.
   * @return hideNav
   */
  @javax.annotation.Nullable
  public Boolean getHideNav() {
    return hideNav;
  }

  public void setHideNav(Boolean hideNav) {
    this.hideNav = hideNav;
  }


  public EditAlbumAlt1Request layout(LayoutEnum layout) {
    this.layout = layout;
    return this;
  }

  /**
   * The type of layout for presenting the album.
   * @return layout
   */
  @javax.annotation.Nullable
  public LayoutEnum getLayout() {
    return layout;
  }

  public void setLayout(LayoutEnum layout) {
    this.layout = layout;
  }


  public EditAlbumAlt1Request name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the album.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EditAlbumAlt1Request password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The album&#39;s password. Required only if **privacy** is &#x60;password&#x60;.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public EditAlbumAlt1Request privacy(PrivacyEnum privacy) {
    this.privacy = privacy;
    return this;
  }

  /**
   * The privacy level of the album.
   * @return privacy
   */
  @javax.annotation.Nullable
  public PrivacyEnum getPrivacy() {
    return privacy;
  }

  public void setPrivacy(PrivacyEnum privacy) {
    this.privacy = privacy;
  }


  public EditAlbumAlt1Request reviewMode(Boolean reviewMode) {
    this.reviewMode = reviewMode;
    return this;
  }

  /**
   * Whether album videos should use the review mode URL.
   * @return reviewMode
   */
  @javax.annotation.Nullable
  public Boolean getReviewMode() {
    return reviewMode;
  }

  public void setReviewMode(Boolean reviewMode) {
    this.reviewMode = reviewMode;
  }


  public EditAlbumAlt1Request sort(SortEnum sort) {
    this.sort = sort;
    return this;
  }

  /**
   * The default sort order of the album&#39;s videos.
   * @return sort
   */
  @javax.annotation.Nullable
  public SortEnum getSort() {
    return sort;
  }

  public void setSort(SortEnum sort) {
    this.sort = sort;
  }


  public EditAlbumAlt1Request theme(ThemeEnum theme) {
    this.theme = theme;
    return this;
  }

  /**
   * The color theme of the album.
   * @return theme
   */
  @javax.annotation.Nullable
  public ThemeEnum getTheme() {
    return theme;
  }

  public void setTheme(ThemeEnum theme) {
    this.theme = theme;
  }


  public EditAlbumAlt1Request url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The custom Vimeo URL a user has selected for their album.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public EditAlbumAlt1Request useCustomDomain(Boolean useCustomDomain) {
    this.useCustomDomain = useCustomDomain;
    return this;
  }

  /**
   * Whether the user has opted in to use a custom domain for their album.
   * @return useCustomDomain
   */
  @javax.annotation.Nullable
  public Boolean getUseCustomDomain() {
    return useCustomDomain;
  }

  public void setUseCustomDomain(Boolean useCustomDomain) {
    this.useCustomDomain = useCustomDomain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditAlbumAlt1Request editAlbumAlt1Request = (EditAlbumAlt1Request) o;
    return Objects.equals(this.brandColor, editAlbumAlt1Request.brandColor) &&
        Objects.equals(this.description, editAlbumAlt1Request.description) &&
        Objects.equals(this.domain, editAlbumAlt1Request.domain) &&
        Objects.equals(this.hideNav, editAlbumAlt1Request.hideNav) &&
        Objects.equals(this.layout, editAlbumAlt1Request.layout) &&
        Objects.equals(this.name, editAlbumAlt1Request.name) &&
        Objects.equals(this.password, editAlbumAlt1Request.password) &&
        Objects.equals(this.privacy, editAlbumAlt1Request.privacy) &&
        Objects.equals(this.reviewMode, editAlbumAlt1Request.reviewMode) &&
        Objects.equals(this.sort, editAlbumAlt1Request.sort) &&
        Objects.equals(this.theme, editAlbumAlt1Request.theme) &&
        Objects.equals(this.url, editAlbumAlt1Request.url) &&
        Objects.equals(this.useCustomDomain, editAlbumAlt1Request.useCustomDomain);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandColor, description, domain, hideNav, layout, name, password, privacy, reviewMode, sort, theme, url, useCustomDomain);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditAlbumAlt1Request {\n");
    sb.append("    brandColor: ").append(toIndentedString(brandColor)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    hideNav: ").append(toIndentedString(hideNav)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    reviewMode: ").append(toIndentedString(reviewMode)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    useCustomDomain: ").append(toIndentedString(useCustomDomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brand_color");
    openapiFields.add("description");
    openapiFields.add("domain");
    openapiFields.add("hide_nav");
    openapiFields.add("layout");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("privacy");
    openapiFields.add("review_mode");
    openapiFields.add("sort");
    openapiFields.add("theme");
    openapiFields.add("url");
    openapiFields.add("use_custom_domain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EditAlbumAlt1Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EditAlbumAlt1Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditAlbumAlt1Request is not found in the empty JSON string", EditAlbumAlt1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EditAlbumAlt1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EditAlbumAlt1Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("brand_color") != null && !jsonObj.get("brand_color").isJsonNull()) && !jsonObj.get("brand_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_color").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("layout") != null && !jsonObj.get("layout").isJsonNull()) && !jsonObj.get("layout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layout").toString()));
      }
      // validate the optional field `layout`
      if (jsonObj.get("layout") != null && !jsonObj.get("layout").isJsonNull()) {
        LayoutEnum.validateJsonElement(jsonObj.get("layout"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("privacy") != null && !jsonObj.get("privacy").isJsonNull()) && !jsonObj.get("privacy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacy").toString()));
      }
      // validate the optional field `privacy`
      if (jsonObj.get("privacy") != null && !jsonObj.get("privacy").isJsonNull()) {
        PrivacyEnum.validateJsonElement(jsonObj.get("privacy"));
      }
      if ((jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) && !jsonObj.get("sort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }
      // validate the optional field `sort`
      if (jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) {
        SortEnum.validateJsonElement(jsonObj.get("sort"));
      }
      if ((jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) && !jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
      // validate the optional field `theme`
      if (jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) {
        ThemeEnum.validateJsonElement(jsonObj.get("theme"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditAlbumAlt1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditAlbumAlt1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditAlbumAlt1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditAlbumAlt1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<EditAlbumAlt1Request>() {
           @Override
           public void write(JsonWriter out, EditAlbumAlt1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EditAlbumAlt1Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EditAlbumAlt1Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EditAlbumAlt1Request
   * @throws IOException if the JSON string is invalid with respect to EditAlbumAlt1Request
   */
  public static EditAlbumAlt1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditAlbumAlt1Request.class);
  }

  /**
   * Convert an instance of EditAlbumAlt1Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

