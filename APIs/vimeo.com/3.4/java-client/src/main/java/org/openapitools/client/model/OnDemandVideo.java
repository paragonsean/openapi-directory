/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OnDemandVideoBuy;
import org.openapitools.client.model.OnDemandVideoInteractions;
import org.openapitools.client.model.OnDemandVideoMetadata;
import org.openapitools.client.model.OnDemandVideoRent;
import org.openapitools.client.model.Picture;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OnDemandVideo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OnDemandVideo {
  public static final String SERIALIZED_NAME_BUY = "buy";
  @SerializedName(SERIALIZED_NAME_BUY)
  private OnDemandVideoBuy buy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_EPISODE = "episode";
  @SerializedName(SERIALIZED_NAME_EPISODE)
  private BigDecimal episode;

  public static final String SERIALIZED_NAME_INTERACTIONS = "interactions";
  @SerializedName(SERIALIZED_NAME_INTERACTIONS)
  private OnDemandVideoInteractions interactions;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private OnDemandVideoMetadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<String> options = new ArrayList<>();

  public static final String SERIALIZED_NAME_PICTURES = "pictures";
  @SerializedName(SERIALIZED_NAME_PICTURES)
  private Picture pictures;

  public static final String SERIALIZED_NAME_PLAY_PROGRESS = "play_progress";
  @SerializedName(SERIALIZED_NAME_PLAY_PROGRESS)
  private BigDecimal playProgress;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private BigDecimal position;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "release_date";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private String releaseDate;

  public static final String SERIALIZED_NAME_RELEASE_YEAR = "release_year";
  @SerializedName(SERIALIZED_NAME_RELEASE_YEAR)
  private BigDecimal releaseYear;

  public static final String SERIALIZED_NAME_RENT = "rent";
  @SerializedName(SERIALIZED_NAME_RENT)
  private OnDemandVideoRent rent;

  /**
   * The type of the On Demand video:  Option descriptions:  * &#x60;extra&#x60; - The On Demand video is an extra feature.  * &#x60;main&#x60; - The On Demand video is a main feature.  * &#x60;trailer&#x60; - The On Demand video is a trailer. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EXTRA("extra"),
    
    MAIN("main"),
    
    TRAILER("trailer");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public OnDemandVideo() {
  }

  public OnDemandVideo buy(OnDemandVideoBuy buy) {
    this.buy = buy;
    return this;
  }

  /**
   * Get buy
   * @return buy
   */
  @javax.annotation.Nullable
  public OnDemandVideoBuy getBuy() {
    return buy;
  }

  public void setBuy(OnDemandVideoBuy buy) {
    this.buy = buy;
  }


  public OnDemandVideo description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the On Demand video.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OnDemandVideo duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration of the On Demand video.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public OnDemandVideo episode(BigDecimal episode) {
    this.episode = episode;
    return this;
  }

  /**
   * The episode number of the On Demand video.
   * @return episode
   */
  @javax.annotation.Nullable
  public BigDecimal getEpisode() {
    return episode;
  }

  public void setEpisode(BigDecimal episode) {
    this.episode = episode;
  }


  public OnDemandVideo interactions(OnDemandVideoInteractions interactions) {
    this.interactions = interactions;
    return this;
  }

  /**
   * Get interactions
   * @return interactions
   */
  @javax.annotation.Nonnull
  public OnDemandVideoInteractions getInteractions() {
    return interactions;
  }

  public void setInteractions(OnDemandVideoInteractions interactions) {
    this.interactions = interactions;
  }


  public OnDemandVideo link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The link to this video on Vimeo.
   * @return link
   */
  @javax.annotation.Nonnull
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public OnDemandVideo metadata(OnDemandVideoMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public OnDemandVideoMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(OnDemandVideoMetadata metadata) {
    this.metadata = metadata;
  }


  public OnDemandVideo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The title of the On Demand video.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OnDemandVideo options(List<String> options) {
    this.options = options;
    return this;
  }

  public OnDemandVideo addOptionsItem(String optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

  /**
   * An array of HTTP methods permitted on this URI.
   * @return options
   */
  @javax.annotation.Nullable
  public List<String> getOptions() {
    return options;
  }

  public void setOptions(List<String> options) {
    this.options = options;
  }


  public OnDemandVideo pictures(Picture pictures) {
    this.pictures = pictures;
    return this;
  }

  /**
   * The active picture for this video.
   * @return pictures
   */
  @javax.annotation.Nullable
  public Picture getPictures() {
    return pictures;
  }

  public void setPictures(Picture pictures) {
    this.pictures = pictures;
  }


  public OnDemandVideo playProgress(BigDecimal playProgress) {
    this.playProgress = playProgress;
    return this;
  }

  /**
   * The user&#39;s most recent play position in seconds for this video.
   * @return playProgress
   */
  @javax.annotation.Nonnull
  public BigDecimal getPlayProgress() {
    return playProgress;
  }

  public void setPlayProgress(BigDecimal playProgress) {
    this.playProgress = playProgress;
  }


  public OnDemandVideo position(BigDecimal position) {
    this.position = position;
    return this;
  }

  /**
   * Describes the manual position of this video relative to the other videos owned by this On Demand page.
   * @return position
   */
  @javax.annotation.Nullable
  public BigDecimal getPosition() {
    return position;
  }

  public void setPosition(BigDecimal position) {
    this.position = position;
  }


  public OnDemandVideo releaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * The time in ISO 8601 format when the On Demand video was created or published.
   * @return releaseDate
   */
  @javax.annotation.Nullable
  public String getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
  }


  public OnDemandVideo releaseYear(BigDecimal releaseYear) {
    this.releaseYear = releaseYear;
    return this;
  }

  /**
   * The year that this On Demand video was released.
   * @return releaseYear
   */
  @javax.annotation.Nullable
  public BigDecimal getReleaseYear() {
    return releaseYear;
  }

  public void setReleaseYear(BigDecimal releaseYear) {
    this.releaseYear = releaseYear;
  }


  public OnDemandVideo rent(OnDemandVideoRent rent) {
    this.rent = rent;
    return this;
  }

  /**
   * Get rent
   * @return rent
   */
  @javax.annotation.Nullable
  public OnDemandVideoRent getRent() {
    return rent;
  }

  public void setRent(OnDemandVideoRent rent) {
    this.rent = rent;
  }


  public OnDemandVideo type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the On Demand video:  Option descriptions:  * &#x60;extra&#x60; - The On Demand video is an extra feature.  * &#x60;main&#x60; - The On Demand video is a main feature.  * &#x60;trailer&#x60; - The On Demand video is a trailer. 
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public OnDemandVideo uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The video container&#39;s relative URI.
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public OnDemandVideo user(User user) {
    this.user = user;
    return this;
  }

  /**
   * The owner of the video.
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnDemandVideo onDemandVideo = (OnDemandVideo) o;
    return Objects.equals(this.buy, onDemandVideo.buy) &&
        Objects.equals(this.description, onDemandVideo.description) &&
        Objects.equals(this.duration, onDemandVideo.duration) &&
        Objects.equals(this.episode, onDemandVideo.episode) &&
        Objects.equals(this.interactions, onDemandVideo.interactions) &&
        Objects.equals(this.link, onDemandVideo.link) &&
        Objects.equals(this.metadata, onDemandVideo.metadata) &&
        Objects.equals(this.name, onDemandVideo.name) &&
        Objects.equals(this.options, onDemandVideo.options) &&
        Objects.equals(this.pictures, onDemandVideo.pictures) &&
        Objects.equals(this.playProgress, onDemandVideo.playProgress) &&
        Objects.equals(this.position, onDemandVideo.position) &&
        Objects.equals(this.releaseDate, onDemandVideo.releaseDate) &&
        Objects.equals(this.releaseYear, onDemandVideo.releaseYear) &&
        Objects.equals(this.rent, onDemandVideo.rent) &&
        Objects.equals(this.type, onDemandVideo.type) &&
        Objects.equals(this.uri, onDemandVideo.uri) &&
        Objects.equals(this.user, onDemandVideo.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buy, description, duration, episode, interactions, link, metadata, name, options, pictures, playProgress, position, releaseDate, releaseYear, rent, type, uri, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnDemandVideo {\n");
    sb.append("    buy: ").append(toIndentedString(buy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    episode: ").append(toIndentedString(episode)).append("\n");
    sb.append("    interactions: ").append(toIndentedString(interactions)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    pictures: ").append(toIndentedString(pictures)).append("\n");
    sb.append("    playProgress: ").append(toIndentedString(playProgress)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    releaseYear: ").append(toIndentedString(releaseYear)).append("\n");
    sb.append("    rent: ").append(toIndentedString(rent)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buy");
    openapiFields.add("description");
    openapiFields.add("duration");
    openapiFields.add("episode");
    openapiFields.add("interactions");
    openapiFields.add("link");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("options");
    openapiFields.add("pictures");
    openapiFields.add("play_progress");
    openapiFields.add("position");
    openapiFields.add("release_date");
    openapiFields.add("release_year");
    openapiFields.add("rent");
    openapiFields.add("type");
    openapiFields.add("uri");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("buy");
    openapiRequiredFields.add("interactions");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("play_progress");
    openapiRequiredFields.add("release_year");
    openapiRequiredFields.add("rent");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("uri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OnDemandVideo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OnDemandVideo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnDemandVideo is not found in the empty JSON string", OnDemandVideo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OnDemandVideo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OnDemandVideo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OnDemandVideo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `buy`
      OnDemandVideoBuy.validateJsonElement(jsonObj.get("buy"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // validate the required field `interactions`
      OnDemandVideoInteractions.validateJsonElement(jsonObj.get("interactions"));
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the required field `metadata`
      OnDemandVideoMetadata.validateJsonElement(jsonObj.get("metadata"));
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull() && !jsonObj.get("options").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }
      // validate the optional field `pictures`
      if (jsonObj.get("pictures") != null && !jsonObj.get("pictures").isJsonNull()) {
        Picture.validateJsonElement(jsonObj.get("pictures"));
      }
      if ((jsonObj.get("release_date") != null && !jsonObj.get("release_date").isJsonNull()) && !jsonObj.get("release_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_date").toString()));
      }
      // validate the required field `rent`
      OnDemandVideoRent.validateJsonElement(jsonObj.get("rent"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnDemandVideo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnDemandVideo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnDemandVideo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnDemandVideo.class));

       return (TypeAdapter<T>) new TypeAdapter<OnDemandVideo>() {
           @Override
           public void write(JsonWriter out, OnDemandVideo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OnDemandVideo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OnDemandVideo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OnDemandVideo
   * @throws IOException if the JSON string is invalid with respect to OnDemandVideo
   */
  public static OnDemandVideo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnDemandVideo.class);
  }

  /**
   * Convert an instance of OnDemandVideo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

