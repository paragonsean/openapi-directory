/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Album;
import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.ReplaceVideosInAlbumAlt1Request;
import org.openapitools.client.model.SetVideoAsAlbumThumbnailAlt1Request;
import org.openapitools.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlbumsAlbumVideosApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AlbumsAlbumVideosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlbumsAlbumVideosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVideoToAlbum
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoToAlbumCall(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/videos/{video_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoToAlbumValidateBeforeCall(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling addVideoToAlbum(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addVideoToAlbum(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoToAlbum(Async)");
        }

        return addVideoToAlbumCall(albumId, userId, videoId, _callback);

    }

    /**
     * Add a specific video to an album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public void addVideoToAlbum(BigDecimal albumId, BigDecimal userId, BigDecimal videoId) throws ApiException {
        addVideoToAlbumWithHttpInfo(albumId, userId, videoId);
    }

    /**
     * Add a specific video to an album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addVideoToAlbumWithHttpInfo(BigDecimal albumId, BigDecimal userId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = addVideoToAlbumValidateBeforeCall(albumId, userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a specific video to an album (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoToAlbumAsync(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoToAlbumValidateBeforeCall(albumId, userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVideoToAlbumAlt1
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoToAlbumAlt1Call(BigDecimal albumId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}/videos/{video_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoToAlbumAlt1ValidateBeforeCall(BigDecimal albumId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling addVideoToAlbumAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoToAlbumAlt1(Async)");
        }

        return addVideoToAlbumAlt1Call(albumId, videoId, _callback);

    }

    /**
     * Add a specific video to an album
     * 
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public void addVideoToAlbumAlt1(BigDecimal albumId, BigDecimal videoId) throws ApiException {
        addVideoToAlbumAlt1WithHttpInfo(albumId, videoId);
    }

    /**
     * Add a specific video to an album
     * 
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addVideoToAlbumAlt1WithHttpInfo(BigDecimal albumId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = addVideoToAlbumAlt1ValidateBeforeCall(albumId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a specific video to an album (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoToAlbumAlt1Async(BigDecimal albumId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoToAlbumAlt1ValidateBeforeCall(albumId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlbumVideo
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param password The password of the album. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or the video wasn&#39;t found in it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumVideoCall(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/videos/{video_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumVideoValidateBeforeCall(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getAlbumVideo(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAlbumVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAlbumVideo(Async)");
        }

        return getAlbumVideoCall(albumId, userId, videoId, password, _callback);

    }

    /**
     * Get a specific video in an album
     * This method gets a single video from an album. You can use this method to determine whether the album contains the specified video.
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param password The password of the album. (optional)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or the video wasn&#39;t found in it. </td><td>  -  </td></tr>
     </table>
     */
    public Video getAlbumVideo(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, String password) throws ApiException {
        ApiResponse<Video> localVarResp = getAlbumVideoWithHttpInfo(albumId, userId, videoId, password);
        return localVarResp.getData();
    }

    /**
     * Get a specific video in an album
     * This method gets a single video from an album. You can use this method to determine whether the album contains the specified video.
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param password The password of the album. (optional)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or the video wasn&#39;t found in it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> getAlbumVideoWithHttpInfo(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, String password) throws ApiException {
        okhttp3.Call localVarCall = getAlbumVideoValidateBeforeCall(albumId, userId, videoId, password, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific video in an album (asynchronously)
     * This method gets a single video from an album. You can use this method to determine whether the album contains the specified video.
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param password The password of the album. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or the video wasn&#39;t found in it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumVideoAsync(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, String password, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumVideoValidateBeforeCall(albumId, userId, videoId, password, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlbumVideoAlt1
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @param password The password of the album. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or the video wasn&#39;t found in it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumVideoAlt1Call(BigDecimal albumId, BigDecimal videoId, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}/videos/{video_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumVideoAlt1ValidateBeforeCall(BigDecimal albumId, BigDecimal videoId, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getAlbumVideoAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getAlbumVideoAlt1(Async)");
        }

        return getAlbumVideoAlt1Call(albumId, videoId, password, _callback);

    }

    /**
     * Get a specific video in an album
     * This method gets a single video from an album. You can use this method to determine whether the album contains the specified video.
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @param password The password of the album. (optional)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or the video wasn&#39;t found in it. </td><td>  -  </td></tr>
     </table>
     */
    public Video getAlbumVideoAlt1(BigDecimal albumId, BigDecimal videoId, String password) throws ApiException {
        ApiResponse<Video> localVarResp = getAlbumVideoAlt1WithHttpInfo(albumId, videoId, password);
        return localVarResp.getData();
    }

    /**
     * Get a specific video in an album
     * This method gets a single video from an album. You can use this method to determine whether the album contains the specified video.
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @param password The password of the album. (optional)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or the video wasn&#39;t found in it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> getAlbumVideoAlt1WithHttpInfo(BigDecimal albumId, BigDecimal videoId, String password) throws ApiException {
        okhttp3.Call localVarCall = getAlbumVideoAlt1ValidateBeforeCall(albumId, videoId, password, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific video in an album (asynchronously)
     * This method gets a single video from an album. You can use this method to determine whether the album contains the specified video.
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @param password The password of the album. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists, or the video wasn&#39;t found in it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumVideoAlt1Async(BigDecimal albumId, BigDecimal videoId, String password, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumVideoAlt1ValidateBeforeCall(albumId, videoId, password, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlbumVideos
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param containingUri The page containing the video URI. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param password The password of the album. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param weakSearch Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumVideosCall(BigDecimal albumId, BigDecimal userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, String password, BigDecimal perPage, String query, String sort, Boolean weakSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/videos"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containing_uri", containingUri));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (weakSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weak_search", weakSearch));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumVideosValidateBeforeCall(BigDecimal albumId, BigDecimal userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, String password, BigDecimal perPage, String query, String sort, Boolean weakSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getAlbumVideos(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAlbumVideos(Async)");
        }

        return getAlbumVideosCall(albumId, userId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, _callback);

    }

    /**
     * Get all the videos in an album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param containingUri The page containing the video URI. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param password The password of the album. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param weakSearch Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getAlbumVideos(BigDecimal albumId, BigDecimal userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, String password, BigDecimal perPage, String query, String sort, Boolean weakSearch) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getAlbumVideosWithHttpInfo(albumId, userId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch);
        return localVarResp.getData();
    }

    /**
     * Get all the videos in an album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param containingUri The page containing the video URI. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param password The password of the album. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param weakSearch Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getAlbumVideosWithHttpInfo(BigDecimal albumId, BigDecimal userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, String password, BigDecimal perPage, String query, String sort, Boolean weakSearch) throws ApiException {
        okhttp3.Call localVarCall = getAlbumVideosValidateBeforeCall(albumId, userId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos in an album (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param containingUri The page containing the video URI. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param password The password of the album. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param weakSearch Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumVideosAsync(BigDecimal albumId, BigDecimal userId, String containingUri, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, String password, BigDecimal perPage, String query, String sort, Boolean weakSearch, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumVideosValidateBeforeCall(albumId, userId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlbumVideosAlt1
     * @param albumId The ID of the album. (required)
     * @param containingUri The page containing the video URI. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param password The password of the album. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param weakSearch Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumVideosAlt1Call(BigDecimal albumId, String containingUri, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, String password, BigDecimal perPage, String query, String sort, Boolean weakSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}/videos"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (containingUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("containing_uri", containingUri));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (weakSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weak_search", weakSearch));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumVideosAlt1ValidateBeforeCall(BigDecimal albumId, String containingUri, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, String password, BigDecimal perPage, String query, String sort, Boolean weakSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling getAlbumVideosAlt1(Async)");
        }

        return getAlbumVideosAlt1Call(albumId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, _callback);

    }

    /**
     * Get all the videos in an album
     * 
     * @param albumId The ID of the album. (required)
     * @param containingUri The page containing the video URI. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param password The password of the album. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param weakSearch Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getAlbumVideosAlt1(BigDecimal albumId, String containingUri, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, String password, BigDecimal perPage, String query, String sort, Boolean weakSearch) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getAlbumVideosAlt1WithHttpInfo(albumId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch);
        return localVarResp.getData();
    }

    /**
     * Get all the videos in an album
     * 
     * @param albumId The ID of the album. (required)
     * @param containingUri The page containing the video URI. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param password The password of the album. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param weakSearch Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getAlbumVideosAlt1WithHttpInfo(BigDecimal albumId, String containingUri, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, String password, BigDecimal perPage, String query, String sort, Boolean weakSearch) throws ApiException {
        okhttp3.Call localVarCall = getAlbumVideosAlt1ValidateBeforeCall(albumId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos in an album (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param containingUri The page containing the video URI. (optional)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param password The password of the album. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param weakSearch Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video&#39;s name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlbumVideosAlt1Async(BigDecimal albumId, String containingUri, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, String password, BigDecimal perPage, String query, String sort, Boolean weakSearch, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumVideosAlt1ValidateBeforeCall(albumId, containingUri, direction, filter, filterEmbeddable, page, password, perPage, query, sort, weakSearch, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVideoFromAlbum
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVideoFromAlbumCall(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/videos/{video_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVideoFromAlbumValidateBeforeCall(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling removeVideoFromAlbum(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeVideoFromAlbum(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeVideoFromAlbum(Async)");
        }

        return removeVideoFromAlbumCall(albumId, userId, videoId, _callback);

    }

    /**
     * Remove a video from an album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public void removeVideoFromAlbum(BigDecimal albumId, BigDecimal userId, BigDecimal videoId) throws ApiException {
        removeVideoFromAlbumWithHttpInfo(albumId, userId, videoId);
    }

    /**
     * Remove a video from an album
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeVideoFromAlbumWithHttpInfo(BigDecimal albumId, BigDecimal userId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = removeVideoFromAlbumValidateBeforeCall(albumId, userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a video from an album (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVideoFromAlbumAsync(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVideoFromAlbumValidateBeforeCall(albumId, userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVideoFromAlbumAlt1
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVideoFromAlbumAlt1Call(BigDecimal albumId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}/videos/{video_id}"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVideoFromAlbumAlt1ValidateBeforeCall(BigDecimal albumId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling removeVideoFromAlbumAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeVideoFromAlbumAlt1(Async)");
        }

        return removeVideoFromAlbumAlt1Call(albumId, videoId, _callback);

    }

    /**
     * Remove a video from an album
     * 
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public void removeVideoFromAlbumAlt1(BigDecimal albumId, BigDecimal videoId) throws ApiException {
        removeVideoFromAlbumAlt1WithHttpInfo(albumId, videoId);
    }

    /**
     * Remove a video from an album
     * 
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeVideoFromAlbumAlt1WithHttpInfo(BigDecimal albumId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = removeVideoFromAlbumAlt1ValidateBeforeCall(albumId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a video from an album (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The supplied token doesn&#39;t have the proper scopes, or the authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVideoFromAlbumAlt1Async(BigDecimal albumId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVideoFromAlbumAlt1ValidateBeforeCall(albumId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceVideosInAlbum
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param replaceVideosInAlbumAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add videos to albums. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceVideosInAlbumCall(BigDecimal albumId, BigDecimal userId, ReplaceVideosInAlbumAlt1Request replaceVideosInAlbumAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replaceVideosInAlbumAlt1Request;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/videos"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceVideosInAlbumValidateBeforeCall(BigDecimal albumId, BigDecimal userId, ReplaceVideosInAlbumAlt1Request replaceVideosInAlbumAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling replaceVideosInAlbum(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling replaceVideosInAlbum(Async)");
        }

        // verify the required parameter 'replaceVideosInAlbumAlt1Request' is set
        if (replaceVideosInAlbumAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'replaceVideosInAlbumAlt1Request' when calling replaceVideosInAlbum(Async)");
        }

        return replaceVideosInAlbumCall(albumId, userId, replaceVideosInAlbumAlt1Request, _callback);

    }

    /**
     * Replace all the videos in an album
     * This method replaces all the existing videos in an album with one or more videos.
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param replaceVideosInAlbumAlt1Request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add videos to albums. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public void replaceVideosInAlbum(BigDecimal albumId, BigDecimal userId, ReplaceVideosInAlbumAlt1Request replaceVideosInAlbumAlt1Request) throws ApiException {
        replaceVideosInAlbumWithHttpInfo(albumId, userId, replaceVideosInAlbumAlt1Request);
    }

    /**
     * Replace all the videos in an album
     * This method replaces all the existing videos in an album with one or more videos.
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param replaceVideosInAlbumAlt1Request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add videos to albums. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replaceVideosInAlbumWithHttpInfo(BigDecimal albumId, BigDecimal userId, ReplaceVideosInAlbumAlt1Request replaceVideosInAlbumAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = replaceVideosInAlbumValidateBeforeCall(albumId, userId, replaceVideosInAlbumAlt1Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Replace all the videos in an album (asynchronously)
     * This method replaces all the existing videos in an album with one or more videos.
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param replaceVideosInAlbumAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add videos to albums. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceVideosInAlbumAsync(BigDecimal albumId, BigDecimal userId, ReplaceVideosInAlbumAlt1Request replaceVideosInAlbumAlt1Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceVideosInAlbumValidateBeforeCall(albumId, userId, replaceVideosInAlbumAlt1Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceVideosInAlbumAlt1
     * @param albumId The ID of the album. (required)
     * @param replaceVideosInAlbumAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add videos to albums. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceVideosInAlbumAlt1Call(BigDecimal albumId, ReplaceVideosInAlbumAlt1Request replaceVideosInAlbumAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replaceVideosInAlbumAlt1Request;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}/videos"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceVideosInAlbumAlt1ValidateBeforeCall(BigDecimal albumId, ReplaceVideosInAlbumAlt1Request replaceVideosInAlbumAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling replaceVideosInAlbumAlt1(Async)");
        }

        // verify the required parameter 'replaceVideosInAlbumAlt1Request' is set
        if (replaceVideosInAlbumAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'replaceVideosInAlbumAlt1Request' when calling replaceVideosInAlbumAlt1(Async)");
        }

        return replaceVideosInAlbumAlt1Call(albumId, replaceVideosInAlbumAlt1Request, _callback);

    }

    /**
     * Replace all the videos in an album
     * This method replaces all the existing videos in an album with one or more videos.
     * @param albumId The ID of the album. (required)
     * @param replaceVideosInAlbumAlt1Request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add videos to albums. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public void replaceVideosInAlbumAlt1(BigDecimal albumId, ReplaceVideosInAlbumAlt1Request replaceVideosInAlbumAlt1Request) throws ApiException {
        replaceVideosInAlbumAlt1WithHttpInfo(albumId, replaceVideosInAlbumAlt1Request);
    }

    /**
     * Replace all the videos in an album
     * This method replaces all the existing videos in an album with one or more videos.
     * @param albumId The ID of the album. (required)
     * @param replaceVideosInAlbumAlt1Request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add videos to albums. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replaceVideosInAlbumAlt1WithHttpInfo(BigDecimal albumId, ReplaceVideosInAlbumAlt1Request replaceVideosInAlbumAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = replaceVideosInAlbumAlt1ValidateBeforeCall(albumId, replaceVideosInAlbumAlt1Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Replace all the videos in an album (asynchronously)
     * This method replaces all the existing videos in an album with one or more videos.
     * @param albumId The ID of the album. (required)
     * @param replaceVideosInAlbumAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t add videos to albums. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such album exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceVideosInAlbumAlt1Async(BigDecimal albumId, ReplaceVideosInAlbumAlt1Request replaceVideosInAlbumAlt1Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceVideosInAlbumAlt1ValidateBeforeCall(albumId, replaceVideosInAlbumAlt1Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setVideoAsAlbumThumbnail
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param setVideoAsAlbumThumbnailAlt1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was updated with a new thumbnail. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3429: The authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such album, or user, or video exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4016: Unexpected error while setting thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setVideoAsAlbumThumbnailCall(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, SetVideoAsAlbumThumbnailAlt1Request setVideoAsAlbumThumbnailAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setVideoAsAlbumThumbnailAlt1Request;

        // create path and map variables
        String localVarPath = "/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setVideoAsAlbumThumbnailValidateBeforeCall(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, SetVideoAsAlbumThumbnailAlt1Request setVideoAsAlbumThumbnailAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling setVideoAsAlbumThumbnail(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setVideoAsAlbumThumbnail(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling setVideoAsAlbumThumbnail(Async)");
        }

        return setVideoAsAlbumThumbnailCall(albumId, userId, videoId, setVideoAsAlbumThumbnailAlt1Request, _callback);

    }

    /**
     * Set a video as the album thumbnail
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param setVideoAsAlbumThumbnailAlt1Request  (optional)
     * @return Album
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was updated with a new thumbnail. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3429: The authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such album, or user, or video exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4016: Unexpected error while setting thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public Album setVideoAsAlbumThumbnail(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, SetVideoAsAlbumThumbnailAlt1Request setVideoAsAlbumThumbnailAlt1Request) throws ApiException {
        ApiResponse<Album> localVarResp = setVideoAsAlbumThumbnailWithHttpInfo(albumId, userId, videoId, setVideoAsAlbumThumbnailAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Set a video as the album thumbnail
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param setVideoAsAlbumThumbnailAlt1Request  (optional)
     * @return ApiResponse&lt;Album&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was updated with a new thumbnail. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3429: The authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such album, or user, or video exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4016: Unexpected error while setting thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Album> setVideoAsAlbumThumbnailWithHttpInfo(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, SetVideoAsAlbumThumbnailAlt1Request setVideoAsAlbumThumbnailAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = setVideoAsAlbumThumbnailValidateBeforeCall(albumId, userId, videoId, setVideoAsAlbumThumbnailAlt1Request, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set a video as the album thumbnail (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param setVideoAsAlbumThumbnailAlt1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was updated with a new thumbnail. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3429: The authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such album, or user, or video exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4016: Unexpected error while setting thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setVideoAsAlbumThumbnailAsync(BigDecimal albumId, BigDecimal userId, BigDecimal videoId, SetVideoAsAlbumThumbnailAlt1Request setVideoAsAlbumThumbnailAlt1Request, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = setVideoAsAlbumThumbnailValidateBeforeCall(albumId, userId, videoId, setVideoAsAlbumThumbnailAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setVideoAsAlbumThumbnailAlt1
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @param setVideoAsAlbumThumbnailAlt1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was updated with a new thumbnail. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3429: The authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such album, or user, or video exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4016: Unexpected error while setting thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setVideoAsAlbumThumbnailAlt1Call(BigDecimal albumId, BigDecimal videoId, SetVideoAsAlbumThumbnailAlt1Request setVideoAsAlbumThumbnailAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setVideoAsAlbumThumbnailAlt1Request;

        // create path and map variables
        String localVarPath = "/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail"
            .replace("{" + "album_id" + "}", localVarApiClient.escapeString(albumId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setVideoAsAlbumThumbnailAlt1ValidateBeforeCall(BigDecimal albumId, BigDecimal videoId, SetVideoAsAlbumThumbnailAlt1Request setVideoAsAlbumThumbnailAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'albumId' is set
        if (albumId == null) {
            throw new ApiException("Missing the required parameter 'albumId' when calling setVideoAsAlbumThumbnailAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling setVideoAsAlbumThumbnailAlt1(Async)");
        }

        return setVideoAsAlbumThumbnailAlt1Call(albumId, videoId, setVideoAsAlbumThumbnailAlt1Request, _callback);

    }

    /**
     * Set a video as the album thumbnail
     * 
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @param setVideoAsAlbumThumbnailAlt1Request  (optional)
     * @return Album
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was updated with a new thumbnail. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3429: The authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such album, or user, or video exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4016: Unexpected error while setting thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public Album setVideoAsAlbumThumbnailAlt1(BigDecimal albumId, BigDecimal videoId, SetVideoAsAlbumThumbnailAlt1Request setVideoAsAlbumThumbnailAlt1Request) throws ApiException {
        ApiResponse<Album> localVarResp = setVideoAsAlbumThumbnailAlt1WithHttpInfo(albumId, videoId, setVideoAsAlbumThumbnailAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Set a video as the album thumbnail
     * 
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @param setVideoAsAlbumThumbnailAlt1Request  (optional)
     * @return ApiResponse&lt;Album&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was updated with a new thumbnail. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3429: The authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such album, or user, or video exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4016: Unexpected error while setting thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Album> setVideoAsAlbumThumbnailAlt1WithHttpInfo(BigDecimal albumId, BigDecimal videoId, SetVideoAsAlbumThumbnailAlt1Request setVideoAsAlbumThumbnailAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = setVideoAsAlbumThumbnailAlt1ValidateBeforeCall(albumId, videoId, setVideoAsAlbumThumbnailAlt1Request, null);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set a video as the album thumbnail (asynchronously)
     * 
     * @param albumId The ID of the album. (required)
     * @param videoId The ID of the video. (required)
     * @param setVideoAsAlbumThumbnailAlt1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The album was updated with a new thumbnail. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3429: The authenticated user can&#39;t edit the album. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such album, or user, or video exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error code 4016: Unexpected error while setting thumbnail. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setVideoAsAlbumThumbnailAlt1Async(BigDecimal albumId, BigDecimal videoId, SetVideoAsAlbumThumbnailAlt1Request setVideoAsAlbumThumbnailAlt1Request, final ApiCallback<Album> _callback) throws ApiException {

        okhttp3.Call localVarCall = setVideoAsAlbumThumbnailAlt1ValidateBeforeCall(albumId, videoId, setVideoAsAlbumThumbnailAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Album>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
