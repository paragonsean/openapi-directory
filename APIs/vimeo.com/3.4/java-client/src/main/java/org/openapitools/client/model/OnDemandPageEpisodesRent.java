/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OnDemandPageEpisodesRent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OnDemandPageEpisodesRent {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  /**
   * The rental period for the video:  Option descriptions:  * &#x60;1 day&#x60; - The rental period is one day.  * &#x60;1 month&#x60; - The rental period is one month.  * &#x60;1 week&#x60; - The rental period is one week.  * &#x60;1 year&#x60; - The rental period is one year.  * &#x60;2 day&#x60; - The rental period is two days.  * &#x60;24 hour&#x60; - The rental period is 24 hours.  * &#x60;3 day&#x60; - The rental period is three days.  * &#x60;3 month&#x60; - The rental period is three months.  * &#x60;30 day&#x60; - The rental period is 30 days.  * &#x60;48 hour&#x60; - The rental period is 48 hours.  * &#x60;6 month&#x60; - The rental period is six months.  * &#x60;60 day&#x60; - The rental period is 60 days.  * &#x60;7 day&#x60; - The rental period is 7 days.  * &#x60;72 hour&#x60; - The rental period is 72 hours. 
   */
  @JsonAdapter(PeriodEnum.Adapter.class)
  public enum PeriodEnum {
    _1_DAY("1 day"),
    
    _1_MONTH("1 month"),
    
    _1_WEEK("1 week"),
    
    _1_YEAR("1 year"),
    
    _2_DAY("2 day"),
    
    _24_HOUR("24 hour"),
    
    _3_DAY("3 day"),
    
    _3_MONTH("3 month"),
    
    _30_DAY("30 day"),
    
    _48_HOUR("48 hour"),
    
    _6_MONTH("6 month"),
    
    _60_DAY("60 day"),
    
    _7_DAY("7 day"),
    
    _72_HOUR("72 hour");

    private String value;

    PeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeriodEnum fromValue(String value) {
      for (PeriodEnum b : PeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeriodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PeriodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private PeriodEnum period;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public OnDemandPageEpisodesRent() {
  }

  public OnDemandPageEpisodesRent active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Whether all the videos on this On Demand page can be rented as a whole.
   * @return active
   */
  @javax.annotation.Nonnull
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public OnDemandPageEpisodesRent period(PeriodEnum period) {
    this.period = period;
    return this;
  }

  /**
   * The rental period for the video:  Option descriptions:  * &#x60;1 day&#x60; - The rental period is one day.  * &#x60;1 month&#x60; - The rental period is one month.  * &#x60;1 week&#x60; - The rental period is one week.  * &#x60;1 year&#x60; - The rental period is one year.  * &#x60;2 day&#x60; - The rental period is two days.  * &#x60;24 hour&#x60; - The rental period is 24 hours.  * &#x60;3 day&#x60; - The rental period is three days.  * &#x60;3 month&#x60; - The rental period is three months.  * &#x60;30 day&#x60; - The rental period is 30 days.  * &#x60;48 hour&#x60; - The rental period is 48 hours.  * &#x60;6 month&#x60; - The rental period is six months.  * &#x60;60 day&#x60; - The rental period is 60 days.  * &#x60;7 day&#x60; - The rental period is 7 days.  * &#x60;72 hour&#x60; - The rental period is 72 hours. 
   * @return period
   */
  @javax.annotation.Nullable
  public PeriodEnum getPeriod() {
    return period;
  }

  public void setPeriod(PeriodEnum period) {
    this.period = period;
  }


  public OnDemandPageEpisodesRent price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * The default price to rent an episode.
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnDemandPageEpisodesRent onDemandPageEpisodesRent = (OnDemandPageEpisodesRent) o;
    return Objects.equals(this.active, onDemandPageEpisodesRent.active) &&
        Objects.equals(this.period, onDemandPageEpisodesRent.period) &&
        Objects.equals(this.price, onDemandPageEpisodesRent.price);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, period, price);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnDemandPageEpisodesRent {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("period");
    openapiFields.add("price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("active");
    openapiRequiredFields.add("period");
    openapiRequiredFields.add("price");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OnDemandPageEpisodesRent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OnDemandPageEpisodesRent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnDemandPageEpisodesRent is not found in the empty JSON string", OnDemandPageEpisodesRent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OnDemandPageEpisodesRent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OnDemandPageEpisodesRent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OnDemandPageEpisodesRent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("period") != null && !jsonObj.get("period").isJsonNull()) && !jsonObj.get("period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period").toString()));
      }
      // validate the required field `period`
      PeriodEnum.validateJsonElement(jsonObj.get("period"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnDemandPageEpisodesRent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnDemandPageEpisodesRent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnDemandPageEpisodesRent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnDemandPageEpisodesRent.class));

       return (TypeAdapter<T>) new TypeAdapter<OnDemandPageEpisodesRent>() {
           @Override
           public void write(JsonWriter out, OnDemandPageEpisodesRent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OnDemandPageEpisodesRent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OnDemandPageEpisodesRent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OnDemandPageEpisodesRent
   * @throws IOException if the JSON string is invalid with respect to OnDemandPageEpisodesRent
   */
  public static OnDemandPageEpisodesRent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnDemandPageEpisodesRent.class);
  }

  /**
   * Convert an instance of OnDemandPageEpisodesRent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

