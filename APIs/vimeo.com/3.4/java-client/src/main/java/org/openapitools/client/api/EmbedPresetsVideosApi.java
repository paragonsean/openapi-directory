/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.Picture;
import org.openapitools.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmbedPresetsVideosApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmbedPresetsVideosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmbedPresetsVideosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVideoEmbedPreset
     * @param presetId The ID of the preset. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The embed preset was assigned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoEmbedPresetCall(BigDecimal presetId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/presets/{preset_id}"
            .replace("{" + "preset_id" + "}", localVarApiClient.escapeString(presetId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoEmbedPresetValidateBeforeCall(BigDecimal presetId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'presetId' is set
        if (presetId == null) {
            throw new ApiException("Missing the required parameter 'presetId' when calling addVideoEmbedPreset(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoEmbedPreset(Async)");
        }

        return addVideoEmbedPresetCall(presetId, videoId, _callback);

    }

    /**
     * Add an embed preset to a video
     * 
     * @param presetId The ID of the preset. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The embed preset was assigned. </td><td>  -  </td></tr>
     </table>
     */
    public void addVideoEmbedPreset(BigDecimal presetId, BigDecimal videoId) throws ApiException {
        addVideoEmbedPresetWithHttpInfo(presetId, videoId);
    }

    /**
     * Add an embed preset to a video
     * 
     * @param presetId The ID of the preset. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The embed preset was assigned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addVideoEmbedPresetWithHttpInfo(BigDecimal presetId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = addVideoEmbedPresetValidateBeforeCall(presetId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add an embed preset to a video (asynchronously)
     * 
     * @param presetId The ID of the preset. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The embed preset was assigned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoEmbedPresetAsync(BigDecimal presetId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoEmbedPresetValidateBeforeCall(presetId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVideoCustomLogo
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Standard request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the user is attempting to upload pictures for another user&#39;s videos. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVideoCustomLogoCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/timelinethumbnails"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVideoCustomLogoValidateBeforeCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createVideoCustomLogo(Async)");
        }

        return createVideoCustomLogoCall(videoId, _callback);

    }

    /**
     * Add a new custom logo to a video
     * 
     * @param videoId The ID of the video. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Standard request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the user is attempting to upload pictures for another user&#39;s videos. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public Picture createVideoCustomLogo(BigDecimal videoId) throws ApiException {
        ApiResponse<Picture> localVarResp = createVideoCustomLogoWithHttpInfo(videoId);
        return localVarResp.getData();
    }

    /**
     * Add a new custom logo to a video
     * 
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Standard request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the user is attempting to upload pictures for another user&#39;s videos. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> createVideoCustomLogoWithHttpInfo(BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = createVideoCustomLogoValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new custom logo to a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Standard request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the user is attempting to upload pictures for another user&#39;s videos. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVideoCustomLogoAsync(BigDecimal videoId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVideoCustomLogoValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVideoEmbedPreset
     * @param presetId The ID of the preset. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The embed preset was unassigned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or embed preset exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoEmbedPresetCall(BigDecimal presetId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/presets/{preset_id}"
            .replace("{" + "preset_id" + "}", localVarApiClient.escapeString(presetId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoEmbedPresetValidateBeforeCall(BigDecimal presetId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'presetId' is set
        if (presetId == null) {
            throw new ApiException("Missing the required parameter 'presetId' when calling deleteVideoEmbedPreset(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteVideoEmbedPreset(Async)");
        }

        return deleteVideoEmbedPresetCall(presetId, videoId, _callback);

    }

    /**
     * Remove an embed preset from a video
     * 
     * @param presetId The ID of the preset. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The embed preset was unassigned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or embed preset exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVideoEmbedPreset(BigDecimal presetId, BigDecimal videoId) throws ApiException {
        deleteVideoEmbedPresetWithHttpInfo(presetId, videoId);
    }

    /**
     * Remove an embed preset from a video
     * 
     * @param presetId The ID of the preset. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The embed preset was unassigned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or embed preset exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVideoEmbedPresetWithHttpInfo(BigDecimal presetId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoEmbedPresetValidateBeforeCall(presetId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an embed preset from a video (asynchronously)
     * 
     * @param presetId The ID of the preset. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The embed preset was unassigned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or embed preset exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoEmbedPresetAsync(BigDecimal presetId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoEmbedPresetValidateBeforeCall(presetId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmbedPresetVideos
     * @param presetId The ID of the preset. (required)
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbedPresetVideosCall(BigDecimal presetId, BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/presets/{preset_id}/videos"
            .replace("{" + "preset_id" + "}", localVarApiClient.escapeString(presetId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmbedPresetVideosValidateBeforeCall(BigDecimal presetId, BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'presetId' is set
        if (presetId == null) {
            throw new ApiException("Missing the required parameter 'presetId' when calling getEmbedPresetVideos(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getEmbedPresetVideos(Async)");
        }

        return getEmbedPresetVideosCall(presetId, userId, page, perPage, _callback);

    }

    /**
     * Get all the videos that have been added to an embed preset
     * 
     * @param presetId The ID of the preset. (required)
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getEmbedPresetVideos(BigDecimal presetId, BigDecimal userId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getEmbedPresetVideosWithHttpInfo(presetId, userId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the videos that have been added to an embed preset
     * 
     * @param presetId The ID of the preset. (required)
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getEmbedPresetVideosWithHttpInfo(BigDecimal presetId, BigDecimal userId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getEmbedPresetVideosValidateBeforeCall(presetId, userId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos that have been added to an embed preset (asynchronously)
     * 
     * @param presetId The ID of the preset. (required)
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbedPresetVideosAsync(BigDecimal presetId, BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmbedPresetVideosValidateBeforeCall(presetId, userId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmbedPresetVideosAlt1
     * @param presetId The ID of the preset. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbedPresetVideosAlt1Call(BigDecimal presetId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/presets/{preset_id}/videos"
            .replace("{" + "preset_id" + "}", localVarApiClient.escapeString(presetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmbedPresetVideosAlt1ValidateBeforeCall(BigDecimal presetId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'presetId' is set
        if (presetId == null) {
            throw new ApiException("Missing the required parameter 'presetId' when calling getEmbedPresetVideosAlt1(Async)");
        }

        return getEmbedPresetVideosAlt1Call(presetId, page, perPage, _callback);

    }

    /**
     * Get all the videos that have been added to an embed preset
     * 
     * @param presetId The ID of the preset. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getEmbedPresetVideosAlt1(BigDecimal presetId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getEmbedPresetVideosAlt1WithHttpInfo(presetId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the videos that have been added to an embed preset
     * 
     * @param presetId The ID of the preset. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getEmbedPresetVideosAlt1WithHttpInfo(BigDecimal presetId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getEmbedPresetVideosAlt1ValidateBeforeCall(presetId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos that have been added to an embed preset (asynchronously)
     * 
     * @param presetId The ID of the preset. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbedPresetVideosAlt1Async(BigDecimal presetId, BigDecimal page, BigDecimal perPage, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmbedPresetVideosAlt1ValidateBeforeCall(presetId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoCustomLogo
     * @param thumbnailId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the user isn&#39;t permitted to view this custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCustomLogoCall(BigDecimal thumbnailId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/timelinethumbnails/{thumbnail_id}"
            .replace("{" + "thumbnail_id" + "}", localVarApiClient.escapeString(thumbnailId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoCustomLogoValidateBeforeCall(BigDecimal thumbnailId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thumbnailId' is set
        if (thumbnailId == null) {
            throw new ApiException("Missing the required parameter 'thumbnailId' when calling getVideoCustomLogo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoCustomLogo(Async)");
        }

        return getVideoCustomLogoCall(thumbnailId, videoId, _callback);

    }

    /**
     * Get a custom video logo
     * 
     * @param thumbnailId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the user isn&#39;t permitted to view this custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public Picture getVideoCustomLogo(BigDecimal thumbnailId, BigDecimal videoId) throws ApiException {
        ApiResponse<Picture> localVarResp = getVideoCustomLogoWithHttpInfo(thumbnailId, videoId);
        return localVarResp.getData();
    }

    /**
     * Get a custom video logo
     * 
     * @param thumbnailId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the user isn&#39;t permitted to view this custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> getVideoCustomLogoWithHttpInfo(BigDecimal thumbnailId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = getVideoCustomLogoValidateBeforeCall(thumbnailId, videoId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a custom video logo (asynchronously)
     * 
     * @param thumbnailId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If the user isn&#39;t permitted to view this custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCustomLogoAsync(BigDecimal thumbnailId, BigDecimal videoId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoCustomLogoValidateBeforeCall(thumbnailId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoEmbedPreset
     * @param presetId The ID of the preset. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The embed presets exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or embed preset exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoEmbedPresetCall(BigDecimal presetId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/presets/{preset_id}"
            .replace("{" + "preset_id" + "}", localVarApiClient.escapeString(presetId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoEmbedPresetValidateBeforeCall(BigDecimal presetId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'presetId' is set
        if (presetId == null) {
            throw new ApiException("Missing the required parameter 'presetId' when calling getVideoEmbedPreset(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoEmbedPreset(Async)");
        }

        return getVideoEmbedPresetCall(presetId, videoId, _callback);

    }

    /**
     * Check if an embed preset has been added to a video
     * 
     * @param presetId The ID of the preset. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The embed presets exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or embed preset exists. </td><td>  -  </td></tr>
     </table>
     */
    public void getVideoEmbedPreset(BigDecimal presetId, BigDecimal videoId) throws ApiException {
        getVideoEmbedPresetWithHttpInfo(presetId, videoId);
    }

    /**
     * Check if an embed preset has been added to a video
     * 
     * @param presetId The ID of the preset. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The embed presets exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or embed preset exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getVideoEmbedPresetWithHttpInfo(BigDecimal presetId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = getVideoEmbedPresetValidateBeforeCall(presetId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if an embed preset has been added to a video (asynchronously)
     * 
     * @param presetId The ID of the preset. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The embed presets exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video or embed preset exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoEmbedPresetAsync(BigDecimal presetId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoEmbedPresetValidateBeforeCall(presetId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
