/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the user&#39;s upload space remaining for the current period.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserUploadQuotaSpace {
  public static final String SERIALIZED_NAME_FREE = "free";
  @SerializedName(SERIALIZED_NAME_FREE)
  private BigDecimal free;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private BigDecimal max;

  /**
   * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
   */
  @JsonAdapter(ShowingEnum.Adapter.class)
  public enum ShowingEnum {
    LIFETIME("lifetime"),
    
    PERIODIC("periodic");

    private String value;

    ShowingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShowingEnum fromValue(String value) {
      for (ShowingEnum b : ShowingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShowingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShowingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShowingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShowingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShowingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHOWING = "showing";
  @SerializedName(SERIALIZED_NAME_SHOWING)
  private ShowingEnum showing;

  public static final String SERIALIZED_NAME_USED = "used";
  @SerializedName(SERIALIZED_NAME_USED)
  private BigDecimal used;

  public UserUploadQuotaSpace() {
  }

  public UserUploadQuotaSpace free(BigDecimal free) {
    this.free = free;
    return this;
  }

  /**
   * The number of bytes remaining in your upload quota.
   * @return free
   */
  @javax.annotation.Nonnull
  public BigDecimal getFree() {
    return free;
  }

  public void setFree(BigDecimal free) {
    this.free = free;
  }


  public UserUploadQuotaSpace max(BigDecimal max) {
    this.max = max;
    return this;
  }

  /**
   * The maximum number of bytes allotted to your upload quota.
   * @return max
   */
  @javax.annotation.Nullable
  public BigDecimal getMax() {
    return max;
  }

  public void setMax(BigDecimal max) {
    this.max = max;
  }


  public UserUploadQuotaSpace showing(ShowingEnum showing) {
    this.showing = showing;
    return this;
  }

  /**
   * Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
   * @return showing
   */
  @javax.annotation.Nonnull
  public ShowingEnum getShowing() {
    return showing;
  }

  public void setShowing(ShowingEnum showing) {
    this.showing = showing;
  }


  public UserUploadQuotaSpace used(BigDecimal used) {
    this.used = used;
    return this;
  }

  /**
   * The number of bytes that you&#39;ve already uploaded against your quota.
   * @return used
   */
  @javax.annotation.Nonnull
  public BigDecimal getUsed() {
    return used;
  }

  public void setUsed(BigDecimal used) {
    this.used = used;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserUploadQuotaSpace userUploadQuotaSpace = (UserUploadQuotaSpace) o;
    return Objects.equals(this.free, userUploadQuotaSpace.free) &&
        Objects.equals(this.max, userUploadQuotaSpace.max) &&
        Objects.equals(this.showing, userUploadQuotaSpace.showing) &&
        Objects.equals(this.used, userUploadQuotaSpace.used);
  }

  @Override
  public int hashCode() {
    return Objects.hash(free, max, showing, used);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserUploadQuotaSpace {\n");
    sb.append("    free: ").append(toIndentedString(free)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    showing: ").append(toIndentedString(showing)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("free");
    openapiFields.add("max");
    openapiFields.add("showing");
    openapiFields.add("used");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("free");
    openapiRequiredFields.add("max");
    openapiRequiredFields.add("showing");
    openapiRequiredFields.add("used");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserUploadQuotaSpace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserUploadQuotaSpace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserUploadQuotaSpace is not found in the empty JSON string", UserUploadQuotaSpace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserUploadQuotaSpace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserUploadQuotaSpace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserUploadQuotaSpace.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("showing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `showing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("showing").toString()));
      }
      // validate the required field `showing`
      ShowingEnum.validateJsonElement(jsonObj.get("showing"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserUploadQuotaSpace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserUploadQuotaSpace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserUploadQuotaSpace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserUploadQuotaSpace.class));

       return (TypeAdapter<T>) new TypeAdapter<UserUploadQuotaSpace>() {
           @Override
           public void write(JsonWriter out, UserUploadQuotaSpace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserUploadQuotaSpace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserUploadQuotaSpace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserUploadQuotaSpace
   * @throws IOException if the JSON string is invalid with respect to UserUploadQuotaSpace
   */
  public static UserUploadQuotaSpace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserUploadQuotaSpace.class);
  }

  /**
   * Convert an instance of UserUploadQuotaSpace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

