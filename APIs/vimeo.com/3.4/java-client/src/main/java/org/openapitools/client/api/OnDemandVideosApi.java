/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddVideoToVodRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.OnDemandVideo;
import org.openapitools.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OnDemandVideosApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandVideosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandVideosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVideoToVod
     * @param ondemandId The ID of the On Demand. (required)
     * @param videoId The ID of the video. (required)
     * @param addVideoToVodRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t add the video to this On Demand page. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoToVodCall(BigDecimal ondemandId, BigDecimal videoId, AddVideoToVodRequest addVideoToVodRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addVideoToVodRequest;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/videos/{video_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.ondemand.video+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoToVodValidateBeforeCall(BigDecimal ondemandId, BigDecimal videoId, AddVideoToVodRequest addVideoToVodRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling addVideoToVod(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoToVod(Async)");
        }

        // verify the required parameter 'addVideoToVodRequest' is set
        if (addVideoToVodRequest == null) {
            throw new ApiException("Missing the required parameter 'addVideoToVodRequest' when calling addVideoToVod(Async)");
        }

        return addVideoToVodCall(ondemandId, videoId, addVideoToVodRequest, _callback);

    }

    /**
     * Add a video to an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param videoId The ID of the video. (required)
     * @param addVideoToVodRequest  (required)
     * @return OnDemandVideo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t add the video to this On Demand page. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandVideo addVideoToVod(BigDecimal ondemandId, BigDecimal videoId, AddVideoToVodRequest addVideoToVodRequest) throws ApiException {
        ApiResponse<OnDemandVideo> localVarResp = addVideoToVodWithHttpInfo(ondemandId, videoId, addVideoToVodRequest);
        return localVarResp.getData();
    }

    /**
     * Add a video to an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param videoId The ID of the video. (required)
     * @param addVideoToVodRequest  (required)
     * @return ApiResponse&lt;OnDemandVideo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t add the video to this On Demand page. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandVideo> addVideoToVodWithHttpInfo(BigDecimal ondemandId, BigDecimal videoId, AddVideoToVodRequest addVideoToVodRequest) throws ApiException {
        okhttp3.Call localVarCall = addVideoToVodValidateBeforeCall(ondemandId, videoId, addVideoToVodRequest, null);
        Type localVarReturnType = new TypeToken<OnDemandVideo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a video to an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param videoId The ID of the video. (required)
     * @param addVideoToVodRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You can&#39;t add the video to this On Demand page. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoToVodAsync(BigDecimal ondemandId, BigDecimal videoId, AddVideoToVodRequest addVideoToVodRequest, final ApiCallback<OnDemandVideo> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoToVodValidateBeforeCall(ondemandId, videoId, addVideoToVodRequest, _callback);
        Type localVarReturnType = new TypeToken<OnDemandVideo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVideoFromVod
     * @param ondemandId The ID of the On Demand. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoFromVodCall(BigDecimal ondemandId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/videos/{video_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoFromVodValidateBeforeCall(BigDecimal ondemandId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling deleteVideoFromVod(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteVideoFromVod(Async)");
        }

        return deleteVideoFromVodCall(ondemandId, videoId, _callback);

    }

    /**
     * Remove a video from an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVideoFromVod(BigDecimal ondemandId, BigDecimal videoId) throws ApiException {
        deleteVideoFromVodWithHttpInfo(ondemandId, videoId);
    }

    /**
     * Remove a video from an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVideoFromVodWithHttpInfo(BigDecimal ondemandId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoFromVodValidateBeforeCall(ondemandId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a video from an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoFromVodAsync(BigDecimal ondemandId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoFromVodValidateBeforeCall(ondemandId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodVideo
     * @param ondemandId The ID of the On Demand. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video is on the On Demand page. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodVideoCall(BigDecimal ondemandId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/videos/{video_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodVideoValidateBeforeCall(BigDecimal ondemandId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVodVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVodVideo(Async)");
        }

        return getVodVideoCall(ondemandId, videoId, _callback);

    }

    /**
     * Get a specific video on an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param videoId The ID of the video. (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video is on the On Demand page. </td><td>  -  </td></tr>
     </table>
     */
    public Video getVodVideo(BigDecimal ondemandId, BigDecimal videoId) throws ApiException {
        ApiResponse<Video> localVarResp = getVodVideoWithHttpInfo(ondemandId, videoId);
        return localVarResp.getData();
    }

    /**
     * Get a specific video on an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video is on the On Demand page. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> getVodVideoWithHttpInfo(BigDecimal ondemandId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = getVodVideoValidateBeforeCall(ondemandId, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific video on an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video is on the On Demand page. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodVideoAsync(BigDecimal ondemandId, BigDecimal videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodVideoValidateBeforeCall(ondemandId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodVideos
     * @param ondemandId The ID of the On Demand. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> * The videos were returned. * The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodVideosCall(BigDecimal ondemandId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/videos"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodVideosValidateBeforeCall(BigDecimal ondemandId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVodVideos(Async)");
        }

        return getVodVideosCall(ondemandId, direction, filter, page, perPage, sort, _callback);

    }

    /**
     * Get all the videos on an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> * The videos were returned. * The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getVodVideos(BigDecimal ondemandId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getVodVideosWithHttpInfo(ondemandId, direction, filter, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the videos on an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> * The videos were returned. * The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getVodVideosWithHttpInfo(BigDecimal ondemandId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getVodVideosValidateBeforeCall(ondemandId, direction, filter, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos on an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> * The videos were returned. * The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodVideosAsync(BigDecimal ondemandId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodVideosValidateBeforeCall(ondemandId, direction, filter, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
