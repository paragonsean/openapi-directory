/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CreateTextTrackAlt1Request;
import org.openapitools.client.model.EditTextTrackRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.TextTrack;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideosTextTracksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosTextTracksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideosTextTracksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTextTrack
     * @param videoId The ID of the video. (required)
     * @param createTextTrackAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t edit the text track. * Error code 2204: The request contains errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTextTrackCall(BigDecimal videoId, CreateTextTrackAlt1Request createTextTrackAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTextTrackAlt1Request;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/texttracks"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTextTrackValidateBeforeCall(BigDecimal videoId, CreateTextTrackAlt1Request createTextTrackAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createTextTrack(Async)");
        }

        // verify the required parameter 'createTextTrackAlt1Request' is set
        if (createTextTrackAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'createTextTrackAlt1Request' when calling createTextTrack(Async)");
        }

        return createTextTrackCall(videoId, createTextTrackAlt1Request, _callback);

    }

    /**
     * Add a text track to a video
     * For additional information, see our [text track upload guide](https://developer.vimeo.com/api/upload/texttracks).
     * @param videoId The ID of the video. (required)
     * @param createTextTrackAlt1Request  (required)
     * @return TextTrack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t edit the text track. * Error code 2204: The request contains errors. </td><td>  -  </td></tr>
     </table>
     */
    public TextTrack createTextTrack(BigDecimal videoId, CreateTextTrackAlt1Request createTextTrackAlt1Request) throws ApiException {
        ApiResponse<TextTrack> localVarResp = createTextTrackWithHttpInfo(videoId, createTextTrackAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Add a text track to a video
     * For additional information, see our [text track upload guide](https://developer.vimeo.com/api/upload/texttracks).
     * @param videoId The ID of the video. (required)
     * @param createTextTrackAlt1Request  (required)
     * @return ApiResponse&lt;TextTrack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t edit the text track. * Error code 2204: The request contains errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TextTrack> createTextTrackWithHttpInfo(BigDecimal videoId, CreateTextTrackAlt1Request createTextTrackAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = createTextTrackValidateBeforeCall(videoId, createTextTrackAlt1Request, null);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a text track to a video (asynchronously)
     * For additional information, see our [text track upload guide](https://developer.vimeo.com/api/upload/texttracks).
     * @param videoId The ID of the video. (required)
     * @param createTextTrackAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t edit the text track. * Error code 2204: The request contains errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTextTrackAsync(BigDecimal videoId, CreateTextTrackAlt1Request createTextTrackAlt1Request, final ApiCallback<TextTrack> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTextTrackValidateBeforeCall(videoId, createTextTrackAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTextTrackAlt1
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param createTextTrackAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t edit the text track. * Error code 2204: The request contains errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTextTrackAlt1Call(BigDecimal channelId, BigDecimal videoId, CreateTextTrackAlt1Request createTextTrackAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTextTrackAlt1Request;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/texttracks"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTextTrackAlt1ValidateBeforeCall(BigDecimal channelId, BigDecimal videoId, CreateTextTrackAlt1Request createTextTrackAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling createTextTrackAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createTextTrackAlt1(Async)");
        }

        // verify the required parameter 'createTextTrackAlt1Request' is set
        if (createTextTrackAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'createTextTrackAlt1Request' when calling createTextTrackAlt1(Async)");
        }

        return createTextTrackAlt1Call(channelId, videoId, createTextTrackAlt1Request, _callback);

    }

    /**
     * Add a text track to a video
     * For additional information, see our [text track upload guide](https://developer.vimeo.com/api/upload/texttracks).
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param createTextTrackAlt1Request  (required)
     * @return TextTrack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t edit the text track. * Error code 2204: The request contains errors. </td><td>  -  </td></tr>
     </table>
     */
    public TextTrack createTextTrackAlt1(BigDecimal channelId, BigDecimal videoId, CreateTextTrackAlt1Request createTextTrackAlt1Request) throws ApiException {
        ApiResponse<TextTrack> localVarResp = createTextTrackAlt1WithHttpInfo(channelId, videoId, createTextTrackAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Add a text track to a video
     * For additional information, see our [text track upload guide](https://developer.vimeo.com/api/upload/texttracks).
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param createTextTrackAlt1Request  (required)
     * @return ApiResponse&lt;TextTrack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t edit the text track. * Error code 2204: The request contains errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TextTrack> createTextTrackAlt1WithHttpInfo(BigDecimal channelId, BigDecimal videoId, CreateTextTrackAlt1Request createTextTrackAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = createTextTrackAlt1ValidateBeforeCall(channelId, videoId, createTextTrackAlt1Request, null);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a text track to a video (asynchronously)
     * For additional information, see our [text track upload guide](https://developer.vimeo.com/api/upload/texttracks).
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param createTextTrackAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The text track was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t edit the text track. * Error code 2204: The request contains errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTextTrackAlt1Async(BigDecimal channelId, BigDecimal videoId, CreateTextTrackAlt1Request createTextTrackAlt1Request, final ApiCallback<TextTrack> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTextTrackAlt1ValidateBeforeCall(channelId, videoId, createTextTrackAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTextTrack
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The text track was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3430: You don&#39;t have permission to access this text track. * Error code 3431: This text track is disabled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or text track exists. * The authenticated user can&#39;t delete the text track. * Error code 5014: The text track that you specified doesn&#39;t exist. * Error code 5015: The text track that you specified belongs to a different video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTextTrackCall(BigDecimal texttrackId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/texttracks/{texttrack_id}"
            .replace("{" + "texttrack_id" + "}", localVarApiClient.escapeString(texttrackId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTextTrackValidateBeforeCall(BigDecimal texttrackId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'texttrackId' is set
        if (texttrackId == null) {
            throw new ApiException("Missing the required parameter 'texttrackId' when calling deleteTextTrack(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteTextTrack(Async)");
        }

        return deleteTextTrackCall(texttrackId, videoId, _callback);

    }

    /**
     * Delete a text track
     * 
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The text track was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3430: You don&#39;t have permission to access this text track. * Error code 3431: This text track is disabled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or text track exists. * The authenticated user can&#39;t delete the text track. * Error code 5014: The text track that you specified doesn&#39;t exist. * Error code 5015: The text track that you specified belongs to a different video. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTextTrack(BigDecimal texttrackId, BigDecimal videoId) throws ApiException {
        deleteTextTrackWithHttpInfo(texttrackId, videoId);
    }

    /**
     * Delete a text track
     * 
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The text track was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3430: You don&#39;t have permission to access this text track. * Error code 3431: This text track is disabled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or text track exists. * The authenticated user can&#39;t delete the text track. * Error code 5014: The text track that you specified doesn&#39;t exist. * Error code 5015: The text track that you specified belongs to a different video. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTextTrackWithHttpInfo(BigDecimal texttrackId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteTextTrackValidateBeforeCall(texttrackId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a text track (asynchronously)
     * 
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The text track was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3430: You don&#39;t have permission to access this text track. * Error code 3431: This text track is disabled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or text track exists. * The authenticated user can&#39;t delete the text track. * Error code 5014: The text track that you specified doesn&#39;t exist. * Error code 5015: The text track that you specified belongs to a different video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTextTrackAsync(BigDecimal texttrackId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTextTrackValidateBeforeCall(texttrackId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editTextTrack
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @param editTextTrackRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text track was edited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t edit the text track. * Error code 2204: There are errors in the request. * Error code 3430: You don&#39;t have permission to access this text track. * Error code 3431: This text track is disabled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or text track exists. * Error code 5014: The text track that you specified doesn&#39;t exist. * Error code 5015: The text track that you specified belongs to a different video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editTextTrackCall(BigDecimal texttrackId, BigDecimal videoId, EditTextTrackRequest editTextTrackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editTextTrackRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/texttracks/{texttrack_id}"
            .replace("{" + "texttrack_id" + "}", localVarApiClient.escapeString(texttrackId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editTextTrackValidateBeforeCall(BigDecimal texttrackId, BigDecimal videoId, EditTextTrackRequest editTextTrackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'texttrackId' is set
        if (texttrackId == null) {
            throw new ApiException("Missing the required parameter 'texttrackId' when calling editTextTrack(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling editTextTrack(Async)");
        }

        return editTextTrackCall(texttrackId, videoId, editTextTrackRequest, _callback);

    }

    /**
     * Edit a text track
     * 
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @param editTextTrackRequest  (optional)
     * @return TextTrack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text track was edited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t edit the text track. * Error code 2204: There are errors in the request. * Error code 3430: You don&#39;t have permission to access this text track. * Error code 3431: This text track is disabled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or text track exists. * Error code 5014: The text track that you specified doesn&#39;t exist. * Error code 5015: The text track that you specified belongs to a different video. </td><td>  -  </td></tr>
     </table>
     */
    public TextTrack editTextTrack(BigDecimal texttrackId, BigDecimal videoId, EditTextTrackRequest editTextTrackRequest) throws ApiException {
        ApiResponse<TextTrack> localVarResp = editTextTrackWithHttpInfo(texttrackId, videoId, editTextTrackRequest);
        return localVarResp.getData();
    }

    /**
     * Edit a text track
     * 
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @param editTextTrackRequest  (optional)
     * @return ApiResponse&lt;TextTrack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text track was edited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t edit the text track. * Error code 2204: There are errors in the request. * Error code 3430: You don&#39;t have permission to access this text track. * Error code 3431: This text track is disabled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or text track exists. * Error code 5014: The text track that you specified doesn&#39;t exist. * Error code 5015: The text track that you specified belongs to a different video. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TextTrack> editTextTrackWithHttpInfo(BigDecimal texttrackId, BigDecimal videoId, EditTextTrackRequest editTextTrackRequest) throws ApiException {
        okhttp3.Call localVarCall = editTextTrackValidateBeforeCall(texttrackId, videoId, editTextTrackRequest, null);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a text track (asynchronously)
     * 
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @param editTextTrackRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text track was edited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t edit the text track. * Error code 2204: There are errors in the request. * Error code 3430: You don&#39;t have permission to access this text track. * Error code 3431: This text track is disabled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or text track exists. * Error code 5014: The text track that you specified doesn&#39;t exist. * Error code 5015: The text track that you specified belongs to a different video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editTextTrackAsync(BigDecimal texttrackId, BigDecimal videoId, EditTextTrackRequest editTextTrackRequest, final ApiCallback<TextTrack> _callback) throws ApiException {

        okhttp3.Call localVarCall = editTextTrackValidateBeforeCall(texttrackId, videoId, editTextTrackRequest, _callback);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTextTrack
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text track was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3430: You don&#39;t have permission to access this text track. * Error code 3431: This text track is disabled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or text track exists. * Error code 5014: The text track that you specified doesn&#39;t exist. * Error code 5015: The text track that you specified belongs to a different video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTextTrackCall(BigDecimal texttrackId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/texttracks/{texttrack_id}"
            .replace("{" + "texttrack_id" + "}", localVarApiClient.escapeString(texttrackId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTextTrackValidateBeforeCall(BigDecimal texttrackId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'texttrackId' is set
        if (texttrackId == null) {
            throw new ApiException("Missing the required parameter 'texttrackId' when calling getTextTrack(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getTextTrack(Async)");
        }

        return getTextTrackCall(texttrackId, videoId, _callback);

    }

    /**
     * Get a specific text track
     * 
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @return TextTrack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text track was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3430: You don&#39;t have permission to access this text track. * Error code 3431: This text track is disabled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or text track exists. * Error code 5014: The text track that you specified doesn&#39;t exist. * Error code 5015: The text track that you specified belongs to a different video. </td><td>  -  </td></tr>
     </table>
     */
    public TextTrack getTextTrack(BigDecimal texttrackId, BigDecimal videoId) throws ApiException {
        ApiResponse<TextTrack> localVarResp = getTextTrackWithHttpInfo(texttrackId, videoId);
        return localVarResp.getData();
    }

    /**
     * Get a specific text track
     * 
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;TextTrack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text track was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3430: You don&#39;t have permission to access this text track. * Error code 3431: This text track is disabled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or text track exists. * Error code 5014: The text track that you specified doesn&#39;t exist. * Error code 5015: The text track that you specified belongs to a different video. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TextTrack> getTextTrackWithHttpInfo(BigDecimal texttrackId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = getTextTrackValidateBeforeCall(texttrackId, videoId, null);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific text track (asynchronously)
     * 
     * @param texttrackId The ID of the text track. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text track was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * Error code 3430: You don&#39;t have permission to access this text track. * Error code 3431: This text track is disabled. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * No such video or text track exists. * Error code 5014: The text track that you specified doesn&#39;t exist. * Error code 5015: The text track that you specified belongs to a different video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTextTrackAsync(BigDecimal texttrackId, BigDecimal videoId, final ApiCallback<TextTrack> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTextTrackValidateBeforeCall(texttrackId, videoId, _callback);
        Type localVarReturnType = new TypeToken<TextTrack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTextTracks
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTextTracksCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/texttracks"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTextTracksValidateBeforeCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getTextTracks(Async)");
        }

        return getTextTracksCall(videoId, _callback);

    }

    /**
     * Get all the text tracks of a video
     * 
     * @param videoId The ID of the video. (required)
     * @return List&lt;TextTrack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<TextTrack> getTextTracks(BigDecimal videoId) throws ApiException {
        ApiResponse<List<TextTrack>> localVarResp = getTextTracksWithHttpInfo(videoId);
        return localVarResp.getData();
    }

    /**
     * Get all the text tracks of a video
     * 
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;List&lt;TextTrack&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TextTrack>> getTextTracksWithHttpInfo(BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = getTextTracksValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<List<TextTrack>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the text tracks of a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTextTracksAsync(BigDecimal videoId, final ApiCallback<List<TextTrack>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTextTracksValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<List<TextTrack>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTextTracksAlt1
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTextTracksAlt1Call(BigDecimal channelId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/texttracks"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video.texttrack+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTextTracksAlt1ValidateBeforeCall(BigDecimal channelId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getTextTracksAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getTextTracksAlt1(Async)");
        }

        return getTextTracksAlt1Call(channelId, videoId, _callback);

    }

    /**
     * Get all the text tracks of a video
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @return List&lt;TextTrack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<TextTrack> getTextTracksAlt1(BigDecimal channelId, BigDecimal videoId) throws ApiException {
        ApiResponse<List<TextTrack>> localVarResp = getTextTracksAlt1WithHttpInfo(channelId, videoId);
        return localVarResp.getData();
    }

    /**
     * Get all the text tracks of a video
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;List&lt;TextTrack&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TextTrack>> getTextTracksAlt1WithHttpInfo(BigDecimal channelId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = getTextTracksAlt1ValidateBeforeCall(channelId, videoId, null);
        Type localVarReturnType = new TypeToken<List<TextTrack>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the text tracks of a video (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text tracks were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTextTracksAlt1Async(BigDecimal channelId, BigDecimal videoId, final ApiCallback<List<TextTrack>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTextTracksAlt1ValidateBeforeCall(channelId, videoId, _callback);
        Type localVarReturnType = new TypeToken<List<TextTrack>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
