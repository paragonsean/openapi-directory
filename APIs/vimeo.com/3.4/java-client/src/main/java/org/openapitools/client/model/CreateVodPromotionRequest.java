/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateVodPromotionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateVodPromotionRequest {
  /**
   * The promotion access type, which is a purchase option that isn&#39;t available on the container. VIP promotions always make the content free of charge. If you use this type, you must further define the promotion with the &#x60;download&#x60; or &#x60;stream_period&#x60; fields.  Option descriptions:  * &#x60;default&#x60; - Promotions grant discount on the existing purchase options for an On Demand Container.  * &#x60;vip&#x60; - Promotions can be used to grant free access to VOD content before it is released, or to offer a purchase option that isn&#39;t available on the container. \&quot;vip\&quot; promotions will always make the content free, and must be further defined with the &#x60;download&#x60; or &#x60;stream_period&#x60; fields. 
   */
  @JsonAdapter(AccessTypeEnum.Adapter.class)
  public enum AccessTypeEnum {
    DEFAULT("default"),
    
    VIP("vip");

    private String value;

    AccessTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessTypeEnum fromValue(String value) {
      for (AccessTypeEnum b : AccessTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_TYPE = "access_type";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  private AccessTypeEnum accessType;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  /**
   * The type of discount offered by the promo code. When &#x60;access_type&#x60; is &#x60;vip&#x60;, the value of this field must be &#x60;free&#x60;.  Option descriptions:  * &#x60;free&#x60; - Reduces the price to zero.  * &#x60;percent&#x60; - Reduces the price by an amount defined in the \&quot;percent_off\&quot; field. 
   */
  @JsonAdapter(DiscountTypeEnum.Adapter.class)
  public enum DiscountTypeEnum {
    FREE("free"),
    
    PERCENT("percent");

    private String value;

    DiscountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiscountTypeEnum fromValue(String value) {
      for (DiscountTypeEnum b : DiscountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DiscountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiscountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiscountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiscountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DiscountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISCOUNT_TYPE = "discount_type";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_TYPE)
  private DiscountTypeEnum discountType;

  public static final String SERIALIZED_NAME_DOWNLOAD = "download";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD)
  private Boolean download;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_PERCENT_OFF = "percent_off";
  @SerializedName(SERIALIZED_NAME_PERCENT_OFF)
  private BigDecimal percentOff;

  /**
   * The type of transaction to which the promotion applies. When &#x60;access_type&#x60; is &#x60;default&#x60;, the default value is &#x60;any&#x60;, but the default value is &#x60;rent&#x60; when &#x60;access_type&#x60; is &#x60;vip&#x60;. Also, when &#x60;access_type&#x60; is &#x60;vip&#x60;, the only valid product types are &#x60;buy&#x60; and &#x60;rent&#x60;.
   */
  @JsonAdapter(ProductTypeEnum.Adapter.class)
  public enum ProductTypeEnum {
    ANY("any"),
    
    BUY("buy"),
    
    BUY_EPISODE("buy_episode"),
    
    RENT("rent"),
    
    RENT_EPISODE("rent_episode"),
    
    SUBSCRIBE("subscribe");

    private String value;

    ProductTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductTypeEnum fromValue(String value) {
      for (ProductTypeEnum b : ProductTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "product_type";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private ProductTypeEnum productType;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * The amount of time that a user has access to the VOD content upon redeeming a promo code. This field is necessary only when not defined in the On Demand container or when creating promotions when &#x60;access_type&#x60; is &#x60;vip&#x60; or &#x60;product_type&#x60; is &#x60;rent&#x60;.
   */
  @JsonAdapter(StreamPeriodEnum.Adapter.class)
  public enum StreamPeriodEnum {
    _1_WEEK("1_week"),
    
    _1_YEAR("1_year"),
    
    _24_HOUR("24_hour"),
    
    _30_DAY("30_day"),
    
    _3_MONTH("3_month"),
    
    _48_HOUR("48_hour"),
    
    _6_MONTH("6_month"),
    
    _72_HOUR("72_hour");

    private String value;

    StreamPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreamPeriodEnum fromValue(String value) {
      for (StreamPeriodEnum b : StreamPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StreamPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreamPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreamPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreamPeriodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StreamPeriodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STREAM_PERIOD = "stream_period";
  @SerializedName(SERIALIZED_NAME_STREAM_PERIOD)
  private StreamPeriodEnum streamPeriod;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  /**
   * The type of promotion. When &#x60;access_type&#x60; is &#x60;vip&#x60;, the value for this field must be &#x60;batch&#x60;.  Option descriptions:  * &#x60;batch&#x60; - Generates many random promo codes with one use each.  * &#x60;single&#x60; - Generates one promo code that can be used many times. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BATCH("batch"),
    
    SINGLE("single");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public CreateVodPromotionRequest() {
  }

  public CreateVodPromotionRequest accessType(AccessTypeEnum accessType) {
    this.accessType = accessType;
    return this;
  }

  /**
   * The promotion access type, which is a purchase option that isn&#39;t available on the container. VIP promotions always make the content free of charge. If you use this type, you must further define the promotion with the &#x60;download&#x60; or &#x60;stream_period&#x60; fields.  Option descriptions:  * &#x60;default&#x60; - Promotions grant discount on the existing purchase options for an On Demand Container.  * &#x60;vip&#x60; - Promotions can be used to grant free access to VOD content before it is released, or to offer a purchase option that isn&#39;t available on the container. \&quot;vip\&quot; promotions will always make the content free, and must be further defined with the &#x60;download&#x60; or &#x60;stream_period&#x60; fields. 
   * @return accessType
   */
  @javax.annotation.Nullable
  public AccessTypeEnum getAccessType() {
    return accessType;
  }

  public void setAccessType(AccessTypeEnum accessType) {
    this.accessType = accessType;
  }


  public CreateVodPromotionRequest code(String code) {
    this.code = code;
    return this;
  }

  /**
   * The promotion code. This field is ignored for batch promotions.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public CreateVodPromotionRequest discountType(DiscountTypeEnum discountType) {
    this.discountType = discountType;
    return this;
  }

  /**
   * The type of discount offered by the promo code. When &#x60;access_type&#x60; is &#x60;vip&#x60;, the value of this field must be &#x60;free&#x60;.  Option descriptions:  * &#x60;free&#x60; - Reduces the price to zero.  * &#x60;percent&#x60; - Reduces the price by an amount defined in the \&quot;percent_off\&quot; field. 
   * @return discountType
   */
  @javax.annotation.Nullable
  public DiscountTypeEnum getDiscountType() {
    return discountType;
  }

  public void setDiscountType(DiscountTypeEnum discountType) {
    this.discountType = discountType;
  }


  public CreateVodPromotionRequest download(Boolean download) {
    this.download = download;
    return this;
  }

  /**
   * Whether the promotion grants download access to VOD content. This is necessary only when not previously defined in the On Demand container or when &#x60;access_type&#x60; is &#x60;vip&#x60; or &#x60;product_type&#x60; is &#x60;buy&#x60;.
   * @return download
   */
  @javax.annotation.Nonnull
  public Boolean getDownload() {
    return download;
  }

  public void setDownload(Boolean download) {
    this.download = download;
  }


  public CreateVodPromotionRequest endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end of the promotion period. If you don&#39;t specify a value, the promotion will never expire.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public CreateVodPromotionRequest label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The description of a batch promotion. This field is ignored for single promotions.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public CreateVodPromotionRequest percentOff(BigDecimal percentOff) {
    this.percentOff = percentOff;
    return this;
  }

  /**
   * The percentage of the discount by using this promo code. This field is applicable only when &#x60;discount_type&#x60; is &#x60;percent&#x60;.
   * @return percentOff
   */
  @javax.annotation.Nullable
  public BigDecimal getPercentOff() {
    return percentOff;
  }

  public void setPercentOff(BigDecimal percentOff) {
    this.percentOff = percentOff;
  }


  public CreateVodPromotionRequest productType(ProductTypeEnum productType) {
    this.productType = productType;
    return this;
  }

  /**
   * The type of transaction to which the promotion applies. When &#x60;access_type&#x60; is &#x60;default&#x60;, the default value is &#x60;any&#x60;, but the default value is &#x60;rent&#x60; when &#x60;access_type&#x60; is &#x60;vip&#x60;. Also, when &#x60;access_type&#x60; is &#x60;vip&#x60;, the only valid product types are &#x60;buy&#x60; and &#x60;rent&#x60;.
   * @return productType
   */
  @javax.annotation.Nullable
  public ProductTypeEnum getProductType() {
    return productType;
  }

  public void setProductType(ProductTypeEnum productType) {
    this.productType = productType;
  }


  public CreateVodPromotionRequest startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start of the promotion period. If you don&#39;t specify a value, the start time defaults to the time that the promotion was created.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public CreateVodPromotionRequest streamPeriod(StreamPeriodEnum streamPeriod) {
    this.streamPeriod = streamPeriod;
    return this;
  }

  /**
   * The amount of time that a user has access to the VOD content upon redeeming a promo code. This field is necessary only when not defined in the On Demand container or when creating promotions when &#x60;access_type&#x60; is &#x60;vip&#x60; or &#x60;product_type&#x60; is &#x60;rent&#x60;.
   * @return streamPeriod
   */
  @javax.annotation.Nonnull
  public StreamPeriodEnum getStreamPeriod() {
    return streamPeriod;
  }

  public void setStreamPeriod(StreamPeriodEnum streamPeriod) {
    this.streamPeriod = streamPeriod;
  }


  public CreateVodPromotionRequest total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * The number of promotions to generate when &#x60;type&#x60; is &#x60;batch&#x60;, or the number of uses of the promotion when &#x60;type&#x60; is &#x60;single&#x60;.
   * @return total
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  public CreateVodPromotionRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of promotion. When &#x60;access_type&#x60; is &#x60;vip&#x60;, the value for this field must be &#x60;batch&#x60;.  Option descriptions:  * &#x60;batch&#x60; - Generates many random promo codes with one use each.  * &#x60;single&#x60; - Generates one promo code that can be used many times. 
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateVodPromotionRequest createVodPromotionRequest = (CreateVodPromotionRequest) o;
    return Objects.equals(this.accessType, createVodPromotionRequest.accessType) &&
        Objects.equals(this.code, createVodPromotionRequest.code) &&
        Objects.equals(this.discountType, createVodPromotionRequest.discountType) &&
        Objects.equals(this.download, createVodPromotionRequest.download) &&
        Objects.equals(this.endTime, createVodPromotionRequest.endTime) &&
        Objects.equals(this.label, createVodPromotionRequest.label) &&
        Objects.equals(this.percentOff, createVodPromotionRequest.percentOff) &&
        Objects.equals(this.productType, createVodPromotionRequest.productType) &&
        Objects.equals(this.startTime, createVodPromotionRequest.startTime) &&
        Objects.equals(this.streamPeriod, createVodPromotionRequest.streamPeriod) &&
        Objects.equals(this.total, createVodPromotionRequest.total) &&
        Objects.equals(this.type, createVodPromotionRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessType, code, discountType, download, endTime, label, percentOff, productType, startTime, streamPeriod, total, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateVodPromotionRequest {\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    discountType: ").append(toIndentedString(discountType)).append("\n");
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    percentOff: ").append(toIndentedString(percentOff)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    streamPeriod: ").append(toIndentedString(streamPeriod)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_type");
    openapiFields.add("code");
    openapiFields.add("discount_type");
    openapiFields.add("download");
    openapiFields.add("end_time");
    openapiFields.add("label");
    openapiFields.add("percent_off");
    openapiFields.add("product_type");
    openapiFields.add("start_time");
    openapiFields.add("stream_period");
    openapiFields.add("total");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("download");
    openapiRequiredFields.add("stream_period");
    openapiRequiredFields.add("total");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateVodPromotionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateVodPromotionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateVodPromotionRequest is not found in the empty JSON string", CreateVodPromotionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateVodPromotionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateVodPromotionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateVodPromotionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access_type") != null && !jsonObj.get("access_type").isJsonNull()) && !jsonObj.get("access_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_type").toString()));
      }
      // validate the optional field `access_type`
      if (jsonObj.get("access_type") != null && !jsonObj.get("access_type").isJsonNull()) {
        AccessTypeEnum.validateJsonElement(jsonObj.get("access_type"));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("discount_type") != null && !jsonObj.get("discount_type").isJsonNull()) && !jsonObj.get("discount_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discount_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discount_type").toString()));
      }
      // validate the optional field `discount_type`
      if (jsonObj.get("discount_type") != null && !jsonObj.get("discount_type").isJsonNull()) {
        DiscountTypeEnum.validateJsonElement(jsonObj.get("discount_type"));
      }
      if ((jsonObj.get("end_time") != null && !jsonObj.get("end_time").isJsonNull()) && !jsonObj.get("end_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_time").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("product_type") != null && !jsonObj.get("product_type").isJsonNull()) && !jsonObj.get("product_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_type").toString()));
      }
      // validate the optional field `product_type`
      if (jsonObj.get("product_type") != null && !jsonObj.get("product_type").isJsonNull()) {
        ProductTypeEnum.validateJsonElement(jsonObj.get("product_type"));
      }
      if ((jsonObj.get("start_time") != null && !jsonObj.get("start_time").isJsonNull()) && !jsonObj.get("start_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_time").toString()));
      }
      if (!jsonObj.get("stream_period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_period").toString()));
      }
      // validate the required field `stream_period`
      StreamPeriodEnum.validateJsonElement(jsonObj.get("stream_period"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateVodPromotionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateVodPromotionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateVodPromotionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateVodPromotionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateVodPromotionRequest>() {
           @Override
           public void write(JsonWriter out, CreateVodPromotionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateVodPromotionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateVodPromotionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateVodPromotionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateVodPromotionRequest
   */
  public static CreateVodPromotionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateVodPromotionRequest.class);
  }

  /**
   * Convert an instance of CreateVodPromotionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

