/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DeleteVodRegionsRequest;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.OnDemandRegion;
import org.openapitools.client.model.SetVodRegionsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OnDemandRegionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandRegionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandRegionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVodRegion
     * @param country The country code. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The region was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVodRegionCall(String country, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/regions/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVodRegionValidateBeforeCall(String country, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling addVodRegion(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling addVodRegion(Async)");
        }

        return addVodRegionCall(country, ondemandId, _callback);

    }

    /**
     * Add a specific region to an On Demand page
     * 
     * @param country The country code. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return OnDemandRegion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The region was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandRegion addVodRegion(String country, BigDecimal ondemandId) throws ApiException {
        ApiResponse<OnDemandRegion> localVarResp = addVodRegionWithHttpInfo(country, ondemandId);
        return localVarResp.getData();
    }

    /**
     * Add a specific region to an On Demand page
     * 
     * @param country The country code. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;OnDemandRegion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The region was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandRegion> addVodRegionWithHttpInfo(String country, BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = addVodRegionValidateBeforeCall(country, ondemandId, null);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a specific region to an On Demand page (asynchronously)
     * 
     * @param country The country code. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The region was added. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVodRegionAsync(String country, BigDecimal ondemandId, final ApiCallback<OnDemandRegion> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVodRegionValidateBeforeCall(country, ondemandId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVodRegion
     * @param country The country code. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The On Demand region was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVodRegionCall(String country, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/regions/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVodRegionValidateBeforeCall(String country, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling deleteVodRegion(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling deleteVodRegion(Async)");
        }

        return deleteVodRegionCall(country, ondemandId, _callback);

    }

    /**
     * Remove a specific region from an On Demand page
     * 
     * @param country The country code. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The On Demand region was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVodRegion(String country, BigDecimal ondemandId) throws ApiException {
        deleteVodRegionWithHttpInfo(country, ondemandId);
    }

    /**
     * Remove a specific region from an On Demand page
     * 
     * @param country The country code. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The On Demand region was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVodRegionWithHttpInfo(String country, BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = deleteVodRegionValidateBeforeCall(country, ondemandId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a specific region from an On Demand page (asynchronously)
     * 
     * @param country The country code. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The On Demand region was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVodRegionAsync(String country, BigDecimal ondemandId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVodRegionValidateBeforeCall(country, ondemandId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVodRegions
     * @param ondemandId The ID of the On Demand. (required)
     * @param deleteVodRegionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand regions were deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVodRegionsCall(BigDecimal ondemandId, DeleteVodRegionsRequest deleteVodRegionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteVodRegionsRequest;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/regions"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVodRegionsValidateBeforeCall(BigDecimal ondemandId, DeleteVodRegionsRequest deleteVodRegionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling deleteVodRegions(Async)");
        }

        return deleteVodRegionsCall(ondemandId, deleteVodRegionsRequest, _callback);

    }

    /**
     * Remove a list of regions from an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param deleteVodRegionsRequest  (optional)
     * @return List&lt;OnDemandRegion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand regions were deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<OnDemandRegion> deleteVodRegions(BigDecimal ondemandId, DeleteVodRegionsRequest deleteVodRegionsRequest) throws ApiException {
        ApiResponse<List<OnDemandRegion>> localVarResp = deleteVodRegionsWithHttpInfo(ondemandId, deleteVodRegionsRequest);
        return localVarResp.getData();
    }

    /**
     * Remove a list of regions from an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param deleteVodRegionsRequest  (optional)
     * @return ApiResponse&lt;List&lt;OnDemandRegion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand regions were deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OnDemandRegion>> deleteVodRegionsWithHttpInfo(BigDecimal ondemandId, DeleteVodRegionsRequest deleteVodRegionsRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteVodRegionsValidateBeforeCall(ondemandId, deleteVodRegionsRequest, null);
        Type localVarReturnType = new TypeToken<List<OnDemandRegion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a list of regions from an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param deleteVodRegionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand regions were deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVodRegionsAsync(BigDecimal ondemandId, DeleteVodRegionsRequest deleteVodRegionsRequest, final ApiCallback<List<OnDemandRegion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVodRegionsValidateBeforeCall(ondemandId, deleteVodRegionsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandRegion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegion
     * @param country The country code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand region was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand region exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegionCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/regions/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegionValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getRegion(Async)");
        }

        return getRegionCall(country, _callback);

    }

    /**
     * Get a specific On Demand region
     * 
     * @param country The country code. (required)
     * @return OnDemandRegion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand region was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand region exists. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandRegion getRegion(String country) throws ApiException {
        ApiResponse<OnDemandRegion> localVarResp = getRegionWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * Get a specific On Demand region
     * 
     * @param country The country code. (required)
     * @return ApiResponse&lt;OnDemandRegion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand region was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand region exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandRegion> getRegionWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = getRegionValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific On Demand region (asynchronously)
     * 
     * @param country The country code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand region was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand region exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegionAsync(String country, final ApiCallback<OnDemandRegion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegionValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand regions were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/regions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getRegionsCall(_callback);

    }

    /**
     * Get all the On Demand regions
     * 
     * @return List&lt;OnDemandRegion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand regions were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<OnDemandRegion> getRegions() throws ApiException {
        ApiResponse<List<OnDemandRegion>> localVarResp = getRegionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all the On Demand regions
     * 
     * @return ApiResponse&lt;List&lt;OnDemandRegion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand regions were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OnDemandRegion>> getRegionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRegionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<OnDemandRegion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the On Demand regions (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand regions were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegionsAsync(final ApiCallback<List<OnDemandRegion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<OnDemandRegion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodRegion
     * @param country The country code. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page&#39;s region was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodRegionCall(String country, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/regions/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()))
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodRegionValidateBeforeCall(String country, BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getVodRegion(Async)");
        }

        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVodRegion(Async)");
        }

        return getVodRegionCall(country, ondemandId, _callback);

    }

    /**
     * Get a specific region of an On Demand page
     * Checks whether an On Demand page belongs to a region.
     * @param country The country code. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return OnDemandRegion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page&#39;s region was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandRegion getVodRegion(String country, BigDecimal ondemandId) throws ApiException {
        ApiResponse<OnDemandRegion> localVarResp = getVodRegionWithHttpInfo(country, ondemandId);
        return localVarResp.getData();
    }

    /**
     * Get a specific region of an On Demand page
     * Checks whether an On Demand page belongs to a region.
     * @param country The country code. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;OnDemandRegion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page&#39;s region was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandRegion> getVodRegionWithHttpInfo(String country, BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = getVodRegionValidateBeforeCall(country, ondemandId, null);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific region of an On Demand page (asynchronously)
     * Checks whether an On Demand page belongs to a region.
     * @param country The country code. (required)
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page&#39;s region was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodRegionAsync(String country, BigDecimal ondemandId, final ApiCallback<OnDemandRegion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodRegionValidateBeforeCall(country, ondemandId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodRegions
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The regions were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodRegionsCall(BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/regions"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodRegionsValidateBeforeCall(BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVodRegions(Async)");
        }

        return getVodRegionsCall(ondemandId, _callback);

    }

    /**
     * Get all the regions of an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @return List&lt;OnDemandRegion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The regions were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<OnDemandRegion> getVodRegions(BigDecimal ondemandId) throws ApiException {
        ApiResponse<List<OnDemandRegion>> localVarResp = getVodRegionsWithHttpInfo(ondemandId);
        return localVarResp.getData();
    }

    /**
     * Get all the regions of an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;List&lt;OnDemandRegion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The regions were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OnDemandRegion>> getVodRegionsWithHttpInfo(BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = getVodRegionsValidateBeforeCall(ondemandId, null);
        Type localVarReturnType = new TypeToken<List<OnDemandRegion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the regions of an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The regions were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodRegionsAsync(BigDecimal ondemandId, final ApiCallback<List<OnDemandRegion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodRegionsValidateBeforeCall(ondemandId, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandRegion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setVodRegions
     * @param ondemandId The ID of the On Demand. (required)
     * @param setVodRegionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of regions was set. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setVodRegionsCall(BigDecimal ondemandId, SetVodRegionsRequest setVodRegionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setVodRegionsRequest;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/regions"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.ondemand.region+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setVodRegionsValidateBeforeCall(BigDecimal ondemandId, SetVodRegionsRequest setVodRegionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling setVodRegions(Async)");
        }

        // verify the required parameter 'setVodRegionsRequest' is set
        if (setVodRegionsRequest == null) {
            throw new ApiException("Missing the required parameter 'setVodRegionsRequest' when calling setVodRegions(Async)");
        }

        return setVodRegionsCall(ondemandId, setVodRegionsRequest, _callback);

    }

    /**
     * Add a list of regions to an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param setVodRegionsRequest  (required)
     * @return OnDemandRegion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of regions was set. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandRegion setVodRegions(BigDecimal ondemandId, SetVodRegionsRequest setVodRegionsRequest) throws ApiException {
        ApiResponse<OnDemandRegion> localVarResp = setVodRegionsWithHttpInfo(ondemandId, setVodRegionsRequest);
        return localVarResp.getData();
    }

    /**
     * Add a list of regions to an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param setVodRegionsRequest  (required)
     * @return ApiResponse&lt;OnDemandRegion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of regions was set. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandRegion> setVodRegionsWithHttpInfo(BigDecimal ondemandId, SetVodRegionsRequest setVodRegionsRequest) throws ApiException {
        okhttp3.Call localVarCall = setVodRegionsValidateBeforeCall(ondemandId, setVodRegionsRequest, null);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a list of regions to an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param setVodRegionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of regions was set. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page or region exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setVodRegionsAsync(BigDecimal ondemandId, SetVodRegionsRequest setVodRegionsRequest, final ApiCallback<OnDemandRegion> _callback) throws ApiException {

        okhttp3.Call localVarCall = setVodRegionsValidateBeforeCall(ondemandId, setVodRegionsRequest, _callback);
        Type localVarReturnType = new TypeToken<OnDemandRegion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
