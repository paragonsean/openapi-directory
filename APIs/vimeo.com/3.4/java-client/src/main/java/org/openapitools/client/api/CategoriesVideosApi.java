/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.SuggestVideoCategoryRequest;
import org.openapitools.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CategoriesVideosApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoriesVideosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesVideosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkCategoryForVideo
     * @param category The name of the category. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video belongs to the category. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such category exists, or the video doesn&#39;t belong to it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkCategoryForVideoCall(String category, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/videos/{video_id}"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkCategoryForVideoValidateBeforeCall(String category, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling checkCategoryForVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling checkCategoryForVideo(Async)");
        }

        return checkCategoryForVideoCall(category, videoId, _callback);

    }

    /**
     * Check for a video in a category
     * 
     * @param category The name of the category. (required)
     * @param videoId The ID of the video. (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video belongs to the category. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such category exists, or the video doesn&#39;t belong to it. </td><td>  -  </td></tr>
     </table>
     */
    public Video checkCategoryForVideo(String category, BigDecimal videoId) throws ApiException {
        ApiResponse<Video> localVarResp = checkCategoryForVideoWithHttpInfo(category, videoId);
        return localVarResp.getData();
    }

    /**
     * Check for a video in a category
     * 
     * @param category The name of the category. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video belongs to the category. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such category exists, or the video doesn&#39;t belong to it. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> checkCategoryForVideoWithHttpInfo(String category, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = checkCategoryForVideoValidateBeforeCall(category, videoId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check for a video in a category (asynchronously)
     * 
     * @param category The name of the category. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The video belongs to the category. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such category exists, or the video doesn&#39;t belong to it. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkCategoryForVideoAsync(String category, BigDecimal videoId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkCategoryForVideoValidateBeforeCall(category, videoId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategoryVideos
     * @param category The name of the category. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;conditional_featured&#x60; - Featured (promoted) videos  (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such category exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryVideosCall(String category, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category}/videos"
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryVideosValidateBeforeCall(String category, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling getCategoryVideos(Async)");
        }

        return getCategoryVideosCall(category, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the videos in a category
     * 
     * @param category The name of the category. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;conditional_featured&#x60; - Featured (promoted) videos  (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such category exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getCategoryVideos(String category, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getCategoryVideosWithHttpInfo(category, direction, filter, filterEmbeddable, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the videos in a category
     * 
     * @param category The name of the category. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;conditional_featured&#x60; - Featured (promoted) videos  (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such category exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getCategoryVideosWithHttpInfo(String category, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getCategoryVideosValidateBeforeCall(category, direction, filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos in a category (asynchronously)
     * 
     * @param category The name of the category. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results.  Option descriptions:  * &#x60;conditional_featured&#x60; - Featured (promoted) videos  (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such category exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryVideosAsync(String category, String direction, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryVideosValidateBeforeCall(category, direction, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoCategories
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCategoriesCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/categories"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.category+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoCategoriesValidateBeforeCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoCategories(Async)");
        }

        return getVideoCategoriesCall(videoId, _callback);

    }

    /**
     * Get all the categories to which a video belongs
     * 
     * @param videoId The ID of the video. (required)
     * @return List&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Category> getVideoCategories(BigDecimal videoId) throws ApiException {
        ApiResponse<List<Category>> localVarResp = getVideoCategoriesWithHttpInfo(videoId);
        return localVarResp.getData();
    }

    /**
     * Get all the categories to which a video belongs
     * 
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;List&lt;Category&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Category>> getVideoCategoriesWithHttpInfo(BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = getVideoCategoriesValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the categories to which a video belongs (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCategoriesAsync(BigDecimal videoId, final ApiCallback<List<Category>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoCategoriesValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<List<Category>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for suggestVideoCategory
     * @param videoId The ID of the video. (required)
     * @param suggestVideoCategoryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The categories were suggested. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t own this video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists, or no such category exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suggestVideoCategoryCall(BigDecimal videoId, SuggestVideoCategoryRequest suggestVideoCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = suggestVideoCategoryRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/categories"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.category+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.category+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suggestVideoCategoryValidateBeforeCall(BigDecimal videoId, SuggestVideoCategoryRequest suggestVideoCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling suggestVideoCategory(Async)");
        }

        // verify the required parameter 'suggestVideoCategoryRequest' is set
        if (suggestVideoCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'suggestVideoCategoryRequest' when calling suggestVideoCategory(Async)");
        }

        return suggestVideoCategoryCall(videoId, suggestVideoCategoryRequest, _callback);

    }

    /**
     * Suggest categories for a video
     * With this method, you can suggest up to two categories and one subcategory for a video. Vimeo makes the final determination about whether the video belongs in these categories.
     * @param videoId The ID of the video. (required)
     * @param suggestVideoCategoryRequest  (required)
     * @return Category
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The categories were suggested. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t own this video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists, or no such category exists. </td><td>  -  </td></tr>
     </table>
     */
    public Category suggestVideoCategory(BigDecimal videoId, SuggestVideoCategoryRequest suggestVideoCategoryRequest) throws ApiException {
        ApiResponse<Category> localVarResp = suggestVideoCategoryWithHttpInfo(videoId, suggestVideoCategoryRequest);
        return localVarResp.getData();
    }

    /**
     * Suggest categories for a video
     * With this method, you can suggest up to two categories and one subcategory for a video. Vimeo makes the final determination about whether the video belongs in these categories.
     * @param videoId The ID of the video. (required)
     * @param suggestVideoCategoryRequest  (required)
     * @return ApiResponse&lt;Category&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The categories were suggested. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t own this video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists, or no such category exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Category> suggestVideoCategoryWithHttpInfo(BigDecimal videoId, SuggestVideoCategoryRequest suggestVideoCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = suggestVideoCategoryValidateBeforeCall(videoId, suggestVideoCategoryRequest, null);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Suggest categories for a video (asynchronously)
     * With this method, you can suggest up to two categories and one subcategory for a video. Vimeo makes the final determination about whether the video belongs in these categories.
     * @param videoId The ID of the video. (required)
     * @param suggestVideoCategoryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The categories were suggested. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t own this video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such video exists, or no such category exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suggestVideoCategoryAsync(BigDecimal videoId, SuggestVideoCategoryRequest suggestVideoCategoryRequest, final ApiCallback<Category> _callback) throws ApiException {

        okhttp3.Call localVarCall = suggestVideoCategoryValidateBeforeCall(videoId, suggestVideoCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
