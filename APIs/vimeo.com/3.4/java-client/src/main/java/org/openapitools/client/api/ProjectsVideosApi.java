/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsVideosApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsVideosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsVideosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVideoToProject
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such user, project, or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoToProjectCall(BigDecimal projectId, BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}/videos/{video_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoToProjectValidateBeforeCall(BigDecimal projectId, BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addVideoToProject(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addVideoToProject(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoToProject(Async)");
        }

        return addVideoToProjectCall(projectId, userId, videoId, _callback);

    }

    /**
     * Add a specific video to a project
     * This method adds a single video to the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such user, project, or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public void addVideoToProject(BigDecimal projectId, BigDecimal userId, BigDecimal videoId) throws ApiException {
        addVideoToProjectWithHttpInfo(projectId, userId, videoId);
    }

    /**
     * Add a specific video to a project
     * This method adds a single video to the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such user, project, or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addVideoToProjectWithHttpInfo(BigDecimal projectId, BigDecimal userId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = addVideoToProjectValidateBeforeCall(projectId, userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a specific video to a project (asynchronously)
     * This method adds a single video to the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such user, project, or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoToProjectAsync(BigDecimal projectId, BigDecimal userId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoToProjectValidateBeforeCall(projectId, userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVideoToProjectAlt1
     * @param projectId The ID of the project. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such user, project, or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoToProjectAlt1Call(BigDecimal projectId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}/videos/{video_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoToProjectAlt1ValidateBeforeCall(BigDecimal projectId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addVideoToProjectAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoToProjectAlt1(Async)");
        }

        return addVideoToProjectAlt1Call(projectId, videoId, _callback);

    }

    /**
     * Add a specific video to a project
     * This method adds a single video to the specified project.
     * @param projectId The ID of the project. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such user, project, or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public void addVideoToProjectAlt1(BigDecimal projectId, BigDecimal videoId) throws ApiException {
        addVideoToProjectAlt1WithHttpInfo(projectId, videoId);
    }

    /**
     * Add a specific video to a project
     * This method adds a single video to the specified project.
     * @param projectId The ID of the project. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such user, project, or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addVideoToProjectAlt1WithHttpInfo(BigDecimal projectId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = addVideoToProjectAlt1ValidateBeforeCall(projectId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a specific video to a project (asynchronously)
     * This method adds a single video to the specified project.
     * @param projectId The ID of the project. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was added. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such user, project, or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoToProjectAlt1Async(BigDecimal projectId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoToProjectAlt1ValidateBeforeCall(projectId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVideosToProject
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param uris A comma-separated list of video URIs to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideosToProjectCall(BigDecimal projectId, BigDecimal userId, String uris, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}/videos"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideosToProjectValidateBeforeCall(BigDecimal projectId, BigDecimal userId, String uris, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addVideosToProject(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addVideosToProject(Async)");
        }

        // verify the required parameter 'uris' is set
        if (uris == null) {
            throw new ApiException("Missing the required parameter 'uris' when calling addVideosToProject(Async)");
        }

        return addVideosToProjectCall(projectId, userId, uris, _callback);

    }

    /**
     * Add a list of videos to a project
     * This method adds multiple videos to the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param uris A comma-separated list of video URIs to add. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public void addVideosToProject(BigDecimal projectId, BigDecimal userId, String uris) throws ApiException {
        addVideosToProjectWithHttpInfo(projectId, userId, uris);
    }

    /**
     * Add a list of videos to a project
     * This method adds multiple videos to the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param uris A comma-separated list of video URIs to add. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addVideosToProjectWithHttpInfo(BigDecimal projectId, BigDecimal userId, String uris) throws ApiException {
        okhttp3.Call localVarCall = addVideosToProjectValidateBeforeCall(projectId, userId, uris, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a list of videos to a project (asynchronously)
     * This method adds multiple videos to the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param uris A comma-separated list of video URIs to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideosToProjectAsync(BigDecimal projectId, BigDecimal userId, String uris, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideosToProjectValidateBeforeCall(projectId, userId, uris, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVideosToProjectAlt1
     * @param projectId The ID of the project. (required)
     * @param uris A comma-separated list of video URIs to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideosToProjectAlt1Call(BigDecimal projectId, String uris, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}/videos"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideosToProjectAlt1ValidateBeforeCall(BigDecimal projectId, String uris, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addVideosToProjectAlt1(Async)");
        }

        // verify the required parameter 'uris' is set
        if (uris == null) {
            throw new ApiException("Missing the required parameter 'uris' when calling addVideosToProjectAlt1(Async)");
        }

        return addVideosToProjectAlt1Call(projectId, uris, _callback);

    }

    /**
     * Add a list of videos to a project
     * This method adds multiple videos to the specified project.
     * @param projectId The ID of the project. (required)
     * @param uris A comma-separated list of video URIs to add. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public void addVideosToProjectAlt1(BigDecimal projectId, String uris) throws ApiException {
        addVideosToProjectAlt1WithHttpInfo(projectId, uris);
    }

    /**
     * Add a list of videos to a project
     * This method adds multiple videos to the specified project.
     * @param projectId The ID of the project. (required)
     * @param uris A comma-separated list of video URIs to add. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addVideosToProjectAlt1WithHttpInfo(BigDecimal projectId, String uris) throws ApiException {
        okhttp3.Call localVarCall = addVideosToProjectAlt1ValidateBeforeCall(projectId, uris, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a list of videos to a project (asynchronously)
     * This method adds multiple videos to the specified project.
     * @param projectId The ID of the project. (required)
     * @param uris A comma-separated list of video URIs to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project or video exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideosToProjectAlt1Async(BigDecimal projectId, String uris, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideosToProjectAlt1ValidateBeforeCall(projectId, uris, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectVideos
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectVideosCall(BigDecimal projectId, BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}/videos"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectVideosValidateBeforeCall(BigDecimal projectId, BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectVideos(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getProjectVideos(Async)");
        }

        return getProjectVideosCall(projectId, userId, direction, page, perPage, sort, _callback);

    }

    /**
     * Get all the videos in a project
     * This method gets all the videos that belong to the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getProjectVideos(BigDecimal projectId, BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getProjectVideosWithHttpInfo(projectId, userId, direction, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the videos in a project
     * This method gets all the videos that belong to the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getProjectVideosWithHttpInfo(BigDecimal projectId, BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getProjectVideosValidateBeforeCall(projectId, userId, direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos in a project (asynchronously)
     * This method gets all the videos that belong to the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectVideosAsync(BigDecimal projectId, BigDecimal userId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectVideosValidateBeforeCall(projectId, userId, direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectVideosAlt1
     * @param projectId The ID of the project. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectVideosAlt1Call(BigDecimal projectId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}/videos"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectVideosAlt1ValidateBeforeCall(BigDecimal projectId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectVideosAlt1(Async)");
        }

        return getProjectVideosAlt1Call(projectId, direction, page, perPage, sort, _callback);

    }

    /**
     * Get all the videos in a project
     * This method gets all the videos that belong to the specified project.
     * @param projectId The ID of the project. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getProjectVideosAlt1(BigDecimal projectId, String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getProjectVideosAlt1WithHttpInfo(projectId, direction, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the videos in a project
     * This method gets all the videos that belong to the specified project.
     * @param projectId The ID of the project. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getProjectVideosAlt1WithHttpInfo(BigDecimal projectId, String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getProjectVideosAlt1ValidateBeforeCall(projectId, direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos in a project (asynchronously)
     * This method gets all the videos that belong to the specified project.
     * @param projectId The ID of the project. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectVideosAlt1Async(BigDecimal projectId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectVideosAlt1ValidateBeforeCall(projectId, direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVideoFromProject
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such video exists in the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVideoFromProjectCall(BigDecimal projectId, BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}/videos/{video_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVideoFromProjectValidateBeforeCall(BigDecimal projectId, BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling removeVideoFromProject(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeVideoFromProject(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeVideoFromProject(Async)");
        }

        return removeVideoFromProjectCall(projectId, userId, videoId, _callback);

    }

    /**
     * Remove a specific video from a project
     * This method removes a single video from the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such video exists in the project. </td><td>  -  </td></tr>
     </table>
     */
    public void removeVideoFromProject(BigDecimal projectId, BigDecimal userId, BigDecimal videoId) throws ApiException {
        removeVideoFromProjectWithHttpInfo(projectId, userId, videoId);
    }

    /**
     * Remove a specific video from a project
     * This method removes a single video from the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such video exists in the project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeVideoFromProjectWithHttpInfo(BigDecimal projectId, BigDecimal userId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = removeVideoFromProjectValidateBeforeCall(projectId, userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a specific video from a project (asynchronously)
     * This method removes a single video from the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such video exists in the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVideoFromProjectAsync(BigDecimal projectId, BigDecimal userId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVideoFromProjectValidateBeforeCall(projectId, userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVideoFromProjectAlt1
     * @param projectId The ID of the project. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such video exists in the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVideoFromProjectAlt1Call(BigDecimal projectId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}/videos/{video_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVideoFromProjectAlt1ValidateBeforeCall(BigDecimal projectId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling removeVideoFromProjectAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeVideoFromProjectAlt1(Async)");
        }

        return removeVideoFromProjectAlt1Call(projectId, videoId, _callback);

    }

    /**
     * Remove a specific video from a project
     * This method removes a single video from the specified project.
     * @param projectId The ID of the project. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such video exists in the project. </td><td>  -  </td></tr>
     </table>
     */
    public void removeVideoFromProjectAlt1(BigDecimal projectId, BigDecimal videoId) throws ApiException {
        removeVideoFromProjectAlt1WithHttpInfo(projectId, videoId);
    }

    /**
     * Remove a specific video from a project
     * This method removes a single video from the specified project.
     * @param projectId The ID of the project. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such video exists in the project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeVideoFromProjectAlt1WithHttpInfo(BigDecimal projectId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = removeVideoFromProjectAlt1ValidateBeforeCall(projectId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a specific video from a project (asynchronously)
     * This method removes a single video from the specified project.
     * @param projectId The ID of the project. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such video exists in the project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVideoFromProjectAlt1Async(BigDecimal projectId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVideoFromProjectAlt1ValidateBeforeCall(projectId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVideosFromProject
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param uris A comma-separated list of the video URIs to remove. (required)
     * @param shouldDeleteClips Whether to delete the videos when removing them from the project. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVideosFromProjectCall(BigDecimal projectId, BigDecimal userId, String uris, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/projects/{project_id}/videos"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shouldDeleteClips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("should_delete_clips", shouldDeleteClips));
        }

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVideosFromProjectValidateBeforeCall(BigDecimal projectId, BigDecimal userId, String uris, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling removeVideosFromProject(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeVideosFromProject(Async)");
        }

        // verify the required parameter 'uris' is set
        if (uris == null) {
            throw new ApiException("Missing the required parameter 'uris' when calling removeVideosFromProject(Async)");
        }

        return removeVideosFromProjectCall(projectId, userId, uris, shouldDeleteClips, _callback);

    }

    /**
     * Remove a list of videos from a project
     * This method removed multiple videos from the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param uris A comma-separated list of the video URIs to remove. (required)
     * @param shouldDeleteClips Whether to delete the videos when removing them from the project. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public void removeVideosFromProject(BigDecimal projectId, BigDecimal userId, String uris, Boolean shouldDeleteClips) throws ApiException {
        removeVideosFromProjectWithHttpInfo(projectId, userId, uris, shouldDeleteClips);
    }

    /**
     * Remove a list of videos from a project
     * This method removed multiple videos from the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param uris A comma-separated list of the video URIs to remove. (required)
     * @param shouldDeleteClips Whether to delete the videos when removing them from the project. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeVideosFromProjectWithHttpInfo(BigDecimal projectId, BigDecimal userId, String uris, Boolean shouldDeleteClips) throws ApiException {
        okhttp3.Call localVarCall = removeVideosFromProjectValidateBeforeCall(projectId, userId, uris, shouldDeleteClips, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a list of videos from a project (asynchronously)
     * This method removed multiple videos from the specified project.
     * @param projectId The ID of the project. (required)
     * @param userId The ID of the user. (required)
     * @param uris A comma-separated list of the video URIs to remove. (required)
     * @param shouldDeleteClips Whether to delete the videos when removing them from the project. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVideosFromProjectAsync(BigDecimal projectId, BigDecimal userId, String uris, Boolean shouldDeleteClips, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVideosFromProjectValidateBeforeCall(projectId, userId, uris, shouldDeleteClips, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVideosFromProjectAlt1
     * @param projectId The ID of the project. (required)
     * @param uris A comma-separated list of the video URIs to remove. (required)
     * @param shouldDeleteClips Whether to delete the videos when removing them from the project. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVideosFromProjectAlt1Call(BigDecimal projectId, String uris, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/projects/{project_id}/videos"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shouldDeleteClips != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("should_delete_clips", shouldDeleteClips));
        }

        if (uris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uris", uris));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVideosFromProjectAlt1ValidateBeforeCall(BigDecimal projectId, String uris, Boolean shouldDeleteClips, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling removeVideosFromProjectAlt1(Async)");
        }

        // verify the required parameter 'uris' is set
        if (uris == null) {
            throw new ApiException("Missing the required parameter 'uris' when calling removeVideosFromProjectAlt1(Async)");
        }

        return removeVideosFromProjectAlt1Call(projectId, uris, shouldDeleteClips, _callback);

    }

    /**
     * Remove a list of videos from a project
     * This method removed multiple videos from the specified project.
     * @param projectId The ID of the project. (required)
     * @param uris A comma-separated list of the video URIs to remove. (required)
     * @param shouldDeleteClips Whether to delete the videos when removing them from the project. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public void removeVideosFromProjectAlt1(BigDecimal projectId, String uris, Boolean shouldDeleteClips) throws ApiException {
        removeVideosFromProjectAlt1WithHttpInfo(projectId, uris, shouldDeleteClips);
    }

    /**
     * Remove a list of videos from a project
     * This method removed multiple videos from the specified project.
     * @param projectId The ID of the project. (required)
     * @param uris A comma-separated list of the video URIs to remove. (required)
     * @param shouldDeleteClips Whether to delete the videos when removing them from the project. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeVideosFromProjectAlt1WithHttpInfo(BigDecimal projectId, String uris, Boolean shouldDeleteClips) throws ApiException {
        okhttp3.Call localVarCall = removeVideosFromProjectAlt1ValidateBeforeCall(projectId, uris, shouldDeleteClips, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a list of videos from a project (asynchronously)
     * This method removed multiple videos from the specified project.
     * @param projectId The ID of the project. (required)
     * @param uris A comma-separated list of the video URIs to remove. (required)
     * @param shouldDeleteClips Whether to delete the videos when removing them from the project. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The videos were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error code 2204: The input is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8000: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 5000: No such project exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVideosFromProjectAlt1Async(BigDecimal projectId, String uris, Boolean shouldDeleteClips, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVideosFromProjectAlt1ValidateBeforeCall(projectId, uris, shouldDeleteClips, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
