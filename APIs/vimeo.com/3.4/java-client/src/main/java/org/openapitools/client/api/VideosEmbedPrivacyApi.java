/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Domain;
import org.openapitools.client.model.LegacyError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideosEmbedPrivacyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosEmbedPrivacyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideosEmbedPrivacyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVideoPrivacyDomain
     * @param domain The domain name. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video is now embeddable on the domain. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video doesn&#39;t have a user-defined access list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoPrivacyDomainCall(String domain, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/privacy/domains/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoPrivacyDomainValidateBeforeCall(String domain, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling addVideoPrivacyDomain(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoPrivacyDomain(Async)");
        }

        return addVideoPrivacyDomainCall(domain, videoId, _callback);

    }

    /**
     * Permit a video to be embedded on a domain
     * If domain privacy is enabled for this video, this method permits the video to be embedded on the specified domain.
     * @param domain The domain name. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video is now embeddable on the domain. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video doesn&#39;t have a user-defined access list. </td><td>  -  </td></tr>
     </table>
     */
    public void addVideoPrivacyDomain(String domain, BigDecimal videoId) throws ApiException {
        addVideoPrivacyDomainWithHttpInfo(domain, videoId);
    }

    /**
     * Permit a video to be embedded on a domain
     * If domain privacy is enabled for this video, this method permits the video to be embedded on the specified domain.
     * @param domain The domain name. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video is now embeddable on the domain. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video doesn&#39;t have a user-defined access list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addVideoPrivacyDomainWithHttpInfo(String domain, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = addVideoPrivacyDomainValidateBeforeCall(domain, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Permit a video to be embedded on a domain (asynchronously)
     * If domain privacy is enabled for this video, this method permits the video to be embedded on the specified domain.
     * @param domain The domain name. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video is now embeddable on the domain. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video doesn&#39;t have a user-defined access list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoPrivacyDomainAsync(String domain, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoPrivacyDomainValidateBeforeCall(domain, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVideoPrivacyDomain
     * @param domain The domain name. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was disallowed from being embedded on the domain. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video isn&#39;t set to a user-defined access list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such domain exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoPrivacyDomainCall(String domain, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/privacy/domains/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoPrivacyDomainValidateBeforeCall(String domain, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteVideoPrivacyDomain(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteVideoPrivacyDomain(Async)");
        }

        return deleteVideoPrivacyDomainCall(domain, videoId, _callback);

    }

    /**
     * Restrict a video from being embedded on a domain
     * 
     * @param domain The domain name. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was disallowed from being embedded on the domain. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video isn&#39;t set to a user-defined access list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such domain exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVideoPrivacyDomain(String domain, BigDecimal videoId) throws ApiException {
        deleteVideoPrivacyDomainWithHttpInfo(domain, videoId);
    }

    /**
     * Restrict a video from being embedded on a domain
     * 
     * @param domain The domain name. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was disallowed from being embedded on the domain. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video isn&#39;t set to a user-defined access list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such domain exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVideoPrivacyDomainWithHttpInfo(String domain, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoPrivacyDomainValidateBeforeCall(domain, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restrict a video from being embedded on a domain (asynchronously)
     * 
     * @param domain The domain name. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was disallowed from being embedded on the domain. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The video isn&#39;t set to a user-defined access list. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such domain exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoPrivacyDomainAsync(String domain, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoPrivacyDomainValidateBeforeCall(domain, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoPrivacyDomains
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domains were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> There are no domains on which the video can be embedded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoPrivacyDomainsCall(BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/privacy/domains"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.domain+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoPrivacyDomainsValidateBeforeCall(BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoPrivacyDomains(Async)");
        }

        return getVideoPrivacyDomainsCall(videoId, page, perPage, _callback);

    }

    /**
     * Get all the domains on which a video can be embedded
     * 
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Domain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domains were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> There are no domains on which the video can be embedded. </td><td>  -  </td></tr>
     </table>
     */
    public List<Domain> getVideoPrivacyDomains(BigDecimal videoId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Domain>> localVarResp = getVideoPrivacyDomainsWithHttpInfo(videoId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the domains on which a video can be embedded
     * 
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Domain&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domains were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> There are no domains on which the video can be embedded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Domain>> getVideoPrivacyDomainsWithHttpInfo(BigDecimal videoId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getVideoPrivacyDomainsValidateBeforeCall(videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Domain>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the domains on which a video can be embedded (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The domains were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> There are no domains on which the video can be embedded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoPrivacyDomainsAsync(BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback<List<Domain>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoPrivacyDomainsValidateBeforeCall(videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Domain>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
