/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PresetsSettingsOutroLink;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PresetsSettingsOutro
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PresetsSettingsOutro {
  public static final String SERIALIZED_NAME_CLIPS = "clips";
  @SerializedName(SERIALIZED_NAME_CLIPS)
  private String clips;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private PresetsSettingsOutroLink link;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  /**
   * The preset outro type:
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    LINK("link"),
    
    NO_IDEA("no idea"),
    
    TEXT("text"),
    
    UPLOADED_CLIPS("uploaded_clips"),
    
    UPLOADED_VIDEOS("uploaded_videos");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private String videos;

  public PresetsSettingsOutro() {
  }

  public PresetsSettingsOutro clips(String clips) {
    this.clips = clips;
    return this;
  }

  /**
   * A comma-separated list of video URIs. Present only if the type is &#x60;uploaded_clips&#x60;.
   * @return clips
   */
  @javax.annotation.Nullable
  public String getClips() {
    return clips;
  }

  public void setClips(String clips) {
    this.clips = clips;
  }


  public PresetsSettingsOutro link(PresetsSettingsOutroLink link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public PresetsSettingsOutroLink getLink() {
    return link;
  }

  public void setLink(PresetsSettingsOutroLink link) {
    this.link = link;
  }


  public PresetsSettingsOutro text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The outro text. Present only if the type is &#x60;text&#x60;.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public PresetsSettingsOutro type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The preset outro type:
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public PresetsSettingsOutro videos(String videos) {
    this.videos = videos;
    return this;
  }

  /**
   * A comma-separated list of video URIs. Present only if type is &#x60;no idea&#x60;.
   * @return videos
   */
  @javax.annotation.Nullable
  public String getVideos() {
    return videos;
  }

  public void setVideos(String videos) {
    this.videos = videos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PresetsSettingsOutro presetsSettingsOutro = (PresetsSettingsOutro) o;
    return Objects.equals(this.clips, presetsSettingsOutro.clips) &&
        Objects.equals(this.link, presetsSettingsOutro.link) &&
        Objects.equals(this.text, presetsSettingsOutro.text) &&
        Objects.equals(this.type, presetsSettingsOutro.type) &&
        Objects.equals(this.videos, presetsSettingsOutro.videos);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(clips, link, text, type, videos);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PresetsSettingsOutro {\n");
    sb.append("    clips: ").append(toIndentedString(clips)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clips");
    openapiFields.add("link");
    openapiFields.add("text");
    openapiFields.add("type");
    openapiFields.add("videos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PresetsSettingsOutro
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PresetsSettingsOutro.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PresetsSettingsOutro is not found in the empty JSON string", PresetsSettingsOutro.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PresetsSettingsOutro.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PresetsSettingsOutro` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PresetsSettingsOutro.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clips") != null && !jsonObj.get("clips").isJsonNull()) && !jsonObj.get("clips").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clips` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clips").toString()));
      }
      // validate the optional field `link`
      if (jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) {
        PresetsSettingsOutroLink.validateJsonElement(jsonObj.get("link"));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("videos") != null && !jsonObj.get("videos").isJsonNull()) && !jsonObj.get("videos").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videos` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videos").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PresetsSettingsOutro.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PresetsSettingsOutro' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PresetsSettingsOutro> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PresetsSettingsOutro.class));

       return (TypeAdapter<T>) new TypeAdapter<PresetsSettingsOutro>() {
           @Override
           public void write(JsonWriter out, PresetsSettingsOutro value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PresetsSettingsOutro read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PresetsSettingsOutro given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PresetsSettingsOutro
   * @throws IOException if the JSON string is invalid with respect to PresetsSettingsOutro
   */
  public static PresetsSettingsOutro fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PresetsSettingsOutro.class);
  }

  /**
   * Convert an instance of PresetsSettingsOutro to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

