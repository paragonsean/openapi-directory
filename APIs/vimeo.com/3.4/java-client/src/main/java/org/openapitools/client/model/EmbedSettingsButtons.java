/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collection of information about the buttons that appear on the interface of the embeddable player.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EmbedSettingsButtons {
  public static final String SERIALIZED_NAME_EMBED = "embed";
  @SerializedName(SERIALIZED_NAME_EMBED)
  private Boolean embed;

  public static final String SERIALIZED_NAME_FULLSCREEN = "fullscreen";
  @SerializedName(SERIALIZED_NAME_FULLSCREEN)
  private Boolean fullscreen;

  public static final String SERIALIZED_NAME_HD = "hd";
  @SerializedName(SERIALIZED_NAME_HD)
  private Boolean hd;

  public static final String SERIALIZED_NAME_LIKE = "like";
  @SerializedName(SERIALIZED_NAME_LIKE)
  private Boolean like;

  public static final String SERIALIZED_NAME_SCALING = "scaling";
  @SerializedName(SERIALIZED_NAME_SCALING)
  private Boolean scaling;

  public static final String SERIALIZED_NAME_SHARE = "share";
  @SerializedName(SERIALIZED_NAME_SHARE)
  private Boolean share;

  public static final String SERIALIZED_NAME_WATCHLATER = "watchlater";
  @SerializedName(SERIALIZED_NAME_WATCHLATER)
  private Boolean watchlater;

  public EmbedSettingsButtons() {
  }

  public EmbedSettingsButtons embed(Boolean embed) {
    this.embed = embed;
    return this;
  }

  /**
   * Whether the Embed button appears in the embeddable player for this video.
   * @return embed
   */
  @javax.annotation.Nonnull
  public Boolean getEmbed() {
    return embed;
  }

  public void setEmbed(Boolean embed) {
    this.embed = embed;
  }


  public EmbedSettingsButtons fullscreen(Boolean fullscreen) {
    this.fullscreen = fullscreen;
    return this;
  }

  /**
   * Whether the Fullscreen button appears in the embeddable player for this video.
   * @return fullscreen
   */
  @javax.annotation.Nonnull
  public Boolean getFullscreen() {
    return fullscreen;
  }

  public void setFullscreen(Boolean fullscreen) {
    this.fullscreen = fullscreen;
  }


  public EmbedSettingsButtons hd(Boolean hd) {
    this.hd = hd;
    return this;
  }

  /**
   * Whether the HD button appears in the embeddable player for this video.
   * @return hd
   */
  @javax.annotation.Nonnull
  public Boolean getHd() {
    return hd;
  }

  public void setHd(Boolean hd) {
    this.hd = hd;
  }


  public EmbedSettingsButtons like(Boolean like) {
    this.like = like;
    return this;
  }

  /**
   * Whether the Like button appears in the embeddable player for this video.
   * @return like
   */
  @javax.annotation.Nonnull
  public Boolean getLike() {
    return like;
  }

  public void setLike(Boolean like) {
    this.like = like;
  }


  public EmbedSettingsButtons scaling(Boolean scaling) {
    this.scaling = scaling;
    return this;
  }

  /**
   * Whether the Scaling button appears in the embeddable player for this video.
   * @return scaling
   */
  @javax.annotation.Nonnull
  public Boolean getScaling() {
    return scaling;
  }

  public void setScaling(Boolean scaling) {
    this.scaling = scaling;
  }


  public EmbedSettingsButtons share(Boolean share) {
    this.share = share;
    return this;
  }

  /**
   * Whether the Share button appears in the embeddable player for this video.
   * @return share
   */
  @javax.annotation.Nonnull
  public Boolean getShare() {
    return share;
  }

  public void setShare(Boolean share) {
    this.share = share;
  }


  public EmbedSettingsButtons watchlater(Boolean watchlater) {
    this.watchlater = watchlater;
    return this;
  }

  /**
   * Whether the Watch Later button appears in the embeddable player for this video.
   * @return watchlater
   */
  @javax.annotation.Nonnull
  public Boolean getWatchlater() {
    return watchlater;
  }

  public void setWatchlater(Boolean watchlater) {
    this.watchlater = watchlater;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmbedSettingsButtons embedSettingsButtons = (EmbedSettingsButtons) o;
    return Objects.equals(this.embed, embedSettingsButtons.embed) &&
        Objects.equals(this.fullscreen, embedSettingsButtons.fullscreen) &&
        Objects.equals(this.hd, embedSettingsButtons.hd) &&
        Objects.equals(this.like, embedSettingsButtons.like) &&
        Objects.equals(this.scaling, embedSettingsButtons.scaling) &&
        Objects.equals(this.share, embedSettingsButtons.share) &&
        Objects.equals(this.watchlater, embedSettingsButtons.watchlater);
  }

  @Override
  public int hashCode() {
    return Objects.hash(embed, fullscreen, hd, like, scaling, share, watchlater);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmbedSettingsButtons {\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    fullscreen: ").append(toIndentedString(fullscreen)).append("\n");
    sb.append("    hd: ").append(toIndentedString(hd)).append("\n");
    sb.append("    like: ").append(toIndentedString(like)).append("\n");
    sb.append("    scaling: ").append(toIndentedString(scaling)).append("\n");
    sb.append("    share: ").append(toIndentedString(share)).append("\n");
    sb.append("    watchlater: ").append(toIndentedString(watchlater)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("embed");
    openapiFields.add("fullscreen");
    openapiFields.add("hd");
    openapiFields.add("like");
    openapiFields.add("scaling");
    openapiFields.add("share");
    openapiFields.add("watchlater");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("embed");
    openapiRequiredFields.add("fullscreen");
    openapiRequiredFields.add("hd");
    openapiRequiredFields.add("like");
    openapiRequiredFields.add("scaling");
    openapiRequiredFields.add("share");
    openapiRequiredFields.add("watchlater");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmbedSettingsButtons
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmbedSettingsButtons.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmbedSettingsButtons is not found in the empty JSON string", EmbedSettingsButtons.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmbedSettingsButtons.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmbedSettingsButtons` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmbedSettingsButtons.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmbedSettingsButtons.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmbedSettingsButtons' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmbedSettingsButtons> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmbedSettingsButtons.class));

       return (TypeAdapter<T>) new TypeAdapter<EmbedSettingsButtons>() {
           @Override
           public void write(JsonWriter out, EmbedSettingsButtons value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmbedSettingsButtons read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmbedSettingsButtons given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmbedSettingsButtons
   * @throws IOException if the JSON string is invalid with respect to EmbedSettingsButtons
   */
  public static EmbedSettingsButtons fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmbedSettingsButtons.class);
  }

  /**
   * Convert an instance of EmbedSettingsButtons to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

