/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.User;
import org.openapitools.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LikesEssentialsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LikesEssentialsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LikesEssentialsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkIfUserLikedVideo
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user hasn&#39;t liked the video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserLikedVideoCall(BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/likes/{video_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkIfUserLikedVideoValidateBeforeCall(BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling checkIfUserLikedVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling checkIfUserLikedVideo(Async)");
        }

        return checkIfUserLikedVideoCall(userId, videoId, _callback);

    }

    /**
     * Check if a user has liked a video
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user hasn&#39;t liked the video. </td><td>  -  </td></tr>
     </table>
     */
    public void checkIfUserLikedVideo(BigDecimal userId, BigDecimal videoId) throws ApiException {
        checkIfUserLikedVideoWithHttpInfo(userId, videoId);
    }

    /**
     * Check if a user has liked a video
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user hasn&#39;t liked the video. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkIfUserLikedVideoWithHttpInfo(BigDecimal userId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = checkIfUserLikedVideoValidateBeforeCall(userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a user has liked a video (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user hasn&#39;t liked the video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserLikedVideoAsync(BigDecimal userId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkIfUserLikedVideoValidateBeforeCall(userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkIfUserLikedVideoAlt1
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user hasn&#39;t liked the video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserLikedVideoAlt1Call(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/likes/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkIfUserLikedVideoAlt1ValidateBeforeCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling checkIfUserLikedVideoAlt1(Async)");
        }

        return checkIfUserLikedVideoAlt1Call(videoId, _callback);

    }

    /**
     * Check if a user has liked a video
     * 
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user hasn&#39;t liked the video. </td><td>  -  </td></tr>
     </table>
     */
    public void checkIfUserLikedVideoAlt1(BigDecimal videoId) throws ApiException {
        checkIfUserLikedVideoAlt1WithHttpInfo(videoId);
    }

    /**
     * Check if a user has liked a video
     * 
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user hasn&#39;t liked the video. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkIfUserLikedVideoAlt1WithHttpInfo(BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = checkIfUserLikedVideoAlt1ValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Check if a user has liked a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user has liked the video. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The user hasn&#39;t liked the video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkIfUserLikedVideoAlt1Async(BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkIfUserLikedVideoAlt1ValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLikes
     * @param userId The ID of the user. (required)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLikesCall(BigDecimal userId, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/likes"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLikesValidateBeforeCall(BigDecimal userId, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getLikes(Async)");
        }

        return getLikesCall(userId, filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the videos that a user has liked
     * 
     * @param userId The ID of the user. (required)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getLikes(BigDecimal userId, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getLikesWithHttpInfo(userId, filter, filterEmbeddable, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the videos that a user has liked
     * 
     * @param userId The ID of the user. (required)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getLikesWithHttpInfo(BigDecimal userId, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getLikesValidateBeforeCall(userId, filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos that a user has liked (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLikesAsync(BigDecimal userId, String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLikesValidateBeforeCall(userId, filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLikesAlt1
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLikesAlt1Call(String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/likes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (filterEmbeddable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_embeddable", filterEmbeddable));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLikesAlt1ValidateBeforeCall(String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback _callback) throws ApiException {
        return getLikesAlt1Call(filter, filterEmbeddable, page, perPage, query, sort, _callback);

    }

    /**
     * Get all the videos that a user has liked
     * 
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getLikesAlt1(String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getLikesAlt1WithHttpInfo(filter, filterEmbeddable, page, perPage, query, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the videos that a user has liked
     * 
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getLikesAlt1WithHttpInfo(String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort) throws ApiException {
        okhttp3.Call localVarCall = getLikesAlt1ValidateBeforeCall(filter, filterEmbeddable, page, perPage, query, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos that a user has liked (asynchronously)
     * 
     * @param filter The attribute by which to filter the results. (optional)
     * @param filterEmbeddable Whether to filter the results by embeddable videos (&#x60;true&#x60;) or non-embeddable videos (&#x60;false&#x60;). Required only if **filter** is &#x60;embeddable&#x60;. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param query The search query to use to filter the results. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLikesAlt1Async(String filter, Boolean filterEmbeddable, BigDecimal page, BigDecimal perPage, String query, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLikesAlt1ValidateBeforeCall(filter, filterEmbeddable, page, perPage, query, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoLikes
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoLikesCall(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/likes"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoLikesValidateBeforeCall(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoLikes(Async)");
        }

        return getVideoLikesCall(videoId, direction, page, perPage, sort, _callback);

    }

    /**
     * Get all the users who have liked a video
     * 
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> getVideoLikes(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        ApiResponse<List<User>> localVarResp = getVideoLikesWithHttpInfo(videoId, direction, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the users who have liked a video
     * 
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> getVideoLikesWithHttpInfo(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getVideoLikesValidateBeforeCall(videoId, direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the users who have liked a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoLikesAsync(BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoLikesValidateBeforeCall(videoId, direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoLikesAlt1
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoLikesAlt1Call(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/likes"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoLikesAlt1ValidateBeforeCall(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getVideoLikesAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoLikesAlt1(Async)");
        }

        return getVideoLikesAlt1Call(channelId, videoId, direction, page, perPage, sort, _callback);

    }

    /**
     * Get all the users who have liked a video
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> getVideoLikesAlt1(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        ApiResponse<List<User>> localVarResp = getVideoLikesAlt1WithHttpInfo(channelId, videoId, direction, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the users who have liked a video
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> getVideoLikesAlt1WithHttpInfo(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getVideoLikesAlt1ValidateBeforeCall(channelId, videoId, direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the users who have liked a video (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoLikesAlt1Async(BigDecimal channelId, BigDecimal videoId, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoLikesAlt1ValidateBeforeCall(channelId, videoId, direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVodLikes
     * @param ondemandId The ID of the On Demand page. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodLikesCall(BigDecimal ondemandId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}/likes"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodLikesValidateBeforeCall(BigDecimal ondemandId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVodLikes(Async)");
        }

        return getVodLikesCall(ondemandId, direction, filter, page, perPage, sort, _callback);

    }

    /**
     * Get all the users who have liked a video on an On Demand page
     * This method gets all the users who have liked a particular video on an On Demand page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> getVodLikes(BigDecimal ondemandId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        ApiResponse<List<User>> localVarResp = getVodLikesWithHttpInfo(ondemandId, direction, filter, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the users who have liked a video on an On Demand page
     * This method gets all the users who have liked a particular video on an On Demand page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> getVodLikesWithHttpInfo(BigDecimal ondemandId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getVodLikesValidateBeforeCall(ondemandId, direction, filter, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the users who have liked a video on an On Demand page (asynchronously)
     * This method gets all the users who have liked a particular video on an On Demand page.
     * @param ondemandId The ID of the On Demand page. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The attribute by which to filter the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodLikesAsync(BigDecimal ondemandId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodLikesValidateBeforeCall(ondemandId, direction, filter, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for likeVideo
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call likeVideoCall(BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/likes/{video_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call likeVideoValidateBeforeCall(BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling likeVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling likeVideo(Async)");
        }

        return likeVideoCall(userId, videoId, _callback);

    }

    /**
     * Cause a user to like a video
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public void likeVideo(BigDecimal userId, BigDecimal videoId) throws ApiException {
        likeVideoWithHttpInfo(userId, videoId);
    }

    /**
     * Cause a user to like a video
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> likeVideoWithHttpInfo(BigDecimal userId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = likeVideoValidateBeforeCall(userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cause a user to like a video (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call likeVideoAsync(BigDecimal userId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = likeVideoValidateBeforeCall(userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for likeVideoAlt1
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call likeVideoAlt1Call(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/likes/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call likeVideoAlt1ValidateBeforeCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling likeVideoAlt1(Async)");
        }

        return likeVideoAlt1Call(videoId, _callback);

    }

    /**
     * Cause a user to like a video
     * 
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public void likeVideoAlt1(BigDecimal videoId) throws ApiException {
        likeVideoAlt1WithHttpInfo(videoId);
    }

    /**
     * Cause a user to like a video
     * 
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> likeVideoAlt1WithHttpInfo(BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = likeVideoAlt1ValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cause a user to like a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was liked. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The authenticated user owns the video. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call likeVideoAlt1Async(BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = likeVideoAlt1ValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlikeVideo
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlikeVideoCall(BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/likes/{video_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlikeVideoValidateBeforeCall(BigDecimal userId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling unlikeVideo(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling unlikeVideo(Async)");
        }

        return unlikeVideoCall(userId, videoId, _callback);

    }

    /**
     * Cause a user to unlike a video
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public void unlikeVideo(BigDecimal userId, BigDecimal videoId) throws ApiException {
        unlikeVideoWithHttpInfo(userId, videoId);
    }

    /**
     * Cause a user to unlike a video
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unlikeVideoWithHttpInfo(BigDecimal userId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = unlikeVideoValidateBeforeCall(userId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cause a user to unlike a video (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlikeVideoAsync(BigDecimal userId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlikeVideoValidateBeforeCall(userId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlikeVideoAlt1
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlikeVideoAlt1Call(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/likes/{video_id}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlikeVideoAlt1ValidateBeforeCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling unlikeVideoAlt1(Async)");
        }

        return unlikeVideoAlt1Call(videoId, _callback);

    }

    /**
     * Cause a user to unlike a video
     * 
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public void unlikeVideoAlt1(BigDecimal videoId) throws ApiException {
        unlikeVideoAlt1WithHttpInfo(videoId);
    }

    /**
     * Cause a user to unlike a video
     * 
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unlikeVideoAlt1WithHttpInfo(BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = unlikeVideoAlt1ValidateBeforeCall(videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cause a user to unlike a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The video was unliked. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t like videos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlikeVideoAlt1Async(BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlikeVideoAlt1ValidateBeforeCall(videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
