/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EditVideoRequestPrivacy;
import org.openapitools.client.model.UploadVideoAlt1RequestEmbed;
import org.openapitools.client.model.UploadVideoAlt1RequestRatings;
import org.openapitools.client.model.UploadVideoAlt1RequestReviewPage;
import org.openapitools.client.model.UploadVideoAlt1RequestSpatial;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EditVideoRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EditVideoRequest {
  public static final String SERIALIZED_NAME_CONTENT_RATING = "content_rating";
  @SerializedName(SERIALIZED_NAME_CONTENT_RATING)
  private List<String> contentRating = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMBED = "embed";
  @SerializedName(SERIALIZED_NAME_EMBED)
  private UploadVideoAlt1RequestEmbed embed;

  /**
   * The Creative Commons license.
   */
  @JsonAdapter(LicenseEnum.Adapter.class)
  public enum LicenseEnum {
    BY("by"),
    
    BY_NC("by-nc"),
    
    BY_NC_ND("by-nc-nd"),
    
    BY_NC_SA("by-nc-sa"),
    
    BY_ND("by-nd"),
    
    BY_SA("by-sa"),
    
    CC0("cc0");

    private String value;

    LicenseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseEnum fromValue(String value) {
      for (LicenseEnum b : LicenseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicenseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicenseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LicenseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LicenseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private LicenseEnum license;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private EditVideoRequestPrivacy privacy;

  public static final String SERIALIZED_NAME_RATINGS = "ratings";
  @SerializedName(SERIALIZED_NAME_RATINGS)
  private UploadVideoAlt1RequestRatings ratings;

  public static final String SERIALIZED_NAME_REVIEW_PAGE = "review_page";
  @SerializedName(SERIALIZED_NAME_REVIEW_PAGE)
  private UploadVideoAlt1RequestReviewPage reviewPage;

  public static final String SERIALIZED_NAME_SPATIAL = "spatial";
  @SerializedName(SERIALIZED_NAME_SPATIAL)
  private UploadVideoAlt1RequestSpatial spatial;

  public EditVideoRequest() {
  }

  public EditVideoRequest contentRating(List<String> contentRating) {
    this.contentRating = contentRating;
    return this;
  }

  public EditVideoRequest addContentRatingItem(String contentRatingItem) {
    if (this.contentRating == null) {
      this.contentRating = new ArrayList<>();
    }
    this.contentRating.add(contentRatingItem);
    return this;
  }

  /**
   * A list of values describing the content in this video. You can find the full list in the [&#x60;/contentratings&#x60;](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint.
   * @return contentRating
   */
  @javax.annotation.Nullable
  public List<String> getContentRating() {
    return contentRating;
  }

  public void setContentRating(List<String> contentRating) {
    this.contentRating = contentRating;
  }


  public EditVideoRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The new description of the video.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EditVideoRequest embed(UploadVideoAlt1RequestEmbed embed) {
    this.embed = embed;
    return this;
  }

  /**
   * Get embed
   * @return embed
   */
  @javax.annotation.Nullable
  public UploadVideoAlt1RequestEmbed getEmbed() {
    return embed;
  }

  public void setEmbed(UploadVideoAlt1RequestEmbed embed) {
    this.embed = embed;
  }


  public EditVideoRequest license(LicenseEnum license) {
    this.license = license;
    return this;
  }

  /**
   * The Creative Commons license.
   * @return license
   */
  @javax.annotation.Nullable
  public LicenseEnum getLicense() {
    return license;
  }

  public void setLicense(LicenseEnum license) {
    this.license = license;
  }


  public EditVideoRequest locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * The video&#39;s default language. For a full list of valid languages, use the [/languages?filter&#x3D;texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public EditVideoRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The new title for the video.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EditVideoRequest password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The password. When you set &#x60;privacy.view&#x60; to &#x60;password&#x60;, you must provide the password as an additional parameter.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public EditVideoRequest privacy(EditVideoRequestPrivacy privacy) {
    this.privacy = privacy;
    return this;
  }

  /**
   * Get privacy
   * @return privacy
   */
  @javax.annotation.Nullable
  public EditVideoRequestPrivacy getPrivacy() {
    return privacy;
  }

  public void setPrivacy(EditVideoRequestPrivacy privacy) {
    this.privacy = privacy;
  }


  public EditVideoRequest ratings(UploadVideoAlt1RequestRatings ratings) {
    this.ratings = ratings;
    return this;
  }

  /**
   * Get ratings
   * @return ratings
   */
  @javax.annotation.Nullable
  public UploadVideoAlt1RequestRatings getRatings() {
    return ratings;
  }

  public void setRatings(UploadVideoAlt1RequestRatings ratings) {
    this.ratings = ratings;
  }


  public EditVideoRequest reviewPage(UploadVideoAlt1RequestReviewPage reviewPage) {
    this.reviewPage = reviewPage;
    return this;
  }

  /**
   * Get reviewPage
   * @return reviewPage
   */
  @javax.annotation.Nullable
  public UploadVideoAlt1RequestReviewPage getReviewPage() {
    return reviewPage;
  }

  public void setReviewPage(UploadVideoAlt1RequestReviewPage reviewPage) {
    this.reviewPage = reviewPage;
  }


  public EditVideoRequest spatial(UploadVideoAlt1RequestSpatial spatial) {
    this.spatial = spatial;
    return this;
  }

  /**
   * Get spatial
   * @return spatial
   */
  @javax.annotation.Nullable
  public UploadVideoAlt1RequestSpatial getSpatial() {
    return spatial;
  }

  public void setSpatial(UploadVideoAlt1RequestSpatial spatial) {
    this.spatial = spatial;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditVideoRequest editVideoRequest = (EditVideoRequest) o;
    return Objects.equals(this.contentRating, editVideoRequest.contentRating) &&
        Objects.equals(this.description, editVideoRequest.description) &&
        Objects.equals(this.embed, editVideoRequest.embed) &&
        Objects.equals(this.license, editVideoRequest.license) &&
        Objects.equals(this.locale, editVideoRequest.locale) &&
        Objects.equals(this.name, editVideoRequest.name) &&
        Objects.equals(this.password, editVideoRequest.password) &&
        Objects.equals(this.privacy, editVideoRequest.privacy) &&
        Objects.equals(this.ratings, editVideoRequest.ratings) &&
        Objects.equals(this.reviewPage, editVideoRequest.reviewPage) &&
        Objects.equals(this.spatial, editVideoRequest.spatial);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentRating, description, embed, license, locale, name, password, privacy, ratings, reviewPage, spatial);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditVideoRequest {\n");
    sb.append("    contentRating: ").append(toIndentedString(contentRating)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    ratings: ").append(toIndentedString(ratings)).append("\n");
    sb.append("    reviewPage: ").append(toIndentedString(reviewPage)).append("\n");
    sb.append("    spatial: ").append(toIndentedString(spatial)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content_rating");
    openapiFields.add("description");
    openapiFields.add("embed");
    openapiFields.add("license");
    openapiFields.add("locale");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("privacy");
    openapiFields.add("ratings");
    openapiFields.add("review_page");
    openapiFields.add("spatial");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EditVideoRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EditVideoRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditVideoRequest is not found in the empty JSON string", EditVideoRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EditVideoRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EditVideoRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("content_rating") != null && !jsonObj.get("content_rating").isJsonNull() && !jsonObj.get("content_rating").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_rating` to be an array in the JSON string but got `%s`", jsonObj.get("content_rating").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `embed`
      if (jsonObj.get("embed") != null && !jsonObj.get("embed").isJsonNull()) {
        UploadVideoAlt1RequestEmbed.validateJsonElement(jsonObj.get("embed"));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      // validate the optional field `license`
      if (jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) {
        LicenseEnum.validateJsonElement(jsonObj.get("license"));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // validate the optional field `privacy`
      if (jsonObj.get("privacy") != null && !jsonObj.get("privacy").isJsonNull()) {
        EditVideoRequestPrivacy.validateJsonElement(jsonObj.get("privacy"));
      }
      // validate the optional field `ratings`
      if (jsonObj.get("ratings") != null && !jsonObj.get("ratings").isJsonNull()) {
        UploadVideoAlt1RequestRatings.validateJsonElement(jsonObj.get("ratings"));
      }
      // validate the optional field `review_page`
      if (jsonObj.get("review_page") != null && !jsonObj.get("review_page").isJsonNull()) {
        UploadVideoAlt1RequestReviewPage.validateJsonElement(jsonObj.get("review_page"));
      }
      // validate the optional field `spatial`
      if (jsonObj.get("spatial") != null && !jsonObj.get("spatial").isJsonNull()) {
        UploadVideoAlt1RequestSpatial.validateJsonElement(jsonObj.get("spatial"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditVideoRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditVideoRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditVideoRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditVideoRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EditVideoRequest>() {
           @Override
           public void write(JsonWriter out, EditVideoRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EditVideoRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EditVideoRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EditVideoRequest
   * @throws IOException if the JSON string is invalid with respect to EditVideoRequest
   */
  public static EditVideoRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditVideoRequest.class);
  }

  /**
   * Convert an instance of EditVideoRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

