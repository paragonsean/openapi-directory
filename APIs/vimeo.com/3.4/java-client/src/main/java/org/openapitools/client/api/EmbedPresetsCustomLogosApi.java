/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.Picture;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmbedPresetsCustomLogosApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmbedPresetsCustomLogosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmbedPresetsCustomLogosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCustomLogo
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom logo was created. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * You can&#39;t upload pictures for another user&#39;s videos. * The user can&#39;t add a custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomLogoCall(BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/customlogos"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomLogoValidateBeforeCall(BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createCustomLogo(Async)");
        }

        return createCustomLogoCall(userId, _callback);

    }

    /**
     * Add a custom logo
     * 
     * @param userId The ID of the user. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom logo was created. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * You can&#39;t upload pictures for another user&#39;s videos. * The user can&#39;t add a custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public Picture createCustomLogo(BigDecimal userId) throws ApiException {
        ApiResponse<Picture> localVarResp = createCustomLogoWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Add a custom logo
     * 
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom logo was created. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * You can&#39;t upload pictures for another user&#39;s videos. * The user can&#39;t add a custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> createCustomLogoWithHttpInfo(BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = createCustomLogoValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a custom logo (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom logo was created. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * You can&#39;t upload pictures for another user&#39;s videos. * The user can&#39;t add a custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomLogoAsync(BigDecimal userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomLogoValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCustomLogoAlt1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom logo was created. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * You can&#39;t upload pictures for another user&#39;s videos. * The user can&#39;t add a custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomLogoAlt1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/customlogos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomLogoAlt1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createCustomLogoAlt1Call(_callback);

    }

    /**
     * Add a custom logo
     * 
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom logo was created. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * You can&#39;t upload pictures for another user&#39;s videos. * The user can&#39;t add a custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public Picture createCustomLogoAlt1() throws ApiException {
        ApiResponse<Picture> localVarResp = createCustomLogoAlt1WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Add a custom logo
     * 
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom logo was created. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * You can&#39;t upload pictures for another user&#39;s videos. * The user can&#39;t add a custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> createCustomLogoAlt1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createCustomLogoAlt1ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a custom logo (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The custom logo was created. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * You can&#39;t upload pictures for another user&#39;s videos. * The user can&#39;t add a custom logo. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomLogoAlt1Async(final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomLogoAlt1ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomLogo
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomLogoCall(BigDecimal logoId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/customlogos/{logo_id}"
            .replace("{" + "logo_id" + "}", localVarApiClient.escapeString(logoId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomLogoValidateBeforeCall(BigDecimal logoId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logoId' is set
        if (logoId == null) {
            throw new ApiException("Missing the required parameter 'logoId' when calling getCustomLogo(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getCustomLogo(Async)");
        }

        return getCustomLogoCall(logoId, userId, _callback);

    }

    /**
     * Get a specific custom logo
     * 
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public Picture getCustomLogo(BigDecimal logoId, BigDecimal userId) throws ApiException {
        ApiResponse<Picture> localVarResp = getCustomLogoWithHttpInfo(logoId, userId);
        return localVarResp.getData();
    }

    /**
     * Get a specific custom logo
     * 
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> getCustomLogoWithHttpInfo(BigDecimal logoId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = getCustomLogoValidateBeforeCall(logoId, userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific custom logo (asynchronously)
     * 
     * @param logoId The ID of the custom logo. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomLogoAsync(BigDecimal logoId, BigDecimal userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomLogoValidateBeforeCall(logoId, userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomLogoAlt1
     * @param logoId The ID of the custom logo. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomLogoAlt1Call(BigDecimal logoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/customlogos/{logo_id}"
            .replace("{" + "logo_id" + "}", localVarApiClient.escapeString(logoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomLogoAlt1ValidateBeforeCall(BigDecimal logoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logoId' is set
        if (logoId == null) {
            throw new ApiException("Missing the required parameter 'logoId' when calling getCustomLogoAlt1(Async)");
        }

        return getCustomLogoAlt1Call(logoId, _callback);

    }

    /**
     * Get a specific custom logo
     * 
     * @param logoId The ID of the custom logo. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public Picture getCustomLogoAlt1(BigDecimal logoId) throws ApiException {
        ApiResponse<Picture> localVarResp = getCustomLogoAlt1WithHttpInfo(logoId);
        return localVarResp.getData();
    }

    /**
     * Get a specific custom logo
     * 
     * @param logoId The ID of the custom logo. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> getCustomLogoAlt1WithHttpInfo(BigDecimal logoId) throws ApiException {
        okhttp3.Call localVarCall = getCustomLogoAlt1ValidateBeforeCall(logoId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific custom logo (asynchronously)
     * 
     * @param logoId The ID of the custom logo. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logo was returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomLogoAlt1Async(BigDecimal logoId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomLogoAlt1ValidateBeforeCall(logoId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomLogos
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The user can&#39;t view this custom logo. * The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomLogosCall(BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/customlogos"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomLogosValidateBeforeCall(BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getCustomLogos(Async)");
        }

        return getCustomLogosCall(userId, _callback);

    }

    /**
     * Get all the custom logos that belong to a user
     * 
     * @param userId The ID of the user. (required)
     * @return List&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The user can&#39;t view this custom logo. * The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public List<Picture> getCustomLogos(BigDecimal userId) throws ApiException {
        ApiResponse<List<Picture>> localVarResp = getCustomLogosWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get all the custom logos that belong to a user
     * 
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The user can&#39;t view this custom logo. * The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Picture>> getCustomLogosWithHttpInfo(BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = getCustomLogosValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the custom logos that belong to a user (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The user can&#39;t view this custom logo. * The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomLogosAsync(BigDecimal userId, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomLogosValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomLogosAlt1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The user can&#39;t view this custom logo. * The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomLogosAlt1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/customlogos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomLogosAlt1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCustomLogosAlt1Call(_callback);

    }

    /**
     * Get all the custom logos that belong to a user
     * 
     * @return List&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The user can&#39;t view this custom logo. * The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public List<Picture> getCustomLogosAlt1() throws ApiException {
        ApiResponse<List<Picture>> localVarResp = getCustomLogosAlt1WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all the custom logos that belong to a user
     * 
     * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The user can&#39;t view this custom logo. * The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Picture>> getCustomLogosAlt1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCustomLogosAlt1ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the custom logos that belong to a user (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The custom logos were returned. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The user can&#39;t view this custom logo. * The user can&#39;t view custom logos. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomLogosAlt1Async(final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomLogosAlt1ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
