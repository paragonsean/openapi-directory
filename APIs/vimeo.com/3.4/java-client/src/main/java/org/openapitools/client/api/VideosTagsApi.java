/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddVideoTagsRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideosTagsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosTagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideosTagsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVideoTag
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The tag is invalid. * An unsupported parameter was supplied. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The number of tags on the video would exceed 20. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoTagCall(BigDecimal videoId, String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/tags/{word}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoTagValidateBeforeCall(BigDecimal videoId, String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoTag(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling addVideoTag(Async)");
        }

        return addVideoTagCall(videoId, word, _callback);

    }

    /**
     * Add a specific tag to a video
     * 
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The tag is invalid. * An unsupported parameter was supplied. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The number of tags on the video would exceed 20. </td><td>  -  </td></tr>
     </table>
     */
    public Tag addVideoTag(BigDecimal videoId, String word) throws ApiException {
        ApiResponse<Tag> localVarResp = addVideoTagWithHttpInfo(videoId, word);
        return localVarResp.getData();
    }

    /**
     * Add a specific tag to a video
     * 
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The tag is invalid. * An unsupported parameter was supplied. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The number of tags on the video would exceed 20. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> addVideoTagWithHttpInfo(BigDecimal videoId, String word) throws ApiException {
        okhttp3.Call localVarCall = addVideoTagValidateBeforeCall(videoId, word, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a specific tag to a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The tag is invalid. * An unsupported parameter was supplied. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The number of tags on the video would exceed 20. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoTagAsync(BigDecimal videoId, String word, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoTagValidateBeforeCall(videoId, word, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVideoTags
     * @param videoId The ID of the video. (required)
     * @param addVideoTagsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags that were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The request body wasn&#39;t supplied. * A parameter is invalid. * The request body isn&#39;t a JSON-encoded list of tags. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t add tags to a video. * The number of tags would exceed 20. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoTagsCall(BigDecimal videoId, AddVideoTagsRequest addVideoTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addVideoTagsRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/tags"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoTagsValidateBeforeCall(BigDecimal videoId, AddVideoTagsRequest addVideoTagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addVideoTags(Async)");
        }

        // verify the required parameter 'addVideoTagsRequest' is set
        if (addVideoTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'addVideoTagsRequest' when calling addVideoTags(Async)");
        }

        return addVideoTagsCall(videoId, addVideoTagsRequest, _callback);

    }

    /**
     * Add a list of tags to a video
     * 
     * @param videoId The ID of the video. (required)
     * @param addVideoTagsRequest  (required)
     * @return List&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags that were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The request body wasn&#39;t supplied. * A parameter is invalid. * The request body isn&#39;t a JSON-encoded list of tags. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t add tags to a video. * The number of tags would exceed 20. </td><td>  -  </td></tr>
     </table>
     */
    public List<Tag> addVideoTags(BigDecimal videoId, AddVideoTagsRequest addVideoTagsRequest) throws ApiException {
        ApiResponse<List<Tag>> localVarResp = addVideoTagsWithHttpInfo(videoId, addVideoTagsRequest);
        return localVarResp.getData();
    }

    /**
     * Add a list of tags to a video
     * 
     * @param videoId The ID of the video. (required)
     * @param addVideoTagsRequest  (required)
     * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags that were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The request body wasn&#39;t supplied. * A parameter is invalid. * The request body isn&#39;t a JSON-encoded list of tags. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t add tags to a video. * The number of tags would exceed 20. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Tag>> addVideoTagsWithHttpInfo(BigDecimal videoId, AddVideoTagsRequest addVideoTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = addVideoTagsValidateBeforeCall(videoId, addVideoTagsRequest, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a list of tags to a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param addVideoTagsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags that were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * The request body wasn&#39;t supplied. * A parameter is invalid. * The request body isn&#39;t a JSON-encoded list of tags. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> * The authenticated user can&#39;t add tags to a video. * The number of tags would exceed 20. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoTagsAsync(BigDecimal videoId, AddVideoTagsRequest addVideoTagsRequest, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoTagsValidateBeforeCall(videoId, addVideoTagsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkVideoForTag
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag has been added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * A parameter is invalid. * The tag is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such tag exists within the video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkVideoForTagCall(BigDecimal videoId, String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/tags/{word}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkVideoForTagValidateBeforeCall(BigDecimal videoId, String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling checkVideoForTag(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling checkVideoForTag(Async)");
        }

        return checkVideoForTagCall(videoId, word, _callback);

    }

    /**
     * Check if a tag has been added to a video
     * 
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag has been added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * A parameter is invalid. * The tag is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such tag exists within the video. </td><td>  -  </td></tr>
     </table>
     */
    public Tag checkVideoForTag(BigDecimal videoId, String word) throws ApiException {
        ApiResponse<Tag> localVarResp = checkVideoForTagWithHttpInfo(videoId, word);
        return localVarResp.getData();
    }

    /**
     * Check if a tag has been added to a video
     * 
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag has been added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * A parameter is invalid. * The tag is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such tag exists within the video. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> checkVideoForTagWithHttpInfo(BigDecimal videoId, String word) throws ApiException {
        okhttp3.Call localVarCall = checkVideoForTagValidateBeforeCall(videoId, word, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if a tag has been added to a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag has been added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * A parameter is invalid. * The tag is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such tag exists within the video. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkVideoForTagAsync(BigDecimal videoId, String word, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkVideoForTagValidateBeforeCall(videoId, word, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVideoTag
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * A parameter is invalid. * The tag is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoTagCall(BigDecimal videoId, String word, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/tags/{word}"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()))
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoTagValidateBeforeCall(BigDecimal videoId, String word, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteVideoTag(Async)");
        }

        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling deleteVideoTag(Async)");
        }

        return deleteVideoTagCall(videoId, word, _callback);

    }

    /**
     * Remove a tag from a video
     * 
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * A parameter is invalid. * The tag is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVideoTag(BigDecimal videoId, String word) throws ApiException {
        deleteVideoTagWithHttpInfo(videoId, word);
    }

    /**
     * Remove a tag from a video
     * 
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * A parameter is invalid. * The tag is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVideoTagWithHttpInfo(BigDecimal videoId, String word) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoTagValidateBeforeCall(videoId, word, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a tag from a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param word The tag word. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The tag was deleted. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * A parameter is invalid. * The tag is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoTagAsync(BigDecimal videoId, String word, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoTagValidateBeforeCall(videoId, word, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoTags
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoTagsCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/tags"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.tag+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoTagsValidateBeforeCall(BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoTags(Async)");
        }

        return getVideoTagsCall(videoId, _callback);

    }

    /**
     * Get all the tags of a video
     * 
     * @param videoId The ID of the video. (required)
     * @return List&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Tag> getVideoTags(BigDecimal videoId) throws ApiException {
        ApiResponse<List<Tag>> localVarResp = getVideoTagsWithHttpInfo(videoId);
        return localVarResp.getData();
    }

    /**
     * Get all the tags of a video
     * 
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;List&lt;Tag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Tag>> getVideoTagsWithHttpInfo(BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = getVideoTagsValidateBeforeCall(videoId, null);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the tags of a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tags were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoTagsAsync(BigDecimal videoId, final ApiCallback<List<Tag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoTagsValidateBeforeCall(videoId, _callback);
        Type localVarReturnType = new TypeToken<List<Tag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideosWithTag
     * @param word The tag word. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such tag exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideosWithTagCall(String word, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{word}/videos"
            .replace("{" + "word" + "}", localVarApiClient.escapeString(word.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.video+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideosWithTagValidateBeforeCall(String word, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'word' is set
        if (word == null) {
            throw new ApiException("Missing the required parameter 'word' when calling getVideosWithTag(Async)");
        }

        return getVideosWithTagCall(word, direction, page, perPage, sort, _callback);

    }

    /**
     * Get all the videos with a specific tag
     * 
     * @param word The tag word. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such tag exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<Video> getVideosWithTag(String word, String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        ApiResponse<List<Video>> localVarResp = getVideosWithTagWithHttpInfo(word, direction, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the videos with a specific tag
     * 
     * @param word The tag word. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;Video&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such tag exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Video>> getVideosWithTagWithHttpInfo(String word, String direction, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getVideosWithTagValidateBeforeCall(word, direction, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the videos with a specific tag (asynchronously)
     * 
     * @param word The tag word. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The videos were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such tag exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideosWithTagAsync(String word, String direction, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback<List<Video>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideosWithTagValidateBeforeCall(word, direction, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<Video>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
