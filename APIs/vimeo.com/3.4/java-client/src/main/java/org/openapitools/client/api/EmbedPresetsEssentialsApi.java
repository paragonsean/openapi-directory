/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.EditEmbedPresetAlt1Request;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.Presets;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmbedPresetsEssentialsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmbedPresetsEssentialsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmbedPresetsEssentialsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for editEmbedPreset
     * @param presetId The ID of the preset. (required)
     * @param userId The ID of the user. (required)
     * @param editEmbedPresetAlt1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The outro type is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * The preset doesn&#39;t exist. * The authenticated user doesn&#39;t own the preset. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editEmbedPresetCall(BigDecimal presetId, BigDecimal userId, EditEmbedPresetAlt1Request editEmbedPresetAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editEmbedPresetAlt1Request;

        // create path and map variables
        String localVarPath = "/users/{user_id}/presets/{preset_id}"
            .replace("{" + "preset_id" + "}", localVarApiClient.escapeString(presetId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editEmbedPresetValidateBeforeCall(BigDecimal presetId, BigDecimal userId, EditEmbedPresetAlt1Request editEmbedPresetAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'presetId' is set
        if (presetId == null) {
            throw new ApiException("Missing the required parameter 'presetId' when calling editEmbedPreset(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling editEmbedPreset(Async)");
        }

        return editEmbedPresetCall(presetId, userId, editEmbedPresetAlt1Request, _callback);

    }

    /**
     * Edit an embed preset
     * 
     * @param presetId The ID of the preset. (required)
     * @param userId The ID of the user. (required)
     * @param editEmbedPresetAlt1Request  (optional)
     * @return Presets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The outro type is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * The preset doesn&#39;t exist. * The authenticated user doesn&#39;t own the preset. </td><td>  -  </td></tr>
     </table>
     */
    public Presets editEmbedPreset(BigDecimal presetId, BigDecimal userId, EditEmbedPresetAlt1Request editEmbedPresetAlt1Request) throws ApiException {
        ApiResponse<Presets> localVarResp = editEmbedPresetWithHttpInfo(presetId, userId, editEmbedPresetAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an embed preset
     * 
     * @param presetId The ID of the preset. (required)
     * @param userId The ID of the user. (required)
     * @param editEmbedPresetAlt1Request  (optional)
     * @return ApiResponse&lt;Presets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The outro type is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * The preset doesn&#39;t exist. * The authenticated user doesn&#39;t own the preset. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Presets> editEmbedPresetWithHttpInfo(BigDecimal presetId, BigDecimal userId, EditEmbedPresetAlt1Request editEmbedPresetAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = editEmbedPresetValidateBeforeCall(presetId, userId, editEmbedPresetAlt1Request, null);
        Type localVarReturnType = new TypeToken<Presets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an embed preset (asynchronously)
     * 
     * @param presetId The ID of the preset. (required)
     * @param userId The ID of the user. (required)
     * @param editEmbedPresetAlt1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The outro type is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * The preset doesn&#39;t exist. * The authenticated user doesn&#39;t own the preset. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editEmbedPresetAsync(BigDecimal presetId, BigDecimal userId, EditEmbedPresetAlt1Request editEmbedPresetAlt1Request, final ApiCallback<Presets> _callback) throws ApiException {

        okhttp3.Call localVarCall = editEmbedPresetValidateBeforeCall(presetId, userId, editEmbedPresetAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Presets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editEmbedPresetAlt1
     * @param presetId The ID of the preset. (required)
     * @param editEmbedPresetAlt1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The outro type is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * The preset doesn&#39;t exist. * The authenticated user doesn&#39;t own the preset. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editEmbedPresetAlt1Call(BigDecimal presetId, EditEmbedPresetAlt1Request editEmbedPresetAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editEmbedPresetAlt1Request;

        // create path and map variables
        String localVarPath = "/me/presets/{preset_id}"
            .replace("{" + "preset_id" + "}", localVarApiClient.escapeString(presetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editEmbedPresetAlt1ValidateBeforeCall(BigDecimal presetId, EditEmbedPresetAlt1Request editEmbedPresetAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'presetId' is set
        if (presetId == null) {
            throw new ApiException("Missing the required parameter 'presetId' when calling editEmbedPresetAlt1(Async)");
        }

        return editEmbedPresetAlt1Call(presetId, editEmbedPresetAlt1Request, _callback);

    }

    /**
     * Edit an embed preset
     * 
     * @param presetId The ID of the preset. (required)
     * @param editEmbedPresetAlt1Request  (optional)
     * @return Presets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The outro type is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * The preset doesn&#39;t exist. * The authenticated user doesn&#39;t own the preset. </td><td>  -  </td></tr>
     </table>
     */
    public Presets editEmbedPresetAlt1(BigDecimal presetId, EditEmbedPresetAlt1Request editEmbedPresetAlt1Request) throws ApiException {
        ApiResponse<Presets> localVarResp = editEmbedPresetAlt1WithHttpInfo(presetId, editEmbedPresetAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Edit an embed preset
     * 
     * @param presetId The ID of the preset. (required)
     * @param editEmbedPresetAlt1Request  (optional)
     * @return ApiResponse&lt;Presets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The outro type is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * The preset doesn&#39;t exist. * The authenticated user doesn&#39;t own the preset. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Presets> editEmbedPresetAlt1WithHttpInfo(BigDecimal presetId, EditEmbedPresetAlt1Request editEmbedPresetAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = editEmbedPresetAlt1ValidateBeforeCall(presetId, editEmbedPresetAlt1Request, null);
        Type localVarReturnType = new TypeToken<Presets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an embed preset (asynchronously)
     * 
     * @param presetId The ID of the preset. (required)
     * @param editEmbedPresetAlt1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was edited. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The outro type is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> * The preset doesn&#39;t exist. * The authenticated user doesn&#39;t own the preset. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editEmbedPresetAlt1Async(BigDecimal presetId, EditEmbedPresetAlt1Request editEmbedPresetAlt1Request, final ApiCallback<Presets> _callback) throws ApiException {

        okhttp3.Call localVarCall = editEmbedPresetAlt1ValidateBeforeCall(presetId, editEmbedPresetAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Presets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmbedPreset
     * @param presetId The ID of the preset. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbedPresetCall(BigDecimal presetId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/presets/{preset_id}"
            .replace("{" + "preset_id" + "}", localVarApiClient.escapeString(presetId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmbedPresetValidateBeforeCall(BigDecimal presetId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'presetId' is set
        if (presetId == null) {
            throw new ApiException("Missing the required parameter 'presetId' when calling getEmbedPreset(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getEmbedPreset(Async)");
        }

        return getEmbedPresetCall(presetId, userId, _callback);

    }

    /**
     * Get a specific embed preset
     * 
     * @param presetId The ID of the preset. (required)
     * @param userId The ID of the user. (required)
     * @return Presets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
     </table>
     */
    public Presets getEmbedPreset(BigDecimal presetId, BigDecimal userId) throws ApiException {
        ApiResponse<Presets> localVarResp = getEmbedPresetWithHttpInfo(presetId, userId);
        return localVarResp.getData();
    }

    /**
     * Get a specific embed preset
     * 
     * @param presetId The ID of the preset. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Presets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Presets> getEmbedPresetWithHttpInfo(BigDecimal presetId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = getEmbedPresetValidateBeforeCall(presetId, userId, null);
        Type localVarReturnType = new TypeToken<Presets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific embed preset (asynchronously)
     * 
     * @param presetId The ID of the preset. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbedPresetAsync(BigDecimal presetId, BigDecimal userId, final ApiCallback<Presets> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmbedPresetValidateBeforeCall(presetId, userId, _callback);
        Type localVarReturnType = new TypeToken<Presets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmbedPresetAlt1
     * @param presetId The ID of the preset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbedPresetAlt1Call(BigDecimal presetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/presets/{preset_id}"
            .replace("{" + "preset_id" + "}", localVarApiClient.escapeString(presetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmbedPresetAlt1ValidateBeforeCall(BigDecimal presetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'presetId' is set
        if (presetId == null) {
            throw new ApiException("Missing the required parameter 'presetId' when calling getEmbedPresetAlt1(Async)");
        }

        return getEmbedPresetAlt1Call(presetId, _callback);

    }

    /**
     * Get a specific embed preset
     * 
     * @param presetId The ID of the preset. (required)
     * @return Presets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
     </table>
     */
    public Presets getEmbedPresetAlt1(BigDecimal presetId) throws ApiException {
        ApiResponse<Presets> localVarResp = getEmbedPresetAlt1WithHttpInfo(presetId);
        return localVarResp.getData();
    }

    /**
     * Get a specific embed preset
     * 
     * @param presetId The ID of the preset. (required)
     * @return ApiResponse&lt;Presets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Presets> getEmbedPresetAlt1WithHttpInfo(BigDecimal presetId) throws ApiException {
        okhttp3.Call localVarCall = getEmbedPresetAlt1ValidateBeforeCall(presetId, null);
        Type localVarReturnType = new TypeToken<Presets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific embed preset (asynchronously)
     * 
     * @param presetId The ID of the preset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed preset was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbedPresetAlt1Async(BigDecimal presetId, final ApiCallback<Presets> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmbedPresetAlt1ValidateBeforeCall(presetId, _callback);
        Type localVarReturnType = new TypeToken<Presets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmbedPresets
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbedPresetsCall(BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/presets"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmbedPresetsValidateBeforeCall(BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getEmbedPresets(Async)");
        }

        return getEmbedPresetsCall(userId, page, perPage, _callback);

    }

    /**
     * Get all the embed presets that a user has created
     * 
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Presets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Presets> getEmbedPresets(BigDecimal userId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Presets>> localVarResp = getEmbedPresetsWithHttpInfo(userId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the embed presets that a user has created
     * 
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Presets&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Presets>> getEmbedPresetsWithHttpInfo(BigDecimal userId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getEmbedPresetsValidateBeforeCall(userId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Presets>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the embed presets that a user has created (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbedPresetsAsync(BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback<List<Presets>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmbedPresetsValidateBeforeCall(userId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Presets>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmbedPresetsAlt1
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbedPresetsAlt1Call(BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/presets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.preset+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmbedPresetsAlt1ValidateBeforeCall(BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        return getEmbedPresetsAlt1Call(page, perPage, _callback);

    }

    /**
     * Get all the embed presets that a user has created
     * 
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Presets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Presets> getEmbedPresetsAlt1(BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Presets>> localVarResp = getEmbedPresetsAlt1WithHttpInfo(page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the embed presets that a user has created
     * 
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Presets&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Presets>> getEmbedPresetsAlt1WithHttpInfo(BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getEmbedPresetsAlt1ValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Presets>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the embed presets that a user has created (asynchronously)
     * 
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The embed presets were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbedPresetsAlt1Async(BigDecimal page, BigDecimal perPage, final ApiCallback<List<Presets>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmbedPresetsAlt1ValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Presets>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
