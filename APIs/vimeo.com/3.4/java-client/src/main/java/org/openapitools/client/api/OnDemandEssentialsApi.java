/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CreateVodAlt1Request;
import org.openapitools.client.model.EditVodRequest;
import org.openapitools.client.model.LegacyError;
import org.openapitools.client.model.OnDemandPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OnDemandEssentialsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnDemandEssentialsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OnDemandEssentialsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createVod
     * @param userId The ID of the user. (required)
     * @param createVodAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVodCall(BigDecimal userId, CreateVodAlt1Request createVodAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVodAlt1Request;

        // create path and map variables
        String localVarPath = "/users/{user_id}/ondemand/pages"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVodValidateBeforeCall(BigDecimal userId, CreateVodAlt1Request createVodAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createVod(Async)");
        }

        // verify the required parameter 'createVodAlt1Request' is set
        if (createVodAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'createVodAlt1Request' when calling createVod(Async)");
        }

        return createVodCall(userId, createVodAlt1Request, _callback);

    }

    /**
     * Create an On Demand page
     * 
     * @param userId The ID of the user. (required)
     * @param createVodAlt1Request  (required)
     * @return OnDemandPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandPage createVod(BigDecimal userId, CreateVodAlt1Request createVodAlt1Request) throws ApiException {
        ApiResponse<OnDemandPage> localVarResp = createVodWithHttpInfo(userId, createVodAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Create an On Demand page
     * 
     * @param userId The ID of the user. (required)
     * @param createVodAlt1Request  (required)
     * @return ApiResponse&lt;OnDemandPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandPage> createVodWithHttpInfo(BigDecimal userId, CreateVodAlt1Request createVodAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = createVodValidateBeforeCall(userId, createVodAlt1Request, null);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an On Demand page (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param createVodAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVodAsync(BigDecimal userId, CreateVodAlt1Request createVodAlt1Request, final ApiCallback<OnDemandPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVodValidateBeforeCall(userId, createVodAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVodAlt1
     * @param createVodAlt1Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVodAlt1Call(CreateVodAlt1Request createVodAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVodAlt1Request;

        // create path and map variables
        String localVarPath = "/me/ondemand/pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVodAlt1ValidateBeforeCall(CreateVodAlt1Request createVodAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createVodAlt1Request' is set
        if (createVodAlt1Request == null) {
            throw new ApiException("Missing the required parameter 'createVodAlt1Request' when calling createVodAlt1(Async)");
        }

        return createVodAlt1Call(createVodAlt1Request, _callback);

    }

    /**
     * Create an On Demand page
     * 
     * @param createVodAlt1Request  (required)
     * @return OnDemandPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandPage createVodAlt1(CreateVodAlt1Request createVodAlt1Request) throws ApiException {
        ApiResponse<OnDemandPage> localVarResp = createVodAlt1WithHttpInfo(createVodAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Create an On Demand page
     * 
     * @param createVodAlt1Request  (required)
     * @return ApiResponse&lt;OnDemandPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandPage> createVodAlt1WithHttpInfo(CreateVodAlt1Request createVodAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = createVodAlt1ValidateBeforeCall(createVodAlt1Request, null);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an On Demand page (asynchronously)
     * 
     * @param createVodAlt1Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The On Demand page was created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVodAlt1Async(CreateVodAlt1Request createVodAlt1Request, final ApiCallback<OnDemandPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVodAlt1ValidateBeforeCall(createVodAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVodDraft
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The page draft was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVodDraftCall(BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVodDraftValidateBeforeCall(BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling deleteVodDraft(Async)");
        }

        return deleteVodDraftCall(ondemandId, _callback);

    }

    /**
     * Delete a draft of an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The page draft was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVodDraft(BigDecimal ondemandId) throws ApiException {
        deleteVodDraftWithHttpInfo(ondemandId);
    }

    /**
     * Delete a draft of an On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The page draft was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVodDraftWithHttpInfo(BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = deleteVodDraftValidateBeforeCall(ondemandId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a draft of an On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The page draft was deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You can&#39;t modify an On Demand page that you don&#39;t own. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVodDraftAsync(BigDecimal ondemandId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVodDraftValidateBeforeCall(ondemandId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editVod
     * @param ondemandId The ID of the On Demand. (required)
     * @param editVodRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page was edited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t edit the On Demand page. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editVodCall(BigDecimal ondemandId, EditVodRequest editVodRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editVodRequest;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editVodValidateBeforeCall(BigDecimal ondemandId, EditVodRequest editVodRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling editVod(Async)");
        }

        return editVodCall(ondemandId, editVodRequest, _callback);

    }

    /**
     * Edit an On Demand page
     * Enable preorders or publish the page.
     * @param ondemandId The ID of the On Demand. (required)
     * @param editVodRequest  (optional)
     * @return OnDemandPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page was edited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t edit the On Demand page. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandPage editVod(BigDecimal ondemandId, EditVodRequest editVodRequest) throws ApiException {
        ApiResponse<OnDemandPage> localVarResp = editVodWithHttpInfo(ondemandId, editVodRequest);
        return localVarResp.getData();
    }

    /**
     * Edit an On Demand page
     * Enable preorders or publish the page.
     * @param ondemandId The ID of the On Demand. (required)
     * @param editVodRequest  (optional)
     * @return ApiResponse&lt;OnDemandPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page was edited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t edit the On Demand page. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandPage> editVodWithHttpInfo(BigDecimal ondemandId, EditVodRequest editVodRequest) throws ApiException {
        okhttp3.Call localVarCall = editVodValidateBeforeCall(ondemandId, editVodRequest, null);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit an On Demand page (asynchronously)
     * Enable preorders or publish the page.
     * @param ondemandId The ID of the On Demand. (required)
     * @param editVodRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page was edited. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authenticated user can&#39;t edit the On Demand page. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editVodAsync(BigDecimal ondemandId, EditVodRequest editVodRequest, final ApiCallback<OnDemandPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = editVodValidateBeforeCall(ondemandId, editVodRequest, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserVods
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The type of On Demand pages to return. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserVodsCall(BigDecimal userId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/ondemand/pages"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserVodsValidateBeforeCall(BigDecimal userId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserVods(Async)");
        }

        return getUserVodsCall(userId, direction, filter, page, perPage, sort, _callback);

    }

    /**
     * Get all the On Demand pages of a user
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The type of On Demand pages to return. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;OnDemandPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<OnDemandPage> getUserVods(BigDecimal userId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        ApiResponse<List<OnDemandPage>> localVarResp = getUserVodsWithHttpInfo(userId, direction, filter, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the On Demand pages of a user
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The type of On Demand pages to return. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;OnDemandPage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OnDemandPage>> getUserVodsWithHttpInfo(BigDecimal userId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUserVodsValidateBeforeCall(userId, direction, filter, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the On Demand pages of a user (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param direction The sort direction of the results. (optional)
     * @param filter The type of On Demand pages to return. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserVodsAsync(BigDecimal userId, String direction, String filter, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback<List<OnDemandPage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserVodsValidateBeforeCall(userId, direction, filter, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserVodsAlt1
     * @param direction The sort direction of the results. (optional)
     * @param filter The type of On Demand pages to return. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserVodsAlt1Call(String direction, String filter, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/ondemand/pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserVodsAlt1ValidateBeforeCall(String direction, String filter, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback _callback) throws ApiException {
        return getUserVodsAlt1Call(direction, filter, page, perPage, sort, _callback);

    }

    /**
     * Get all the On Demand pages of a user
     * 
     * @param direction The sort direction of the results. (optional)
     * @param filter The type of On Demand pages to return. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return List&lt;OnDemandPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public List<OnDemandPage> getUserVodsAlt1(String direction, String filter, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        ApiResponse<List<OnDemandPage>> localVarResp = getUserVodsAlt1WithHttpInfo(direction, filter, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * Get all the On Demand pages of a user
     * 
     * @param direction The sort direction of the results. (optional)
     * @param filter The type of On Demand pages to return. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @return ApiResponse&lt;List&lt;OnDemandPage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OnDemandPage>> getUserVodsAlt1WithHttpInfo(String direction, String filter, BigDecimal page, BigDecimal perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUserVodsAlt1ValidateBeforeCall(direction, filter, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the On Demand pages of a user (asynchronously)
     * 
     * @param direction The sort direction of the results. (optional)
     * @param filter The type of On Demand pages to return. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param sort The way to sort the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand pages were returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such user exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserVodsAlt1Async(String direction, String filter, BigDecimal page, BigDecimal perPage, String sort, final ApiCallback<List<OnDemandPage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserVodsAlt1ValidateBeforeCall(direction, filter, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<List<OnDemandPage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVod
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodCall(BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ondemand/pages/{ondemand_id}"
            .replace("{" + "ondemand_id" + "}", localVarApiClient.escapeString(ondemandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.ondemand.page+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVodValidateBeforeCall(BigDecimal ondemandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ondemandId' is set
        if (ondemandId == null) {
            throw new ApiException("Missing the required parameter 'ondemandId' when calling getVod(Async)");
        }

        return getVodCall(ondemandId, _callback);

    }

    /**
     * Get a specific On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @return OnDemandPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public OnDemandPage getVod(BigDecimal ondemandId) throws ApiException {
        ApiResponse<OnDemandPage> localVarResp = getVodWithHttpInfo(ondemandId);
        return localVarResp.getData();
    }

    /**
     * Get a specific On Demand page
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @return ApiResponse&lt;OnDemandPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnDemandPage> getVodWithHttpInfo(BigDecimal ondemandId) throws ApiException {
        okhttp3.Call localVarCall = getVodValidateBeforeCall(ondemandId, null);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific On Demand page (asynchronously)
     * 
     * @param ondemandId The ID of the On Demand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The On Demand page was returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such On Demand page exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVodAsync(BigDecimal ondemandId, final ApiCallback<OnDemandPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVodValidateBeforeCall(ondemandId, _callback);
        Type localVarReturnType = new TypeToken<OnDemandPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
