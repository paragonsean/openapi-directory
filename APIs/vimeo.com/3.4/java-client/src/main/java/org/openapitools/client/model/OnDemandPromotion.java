/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.OnDemandPromotionMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OnDemandPromotion
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OnDemandPromotion {
  /**
   * The type of access that this promotion grants:  Option descriptions:  * &#x60;default&#x60; - Grants discounts on existing product offerings.  * &#x60;vip&#x60; - Grants free access either to VOD content before it is released or to access types that aren&#39;t part of the existing product offerings. 
   */
  @JsonAdapter(AccessTypeEnum.Adapter.class)
  public enum AccessTypeEnum {
    DEFAULT("default"),
    
    VIP("vip");

    private String value;

    AccessTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessTypeEnum fromValue(String value) {
      for (AccessTypeEnum b : AccessTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_TYPE = "access_type";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  private AccessTypeEnum accessType;

  /**
   * The type of discount for which this promotion can be used.  Option descriptions:  * &#x60;dollars&#x60; - The discount is a certain fixed amount.  * &#x60;free&#x60; - The discount is the full purchase price. VIP access promotions always use this discount type.  * &#x60;percent&#x60; - The discount is a certain percentage of the full price. 
   */
  @JsonAdapter(DiscountTypeEnum.Adapter.class)
  public enum DiscountTypeEnum {
    DOLLARS("dollars"),
    
    FREE("free"),
    
    PERCENT("percent");

    private String value;

    DiscountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiscountTypeEnum fromValue(String value) {
      for (DiscountTypeEnum b : DiscountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DiscountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiscountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiscountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiscountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DiscountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISCOUNT_TYPE = "discount_type";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_TYPE)
  private DiscountTypeEnum discountType;

  public static final String SERIALIZED_NAME_DOWNLOAD = "download";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD)
  private Boolean download;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private OnDemandPromotionMetadata metadata;

  public static final String SERIALIZED_NAME_PERCENT_OFF = "percent_off";
  @SerializedName(SERIALIZED_NAME_PERCENT_OFF)
  private BigDecimal percentOff;

  /**
   * The type of product to which this promotion can be applied. Only &#x60;buy&#x60; and &#x60;rent&#x60; are available for the VIP access type:  Option descriptions:  * &#x60;any&#x60; - The promotion can be applied to any product.  * &#x60;buy&#x60; - The promotion can be applied to a buyable single video.  * &#x60;buy_episode&#x60; - The promotion can be applied to a buyable single episode.  * &#x60;rent&#x60; - The promotion can be applied to a rentable single video.  * &#x60;rent_episode&#x60; - The promotion can be applied to a rentable single episode.  * &#x60;subscribe&#x60; - The promotion can be applied to a subscription. 
   */
  @JsonAdapter(ProductTypeEnum.Adapter.class)
  public enum ProductTypeEnum {
    ANY("any"),
    
    BUY("buy"),
    
    BUY_EPISODE("buy_episode"),
    
    RENT("rent"),
    
    RENT_EPISODE("rent_episode"),
    
    SUBSCRIBE("subscribe");

    private String value;

    ProductTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductTypeEnum fromValue(String value) {
      for (ProductTypeEnum b : ProductTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "product_type";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private ProductTypeEnum productType;

  /**
   * The amount of time that the user has access to the VOD content after redeeming a promo code.  Option descriptions:  * &#x60;1_week&#x60; - Access lasts for one week.  * &#x60;1_year&#x60; - Access lasts for one year.  * &#x60;24_hour&#x60; - Access lasts for 24 hours.  * &#x60;30_days&#x60; - Access lasts for 30 days.  * &#x60;3_month&#x60; - Access lasts for 3 months.  * &#x60;48_hour&#x60; - Access lasts for 48 hours.  * &#x60;6_month&#x60; - Access lasts for 6 months.  * &#x60;72_hour&#x60; - Access lasts for 72 hours. 
   */
  @JsonAdapter(StreamPeriodEnum.Adapter.class)
  public enum StreamPeriodEnum {
    _1_WEEK("1_week"),
    
    _1_YEAR("1_year"),
    
    _24_HOUR("24_hour"),
    
    _30_DAYS("30_days"),
    
    _3_MONTH("3_month"),
    
    _48_HOUR("48_hour"),
    
    _6_MONTH("6_month"),
    
    _72_HOUR("72_hour");

    private String value;

    StreamPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreamPeriodEnum fromValue(String value) {
      for (StreamPeriodEnum b : StreamPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StreamPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreamPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreamPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreamPeriodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StreamPeriodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STREAM_PERIOD = "stream_period";
  @SerializedName(SERIALIZED_NAME_STREAM_PERIOD)
  private StreamPeriodEnum streamPeriod;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  /**
   * The way in which this promotion can generate promo codes:  Option descriptions:  * &#x60;batch&#x60; - Provides many unique promo codes that can only be used once each.  * &#x60;batch_prefix&#x60; - Similar to &#x60;batch&#x60;, except that all codes have a similar prefix string. This mode is deprecated, yet it may still appear for some users.  * &#x60;single&#x60; - Provides a single promo code with many uses. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BATCH("batch"),
    
    BATCH_PREFIX("batch_prefix"),
    
    SINGLE("single");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public OnDemandPromotion() {
  }

  public OnDemandPromotion accessType(AccessTypeEnum accessType) {
    this.accessType = accessType;
    return this;
  }

  /**
   * The type of access that this promotion grants:  Option descriptions:  * &#x60;default&#x60; - Grants discounts on existing product offerings.  * &#x60;vip&#x60; - Grants free access either to VOD content before it is released or to access types that aren&#39;t part of the existing product offerings. 
   * @return accessType
   */
  @javax.annotation.Nonnull
  public AccessTypeEnum getAccessType() {
    return accessType;
  }

  public void setAccessType(AccessTypeEnum accessType) {
    this.accessType = accessType;
  }


  public OnDemandPromotion discountType(DiscountTypeEnum discountType) {
    this.discountType = discountType;
    return this;
  }

  /**
   * The type of discount for which this promotion can be used.  Option descriptions:  * &#x60;dollars&#x60; - The discount is a certain fixed amount.  * &#x60;free&#x60; - The discount is the full purchase price. VIP access promotions always use this discount type.  * &#x60;percent&#x60; - The discount is a certain percentage of the full price. 
   * @return discountType
   */
  @javax.annotation.Nonnull
  public DiscountTypeEnum getDiscountType() {
    return discountType;
  }

  public void setDiscountType(DiscountTypeEnum discountType) {
    this.discountType = discountType;
  }


  public OnDemandPromotion download(Boolean download) {
    this.download = download;
    return this;
  }

  /**
   * Whether this promotion grants download access to On Demand content.
   * @return download
   */
  @javax.annotation.Nonnull
  public Boolean getDownload() {
    return download;
  }

  public void setDownload(Boolean download) {
    this.download = download;
  }


  public OnDemandPromotion label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The prefix string for batch codes, or the null value for single codes.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public OnDemandPromotion metadata(OnDemandPromotionMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public OnDemandPromotionMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(OnDemandPromotionMetadata metadata) {
    this.metadata = metadata;
  }


  public OnDemandPromotion percentOff(BigDecimal percentOff) {
    this.percentOff = percentOff;
    return this;
  }

  /**
   * The percentage amount that is deducted from the product price.
   * @return percentOff
   */
  @javax.annotation.Nonnull
  public BigDecimal getPercentOff() {
    return percentOff;
  }

  public void setPercentOff(BigDecimal percentOff) {
    this.percentOff = percentOff;
  }


  public OnDemandPromotion productType(ProductTypeEnum productType) {
    this.productType = productType;
    return this;
  }

  /**
   * The type of product to which this promotion can be applied. Only &#x60;buy&#x60; and &#x60;rent&#x60; are available for the VIP access type:  Option descriptions:  * &#x60;any&#x60; - The promotion can be applied to any product.  * &#x60;buy&#x60; - The promotion can be applied to a buyable single video.  * &#x60;buy_episode&#x60; - The promotion can be applied to a buyable single episode.  * &#x60;rent&#x60; - The promotion can be applied to a rentable single video.  * &#x60;rent_episode&#x60; - The promotion can be applied to a rentable single episode.  * &#x60;subscribe&#x60; - The promotion can be applied to a subscription. 
   * @return productType
   */
  @javax.annotation.Nonnull
  public ProductTypeEnum getProductType() {
    return productType;
  }

  public void setProductType(ProductTypeEnum productType) {
    this.productType = productType;
  }


  public OnDemandPromotion streamPeriod(StreamPeriodEnum streamPeriod) {
    this.streamPeriod = streamPeriod;
    return this;
  }

  /**
   * The amount of time that the user has access to the VOD content after redeeming a promo code.  Option descriptions:  * &#x60;1_week&#x60; - Access lasts for one week.  * &#x60;1_year&#x60; - Access lasts for one year.  * &#x60;24_hour&#x60; - Access lasts for 24 hours.  * &#x60;30_days&#x60; - Access lasts for 30 days.  * &#x60;3_month&#x60; - Access lasts for 3 months.  * &#x60;48_hour&#x60; - Access lasts for 48 hours.  * &#x60;6_month&#x60; - Access lasts for 6 months.  * &#x60;72_hour&#x60; - Access lasts for 72 hours. 
   * @return streamPeriod
   */
  @javax.annotation.Nullable
  public StreamPeriodEnum getStreamPeriod() {
    return streamPeriod;
  }

  public void setStreamPeriod(StreamPeriodEnum streamPeriod) {
    this.streamPeriod = streamPeriod;
  }


  public OnDemandPromotion total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * The total amount of times that this promotion can be used.
   * @return total
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  public OnDemandPromotion type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The way in which this promotion can generate promo codes:  Option descriptions:  * &#x60;batch&#x60; - Provides many unique promo codes that can only be used once each.  * &#x60;batch_prefix&#x60; - Similar to &#x60;batch&#x60;, except that all codes have a similar prefix string. This mode is deprecated, yet it may still appear for some users.  * &#x60;single&#x60; - Provides a single promo code with many uses. 
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public OnDemandPromotion uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The promotion&#39;s canonical relative URI.
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnDemandPromotion onDemandPromotion = (OnDemandPromotion) o;
    return Objects.equals(this.accessType, onDemandPromotion.accessType) &&
        Objects.equals(this.discountType, onDemandPromotion.discountType) &&
        Objects.equals(this.download, onDemandPromotion.download) &&
        Objects.equals(this.label, onDemandPromotion.label) &&
        Objects.equals(this.metadata, onDemandPromotion.metadata) &&
        Objects.equals(this.percentOff, onDemandPromotion.percentOff) &&
        Objects.equals(this.productType, onDemandPromotion.productType) &&
        Objects.equals(this.streamPeriod, onDemandPromotion.streamPeriod) &&
        Objects.equals(this.total, onDemandPromotion.total) &&
        Objects.equals(this.type, onDemandPromotion.type) &&
        Objects.equals(this.uri, onDemandPromotion.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessType, discountType, download, label, metadata, percentOff, productType, streamPeriod, total, type, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnDemandPromotion {\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    discountType: ").append(toIndentedString(discountType)).append("\n");
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    percentOff: ").append(toIndentedString(percentOff)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    streamPeriod: ").append(toIndentedString(streamPeriod)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_type");
    openapiFields.add("discount_type");
    openapiFields.add("download");
    openapiFields.add("label");
    openapiFields.add("metadata");
    openapiFields.add("percent_off");
    openapiFields.add("product_type");
    openapiFields.add("stream_period");
    openapiFields.add("total");
    openapiFields.add("type");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access_type");
    openapiRequiredFields.add("discount_type");
    openapiRequiredFields.add("download");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("percent_off");
    openapiRequiredFields.add("product_type");
    openapiRequiredFields.add("stream_period");
    openapiRequiredFields.add("total");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("uri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OnDemandPromotion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OnDemandPromotion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnDemandPromotion is not found in the empty JSON string", OnDemandPromotion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OnDemandPromotion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OnDemandPromotion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OnDemandPromotion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("access_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_type").toString()));
      }
      // validate the required field `access_type`
      AccessTypeEnum.validateJsonElement(jsonObj.get("access_type"));
      if (!jsonObj.get("discount_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discount_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discount_type").toString()));
      }
      // validate the required field `discount_type`
      DiscountTypeEnum.validateJsonElement(jsonObj.get("discount_type"));
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the required field `metadata`
      OnDemandPromotionMetadata.validateJsonElement(jsonObj.get("metadata"));
      if (!jsonObj.get("product_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_type").toString()));
      }
      // validate the required field `product_type`
      ProductTypeEnum.validateJsonElement(jsonObj.get("product_type"));
      if ((jsonObj.get("stream_period") != null && !jsonObj.get("stream_period").isJsonNull()) && !jsonObj.get("stream_period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_period").toString()));
      }
      // validate the required field `stream_period`
      StreamPeriodEnum.validateJsonElement(jsonObj.get("stream_period"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnDemandPromotion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnDemandPromotion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnDemandPromotion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnDemandPromotion.class));

       return (TypeAdapter<T>) new TypeAdapter<OnDemandPromotion>() {
           @Override
           public void write(JsonWriter out, OnDemandPromotion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OnDemandPromotion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OnDemandPromotion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OnDemandPromotion
   * @throws IOException if the JSON string is invalid with respect to OnDemandPromotion
   */
  public static OnDemandPromotion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnDemandPromotion.class);
  }

  /**
   * Convert an instance of OnDemandPromotion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

