/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VideoMetadataConnectionsComments;
import org.openapitools.client.model.VideoMetadataConnectionsCredits;
import org.openapitools.client.model.VideoMetadataConnectionsLikes;
import org.openapitools.client.model.VideoMetadataConnectionsOndemand;
import org.openapitools.client.model.VideoMetadataConnectionsPictures;
import org.openapitools.client.model.VideoMetadataConnectionsPlayback;
import org.openapitools.client.model.VideoMetadataConnectionsRecommendations;
import org.openapitools.client.model.VideoMetadataConnectionsRelated;
import org.openapitools.client.model.VideoMetadataConnectionsSeason;
import org.openapitools.client.model.VideoMetadataConnectionsTexttracks;
import org.openapitools.client.model.VideoMetadataConnectionsTrailer;
import org.openapitools.client.model.VideoMetadataConnectionsUsersWithAccess;
import org.openapitools.client.model.VideoMetadataConnectionsVersions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A list of resource URIs related to the video.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoMetadataConnections {
  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private VideoMetadataConnectionsComments comments;

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private VideoMetadataConnectionsCredits credits;

  public static final String SERIALIZED_NAME_LIKES = "likes";
  @SerializedName(SERIALIZED_NAME_LIKES)
  private VideoMetadataConnectionsLikes likes;

  public static final String SERIALIZED_NAME_ONDEMAND = "ondemand";
  @SerializedName(SERIALIZED_NAME_ONDEMAND)
  private VideoMetadataConnectionsOndemand ondemand;

  public static final String SERIALIZED_NAME_PICTURES = "pictures";
  @SerializedName(SERIALIZED_NAME_PICTURES)
  private VideoMetadataConnectionsPictures pictures;

  public static final String SERIALIZED_NAME_PLAYBACK = "playback";
  @SerializedName(SERIALIZED_NAME_PLAYBACK)
  private VideoMetadataConnectionsPlayback playback;

  public static final String SERIALIZED_NAME_RECOMMENDATIONS = "recommendations";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATIONS)
  private VideoMetadataConnectionsRecommendations recommendations;

  public static final String SERIALIZED_NAME_RELATED = "related";
  @SerializedName(SERIALIZED_NAME_RELATED)
  private VideoMetadataConnectionsRelated related;

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private VideoMetadataConnectionsSeason season;

  public static final String SERIALIZED_NAME_TEXTTRACKS = "texttracks";
  @SerializedName(SERIALIZED_NAME_TEXTTRACKS)
  private VideoMetadataConnectionsTexttracks texttracks;

  public static final String SERIALIZED_NAME_TRAILER = "trailer";
  @SerializedName(SERIALIZED_NAME_TRAILER)
  private VideoMetadataConnectionsTrailer trailer;

  public static final String SERIALIZED_NAME_USERS_WITH_ACCESS = "users_with_access";
  @SerializedName(SERIALIZED_NAME_USERS_WITH_ACCESS)
  private VideoMetadataConnectionsUsersWithAccess usersWithAccess;

  public static final String SERIALIZED_NAME_VERSIONS = "versions";
  @SerializedName(SERIALIZED_NAME_VERSIONS)
  private VideoMetadataConnectionsVersions versions;

  public VideoMetadataConnections() {
  }

  public VideoMetadataConnections comments(VideoMetadataConnectionsComments comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nonnull
  public VideoMetadataConnectionsComments getComments() {
    return comments;
  }

  public void setComments(VideoMetadataConnectionsComments comments) {
    this.comments = comments;
  }


  public VideoMetadataConnections credits(VideoMetadataConnectionsCredits credits) {
    this.credits = credits;
    return this;
  }

  /**
   * Get credits
   * @return credits
   */
  @javax.annotation.Nullable
  public VideoMetadataConnectionsCredits getCredits() {
    return credits;
  }

  public void setCredits(VideoMetadataConnectionsCredits credits) {
    this.credits = credits;
  }


  public VideoMetadataConnections likes(VideoMetadataConnectionsLikes likes) {
    this.likes = likes;
    return this;
  }

  /**
   * Get likes
   * @return likes
   */
  @javax.annotation.Nonnull
  public VideoMetadataConnectionsLikes getLikes() {
    return likes;
  }

  public void setLikes(VideoMetadataConnectionsLikes likes) {
    this.likes = likes;
  }


  public VideoMetadataConnections ondemand(VideoMetadataConnectionsOndemand ondemand) {
    this.ondemand = ondemand;
    return this;
  }

  /**
   * Get ondemand
   * @return ondemand
   */
  @javax.annotation.Nonnull
  public VideoMetadataConnectionsOndemand getOndemand() {
    return ondemand;
  }

  public void setOndemand(VideoMetadataConnectionsOndemand ondemand) {
    this.ondemand = ondemand;
  }


  public VideoMetadataConnections pictures(VideoMetadataConnectionsPictures pictures) {
    this.pictures = pictures;
    return this;
  }

  /**
   * Get pictures
   * @return pictures
   */
  @javax.annotation.Nonnull
  public VideoMetadataConnectionsPictures getPictures() {
    return pictures;
  }

  public void setPictures(VideoMetadataConnectionsPictures pictures) {
    this.pictures = pictures;
  }


  public VideoMetadataConnections playback(VideoMetadataConnectionsPlayback playback) {
    this.playback = playback;
    return this;
  }

  /**
   * Get playback
   * @return playback
   */
  @javax.annotation.Nonnull
  public VideoMetadataConnectionsPlayback getPlayback() {
    return playback;
  }

  public void setPlayback(VideoMetadataConnectionsPlayback playback) {
    this.playback = playback;
  }


  public VideoMetadataConnections recommendations(VideoMetadataConnectionsRecommendations recommendations) {
    this.recommendations = recommendations;
    return this;
  }

  /**
   * Get recommendations
   * @return recommendations
   */
  @javax.annotation.Nullable
  public VideoMetadataConnectionsRecommendations getRecommendations() {
    return recommendations;
  }

  public void setRecommendations(VideoMetadataConnectionsRecommendations recommendations) {
    this.recommendations = recommendations;
  }


  public VideoMetadataConnections related(VideoMetadataConnectionsRelated related) {
    this.related = related;
    return this;
  }

  /**
   * Get related
   * @return related
   */
  @javax.annotation.Nullable
  public VideoMetadataConnectionsRelated getRelated() {
    return related;
  }

  public void setRelated(VideoMetadataConnectionsRelated related) {
    this.related = related;
  }


  public VideoMetadataConnections season(VideoMetadataConnectionsSeason season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nonnull
  public VideoMetadataConnectionsSeason getSeason() {
    return season;
  }

  public void setSeason(VideoMetadataConnectionsSeason season) {
    this.season = season;
  }


  public VideoMetadataConnections texttracks(VideoMetadataConnectionsTexttracks texttracks) {
    this.texttracks = texttracks;
    return this;
  }

  /**
   * Get texttracks
   * @return texttracks
   */
  @javax.annotation.Nonnull
  public VideoMetadataConnectionsTexttracks getTexttracks() {
    return texttracks;
  }

  public void setTexttracks(VideoMetadataConnectionsTexttracks texttracks) {
    this.texttracks = texttracks;
  }


  public VideoMetadataConnections trailer(VideoMetadataConnectionsTrailer trailer) {
    this.trailer = trailer;
    return this;
  }

  /**
   * Get trailer
   * @return trailer
   */
  @javax.annotation.Nonnull
  public VideoMetadataConnectionsTrailer getTrailer() {
    return trailer;
  }

  public void setTrailer(VideoMetadataConnectionsTrailer trailer) {
    this.trailer = trailer;
  }


  public VideoMetadataConnections usersWithAccess(VideoMetadataConnectionsUsersWithAccess usersWithAccess) {
    this.usersWithAccess = usersWithAccess;
    return this;
  }

  /**
   * Get usersWithAccess
   * @return usersWithAccess
   */
  @javax.annotation.Nonnull
  public VideoMetadataConnectionsUsersWithAccess getUsersWithAccess() {
    return usersWithAccess;
  }

  public void setUsersWithAccess(VideoMetadataConnectionsUsersWithAccess usersWithAccess) {
    this.usersWithAccess = usersWithAccess;
  }


  public VideoMetadataConnections versions(VideoMetadataConnectionsVersions versions) {
    this.versions = versions;
    return this;
  }

  /**
   * Get versions
   * @return versions
   */
  @javax.annotation.Nonnull
  public VideoMetadataConnectionsVersions getVersions() {
    return versions;
  }

  public void setVersions(VideoMetadataConnectionsVersions versions) {
    this.versions = versions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoMetadataConnections videoMetadataConnections = (VideoMetadataConnections) o;
    return Objects.equals(this.comments, videoMetadataConnections.comments) &&
        Objects.equals(this.credits, videoMetadataConnections.credits) &&
        Objects.equals(this.likes, videoMetadataConnections.likes) &&
        Objects.equals(this.ondemand, videoMetadataConnections.ondemand) &&
        Objects.equals(this.pictures, videoMetadataConnections.pictures) &&
        Objects.equals(this.playback, videoMetadataConnections.playback) &&
        Objects.equals(this.recommendations, videoMetadataConnections.recommendations) &&
        Objects.equals(this.related, videoMetadataConnections.related) &&
        Objects.equals(this.season, videoMetadataConnections.season) &&
        Objects.equals(this.texttracks, videoMetadataConnections.texttracks) &&
        Objects.equals(this.trailer, videoMetadataConnections.trailer) &&
        Objects.equals(this.usersWithAccess, videoMetadataConnections.usersWithAccess) &&
        Objects.equals(this.versions, videoMetadataConnections.versions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, credits, likes, ondemand, pictures, playback, recommendations, related, season, texttracks, trailer, usersWithAccess, versions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoMetadataConnections {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    likes: ").append(toIndentedString(likes)).append("\n");
    sb.append("    ondemand: ").append(toIndentedString(ondemand)).append("\n");
    sb.append("    pictures: ").append(toIndentedString(pictures)).append("\n");
    sb.append("    playback: ").append(toIndentedString(playback)).append("\n");
    sb.append("    recommendations: ").append(toIndentedString(recommendations)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    texttracks: ").append(toIndentedString(texttracks)).append("\n");
    sb.append("    trailer: ").append(toIndentedString(trailer)).append("\n");
    sb.append("    usersWithAccess: ").append(toIndentedString(usersWithAccess)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comments");
    openapiFields.add("credits");
    openapiFields.add("likes");
    openapiFields.add("ondemand");
    openapiFields.add("pictures");
    openapiFields.add("playback");
    openapiFields.add("recommendations");
    openapiFields.add("related");
    openapiFields.add("season");
    openapiFields.add("texttracks");
    openapiFields.add("trailer");
    openapiFields.add("users_with_access");
    openapiFields.add("versions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("comments");
    openapiRequiredFields.add("credits");
    openapiRequiredFields.add("likes");
    openapiRequiredFields.add("ondemand");
    openapiRequiredFields.add("pictures");
    openapiRequiredFields.add("playback");
    openapiRequiredFields.add("recommendations");
    openapiRequiredFields.add("related");
    openapiRequiredFields.add("season");
    openapiRequiredFields.add("texttracks");
    openapiRequiredFields.add("trailer");
    openapiRequiredFields.add("users_with_access");
    openapiRequiredFields.add("versions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoMetadataConnections
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoMetadataConnections.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoMetadataConnections is not found in the empty JSON string", VideoMetadataConnections.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoMetadataConnections.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoMetadataConnections` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoMetadataConnections.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `comments`
      VideoMetadataConnectionsComments.validateJsonElement(jsonObj.get("comments"));
      // validate the required field `credits`
      VideoMetadataConnectionsCredits.validateJsonElement(jsonObj.get("credits"));
      // validate the required field `likes`
      VideoMetadataConnectionsLikes.validateJsonElement(jsonObj.get("likes"));
      // validate the required field `ondemand`
      VideoMetadataConnectionsOndemand.validateJsonElement(jsonObj.get("ondemand"));
      // validate the required field `pictures`
      VideoMetadataConnectionsPictures.validateJsonElement(jsonObj.get("pictures"));
      // validate the required field `playback`
      VideoMetadataConnectionsPlayback.validateJsonElement(jsonObj.get("playback"));
      // validate the required field `recommendations`
      VideoMetadataConnectionsRecommendations.validateJsonElement(jsonObj.get("recommendations"));
      // validate the required field `related`
      VideoMetadataConnectionsRelated.validateJsonElement(jsonObj.get("related"));
      // validate the required field `season`
      VideoMetadataConnectionsSeason.validateJsonElement(jsonObj.get("season"));
      // validate the required field `texttracks`
      VideoMetadataConnectionsTexttracks.validateJsonElement(jsonObj.get("texttracks"));
      // validate the required field `trailer`
      VideoMetadataConnectionsTrailer.validateJsonElement(jsonObj.get("trailer"));
      // validate the required field `users_with_access`
      VideoMetadataConnectionsUsersWithAccess.validateJsonElement(jsonObj.get("users_with_access"));
      // validate the required field `versions`
      VideoMetadataConnectionsVersions.validateJsonElement(jsonObj.get("versions"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoMetadataConnections.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoMetadataConnections' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoMetadataConnections> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoMetadataConnections.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoMetadataConnections>() {
           @Override
           public void write(JsonWriter out, VideoMetadataConnections value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoMetadataConnections read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoMetadataConnections given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoMetadataConnections
   * @throws IOException if the JSON string is invalid with respect to VideoMetadataConnections
   */
  public static VideoMetadataConnections fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoMetadataConnections.class);
  }

  /**
   * Convert an instance of VideoMetadataConnections to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

