/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.AlbumEmbed;
import org.openapitools.client.model.AlbumMetadata;
import org.openapitools.client.model.AlbumPrivacy;
import org.openapitools.client.model.Picture;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Album
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Album {
  public static final String SERIALIZED_NAME_ALLOW_CONTINUOUS_PLAY = "allow_continuous_play";
  @SerializedName(SERIALIZED_NAME_ALLOW_CONTINUOUS_PLAY)
  private Boolean allowContinuousPlay;

  public static final String SERIALIZED_NAME_ALLOW_DOWNLOADS = "allow_downloads";
  @SerializedName(SERIALIZED_NAME_ALLOW_DOWNLOADS)
  private Boolean allowDownloads;

  public static final String SERIALIZED_NAME_ALLOW_SHARE = "allow_share";
  @SerializedName(SERIALIZED_NAME_ALLOW_SHARE)
  private Boolean allowShare;

  public static final String SERIALIZED_NAME_BRAND_COLOR = "brand_color";
  @SerializedName(SERIALIZED_NAME_BRAND_COLOR)
  private String brandColor;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_CUSTOM_LOGO = "custom_logo";
  @SerializedName(SERIALIZED_NAME_CUSTOM_LOGO)
  private Picture customLogo;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BigDecimal duration;

  public static final String SERIALIZED_NAME_EMBED = "embed";
  @SerializedName(SERIALIZED_NAME_EMBED)
  private AlbumEmbed embed;

  public static final String SERIALIZED_NAME_EMBED_BRAND_COLOR = "embed_brand_color";
  @SerializedName(SERIALIZED_NAME_EMBED_BRAND_COLOR)
  private Boolean embedBrandColor;

  public static final String SERIALIZED_NAME_EMBED_CUSTOM_LOGO = "embed_custom_logo";
  @SerializedName(SERIALIZED_NAME_EMBED_CUSTOM_LOGO)
  private Boolean embedCustomLogo;

  public static final String SERIALIZED_NAME_HIDE_NAV = "hide_nav";
  @SerializedName(SERIALIZED_NAME_HIDE_NAV)
  private Boolean hideNav;

  public static final String SERIALIZED_NAME_HIDE_VIMEO_LOGO = "hide_vimeo_logo";
  @SerializedName(SERIALIZED_NAME_HIDE_VIMEO_LOGO)
  private Boolean hideVimeoLogo;

  /**
   * The album&#39;s layout preference
   */
  @JsonAdapter(LayoutEnum.Adapter.class)
  public enum LayoutEnum {
    GRID("grid"),
    
    PLAYER("player");

    private String value;

    LayoutEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LayoutEnum fromValue(String value) {
      for (LayoutEnum b : LayoutEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LayoutEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LayoutEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LayoutEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LayoutEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LayoutEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  private LayoutEnum layout;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private AlbumMetadata metadata;

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modified_time";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private String modifiedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICTURES = "pictures";
  @SerializedName(SERIALIZED_NAME_PICTURES)
  private Picture pictures;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private AlbumPrivacy privacy;

  public static final String SERIALIZED_NAME_RESOURCE_KEY = "resource_key";
  @SerializedName(SERIALIZED_NAME_RESOURCE_KEY)
  private String resourceKey;

  public static final String SERIALIZED_NAME_REVIEW_MODE = "review_mode";
  @SerializedName(SERIALIZED_NAME_REVIEW_MODE)
  private Boolean reviewMode;

  /**
   * Sort type of the album.
   */
  @JsonAdapter(SortEnum.Adapter.class)
  public enum SortEnum {
    ADDED_FIRST("added_first"),
    
    ADDED_LAST("added_last"),
    
    ALPHABETICAL("alphabetical"),
    
    ARRANGED("arranged"),
    
    COMMENTS("comments"),
    
    LIKES("likes"),
    
    NEWEST("newest"),
    
    OLDEST("oldest"),
    
    PLAYS("plays");

    private String value;

    SortEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortEnum fromValue(String value) {
      for (SortEnum b : SortEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SortEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private SortEnum sort;

  /**
   * The album&#39;s color theme preference
   */
  @JsonAdapter(ThemeEnum.Adapter.class)
  public enum ThemeEnum {
    DARK("dark"),
    
    STANDARD("standard");

    private String value;

    ThemeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThemeEnum fromValue(String value) {
      for (ThemeEnum b : ThemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThemeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThemeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ThemeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private ThemeEnum theme;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USE_CUSTOM_DOMAIN = "use_custom_domain";
  @SerializedName(SERIALIZED_NAME_USE_CUSTOM_DOMAIN)
  private Boolean useCustomDomain;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public static final String SERIALIZED_NAME_WEB_BRAND_COLOR = "web_brand_color";
  @SerializedName(SERIALIZED_NAME_WEB_BRAND_COLOR)
  private Boolean webBrandColor;

  public static final String SERIALIZED_NAME_WEB_CUSTOM_LOGO = "web_custom_logo";
  @SerializedName(SERIALIZED_NAME_WEB_CUSTOM_LOGO)
  private Boolean webCustomLogo;

  public Album() {
  }

  public Album allowContinuousPlay(Boolean allowContinuousPlay) {
    this.allowContinuousPlay = allowContinuousPlay;
    return this;
  }

  /**
   * Whether an album should allow continuous play.
   * @return allowContinuousPlay
   */
  @javax.annotation.Nonnull
  public Boolean getAllowContinuousPlay() {
    return allowContinuousPlay;
  }

  public void setAllowContinuousPlay(Boolean allowContinuousPlay) {
    this.allowContinuousPlay = allowContinuousPlay;
  }


  public Album allowDownloads(Boolean allowDownloads) {
    this.allowDownloads = allowDownloads;
    return this;
  }

  /**
   * Whether an album should allow downloads.
   * @return allowDownloads
   */
  @javax.annotation.Nonnull
  public Boolean getAllowDownloads() {
    return allowDownloads;
  }

  public void setAllowDownloads(Boolean allowDownloads) {
    this.allowDownloads = allowDownloads;
  }


  public Album allowShare(Boolean allowShare) {
    this.allowShare = allowShare;
    return this;
  }

  /**
   * Whether an album should allow sharing.
   * @return allowShare
   */
  @javax.annotation.Nonnull
  public Boolean getAllowShare() {
    return allowShare;
  }

  public void setAllowShare(Boolean allowShare) {
    this.allowShare = allowShare;
  }


  public Album brandColor(String brandColor) {
    this.brandColor = brandColor;
    return this;
  }

  /**
   * Hexadecimal color code for the decorative color. For example, album videos use this color for player buttons.
   * @return brandColor
   */
  @javax.annotation.Nullable
  public String getBrandColor() {
    return brandColor;
  }

  public void setBrandColor(String brandColor) {
    this.brandColor = brandColor;
  }


  public Album createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * The time in ISO 8601 format that the album was created.
   * @return createdTime
   */
  @javax.annotation.Nonnull
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }


  public Album customLogo(Picture customLogo) {
    this.customLogo = customLogo;
    return this;
  }

  /**
   * The custom logo for this album.
   * @return customLogo
   */
  @javax.annotation.Nullable
  public Picture getCustomLogo() {
    return customLogo;
  }

  public void setCustomLogo(Picture customLogo) {
    this.customLogo = customLogo;
  }


  public Album description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A brief description of the album&#39;s content.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Album domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The custom domain a user has selected for their album.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public Album duration(BigDecimal duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The total duration in seconds of all the videos in the album.
   * @return duration
   */
  @javax.annotation.Nonnull
  public BigDecimal getDuration() {
    return duration;
  }

  public void setDuration(BigDecimal duration) {
    this.duration = duration;
  }


  public Album embed(AlbumEmbed embed) {
    this.embed = embed;
    return this;
  }

  /**
   * Get embed
   * @return embed
   */
  @javax.annotation.Nonnull
  public AlbumEmbed getEmbed() {
    return embed;
  }

  public void setEmbed(AlbumEmbed embed) {
    this.embed = embed;
  }


  public Album embedBrandColor(Boolean embedBrandColor) {
    this.embedBrandColor = embedBrandColor;
    return this;
  }

  /**
   * Whether to show the album&#39;s custom brand color in the player of the album&#39;s embedded playlist.
   * @return embedBrandColor
   */
  @javax.annotation.Nullable
  public Boolean getEmbedBrandColor() {
    return embedBrandColor;
  }

  public void setEmbedBrandColor(Boolean embedBrandColor) {
    this.embedBrandColor = embedBrandColor;
  }


  public Album embedCustomLogo(Boolean embedCustomLogo) {
    this.embedCustomLogo = embedCustomLogo;
    return this;
  }

  /**
   * Whether to show the album&#39;s custom logo in the player of the album&#39;s embedded playlist.
   * @return embedCustomLogo
   */
  @javax.annotation.Nullable
  public Boolean getEmbedCustomLogo() {
    return embedCustomLogo;
  }

  public void setEmbedCustomLogo(Boolean embedCustomLogo) {
    this.embedCustomLogo = embedCustomLogo;
  }


  public Album hideNav(Boolean hideNav) {
    this.hideNav = hideNav;
    return this;
  }

  /**
   * Whether to hide the Vimeo navigation when viewing the album.
   * @return hideNav
   */
  @javax.annotation.Nonnull
  public Boolean getHideNav() {
    return hideNav;
  }

  public void setHideNav(Boolean hideNav) {
    this.hideNav = hideNav;
  }


  public Album hideVimeoLogo(Boolean hideVimeoLogo) {
    this.hideVimeoLogo = hideVimeoLogo;
    return this;
  }

  /**
   * Whether to hide the Vimeo logo in the player of the album&#39;s embedded playlist.
   * @return hideVimeoLogo
   */
  @javax.annotation.Nullable
  public Boolean getHideVimeoLogo() {
    return hideVimeoLogo;
  }

  public void setHideVimeoLogo(Boolean hideVimeoLogo) {
    this.hideVimeoLogo = hideVimeoLogo;
  }


  public Album layout(LayoutEnum layout) {
    this.layout = layout;
    return this;
  }

  /**
   * The album&#39;s layout preference
   * @return layout
   */
  @javax.annotation.Nonnull
  public LayoutEnum getLayout() {
    return layout;
  }

  public void setLayout(LayoutEnum layout) {
    this.layout = layout;
  }


  public Album link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The URL to access the album.
   * @return link
   */
  @javax.annotation.Nonnull
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public Album metadata(AlbumMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public AlbumMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(AlbumMetadata metadata) {
    this.metadata = metadata;
  }


  public Album modifiedTime(String modifiedTime) {
    this.modifiedTime = modifiedTime;
    return this;
  }

  /**
   * The time in ISO 8601 format when the album was last modified.
   * @return modifiedTime
   */
  @javax.annotation.Nonnull
  public String getModifiedTime() {
    return modifiedTime;
  }

  public void setModifiedTime(String modifiedTime) {
    this.modifiedTime = modifiedTime;
  }


  public Album name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The album&#39;s display name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Album pictures(Picture pictures) {
    this.pictures = pictures;
    return this;
  }

  /**
   * The active image for the album; defaults to the thumbnail of the last video added to the album.
   * @return pictures
   */
  @javax.annotation.Nonnull
  public Picture getPictures() {
    return pictures;
  }

  public void setPictures(Picture pictures) {
    this.pictures = pictures;
  }


  public Album privacy(AlbumPrivacy privacy) {
    this.privacy = privacy;
    return this;
  }

  /**
   * Get privacy
   * @return privacy
   */
  @javax.annotation.Nonnull
  public AlbumPrivacy getPrivacy() {
    return privacy;
  }

  public void setPrivacy(AlbumPrivacy privacy) {
    this.privacy = privacy;
  }


  public Album resourceKey(String resourceKey) {
    this.resourceKey = resourceKey;
    return this;
  }

  /**
   * The album resource key.
   * @return resourceKey
   */
  @javax.annotation.Nonnull
  public String getResourceKey() {
    return resourceKey;
  }

  public void setResourceKey(String resourceKey) {
    this.resourceKey = resourceKey;
  }


  public Album reviewMode(Boolean reviewMode) {
    this.reviewMode = reviewMode;
    return this;
  }

  /**
   * Whether album videos should use the review mode URL.
   * @return reviewMode
   */
  @javax.annotation.Nonnull
  public Boolean getReviewMode() {
    return reviewMode;
  }

  public void setReviewMode(Boolean reviewMode) {
    this.reviewMode = reviewMode;
  }


  public Album sort(SortEnum sort) {
    this.sort = sort;
    return this;
  }

  /**
   * Sort type of the album.
   * @return sort
   */
  @javax.annotation.Nonnull
  public SortEnum getSort() {
    return sort;
  }

  public void setSort(SortEnum sort) {
    this.sort = sort;
  }


  public Album theme(ThemeEnum theme) {
    this.theme = theme;
    return this;
  }

  /**
   * The album&#39;s color theme preference
   * @return theme
   */
  @javax.annotation.Nonnull
  public ThemeEnum getTheme() {
    return theme;
  }

  public void setTheme(ThemeEnum theme) {
    this.theme = theme;
  }


  public Album uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The album&#39;s URI.
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public Album url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The custom Vimeo URL a user has selected for their album.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Album useCustomDomain(Boolean useCustomDomain) {
    this.useCustomDomain = useCustomDomain;
    return this;
  }

  /**
   * Whether the user has opted in to use a custom domain for their album.
   * @return useCustomDomain
   */
  @javax.annotation.Nonnull
  public Boolean getUseCustomDomain() {
    return useCustomDomain;
  }

  public void setUseCustomDomain(Boolean useCustomDomain) {
    this.useCustomDomain = useCustomDomain;
  }


  public Album user(User user) {
    this.user = user;
    return this;
  }

  /**
   * The owner of the album.
   * @return user
   */
  @javax.annotation.Nonnull
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }


  public Album webBrandColor(Boolean webBrandColor) {
    this.webBrandColor = webBrandColor;
    return this;
  }

  /**
   * Whether an album should show the brand color in the web layout.
   * @return webBrandColor
   */
  @javax.annotation.Nonnull
  public Boolean getWebBrandColor() {
    return webBrandColor;
  }

  public void setWebBrandColor(Boolean webBrandColor) {
    this.webBrandColor = webBrandColor;
  }


  public Album webCustomLogo(Boolean webCustomLogo) {
    this.webCustomLogo = webCustomLogo;
    return this;
  }

  /**
   * Whether an album&#39;s custom logo should be shown in the web layout.
   * @return webCustomLogo
   */
  @javax.annotation.Nonnull
  public Boolean getWebCustomLogo() {
    return webCustomLogo;
  }

  public void setWebCustomLogo(Boolean webCustomLogo) {
    this.webCustomLogo = webCustomLogo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Album album = (Album) o;
    return Objects.equals(this.allowContinuousPlay, album.allowContinuousPlay) &&
        Objects.equals(this.allowDownloads, album.allowDownloads) &&
        Objects.equals(this.allowShare, album.allowShare) &&
        Objects.equals(this.brandColor, album.brandColor) &&
        Objects.equals(this.createdTime, album.createdTime) &&
        Objects.equals(this.customLogo, album.customLogo) &&
        Objects.equals(this.description, album.description) &&
        Objects.equals(this.domain, album.domain) &&
        Objects.equals(this.duration, album.duration) &&
        Objects.equals(this.embed, album.embed) &&
        Objects.equals(this.embedBrandColor, album.embedBrandColor) &&
        Objects.equals(this.embedCustomLogo, album.embedCustomLogo) &&
        Objects.equals(this.hideNav, album.hideNav) &&
        Objects.equals(this.hideVimeoLogo, album.hideVimeoLogo) &&
        Objects.equals(this.layout, album.layout) &&
        Objects.equals(this.link, album.link) &&
        Objects.equals(this.metadata, album.metadata) &&
        Objects.equals(this.modifiedTime, album.modifiedTime) &&
        Objects.equals(this.name, album.name) &&
        Objects.equals(this.pictures, album.pictures) &&
        Objects.equals(this.privacy, album.privacy) &&
        Objects.equals(this.resourceKey, album.resourceKey) &&
        Objects.equals(this.reviewMode, album.reviewMode) &&
        Objects.equals(this.sort, album.sort) &&
        Objects.equals(this.theme, album.theme) &&
        Objects.equals(this.uri, album.uri) &&
        Objects.equals(this.url, album.url) &&
        Objects.equals(this.useCustomDomain, album.useCustomDomain) &&
        Objects.equals(this.user, album.user) &&
        Objects.equals(this.webBrandColor, album.webBrandColor) &&
        Objects.equals(this.webCustomLogo, album.webCustomLogo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowContinuousPlay, allowDownloads, allowShare, brandColor, createdTime, customLogo, description, domain, duration, embed, embedBrandColor, embedCustomLogo, hideNav, hideVimeoLogo, layout, link, metadata, modifiedTime, name, pictures, privacy, resourceKey, reviewMode, sort, theme, uri, url, useCustomDomain, user, webBrandColor, webCustomLogo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Album {\n");
    sb.append("    allowContinuousPlay: ").append(toIndentedString(allowContinuousPlay)).append("\n");
    sb.append("    allowDownloads: ").append(toIndentedString(allowDownloads)).append("\n");
    sb.append("    allowShare: ").append(toIndentedString(allowShare)).append("\n");
    sb.append("    brandColor: ").append(toIndentedString(brandColor)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    customLogo: ").append(toIndentedString(customLogo)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    embedBrandColor: ").append(toIndentedString(embedBrandColor)).append("\n");
    sb.append("    embedCustomLogo: ").append(toIndentedString(embedCustomLogo)).append("\n");
    sb.append("    hideNav: ").append(toIndentedString(hideNav)).append("\n");
    sb.append("    hideVimeoLogo: ").append(toIndentedString(hideVimeoLogo)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pictures: ").append(toIndentedString(pictures)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    resourceKey: ").append(toIndentedString(resourceKey)).append("\n");
    sb.append("    reviewMode: ").append(toIndentedString(reviewMode)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    useCustomDomain: ").append(toIndentedString(useCustomDomain)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    webBrandColor: ").append(toIndentedString(webBrandColor)).append("\n");
    sb.append("    webCustomLogo: ").append(toIndentedString(webCustomLogo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_continuous_play");
    openapiFields.add("allow_downloads");
    openapiFields.add("allow_share");
    openapiFields.add("brand_color");
    openapiFields.add("created_time");
    openapiFields.add("custom_logo");
    openapiFields.add("description");
    openapiFields.add("domain");
    openapiFields.add("duration");
    openapiFields.add("embed");
    openapiFields.add("embed_brand_color");
    openapiFields.add("embed_custom_logo");
    openapiFields.add("hide_nav");
    openapiFields.add("hide_vimeo_logo");
    openapiFields.add("layout");
    openapiFields.add("link");
    openapiFields.add("metadata");
    openapiFields.add("modified_time");
    openapiFields.add("name");
    openapiFields.add("pictures");
    openapiFields.add("privacy");
    openapiFields.add("resource_key");
    openapiFields.add("review_mode");
    openapiFields.add("sort");
    openapiFields.add("theme");
    openapiFields.add("uri");
    openapiFields.add("url");
    openapiFields.add("use_custom_domain");
    openapiFields.add("user");
    openapiFields.add("web_brand_color");
    openapiFields.add("web_custom_logo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allow_continuous_play");
    openapiRequiredFields.add("allow_downloads");
    openapiRequiredFields.add("allow_share");
    openapiRequiredFields.add("brand_color");
    openapiRequiredFields.add("created_time");
    openapiRequiredFields.add("custom_logo");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("embed");
    openapiRequiredFields.add("embed_brand_color");
    openapiRequiredFields.add("embed_custom_logo");
    openapiRequiredFields.add("hide_nav");
    openapiRequiredFields.add("hide_vimeo_logo");
    openapiRequiredFields.add("layout");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("modified_time");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pictures");
    openapiRequiredFields.add("privacy");
    openapiRequiredFields.add("resource_key");
    openapiRequiredFields.add("review_mode");
    openapiRequiredFields.add("sort");
    openapiRequiredFields.add("theme");
    openapiRequiredFields.add("uri");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("use_custom_domain");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("web_brand_color");
    openapiRequiredFields.add("web_custom_logo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Album
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Album.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Album is not found in the empty JSON string", Album.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Album.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Album` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Album.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("brand_color") != null && !jsonObj.get("brand_color").isJsonNull()) && !jsonObj.get("brand_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_color").toString()));
      }
      if (!jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      // validate the required field `custom_logo`
      Picture.validateJsonElement(jsonObj.get("custom_logo"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      // validate the required field `embed`
      AlbumEmbed.validateJsonElement(jsonObj.get("embed"));
      if (!jsonObj.get("layout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layout").toString()));
      }
      // validate the required field `layout`
      LayoutEnum.validateJsonElement(jsonObj.get("layout"));
      if (!jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the required field `metadata`
      AlbumMetadata.validateJsonElement(jsonObj.get("metadata"));
      if (!jsonObj.get("modified_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_time").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `pictures`
      Picture.validateJsonElement(jsonObj.get("pictures"));
      // validate the required field `privacy`
      AlbumPrivacy.validateJsonElement(jsonObj.get("privacy"));
      if (!jsonObj.get("resource_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_key").toString()));
      }
      if (!jsonObj.get("sort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }
      // validate the required field `sort`
      SortEnum.validateJsonElement(jsonObj.get("sort"));
      if (!jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
      // validate the required field `theme`
      ThemeEnum.validateJsonElement(jsonObj.get("theme"));
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the required field `user`
      User.validateJsonElement(jsonObj.get("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Album.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Album' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Album> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Album.class));

       return (TypeAdapter<T>) new TypeAdapter<Album>() {
           @Override
           public void write(JsonWriter out, Album value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Album read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Album given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Album
   * @throws IOException if the JSON string is invalid with respect to Album
   */
  public static Album fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Album.class);
  }

  /**
   * Convert an instance of Album to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

