/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.EditPictureAlt1Request;
import org.openapitools.client.model.Picture;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersPicturesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersPicturesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersPicturesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPicture
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user picture was created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPictureCall(BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/pictures"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPictureValidateBeforeCall(BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling createPicture(Async)");
        }

        return createPictureCall(userId, _callback);

    }

    /**
     * Add a user picture
     * 
     * @param userId The ID of the user. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user picture was created. </td><td>  -  </td></tr>
     </table>
     */
    public Picture createPicture(BigDecimal userId) throws ApiException {
        ApiResponse<Picture> localVarResp = createPictureWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Add a user picture
     * 
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user picture was created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> createPictureWithHttpInfo(BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = createPictureValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a user picture (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user picture was created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPictureAsync(BigDecimal userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPictureValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPictureAlt1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user picture was created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPictureAlt1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/pictures";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPictureAlt1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createPictureAlt1Call(_callback);

    }

    /**
     * Add a user picture
     * 
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user picture was created. </td><td>  -  </td></tr>
     </table>
     */
    public Picture createPictureAlt1() throws ApiException {
        ApiResponse<Picture> localVarResp = createPictureAlt1WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Add a user picture
     * 
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user picture was created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> createPictureAlt1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createPictureAlt1ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a user picture (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user picture was created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPictureAlt1Async(final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPictureAlt1ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePicture
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The picture was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePictureCall(BigDecimal portraitsetId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/pictures/{portraitset_id}"
            .replace("{" + "portraitset_id" + "}", localVarApiClient.escapeString(portraitsetId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePictureValidateBeforeCall(BigDecimal portraitsetId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portraitsetId' is set
        if (portraitsetId == null) {
            throw new ApiException("Missing the required parameter 'portraitsetId' when calling deletePicture(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deletePicture(Async)");
        }

        return deletePictureCall(portraitsetId, userId, _callback);

    }

    /**
     * Delete a user picture
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The picture was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void deletePicture(BigDecimal portraitsetId, BigDecimal userId) throws ApiException {
        deletePictureWithHttpInfo(portraitsetId, userId);
    }

    /**
     * Delete a user picture
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The picture was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePictureWithHttpInfo(BigDecimal portraitsetId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = deletePictureValidateBeforeCall(portraitsetId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a user picture (asynchronously)
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The picture was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePictureAsync(BigDecimal portraitsetId, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePictureValidateBeforeCall(portraitsetId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePictureAlt1
     * @param portraitsetId The ID of the picture. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The picture was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePictureAlt1Call(BigDecimal portraitsetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/pictures/{portraitset_id}"
            .replace("{" + "portraitset_id" + "}", localVarApiClient.escapeString(portraitsetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePictureAlt1ValidateBeforeCall(BigDecimal portraitsetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portraitsetId' is set
        if (portraitsetId == null) {
            throw new ApiException("Missing the required parameter 'portraitsetId' when calling deletePictureAlt1(Async)");
        }

        return deletePictureAlt1Call(portraitsetId, _callback);

    }

    /**
     * Delete a user picture
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The picture was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void deletePictureAlt1(BigDecimal portraitsetId) throws ApiException {
        deletePictureAlt1WithHttpInfo(portraitsetId);
    }

    /**
     * Delete a user picture
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The picture was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePictureAlt1WithHttpInfo(BigDecimal portraitsetId) throws ApiException {
        okhttp3.Call localVarCall = deletePictureAlt1ValidateBeforeCall(portraitsetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a user picture (asynchronously)
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The picture was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePictureAlt1Async(BigDecimal portraitsetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePictureAlt1ValidateBeforeCall(portraitsetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editPicture
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @param editPictureAlt1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was edited. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editPictureCall(BigDecimal portraitsetId, BigDecimal userId, EditPictureAlt1Request editPictureAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editPictureAlt1Request;

        // create path and map variables
        String localVarPath = "/users/{user_id}/pictures/{portraitset_id}"
            .replace("{" + "portraitset_id" + "}", localVarApiClient.escapeString(portraitsetId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editPictureValidateBeforeCall(BigDecimal portraitsetId, BigDecimal userId, EditPictureAlt1Request editPictureAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portraitsetId' is set
        if (portraitsetId == null) {
            throw new ApiException("Missing the required parameter 'portraitsetId' when calling editPicture(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling editPicture(Async)");
        }

        return editPictureCall(portraitsetId, userId, editPictureAlt1Request, _callback);

    }

    /**
     * Edit a user picture
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @param editPictureAlt1Request  (optional)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was edited. </td><td>  -  </td></tr>
     </table>
     */
    public Picture editPicture(BigDecimal portraitsetId, BigDecimal userId, EditPictureAlt1Request editPictureAlt1Request) throws ApiException {
        ApiResponse<Picture> localVarResp = editPictureWithHttpInfo(portraitsetId, userId, editPictureAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Edit a user picture
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @param editPictureAlt1Request  (optional)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was edited. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> editPictureWithHttpInfo(BigDecimal portraitsetId, BigDecimal userId, EditPictureAlt1Request editPictureAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = editPictureValidateBeforeCall(portraitsetId, userId, editPictureAlt1Request, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a user picture (asynchronously)
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @param editPictureAlt1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was edited. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editPictureAsync(BigDecimal portraitsetId, BigDecimal userId, EditPictureAlt1Request editPictureAlt1Request, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = editPictureValidateBeforeCall(portraitsetId, userId, editPictureAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editPictureAlt1
     * @param portraitsetId The ID of the picture. (required)
     * @param editPictureAlt1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was edited. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editPictureAlt1Call(BigDecimal portraitsetId, EditPictureAlt1Request editPictureAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editPictureAlt1Request;

        // create path and map variables
        String localVarPath = "/me/pictures/{portraitset_id}"
            .replace("{" + "portraitset_id" + "}", localVarApiClient.escapeString(portraitsetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editPictureAlt1ValidateBeforeCall(BigDecimal portraitsetId, EditPictureAlt1Request editPictureAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portraitsetId' is set
        if (portraitsetId == null) {
            throw new ApiException("Missing the required parameter 'portraitsetId' when calling editPictureAlt1(Async)");
        }

        return editPictureAlt1Call(portraitsetId, editPictureAlt1Request, _callback);

    }

    /**
     * Edit a user picture
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @param editPictureAlt1Request  (optional)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was edited. </td><td>  -  </td></tr>
     </table>
     */
    public Picture editPictureAlt1(BigDecimal portraitsetId, EditPictureAlt1Request editPictureAlt1Request) throws ApiException {
        ApiResponse<Picture> localVarResp = editPictureAlt1WithHttpInfo(portraitsetId, editPictureAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Edit a user picture
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @param editPictureAlt1Request  (optional)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was edited. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> editPictureAlt1WithHttpInfo(BigDecimal portraitsetId, EditPictureAlt1Request editPictureAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = editPictureAlt1ValidateBeforeCall(portraitsetId, editPictureAlt1Request, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a user picture (asynchronously)
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @param editPictureAlt1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was edited. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editPictureAlt1Async(BigDecimal portraitsetId, EditPictureAlt1Request editPictureAlt1Request, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = editPictureAlt1ValidateBeforeCall(portraitsetId, editPictureAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPicture
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPictureCall(BigDecimal portraitsetId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/pictures/{portraitset_id}"
            .replace("{" + "portraitset_id" + "}", localVarApiClient.escapeString(portraitsetId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPictureValidateBeforeCall(BigDecimal portraitsetId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portraitsetId' is set
        if (portraitsetId == null) {
            throw new ApiException("Missing the required parameter 'portraitsetId' when calling getPicture(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getPicture(Async)");
        }

        return getPictureCall(portraitsetId, userId, _callback);

    }

    /**
     * Get a specific user picture
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was returned. </td><td>  -  </td></tr>
     </table>
     */
    public Picture getPicture(BigDecimal portraitsetId, BigDecimal userId) throws ApiException {
        ApiResponse<Picture> localVarResp = getPictureWithHttpInfo(portraitsetId, userId);
        return localVarResp.getData();
    }

    /**
     * Get a specific user picture
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> getPictureWithHttpInfo(BigDecimal portraitsetId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = getPictureValidateBeforeCall(portraitsetId, userId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific user picture (asynchronously)
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPictureAsync(BigDecimal portraitsetId, BigDecimal userId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPictureValidateBeforeCall(portraitsetId, userId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPictureAlt1
     * @param portraitsetId The ID of the picture. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPictureAlt1Call(BigDecimal portraitsetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/pictures/{portraitset_id}"
            .replace("{" + "portraitset_id" + "}", localVarApiClient.escapeString(portraitsetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPictureAlt1ValidateBeforeCall(BigDecimal portraitsetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portraitsetId' is set
        if (portraitsetId == null) {
            throw new ApiException("Missing the required parameter 'portraitsetId' when calling getPictureAlt1(Async)");
        }

        return getPictureAlt1Call(portraitsetId, _callback);

    }

    /**
     * Get a specific user picture
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was returned. </td><td>  -  </td></tr>
     </table>
     */
    public Picture getPictureAlt1(BigDecimal portraitsetId) throws ApiException {
        ApiResponse<Picture> localVarResp = getPictureAlt1WithHttpInfo(portraitsetId);
        return localVarResp.getData();
    }

    /**
     * Get a specific user picture
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> getPictureAlt1WithHttpInfo(BigDecimal portraitsetId) throws ApiException {
        okhttp3.Call localVarCall = getPictureAlt1ValidateBeforeCall(portraitsetId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific user picture (asynchronously)
     * 
     * @param portraitsetId The ID of the picture. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The picture was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPictureAlt1Async(BigDecimal portraitsetId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPictureAlt1ValidateBeforeCall(portraitsetId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPictures
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pictures were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPicturesCall(BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/pictures"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPicturesValidateBeforeCall(BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getPictures(Async)");
        }

        return getPicturesCall(userId, page, perPage, _callback);

    }

    /**
     * Get all the pictures that belong to a user
     * 
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pictures were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Picture> getPictures(BigDecimal userId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Picture>> localVarResp = getPicturesWithHttpInfo(userId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the pictures that belong to a user
     * 
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pictures were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Picture>> getPicturesWithHttpInfo(BigDecimal userId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getPicturesValidateBeforeCall(userId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the pictures that belong to a user (asynchronously)
     * 
     * @param userId The ID of the user. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pictures were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPicturesAsync(BigDecimal userId, BigDecimal page, BigDecimal perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPicturesValidateBeforeCall(userId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPicturesAlt1
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pictures were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPicturesAlt1Call(BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/pictures";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPicturesAlt1ValidateBeforeCall(BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        return getPicturesAlt1Call(page, perPage, _callback);

    }

    /**
     * Get all the pictures that belong to a user
     * 
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pictures were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Picture> getPicturesAlt1(BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Picture>> localVarResp = getPicturesAlt1WithHttpInfo(page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the pictures that belong to a user
     * 
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pictures were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Picture>> getPicturesAlt1WithHttpInfo(BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getPicturesAlt1ValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the pictures that belong to a user (asynchronously)
     * 
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pictures were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPicturesAlt1Async(BigDecimal page, BigDecimal perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPicturesAlt1ValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
