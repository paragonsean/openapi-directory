/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The upload information for this version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoVersionsUpload {
  /**
   * The approach for uploading the video.
   */
  @JsonAdapter(ApproachEnum.Adapter.class)
  public enum ApproachEnum {
    POST("post"),
    
    PULL("pull"),
    
    STREAMING("streaming"),
    
    TUS("tus");

    private String value;

    ApproachEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApproachEnum fromValue(String value) {
      for (ApproachEnum b : ApproachEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApproachEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApproachEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApproachEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApproachEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApproachEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPROACH = "approach";
  @SerializedName(SERIALIZED_NAME_APPROACH)
  private ApproachEnum approach;

  public static final String SERIALIZED_NAME_COMPLETE_URI = "complete_uri";
  @SerializedName(SERIALIZED_NAME_COMPLETE_URI)
  private String completeUri;

  public static final String SERIALIZED_NAME_FORM = "form";
  @SerializedName(SERIALIZED_NAME_FORM)
  private String form;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private BigDecimal size;

  /**
   * The status code for the availability of the uploaded video:  Option descriptions:  * &#x60;complete&#x60; - The upload is complete.  * &#x60;error&#x60; - The upload ended with an error.  * &#x60;in_progress&#x60; - The upload is underway. 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    COMPLETE("complete"),
    
    ERROR("error"),
    
    IN_PROGRESS("in_progress");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_UPLOAD_LINK = "upload_link";
  @SerializedName(SERIALIZED_NAME_UPLOAD_LINK)
  private String uploadLink;

  public VideoVersionsUpload() {
  }

  public VideoVersionsUpload approach(ApproachEnum approach) {
    this.approach = approach;
    return this;
  }

  /**
   * The approach for uploading the video.
   * @return approach
   */
  @javax.annotation.Nullable
  public ApproachEnum getApproach() {
    return approach;
  }

  public void setApproach(ApproachEnum approach) {
    this.approach = approach;
  }


  public VideoVersionsUpload completeUri(String completeUri) {
    this.completeUri = completeUri;
    return this;
  }

  /**
   * The URI for completing the upload.
   * @return completeUri
   */
  @javax.annotation.Nullable
  public String getCompleteUri() {
    return completeUri;
  }

  public void setCompleteUri(String completeUri) {
    this.completeUri = completeUri;
  }


  public VideoVersionsUpload form(String form) {
    this.form = form;
    return this;
  }

  /**
   * The HTML form for uploading a video through the post approach.
   * @return form
   */
  @javax.annotation.Nullable
  public String getForm() {
    return form;
  }

  public void setForm(String form) {
    this.form = form;
  }


  public VideoVersionsUpload link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The link of the video to capture through the pull approach.
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public VideoVersionsUpload redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * The redirect URL for the upload app.
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public VideoVersionsUpload size(BigDecimal size) {
    this.size = size;
    return this;
  }

  /**
   * The file size in bytes of the uploaded video.
   * @return size
   */
  @javax.annotation.Nullable
  public BigDecimal getSize() {
    return size;
  }

  public void setSize(BigDecimal size) {
    this.size = size;
  }


  public VideoVersionsUpload status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status code for the availability of the uploaded video:  Option descriptions:  * &#x60;complete&#x60; - The upload is complete.  * &#x60;error&#x60; - The upload ended with an error.  * &#x60;in_progress&#x60; - The upload is underway. 
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public VideoVersionsUpload uploadLink(String uploadLink) {
    this.uploadLink = uploadLink;
    return this;
  }

  /**
   * The link for sending video file data.
   * @return uploadLink
   */
  @javax.annotation.Nullable
  public String getUploadLink() {
    return uploadLink;
  }

  public void setUploadLink(String uploadLink) {
    this.uploadLink = uploadLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoVersionsUpload videoVersionsUpload = (VideoVersionsUpload) o;
    return Objects.equals(this.approach, videoVersionsUpload.approach) &&
        Objects.equals(this.completeUri, videoVersionsUpload.completeUri) &&
        Objects.equals(this.form, videoVersionsUpload.form) &&
        Objects.equals(this.link, videoVersionsUpload.link) &&
        Objects.equals(this.redirectUrl, videoVersionsUpload.redirectUrl) &&
        Objects.equals(this.size, videoVersionsUpload.size) &&
        Objects.equals(this.status, videoVersionsUpload.status) &&
        Objects.equals(this.uploadLink, videoVersionsUpload.uploadLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approach, completeUri, form, link, redirectUrl, size, status, uploadLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoVersionsUpload {\n");
    sb.append("    approach: ").append(toIndentedString(approach)).append("\n");
    sb.append("    completeUri: ").append(toIndentedString(completeUri)).append("\n");
    sb.append("    form: ").append(toIndentedString(form)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uploadLink: ").append(toIndentedString(uploadLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approach");
    openapiFields.add("complete_uri");
    openapiFields.add("form");
    openapiFields.add("link");
    openapiFields.add("redirect_url");
    openapiFields.add("size");
    openapiFields.add("status");
    openapiFields.add("upload_link");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoVersionsUpload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoVersionsUpload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoVersionsUpload is not found in the empty JSON string", VideoVersionsUpload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoVersionsUpload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoVersionsUpload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoVersionsUpload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("approach") != null && !jsonObj.get("approach").isJsonNull()) && !jsonObj.get("approach").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approach` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approach").toString()));
      }
      // validate the optional field `approach`
      if (jsonObj.get("approach") != null && !jsonObj.get("approach").isJsonNull()) {
        ApproachEnum.validateJsonElement(jsonObj.get("approach"));
      }
      if ((jsonObj.get("complete_uri") != null && !jsonObj.get("complete_uri").isJsonNull()) && !jsonObj.get("complete_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complete_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complete_uri").toString()));
      }
      if ((jsonObj.get("form") != null && !jsonObj.get("form").isJsonNull()) && !jsonObj.get("form").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) && !jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("upload_link") != null && !jsonObj.get("upload_link").isJsonNull()) && !jsonObj.get("upload_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upload_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upload_link").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoVersionsUpload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoVersionsUpload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoVersionsUpload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoVersionsUpload.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoVersionsUpload>() {
           @Override
           public void write(JsonWriter out, VideoVersionsUpload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoVersionsUpload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoVersionsUpload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoVersionsUpload
   * @throws IOException if the JSON string is invalid with respect to VideoVersionsUpload
   */
  public static VideoVersionsUpload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoVersionsUpload.class);
  }

  /**
   * Convert an instance of VideoVersionsUpload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

