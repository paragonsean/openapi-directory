/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.User;
import org.openapitools.client.model.Video;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UploadAttempt
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UploadAttempt {
  public static final String SERIALIZED_NAME_CLIP = "clip";
  @SerializedName(SERIALIZED_NAME_CLIP)
  private Video clip;

  public static final String SERIALIZED_NAME_COMPLETE_URI = "complete_uri";
  @SerializedName(SERIALIZED_NAME_COMPLETE_URI)
  private String completeUri;

  public static final String SERIALIZED_NAME_FORM = "form";
  @SerializedName(SERIALIZED_NAME_FORM)
  private String form;

  public static final String SERIALIZED_NAME_TICKET_ID = "ticket_id";
  @SerializedName(SERIALIZED_NAME_TICKET_ID)
  private String ticketId;

  public static final String SERIALIZED_NAME_UPLOAD_LINK = "upload_link";
  @SerializedName(SERIALIZED_NAME_UPLOAD_LINK)
  private String uploadLink;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public UploadAttempt() {
  }

  public UploadAttempt clip(Video clip) {
    this.clip = clip;
    return this;
  }

  /**
   * The video to upload.
   * @return clip
   */
  @javax.annotation.Nullable
  public Video getClip() {
    return clip;
  }

  public void setClip(Video clip) {
    this.clip = clip;
  }


  public UploadAttempt completeUri(String completeUri) {
    this.completeUri = completeUri;
    return this;
  }

  /**
   * The completion URI of the upload.
   * @return completeUri
   */
  @javax.annotation.Nullable
  public String getCompleteUri() {
    return completeUri;
  }

  public void setCompleteUri(String completeUri) {
    this.completeUri = completeUri;
  }


  public UploadAttempt form(String form) {
    this.form = form;
    return this;
  }

  /**
   * The HTML upload form.
   * @return form
   */
  @javax.annotation.Nullable
  public String getForm() {
    return form;
  }

  public void setForm(String form) {
    this.form = form;
  }


  public UploadAttempt ticketId(String ticketId) {
    this.ticketId = ticketId;
    return this;
  }

  /**
   * The ticket identifier string for the upload.
   * @return ticketId
   */
  @javax.annotation.Nonnull
  public String getTicketId() {
    return ticketId;
  }

  public void setTicketId(String ticketId) {
    this.ticketId = ticketId;
  }


  public UploadAttempt uploadLink(String uploadLink) {
    this.uploadLink = uploadLink;
    return this;
  }

  /**
   * The upload URL.
   * @return uploadLink
   */
  @javax.annotation.Nonnull
  public String getUploadLink() {
    return uploadLink;
  }

  public void setUploadLink(String uploadLink) {
    this.uploadLink = uploadLink;
  }


  public UploadAttempt uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The upload URI.
   * @return uri
   */
  @javax.annotation.Nonnull
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  public UploadAttempt user(User user) {
    this.user = user;
    return this;
  }

  /**
   * The owner of the uploaded video.
   * @return user
   */
  @javax.annotation.Nonnull
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadAttempt uploadAttempt = (UploadAttempt) o;
    return Objects.equals(this.clip, uploadAttempt.clip) &&
        Objects.equals(this.completeUri, uploadAttempt.completeUri) &&
        Objects.equals(this.form, uploadAttempt.form) &&
        Objects.equals(this.ticketId, uploadAttempt.ticketId) &&
        Objects.equals(this.uploadLink, uploadAttempt.uploadLink) &&
        Objects.equals(this.uri, uploadAttempt.uri) &&
        Objects.equals(this.user, uploadAttempt.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clip, completeUri, form, ticketId, uploadLink, uri, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadAttempt {\n");
    sb.append("    clip: ").append(toIndentedString(clip)).append("\n");
    sb.append("    completeUri: ").append(toIndentedString(completeUri)).append("\n");
    sb.append("    form: ").append(toIndentedString(form)).append("\n");
    sb.append("    ticketId: ").append(toIndentedString(ticketId)).append("\n");
    sb.append("    uploadLink: ").append(toIndentedString(uploadLink)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clip");
    openapiFields.add("complete_uri");
    openapiFields.add("form");
    openapiFields.add("ticket_id");
    openapiFields.add("upload_link");
    openapiFields.add("uri");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ticket_id");
    openapiRequiredFields.add("upload_link");
    openapiRequiredFields.add("uri");
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UploadAttempt
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UploadAttempt.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadAttempt is not found in the empty JSON string", UploadAttempt.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UploadAttempt.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UploadAttempt` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UploadAttempt.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clip`
      if (jsonObj.get("clip") != null && !jsonObj.get("clip").isJsonNull()) {
        Video.validateJsonElement(jsonObj.get("clip"));
      }
      if ((jsonObj.get("complete_uri") != null && !jsonObj.get("complete_uri").isJsonNull()) && !jsonObj.get("complete_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complete_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complete_uri").toString()));
      }
      if ((jsonObj.get("form") != null && !jsonObj.get("form").isJsonNull()) && !jsonObj.get("form").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form").toString()));
      }
      if (!jsonObj.get("ticket_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticket_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticket_id").toString()));
      }
      if (!jsonObj.get("upload_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upload_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upload_link").toString()));
      }
      if (!jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // validate the required field `user`
      User.validateJsonElement(jsonObj.get("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadAttempt.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadAttempt' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadAttempt> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadAttempt.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadAttempt>() {
           @Override
           public void write(JsonWriter out, UploadAttempt value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadAttempt read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UploadAttempt given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UploadAttempt
   * @throws IOException if the JSON string is invalid with respect to UploadAttempt
   */
  public static UploadAttempt fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadAttempt.class);
  }

  /**
   * Convert an instance of UploadAttempt to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

