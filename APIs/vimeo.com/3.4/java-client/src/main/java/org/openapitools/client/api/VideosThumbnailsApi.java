/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CreateVideoThumbnailAlt1Request;
import org.openapitools.client.model.EditVideoThumbnailRequest;
import org.openapitools.client.model.Picture;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideosThumbnailsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosThumbnailsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideosThumbnailsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createVideoThumbnail
     * @param videoId The ID of the video. (required)
     * @param createVideoThumbnailAlt1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVideoThumbnailCall(BigDecimal videoId, CreateVideoThumbnailAlt1Request createVideoThumbnailAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVideoThumbnailAlt1Request;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/pictures"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVideoThumbnailValidateBeforeCall(BigDecimal videoId, CreateVideoThumbnailAlt1Request createVideoThumbnailAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createVideoThumbnail(Async)");
        }

        return createVideoThumbnailCall(videoId, createVideoThumbnailAlt1Request, _callback);

    }

    /**
     * Add a video thumbnail
     * 
     * @param videoId The ID of the video. (required)
     * @param createVideoThumbnailAlt1Request  (optional)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public Picture createVideoThumbnail(BigDecimal videoId, CreateVideoThumbnailAlt1Request createVideoThumbnailAlt1Request) throws ApiException {
        ApiResponse<Picture> localVarResp = createVideoThumbnailWithHttpInfo(videoId, createVideoThumbnailAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Add a video thumbnail
     * 
     * @param videoId The ID of the video. (required)
     * @param createVideoThumbnailAlt1Request  (optional)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> createVideoThumbnailWithHttpInfo(BigDecimal videoId, CreateVideoThumbnailAlt1Request createVideoThumbnailAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = createVideoThumbnailValidateBeforeCall(videoId, createVideoThumbnailAlt1Request, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a video thumbnail (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param createVideoThumbnailAlt1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVideoThumbnailAsync(BigDecimal videoId, CreateVideoThumbnailAlt1Request createVideoThumbnailAlt1Request, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVideoThumbnailValidateBeforeCall(videoId, createVideoThumbnailAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVideoThumbnailAlt1
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param createVideoThumbnailAlt1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVideoThumbnailAlt1Call(BigDecimal channelId, BigDecimal videoId, CreateVideoThumbnailAlt1Request createVideoThumbnailAlt1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVideoThumbnailAlt1Request;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/pictures"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVideoThumbnailAlt1ValidateBeforeCall(BigDecimal channelId, BigDecimal videoId, CreateVideoThumbnailAlt1Request createVideoThumbnailAlt1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling createVideoThumbnailAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling createVideoThumbnailAlt1(Async)");
        }

        return createVideoThumbnailAlt1Call(channelId, videoId, createVideoThumbnailAlt1Request, _callback);

    }

    /**
     * Add a video thumbnail
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param createVideoThumbnailAlt1Request  (optional)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public Picture createVideoThumbnailAlt1(BigDecimal channelId, BigDecimal videoId, CreateVideoThumbnailAlt1Request createVideoThumbnailAlt1Request) throws ApiException {
        ApiResponse<Picture> localVarResp = createVideoThumbnailAlt1WithHttpInfo(channelId, videoId, createVideoThumbnailAlt1Request);
        return localVarResp.getData();
    }

    /**
     * Add a video thumbnail
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param createVideoThumbnailAlt1Request  (optional)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> createVideoThumbnailAlt1WithHttpInfo(BigDecimal channelId, BigDecimal videoId, CreateVideoThumbnailAlt1Request createVideoThumbnailAlt1Request) throws ApiException {
        okhttp3.Call localVarCall = createVideoThumbnailAlt1ValidateBeforeCall(channelId, videoId, createVideoThumbnailAlt1Request, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a video thumbnail (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param createVideoThumbnailAlt1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The thumbnail was created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVideoThumbnailAlt1Async(BigDecimal channelId, BigDecimal videoId, CreateVideoThumbnailAlt1Request createVideoThumbnailAlt1Request, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVideoThumbnailAlt1ValidateBeforeCall(channelId, videoId, createVideoThumbnailAlt1Request, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVideoThumbnail
     * @param pictureId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoThumbnailCall(BigDecimal pictureId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/pictures/{picture_id}"
            .replace("{" + "picture_id" + "}", localVarApiClient.escapeString(pictureId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoThumbnailValidateBeforeCall(BigDecimal pictureId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pictureId' is set
        if (pictureId == null) {
            throw new ApiException("Missing the required parameter 'pictureId' when calling deleteVideoThumbnail(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteVideoThumbnail(Async)");
        }

        return deleteVideoThumbnailCall(pictureId, videoId, _callback);

    }

    /**
     * Delete a video thumbnail
     * 
     * @param pictureId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVideoThumbnail(BigDecimal pictureId, BigDecimal videoId) throws ApiException {
        deleteVideoThumbnailWithHttpInfo(pictureId, videoId);
    }

    /**
     * Delete a video thumbnail
     * 
     * @param pictureId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVideoThumbnailWithHttpInfo(BigDecimal pictureId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoThumbnailValidateBeforeCall(pictureId, videoId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a video thumbnail (asynchronously)
     * 
     * @param pictureId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The thumbnail was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoThumbnailAsync(BigDecimal pictureId, BigDecimal videoId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoThumbnailValidateBeforeCall(pictureId, videoId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editVideoThumbnail
     * @param pictureId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @param editVideoThumbnailRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editVideoThumbnailCall(BigDecimal pictureId, BigDecimal videoId, EditVideoThumbnailRequest editVideoThumbnailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editVideoThumbnailRequest;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/pictures/{picture_id}"
            .replace("{" + "picture_id" + "}", localVarApiClient.escapeString(pictureId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editVideoThumbnailValidateBeforeCall(BigDecimal pictureId, BigDecimal videoId, EditVideoThumbnailRequest editVideoThumbnailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pictureId' is set
        if (pictureId == null) {
            throw new ApiException("Missing the required parameter 'pictureId' when calling editVideoThumbnail(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling editVideoThumbnail(Async)");
        }

        return editVideoThumbnailCall(pictureId, videoId, editVideoThumbnailRequest, _callback);

    }

    /**
     * Edit a video thumbnail
     * 
     * @param pictureId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @param editVideoThumbnailRequest  (optional)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
     </table>
     */
    public Picture editVideoThumbnail(BigDecimal pictureId, BigDecimal videoId, EditVideoThumbnailRequest editVideoThumbnailRequest) throws ApiException {
        ApiResponse<Picture> localVarResp = editVideoThumbnailWithHttpInfo(pictureId, videoId, editVideoThumbnailRequest);
        return localVarResp.getData();
    }

    /**
     * Edit a video thumbnail
     * 
     * @param pictureId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @param editVideoThumbnailRequest  (optional)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> editVideoThumbnailWithHttpInfo(BigDecimal pictureId, BigDecimal videoId, EditVideoThumbnailRequest editVideoThumbnailRequest) throws ApiException {
        okhttp3.Call localVarCall = editVideoThumbnailValidateBeforeCall(pictureId, videoId, editVideoThumbnailRequest, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit a video thumbnail (asynchronously)
     * 
     * @param pictureId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @param editVideoThumbnailRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was edited. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editVideoThumbnailAsync(BigDecimal pictureId, BigDecimal videoId, EditVideoThumbnailRequest editVideoThumbnailRequest, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = editVideoThumbnailValidateBeforeCall(pictureId, videoId, editVideoThumbnailRequest, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoThumbnail
     * @param pictureId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoThumbnailCall(BigDecimal pictureId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/pictures/{picture_id}"
            .replace("{" + "picture_id" + "}", localVarApiClient.escapeString(pictureId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoThumbnailValidateBeforeCall(BigDecimal pictureId, BigDecimal videoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pictureId' is set
        if (pictureId == null) {
            throw new ApiException("Missing the required parameter 'pictureId' when calling getVideoThumbnail(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoThumbnail(Async)");
        }

        return getVideoThumbnailCall(pictureId, videoId, _callback);

    }

    /**
     * Get a video thumbnail
     * 
     * @param pictureId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @return Picture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
     </table>
     */
    public Picture getVideoThumbnail(BigDecimal pictureId, BigDecimal videoId) throws ApiException {
        ApiResponse<Picture> localVarResp = getVideoThumbnailWithHttpInfo(pictureId, videoId);
        return localVarResp.getData();
    }

    /**
     * Get a video thumbnail
     * 
     * @param pictureId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @return ApiResponse&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Picture> getVideoThumbnailWithHttpInfo(BigDecimal pictureId, BigDecimal videoId) throws ApiException {
        okhttp3.Call localVarCall = getVideoThumbnailValidateBeforeCall(pictureId, videoId, null);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a video thumbnail (asynchronously)
     * 
     * @param pictureId The ID of the picture. (required)
     * @param videoId The ID of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnail was returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoThumbnailAsync(BigDecimal pictureId, BigDecimal videoId, final ApiCallback<Picture> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoThumbnailValidateBeforeCall(pictureId, videoId, _callback);
        Type localVarReturnType = new TypeToken<Picture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoThumbnails
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoThumbnailsCall(BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{video_id}/pictures"
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoThumbnailsValidateBeforeCall(BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoThumbnails(Async)");
        }

        return getVideoThumbnailsCall(videoId, page, perPage, _callback);

    }

    /**
     * Get all the thumbnails of a video
     * 
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Picture> getVideoThumbnails(BigDecimal videoId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Picture>> localVarResp = getVideoThumbnailsWithHttpInfo(videoId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the thumbnails of a video
     * 
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Picture>> getVideoThumbnailsWithHttpInfo(BigDecimal videoId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getVideoThumbnailsValidateBeforeCall(videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the thumbnails of a video (asynchronously)
     * 
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoThumbnailsAsync(BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoThumbnailsValidateBeforeCall(videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoThumbnailsAlt1
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoThumbnailsAlt1Call(BigDecimal channelId, BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/videos/{video_id}/pictures"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "video_id" + "}", localVarApiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.picture+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoThumbnailsAlt1ValidateBeforeCall(BigDecimal channelId, BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getVideoThumbnailsAlt1(Async)");
        }

        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoThumbnailsAlt1(Async)");
        }

        return getVideoThumbnailsAlt1Call(channelId, videoId, page, perPage, _callback);

    }

    /**
     * Get all the thumbnails of a video
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;Picture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<Picture> getVideoThumbnailsAlt1(BigDecimal channelId, BigDecimal videoId, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<Picture>> localVarResp = getVideoThumbnailsAlt1WithHttpInfo(channelId, videoId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the thumbnails of a video
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;Picture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Picture>> getVideoThumbnailsAlt1WithHttpInfo(BigDecimal channelId, BigDecimal videoId, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getVideoThumbnailsAlt1ValidateBeforeCall(channelId, videoId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the thumbnails of a video (asynchronously)
     * 
     * @param channelId The ID of the channel. (required)
     * @param videoId The ID of the video. (required)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The thumbnails were returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoThumbnailsAlt1Async(BigDecimal channelId, BigDecimal videoId, BigDecimal page, BigDecimal perPage, final ApiCallback<List<Picture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoThumbnailsAlt1ValidateBeforeCall(channelId, videoId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Picture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
