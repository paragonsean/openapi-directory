/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.SetChannelPrivacyUsersRequest;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelsPrivateChannelMembersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelsPrivateChannelMembersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsPrivateChannelMembersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteChannelPrivacyUser
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user can no longer view the private channel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add this user to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelPrivacyUserCall(BigDecimal channelId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/privacy/users/{user_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelPrivacyUserValidateBeforeCall(BigDecimal channelId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling deleteChannelPrivacyUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteChannelPrivacyUser(Async)");
        }

        return deleteChannelPrivacyUserCall(channelId, userId, _callback);

    }

    /**
     * Restrict a user from viewing a private channel
     * This method prevents a single user from being able to access the specified private channel.
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user can no longer view the private channel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add this user to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChannelPrivacyUser(BigDecimal channelId, BigDecimal userId) throws ApiException {
        deleteChannelPrivacyUserWithHttpInfo(channelId, userId);
    }

    /**
     * Restrict a user from viewing a private channel
     * This method prevents a single user from being able to access the specified private channel.
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user can no longer view the private channel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add this user to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChannelPrivacyUserWithHttpInfo(BigDecimal channelId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelPrivacyUserValidateBeforeCall(channelId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restrict a user from viewing a private channel (asynchronously)
     * This method prevents a single user from being able to access the specified private channel.
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The user can no longer view the private channel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add this user to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelPrivacyUserAsync(BigDecimal channelId, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelPrivacyUserValidateBeforeCall(channelId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelPrivacyUsers
     * @param channelId The ID of the channel. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add this user to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelPrivacyUsersCall(BigDecimal channelId, String direction, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/privacy/users"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelPrivacyUsersValidateBeforeCall(BigDecimal channelId, String direction, BigDecimal page, BigDecimal perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelPrivacyUsers(Async)");
        }

        return getChannelPrivacyUsersCall(channelId, direction, page, perPage, _callback);

    }

    /**
     * Get all the users who can view a private channel
     * This method gets all the users who have access to the specified private channel.
     * @param channelId The ID of the channel. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add this user to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> getChannelPrivacyUsers(BigDecimal channelId, String direction, BigDecimal page, BigDecimal perPage) throws ApiException {
        ApiResponse<List<User>> localVarResp = getChannelPrivacyUsersWithHttpInfo(channelId, direction, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all the users who can view a private channel
     * This method gets all the users who have access to the specified private channel.
     * @param channelId The ID of the channel. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add this user to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> getChannelPrivacyUsersWithHttpInfo(BigDecimal channelId, String direction, BigDecimal page, BigDecimal perPage) throws ApiException {
        okhttp3.Call localVarCall = getChannelPrivacyUsersValidateBeforeCall(channelId, direction, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all the users who can view a private channel (asynchronously)
     * This method gets all the users who have access to the specified private channel.
     * @param channelId The ID of the channel. (required)
     * @param direction The sort direction of the results. (optional)
     * @param page The page number of the results to show. (optional)
     * @param perPage The number of items to show on each page of results, up to a maximum of 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users were returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add this user to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelPrivacyUsersAsync(BigDecimal channelId, String direction, BigDecimal page, BigDecimal perPage, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelPrivacyUsersValidateBeforeCall(channelId, direction, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setChannelPrivacyUser
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user can now view the private channel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add this user to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setChannelPrivacyUserCall(BigDecimal channelId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/privacy/users/{user_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setChannelPrivacyUserValidateBeforeCall(BigDecimal channelId, BigDecimal userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling setChannelPrivacyUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setChannelPrivacyUser(Async)");
        }

        return setChannelPrivacyUserCall(channelId, userId, _callback);

    }

    /**
     * Permit a specific user to view a private channel
     * This method gives a single user access to the specified private channel.
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user can now view the private channel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add this user to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public void setChannelPrivacyUser(BigDecimal channelId, BigDecimal userId) throws ApiException {
        setChannelPrivacyUserWithHttpInfo(channelId, userId);
    }

    /**
     * Permit a specific user to view a private channel
     * This method gives a single user access to the specified private channel.
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user can now view the private channel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add this user to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setChannelPrivacyUserWithHttpInfo(BigDecimal channelId, BigDecimal userId) throws ApiException {
        okhttp3.Call localVarCall = setChannelPrivacyUserValidateBeforeCall(channelId, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Permit a specific user to view a private channel (asynchronously)
     * This method gives a single user access to the specified private channel.
     * @param channelId The ID of the channel. (required)
     * @param userId The ID of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user can now view the private channel. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add this user to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setChannelPrivacyUserAsync(BigDecimal channelId, BigDecimal userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setChannelPrivacyUserValidateBeforeCall(channelId, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setChannelPrivacyUsers
     * @param channelId The ID of the channel. (required)
     * @param setChannelPrivacyUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users can now view the private channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: There was no request body, or the request body is malformed. * Error code 2900: At least one of the specified user accounts doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add one or more of these users to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setChannelPrivacyUsersCall(BigDecimal channelId, SetChannelPrivacyUsersRequest setChannelPrivacyUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setChannelPrivacyUsersRequest;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/privacy/users"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vimeo.user+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setChannelPrivacyUsersValidateBeforeCall(BigDecimal channelId, SetChannelPrivacyUsersRequest setChannelPrivacyUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling setChannelPrivacyUsers(Async)");
        }

        // verify the required parameter 'setChannelPrivacyUsersRequest' is set
        if (setChannelPrivacyUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'setChannelPrivacyUsersRequest' when calling setChannelPrivacyUsers(Async)");
        }

        return setChannelPrivacyUsersCall(channelId, setChannelPrivacyUsersRequest, _callback);

    }

    /**
     * Permit a list of users to view a private channel
     * This method gives multiple users access to the specified private channel.
     * @param channelId The ID of the channel. (required)
     * @param setChannelPrivacyUsersRequest  (required)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users can now view the private channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: There was no request body, or the request body is malformed. * Error code 2900: At least one of the specified user accounts doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add one or more of these users to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> setChannelPrivacyUsers(BigDecimal channelId, SetChannelPrivacyUsersRequest setChannelPrivacyUsersRequest) throws ApiException {
        ApiResponse<List<User>> localVarResp = setChannelPrivacyUsersWithHttpInfo(channelId, setChannelPrivacyUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Permit a list of users to view a private channel
     * This method gives multiple users access to the specified private channel.
     * @param channelId The ID of the channel. (required)
     * @param setChannelPrivacyUsersRequest  (required)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users can now view the private channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: There was no request body, or the request body is malformed. * Error code 2900: At least one of the specified user accounts doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add one or more of these users to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> setChannelPrivacyUsersWithHttpInfo(BigDecimal channelId, SetChannelPrivacyUsersRequest setChannelPrivacyUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = setChannelPrivacyUsersValidateBeforeCall(channelId, setChannelPrivacyUsersRequest, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Permit a list of users to view a private channel (asynchronously)
     * This method gives multiple users access to the specified private channel.
     * @param channelId The ID of the channel. (required)
     * @param setChannelPrivacyUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The users can now view the private channel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> * Error code 2205: There was no request body, or the request body is malformed. * Error code 2900: At least one of the specified user accounts doesn&#39;t exist. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error code 8003: The user credentials are invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error code 3200: The authenticated user doesn&#39;t own this channel. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error code 2204: You can&#39;t add one or more of these users to a channel of this type. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setChannelPrivacyUsersAsync(BigDecimal channelId, SetChannelPrivacyUsersRequest setChannelPrivacyUsersRequest, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = setChannelPrivacyUsersValidateBeforeCall(channelId, setChannelPrivacyUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
