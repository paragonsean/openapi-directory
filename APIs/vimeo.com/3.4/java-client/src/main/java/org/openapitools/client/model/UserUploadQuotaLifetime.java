/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the user&#39;s lifetime upload usage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserUploadQuotaLifetime {
  public static final String SERIALIZED_NAME_FREE = "free";
  @SerializedName(SERIALIZED_NAME_FREE)
  private BigDecimal free;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private BigDecimal max;

  public static final String SERIALIZED_NAME_USED = "used";
  @SerializedName(SERIALIZED_NAME_USED)
  private BigDecimal used;

  public UserUploadQuotaLifetime() {
  }

  public UserUploadQuotaLifetime free(BigDecimal free) {
    this.free = free;
    return this;
  }

  /**
   * The number of bytes remaining in your lifetime maximum.
   * @return free
   */
  @javax.annotation.Nullable
  public BigDecimal getFree() {
    return free;
  }

  public void setFree(BigDecimal free) {
    this.free = free;
  }


  public UserUploadQuotaLifetime max(BigDecimal max) {
    this.max = max;
    return this;
  }

  /**
   * The total number of bytes that you can upload across the lifetime of your account.
   * @return max
   */
  @javax.annotation.Nullable
  public BigDecimal getMax() {
    return max;
  }

  public void setMax(BigDecimal max) {
    this.max = max;
  }


  public UserUploadQuotaLifetime used(BigDecimal used) {
    this.used = used;
    return this;
  }

  /**
   * The number of bytes that you&#39;ve already uploaded against your lifetime limit.
   * @return used
   */
  @javax.annotation.Nullable
  public BigDecimal getUsed() {
    return used;
  }

  public void setUsed(BigDecimal used) {
    this.used = used;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserUploadQuotaLifetime userUploadQuotaLifetime = (UserUploadQuotaLifetime) o;
    return Objects.equals(this.free, userUploadQuotaLifetime.free) &&
        Objects.equals(this.max, userUploadQuotaLifetime.max) &&
        Objects.equals(this.used, userUploadQuotaLifetime.used);
  }

  @Override
  public int hashCode() {
    return Objects.hash(free, max, used);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserUploadQuotaLifetime {\n");
    sb.append("    free: ").append(toIndentedString(free)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("free");
    openapiFields.add("max");
    openapiFields.add("used");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("free");
    openapiRequiredFields.add("max");
    openapiRequiredFields.add("used");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserUploadQuotaLifetime
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserUploadQuotaLifetime.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserUploadQuotaLifetime is not found in the empty JSON string", UserUploadQuotaLifetime.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserUploadQuotaLifetime.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserUploadQuotaLifetime` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserUploadQuotaLifetime.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserUploadQuotaLifetime.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserUploadQuotaLifetime' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserUploadQuotaLifetime> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserUploadQuotaLifetime.class));

       return (TypeAdapter<T>) new TypeAdapter<UserUploadQuotaLifetime>() {
           @Override
           public void write(JsonWriter out, UserUploadQuotaLifetime value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserUploadQuotaLifetime read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserUploadQuotaLifetime given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserUploadQuotaLifetime
   * @throws IOException if the JSON string is invalid with respect to UserUploadQuotaLifetime
   */
  public static UserUploadQuotaLifetime fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserUploadQuotaLifetime.class);
  }

  /**
   * Convert an instance of UserUploadQuotaLifetime to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

