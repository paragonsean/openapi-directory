/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Activity31Metadata;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.User;
import org.openapitools.client.model.Video;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Activity31
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Activity31 {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Category category;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private Channel channel;

  public static final String SERIALIZED_NAME_CLIP = "clip";
  @SerializedName(SERIALIZED_NAME_CLIP)
  private Video clip;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private Group group;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Activity31Metadata metadata;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private Tag tag;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  /**
   * Activity type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    APPEARANCE("appearance"),
    
    CATEGORY("category"),
    
    CHANNEL("channel"),
    
    FACEBOOK_FEED("facebook_feed"),
    
    GROUP("group"),
    
    LIKE("like"),
    
    ONDEMAND("ondemand"),
    
    SHARE("share"),
    
    TAG("tag"),
    
    TWITTER_TIMELINE("twitter_timeline"),
    
    UPLOAD("upload");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public Activity31() {
  }

  public Activity31 category(Category category) {
    this.category = category;
    return this;
  }

  /**
   * The category that this event occurred for. This will be preset for only \&quot;category\&quot; activity types.
   * @return category
   */
  @javax.annotation.Nullable
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }


  public Activity31 channel(Channel channel) {
    this.channel = channel;
    return this;
  }

  /**
   * The channel that this event occurred for. This will be present for only \&quot;channel\&quot; activity types.
   * @return channel
   */
  @javax.annotation.Nullable
  public Channel getChannel() {
    return channel;
  }

  public void setChannel(Channel channel) {
    this.channel = channel;
  }


  public Activity31 clip(Video clip) {
    this.clip = clip;
    return this;
  }

  /**
   * Video associated with ths activity.
   * @return clip
   */
  @javax.annotation.Nonnull
  public Video getClip() {
    return clip;
  }

  public void setClip(Video clip) {
    this.clip = clip;
  }


  public Activity31 group(Group group) {
    this.group = group;
    return this;
  }

  /**
   * The group that this event occurred for. This will be present for only \&quot;group\&quot; activity types.
   * @return group
   */
  @javax.annotation.Nullable
  public Group getGroup() {
    return group;
  }

  public void setGroup(Group group) {
    this.group = group;
  }


  public Activity31 metadata(Activity31Metadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public Activity31Metadata getMetadata() {
    return metadata;
  }

  public void setMetadata(Activity31Metadata metadata) {
    this.metadata = metadata;
  }


  public Activity31 tag(Tag tag) {
    this.tag = tag;
    return this;
  }

  /**
   * The tag that this event occurred for. This will be present for only \&quot;tag\&quot; activity types.
   * @return tag
   */
  @javax.annotation.Nullable
  public Tag getTag() {
    return tag;
  }

  public void setTag(Tag tag) {
    this.tag = tag;
  }


  public Activity31 time(String time) {
    this.time = time;
    return this;
  }

  /**
   * Time that the event occurred.
   * @return time
   */
  @javax.annotation.Nonnull
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }


  public Activity31 type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Activity type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Activity31 user(User user) {
    this.user = user;
    return this;
  }

  /**
   * The user that this event occurred for. This will be present for \&quot;like\&quot;, \&quot;appearance\&quot;, and \&quot;share\&quot; activity types.
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Activity31 activity31 = (Activity31) o;
    return Objects.equals(this.category, activity31.category) &&
        Objects.equals(this.channel, activity31.channel) &&
        Objects.equals(this.clip, activity31.clip) &&
        Objects.equals(this.group, activity31.group) &&
        Objects.equals(this.metadata, activity31.metadata) &&
        Objects.equals(this.tag, activity31.tag) &&
        Objects.equals(this.time, activity31.time) &&
        Objects.equals(this.type, activity31.type) &&
        Objects.equals(this.user, activity31.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, channel, clip, group, metadata, tag, time, type, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Activity31 {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    clip: ").append(toIndentedString(clip)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("channel");
    openapiFields.add("clip");
    openapiFields.add("group");
    openapiFields.add("metadata");
    openapiFields.add("tag");
    openapiFields.add("time");
    openapiFields.add("type");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clip");
    openapiRequiredFields.add("metadata");
    openapiRequiredFields.add("time");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Activity31
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Activity31.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Activity31 is not found in the empty JSON string", Activity31.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Activity31.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Activity31` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Activity31.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        Category.validateJsonElement(jsonObj.get("category"));
      }
      // validate the optional field `channel`
      if (jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) {
        Channel.validateJsonElement(jsonObj.get("channel"));
      }
      // validate the required field `clip`
      Video.validateJsonElement(jsonObj.get("clip"));
      // validate the optional field `group`
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
        Group.validateJsonElement(jsonObj.get("group"));
      }
      // validate the required field `metadata`
      Activity31Metadata.validateJsonElement(jsonObj.get("metadata"));
      // validate the optional field `tag`
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) {
        Tag.validateJsonElement(jsonObj.get("tag"));
      }
      if (!jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Activity31.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Activity31' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Activity31> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Activity31.class));

       return (TypeAdapter<T>) new TypeAdapter<Activity31>() {
           @Override
           public void write(JsonWriter out, Activity31 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Activity31 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Activity31 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Activity31
   * @throws IOException if the JSON string is invalid with respect to Activity31
   */
  public static Activity31 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Activity31.class);
  }

  /**
   * Convert an instance of Activity31 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

