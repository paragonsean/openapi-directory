/*
 * Vimeo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Rent interaction for an On Demand video.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:19.485904-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoMetadataInteractionsRent {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DISPLAY_PRICE = "display_price";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PRICE)
  private String displayPrice;

  public static final String SERIALIZED_NAME_DRM = "drm";
  @SerializedName(SERIALIZED_NAME_DRM)
  private Boolean drm;

  public static final String SERIALIZED_NAME_EXPIRES_TIME = "expires_time";
  @SerializedName(SERIALIZED_NAME_EXPIRES_TIME)
  private String expiresTime;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_PURCHASE_TIME = "purchase_time";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TIME)
  private String purchaseTime;

  /**
   * The user&#39;s streaming access to this On Demand video:  Option descriptions:  * &#x60;available&#x60; - The video is available for streaming.  * &#x60;purchased&#x60; - The user has purchased the video.  * &#x60;restricted&#x60; - The user isn&#39;t permitted to stream the video.  * &#x60;unavailable&#x60; - The video isn&#39;t available for streaming. 
   */
  @JsonAdapter(StreamEnum.Adapter.class)
  public enum StreamEnum {
    AVAILABLE("available"),
    
    PURCHASED("purchased"),
    
    RESTRICTED("restricted"),
    
    UNAVAILABLE("unavailable");

    private String value;

    StreamEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreamEnum fromValue(String value) {
      for (StreamEnum b : StreamEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StreamEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreamEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreamEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreamEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StreamEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STREAM = "stream";
  @SerializedName(SERIALIZED_NAME_STREAM)
  private StreamEnum stream;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public VideoMetadataInteractionsRent() {
  }

  public VideoMetadataInteractionsRent currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The currency code for the current user&#39;s region.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public VideoMetadataInteractionsRent displayPrice(String displayPrice) {
    this.displayPrice = displayPrice;
    return this;
  }

  /**
   * Formatted price to display to rent an On Demand video.
   * @return displayPrice
   */
  @javax.annotation.Nullable
  public String getDisplayPrice() {
    return displayPrice;
  }

  public void setDisplayPrice(String displayPrice) {
    this.displayPrice = displayPrice;
  }


  public VideoMetadataInteractionsRent drm(Boolean drm) {
    this.drm = drm;
    return this;
  }

  /**
   * Whether the video has DRM.
   * @return drm
   */
  @javax.annotation.Nonnull
  public Boolean getDrm() {
    return drm;
  }

  public void setDrm(Boolean drm) {
    this.drm = drm;
  }


  public VideoMetadataInteractionsRent expiresTime(String expiresTime) {
    this.expiresTime = expiresTime;
    return this;
  }

  /**
   * The time in ISO 8601 format when the rental period for the video expires.
   * @return expiresTime
   */
  @javax.annotation.Nullable
  public String getExpiresTime() {
    return expiresTime;
  }

  public void setExpiresTime(String expiresTime) {
    this.expiresTime = expiresTime;
  }


  public VideoMetadataInteractionsRent link(String link) {
    this.link = link;
    return this;
  }

  /**
   * The URL to rent the On Demand video on Vimeo.
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public VideoMetadataInteractionsRent price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * The numeric value of the price for buying the On Demand video.
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public VideoMetadataInteractionsRent purchaseTime(String purchaseTime) {
    this.purchaseTime = purchaseTime;
    return this;
  }

  /**
   * The time in ISO 8601 format when the On Demand video was rented.
   * @return purchaseTime
   */
  @javax.annotation.Nullable
  public String getPurchaseTime() {
    return purchaseTime;
  }

  public void setPurchaseTime(String purchaseTime) {
    this.purchaseTime = purchaseTime;
  }


  public VideoMetadataInteractionsRent stream(StreamEnum stream) {
    this.stream = stream;
    return this;
  }

  /**
   * The user&#39;s streaming access to this On Demand video:  Option descriptions:  * &#x60;available&#x60; - The video is available for streaming.  * &#x60;purchased&#x60; - The user has purchased the video.  * &#x60;restricted&#x60; - The user isn&#39;t permitted to stream the video.  * &#x60;unavailable&#x60; - The video isn&#39;t available for streaming. 
   * @return stream
   */
  @javax.annotation.Nonnull
  public StreamEnum getStream() {
    return stream;
  }

  public void setStream(StreamEnum stream) {
    this.stream = stream;
  }


  public VideoMetadataInteractionsRent uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The product URI to rent the On Demand video.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoMetadataInteractionsRent videoMetadataInteractionsRent = (VideoMetadataInteractionsRent) o;
    return Objects.equals(this.currency, videoMetadataInteractionsRent.currency) &&
        Objects.equals(this.displayPrice, videoMetadataInteractionsRent.displayPrice) &&
        Objects.equals(this.drm, videoMetadataInteractionsRent.drm) &&
        Objects.equals(this.expiresTime, videoMetadataInteractionsRent.expiresTime) &&
        Objects.equals(this.link, videoMetadataInteractionsRent.link) &&
        Objects.equals(this.price, videoMetadataInteractionsRent.price) &&
        Objects.equals(this.purchaseTime, videoMetadataInteractionsRent.purchaseTime) &&
        Objects.equals(this.stream, videoMetadataInteractionsRent.stream) &&
        Objects.equals(this.uri, videoMetadataInteractionsRent.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, displayPrice, drm, expiresTime, link, price, purchaseTime, stream, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoMetadataInteractionsRent {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    displayPrice: ").append(toIndentedString(displayPrice)).append("\n");
    sb.append("    drm: ").append(toIndentedString(drm)).append("\n");
    sb.append("    expiresTime: ").append(toIndentedString(expiresTime)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    purchaseTime: ").append(toIndentedString(purchaseTime)).append("\n");
    sb.append("    stream: ").append(toIndentedString(stream)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("display_price");
    openapiFields.add("drm");
    openapiFields.add("expires_time");
    openapiFields.add("link");
    openapiFields.add("price");
    openapiFields.add("purchase_time");
    openapiFields.add("stream");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("display_price");
    openapiRequiredFields.add("drm");
    openapiRequiredFields.add("expires_time");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("purchase_time");
    openapiRequiredFields.add("stream");
    openapiRequiredFields.add("uri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoMetadataInteractionsRent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoMetadataInteractionsRent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoMetadataInteractionsRent is not found in the empty JSON string", VideoMetadataInteractionsRent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoMetadataInteractionsRent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoMetadataInteractionsRent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VideoMetadataInteractionsRent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("display_price") != null && !jsonObj.get("display_price").isJsonNull()) && !jsonObj.get("display_price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_price").toString()));
      }
      if ((jsonObj.get("expires_time") != null && !jsonObj.get("expires_time").isJsonNull()) && !jsonObj.get("expires_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_time").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("purchase_time") != null && !jsonObj.get("purchase_time").isJsonNull()) && !jsonObj.get("purchase_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_time").toString()));
      }
      if (!jsonObj.get("stream").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream").toString()));
      }
      // validate the required field `stream`
      StreamEnum.validateJsonElement(jsonObj.get("stream"));
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoMetadataInteractionsRent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoMetadataInteractionsRent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoMetadataInteractionsRent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoMetadataInteractionsRent.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoMetadataInteractionsRent>() {
           @Override
           public void write(JsonWriter out, VideoMetadataInteractionsRent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoMetadataInteractionsRent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoMetadataInteractionsRent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoMetadataInteractionsRent
   * @throws IOException if the JSON string is invalid with respect to VideoMetadataInteractionsRent
   */
  public static VideoMetadataInteractionsRent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoMetadataInteractionsRent.class);
  }

  /**
   * Convert an instance of VideoMetadataInteractionsRent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

